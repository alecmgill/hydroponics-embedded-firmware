
hydro_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a1b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000674  0801a340  0801a340  0002a340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a9b4  0801a9b4  00030424  2**0
                  CONTENTS
  4 .ARM          00000008  0801a9b4  0801a9b4  0002a9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a9bc  0801a9bc  00030424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a9bc  0801a9bc  0002a9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a9c0  0801a9c0  0002a9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000424  20000000  0801a9c4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e098  20000428  0801ade8  00030428  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2000e4c0  0801ade8  0003e4c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030424  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005dcc6  00000000  00000000  0003044d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000944b  00000000  00000000  0008e113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002180  00000000  00000000  00097560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001df8  00000000  00000000  000996e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d986  00000000  00000000  0009b4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035474  00000000  00000000  000c8e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db636  00000000  00000000  000fe2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d9908  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009bcc  00000000  00000000  001d995c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000428 	.word	0x20000428
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a328 	.word	0x0801a328

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000042c 	.word	0x2000042c
 80001cc:	0801a328 	.word	0x0801a328

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_drsub>:
 80001f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f8:	e002      	b.n	8000200 <__adddf3>
 80001fa:	bf00      	nop

080001fc <__aeabi_dsub>:
 80001fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000200 <__adddf3>:
 8000200:	b530      	push	{r4, r5, lr}
 8000202:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000206:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800020a:	ea94 0f05 	teq	r4, r5
 800020e:	bf08      	it	eq
 8000210:	ea90 0f02 	teqeq	r0, r2
 8000214:	bf1f      	itttt	ne
 8000216:	ea54 0c00 	orrsne.w	ip, r4, r0
 800021a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000222:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000226:	f000 80e2 	beq.w	80003ee <__adddf3+0x1ee>
 800022a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000232:	bfb8      	it	lt
 8000234:	426d      	neglt	r5, r5
 8000236:	dd0c      	ble.n	8000252 <__adddf3+0x52>
 8000238:	442c      	add	r4, r5
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	ea82 0000 	eor.w	r0, r2, r0
 8000246:	ea83 0101 	eor.w	r1, r3, r1
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	2d36      	cmp	r5, #54	; 0x36
 8000254:	bf88      	it	hi
 8000256:	bd30      	pophi	{r4, r5, pc}
 8000258:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800025c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000260:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000264:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x70>
 800026a:	4240      	negs	r0, r0
 800026c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000270:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000274:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000278:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x84>
 800027e:	4252      	negs	r2, r2
 8000280:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000284:	ea94 0f05 	teq	r4, r5
 8000288:	f000 80a7 	beq.w	80003da <__adddf3+0x1da>
 800028c:	f1a4 0401 	sub.w	r4, r4, #1
 8000290:	f1d5 0e20 	rsbs	lr, r5, #32
 8000294:	db0d      	blt.n	80002b2 <__adddf3+0xb2>
 8000296:	fa02 fc0e 	lsl.w	ip, r2, lr
 800029a:	fa22 f205 	lsr.w	r2, r2, r5
 800029e:	1880      	adds	r0, r0, r2
 80002a0:	f141 0100 	adc.w	r1, r1, #0
 80002a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a8:	1880      	adds	r0, r0, r2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	4159      	adcs	r1, r3
 80002b0:	e00e      	b.n	80002d0 <__adddf3+0xd0>
 80002b2:	f1a5 0520 	sub.w	r5, r5, #32
 80002b6:	f10e 0e20 	add.w	lr, lr, #32
 80002ba:	2a01      	cmp	r2, #1
 80002bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c0:	bf28      	it	cs
 80002c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	18c0      	adds	r0, r0, r3
 80002cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d4:	d507      	bpl.n	80002e6 <__adddf3+0xe6>
 80002d6:	f04f 0e00 	mov.w	lr, #0
 80002da:	f1dc 0c00 	rsbs	ip, ip, #0
 80002de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ea:	d31b      	bcc.n	8000324 <__adddf3+0x124>
 80002ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f0:	d30c      	bcc.n	800030c <__adddf3+0x10c>
 80002f2:	0849      	lsrs	r1, r1, #1
 80002f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002fc:	f104 0401 	add.w	r4, r4, #1
 8000300:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000304:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000308:	f080 809a 	bcs.w	8000440 <__adddf3+0x240>
 800030c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000310:	bf08      	it	eq
 8000312:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000316:	f150 0000 	adcs.w	r0, r0, #0
 800031a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031e:	ea41 0105 	orr.w	r1, r1, r5
 8000322:	bd30      	pop	{r4, r5, pc}
 8000324:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000328:	4140      	adcs	r0, r0
 800032a:	eb41 0101 	adc.w	r1, r1, r1
 800032e:	3c01      	subs	r4, #1
 8000330:	bf28      	it	cs
 8000332:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000336:	d2e9      	bcs.n	800030c <__adddf3+0x10c>
 8000338:	f091 0f00 	teq	r1, #0
 800033c:	bf04      	itt	eq
 800033e:	4601      	moveq	r1, r0
 8000340:	2000      	moveq	r0, #0
 8000342:	fab1 f381 	clz	r3, r1
 8000346:	bf08      	it	eq
 8000348:	3320      	addeq	r3, #32
 800034a:	f1a3 030b 	sub.w	r3, r3, #11
 800034e:	f1b3 0220 	subs.w	r2, r3, #32
 8000352:	da0c      	bge.n	800036e <__adddf3+0x16e>
 8000354:	320c      	adds	r2, #12
 8000356:	dd08      	ble.n	800036a <__adddf3+0x16a>
 8000358:	f102 0c14 	add.w	ip, r2, #20
 800035c:	f1c2 020c 	rsb	r2, r2, #12
 8000360:	fa01 f00c 	lsl.w	r0, r1, ip
 8000364:	fa21 f102 	lsr.w	r1, r1, r2
 8000368:	e00c      	b.n	8000384 <__adddf3+0x184>
 800036a:	f102 0214 	add.w	r2, r2, #20
 800036e:	bfd8      	it	le
 8000370:	f1c2 0c20 	rsble	ip, r2, #32
 8000374:	fa01 f102 	lsl.w	r1, r1, r2
 8000378:	fa20 fc0c 	lsr.w	ip, r0, ip
 800037c:	bfdc      	itt	le
 800037e:	ea41 010c 	orrle.w	r1, r1, ip
 8000382:	4090      	lslle	r0, r2
 8000384:	1ae4      	subs	r4, r4, r3
 8000386:	bfa2      	ittt	ge
 8000388:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800038c:	4329      	orrge	r1, r5
 800038e:	bd30      	popge	{r4, r5, pc}
 8000390:	ea6f 0404 	mvn.w	r4, r4
 8000394:	3c1f      	subs	r4, #31
 8000396:	da1c      	bge.n	80003d2 <__adddf3+0x1d2>
 8000398:	340c      	adds	r4, #12
 800039a:	dc0e      	bgt.n	80003ba <__adddf3+0x1ba>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0220 	rsb	r2, r4, #32
 80003a4:	fa20 f004 	lsr.w	r0, r0, r4
 80003a8:	fa01 f302 	lsl.w	r3, r1, r2
 80003ac:	ea40 0003 	orr.w	r0, r0, r3
 80003b0:	fa21 f304 	lsr.w	r3, r1, r4
 80003b4:	ea45 0103 	orr.w	r1, r5, r3
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f1c4 040c 	rsb	r4, r4, #12
 80003be:	f1c4 0220 	rsb	r2, r4, #32
 80003c2:	fa20 f002 	lsr.w	r0, r0, r2
 80003c6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ca:	ea40 0003 	orr.w	r0, r0, r3
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	fa21 f004 	lsr.w	r0, r1, r4
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	f094 0f00 	teq	r4, #0
 80003de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003e2:	bf06      	itte	eq
 80003e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e8:	3401      	addeq	r4, #1
 80003ea:	3d01      	subne	r5, #1
 80003ec:	e74e      	b.n	800028c <__adddf3+0x8c>
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf18      	it	ne
 80003f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f8:	d029      	beq.n	800044e <__adddf3+0x24e>
 80003fa:	ea94 0f05 	teq	r4, r5
 80003fe:	bf08      	it	eq
 8000400:	ea90 0f02 	teqeq	r0, r2
 8000404:	d005      	beq.n	8000412 <__adddf3+0x212>
 8000406:	ea54 0c00 	orrs.w	ip, r4, r0
 800040a:	bf04      	itt	eq
 800040c:	4619      	moveq	r1, r3
 800040e:	4610      	moveq	r0, r2
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	ea91 0f03 	teq	r1, r3
 8000416:	bf1e      	ittt	ne
 8000418:	2100      	movne	r1, #0
 800041a:	2000      	movne	r0, #0
 800041c:	bd30      	popne	{r4, r5, pc}
 800041e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000422:	d105      	bne.n	8000430 <__adddf3+0x230>
 8000424:	0040      	lsls	r0, r0, #1
 8000426:	4149      	adcs	r1, r1
 8000428:	bf28      	it	cs
 800042a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000434:	bf3c      	itt	cc
 8000436:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800043a:	bd30      	popcc	{r4, r5, pc}
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000440:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000444:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000448:	f04f 0000 	mov.w	r0, #0
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf1a      	itte	ne
 8000454:	4619      	movne	r1, r3
 8000456:	4610      	movne	r0, r2
 8000458:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800045c:	bf1c      	itt	ne
 800045e:	460b      	movne	r3, r1
 8000460:	4602      	movne	r2, r0
 8000462:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000466:	bf06      	itte	eq
 8000468:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800046c:	ea91 0f03 	teqeq	r1, r3
 8000470:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	bf00      	nop

08000478 <__aeabi_ui2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f04f 0500 	mov.w	r5, #0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e750      	b.n	8000338 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_i2d>:
 8000498:	f090 0f00 	teq	r0, #0
 800049c:	bf04      	itt	eq
 800049e:	2100      	moveq	r1, #0
 80004a0:	4770      	bxeq	lr
 80004a2:	b530      	push	{r4, r5, lr}
 80004a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b0:	bf48      	it	mi
 80004b2:	4240      	negmi	r0, r0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e73e      	b.n	8000338 <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_f2d>:
 80004bc:	0042      	lsls	r2, r0, #1
 80004be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ca:	bf1f      	itttt	ne
 80004cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d8:	4770      	bxne	lr
 80004da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004de:	bf08      	it	eq
 80004e0:	4770      	bxeq	lr
 80004e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e6:	bf04      	itt	eq
 80004e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	e71c      	b.n	8000338 <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_ul2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	e00a      	b.n	8000526 <__aeabi_l2d+0x16>

08000510 <__aeabi_l2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051e:	d502      	bpl.n	8000526 <__aeabi_l2d+0x16>
 8000520:	4240      	negs	r0, r0
 8000522:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000526:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000532:	f43f aed8 	beq.w	80002e6 <__adddf3+0xe6>
 8000536:	f04f 0203 	mov.w	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054e:	f1c2 0320 	rsb	r3, r2, #32
 8000552:	fa00 fc03 	lsl.w	ip, r0, r3
 8000556:	fa20 f002 	lsr.w	r0, r0, r2
 800055a:	fa01 fe03 	lsl.w	lr, r1, r3
 800055e:	ea40 000e 	orr.w	r0, r0, lr
 8000562:	fa21 f102 	lsr.w	r1, r1, r2
 8000566:	4414      	add	r4, r2
 8000568:	e6bd      	b.n	80002e6 <__adddf3+0xe6>
 800056a:	bf00      	nop

0800056c <__aeabi_dmul>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000572:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000576:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800057a:	bf1d      	ittte	ne
 800057c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000580:	ea94 0f0c 	teqne	r4, ip
 8000584:	ea95 0f0c 	teqne	r5, ip
 8000588:	f000 f8de 	bleq	8000748 <__aeabi_dmul+0x1dc>
 800058c:	442c      	add	r4, r5
 800058e:	ea81 0603 	eor.w	r6, r1, r3
 8000592:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000596:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800059a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059e:	bf18      	it	ne
 80005a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005ac:	d038      	beq.n	8000620 <__aeabi_dmul+0xb4>
 80005ae:	fba0 ce02 	umull	ip, lr, r0, r2
 80005b2:	f04f 0500 	mov.w	r5, #0
 80005b6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005be:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005c2:	f04f 0600 	mov.w	r6, #0
 80005c6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ca:	f09c 0f00 	teq	ip, #0
 80005ce:	bf18      	it	ne
 80005d0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e0:	d204      	bcs.n	80005ec <__aeabi_dmul+0x80>
 80005e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e6:	416d      	adcs	r5, r5
 80005e8:	eb46 0606 	adc.w	r6, r6, r6
 80005ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000600:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000604:	bf88      	it	hi
 8000606:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800060a:	d81e      	bhi.n	800064a <__aeabi_dmul+0xde>
 800060c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000624:	ea46 0101 	orr.w	r1, r6, r1
 8000628:	ea40 0002 	orr.w	r0, r0, r2
 800062c:	ea81 0103 	eor.w	r1, r1, r3
 8000630:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000634:	bfc2      	ittt	gt
 8000636:	ebd4 050c 	rsbsgt	r5, r4, ip
 800063a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063e:	bd70      	popgt	{r4, r5, r6, pc}
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f04f 0e00 	mov.w	lr, #0
 8000648:	3c01      	subs	r4, #1
 800064a:	f300 80ab 	bgt.w	80007a4 <__aeabi_dmul+0x238>
 800064e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000652:	bfde      	ittt	le
 8000654:	2000      	movle	r0, #0
 8000656:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800065a:	bd70      	pople	{r4, r5, r6, pc}
 800065c:	f1c4 0400 	rsb	r4, r4, #0
 8000660:	3c20      	subs	r4, #32
 8000662:	da35      	bge.n	80006d0 <__aeabi_dmul+0x164>
 8000664:	340c      	adds	r4, #12
 8000666:	dc1b      	bgt.n	80006a0 <__aeabi_dmul+0x134>
 8000668:	f104 0414 	add.w	r4, r4, #20
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f305 	lsl.w	r3, r0, r5
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f205 	lsl.w	r2, r1, r5
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	fa21 f604 	lsr.w	r6, r1, r4
 8000690:	eb42 0106 	adc.w	r1, r2, r6
 8000694:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000698:	bf08      	it	eq
 800069a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f1c4 040c 	rsb	r4, r4, #12
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f304 	lsl.w	r3, r0, r4
 80006ac:	fa20 f005 	lsr.w	r0, r0, r5
 80006b0:	fa01 f204 	lsl.w	r2, r1, r4
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	f141 0100 	adc.w	r1, r1, #0
 80006c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c8:	bf08      	it	eq
 80006ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f205 	lsl.w	r2, r0, r5
 80006d8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006dc:	fa20 f304 	lsr.w	r3, r0, r4
 80006e0:	fa01 f205 	lsl.w	r2, r1, r5
 80006e4:	ea43 0302 	orr.w	r3, r3, r2
 80006e8:	fa21 f004 	lsr.w	r0, r1, r4
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	fa21 f204 	lsr.w	r2, r1, r4
 80006f4:	ea20 0002 	bic.w	r0, r0, r2
 80006f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000700:	bf08      	it	eq
 8000702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f094 0f00 	teq	r4, #0
 800070c:	d10f      	bne.n	800072e <__aeabi_dmul+0x1c2>
 800070e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000712:	0040      	lsls	r0, r0, #1
 8000714:	eb41 0101 	adc.w	r1, r1, r1
 8000718:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3c01      	subeq	r4, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1a6>
 8000722:	ea41 0106 	orr.w	r1, r1, r6
 8000726:	f095 0f00 	teq	r5, #0
 800072a:	bf18      	it	ne
 800072c:	4770      	bxne	lr
 800072e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000732:	0052      	lsls	r2, r2, #1
 8000734:	eb43 0303 	adc.w	r3, r3, r3
 8000738:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800073c:	bf08      	it	eq
 800073e:	3d01      	subeq	r5, #1
 8000740:	d0f7      	beq.n	8000732 <__aeabi_dmul+0x1c6>
 8000742:	ea43 0306 	orr.w	r3, r3, r6
 8000746:	4770      	bx	lr
 8000748:	ea94 0f0c 	teq	r4, ip
 800074c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000750:	bf18      	it	ne
 8000752:	ea95 0f0c 	teqne	r5, ip
 8000756:	d00c      	beq.n	8000772 <__aeabi_dmul+0x206>
 8000758:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075c:	bf18      	it	ne
 800075e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000762:	d1d1      	bne.n	8000708 <__aeabi_dmul+0x19c>
 8000764:	ea81 0103 	eor.w	r1, r1, r3
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	f04f 0000 	mov.w	r0, #0
 8000770:	bd70      	pop	{r4, r5, r6, pc}
 8000772:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000776:	bf06      	itte	eq
 8000778:	4610      	moveq	r0, r2
 800077a:	4619      	moveq	r1, r3
 800077c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000780:	d019      	beq.n	80007b6 <__aeabi_dmul+0x24a>
 8000782:	ea94 0f0c 	teq	r4, ip
 8000786:	d102      	bne.n	800078e <__aeabi_dmul+0x222>
 8000788:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800078c:	d113      	bne.n	80007b6 <__aeabi_dmul+0x24a>
 800078e:	ea95 0f0c 	teq	r5, ip
 8000792:	d105      	bne.n	80007a0 <__aeabi_dmul+0x234>
 8000794:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000798:	bf1c      	itt	ne
 800079a:	4610      	movne	r0, r2
 800079c:	4619      	movne	r1, r3
 800079e:	d10a      	bne.n	80007b6 <__aeabi_dmul+0x24a>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007be:	bd70      	pop	{r4, r5, r6, pc}

080007c0 <__aeabi_ddiv>:
 80007c0:	b570      	push	{r4, r5, r6, lr}
 80007c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ce:	bf1d      	ittte	ne
 80007d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d4:	ea94 0f0c 	teqne	r4, ip
 80007d8:	ea95 0f0c 	teqne	r5, ip
 80007dc:	f000 f8a7 	bleq	800092e <__aeabi_ddiv+0x16e>
 80007e0:	eba4 0405 	sub.w	r4, r4, r5
 80007e4:	ea81 0e03 	eor.w	lr, r1, r3
 80007e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f0:	f000 8088 	beq.w	8000904 <__aeabi_ddiv+0x144>
 80007f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000800:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000804:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000808:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800080c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000810:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000814:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000818:	429d      	cmp	r5, r3
 800081a:	bf08      	it	eq
 800081c:	4296      	cmpeq	r6, r2
 800081e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000822:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000826:	d202      	bcs.n	800082e <__aeabi_ddiv+0x6e>
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	1ab6      	subs	r6, r6, r2
 8000830:	eb65 0503 	sbc.w	r5, r5, r3
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000842:	ebb6 0e02 	subs.w	lr, r6, r2
 8000846:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084a:	bf22      	ittt	cs
 800084c:	1ab6      	subcs	r6, r6, r2
 800084e:	4675      	movcs	r5, lr
 8000850:	ea40 000c 	orrcs.w	r0, r0, ip
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	ebb6 0e02 	subs.w	lr, r6, r2
 800085e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000862:	bf22      	ittt	cs
 8000864:	1ab6      	subcs	r6, r6, r2
 8000866:	4675      	movcs	r5, lr
 8000868:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	ebb6 0e02 	subs.w	lr, r6, r2
 800088e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000892:	bf22      	ittt	cs
 8000894:	1ab6      	subcs	r6, r6, r2
 8000896:	4675      	movcs	r5, lr
 8000898:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800089c:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a0:	d018      	beq.n	80008d4 <__aeabi_ddiv+0x114>
 80008a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008be:	d1c0      	bne.n	8000842 <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	d10b      	bne.n	80008de <__aeabi_ddiv+0x11e>
 80008c6:	ea41 0100 	orr.w	r1, r1, r0
 80008ca:	f04f 0000 	mov.w	r0, #0
 80008ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008d2:	e7b6      	b.n	8000842 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	bf04      	itt	eq
 80008da:	4301      	orreq	r1, r0
 80008dc:	2000      	moveq	r0, #0
 80008de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008e2:	bf88      	it	hi
 80008e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e8:	f63f aeaf 	bhi.w	800064a <__aeabi_dmul+0xde>
 80008ec:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f0:	bf04      	itt	eq
 80008f2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008fa:	f150 0000 	adcs.w	r0, r0, #0
 80008fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000902:	bd70      	pop	{r4, r5, r6, pc}
 8000904:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000908:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800090c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000910:	bfc2      	ittt	gt
 8000912:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000916:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091a:	bd70      	popgt	{r4, r5, r6, pc}
 800091c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000920:	f04f 0e00 	mov.w	lr, #0
 8000924:	3c01      	subs	r4, #1
 8000926:	e690      	b.n	800064a <__aeabi_dmul+0xde>
 8000928:	ea45 0e06 	orr.w	lr, r5, r6
 800092c:	e68d      	b.n	800064a <__aeabi_dmul+0xde>
 800092e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000932:	ea94 0f0c 	teq	r4, ip
 8000936:	bf08      	it	eq
 8000938:	ea95 0f0c 	teqeq	r5, ip
 800093c:	f43f af3b 	beq.w	80007b6 <__aeabi_dmul+0x24a>
 8000940:	ea94 0f0c 	teq	r4, ip
 8000944:	d10a      	bne.n	800095c <__aeabi_ddiv+0x19c>
 8000946:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800094a:	f47f af34 	bne.w	80007b6 <__aeabi_dmul+0x24a>
 800094e:	ea95 0f0c 	teq	r5, ip
 8000952:	f47f af25 	bne.w	80007a0 <__aeabi_dmul+0x234>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e72c      	b.n	80007b6 <__aeabi_dmul+0x24a>
 800095c:	ea95 0f0c 	teq	r5, ip
 8000960:	d106      	bne.n	8000970 <__aeabi_ddiv+0x1b0>
 8000962:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000966:	f43f aefd 	beq.w	8000764 <__aeabi_dmul+0x1f8>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e722      	b.n	80007b6 <__aeabi_dmul+0x24a>
 8000970:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000974:	bf18      	it	ne
 8000976:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800097a:	f47f aec5 	bne.w	8000708 <__aeabi_dmul+0x19c>
 800097e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000982:	f47f af0d 	bne.w	80007a0 <__aeabi_dmul+0x234>
 8000986:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800098a:	f47f aeeb 	bne.w	8000764 <__aeabi_dmul+0x1f8>
 800098e:	e712      	b.n	80007b6 <__aeabi_dmul+0x24a>

08000990 <__gedf2>:
 8000990:	f04f 3cff 	mov.w	ip, #4294967295
 8000994:	e006      	b.n	80009a4 <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__ledf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	e002      	b.n	80009a4 <__cmpdf2+0x4>
 800099e:	bf00      	nop

080009a0 <__cmpdf2>:
 80009a0:	f04f 0c01 	mov.w	ip, #1
 80009a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b4:	bf18      	it	ne
 80009b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ba:	d01b      	beq.n	80009f4 <__cmpdf2+0x54>
 80009bc:	b001      	add	sp, #4
 80009be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009c2:	bf0c      	ite	eq
 80009c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c8:	ea91 0f03 	teqne	r1, r3
 80009cc:	bf02      	ittt	eq
 80009ce:	ea90 0f02 	teqeq	r0, r2
 80009d2:	2000      	moveq	r0, #0
 80009d4:	4770      	bxeq	lr
 80009d6:	f110 0f00 	cmn.w	r0, #0
 80009da:	ea91 0f03 	teq	r1, r3
 80009de:	bf58      	it	pl
 80009e0:	4299      	cmppl	r1, r3
 80009e2:	bf08      	it	eq
 80009e4:	4290      	cmpeq	r0, r2
 80009e6:	bf2c      	ite	cs
 80009e8:	17d8      	asrcs	r0, r3, #31
 80009ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ee:	f040 0001 	orr.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d102      	bne.n	8000a04 <__cmpdf2+0x64>
 80009fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a02:	d107      	bne.n	8000a14 <__cmpdf2+0x74>
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d1d6      	bne.n	80009bc <__cmpdf2+0x1c>
 8000a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a12:	d0d3      	beq.n	80009bc <__cmpdf2+0x1c>
 8000a14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_cdrcmple>:
 8000a1c:	4684      	mov	ip, r0
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4662      	mov	r2, ip
 8000a22:	468c      	mov	ip, r1
 8000a24:	4619      	mov	r1, r3
 8000a26:	4663      	mov	r3, ip
 8000a28:	e000      	b.n	8000a2c <__aeabi_cdcmpeq>
 8000a2a:	bf00      	nop

08000a2c <__aeabi_cdcmpeq>:
 8000a2c:	b501      	push	{r0, lr}
 8000a2e:	f7ff ffb7 	bl	80009a0 <__cmpdf2>
 8000a32:	2800      	cmp	r0, #0
 8000a34:	bf48      	it	mi
 8000a36:	f110 0f00 	cmnmi.w	r0, #0
 8000a3a:	bd01      	pop	{r0, pc}

08000a3c <__aeabi_dcmpeq>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff fff4 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a44:	bf0c      	ite	eq
 8000a46:	2001      	moveq	r0, #1
 8000a48:	2000      	movne	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmplt>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffea 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a58:	bf34      	ite	cc
 8000a5a:	2001      	movcc	r0, #1
 8000a5c:	2000      	movcs	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmple>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffe0 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpge>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffce 	bl	8000a1c <__aeabi_cdrcmple>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpgt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffc4 	bl	8000a1c <__aeabi_cdrcmple>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpun>:
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__aeabi_dcmpun+0x10>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d10a      	bne.n	8000ac6 <__aeabi_dcmpun+0x26>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__aeabi_dcmpun+0x20>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_dcmpun+0x26>
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0001 	mov.w	r0, #1
 8000aca:	4770      	bx	lr

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b9a6 	b.w	8000f60 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f83e 	bl	8000c9c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__aeabi_d2lz>:
 8000c2c:	b538      	push	{r3, r4, r5, lr}
 8000c2e:	460c      	mov	r4, r1
 8000c30:	4605      	mov	r5, r0
 8000c32:	4621      	mov	r1, r4
 8000c34:	4628      	mov	r0, r5
 8000c36:	2200      	movs	r2, #0
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f7ff ff09 	bl	8000a50 <__aeabi_dcmplt>
 8000c3e:	b928      	cbnz	r0, 8000c4c <__aeabi_d2lz+0x20>
 8000c40:	4628      	mov	r0, r5
 8000c42:	4621      	mov	r1, r4
 8000c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c48:	f000 b80a 	b.w	8000c60 <__aeabi_d2ulz>
 8000c4c:	4628      	mov	r0, r5
 8000c4e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c52:	f000 f805 	bl	8000c60 <__aeabi_d2ulz>
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	bd38      	pop	{r3, r4, r5, pc}
 8000c5e:	bf00      	nop

08000c60 <__aeabi_d2ulz>:
 8000c60:	b5d0      	push	{r4, r6, r7, lr}
 8000c62:	2200      	movs	r2, #0
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <__aeabi_d2ulz+0x34>)
 8000c66:	4606      	mov	r6, r0
 8000c68:	460f      	mov	r7, r1
 8000c6a:	f7ff fc7f 	bl	800056c <__aeabi_dmul>
 8000c6e:	f7ff ff55 	bl	8000b1c <__aeabi_d2uiz>
 8000c72:	4604      	mov	r4, r0
 8000c74:	f7ff fc00 	bl	8000478 <__aeabi_ui2d>
 8000c78:	2200      	movs	r2, #0
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <__aeabi_d2ulz+0x38>)
 8000c7c:	f7ff fc76 	bl	800056c <__aeabi_dmul>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	4630      	mov	r0, r6
 8000c86:	4639      	mov	r1, r7
 8000c88:	f7ff fab8 	bl	80001fc <__aeabi_dsub>
 8000c8c:	f7ff ff46 	bl	8000b1c <__aeabi_d2uiz>
 8000c90:	4621      	mov	r1, r4
 8000c92:	bdd0      	pop	{r4, r6, r7, pc}
 8000c94:	3df00000 	.word	0x3df00000
 8000c98:	41f00000 	.word	0x41f00000

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9e08      	ldr	r6, [sp, #32]
 8000ca2:	460d      	mov	r5, r1
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	468e      	mov	lr, r1
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f040 8083 	bne.w	8000db4 <__udivmoddi4+0x118>
 8000cae:	428a      	cmp	r2, r1
 8000cb0:	4617      	mov	r7, r2
 8000cb2:	d947      	bls.n	8000d44 <__udivmoddi4+0xa8>
 8000cb4:	fab2 f382 	clz	r3, r2
 8000cb8:	b14b      	cbz	r3, 8000cce <__udivmoddi4+0x32>
 8000cba:	f1c3 0120 	rsb	r1, r3, #32
 8000cbe:	fa05 fe03 	lsl.w	lr, r5, r3
 8000cc2:	fa20 f101 	lsr.w	r1, r0, r1
 8000cc6:	409f      	lsls	r7, r3
 8000cc8:	ea41 0e0e 	orr.w	lr, r1, lr
 8000ccc:	409c      	lsls	r4, r3
 8000cce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd2:	fbbe fcf8 	udiv	ip, lr, r8
 8000cd6:	fa1f f987 	uxth.w	r9, r7
 8000cda:	fb08 e21c 	mls	r2, r8, ip, lr
 8000cde:	fb0c f009 	mul.w	r0, ip, r9
 8000ce2:	0c21      	lsrs	r1, r4, #16
 8000ce4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	d90a      	bls.n	8000d02 <__udivmoddi4+0x66>
 8000cec:	18ba      	adds	r2, r7, r2
 8000cee:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000cf2:	f080 8118 	bcs.w	8000f26 <__udivmoddi4+0x28a>
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	f240 8115 	bls.w	8000f26 <__udivmoddi4+0x28a>
 8000cfc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d00:	443a      	add	r2, r7
 8000d02:	1a12      	subs	r2, r2, r0
 8000d04:	fbb2 f0f8 	udiv	r0, r2, r8
 8000d08:	fb08 2210 	mls	r2, r8, r0, r2
 8000d0c:	fb00 f109 	mul.w	r1, r0, r9
 8000d10:	b2a4      	uxth	r4, r4
 8000d12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d16:	42a1      	cmp	r1, r4
 8000d18:	d909      	bls.n	8000d2e <__udivmoddi4+0x92>
 8000d1a:	193c      	adds	r4, r7, r4
 8000d1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d20:	f080 8103 	bcs.w	8000f2a <__udivmoddi4+0x28e>
 8000d24:	42a1      	cmp	r1, r4
 8000d26:	f240 8100 	bls.w	8000f2a <__udivmoddi4+0x28e>
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	1a64      	subs	r4, r4, r1
 8000d30:	2100      	movs	r1, #0
 8000d32:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d36:	b11e      	cbz	r6, 8000d40 <__udivmoddi4+0xa4>
 8000d38:	2200      	movs	r2, #0
 8000d3a:	40dc      	lsrs	r4, r3
 8000d3c:	e9c6 4200 	strd	r4, r2, [r6]
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	b902      	cbnz	r2, 8000d48 <__udivmoddi4+0xac>
 8000d46:	deff      	udf	#255	; 0xff
 8000d48:	fab2 f382 	clz	r3, r2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14f      	bne.n	8000df0 <__udivmoddi4+0x154>
 8000d50:	1a8d      	subs	r5, r1, r2
 8000d52:	2101      	movs	r1, #1
 8000d54:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000d58:	fa1f f882 	uxth.w	r8, r2
 8000d5c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000d60:	fb0e 551c 	mls	r5, lr, ip, r5
 8000d64:	fb08 f00c 	mul.w	r0, r8, ip
 8000d68:	0c22      	lsrs	r2, r4, #16
 8000d6a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000d6e:	42a8      	cmp	r0, r5
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0xe6>
 8000d72:	197d      	adds	r5, r7, r5
 8000d74:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000d78:	d202      	bcs.n	8000d80 <__udivmoddi4+0xe4>
 8000d7a:	42a8      	cmp	r0, r5
 8000d7c:	f200 80e9 	bhi.w	8000f52 <__udivmoddi4+0x2b6>
 8000d80:	4694      	mov	ip, r2
 8000d82:	1a2d      	subs	r5, r5, r0
 8000d84:	fbb5 f0fe 	udiv	r0, r5, lr
 8000d88:	fb0e 5510 	mls	r5, lr, r0, r5
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	b2a4      	uxth	r4, r4
 8000d92:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d96:	45a0      	cmp	r8, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x10e>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da0:	d202      	bcs.n	8000da8 <__udivmoddi4+0x10c>
 8000da2:	45a0      	cmp	r8, r4
 8000da4:	f200 80d9 	bhi.w	8000f5a <__udivmoddi4+0x2be>
 8000da8:	4610      	mov	r0, r2
 8000daa:	eba4 0408 	sub.w	r4, r4, r8
 8000dae:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db2:	e7c0      	b.n	8000d36 <__udivmoddi4+0x9a>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x12e>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	f000 80b1 	beq.w	8000f20 <__udivmoddi4+0x284>
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	e9c6 0500 	strd	r0, r5, [r6]
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f183 	clz	r1, r3
 8000dce:	2900      	cmp	r1, #0
 8000dd0:	d14b      	bne.n	8000e6a <__udivmoddi4+0x1ce>
 8000dd2:	42ab      	cmp	r3, r5
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0x140>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80b9 	bhi.w	8000f4e <__udivmoddi4+0x2b2>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb65 0303 	sbc.w	r3, r5, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	469e      	mov	lr, r3
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	d0aa      	beq.n	8000d40 <__udivmoddi4+0xa4>
 8000dea:	e9c6 4e00 	strd	r4, lr, [r6]
 8000dee:	e7a7      	b.n	8000d40 <__udivmoddi4+0xa4>
 8000df0:	409f      	lsls	r7, r3
 8000df2:	f1c3 0220 	rsb	r2, r3, #32
 8000df6:	40d1      	lsrs	r1, r2
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e00:	fa1f f887 	uxth.w	r8, r7
 8000e04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e08:	fa24 f202 	lsr.w	r2, r4, r2
 8000e0c:	409d      	lsls	r5, r3
 8000e0e:	fb00 fc08 	mul.w	ip, r0, r8
 8000e12:	432a      	orrs	r2, r5
 8000e14:	0c15      	lsrs	r5, r2, #16
 8000e16:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000e1a:	45ac      	cmp	ip, r5
 8000e1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0x19a>
 8000e22:	197d      	adds	r5, r7, r5
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	f080 808f 	bcs.w	8000f4a <__udivmoddi4+0x2ae>
 8000e2c:	45ac      	cmp	ip, r5
 8000e2e:	f240 808c 	bls.w	8000f4a <__udivmoddi4+0x2ae>
 8000e32:	3802      	subs	r0, #2
 8000e34:	443d      	add	r5, r7
 8000e36:	eba5 050c 	sub.w	r5, r5, ip
 8000e3a:	fbb5 f1fe 	udiv	r1, r5, lr
 8000e3e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000e42:	fb01 f908 	mul.w	r9, r1, r8
 8000e46:	b295      	uxth	r5, r2
 8000e48:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000e4c:	45a9      	cmp	r9, r5
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x1c4>
 8000e50:	197d      	adds	r5, r7, r5
 8000e52:	f101 32ff 	add.w	r2, r1, #4294967295
 8000e56:	d274      	bcs.n	8000f42 <__udivmoddi4+0x2a6>
 8000e58:	45a9      	cmp	r9, r5
 8000e5a:	d972      	bls.n	8000f42 <__udivmoddi4+0x2a6>
 8000e5c:	3902      	subs	r1, #2
 8000e5e:	443d      	add	r5, r7
 8000e60:	eba5 0509 	sub.w	r5, r5, r9
 8000e64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e68:	e778      	b.n	8000d5c <__udivmoddi4+0xc0>
 8000e6a:	f1c1 0720 	rsb	r7, r1, #32
 8000e6e:	408b      	lsls	r3, r1
 8000e70:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e74:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e78:	fa25 f407 	lsr.w	r4, r5, r7
 8000e7c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e80:	fbb4 f9fe 	udiv	r9, r4, lr
 8000e84:	fa1f f88c 	uxth.w	r8, ip
 8000e88:	fb0e 4419 	mls	r4, lr, r9, r4
 8000e8c:	fa20 f307 	lsr.w	r3, r0, r7
 8000e90:	fb09 fa08 	mul.w	sl, r9, r8
 8000e94:	408d      	lsls	r5, r1
 8000e96:	431d      	orrs	r5, r3
 8000e98:	0c2b      	lsrs	r3, r5, #16
 8000e9a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e9e:	45a2      	cmp	sl, r4
 8000ea0:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea4:	fa00 f301 	lsl.w	r3, r0, r1
 8000ea8:	d909      	bls.n	8000ebe <__udivmoddi4+0x222>
 8000eaa:	eb1c 0404 	adds.w	r4, ip, r4
 8000eae:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb2:	d248      	bcs.n	8000f46 <__udivmoddi4+0x2aa>
 8000eb4:	45a2      	cmp	sl, r4
 8000eb6:	d946      	bls.n	8000f46 <__udivmoddi4+0x2aa>
 8000eb8:	f1a9 0902 	sub.w	r9, r9, #2
 8000ebc:	4464      	add	r4, ip
 8000ebe:	eba4 040a 	sub.w	r4, r4, sl
 8000ec2:	fbb4 f0fe 	udiv	r0, r4, lr
 8000ec6:	fb0e 4410 	mls	r4, lr, r0, r4
 8000eca:	fb00 fa08 	mul.w	sl, r0, r8
 8000ece:	b2ad      	uxth	r5, r5
 8000ed0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ed4:	45a2      	cmp	sl, r4
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x24e>
 8000ed8:	eb1c 0404 	adds.w	r4, ip, r4
 8000edc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ee0:	d22d      	bcs.n	8000f3e <__udivmoddi4+0x2a2>
 8000ee2:	45a2      	cmp	sl, r4
 8000ee4:	d92b      	bls.n	8000f3e <__udivmoddi4+0x2a2>
 8000ee6:	3802      	subs	r0, #2
 8000ee8:	4464      	add	r4, ip
 8000eea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ef2:	eba4 040a 	sub.w	r4, r4, sl
 8000ef6:	454c      	cmp	r4, r9
 8000ef8:	46c6      	mov	lr, r8
 8000efa:	464d      	mov	r5, r9
 8000efc:	d319      	bcc.n	8000f32 <__udivmoddi4+0x296>
 8000efe:	d016      	beq.n	8000f2e <__udivmoddi4+0x292>
 8000f00:	b15e      	cbz	r6, 8000f1a <__udivmoddi4+0x27e>
 8000f02:	ebb3 020e 	subs.w	r2, r3, lr
 8000f06:	eb64 0405 	sbc.w	r4, r4, r5
 8000f0a:	fa04 f707 	lsl.w	r7, r4, r7
 8000f0e:	fa22 f301 	lsr.w	r3, r2, r1
 8000f12:	431f      	orrs	r7, r3
 8000f14:	40cc      	lsrs	r4, r1
 8000f16:	e9c6 7400 	strd	r7, r4, [r6]
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f20:	4631      	mov	r1, r6
 8000f22:	4630      	mov	r0, r6
 8000f24:	e70c      	b.n	8000d40 <__udivmoddi4+0xa4>
 8000f26:	468c      	mov	ip, r1
 8000f28:	e6eb      	b.n	8000d02 <__udivmoddi4+0x66>
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	e6ff      	b.n	8000d2e <__udivmoddi4+0x92>
 8000f2e:	4543      	cmp	r3, r8
 8000f30:	d2e6      	bcs.n	8000f00 <__udivmoddi4+0x264>
 8000f32:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f36:	eb69 050c 	sbc.w	r5, r9, ip
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7e0      	b.n	8000f00 <__udivmoddi4+0x264>
 8000f3e:	4628      	mov	r0, r5
 8000f40:	e7d3      	b.n	8000eea <__udivmoddi4+0x24e>
 8000f42:	4611      	mov	r1, r2
 8000f44:	e78c      	b.n	8000e60 <__udivmoddi4+0x1c4>
 8000f46:	4681      	mov	r9, r0
 8000f48:	e7b9      	b.n	8000ebe <__udivmoddi4+0x222>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e773      	b.n	8000e36 <__udivmoddi4+0x19a>
 8000f4e:	4608      	mov	r0, r1
 8000f50:	e749      	b.n	8000de6 <__udivmoddi4+0x14a>
 8000f52:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f56:	443d      	add	r5, r7
 8000f58:	e713      	b.n	8000d82 <__udivmoddi4+0xe6>
 8000f5a:	3802      	subs	r0, #2
 8000f5c:	443c      	add	r4, r7
 8000f5e:	e724      	b.n	8000daa <__udivmoddi4+0x10e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <Mount_USB>:




void Mount_USB (void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4905      	ldr	r1, [pc, #20]	; (8000f80 <Mount_USB+0x1c>)
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <Mount_USB+0x20>)
 8000f6e:	f010 fa61 	bl	8011434 <f_mount>
 8000f72:	4603      	mov	r3, r0
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <Mount_USB+0x24>)
 8000f78:	701a      	strb	r2, [r3, #0]
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000d928 	.word	0x2000d928
 8000f84:	2000db58 	.word	0x2000db58
 8000f88:	200094b8 	.word	0x200094b8

08000f8c <Unmount_USB>:
void Unmount_USB (void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8000f90:	2201      	movs	r2, #1
 8000f92:	4905      	ldr	r1, [pc, #20]	; (8000fa8 <Unmount_USB+0x1c>)
 8000f94:	2000      	movs	r0, #0
 8000f96:	f010 fa4d 	bl	8011434 <f_mount>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b03      	ldr	r3, [pc, #12]	; (8000fac <Unmount_USB+0x20>)
 8000fa0:	701a      	strb	r2, [r3, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000d928 	.word	0x2000d928
 8000fac:	200094b8 	.word	0x200094b8

08000fb0 <Scan_USB>:
char *path[20*8] = {0};
/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	6018      	str	r0, [r3, #0]
    DIR dir;
    UINT i=0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c


    fresult = f_opendir(&dir, *path);                       /* Open the directory */
 8000fc2:	4b30      	ldr	r3, [pc, #192]	; (8001084 <Scan_USB+0xd4>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f010 ff9e 	bl	8011f0e <f_opendir>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <Scan_USB+0xd8>)
 8000fd8:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000fda:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <Scan_USB+0xd8>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d143      	bne.n	800106a <Scan_USB+0xba>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	4929      	ldr	r1, [pc, #164]	; (800108c <Scan_USB+0xdc>)
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f011 f845 	bl	8012078 <f_readdir>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <Scan_USB+0xd8>)
 8000ff4:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000ff6:	4b24      	ldr	r3, [pc, #144]	; (8001088 <Scan_USB+0xd8>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d130      	bne.n	8001060 <Scan_USB+0xb0>
 8000ffe:	4b23      	ldr	r3, [pc, #140]	; (800108c <Scan_USB+0xdc>)
 8001000:	7a5b      	ldrb	r3, [r3, #9]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d02c      	beq.n	8001060 <Scan_USB+0xb0>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <Scan_USB+0xdc>)
 8001008:	7a1b      	ldrb	r3, [r3, #8]
 800100a:	f003 0310 	and.w	r3, r3, #16
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0e7      	beq.n	8000fe2 <Scan_USB+0x32>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8001012:	491f      	ldr	r1, [pc, #124]	; (8001090 <Scan_USB+0xe0>)
 8001014:	481f      	ldr	r0, [pc, #124]	; (8001094 <Scan_USB+0xe4>)
 8001016:	f7ff f8db 	bl	80001d0 <strcmp>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d01a      	beq.n	8001056 <Scan_USB+0xa6>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8001020:	491b      	ldr	r1, [pc, #108]	; (8001090 <Scan_USB+0xe0>)
 8001022:	481d      	ldr	r0, [pc, #116]	; (8001098 <Scan_USB+0xe8>)
 8001024:	f7ff f8d4 	bl	80001d0 <strcmp>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d015      	beq.n	800105a <Scan_USB+0xaa>
                fresult = Scan_USB(*path);                     /* Enter the directory */
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <Scan_USB+0xd4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ffbc 	bl	8000fb0 <Scan_USB>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <Scan_USB+0xd8>)
 800103e:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <Scan_USB+0xd8>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d10a      	bne.n	800105e <Scan_USB+0xae>
                path[i] = 0;
 8001048:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <Scan_USB+0xd4>)
 800104a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800104e:	2100      	movs	r1, #0
 8001050:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001054:	e7c5      	b.n	8000fe2 <Scan_USB+0x32>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8001056:	bf00      	nop
 8001058:	e7c3      	b.n	8000fe2 <Scan_USB+0x32>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 800105a:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 800105c:	e7c1      	b.n	8000fe2 <Scan_USB+0x32>
                if (fresult != FR_OK) break;
 800105e:	bf00      	nop
            }
            else
            {
            }
        }
        f_closedir(&dir);
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	4618      	mov	r0, r3
 8001066:	f010 ffda 	bl	801201e <f_closedir>
    }
    free(*path);
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <Scan_USB+0xd4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f014 fdd8 	bl	8015c24 <free>
    return fresult;
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <Scan_USB+0xd8>)
 8001076:	781b      	ldrb	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	f507 770c 	add.w	r7, r7, #560	; 0x230
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000444 	.word	0x20000444
 8001088:	200094b8 	.word	0x200094b8
 800108c:	200094bc 	.word	0x200094bc
 8001090:	200094c5 	.word	0x200094c5
 8001094:	0801a340 	.word	0x0801a340
 8001098:	0801a34c 	.word	0x0801a34c

0800109c <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 80010a6:	491c      	ldr	r1, [pc, #112]	; (8001118 <Write_File+0x7c>)
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f011 f833 	bl	8012114 <f_stat>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <Write_File+0x80>)
 80010b4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <Write_File+0x80>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <Write_File+0x28>
	{
	    return fresult;
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <Write_File+0x80>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	e025      	b.n	8001110 <Write_File+0x74>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 80010c4:	2202      	movs	r2, #2
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4815      	ldr	r0, [pc, #84]	; (8001120 <Write_File+0x84>)
 80010ca:	f010 fa1b 	bl	8011504 <f_open>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <Write_File+0x80>)
 80010d4:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <Write_File+0x80>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <Write_File+0x48>
	    {
	        return fresult;
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <Write_File+0x80>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	e015      	b.n	8001110 <Write_File+0x74>
	    }

	    else
	    {

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 80010e4:	6838      	ldr	r0, [r7, #0]
 80010e6:	f7ff f87d 	bl	80001e4 <strlen>
 80010ea:	4602      	mov	r2, r0
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <Write_File+0x88>)
 80010ee:	6839      	ldr	r1, [r7, #0]
 80010f0:	480b      	ldr	r0, [pc, #44]	; (8001120 <Write_File+0x84>)
 80010f2:	f010 fc1c 	bl	801192e <f_write>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <Write_File+0x80>)
 80010fc:	701a      	strb	r2, [r3, #0]

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 80010fe:	4808      	ldr	r0, [pc, #32]	; (8001120 <Write_File+0x84>)
 8001100:	f010 fed5 	bl	8011eae <f_close>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <Write_File+0x80>)
 800110a:	701a      	strb	r2, [r3, #0]
	    }
	    return fresult;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <Write_File+0x80>)
 800110e:	781b      	ldrb	r3, [r3, #0]
	}
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200094bc 	.word	0x200094bc
 800111c:	200094b8 	.word	0x200094b8
 8001120:	2000d92c 	.word	0x2000d92c
 8001124:	200094b4 	.word	0x200094b4

08001128 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8001130:	4915      	ldr	r1, [pc, #84]	; (8001188 <Create_File+0x60>)
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f010 ffee 	bl	8012114 <f_stat>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <Create_File+0x64>)
 800113e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <Create_File+0x64>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <Create_File+0x26>
	{
	    return fresult;
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <Create_File+0x64>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	e018      	b.n	8001180 <Create_File+0x58>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 800114e:	220b      	movs	r2, #11
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	480f      	ldr	r0, [pc, #60]	; (8001190 <Create_File+0x68>)
 8001154:	f010 f9d6 	bl	8011504 <f_open>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <Create_File+0x64>)
 800115e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <Create_File+0x64>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <Create_File+0x46>
		{

		    return fresult;
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <Create_File+0x64>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	e008      	b.n	8001180 <Create_File+0x58>
		else
		{

		}

		fresult = f_close(&USBHFile);
 800116e:	4808      	ldr	r0, [pc, #32]	; (8001190 <Create_File+0x68>)
 8001170:	f010 fe9d 	bl	8011eae <f_close>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <Create_File+0x64>)
 800117a:	701a      	strb	r2, [r3, #0]

	}
    return fresult;
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <Create_File+0x64>)
 800117e:	781b      	ldrb	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200094bc 	.word	0x200094bc
 800118c:	200094b8 	.word	0x200094b8
 8001190:	2000d92c 	.word	0x2000d92c

08001194 <Check_USB_Details>:

    return fresult;
}

void Check_USB_Details (void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 8001198:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <Check_USB_Details+0x80>)
 800119a:	491f      	ldr	r1, [pc, #124]	; (8001218 <Check_USB_Details+0x84>)
 800119c:	481f      	ldr	r0, [pc, #124]	; (800121c <Check_USB_Details+0x88>)
 800119e:	f011 f80c 	bl	80121ba <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <Check_USB_Details+0x80>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80011aa:	3b02      	subs	r3, #2
 80011ac:	4a19      	ldr	r2, [pc, #100]	; (8001214 <Check_USB_Details+0x80>)
 80011ae:	6812      	ldr	r2, [r2, #0]
 80011b0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80011b4:	fb02 f303 	mul.w	r3, r2, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f95d 	bl	8000478 <__aeabi_ui2d>
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <Check_USB_Details+0x8c>)
 80011c4:	f7ff f9d2 	bl	800056c <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fca4 	bl	8000b1c <__aeabi_d2uiz>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a13      	ldr	r2, [pc, #76]	; (8001224 <Check_USB_Details+0x90>)
 80011d8:	6013      	str	r3, [r2, #0]

    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <Check_USB_Details+0x80>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <Check_USB_Details+0x84>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	fb03 f302 	mul.w	r3, r3, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f943 	bl	8000478 <__aeabi_ui2d>
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <Check_USB_Details+0x8c>)
 80011f8:	f7ff f9b8 	bl	800056c <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fc8a 	bl	8000b1c <__aeabi_d2uiz>
 8001208:	4603      	mov	r3, r0
 800120a:	4a07      	ldr	r2, [pc, #28]	; (8001228 <Check_USB_Details+0x94>)
 800120c:	6013      	str	r3, [r2, #0]
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200094ac 	.word	0x200094ac
 8001218:	200094a4 	.word	0x200094a4
 800121c:	0801a368 	.word	0x0801a368
 8001220:	3fe00000 	.word	0x3fe00000
 8001224:	200094d4 	.word	0x200094d4
 8001228:	200094b0 	.word	0x200094b0

0800122c <getTime>:
#include "RTC_driver.h"
#include "light_driver.h"


void getTime(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime,RTC_FORMAT_BIN);
 8001230:	2200      	movs	r2, #0
 8001232:	4905      	ldr	r1, [pc, #20]	; (8001248 <getTime+0x1c>)
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <getTime+0x20>)
 8001236:	f008 fd45 	bl	8009cc4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate,RTC_FORMAT_BIN);
 800123a:	2200      	movs	r2, #0
 800123c:	4904      	ldr	r1, [pc, #16]	; (8001250 <getTime+0x24>)
 800123e:	4803      	ldr	r0, [pc, #12]	; (800124c <getTime+0x20>)
 8001240:	f008 fe32 	bl	8009ea8 <HAL_RTC_GetDate>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20005400 	.word	0x20005400
 800124c:	2000c800 	.word	0x2000c800
 8001250:	2000540c 	.word	0x2000540c

08001254 <setTimeDate>:

void setTimeDate(uint8_t month, uint8_t day, uint8_t year, uint8_t hours, uint8_t min, uint8_t sec)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4604      	mov	r4, r0
 800125c:	4608      	mov	r0, r1
 800125e:	4611      	mov	r1, r2
 8001260:	461a      	mov	r2, r3
 8001262:	4623      	mov	r3, r4
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	4603      	mov	r3, r0
 8001268:	71bb      	strb	r3, [r7, #6]
 800126a:	460b      	mov	r3, r1
 800126c:	717b      	strb	r3, [r7, #5]
 800126e:	4613      	mov	r3, r2
 8001270:	713b      	strb	r3, [r7, #4]
	sTime.Hours = hours;
 8001272:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <setTimeDate+0x84>)
 8001274:	793b      	ldrb	r3, [r7, #4]
 8001276:	7013      	strb	r3, [r2, #0]
	sTime.Minutes = min;
 8001278:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <setTimeDate+0x84>)
 800127a:	7e3b      	ldrb	r3, [r7, #24]
 800127c:	7053      	strb	r3, [r2, #1]
	sTime.Seconds = sec;
 800127e:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <setTimeDate+0x84>)
 8001280:	7f3b      	ldrb	r3, [r7, #28]
 8001282:	7093      	strb	r3, [r2, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <setTimeDate+0x84>)
 8001286:	2200      	movs	r2, #0
 8001288:	605a      	str	r2, [r3, #4]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <setTimeDate+0x84>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
	if(HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)Error_Handler();
 8001290:	2201      	movs	r2, #1
 8001292:	4911      	ldr	r1, [pc, #68]	; (80012d8 <setTimeDate+0x84>)
 8001294:	4811      	ldr	r0, [pc, #68]	; (80012dc <setTimeDate+0x88>)
 8001296:	f008 fc5f 	bl	8009b58 <HAL_RTC_SetTime>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <setTimeDate+0x50>
 80012a0:	f003 f9ae 	bl	8004600 <Error_Handler>

	sDate.WeekDay = 0x01;
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <setTimeDate+0x8c>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
	sDate.Month = month;
 80012aa:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <setTimeDate+0x8c>)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	7053      	strb	r3, [r2, #1]
	sDate.Date = day;
 80012b0:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <setTimeDate+0x8c>)
 80012b2:	79bb      	ldrb	r3, [r7, #6]
 80012b4:	7093      	strb	r3, [r2, #2]
	sDate.Year = year;
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <setTimeDate+0x8c>)
 80012b8:	797b      	ldrb	r3, [r7, #5]
 80012ba:	70d3      	strb	r3, [r2, #3]
	if(HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)Error_Handler();
 80012bc:	2201      	movs	r2, #1
 80012be:	4908      	ldr	r1, [pc, #32]	; (80012e0 <setTimeDate+0x8c>)
 80012c0:	4806      	ldr	r0, [pc, #24]	; (80012dc <setTimeDate+0x88>)
 80012c2:	f008 fd51 	bl	8009d68 <HAL_RTC_SetDate>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <setTimeDate+0x7c>
 80012cc:	f003 f998 	bl	8004600 <Error_Handler>
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd90      	pop	{r4, r7, pc}
 80012d8:	20005400 	.word	0x20005400
 80012dc:	2000c800 	.word	0x2000c800
 80012e0:	2000540c 	.word	0x2000540c

080012e4 <getMedianNum>:
#include "TDS_driver.h"
#include "main.h"
#include "sensors.h"

int getMedianNum(int bArray[], int iFilterLen)
{
 80012e4:	b4b0      	push	{r4, r5, r7}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	466b      	mov	r3, sp
 80012f0:	461d      	mov	r5, r3
      int bTab[iFilterLen];
 80012f2:	683c      	ldr	r4, [r7, #0]
 80012f4:	1e63      	subs	r3, r4, #1
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	4623      	mov	r3, r4
 80012fa:	4618      	mov	r0, r3
 80012fc:	f04f 0100 	mov.w	r1, #0
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	f04f 0300 	mov.w	r3, #0
 8001308:	014b      	lsls	r3, r1, #5
 800130a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800130e:	0142      	lsls	r2, r0, #5
 8001310:	4623      	mov	r3, r4
 8001312:	4618      	mov	r0, r3
 8001314:	f04f 0100 	mov.w	r1, #0
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	014b      	lsls	r3, r1, #5
 8001322:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001326:	0142      	lsls	r2, r0, #5
 8001328:	4623      	mov	r3, r4
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	3307      	adds	r3, #7
 800132e:	08db      	lsrs	r3, r3, #3
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	ebad 0d03 	sub.w	sp, sp, r3
 8001336:	466b      	mov	r3, sp
 8001338:	3303      	adds	r3, #3
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	60bb      	str	r3, [r7, #8]
      for (int i = 0; i<iFilterLen; i++)
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	e00b      	b.n	800135e <getMedianNum+0x7a>
      bTab[i] = bArray[i];
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	6819      	ldr	r1, [r3, #0]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (int i = 0; i<iFilterLen; i++)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	3301      	adds	r3, #1
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	dbef      	blt.n	8001346 <getMedianNum+0x62>
      int i, j, bTemp;
      for (j = 0; j < iFilterLen - 1; j++)
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	e02e      	b.n	80013ca <getMedianNum+0xe6>
      {
      for (i = 0; i < iFilterLen - j - 1; i++)
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	e021      	b.n	80013b6 <getMedianNum+0xd2>
          {
        if (bTab[i] > bTab[i + 1])
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	1c59      	adds	r1, r3, #1
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001384:	429a      	cmp	r2, r3
 8001386:	dd13      	ble.n	80013b0 <getMedianNum+0xcc>
            {
        bTemp = bTab[i];
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001390:	61fb      	str	r3, [r7, #28]
            bTab[i] = bTab[i + 1];
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	1c5a      	adds	r2, r3, #1
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        bTab[i + 1] = bTemp;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	69f9      	ldr	r1, [r7, #28]
 80013ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (i = 0; i < iFilterLen - j - 1; i++)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	3301      	adds	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	3b01      	subs	r3, #1
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbd6      	blt.n	8001372 <getMedianNum+0x8e>
      for (j = 0; j < iFilterLen - 1; j++)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	3301      	adds	r3, #1
 80013c8:	61bb      	str	r3, [r7, #24]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	dbcb      	blt.n	800136c <getMedianNum+0x88>
         }
      }
      }
      if ((iFilterLen & 1) > 0)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	dd0a      	ble.n	80013f4 <getMedianNum+0x110>
    bTemp = bTab[(iFilterLen - 1) / 2];
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	0fda      	lsrs	r2, r3, #31
 80013e4:	4413      	add	r3, r2
 80013e6:	105b      	asrs	r3, r3, #1
 80013e8:	461a      	mov	r2, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	e014      	b.n	800141e <getMedianNum+0x13a>
      else
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	0fda      	lsrs	r2, r3, #31
 80013f8:	4413      	add	r3, r2
 80013fa:	105b      	asrs	r3, r3, #1
 80013fc:	461a      	mov	r2, r3
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	0fd9      	lsrs	r1, r3, #31
 8001408:	440b      	add	r3, r1
 800140a:	105b      	asrs	r3, r3, #1
 800140c:	1e59      	subs	r1, r3, #1
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001414:	4413      	add	r3, r2
 8001416:	0fda      	lsrs	r2, r3, #31
 8001418:	4413      	add	r3, r2
 800141a:	105b      	asrs	r3, r3, #1
 800141c:	61fb      	str	r3, [r7, #28]
      return bTemp;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	46ad      	mov	sp, r5
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	bcb0      	pop	{r4, r5, r7}
 800142a:	4770      	bx	lr

0800142c <fanOn>:

double system_fan_sp = 5.5;
double plant_fan_sp = 3.5;
double heat_cool_fan_sp = 2.5; // set default fan speed values
void fanOn()
{
 800142c:	b598      	push	{r3, r4, r7, lr}
 800142e:	af00      	add	r7, sp, #0
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);	// start heater cooler fan control
 8001430:	2100      	movs	r1, #0
 8001432:	4847      	ldr	r0, [pc, #284]	; (8001550 <fanOn+0x124>)
 8001434:	f009 f8c4 	bl	800a5c0 <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;							// sets the PWM frequency of 25Mhz
 8001438:	4b46      	ldr	r3, [pc, #280]	; (8001554 <fanOn+0x128>)
 800143a:	f640 323f 	movw	r2, #2879	; 0xb3f
 800143e:	62da      	str	r2, [r3, #44]	; 0x2c
   if(heat_cool_fan_sp == 0)  TIM1->CCR1  = 0;
 8001440:	4b45      	ldr	r3, [pc, #276]	; (8001558 <fanOn+0x12c>)
 8001442:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	f04f 0300 	mov.w	r3, #0
 800144e:	f7ff faf5 	bl	8000a3c <__aeabi_dcmpeq>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <fanOn+0x34>
 8001458:	4b3e      	ldr	r3, [pc, #248]	; (8001554 <fanOn+0x128>)
 800145a:	2200      	movs	r2, #0
 800145c:	635a      	str	r2, [r3, #52]	; 0x34
 800145e:	e012      	b.n	8001486 <fanOn+0x5a>
   else TIM1->CCR1 = (TIM1->ARR)/heat_cool_fan_sp;	// sets the fan speed
 8001460:	4b3c      	ldr	r3, [pc, #240]	; (8001554 <fanOn+0x128>)
 8001462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f807 	bl	8000478 <__aeabi_ui2d>
 800146a:	4b3b      	ldr	r3, [pc, #236]	; (8001558 <fanOn+0x12c>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7ff f9a6 	bl	80007c0 <__aeabi_ddiv>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4c36      	ldr	r4, [pc, #216]	; (8001554 <fanOn+0x128>)
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	f7ff fb4d 	bl	8000b1c <__aeabi_d2uiz>
 8001482:	4603      	mov	r3, r0
 8001484:	6363      	str	r3, [r4, #52]	; 0x34
   TIM1->CNT = 20500;
 8001486:	4b33      	ldr	r3, [pc, #204]	; (8001554 <fanOn+0x128>)
 8001488:	f245 0214 	movw	r2, #20500	; 0x5014
 800148c:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);		// start system fan control
 800148e:	2108      	movs	r1, #8
 8001490:	482f      	ldr	r0, [pc, #188]	; (8001550 <fanOn+0x124>)
 8001492:	f009 f895 	bl	800a5c0 <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;							// sets the PWM frequency of 25Mhz
 8001496:	4b2f      	ldr	r3, [pc, #188]	; (8001554 <fanOn+0x128>)
 8001498:	f640 323f 	movw	r2, #2879	; 0xb3f
 800149c:	62da      	str	r2, [r3, #44]	; 0x2c
   if(system_fan_sp == 0) TIM1->CCR1  = 0;
 800149e:	4b2f      	ldr	r3, [pc, #188]	; (800155c <fanOn+0x130>)
 80014a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	f7ff fac6 	bl	8000a3c <__aeabi_dcmpeq>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <fanOn+0x92>
 80014b6:	4b27      	ldr	r3, [pc, #156]	; (8001554 <fanOn+0x128>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	635a      	str	r2, [r3, #52]	; 0x34
 80014bc:	e012      	b.n	80014e4 <fanOn+0xb8>
   else TIM1->CCR3 = (TIM1->ARR)/system_fan_sp;		// sets the fan speed
 80014be:	4b25      	ldr	r3, [pc, #148]	; (8001554 <fanOn+0x128>)
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe ffd8 	bl	8000478 <__aeabi_ui2d>
 80014c8:	4b24      	ldr	r3, [pc, #144]	; (800155c <fanOn+0x130>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	f7ff f977 	bl	80007c0 <__aeabi_ddiv>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4c1f      	ldr	r4, [pc, #124]	; (8001554 <fanOn+0x128>)
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	f7ff fb1e 	bl	8000b1c <__aeabi_d2uiz>
 80014e0:	4603      	mov	r3, r0
 80014e2:	63e3      	str	r3, [r4, #60]	; 0x3c
   TIM1->CNT = 20500;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <fanOn+0x128>)
 80014e6:	f245 0214 	movw	r2, #20500	; 0x5014
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);	// start plant fan control
 80014ec:	2100      	movs	r1, #0
 80014ee:	481c      	ldr	r0, [pc, #112]	; (8001560 <fanOn+0x134>)
 80014f0:	f009 f866 	bl	800a5c0 <HAL_TIM_PWM_Start>
   TIM10->ARR = 2879;							// sets the PWM frequency of 25Mhz
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <fanOn+0x138>)
 80014f6:	f640 323f 	movw	r2, #2879	; 0xb3f
 80014fa:	62da      	str	r2, [r3, #44]	; 0x2c
   if(plant_fan_sp == 0) TIM10->ARR = 0;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <fanOn+0x13c>)
 80014fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	f04f 0300 	mov.w	r3, #0
 800150a:	f7ff fa97 	bl	8000a3c <__aeabi_dcmpeq>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <fanOn+0xf0>
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <fanOn+0x138>)
 8001516:	2200      	movs	r2, #0
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
 800151a:	e012      	b.n	8001542 <fanOn+0x116>
   else TIM10->CCR1 = (TIM10->ARR)/plant_fan_sp;		// sets the fan speed
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <fanOn+0x138>)
 800151e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe ffa9 	bl	8000478 <__aeabi_ui2d>
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <fanOn+0x13c>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f948 	bl	80007c0 <__aeabi_ddiv>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4c0b      	ldr	r4, [pc, #44]	; (8001564 <fanOn+0x138>)
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f7ff faef 	bl	8000b1c <__aeabi_d2uiz>
 800153e:	4603      	mov	r3, r0
 8001540:	6363      	str	r3, [r4, #52]	; 0x34
   TIM10->CNT = 20500;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <fanOn+0x138>)
 8001544:	f245 0214 	movw	r2, #20500	; 0x5014
 8001548:	625a      	str	r2, [r3, #36]	; 0x24
}
 800154a:	bf00      	nop
 800154c:	bd98      	pop	{r3, r4, r7, pc}
 800154e:	bf00      	nop
 8001550:	2000c834 	.word	0x2000c834
 8001554:	40010000 	.word	0x40010000
 8001558:	20000010 	.word	0x20000010
 800155c:	20000000 	.word	0x20000000
 8001560:	2000969c 	.word	0x2000969c
 8001564:	40014400 	.word	0x40014400
 8001568:	20000008 	.word	0x20000008

0800156c <setFanSpeed>:
   TIM10->CCR1 = 0;								// sets the fan speed
   TIM10->CNT = 20500;

}
void setFanSpeed(float sys_fan,float plant_fan,float heat_cool_fan)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
	system_fan_sp = sys_fan;
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f7fe ff9f 	bl	80004bc <__aeabi_f2d>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	490c      	ldr	r1, [pc, #48]	; (80015b4 <setFanSpeed+0x48>)
 8001584:	e9c1 2300 	strd	r2, r3, [r1]
	plant_fan_sp = plant_fan;
 8001588:	68b8      	ldr	r0, [r7, #8]
 800158a:	f7fe ff97 	bl	80004bc <__aeabi_f2d>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4909      	ldr	r1, [pc, #36]	; (80015b8 <setFanSpeed+0x4c>)
 8001594:	e9c1 2300 	strd	r2, r3, [r1]
	heat_cool_fan_sp = heat_cool_fan;
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7fe ff8f 	bl	80004bc <__aeabi_f2d>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4906      	ldr	r1, [pc, #24]	; (80015bc <setFanSpeed+0x50>)
 80015a4:	e9c1 2300 	strd	r2, r3, [r1]
	fanOn();
 80015a8:	f7ff ff40 	bl	800142c <fanOn>
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000000 	.word	0x20000000
 80015b8:	20000008 	.word	0x20000008
 80015bc:	20000010 	.word	0x20000010

080015c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4a07      	ldr	r2, [pc, #28]	; (80015ec <vApplicationGetIdleTaskMemory+0x2c>)
 80015d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <vApplicationGetIdleTaskMemory+0x30>)
 80015d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015de:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	200006c4 	.word	0x200006c4
 80015f0:	20000778 	.word	0x20000778

080015f4 <heatOn>:
#include "stm32f2xx_hal.h"
#include "main.h"
#include "sensors.h"
#include "heater_driver.h"
void heatOn()
{taskENTER_CRITICAL();
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	f013 fbd0 	bl	8014d9c <vPortEnterCritical>
{
	HAL_GPIO_WritePin(GPIOE,water_heat_cool_Pin,GPIO_PIN_RESET);			// set to heat
 80015fc:	2200      	movs	r2, #0
 80015fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001602:	4806      	ldr	r0, [pc, #24]	; (800161c <heatOn+0x28>)
 8001604:	f005 ff43 	bl	800748e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,water_heat_cool_enable_Pin,GPIO_PIN_SET);	// enable the heater
 8001608:	2201      	movs	r2, #1
 800160a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800160e:	4803      	ldr	r0, [pc, #12]	; (800161c <heatOn+0x28>)
 8001610:	f005 ff3d 	bl	800748e <HAL_GPIO_WritePin>
}taskEXIT_CRITICAL();
 8001614:	f013 fbf2 	bl	8014dfc <vPortExitCritical>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40021000 	.word	0x40021000

08001620 <heatCoolOff>:
void heatCoolOff()
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,water_heat_cool_enable_Pin,GPIO_PIN_RESET);	// disable the heater
 8001624:	2200      	movs	r2, #0
 8001626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800162a:	4802      	ldr	r0, [pc, #8]	; (8001634 <heatCoolOff+0x14>)
 800162c:	f005 ff2f 	bl	800748e <HAL_GPIO_WritePin>
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40021000 	.word	0x40021000

08001638 <coolOn>:
void coolOn()
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,water_heat_cool_Pin,GPIO_PIN_SET);		// set to cool
 800163c:	2201      	movs	r2, #1
 800163e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001642:	4805      	ldr	r0, [pc, #20]	; (8001658 <coolOn+0x20>)
 8001644:	f005 ff23 	bl	800748e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,water_heat_cool_enable_Pin,GPIO_PIN_SET);	// enable the cooler
 8001648:	2201      	movs	r2, #1
 800164a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800164e:	4802      	ldr	r0, [pc, #8]	; (8001658 <coolOn+0x20>)
 8001650:	f005 ff1d 	bl	800748e <HAL_GPIO_WritePin>
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40021000 	.word	0x40021000
 800165c:	00000000 	.word	0x00000000

08001660 <floatToString>:
		setting_nutrient = 'n', heat_on = 'n', cool_on = 'n', setting_water_temp = 'n', run_once = 'n', error = 'n', pH_up = 'n', pH_down = 'n', nutrient_up = 'n', write_header = 'n', temp_up = 'n', temp_down = 0;

long int befdec, aftdec;

void floatToString(double FP_NUM)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	e9c7 0100 	strd	r0, r1, [r7]
	fpnumber = FP_NUM;					// Fractional part is truncated
 800166a:	4990      	ldr	r1, [pc, #576]	; (80018ac <floatToString+0x24c>)
 800166c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001670:	e9c1 2300 	strd	r2, r3, [r1]
	befdec = fpnumber;                  // 12.163456 becomes 12
 8001674:	4b8d      	ldr	r3, [pc, #564]	; (80018ac <floatToString+0x24c>)
 8001676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	f7ff fa25 	bl	8000acc <__aeabi_d2iz>
 8001682:	4603      	mov	r3, r0
 8001684:	4a8a      	ldr	r2, [pc, #552]	; (80018b0 <floatToString+0x250>)
 8001686:	6013      	str	r3, [r2, #0]
	aftdec = fpnumber * 100;            // 12.163456 becomes 1216
 8001688:	4b88      	ldr	r3, [pc, #544]	; (80018ac <floatToString+0x24c>)
 800168a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	4b88      	ldr	r3, [pc, #544]	; (80018b4 <floatToString+0x254>)
 8001694:	f7fe ff6a 	bl	800056c <__aeabi_dmul>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f7ff fa14 	bl	8000acc <__aeabi_d2iz>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4a84      	ldr	r2, [pc, #528]	; (80018b8 <floatToString+0x258>)
 80016a8:	6013      	str	r3, [r2, #0]
	aftdec = aftdec - (befdec * 100);   // 1216 - 1200 = 16
 80016aa:	4b81      	ldr	r3, [pc, #516]	; (80018b0 <floatToString+0x250>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80016b2:	fb02 f203 	mul.w	r2, r2, r3
 80016b6:	4b80      	ldr	r3, [pc, #512]	; (80018b8 <floatToString+0x258>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	4a7e      	ldr	r2, [pc, #504]	; (80018b8 <floatToString+0x258>)
 80016be:	6013      	str	r3, [r2, #0]
	if (fpnumber < 1)
 80016c0:	4b7a      	ldr	r3, [pc, #488]	; (80018ac <floatToString+0x24c>)
 80016c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	4b7c      	ldr	r3, [pc, #496]	; (80018bc <floatToString+0x25c>)
 80016cc:	f7ff f9c0 	bl	8000a50 <__aeabi_dcmplt>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d031      	beq.n	800173a <floatToString+0xda>
	{
		convertedString[0] = '0';
 80016d6:	4b7a      	ldr	r3, [pc, #488]	; (80018c0 <floatToString+0x260>)
 80016d8:	2230      	movs	r2, #48	; 0x30
 80016da:	701a      	strb	r2, [r3, #0]
		convertedString[1] = '.';
 80016dc:	4b78      	ldr	r3, [pc, #480]	; (80018c0 <floatToString+0x260>)
 80016de:	222e      	movs	r2, #46	; 0x2e
 80016e0:	705a      	strb	r2, [r3, #1]
		convertedString[2] = (aftdec/10) + 48;
 80016e2:	4b75      	ldr	r3, [pc, #468]	; (80018b8 <floatToString+0x258>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a77      	ldr	r2, [pc, #476]	; (80018c4 <floatToString+0x264>)
 80016e8:	fb82 1203 	smull	r1, r2, r2, r3
 80016ec:	1092      	asrs	r2, r2, #2
 80016ee:	17db      	asrs	r3, r3, #31
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	3330      	adds	r3, #48	; 0x30
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	4b71      	ldr	r3, [pc, #452]	; (80018c0 <floatToString+0x260>)
 80016fa:	709a      	strb	r2, [r3, #2]
		convertedString[3] = (aftdec/1)%10 + 48;
 80016fc:	4b6e      	ldr	r3, [pc, #440]	; (80018b8 <floatToString+0x258>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b70      	ldr	r3, [pc, #448]	; (80018c4 <floatToString+0x264>)
 8001702:	fb83 1302 	smull	r1, r3, r3, r2
 8001706:	1099      	asrs	r1, r3, #2
 8001708:	17d3      	asrs	r3, r2, #31
 800170a:	1ac9      	subs	r1, r1, r3
 800170c:	460b      	mov	r3, r1
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	1ad1      	subs	r1, r2, r3
 8001716:	b2cb      	uxtb	r3, r1
 8001718:	3330      	adds	r3, #48	; 0x30
 800171a:	b2da      	uxtb	r2, r3
 800171c:	4b68      	ldr	r3, [pc, #416]	; (80018c0 <floatToString+0x260>)
 800171e:	70da      	strb	r2, [r3, #3]
		convertedString[4] = ' ';
 8001720:	4b67      	ldr	r3, [pc, #412]	; (80018c0 <floatToString+0x260>)
 8001722:	2220      	movs	r2, #32
 8001724:	711a      	strb	r2, [r3, #4]
		convertedString[5] = ' ';
 8001726:	4b66      	ldr	r3, [pc, #408]	; (80018c0 <floatToString+0x260>)
 8001728:	2220      	movs	r2, #32
 800172a:	715a      	strb	r2, [r3, #5]
		convertedString[6] = ' ';
 800172c:	4b64      	ldr	r3, [pc, #400]	; (80018c0 <floatToString+0x260>)
 800172e:	2220      	movs	r2, #32
 8001730:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 8001732:	4b63      	ldr	r3, [pc, #396]	; (80018c0 <floatToString+0x260>)
 8001734:	2200      	movs	r2, #0
 8001736:	71da      	strb	r2, [r3, #7]
		convertedString[4] = (befdec/1)%10 + 48;
		convertedString[5] = '.';
		convertedString[6] = (aftdec/10) + 48;
		convertedString[7] = '\0';
	}
}
 8001738:	e25b      	b.n	8001bf2 <floatToString+0x592>
	else if ((fpnumber >= 1) && (fpnumber < 10))
 800173a:	4b5c      	ldr	r3, [pc, #368]	; (80018ac <floatToString+0x24c>)
 800173c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	4b5d      	ldr	r3, [pc, #372]	; (80018bc <floatToString+0x25c>)
 8001746:	f7ff f997 	bl	8000a78 <__aeabi_dcmpge>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d04b      	beq.n	80017e8 <floatToString+0x188>
 8001750:	4b56      	ldr	r3, [pc, #344]	; (80018ac <floatToString+0x24c>)
 8001752:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	4b5b      	ldr	r3, [pc, #364]	; (80018c8 <floatToString+0x268>)
 800175c:	f7ff f978 	bl	8000a50 <__aeabi_dcmplt>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d040      	beq.n	80017e8 <floatToString+0x188>
		convertedString[0] = (befdec/1)%10 + 48;
 8001766:	4b52      	ldr	r3, [pc, #328]	; (80018b0 <floatToString+0x250>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4b56      	ldr	r3, [pc, #344]	; (80018c4 <floatToString+0x264>)
 800176c:	fb83 1302 	smull	r1, r3, r3, r2
 8001770:	1099      	asrs	r1, r3, #2
 8001772:	17d3      	asrs	r3, r2, #31
 8001774:	1ac9      	subs	r1, r1, r3
 8001776:	460b      	mov	r3, r1
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	1ad1      	subs	r1, r2, r3
 8001780:	b2cb      	uxtb	r3, r1
 8001782:	3330      	adds	r3, #48	; 0x30
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4b4e      	ldr	r3, [pc, #312]	; (80018c0 <floatToString+0x260>)
 8001788:	701a      	strb	r2, [r3, #0]
		convertedString[1] = '.';
 800178a:	4b4d      	ldr	r3, [pc, #308]	; (80018c0 <floatToString+0x260>)
 800178c:	222e      	movs	r2, #46	; 0x2e
 800178e:	705a      	strb	r2, [r3, #1]
		convertedString[2] = (aftdec/10) + 48;
 8001790:	4b49      	ldr	r3, [pc, #292]	; (80018b8 <floatToString+0x258>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a4b      	ldr	r2, [pc, #300]	; (80018c4 <floatToString+0x264>)
 8001796:	fb82 1203 	smull	r1, r2, r2, r3
 800179a:	1092      	asrs	r2, r2, #2
 800179c:	17db      	asrs	r3, r3, #31
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	3330      	adds	r3, #48	; 0x30
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b46      	ldr	r3, [pc, #280]	; (80018c0 <floatToString+0x260>)
 80017a8:	709a      	strb	r2, [r3, #2]
		convertedString[3] = (aftdec/1)%10 + 48;
 80017aa:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <floatToString+0x258>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4b45      	ldr	r3, [pc, #276]	; (80018c4 <floatToString+0x264>)
 80017b0:	fb83 1302 	smull	r1, r3, r3, r2
 80017b4:	1099      	asrs	r1, r3, #2
 80017b6:	17d3      	asrs	r3, r2, #31
 80017b8:	1ac9      	subs	r1, r1, r3
 80017ba:	460b      	mov	r3, r1
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	1ad1      	subs	r1, r2, r3
 80017c4:	b2cb      	uxtb	r3, r1
 80017c6:	3330      	adds	r3, #48	; 0x30
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b3d      	ldr	r3, [pc, #244]	; (80018c0 <floatToString+0x260>)
 80017cc:	70da      	strb	r2, [r3, #3]
		convertedString[4] = ' ';
 80017ce:	4b3c      	ldr	r3, [pc, #240]	; (80018c0 <floatToString+0x260>)
 80017d0:	2220      	movs	r2, #32
 80017d2:	711a      	strb	r2, [r3, #4]
		convertedString[5] = ' ';
 80017d4:	4b3a      	ldr	r3, [pc, #232]	; (80018c0 <floatToString+0x260>)
 80017d6:	2220      	movs	r2, #32
 80017d8:	715a      	strb	r2, [r3, #5]
		convertedString[6] = ' ';
 80017da:	4b39      	ldr	r3, [pc, #228]	; (80018c0 <floatToString+0x260>)
 80017dc:	2220      	movs	r2, #32
 80017de:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 80017e0:	4b37      	ldr	r3, [pc, #220]	; (80018c0 <floatToString+0x260>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	71da      	strb	r2, [r3, #7]
 80017e6:	e204      	b.n	8001bf2 <floatToString+0x592>
	else if ((fpnumber >= 10) && (fpnumber < 100))
 80017e8:	4b30      	ldr	r3, [pc, #192]	; (80018ac <floatToString+0x24c>)
 80017ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	4b35      	ldr	r3, [pc, #212]	; (80018c8 <floatToString+0x268>)
 80017f4:	f7ff f940 	bl	8000a78 <__aeabi_dcmpge>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d066      	beq.n	80018cc <floatToString+0x26c>
 80017fe:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <floatToString+0x24c>)
 8001800:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <floatToString+0x254>)
 800180a:	f7ff f921 	bl	8000a50 <__aeabi_dcmplt>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d05b      	beq.n	80018cc <floatToString+0x26c>
		convertedString[0] = (befdec/10) + 48;
 8001814:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <floatToString+0x250>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a2a      	ldr	r2, [pc, #168]	; (80018c4 <floatToString+0x264>)
 800181a:	fb82 1203 	smull	r1, r2, r2, r3
 800181e:	1092      	asrs	r2, r2, #2
 8001820:	17db      	asrs	r3, r3, #31
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	3330      	adds	r3, #48	; 0x30
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <floatToString+0x260>)
 800182c:	701a      	strb	r2, [r3, #0]
		convertedString[1] = (befdec/1)%10 + 48;
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <floatToString+0x250>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <floatToString+0x264>)
 8001834:	fb83 1302 	smull	r1, r3, r3, r2
 8001838:	1099      	asrs	r1, r3, #2
 800183a:	17d3      	asrs	r3, r2, #31
 800183c:	1ac9      	subs	r1, r1, r3
 800183e:	460b      	mov	r3, r1
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	1ad1      	subs	r1, r2, r3
 8001848:	b2cb      	uxtb	r3, r1
 800184a:	3330      	adds	r3, #48	; 0x30
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <floatToString+0x260>)
 8001850:	705a      	strb	r2, [r3, #1]
		convertedString[2] = '.';
 8001852:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <floatToString+0x260>)
 8001854:	222e      	movs	r2, #46	; 0x2e
 8001856:	709a      	strb	r2, [r3, #2]
		convertedString[3] = (aftdec/10) + 48;
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <floatToString+0x258>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a19      	ldr	r2, [pc, #100]	; (80018c4 <floatToString+0x264>)
 800185e:	fb82 1203 	smull	r1, r2, r2, r3
 8001862:	1092      	asrs	r2, r2, #2
 8001864:	17db      	asrs	r3, r3, #31
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	b2db      	uxtb	r3, r3
 800186a:	3330      	adds	r3, #48	; 0x30
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <floatToString+0x260>)
 8001870:	70da      	strb	r2, [r3, #3]
		convertedString[4] = (aftdec/1)%10 + 48;
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <floatToString+0x258>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <floatToString+0x264>)
 8001878:	fb83 1302 	smull	r1, r3, r3, r2
 800187c:	1099      	asrs	r1, r3, #2
 800187e:	17d3      	asrs	r3, r2, #31
 8001880:	1ac9      	subs	r1, r1, r3
 8001882:	460b      	mov	r3, r1
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	1ad1      	subs	r1, r2, r3
 800188c:	b2cb      	uxtb	r3, r1
 800188e:	3330      	adds	r3, #48	; 0x30
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <floatToString+0x260>)
 8001894:	711a      	strb	r2, [r3, #4]
		convertedString[5] = ' ';
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <floatToString+0x260>)
 8001898:	2220      	movs	r2, #32
 800189a:	715a      	strb	r2, [r3, #5]
		convertedString[6] = ' ';
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <floatToString+0x260>)
 800189e:	2220      	movs	r2, #32
 80018a0:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <floatToString+0x260>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	71da      	strb	r2, [r3, #7]
 80018a8:	e1a3      	b.n	8001bf2 <floatToString+0x592>
 80018aa:	bf00      	nop
 80018ac:	200094e0 	.word	0x200094e0
 80018b0:	200094d8 	.word	0x200094d8
 80018b4:	40590000 	.word	0x40590000
 80018b8:	200094dc 	.word	0x200094dc
 80018bc:	3ff00000 	.word	0x3ff00000
 80018c0:	20004050 	.word	0x20004050
 80018c4:	66666667 	.word	0x66666667
 80018c8:	40240000 	.word	0x40240000
	else if ((fpnumber >= 100) && (fpnumber < 1000))
 80018cc:	4b82      	ldr	r3, [pc, #520]	; (8001ad8 <floatToString+0x478>)
 80018ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	4b81      	ldr	r3, [pc, #516]	; (8001adc <floatToString+0x47c>)
 80018d8:	f7ff f8ce 	bl	8000a78 <__aeabi_dcmpge>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d05b      	beq.n	800199a <floatToString+0x33a>
 80018e2:	4b7d      	ldr	r3, [pc, #500]	; (8001ad8 <floatToString+0x478>)
 80018e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	4b7c      	ldr	r3, [pc, #496]	; (8001ae0 <floatToString+0x480>)
 80018ee:	f7ff f8af 	bl	8000a50 <__aeabi_dcmplt>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d050      	beq.n	800199a <floatToString+0x33a>
		convertedString[0] = (befdec/100) + 48;
 80018f8:	4b7a      	ldr	r3, [pc, #488]	; (8001ae4 <floatToString+0x484>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a7a      	ldr	r2, [pc, #488]	; (8001ae8 <floatToString+0x488>)
 80018fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001902:	1152      	asrs	r2, r2, #5
 8001904:	17db      	asrs	r3, r3, #31
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	3330      	adds	r3, #48	; 0x30
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4b77      	ldr	r3, [pc, #476]	; (8001aec <floatToString+0x48c>)
 8001910:	701a      	strb	r2, [r3, #0]
		convertedString[1] = (befdec/10)%10 + 48;
 8001912:	4b74      	ldr	r3, [pc, #464]	; (8001ae4 <floatToString+0x484>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a76      	ldr	r2, [pc, #472]	; (8001af0 <floatToString+0x490>)
 8001918:	fb82 1203 	smull	r1, r2, r2, r3
 800191c:	1092      	asrs	r2, r2, #2
 800191e:	17db      	asrs	r3, r3, #31
 8001920:	1ad2      	subs	r2, r2, r3
 8001922:	4b73      	ldr	r3, [pc, #460]	; (8001af0 <floatToString+0x490>)
 8001924:	fb83 1302 	smull	r1, r3, r3, r2
 8001928:	1099      	asrs	r1, r3, #2
 800192a:	17d3      	asrs	r3, r2, #31
 800192c:	1ac9      	subs	r1, r1, r3
 800192e:	460b      	mov	r3, r1
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	440b      	add	r3, r1
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	1ad1      	subs	r1, r2, r3
 8001938:	b2cb      	uxtb	r3, r1
 800193a:	3330      	adds	r3, #48	; 0x30
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b6b      	ldr	r3, [pc, #428]	; (8001aec <floatToString+0x48c>)
 8001940:	705a      	strb	r2, [r3, #1]
		convertedString[2] = (befdec/1)%10 + 48;
 8001942:	4b68      	ldr	r3, [pc, #416]	; (8001ae4 <floatToString+0x484>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	4b6a      	ldr	r3, [pc, #424]	; (8001af0 <floatToString+0x490>)
 8001948:	fb83 1302 	smull	r1, r3, r3, r2
 800194c:	1099      	asrs	r1, r3, #2
 800194e:	17d3      	asrs	r3, r2, #31
 8001950:	1ac9      	subs	r1, r1, r3
 8001952:	460b      	mov	r3, r1
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	1ad1      	subs	r1, r2, r3
 800195c:	b2cb      	uxtb	r3, r1
 800195e:	3330      	adds	r3, #48	; 0x30
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4b62      	ldr	r3, [pc, #392]	; (8001aec <floatToString+0x48c>)
 8001964:	709a      	strb	r2, [r3, #2]
		convertedString[3] = '.';
 8001966:	4b61      	ldr	r3, [pc, #388]	; (8001aec <floatToString+0x48c>)
 8001968:	222e      	movs	r2, #46	; 0x2e
 800196a:	70da      	strb	r2, [r3, #3]
		convertedString[4] = (aftdec/10) + 48;
 800196c:	4b61      	ldr	r3, [pc, #388]	; (8001af4 <floatToString+0x494>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a5f      	ldr	r2, [pc, #380]	; (8001af0 <floatToString+0x490>)
 8001972:	fb82 1203 	smull	r1, r2, r2, r3
 8001976:	1092      	asrs	r2, r2, #2
 8001978:	17db      	asrs	r3, r3, #31
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	3330      	adds	r3, #48	; 0x30
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4b5a      	ldr	r3, [pc, #360]	; (8001aec <floatToString+0x48c>)
 8001984:	711a      	strb	r2, [r3, #4]
		convertedString[5] = ' ';
 8001986:	4b59      	ldr	r3, [pc, #356]	; (8001aec <floatToString+0x48c>)
 8001988:	2220      	movs	r2, #32
 800198a:	715a      	strb	r2, [r3, #5]
		convertedString[6] = ' ';
 800198c:	4b57      	ldr	r3, [pc, #348]	; (8001aec <floatToString+0x48c>)
 800198e:	2220      	movs	r2, #32
 8001990:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 8001992:	4b56      	ldr	r3, [pc, #344]	; (8001aec <floatToString+0x48c>)
 8001994:	2200      	movs	r2, #0
 8001996:	71da      	strb	r2, [r3, #7]
 8001998:	e12b      	b.n	8001bf2 <floatToString+0x592>
	else if ((fpnumber >= 1000) && (fpnumber < 10000))
 800199a:	4b4f      	ldr	r3, [pc, #316]	; (8001ad8 <floatToString+0x478>)
 800199c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	4b4e      	ldr	r3, [pc, #312]	; (8001ae0 <floatToString+0x480>)
 80019a6:	f7ff f867 	bl	8000a78 <__aeabi_dcmpge>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d070      	beq.n	8001a92 <floatToString+0x432>
 80019b0:	4b49      	ldr	r3, [pc, #292]	; (8001ad8 <floatToString+0x478>)
 80019b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019b6:	a344      	add	r3, pc, #272	; (adr r3, 8001ac8 <floatToString+0x468>)
 80019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019bc:	f7ff f848 	bl	8000a50 <__aeabi_dcmplt>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d065      	beq.n	8001a92 <floatToString+0x432>
		convertedString[0] = (befdec/1000) + 48;
 80019c6:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <floatToString+0x484>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a4b      	ldr	r2, [pc, #300]	; (8001af8 <floatToString+0x498>)
 80019cc:	fb82 1203 	smull	r1, r2, r2, r3
 80019d0:	1192      	asrs	r2, r2, #6
 80019d2:	17db      	asrs	r3, r3, #31
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	3330      	adds	r3, #48	; 0x30
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	4b43      	ldr	r3, [pc, #268]	; (8001aec <floatToString+0x48c>)
 80019de:	701a      	strb	r2, [r3, #0]
		convertedString[1] = (befdec/100)%10 + 48;
 80019e0:	4b40      	ldr	r3, [pc, #256]	; (8001ae4 <floatToString+0x484>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a40      	ldr	r2, [pc, #256]	; (8001ae8 <floatToString+0x488>)
 80019e6:	fb82 1203 	smull	r1, r2, r2, r3
 80019ea:	1152      	asrs	r2, r2, #5
 80019ec:	17db      	asrs	r3, r3, #31
 80019ee:	1ad2      	subs	r2, r2, r3
 80019f0:	4b3f      	ldr	r3, [pc, #252]	; (8001af0 <floatToString+0x490>)
 80019f2:	fb83 1302 	smull	r1, r3, r3, r2
 80019f6:	1099      	asrs	r1, r3, #2
 80019f8:	17d3      	asrs	r3, r2, #31
 80019fa:	1ac9      	subs	r1, r1, r3
 80019fc:	460b      	mov	r3, r1
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	1ad1      	subs	r1, r2, r3
 8001a06:	b2cb      	uxtb	r3, r1
 8001a08:	3330      	adds	r3, #48	; 0x30
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	4b37      	ldr	r3, [pc, #220]	; (8001aec <floatToString+0x48c>)
 8001a0e:	705a      	strb	r2, [r3, #1]
		convertedString[2] = (befdec/10)%10 + 48;
 8001a10:	4b34      	ldr	r3, [pc, #208]	; (8001ae4 <floatToString+0x484>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a36      	ldr	r2, [pc, #216]	; (8001af0 <floatToString+0x490>)
 8001a16:	fb82 1203 	smull	r1, r2, r2, r3
 8001a1a:	1092      	asrs	r2, r2, #2
 8001a1c:	17db      	asrs	r3, r3, #31
 8001a1e:	1ad2      	subs	r2, r2, r3
 8001a20:	4b33      	ldr	r3, [pc, #204]	; (8001af0 <floatToString+0x490>)
 8001a22:	fb83 1302 	smull	r1, r3, r3, r2
 8001a26:	1099      	asrs	r1, r3, #2
 8001a28:	17d3      	asrs	r3, r2, #31
 8001a2a:	1ac9      	subs	r1, r1, r3
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	1ad1      	subs	r1, r2, r3
 8001a36:	b2cb      	uxtb	r3, r1
 8001a38:	3330      	adds	r3, #48	; 0x30
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <floatToString+0x48c>)
 8001a3e:	709a      	strb	r2, [r3, #2]
		convertedString[3] = (befdec/1)%10 + 48;
 8001a40:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <floatToString+0x484>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <floatToString+0x490>)
 8001a46:	fb83 1302 	smull	r1, r3, r3, r2
 8001a4a:	1099      	asrs	r1, r3, #2
 8001a4c:	17d3      	asrs	r3, r2, #31
 8001a4e:	1ac9      	subs	r1, r1, r3
 8001a50:	460b      	mov	r3, r1
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	1ad1      	subs	r1, r2, r3
 8001a5a:	b2cb      	uxtb	r3, r1
 8001a5c:	3330      	adds	r3, #48	; 0x30
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	4b22      	ldr	r3, [pc, #136]	; (8001aec <floatToString+0x48c>)
 8001a62:	70da      	strb	r2, [r3, #3]
		convertedString[4] = '.';
 8001a64:	4b21      	ldr	r3, [pc, #132]	; (8001aec <floatToString+0x48c>)
 8001a66:	222e      	movs	r2, #46	; 0x2e
 8001a68:	711a      	strb	r2, [r3, #4]
		convertedString[5] = (aftdec/10) + 48;
 8001a6a:	4b22      	ldr	r3, [pc, #136]	; (8001af4 <floatToString+0x494>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a20      	ldr	r2, [pc, #128]	; (8001af0 <floatToString+0x490>)
 8001a70:	fb82 1203 	smull	r1, r2, r2, r3
 8001a74:	1092      	asrs	r2, r2, #2
 8001a76:	17db      	asrs	r3, r3, #31
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	3330      	adds	r3, #48	; 0x30
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <floatToString+0x48c>)
 8001a82:	715a      	strb	r2, [r3, #5]
		convertedString[6] = ' ';
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <floatToString+0x48c>)
 8001a86:	2220      	movs	r2, #32
 8001a88:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <floatToString+0x48c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	71da      	strb	r2, [r3, #7]
 8001a90:	e0af      	b.n	8001bf2 <floatToString+0x592>
	else if ((fpnumber >= 10000) && (fpnumber < 100000))
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <floatToString+0x478>)
 8001a94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a98:	a30b      	add	r3, pc, #44	; (adr r3, 8001ac8 <floatToString+0x468>)
 8001a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9e:	f7fe ffeb 	bl	8000a78 <__aeabi_dcmpge>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d100      	bne.n	8001aaa <floatToString+0x44a>
}
 8001aa8:	e0a3      	b.n	8001bf2 <floatToString+0x592>
	else if ((fpnumber >= 10000) && (fpnumber < 100000))
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <floatToString+0x478>)
 8001aac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ab0:	a307      	add	r3, pc, #28	; (adr r3, 8001ad0 <floatToString+0x470>)
 8001ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab6:	f7fe ffcb 	bl	8000a50 <__aeabi_dcmplt>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d11d      	bne.n	8001afc <floatToString+0x49c>
}
 8001ac0:	e097      	b.n	8001bf2 <floatToString+0x592>
 8001ac2:	bf00      	nop
 8001ac4:	f3af 8000 	nop.w
 8001ac8:	00000000 	.word	0x00000000
 8001acc:	40c38800 	.word	0x40c38800
 8001ad0:	00000000 	.word	0x00000000
 8001ad4:	40f86a00 	.word	0x40f86a00
 8001ad8:	200094e0 	.word	0x200094e0
 8001adc:	40590000 	.word	0x40590000
 8001ae0:	408f4000 	.word	0x408f4000
 8001ae4:	200094d8 	.word	0x200094d8
 8001ae8:	51eb851f 	.word	0x51eb851f
 8001aec:	20004050 	.word	0x20004050
 8001af0:	66666667 	.word	0x66666667
 8001af4:	200094dc 	.word	0x200094dc
 8001af8:	10624dd3 	.word	0x10624dd3
		convertedString[0] = (befdec/10000) + 48;
 8001afc:	4b3f      	ldr	r3, [pc, #252]	; (8001bfc <floatToString+0x59c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a3f      	ldr	r2, [pc, #252]	; (8001c00 <floatToString+0x5a0>)
 8001b02:	fb82 1203 	smull	r1, r2, r2, r3
 8001b06:	1312      	asrs	r2, r2, #12
 8001b08:	17db      	asrs	r3, r3, #31
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	3330      	adds	r3, #48	; 0x30
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b3c      	ldr	r3, [pc, #240]	; (8001c04 <floatToString+0x5a4>)
 8001b14:	701a      	strb	r2, [r3, #0]
		convertedString[1] = (befdec/1000)%10 + 48;
 8001b16:	4b39      	ldr	r3, [pc, #228]	; (8001bfc <floatToString+0x59c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a3b      	ldr	r2, [pc, #236]	; (8001c08 <floatToString+0x5a8>)
 8001b1c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b20:	1192      	asrs	r2, r2, #6
 8001b22:	17db      	asrs	r3, r3, #31
 8001b24:	1ad2      	subs	r2, r2, r3
 8001b26:	4b39      	ldr	r3, [pc, #228]	; (8001c0c <floatToString+0x5ac>)
 8001b28:	fb83 1302 	smull	r1, r3, r3, r2
 8001b2c:	1099      	asrs	r1, r3, #2
 8001b2e:	17d3      	asrs	r3, r2, #31
 8001b30:	1ac9      	subs	r1, r1, r3
 8001b32:	460b      	mov	r3, r1
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	440b      	add	r3, r1
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	1ad1      	subs	r1, r2, r3
 8001b3c:	b2cb      	uxtb	r3, r1
 8001b3e:	3330      	adds	r3, #48	; 0x30
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <floatToString+0x5a4>)
 8001b44:	705a      	strb	r2, [r3, #1]
		convertedString[2] = (befdec/100)%10 + 48;
 8001b46:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <floatToString+0x59c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a31      	ldr	r2, [pc, #196]	; (8001c10 <floatToString+0x5b0>)
 8001b4c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b50:	1152      	asrs	r2, r2, #5
 8001b52:	17db      	asrs	r3, r3, #31
 8001b54:	1ad2      	subs	r2, r2, r3
 8001b56:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <floatToString+0x5ac>)
 8001b58:	fb83 1302 	smull	r1, r3, r3, r2
 8001b5c:	1099      	asrs	r1, r3, #2
 8001b5e:	17d3      	asrs	r3, r2, #31
 8001b60:	1ac9      	subs	r1, r1, r3
 8001b62:	460b      	mov	r3, r1
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	1ad1      	subs	r1, r2, r3
 8001b6c:	b2cb      	uxtb	r3, r1
 8001b6e:	3330      	adds	r3, #48	; 0x30
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <floatToString+0x5a4>)
 8001b74:	709a      	strb	r2, [r3, #2]
		convertedString[3] = (befdec/10)%10 + 48;
 8001b76:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <floatToString+0x59c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a24      	ldr	r2, [pc, #144]	; (8001c0c <floatToString+0x5ac>)
 8001b7c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b80:	1092      	asrs	r2, r2, #2
 8001b82:	17db      	asrs	r3, r3, #31
 8001b84:	1ad2      	subs	r2, r2, r3
 8001b86:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <floatToString+0x5ac>)
 8001b88:	fb83 1302 	smull	r1, r3, r3, r2
 8001b8c:	1099      	asrs	r1, r3, #2
 8001b8e:	17d3      	asrs	r3, r2, #31
 8001b90:	1ac9      	subs	r1, r1, r3
 8001b92:	460b      	mov	r3, r1
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	1ad1      	subs	r1, r2, r3
 8001b9c:	b2cb      	uxtb	r3, r1
 8001b9e:	3330      	adds	r3, #48	; 0x30
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <floatToString+0x5a4>)
 8001ba4:	70da      	strb	r2, [r3, #3]
		convertedString[4] = (befdec/1)%10 + 48;
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <floatToString+0x59c>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <floatToString+0x5ac>)
 8001bac:	fb83 1302 	smull	r1, r3, r3, r2
 8001bb0:	1099      	asrs	r1, r3, #2
 8001bb2:	17d3      	asrs	r3, r2, #31
 8001bb4:	1ac9      	subs	r1, r1, r3
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	440b      	add	r3, r1
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	1ad1      	subs	r1, r2, r3
 8001bc0:	b2cb      	uxtb	r3, r1
 8001bc2:	3330      	adds	r3, #48	; 0x30
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <floatToString+0x5a4>)
 8001bc8:	711a      	strb	r2, [r3, #4]
		convertedString[5] = '.';
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <floatToString+0x5a4>)
 8001bcc:	222e      	movs	r2, #46	; 0x2e
 8001bce:	715a      	strb	r2, [r3, #5]
		convertedString[6] = (aftdec/10) + 48;
 8001bd0:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <floatToString+0x5b4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	; (8001c0c <floatToString+0x5ac>)
 8001bd6:	fb82 1203 	smull	r1, r2, r2, r3
 8001bda:	1092      	asrs	r2, r2, #2
 8001bdc:	17db      	asrs	r3, r3, #31
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	3330      	adds	r3, #48	; 0x30
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <floatToString+0x5a4>)
 8001be8:	719a      	strb	r2, [r3, #6]
		convertedString[7] = '\0';
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <floatToString+0x5a4>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	71da      	strb	r2, [r3, #7]
}
 8001bf0:	e7ff      	b.n	8001bf2 <floatToString+0x592>
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200094d8 	.word	0x200094d8
 8001c00:	68db8bad 	.word	0x68db8bad
 8001c04:	20004050 	.word	0x20004050
 8001c08:	10624dd3 	.word	0x10624dd3
 8001c0c:	66666667 	.word	0x66666667
 8001c10:	51eb851f 	.word	0x51eb851f
 8001c14:	200094dc 	.word	0x200094dc

08001c18 <write_balance_data_file>:

void write_balance_data_file(char buffer_full)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]

	for(file_index = 0; file_index<16 && file_name[file_index] != '\0'; file_index++) buffer[file_index] = file_name[file_index];
 8001c22:	4b62      	ldr	r3, [pc, #392]	; (8001dac <write_balance_data_file+0x194>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	e00c      	b.n	8001c44 <write_balance_data_file+0x2c>
 8001c2a:	4b60      	ldr	r3, [pc, #384]	; (8001dac <write_balance_data_file+0x194>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4b5f      	ldr	r3, [pc, #380]	; (8001dac <write_balance_data_file+0x194>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	495f      	ldr	r1, [pc, #380]	; (8001db0 <write_balance_data_file+0x198>)
 8001c34:	5c89      	ldrb	r1, [r1, r2]
 8001c36:	4a5f      	ldr	r2, [pc, #380]	; (8001db4 <write_balance_data_file+0x19c>)
 8001c38:	54d1      	strb	r1, [r2, r3]
 8001c3a:	4b5c      	ldr	r3, [pc, #368]	; (8001dac <write_balance_data_file+0x194>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	4a5a      	ldr	r2, [pc, #360]	; (8001dac <write_balance_data_file+0x194>)
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b59      	ldr	r3, [pc, #356]	; (8001dac <write_balance_data_file+0x194>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b0f      	cmp	r3, #15
 8001c4a:	dc05      	bgt.n	8001c58 <write_balance_data_file+0x40>
 8001c4c:	4b57      	ldr	r3, [pc, #348]	; (8001dac <write_balance_data_file+0x194>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a57      	ldr	r2, [pc, #348]	; (8001db0 <write_balance_data_file+0x198>)
 8001c52:	5cd3      	ldrb	r3, [r2, r3]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1e8      	bne.n	8001c2a <write_balance_data_file+0x12>

	floatToString((int)file_number);
 8001c58:	4b57      	ldr	r3, [pc, #348]	; (8001db8 <write_balance_data_file+0x1a0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fc1b 	bl	8000498 <__aeabi_i2d>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7ff fcf9 	bl	8001660 <floatToString>

	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0' && convertedString[i] != '.';i++,file_index++)buffer[file_index] = convertedString[i];
 8001c6e:	4b53      	ldr	r3, [pc, #332]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	e011      	b.n	8001c9a <write_balance_data_file+0x82>
 8001c76:	4b51      	ldr	r3, [pc, #324]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	4b4c      	ldr	r3, [pc, #304]	; (8001dac <write_balance_data_file+0x194>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4950      	ldr	r1, [pc, #320]	; (8001dc0 <write_balance_data_file+0x1a8>)
 8001c80:	5c89      	ldrb	r1, [r1, r2]
 8001c82:	4a4c      	ldr	r2, [pc, #304]	; (8001db4 <write_balance_data_file+0x19c>)
 8001c84:	54d1      	strb	r1, [r2, r3]
 8001c86:	4b4d      	ldr	r3, [pc, #308]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	4a4b      	ldr	r2, [pc, #300]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	4b46      	ldr	r3, [pc, #280]	; (8001dac <write_balance_data_file+0x194>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3301      	adds	r3, #1
 8001c96:	4a45      	ldr	r2, [pc, #276]	; (8001dac <write_balance_data_file+0x194>)
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b48      	ldr	r3, [pc, #288]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b09      	cmp	r3, #9
 8001ca0:	d80b      	bhi.n	8001cba <write_balance_data_file+0xa2>
 8001ca2:	4b46      	ldr	r3, [pc, #280]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a46      	ldr	r2, [pc, #280]	; (8001dc0 <write_balance_data_file+0x1a8>)
 8001ca8:	5cd3      	ldrb	r3, [r2, r3]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d005      	beq.n	8001cba <write_balance_data_file+0xa2>
 8001cae:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a43      	ldr	r2, [pc, #268]	; (8001dc0 <write_balance_data_file+0x1a8>)
 8001cb4:	5cd3      	ldrb	r3, [r2, r3]
 8001cb6:	2b2e      	cmp	r3, #46	; 0x2e
 8001cb8:	d1dd      	bne.n	8001c76 <write_balance_data_file+0x5e>

	if(buffer_full == 'y')
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	2b79      	cmp	r3, #121	; 0x79
 8001cbe:	d109      	bne.n	8001cd4 <write_balance_data_file+0xbc>
	{
		buffer[file_index] = 'B';
 8001cc0:	4b3a      	ldr	r3, [pc, #232]	; (8001dac <write_balance_data_file+0x194>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a3b      	ldr	r2, [pc, #236]	; (8001db4 <write_balance_data_file+0x19c>)
 8001cc6:	2142      	movs	r1, #66	; 0x42
 8001cc8:	54d1      	strb	r1, [r2, r3]
		file_index++;
 8001cca:	4b38      	ldr	r3, [pc, #224]	; (8001dac <write_balance_data_file+0x194>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	4a36      	ldr	r2, [pc, #216]	; (8001dac <write_balance_data_file+0x194>)
 8001cd2:	6013      	str	r3, [r2, #0]
	}

	for(i=0;i<4 && extention[i]!='\0';i++,file_index++) buffer[file_index]=extention[i];
 8001cd4:	4b39      	ldr	r3, [pc, #228]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	e011      	b.n	8001d00 <write_balance_data_file+0xe8>
 8001cdc:	4b37      	ldr	r3, [pc, #220]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b32      	ldr	r3, [pc, #200]	; (8001dac <write_balance_data_file+0x194>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4937      	ldr	r1, [pc, #220]	; (8001dc4 <write_balance_data_file+0x1ac>)
 8001ce6:	5c89      	ldrb	r1, [r1, r2]
 8001ce8:	4a32      	ldr	r2, [pc, #200]	; (8001db4 <write_balance_data_file+0x19c>)
 8001cea:	54d1      	strb	r1, [r2, r3]
 8001cec:	4b33      	ldr	r3, [pc, #204]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	4a32      	ldr	r2, [pc, #200]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <write_balance_data_file+0x194>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	4a2b      	ldr	r2, [pc, #172]	; (8001dac <write_balance_data_file+0x194>)
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	dc05      	bgt.n	8001d14 <write_balance_data_file+0xfc>
 8001d08:	4b2c      	ldr	r3, [pc, #176]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a2d      	ldr	r2, [pc, #180]	; (8001dc4 <write_balance_data_file+0x1ac>)
 8001d0e:	5cd3      	ldrb	r3, [r2, r3]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1e3      	bne.n	8001cdc <write_balance_data_file+0xc4>

	Create_File(buffer);								  // create the file based on the created file name
 8001d14:	4827      	ldr	r0, [pc, #156]	; (8001db4 <write_balance_data_file+0x19c>)
 8001d16:	f7ff fa07 	bl	8001128 <Create_File>
	Write_File(buffer,balance_data);	      // write the data to the file.
 8001d1a:	492b      	ldr	r1, [pc, #172]	; (8001dc8 <write_balance_data_file+0x1b0>)
 8001d1c:	4825      	ldr	r0, [pc, #148]	; (8001db4 <write_balance_data_file+0x19c>)
 8001d1e:	f7ff f9bd 	bl	800109c <Write_File>
	balance_index = 0;
 8001d22:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <write_balance_data_file+0x1b4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
	write_header  = 'n';
 8001d28:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <write_balance_data_file+0x1b8>)
 8001d2a:	226e      	movs	r2, #110	; 0x6e
 8001d2c:	701a      	strb	r2, [r3, #0]
	get_init_conditions = 0;
 8001d2e:	4b29      	ldr	r3, [pc, #164]	; (8001dd4 <write_balance_data_file+0x1bc>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
	file_number++;
 8001d34:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <write_balance_data_file+0x1a0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <write_balance_data_file+0x1a0>)
 8001d3c:	6013      	str	r3, [r2, #0]

	for(i=0;i<10000 && balance_data[i]!='\0';i++)balance_data[i] = '\0';
 8001d3e:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	e009      	b.n	8001d5a <write_balance_data_file+0x142>
 8001d46:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a1f      	ldr	r2, [pc, #124]	; (8001dc8 <write_balance_data_file+0x1b0>)
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	54d1      	strb	r1, [r2, r3]
 8001d50:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	3301      	adds	r3, #1
 8001d56:	4a19      	ldr	r2, [pc, #100]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d62:	4293      	cmp	r3, r2
 8001d64:	dc05      	bgt.n	8001d72 <write_balance_data_file+0x15a>
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a17      	ldr	r2, [pc, #92]	; (8001dc8 <write_balance_data_file+0x1b0>)
 8001d6c:	5cd3      	ldrb	r3, [r2, r3]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1e9      	bne.n	8001d46 <write_balance_data_file+0x12e>
	for(i=0;i<11 && buffer[i]!='\0';i++)buffer[i] = '\0';
 8001d72:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	e009      	b.n	8001d8e <write_balance_data_file+0x176>
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a0d      	ldr	r2, [pc, #52]	; (8001db4 <write_balance_data_file+0x19c>)
 8001d80:	2100      	movs	r1, #0
 8001d82:	54d1      	strb	r1, [r2, r3]
 8001d84:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	4a0c      	ldr	r2, [pc, #48]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2b0a      	cmp	r3, #10
 8001d94:	dc05      	bgt.n	8001da2 <write_balance_data_file+0x18a>
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <write_balance_data_file+0x1a4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a06      	ldr	r2, [pc, #24]	; (8001db4 <write_balance_data_file+0x19c>)
 8001d9c:	5cd3      	ldrb	r3, [r2, r3]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1eb      	bne.n	8001d7a <write_balance_data_file+0x162>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2000400c 	.word	0x2000400c
 8001db0:	200000a8 	.word	0x200000a8
 8001db4:	20004034 	.word	0x20004034
 8001db8:	20004008 	.word	0x20004008
 8001dbc:	20003ffc 	.word	0x20003ffc
 8001dc0:	20004050 	.word	0x20004050
 8001dc4:	200000c4 	.word	0x200000c4
 8001dc8:	2000405c 	.word	0x2000405c
 8001dcc:	20003ff8 	.word	0x20003ff8
 8001dd0:	200001d0 	.word	0x200001d0
 8001dd4:	200000ca 	.word	0x200000ca

08001dd8 <add_data_to_array>:

void add_data_to_array()
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
	if(write_header == 'n')
 8001ddc:	4b7a      	ldr	r3, [pc, #488]	; (8001fc8 <add_data_to_array+0x1f0>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b6e      	cmp	r3, #110	; 0x6e
 8001de2:	d122      	bne.n	8001e2a <add_data_to_array+0x52>
	{
		for(i = 0;i < (sizeof balance_header) && balance_header[i] != '\0';i++)
 8001de4:	4b79      	ldr	r3, [pc, #484]	; (8001fcc <add_data_to_array+0x1f4>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	e011      	b.n	8001e10 <add_data_to_array+0x38>
		{
			balance_data[balance_index] = balance_header[i];
 8001dec:	4b77      	ldr	r3, [pc, #476]	; (8001fcc <add_data_to_array+0x1f4>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b77      	ldr	r3, [pc, #476]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4977      	ldr	r1, [pc, #476]	; (8001fd4 <add_data_to_array+0x1fc>)
 8001df6:	5c89      	ldrb	r1, [r1, r2]
 8001df8:	4a77      	ldr	r2, [pc, #476]	; (8001fd8 <add_data_to_array+0x200>)
 8001dfa:	54d1      	strb	r1, [r2, r3]
			balance_index++;
 8001dfc:	4b74      	ldr	r3, [pc, #464]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	3301      	adds	r3, #1
 8001e02:	4a73      	ldr	r2, [pc, #460]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001e04:	6013      	str	r3, [r2, #0]
		for(i = 0;i < (sizeof balance_header) && balance_header[i] != '\0';i++)
 8001e06:	4b71      	ldr	r3, [pc, #452]	; (8001fcc <add_data_to_array+0x1f4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	4a6f      	ldr	r2, [pc, #444]	; (8001fcc <add_data_to_array+0x1f4>)
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	4b6e      	ldr	r3, [pc, #440]	; (8001fcc <add_data_to_array+0x1f4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2bb9      	cmp	r3, #185	; 0xb9
 8001e16:	d805      	bhi.n	8001e24 <add_data_to_array+0x4c>
 8001e18:	4b6c      	ldr	r3, [pc, #432]	; (8001fcc <add_data_to_array+0x1f4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a6d      	ldr	r2, [pc, #436]	; (8001fd4 <add_data_to_array+0x1fc>)
 8001e1e:	5cd3      	ldrb	r3, [r2, r3]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1e3      	bne.n	8001dec <add_data_to_array+0x14>
		}
		write_header = 'y';
 8001e24:	4b68      	ldr	r3, [pc, #416]	; (8001fc8 <add_data_to_array+0x1f0>)
 8001e26:	2279      	movs	r2, #121	; 0x79
 8001e28:	701a      	strb	r2, [r3, #0]
	}
	// CSV file data format: pH, total_pH_up_ml, total_pH_down_ml, time_to_bal_pH, TDS, total_nutrient_ml, time_to_bal_nutrient, error, water_temp
	floatToString((double)pH);	// convert water temp to char array and write it to the data buffer
 8001e2a:	4b6c      	ldr	r3, [pc, #432]	; (8001fdc <add_data_to_array+0x204>)
 8001e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e30:	4610      	mov	r0, r2
 8001e32:	4619      	mov	r1, r3
 8001e34:	f7ff fc14 	bl	8001660 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001e38:	4b64      	ldr	r3, [pc, #400]	; (8001fcc <add_data_to_array+0x1f4>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e011      	b.n	8001e64 <add_data_to_array+0x8c>
	{
		balance_data[balance_index] = convertedString[i];
 8001e40:	4b62      	ldr	r3, [pc, #392]	; (8001fcc <add_data_to_array+0x1f4>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b62      	ldr	r3, [pc, #392]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4965      	ldr	r1, [pc, #404]	; (8001fe0 <add_data_to_array+0x208>)
 8001e4a:	5c89      	ldrb	r1, [r1, r2]
 8001e4c:	4a62      	ldr	r2, [pc, #392]	; (8001fd8 <add_data_to_array+0x200>)
 8001e4e:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001e50:	4b5f      	ldr	r3, [pc, #380]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3301      	adds	r3, #1
 8001e56:	4a5e      	ldr	r2, [pc, #376]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001e58:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001e5a:	4b5c      	ldr	r3, [pc, #368]	; (8001fcc <add_data_to_array+0x1f4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	4a5a      	ldr	r2, [pc, #360]	; (8001fcc <add_data_to_array+0x1f4>)
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	4b59      	ldr	r3, [pc, #356]	; (8001fcc <add_data_to_array+0x1f4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b09      	cmp	r3, #9
 8001e6a:	d805      	bhi.n	8001e78 <add_data_to_array+0xa0>
 8001e6c:	4b57      	ldr	r3, [pc, #348]	; (8001fcc <add_data_to_array+0x1f4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a5b      	ldr	r2, [pc, #364]	; (8001fe0 <add_data_to_array+0x208>)
 8001e72:	5cd3      	ldrb	r3, [r2, r3]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1e3      	bne.n	8001e40 <add_data_to_array+0x68>
	}
	balance_data[balance_index] = ',';
 8001e78:	4b55      	ldr	r3, [pc, #340]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a56      	ldr	r2, [pc, #344]	; (8001fd8 <add_data_to_array+0x200>)
 8001e7e:	212c      	movs	r1, #44	; 0x2c
 8001e80:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001e82:	4b53      	ldr	r3, [pc, #332]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	3301      	adds	r3, #1
 8001e88:	4a51      	ldr	r2, [pc, #324]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001e8a:	6013      	str	r3, [r2, #0]

	floatToString((double)total_pH_up_ml);	// convert water temp to char array and write it to the data buffer
 8001e8c:	4b55      	ldr	r3, [pc, #340]	; (8001fe4 <add_data_to_array+0x20c>)
 8001e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	f7ff fbe3 	bl	8001660 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001e9a:	4b4c      	ldr	r3, [pc, #304]	; (8001fcc <add_data_to_array+0x1f4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	e011      	b.n	8001ec6 <add_data_to_array+0xee>
	{
		balance_data[balance_index] = convertedString[i];
 8001ea2:	4b4a      	ldr	r3, [pc, #296]	; (8001fcc <add_data_to_array+0x1f4>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4b4a      	ldr	r3, [pc, #296]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	494d      	ldr	r1, [pc, #308]	; (8001fe0 <add_data_to_array+0x208>)
 8001eac:	5c89      	ldrb	r1, [r1, r2]
 8001eae:	4a4a      	ldr	r2, [pc, #296]	; (8001fd8 <add_data_to_array+0x200>)
 8001eb0:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001eb2:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	4a45      	ldr	r2, [pc, #276]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001eba:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001ebc:	4b43      	ldr	r3, [pc, #268]	; (8001fcc <add_data_to_array+0x1f4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	4a42      	ldr	r2, [pc, #264]	; (8001fcc <add_data_to_array+0x1f4>)
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	4b41      	ldr	r3, [pc, #260]	; (8001fcc <add_data_to_array+0x1f4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b09      	cmp	r3, #9
 8001ecc:	d805      	bhi.n	8001eda <add_data_to_array+0x102>
 8001ece:	4b3f      	ldr	r3, [pc, #252]	; (8001fcc <add_data_to_array+0x1f4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a43      	ldr	r2, [pc, #268]	; (8001fe0 <add_data_to_array+0x208>)
 8001ed4:	5cd3      	ldrb	r3, [r2, r3]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1e3      	bne.n	8001ea2 <add_data_to_array+0xca>
	}
	balance_data[balance_index] = ',';
 8001eda:	4b3d      	ldr	r3, [pc, #244]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a3e      	ldr	r2, [pc, #248]	; (8001fd8 <add_data_to_array+0x200>)
 8001ee0:	212c      	movs	r1, #44	; 0x2c
 8001ee2:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001ee4:	4b3a      	ldr	r3, [pc, #232]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	4a39      	ldr	r2, [pc, #228]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001eec:	6013      	str	r3, [r2, #0]

	floatToString((double)pH_up_dose);	// convert water temp to char array and write it to the data buffer
 8001eee:	4b3e      	ldr	r3, [pc, #248]	; (8001fe8 <add_data_to_array+0x210>)
 8001ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f7ff fbb2 	bl	8001660 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001efc:	4b33      	ldr	r3, [pc, #204]	; (8001fcc <add_data_to_array+0x1f4>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	e011      	b.n	8001f28 <add_data_to_array+0x150>
	{
		balance_data[balance_index] = convertedString[i];
 8001f04:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <add_data_to_array+0x1f4>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b31      	ldr	r3, [pc, #196]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4934      	ldr	r1, [pc, #208]	; (8001fe0 <add_data_to_array+0x208>)
 8001f0e:	5c89      	ldrb	r1, [r1, r2]
 8001f10:	4a31      	ldr	r2, [pc, #196]	; (8001fd8 <add_data_to_array+0x200>)
 8001f12:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001f14:	4b2e      	ldr	r3, [pc, #184]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	4a2d      	ldr	r2, [pc, #180]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001f1c:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001f1e:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <add_data_to_array+0x1f4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	3301      	adds	r3, #1
 8001f24:	4a29      	ldr	r2, [pc, #164]	; (8001fcc <add_data_to_array+0x1f4>)
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <add_data_to_array+0x1f4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b09      	cmp	r3, #9
 8001f2e:	d805      	bhi.n	8001f3c <add_data_to_array+0x164>
 8001f30:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <add_data_to_array+0x1f4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a2a      	ldr	r2, [pc, #168]	; (8001fe0 <add_data_to_array+0x208>)
 8001f36:	5cd3      	ldrb	r3, [r2, r3]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1e3      	bne.n	8001f04 <add_data_to_array+0x12c>
	}
	balance_data[balance_index] = ',';
 8001f3c:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <add_data_to_array+0x200>)
 8001f42:	212c      	movs	r1, #44	; 0x2c
 8001f44:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001f46:	4b22      	ldr	r3, [pc, #136]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	4a20      	ldr	r2, [pc, #128]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001f4e:	6013      	str	r3, [r2, #0]


	floatToString((double)total_pH_down_ml);	// convert water temp to char array and write it to the data buffer
 8001f50:	4b26      	ldr	r3, [pc, #152]	; (8001fec <add_data_to_array+0x214>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	4610      	mov	r0, r2
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f7ff fb81 	bl	8001660 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <add_data_to_array+0x1f4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	e011      	b.n	8001f8a <add_data_to_array+0x1b2>
	{
		balance_data[balance_index] = convertedString[i];
 8001f66:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <add_data_to_array+0x1f4>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	491c      	ldr	r1, [pc, #112]	; (8001fe0 <add_data_to_array+0x208>)
 8001f70:	5c89      	ldrb	r1, [r1, r2]
 8001f72:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <add_data_to_array+0x200>)
 8001f74:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001f7e:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <add_data_to_array+0x1f4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	3301      	adds	r3, #1
 8001f86:	4a11      	ldr	r2, [pc, #68]	; (8001fcc <add_data_to_array+0x1f4>)
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <add_data_to_array+0x1f4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b09      	cmp	r3, #9
 8001f90:	d805      	bhi.n	8001f9e <add_data_to_array+0x1c6>
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <add_data_to_array+0x1f4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <add_data_to_array+0x208>)
 8001f98:	5cd3      	ldrb	r3, [r2, r3]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1e3      	bne.n	8001f66 <add_data_to_array+0x18e>
	}
	balance_data[balance_index] = ',';
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <add_data_to_array+0x200>)
 8001fa4:	212c      	movs	r1, #44	; 0x2c
 8001fa6:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	3301      	adds	r3, #1
 8001fae:	4a08      	ldr	r2, [pc, #32]	; (8001fd0 <add_data_to_array+0x1f8>)
 8001fb0:	6013      	str	r3, [r2, #0]

	floatToString((double)pH_down_dose);	// convert water temp to char array and write it to the data buffer
 8001fb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <add_data_to_array+0x218>)
 8001fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f7ff fb50 	bl	8001660 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8001fc0:	4b02      	ldr	r3, [pc, #8]	; (8001fcc <add_data_to_array+0x1f4>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	e027      	b.n	8002018 <add_data_to_array+0x240>
 8001fc8:	200001d0 	.word	0x200001d0
 8001fcc:	20003ffc 	.word	0x20003ffc
 8001fd0:	20003ff8 	.word	0x20003ff8
 8001fd4:	2000010c 	.word	0x2000010c
 8001fd8:	2000405c 	.word	0x2000405c
 8001fdc:	200017c8 	.word	0x200017c8
 8001fe0:	20004050 	.word	0x20004050
 8001fe4:	20001798 	.word	0x20001798
 8001fe8:	20001778 	.word	0x20001778
 8001fec:	200017a0 	.word	0x200017a0
 8001ff0:	20001780 	.word	0x20001780
	{
		balance_data[balance_index] = convertedString[i];
 8001ff4:	4b7e      	ldr	r3, [pc, #504]	; (80021f0 <add_data_to_array+0x418>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b7e      	ldr	r3, [pc, #504]	; (80021f4 <add_data_to_array+0x41c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	497e      	ldr	r1, [pc, #504]	; (80021f8 <add_data_to_array+0x420>)
 8001ffe:	5c89      	ldrb	r1, [r1, r2]
 8002000:	4a7e      	ldr	r2, [pc, #504]	; (80021fc <add_data_to_array+0x424>)
 8002002:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002004:	4b7b      	ldr	r3, [pc, #492]	; (80021f4 <add_data_to_array+0x41c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	4a7a      	ldr	r2, [pc, #488]	; (80021f4 <add_data_to_array+0x41c>)
 800200c:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 800200e:	4b78      	ldr	r3, [pc, #480]	; (80021f0 <add_data_to_array+0x418>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	3301      	adds	r3, #1
 8002014:	4a76      	ldr	r2, [pc, #472]	; (80021f0 <add_data_to_array+0x418>)
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	4b75      	ldr	r3, [pc, #468]	; (80021f0 <add_data_to_array+0x418>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b09      	cmp	r3, #9
 800201e:	d805      	bhi.n	800202c <add_data_to_array+0x254>
 8002020:	4b73      	ldr	r3, [pc, #460]	; (80021f0 <add_data_to_array+0x418>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a74      	ldr	r2, [pc, #464]	; (80021f8 <add_data_to_array+0x420>)
 8002026:	5cd3      	ldrb	r3, [r2, r3]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1e3      	bne.n	8001ff4 <add_data_to_array+0x21c>
	}
	balance_data[balance_index] = ',';
 800202c:	4b71      	ldr	r3, [pc, #452]	; (80021f4 <add_data_to_array+0x41c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a72      	ldr	r2, [pc, #456]	; (80021fc <add_data_to_array+0x424>)
 8002032:	212c      	movs	r1, #44	; 0x2c
 8002034:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002036:	4b6f      	ldr	r3, [pc, #444]	; (80021f4 <add_data_to_array+0x41c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	3301      	adds	r3, #1
 800203c:	4a6d      	ldr	r2, [pc, #436]	; (80021f4 <add_data_to_array+0x41c>)
 800203e:	6013      	str	r3, [r2, #0]


	floatToString(time_to_bal_pH);	// convert water temp to char array and write it to the data buffer
 8002040:	4b6f      	ldr	r3, [pc, #444]	; (8002200 <add_data_to_array+0x428>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fa27 	bl	8000498 <__aeabi_i2d>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	f7ff fb05 	bl	8001660 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8002056:	4b66      	ldr	r3, [pc, #408]	; (80021f0 <add_data_to_array+0x418>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	e011      	b.n	8002082 <add_data_to_array+0x2aa>
	{
		balance_data[balance_index] = convertedString[i];
 800205e:	4b64      	ldr	r3, [pc, #400]	; (80021f0 <add_data_to_array+0x418>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	4b64      	ldr	r3, [pc, #400]	; (80021f4 <add_data_to_array+0x41c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4964      	ldr	r1, [pc, #400]	; (80021f8 <add_data_to_array+0x420>)
 8002068:	5c89      	ldrb	r1, [r1, r2]
 800206a:	4a64      	ldr	r2, [pc, #400]	; (80021fc <add_data_to_array+0x424>)
 800206c:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 800206e:	4b61      	ldr	r3, [pc, #388]	; (80021f4 <add_data_to_array+0x41c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3301      	adds	r3, #1
 8002074:	4a5f      	ldr	r2, [pc, #380]	; (80021f4 <add_data_to_array+0x41c>)
 8002076:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8002078:	4b5d      	ldr	r3, [pc, #372]	; (80021f0 <add_data_to_array+0x418>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	3301      	adds	r3, #1
 800207e:	4a5c      	ldr	r2, [pc, #368]	; (80021f0 <add_data_to_array+0x418>)
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b5b      	ldr	r3, [pc, #364]	; (80021f0 <add_data_to_array+0x418>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b09      	cmp	r3, #9
 8002088:	d805      	bhi.n	8002096 <add_data_to_array+0x2be>
 800208a:	4b59      	ldr	r3, [pc, #356]	; (80021f0 <add_data_to_array+0x418>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a5a      	ldr	r2, [pc, #360]	; (80021f8 <add_data_to_array+0x420>)
 8002090:	5cd3      	ldrb	r3, [r2, r3]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1e3      	bne.n	800205e <add_data_to_array+0x286>
	}
	balance_data[balance_index] = ',';
 8002096:	4b57      	ldr	r3, [pc, #348]	; (80021f4 <add_data_to_array+0x41c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a58      	ldr	r2, [pc, #352]	; (80021fc <add_data_to_array+0x424>)
 800209c:	212c      	movs	r1, #44	; 0x2c
 800209e:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80020a0:	4b54      	ldr	r3, [pc, #336]	; (80021f4 <add_data_to_array+0x41c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3301      	adds	r3, #1
 80020a6:	4a53      	ldr	r2, [pc, #332]	; (80021f4 <add_data_to_array+0x41c>)
 80020a8:	6013      	str	r3, [r2, #0]

	floatToString( (double)TDS);	// convert water temp to char array and write it to the data buffer
 80020aa:	4b56      	ldr	r3, [pc, #344]	; (8002204 <add_data_to_array+0x42c>)
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	f7ff fad4 	bl	8001660 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 80020b8:	4b4d      	ldr	r3, [pc, #308]	; (80021f0 <add_data_to_array+0x418>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	e011      	b.n	80020e4 <add_data_to_array+0x30c>
	{
		balance_data[balance_index] = convertedString[i];
 80020c0:	4b4b      	ldr	r3, [pc, #300]	; (80021f0 <add_data_to_array+0x418>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b4b      	ldr	r3, [pc, #300]	; (80021f4 <add_data_to_array+0x41c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	494b      	ldr	r1, [pc, #300]	; (80021f8 <add_data_to_array+0x420>)
 80020ca:	5c89      	ldrb	r1, [r1, r2]
 80020cc:	4a4b      	ldr	r2, [pc, #300]	; (80021fc <add_data_to_array+0x424>)
 80020ce:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 80020d0:	4b48      	ldr	r3, [pc, #288]	; (80021f4 <add_data_to_array+0x41c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	3301      	adds	r3, #1
 80020d6:	4a47      	ldr	r2, [pc, #284]	; (80021f4 <add_data_to_array+0x41c>)
 80020d8:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 80020da:	4b45      	ldr	r3, [pc, #276]	; (80021f0 <add_data_to_array+0x418>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	3301      	adds	r3, #1
 80020e0:	4a43      	ldr	r2, [pc, #268]	; (80021f0 <add_data_to_array+0x418>)
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	4b42      	ldr	r3, [pc, #264]	; (80021f0 <add_data_to_array+0x418>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b09      	cmp	r3, #9
 80020ea:	d805      	bhi.n	80020f8 <add_data_to_array+0x320>
 80020ec:	4b40      	ldr	r3, [pc, #256]	; (80021f0 <add_data_to_array+0x418>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a41      	ldr	r2, [pc, #260]	; (80021f8 <add_data_to_array+0x420>)
 80020f2:	5cd3      	ldrb	r3, [r2, r3]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1e3      	bne.n	80020c0 <add_data_to_array+0x2e8>
	}
	balance_data[balance_index] = ',';
 80020f8:	4b3e      	ldr	r3, [pc, #248]	; (80021f4 <add_data_to_array+0x41c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a3f      	ldr	r2, [pc, #252]	; (80021fc <add_data_to_array+0x424>)
 80020fe:	212c      	movs	r1, #44	; 0x2c
 8002100:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002102:	4b3c      	ldr	r3, [pc, #240]	; (80021f4 <add_data_to_array+0x41c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	3301      	adds	r3, #1
 8002108:	4a3a      	ldr	r2, [pc, #232]	; (80021f4 <add_data_to_array+0x41c>)
 800210a:	6013      	str	r3, [r2, #0]

	floatToString((double)total_nutrient_ml);	// convert water temp to char array and write it to the data buffer
 800210c:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <add_data_to_array+0x430>)
 800210e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002112:	4610      	mov	r0, r2
 8002114:	4619      	mov	r1, r3
 8002116:	f7ff faa3 	bl	8001660 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 800211a:	4b35      	ldr	r3, [pc, #212]	; (80021f0 <add_data_to_array+0x418>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	e011      	b.n	8002146 <add_data_to_array+0x36e>
	{
		balance_data[balance_index] = convertedString[i];
 8002122:	4b33      	ldr	r3, [pc, #204]	; (80021f0 <add_data_to_array+0x418>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	4b33      	ldr	r3, [pc, #204]	; (80021f4 <add_data_to_array+0x41c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4933      	ldr	r1, [pc, #204]	; (80021f8 <add_data_to_array+0x420>)
 800212c:	5c89      	ldrb	r1, [r1, r2]
 800212e:	4a33      	ldr	r2, [pc, #204]	; (80021fc <add_data_to_array+0x424>)
 8002130:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002132:	4b30      	ldr	r3, [pc, #192]	; (80021f4 <add_data_to_array+0x41c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	3301      	adds	r3, #1
 8002138:	4a2e      	ldr	r2, [pc, #184]	; (80021f4 <add_data_to_array+0x41c>)
 800213a:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 800213c:	4b2c      	ldr	r3, [pc, #176]	; (80021f0 <add_data_to_array+0x418>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	4a2b      	ldr	r2, [pc, #172]	; (80021f0 <add_data_to_array+0x418>)
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4b2a      	ldr	r3, [pc, #168]	; (80021f0 <add_data_to_array+0x418>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2b09      	cmp	r3, #9
 800214c:	d805      	bhi.n	800215a <add_data_to_array+0x382>
 800214e:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <add_data_to_array+0x418>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a29      	ldr	r2, [pc, #164]	; (80021f8 <add_data_to_array+0x420>)
 8002154:	5cd3      	ldrb	r3, [r2, r3]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1e3      	bne.n	8002122 <add_data_to_array+0x34a>
	}
	balance_data[balance_index] = ',';
 800215a:	4b26      	ldr	r3, [pc, #152]	; (80021f4 <add_data_to_array+0x41c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a27      	ldr	r2, [pc, #156]	; (80021fc <add_data_to_array+0x424>)
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002164:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <add_data_to_array+0x41c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	3301      	adds	r3, #1
 800216a:	4a22      	ldr	r2, [pc, #136]	; (80021f4 <add_data_to_array+0x41c>)
 800216c:	6013      	str	r3, [r2, #0]

	floatToString( (double)nutrient_dose);	// convert water temp to char array and write it to the data buffer
 800216e:	4b27      	ldr	r3, [pc, #156]	; (800220c <add_data_to_array+0x434>)
 8002170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	f7ff fa72 	bl	8001660 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 800217c:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <add_data_to_array+0x418>)
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	e011      	b.n	80021a8 <add_data_to_array+0x3d0>
	{
		balance_data[balance_index] = convertedString[i];
 8002184:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <add_data_to_array+0x418>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <add_data_to_array+0x41c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	491a      	ldr	r1, [pc, #104]	; (80021f8 <add_data_to_array+0x420>)
 800218e:	5c89      	ldrb	r1, [r1, r2]
 8002190:	4a1a      	ldr	r2, [pc, #104]	; (80021fc <add_data_to_array+0x424>)
 8002192:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002194:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <add_data_to_array+0x41c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	3301      	adds	r3, #1
 800219a:	4a16      	ldr	r2, [pc, #88]	; (80021f4 <add_data_to_array+0x41c>)
 800219c:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 800219e:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <add_data_to_array+0x418>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	3301      	adds	r3, #1
 80021a4:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <add_data_to_array+0x418>)
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <add_data_to_array+0x418>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b09      	cmp	r3, #9
 80021ae:	d805      	bhi.n	80021bc <add_data_to_array+0x3e4>
 80021b0:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <add_data_to_array+0x418>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <add_data_to_array+0x420>)
 80021b6:	5cd3      	ldrb	r3, [r2, r3]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1e3      	bne.n	8002184 <add_data_to_array+0x3ac>
	}
	balance_data[balance_index] = ',';
 80021bc:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <add_data_to_array+0x41c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0e      	ldr	r2, [pc, #56]	; (80021fc <add_data_to_array+0x424>)
 80021c2:	212c      	movs	r1, #44	; 0x2c
 80021c4:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <add_data_to_array+0x41c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	3301      	adds	r3, #1
 80021cc:	4a09      	ldr	r2, [pc, #36]	; (80021f4 <add_data_to_array+0x41c>)
 80021ce:	6013      	str	r3, [r2, #0]

	floatToString(time_to_bal_nutrient);	// convert water temp to char array and write it to the data buffer
 80021d0:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <add_data_to_array+0x438>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe f95f 	bl	8000498 <__aeabi_i2d>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	f7ff fa3d 	bl	8001660 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 80021e6:	4b02      	ldr	r3, [pc, #8]	; (80021f0 <add_data_to_array+0x418>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	e024      	b.n	8002238 <add_data_to_array+0x460>
 80021ee:	bf00      	nop
 80021f0:	20003ffc 	.word	0x20003ffc
 80021f4:	20003ff8 	.word	0x20003ff8
 80021f8:	20004050 	.word	0x20004050
 80021fc:	2000405c 	.word	0x2000405c
 8002200:	20004004 	.word	0x20004004
 8002204:	200017c0 	.word	0x200017c0
 8002208:	20001790 	.word	0x20001790
 800220c:	20001788 	.word	0x20001788
 8002210:	20004000 	.word	0x20004000
	{
		balance_data[balance_index] = convertedString[i];
 8002214:	4b3b      	ldr	r3, [pc, #236]	; (8002304 <add_data_to_array+0x52c>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b3b      	ldr	r3, [pc, #236]	; (8002308 <add_data_to_array+0x530>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	493b      	ldr	r1, [pc, #236]	; (800230c <add_data_to_array+0x534>)
 800221e:	5c89      	ldrb	r1, [r1, r2]
 8002220:	4a3b      	ldr	r2, [pc, #236]	; (8002310 <add_data_to_array+0x538>)
 8002222:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002224:	4b38      	ldr	r3, [pc, #224]	; (8002308 <add_data_to_array+0x530>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	3301      	adds	r3, #1
 800222a:	4a37      	ldr	r2, [pc, #220]	; (8002308 <add_data_to_array+0x530>)
 800222c:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 800222e:	4b35      	ldr	r3, [pc, #212]	; (8002304 <add_data_to_array+0x52c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	3301      	adds	r3, #1
 8002234:	4a33      	ldr	r2, [pc, #204]	; (8002304 <add_data_to_array+0x52c>)
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	4b32      	ldr	r3, [pc, #200]	; (8002304 <add_data_to_array+0x52c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b09      	cmp	r3, #9
 800223e:	d805      	bhi.n	800224c <add_data_to_array+0x474>
 8002240:	4b30      	ldr	r3, [pc, #192]	; (8002304 <add_data_to_array+0x52c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a31      	ldr	r2, [pc, #196]	; (800230c <add_data_to_array+0x534>)
 8002246:	5cd3      	ldrb	r3, [r2, r3]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1e3      	bne.n	8002214 <add_data_to_array+0x43c>
	}
	balance_data[balance_index] = ',';
 800224c:	4b2e      	ldr	r3, [pc, #184]	; (8002308 <add_data_to_array+0x530>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a2f      	ldr	r2, [pc, #188]	; (8002310 <add_data_to_array+0x538>)
 8002252:	212c      	movs	r1, #44	; 0x2c
 8002254:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002256:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <add_data_to_array+0x530>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	3301      	adds	r3, #1
 800225c:	4a2a      	ldr	r2, [pc, #168]	; (8002308 <add_data_to_array+0x530>)
 800225e:	6013      	str	r3, [r2, #0]

	balance_data[balance_index] = error;
 8002260:	4b29      	ldr	r3, [pc, #164]	; (8002308 <add_data_to_array+0x530>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a2b      	ldr	r2, [pc, #172]	; (8002314 <add_data_to_array+0x53c>)
 8002266:	7811      	ldrb	r1, [r2, #0]
 8002268:	4a29      	ldr	r2, [pc, #164]	; (8002310 <add_data_to_array+0x538>)
 800226a:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 800226c:	4b26      	ldr	r3, [pc, #152]	; (8002308 <add_data_to_array+0x530>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	3301      	adds	r3, #1
 8002272:	4a25      	ldr	r2, [pc, #148]	; (8002308 <add_data_to_array+0x530>)
 8002274:	6013      	str	r3, [r2, #0]
	balance_data[balance_index] = ',';
 8002276:	4b24      	ldr	r3, [pc, #144]	; (8002308 <add_data_to_array+0x530>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a25      	ldr	r2, [pc, #148]	; (8002310 <add_data_to_array+0x538>)
 800227c:	212c      	movs	r1, #44	; 0x2c
 800227e:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002280:	4b21      	ldr	r3, [pc, #132]	; (8002308 <add_data_to_array+0x530>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	3301      	adds	r3, #1
 8002286:	4a20      	ldr	r2, [pc, #128]	; (8002308 <add_data_to_array+0x530>)
 8002288:	6013      	str	r3, [r2, #0]

	floatToString((double)water_temp);	// convert water temp to char array and write it to the data buffer
 800228a:	4b23      	ldr	r3, [pc, #140]	; (8002318 <add_data_to_array+0x540>)
 800228c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002290:	4610      	mov	r0, r2
 8002292:	4619      	mov	r1, r3
 8002294:	f7ff f9e4 	bl	8001660 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 8002298:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <add_data_to_array+0x52c>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	e011      	b.n	80022c4 <add_data_to_array+0x4ec>
	{
		balance_data[balance_index] = convertedString[i];
 80022a0:	4b18      	ldr	r3, [pc, #96]	; (8002304 <add_data_to_array+0x52c>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b18      	ldr	r3, [pc, #96]	; (8002308 <add_data_to_array+0x530>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4918      	ldr	r1, [pc, #96]	; (800230c <add_data_to_array+0x534>)
 80022aa:	5c89      	ldrb	r1, [r1, r2]
 80022ac:	4a18      	ldr	r2, [pc, #96]	; (8002310 <add_data_to_array+0x538>)
 80022ae:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <add_data_to_array+0x530>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	4a14      	ldr	r2, [pc, #80]	; (8002308 <add_data_to_array+0x530>)
 80022b8:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <add_data_to_array+0x52c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	3301      	adds	r3, #1
 80022c0:	4a10      	ldr	r2, [pc, #64]	; (8002304 <add_data_to_array+0x52c>)
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <add_data_to_array+0x52c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b09      	cmp	r3, #9
 80022ca:	d805      	bhi.n	80022d8 <add_data_to_array+0x500>
 80022cc:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <add_data_to_array+0x52c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0e      	ldr	r2, [pc, #56]	; (800230c <add_data_to_array+0x534>)
 80022d2:	5cd3      	ldrb	r3, [r2, r3]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1e3      	bne.n	80022a0 <add_data_to_array+0x4c8>
	}
	balance_data[balance_index] = ',';
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <add_data_to_array+0x530>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <add_data_to_array+0x538>)
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <add_data_to_array+0x530>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	3301      	adds	r3, #1
 80022e8:	4a07      	ldr	r2, [pc, #28]	; (8002308 <add_data_to_array+0x530>)
 80022ea:	6013      	str	r3, [r2, #0]
	balance_data[balance_index] = '\n';
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <add_data_to_array+0x530>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a07      	ldr	r2, [pc, #28]	; (8002310 <add_data_to_array+0x538>)
 80022f2:	210a      	movs	r1, #10
 80022f4:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80022f6:	4b04      	ldr	r3, [pc, #16]	; (8002308 <add_data_to_array+0x530>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3301      	adds	r3, #1
 80022fc:	4a02      	ldr	r2, [pc, #8]	; (8002308 <add_data_to_array+0x530>)
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20003ffc 	.word	0x20003ffc
 8002308:	20003ff8 	.word	0x20003ff8
 800230c:	20004050 	.word	0x20004050
 8002310:	2000405c 	.word	0x2000405c
 8002314:	200001cc 	.word	0x200001cc
 8002318:	200017d0 	.word	0x200017d0

0800231c <appendInitialConditions>:

void appendInitialConditions()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	for(i = 0; i < 17 && pH_init_title[i] != '\0';i++)						// append init pH title to the data array
 8002320:	4b8a      	ldr	r3, [pc, #552]	; (800254c <appendInitialConditions+0x230>)
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	e011      	b.n	800234c <appendInitialConditions+0x30>
	{
		balance_data[balance_index] = pH_init_title[i];
 8002328:	4b88      	ldr	r3, [pc, #544]	; (800254c <appendInitialConditions+0x230>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b88      	ldr	r3, [pc, #544]	; (8002550 <appendInitialConditions+0x234>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4988      	ldr	r1, [pc, #544]	; (8002554 <appendInitialConditions+0x238>)
 8002332:	5c89      	ldrb	r1, [r1, r2]
 8002334:	4a88      	ldr	r2, [pc, #544]	; (8002558 <appendInitialConditions+0x23c>)
 8002336:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002338:	4b85      	ldr	r3, [pc, #532]	; (8002550 <appendInitialConditions+0x234>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	3301      	adds	r3, #1
 800233e:	4a84      	ldr	r2, [pc, #528]	; (8002550 <appendInitialConditions+0x234>)
 8002340:	6013      	str	r3, [r2, #0]
	for(i = 0; i < 17 && pH_init_title[i] != '\0';i++)						// append init pH title to the data array
 8002342:	4b82      	ldr	r3, [pc, #520]	; (800254c <appendInitialConditions+0x230>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	3301      	adds	r3, #1
 8002348:	4a80      	ldr	r2, [pc, #512]	; (800254c <appendInitialConditions+0x230>)
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	4b7f      	ldr	r3, [pc, #508]	; (800254c <appendInitialConditions+0x230>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b10      	cmp	r3, #16
 8002352:	dc05      	bgt.n	8002360 <appendInitialConditions+0x44>
 8002354:	4b7d      	ldr	r3, [pc, #500]	; (800254c <appendInitialConditions+0x230>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a7e      	ldr	r2, [pc, #504]	; (8002554 <appendInitialConditions+0x238>)
 800235a:	5cd3      	ldrb	r3, [r2, r3]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1e3      	bne.n	8002328 <appendInitialConditions+0xc>
	}
	balance_data[balance_index] = ',';
 8002360:	4b7b      	ldr	r3, [pc, #492]	; (8002550 <appendInitialConditions+0x234>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a7c      	ldr	r2, [pc, #496]	; (8002558 <appendInitialConditions+0x23c>)
 8002366:	212c      	movs	r1, #44	; 0x2c
 8002368:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 800236a:	4b79      	ldr	r3, [pc, #484]	; (8002550 <appendInitialConditions+0x234>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	3301      	adds	r3, #1
 8002370:	4a77      	ldr	r2, [pc, #476]	; (8002550 <appendInitialConditions+0x234>)
 8002372:	6013      	str	r3, [r2, #0]
	floatToString( pH);									// convert pH to char array and write it to the data buffer
 8002374:	4b79      	ldr	r3, [pc, #484]	; (800255c <appendInitialConditions+0x240>)
 8002376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	f7ff f96f 	bl	8001660 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)	// append pH to our data array
 8002382:	4b72      	ldr	r3, [pc, #456]	; (800254c <appendInitialConditions+0x230>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	e011      	b.n	80023ae <appendInitialConditions+0x92>
	{
		balance_data[balance_index] = convertedString[i];
 800238a:	4b70      	ldr	r3, [pc, #448]	; (800254c <appendInitialConditions+0x230>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	4b70      	ldr	r3, [pc, #448]	; (8002550 <appendInitialConditions+0x234>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4973      	ldr	r1, [pc, #460]	; (8002560 <appendInitialConditions+0x244>)
 8002394:	5c89      	ldrb	r1, [r1, r2]
 8002396:	4a70      	ldr	r2, [pc, #448]	; (8002558 <appendInitialConditions+0x23c>)
 8002398:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 800239a:	4b6d      	ldr	r3, [pc, #436]	; (8002550 <appendInitialConditions+0x234>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	3301      	adds	r3, #1
 80023a0:	4a6b      	ldr	r2, [pc, #428]	; (8002550 <appendInitialConditions+0x234>)
 80023a2:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)	// append pH to our data array
 80023a4:	4b69      	ldr	r3, [pc, #420]	; (800254c <appendInitialConditions+0x230>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	3301      	adds	r3, #1
 80023aa:	4a68      	ldr	r2, [pc, #416]	; (800254c <appendInitialConditions+0x230>)
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b67      	ldr	r3, [pc, #412]	; (800254c <appendInitialConditions+0x230>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b09      	cmp	r3, #9
 80023b4:	d805      	bhi.n	80023c2 <appendInitialConditions+0xa6>
 80023b6:	4b65      	ldr	r3, [pc, #404]	; (800254c <appendInitialConditions+0x230>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a69      	ldr	r2, [pc, #420]	; (8002560 <appendInitialConditions+0x244>)
 80023bc:	5cd3      	ldrb	r3, [r2, r3]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1e3      	bne.n	800238a <appendInitialConditions+0x6e>
	}
	balance_data[balance_index] = ',';
 80023c2:	4b63      	ldr	r3, [pc, #396]	; (8002550 <appendInitialConditions+0x234>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a64      	ldr	r2, [pc, #400]	; (8002558 <appendInitialConditions+0x23c>)
 80023c8:	212c      	movs	r1, #44	; 0x2c
 80023ca:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80023cc:	4b60      	ldr	r3, [pc, #384]	; (8002550 <appendInitialConditions+0x234>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3301      	adds	r3, #1
 80023d2:	4a5f      	ldr	r2, [pc, #380]	; (8002550 <appendInitialConditions+0x234>)
 80023d4:	6013      	str	r3, [r2, #0]

	for(i = 0; i < 17 && pH_set_point_title[i] != '\0';i++)							// append init pH set point title to the data array
 80023d6:	4b5d      	ldr	r3, [pc, #372]	; (800254c <appendInitialConditions+0x230>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	e011      	b.n	8002402 <appendInitialConditions+0xe6>
	{
		balance_data[balance_index] = pH_set_point_title[i];
 80023de:	4b5b      	ldr	r3, [pc, #364]	; (800254c <appendInitialConditions+0x230>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <appendInitialConditions+0x234>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	495f      	ldr	r1, [pc, #380]	; (8002564 <appendInitialConditions+0x248>)
 80023e8:	5c89      	ldrb	r1, [r1, r2]
 80023ea:	4a5b      	ldr	r2, [pc, #364]	; (8002558 <appendInitialConditions+0x23c>)
 80023ec:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 80023ee:	4b58      	ldr	r3, [pc, #352]	; (8002550 <appendInitialConditions+0x234>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	3301      	adds	r3, #1
 80023f4:	4a56      	ldr	r2, [pc, #344]	; (8002550 <appendInitialConditions+0x234>)
 80023f6:	6013      	str	r3, [r2, #0]
	for(i = 0; i < 17 && pH_set_point_title[i] != '\0';i++)							// append init pH set point title to the data array
 80023f8:	4b54      	ldr	r3, [pc, #336]	; (800254c <appendInitialConditions+0x230>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	3301      	adds	r3, #1
 80023fe:	4a53      	ldr	r2, [pc, #332]	; (800254c <appendInitialConditions+0x230>)
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b52      	ldr	r3, [pc, #328]	; (800254c <appendInitialConditions+0x230>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b10      	cmp	r3, #16
 8002408:	dc05      	bgt.n	8002416 <appendInitialConditions+0xfa>
 800240a:	4b50      	ldr	r3, [pc, #320]	; (800254c <appendInitialConditions+0x230>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a55      	ldr	r2, [pc, #340]	; (8002564 <appendInitialConditions+0x248>)
 8002410:	5cd3      	ldrb	r3, [r2, r3]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1e3      	bne.n	80023de <appendInitialConditions+0xc2>
	}
	balance_data[balance_index] = ',';
 8002416:	4b4e      	ldr	r3, [pc, #312]	; (8002550 <appendInitialConditions+0x234>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a4f      	ldr	r2, [pc, #316]	; (8002558 <appendInitialConditions+0x23c>)
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002420:	4b4b      	ldr	r3, [pc, #300]	; (8002550 <appendInitialConditions+0x234>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	3301      	adds	r3, #1
 8002426:	4a4a      	ldr	r2, [pc, #296]	; (8002550 <appendInitialConditions+0x234>)
 8002428:	6013      	str	r3, [r2, #0]
	floatToString( pH_set_point);									// convert pH set point to char array and write it to the data buffer
 800242a:	4b4f      	ldr	r3, [pc, #316]	; (8002568 <appendInitialConditions+0x24c>)
 800242c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	f7ff f914 	bl	8001660 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)			// append pH set point char to the data array
 8002438:	4b44      	ldr	r3, [pc, #272]	; (800254c <appendInitialConditions+0x230>)
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e011      	b.n	8002464 <appendInitialConditions+0x148>
	{
		balance_data[balance_index] = convertedString[i];
 8002440:	4b42      	ldr	r3, [pc, #264]	; (800254c <appendInitialConditions+0x230>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b42      	ldr	r3, [pc, #264]	; (8002550 <appendInitialConditions+0x234>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4945      	ldr	r1, [pc, #276]	; (8002560 <appendInitialConditions+0x244>)
 800244a:	5c89      	ldrb	r1, [r1, r2]
 800244c:	4a42      	ldr	r2, [pc, #264]	; (8002558 <appendInitialConditions+0x23c>)
 800244e:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002450:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <appendInitialConditions+0x234>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	3301      	adds	r3, #1
 8002456:	4a3e      	ldr	r2, [pc, #248]	; (8002550 <appendInitialConditions+0x234>)
 8002458:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)			// append pH set point char to the data array
 800245a:	4b3c      	ldr	r3, [pc, #240]	; (800254c <appendInitialConditions+0x230>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3301      	adds	r3, #1
 8002460:	4a3a      	ldr	r2, [pc, #232]	; (800254c <appendInitialConditions+0x230>)
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b39      	ldr	r3, [pc, #228]	; (800254c <appendInitialConditions+0x230>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b09      	cmp	r3, #9
 800246a:	d805      	bhi.n	8002478 <appendInitialConditions+0x15c>
 800246c:	4b37      	ldr	r3, [pc, #220]	; (800254c <appendInitialConditions+0x230>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a3b      	ldr	r2, [pc, #236]	; (8002560 <appendInitialConditions+0x244>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1e3      	bne.n	8002440 <appendInitialConditions+0x124>
	}
	balance_data[balance_index] = '\n';
 8002478:	4b35      	ldr	r3, [pc, #212]	; (8002550 <appendInitialConditions+0x234>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a36      	ldr	r2, [pc, #216]	; (8002558 <appendInitialConditions+0x23c>)
 800247e:	210a      	movs	r1, #10
 8002480:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002482:	4b33      	ldr	r3, [pc, #204]	; (8002550 <appendInitialConditions+0x234>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	4a31      	ldr	r2, [pc, #196]	; (8002550 <appendInitialConditions+0x234>)
 800248a:	6013      	str	r3, [r2, #0]

	for(i = 0; i < 17 && TDS_init_title[i] != '\0';i++)						// append init pH title to the data array
 800248c:	4b2f      	ldr	r3, [pc, #188]	; (800254c <appendInitialConditions+0x230>)
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e011      	b.n	80024b8 <appendInitialConditions+0x19c>
	{
		balance_data[balance_index] = TDS_init_title[i];
 8002494:	4b2d      	ldr	r3, [pc, #180]	; (800254c <appendInitialConditions+0x230>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <appendInitialConditions+0x234>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4933      	ldr	r1, [pc, #204]	; (800256c <appendInitialConditions+0x250>)
 800249e:	5c89      	ldrb	r1, [r1, r2]
 80024a0:	4a2d      	ldr	r2, [pc, #180]	; (8002558 <appendInitialConditions+0x23c>)
 80024a2:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 80024a4:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <appendInitialConditions+0x234>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	3301      	adds	r3, #1
 80024aa:	4a29      	ldr	r2, [pc, #164]	; (8002550 <appendInitialConditions+0x234>)
 80024ac:	6013      	str	r3, [r2, #0]
	for(i = 0; i < 17 && TDS_init_title[i] != '\0';i++)						// append init pH title to the data array
 80024ae:	4b27      	ldr	r3, [pc, #156]	; (800254c <appendInitialConditions+0x230>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	3301      	adds	r3, #1
 80024b4:	4a25      	ldr	r2, [pc, #148]	; (800254c <appendInitialConditions+0x230>)
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b24      	ldr	r3, [pc, #144]	; (800254c <appendInitialConditions+0x230>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b10      	cmp	r3, #16
 80024be:	dc05      	bgt.n	80024cc <appendInitialConditions+0x1b0>
 80024c0:	4b22      	ldr	r3, [pc, #136]	; (800254c <appendInitialConditions+0x230>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a29      	ldr	r2, [pc, #164]	; (800256c <appendInitialConditions+0x250>)
 80024c6:	5cd3      	ldrb	r3, [r2, r3]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1e3      	bne.n	8002494 <appendInitialConditions+0x178>
	}
	balance_data[balance_index] = ',';
 80024cc:	4b20      	ldr	r3, [pc, #128]	; (8002550 <appendInitialConditions+0x234>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a21      	ldr	r2, [pc, #132]	; (8002558 <appendInitialConditions+0x23c>)
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80024d6:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <appendInitialConditions+0x234>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3301      	adds	r3, #1
 80024dc:	4a1c      	ldr	r2, [pc, #112]	; (8002550 <appendInitialConditions+0x234>)
 80024de:	6013      	str	r3, [r2, #0]
	floatToString( TDS);									// convert pH to char array and write it to the data buffer
 80024e0:	4b23      	ldr	r3, [pc, #140]	; (8002570 <appendInitialConditions+0x254>)
 80024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	f7ff f8b9 	bl	8001660 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)	// append pH to our data array
 80024ee:	4b17      	ldr	r3, [pc, #92]	; (800254c <appendInitialConditions+0x230>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	e011      	b.n	800251a <appendInitialConditions+0x1fe>
	{
		balance_data[balance_index] = convertedString[i];
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <appendInitialConditions+0x230>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <appendInitialConditions+0x234>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4918      	ldr	r1, [pc, #96]	; (8002560 <appendInitialConditions+0x244>)
 8002500:	5c89      	ldrb	r1, [r1, r2]
 8002502:	4a15      	ldr	r2, [pc, #84]	; (8002558 <appendInitialConditions+0x23c>)
 8002504:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <appendInitialConditions+0x234>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	3301      	adds	r3, #1
 800250c:	4a10      	ldr	r2, [pc, #64]	; (8002550 <appendInitialConditions+0x234>)
 800250e:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)	// append pH to our data array
 8002510:	4b0e      	ldr	r3, [pc, #56]	; (800254c <appendInitialConditions+0x230>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	3301      	adds	r3, #1
 8002516:	4a0d      	ldr	r2, [pc, #52]	; (800254c <appendInitialConditions+0x230>)
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b0c      	ldr	r3, [pc, #48]	; (800254c <appendInitialConditions+0x230>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b09      	cmp	r3, #9
 8002520:	d805      	bhi.n	800252e <appendInitialConditions+0x212>
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <appendInitialConditions+0x230>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a0e      	ldr	r2, [pc, #56]	; (8002560 <appendInitialConditions+0x244>)
 8002528:	5cd3      	ldrb	r3, [r2, r3]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1e3      	bne.n	80024f6 <appendInitialConditions+0x1da>
	}
	balance_data[balance_index] = ',';
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <appendInitialConditions+0x234>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a09      	ldr	r2, [pc, #36]	; (8002558 <appendInitialConditions+0x23c>)
 8002534:	212c      	movs	r1, #44	; 0x2c
 8002536:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002538:	4b05      	ldr	r3, [pc, #20]	; (8002550 <appendInitialConditions+0x234>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	3301      	adds	r3, #1
 800253e:	4a04      	ldr	r2, [pc, #16]	; (8002550 <appendInitialConditions+0x234>)
 8002540:	6013      	str	r3, [r2, #0]

	for(i = 0; i < 17 && TDS_set_point_title[i] != '\0';i++)							// append init pH set point title to the data array
 8002542:	4b02      	ldr	r3, [pc, #8]	; (800254c <appendInitialConditions+0x230>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	e026      	b.n	8002598 <appendInitialConditions+0x27c>
 800254a:	bf00      	nop
 800254c:	20003ffc 	.word	0x20003ffc
 8002550:	20003ff8 	.word	0x20003ff8
 8002554:	200000cc 	.word	0x200000cc
 8002558:	2000405c 	.word	0x2000405c
 800255c:	200017c8 	.word	0x200017c8
 8002560:	20004050 	.word	0x20004050
 8002564:	200000dc 	.word	0x200000dc
 8002568:	20000038 	.word	0x20000038
 800256c:	200000ec 	.word	0x200000ec
 8002570:	200017c0 	.word	0x200017c0
	{
		balance_data[balance_index] = TDS_set_point_title[i];
 8002574:	4b2d      	ldr	r3, [pc, #180]	; (800262c <appendInitialConditions+0x310>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <appendInitialConditions+0x314>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	492d      	ldr	r1, [pc, #180]	; (8002634 <appendInitialConditions+0x318>)
 800257e:	5c89      	ldrb	r1, [r1, r2]
 8002580:	4a2d      	ldr	r2, [pc, #180]	; (8002638 <appendInitialConditions+0x31c>)
 8002582:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 8002584:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <appendInitialConditions+0x314>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	3301      	adds	r3, #1
 800258a:	4a29      	ldr	r2, [pc, #164]	; (8002630 <appendInitialConditions+0x314>)
 800258c:	6013      	str	r3, [r2, #0]
	for(i = 0; i < 17 && TDS_set_point_title[i] != '\0';i++)							// append init pH set point title to the data array
 800258e:	4b27      	ldr	r3, [pc, #156]	; (800262c <appendInitialConditions+0x310>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3301      	adds	r3, #1
 8002594:	4a25      	ldr	r2, [pc, #148]	; (800262c <appendInitialConditions+0x310>)
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b24      	ldr	r3, [pc, #144]	; (800262c <appendInitialConditions+0x310>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b10      	cmp	r3, #16
 800259e:	dc05      	bgt.n	80025ac <appendInitialConditions+0x290>
 80025a0:	4b22      	ldr	r3, [pc, #136]	; (800262c <appendInitialConditions+0x310>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a23      	ldr	r2, [pc, #140]	; (8002634 <appendInitialConditions+0x318>)
 80025a6:	5cd3      	ldrb	r3, [r2, r3]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1e3      	bne.n	8002574 <appendInitialConditions+0x258>
	}
	balance_data[balance_index] = ',';
 80025ac:	4b20      	ldr	r3, [pc, #128]	; (8002630 <appendInitialConditions+0x314>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a21      	ldr	r2, [pc, #132]	; (8002638 <appendInitialConditions+0x31c>)
 80025b2:	212c      	movs	r1, #44	; 0x2c
 80025b4:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 80025b6:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <appendInitialConditions+0x314>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3301      	adds	r3, #1
 80025bc:	4a1c      	ldr	r2, [pc, #112]	; (8002630 <appendInitialConditions+0x314>)
 80025be:	6013      	str	r3, [r2, #0]
	floatToString( nutrient_set_point);									// convert pH set point to char array and write it to the data buffer
 80025c0:	4b1e      	ldr	r3, [pc, #120]	; (800263c <appendInitialConditions+0x320>)
 80025c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	f7ff f849 	bl	8001660 <floatToString>
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)			// append pH set point char to the data array
 80025ce:	4b17      	ldr	r3, [pc, #92]	; (800262c <appendInitialConditions+0x310>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	e011      	b.n	80025fa <appendInitialConditions+0x2de>
	{
		balance_data[balance_index] = convertedString[i];
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <appendInitialConditions+0x310>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4b15      	ldr	r3, [pc, #84]	; (8002630 <appendInitialConditions+0x314>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4918      	ldr	r1, [pc, #96]	; (8002640 <appendInitialConditions+0x324>)
 80025e0:	5c89      	ldrb	r1, [r1, r2]
 80025e2:	4a15      	ldr	r2, [pc, #84]	; (8002638 <appendInitialConditions+0x31c>)
 80025e4:	54d1      	strb	r1, [r2, r3]
		balance_index++;
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <appendInitialConditions+0x314>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	3301      	adds	r3, #1
 80025ec:	4a10      	ldr	r2, [pc, #64]	; (8002630 <appendInitialConditions+0x314>)
 80025ee:	6013      	str	r3, [r2, #0]
	for(i = 0;i < (sizeof convertedString) && convertedString[i] != '\0';i++)			// append pH set point char to the data array
 80025f0:	4b0e      	ldr	r3, [pc, #56]	; (800262c <appendInitialConditions+0x310>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	3301      	adds	r3, #1
 80025f6:	4a0d      	ldr	r2, [pc, #52]	; (800262c <appendInitialConditions+0x310>)
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b0c      	ldr	r3, [pc, #48]	; (800262c <appendInitialConditions+0x310>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b09      	cmp	r3, #9
 8002600:	d805      	bhi.n	800260e <appendInitialConditions+0x2f2>
 8002602:	4b0a      	ldr	r3, [pc, #40]	; (800262c <appendInitialConditions+0x310>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <appendInitialConditions+0x324>)
 8002608:	5cd3      	ldrb	r3, [r2, r3]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1e3      	bne.n	80025d6 <appendInitialConditions+0x2ba>
	}
	balance_data[balance_index] = '\n';
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <appendInitialConditions+0x314>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a09      	ldr	r2, [pc, #36]	; (8002638 <appendInitialConditions+0x31c>)
 8002614:	210a      	movs	r1, #10
 8002616:	54d1      	strb	r1, [r2, r3]
	balance_index++;
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <appendInitialConditions+0x314>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	3301      	adds	r3, #1
 800261e:	4a04      	ldr	r2, [pc, #16]	; (8002630 <appendInitialConditions+0x314>)
 8002620:	6013      	str	r3, [r2, #0]
    get_init_conditions = 'y';
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <appendInitialConditions+0x328>)
 8002624:	2279      	movs	r2, #121	; 0x79
 8002626:	701a      	strb	r2, [r3, #0]
}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20003ffc 	.word	0x20003ffc
 8002630:	20003ff8 	.word	0x20003ff8
 8002634:	200000fc 	.word	0x200000fc
 8002638:	2000405c 	.word	0x2000405c
 800263c:	20000030 	.word	0x20000030
 8002640:	20004050 	.word	0x20004050
 8002644:	200000ca 	.word	0x200000ca

08002648 <balancePhAndNutrient>:

void balancePhAndNutrient()
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af02      	add	r7, sp, #8
	TDS_avg_check = 0;
 800264e:	49a5      	ldr	r1, [pc, #660]	; (80028e4 <balancePhAndNutrient+0x29c>)
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	e9c1 2300 	strd	r2, r3, [r1]
	pH_avg_check = 0;
 800265c:	49a2      	ldr	r1, [pc, #648]	; (80028e8 <balancePhAndNutrient+0x2a0>)
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	e9c1 2300 	strd	r2, r3, [r1]
	if(waiting_to_write == 'n')	getSensorValues();
 800266a:	4ba0      	ldr	r3, [pc, #640]	; (80028ec <balancePhAndNutrient+0x2a4>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b6e      	cmp	r3, #110	; 0x6e
 8002670:	d101      	bne.n	8002676 <balancePhAndNutrient+0x2e>
 8002672:	f002 fe97 	bl	80053a4 <getSensorValues>

	pH_up = 'n';
 8002676:	4b9e      	ldr	r3, [pc, #632]	; (80028f0 <balancePhAndNutrient+0x2a8>)
 8002678:	226e      	movs	r2, #110	; 0x6e
 800267a:	701a      	strb	r2, [r3, #0]
	pH_down = 'n';
 800267c:	4b9d      	ldr	r3, [pc, #628]	; (80028f4 <balancePhAndNutrient+0x2ac>)
 800267e:	226e      	movs	r2, #110	; 0x6e
 8002680:	701a      	strb	r2, [r3, #0]
	nutrient_up = 'n';	// check twice to see if we need to add nutrient
 8002682:	4b9d      	ldr	r3, [pc, #628]	; (80028f8 <balancePhAndNutrient+0x2b0>)
 8002684:	226e      	movs	r2, #110	; 0x6e
 8002686:	701a      	strb	r2, [r3, #0]

	if(setting_pH == 'n')	// if we are not changing the pH or nutrient level, check to see if we are out of bounds
 8002688:	4b9c      	ldr	r3, [pc, #624]	; (80028fc <balancePhAndNutrient+0x2b4>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b6e      	cmp	r3, #110	; 0x6e
 800268e:	d14b      	bne.n	8002728 <balancePhAndNutrient+0xe0>
	{
		if(     pH  > pH_set_point     &&     (pH - pH_bounds_check) > pH_set_point)
 8002690:	4b9b      	ldr	r3, [pc, #620]	; (8002900 <balancePhAndNutrient+0x2b8>)
 8002692:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002696:	4b9b      	ldr	r3, [pc, #620]	; (8002904 <balancePhAndNutrient+0x2bc>)
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	f7fe f9f6 	bl	8000a8c <__aeabi_dcmpgt>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d01a      	beq.n	80026dc <balancePhAndNutrient+0x94>
 80026a6:	4b96      	ldr	r3, [pc, #600]	; (8002900 <balancePhAndNutrient+0x2b8>)
 80026a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026ac:	4b96      	ldr	r3, [pc, #600]	; (8002908 <balancePhAndNutrient+0x2c0>)
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	f7fd fda3 	bl	80001fc <__aeabi_dsub>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4610      	mov	r0, r2
 80026bc:	4619      	mov	r1, r3
 80026be:	4b91      	ldr	r3, [pc, #580]	; (8002904 <balancePhAndNutrient+0x2bc>)
 80026c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c4:	f7fe f9e2 	bl	8000a8c <__aeabi_dcmpgt>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d006      	beq.n	80026dc <balancePhAndNutrient+0x94>
		{
			pH_down = 'y'; 			// if we are over our set point dose the water with pH-down
 80026ce:	4b89      	ldr	r3, [pc, #548]	; (80028f4 <balancePhAndNutrient+0x2ac>)
 80026d0:	2279      	movs	r2, #121	; 0x79
 80026d2:	701a      	strb	r2, [r3, #0]
			calibrateDosage('d');
 80026d4:	2064      	movs	r0, #100	; 0x64
 80026d6:	f002 f8ef 	bl	80048b8 <calibrateDosage>
 80026da:	e06a      	b.n	80027b2 <balancePhAndNutrient+0x16a>
		}
		else if(pH  < pH_set_point 	   &&     (pH + pH_bounds_check) < pH_set_point)
 80026dc:	4b88      	ldr	r3, [pc, #544]	; (8002900 <balancePhAndNutrient+0x2b8>)
 80026de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026e2:	4b88      	ldr	r3, [pc, #544]	; (8002904 <balancePhAndNutrient+0x2bc>)
 80026e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e8:	f7fe f9b2 	bl	8000a50 <__aeabi_dcmplt>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d05f      	beq.n	80027b2 <balancePhAndNutrient+0x16a>
 80026f2:	4b83      	ldr	r3, [pc, #524]	; (8002900 <balancePhAndNutrient+0x2b8>)
 80026f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026f8:	4b83      	ldr	r3, [pc, #524]	; (8002908 <balancePhAndNutrient+0x2c0>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	f7fd fd7f 	bl	8000200 <__adddf3>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	4b7e      	ldr	r3, [pc, #504]	; (8002904 <balancePhAndNutrient+0x2bc>)
 800270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002710:	f7fe f99e 	bl	8000a50 <__aeabi_dcmplt>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d04b      	beq.n	80027b2 <balancePhAndNutrient+0x16a>
		{
			pH_up 	= 'y'; 				// if we are under our set point dose the water with pH-up
 800271a:	4b75      	ldr	r3, [pc, #468]	; (80028f0 <balancePhAndNutrient+0x2a8>)
 800271c:	2279      	movs	r2, #121	; 0x79
 800271e:	701a      	strb	r2, [r3, #0]
			calibrateDosage('u');
 8002720:	2075      	movs	r0, #117	; 0x75
 8002722:	f002 f8c9 	bl	80048b8 <calibrateDosage>
 8002726:	e044      	b.n	80027b2 <balancePhAndNutrient+0x16a>
		}
	}
	else	// else we are setting the pH so reduce the pH bounds to accurately set the value
	{
		if(     pH  > pH_set_point     &&     (pH - pH_bounds_set) > pH_set_point)   				pH_down = 'y'; 			// if we are over our set point dose the water with pH-down
 8002728:	4b75      	ldr	r3, [pc, #468]	; (8002900 <balancePhAndNutrient+0x2b8>)
 800272a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800272e:	4b75      	ldr	r3, [pc, #468]	; (8002904 <balancePhAndNutrient+0x2bc>)
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	f7fe f9aa 	bl	8000a8c <__aeabi_dcmpgt>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d017      	beq.n	800276e <balancePhAndNutrient+0x126>
 800273e:	4b70      	ldr	r3, [pc, #448]	; (8002900 <balancePhAndNutrient+0x2b8>)
 8002740:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002744:	4b71      	ldr	r3, [pc, #452]	; (800290c <balancePhAndNutrient+0x2c4>)
 8002746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274a:	f7fd fd57 	bl	80001fc <__aeabi_dsub>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4610      	mov	r0, r2
 8002754:	4619      	mov	r1, r3
 8002756:	4b6b      	ldr	r3, [pc, #428]	; (8002904 <balancePhAndNutrient+0x2bc>)
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	f7fe f996 	bl	8000a8c <__aeabi_dcmpgt>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <balancePhAndNutrient+0x126>
 8002766:	4b63      	ldr	r3, [pc, #396]	; (80028f4 <balancePhAndNutrient+0x2ac>)
 8002768:	2279      	movs	r2, #121	; 0x79
 800276a:	701a      	strb	r2, [r3, #0]
 800276c:	e021      	b.n	80027b2 <balancePhAndNutrient+0x16a>
		else if(pH  < pH_set_point 	   &&     (pH + pH_bounds_set) < pH_set_point)  				pH_up 	= 'y'; 				// if we are under our set point dose the water with pH-up
 800276e:	4b64      	ldr	r3, [pc, #400]	; (8002900 <balancePhAndNutrient+0x2b8>)
 8002770:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002774:	4b63      	ldr	r3, [pc, #396]	; (8002904 <balancePhAndNutrient+0x2bc>)
 8002776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277a:	f7fe f969 	bl	8000a50 <__aeabi_dcmplt>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d016      	beq.n	80027b2 <balancePhAndNutrient+0x16a>
 8002784:	4b5e      	ldr	r3, [pc, #376]	; (8002900 <balancePhAndNutrient+0x2b8>)
 8002786:	e9d3 0100 	ldrd	r0, r1, [r3]
 800278a:	4b60      	ldr	r3, [pc, #384]	; (800290c <balancePhAndNutrient+0x2c4>)
 800278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002790:	f7fd fd36 	bl	8000200 <__adddf3>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4610      	mov	r0, r2
 800279a:	4619      	mov	r1, r3
 800279c:	4b59      	ldr	r3, [pc, #356]	; (8002904 <balancePhAndNutrient+0x2bc>)
 800279e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a2:	f7fe f955 	bl	8000a50 <__aeabi_dcmplt>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <balancePhAndNutrient+0x16a>
 80027ac:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <balancePhAndNutrient+0x2a8>)
 80027ae:	2279      	movs	r2, #121	; 0x79
 80027b0:	701a      	strb	r2, [r3, #0]
	}
	if(setting_nutrient == 'n')	// if we are not changing the pH or nutrient level, check to see if we are out of bounds
 80027b2:	4b57      	ldr	r3, [pc, #348]	; (8002910 <balancePhAndNutrient+0x2c8>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b6e      	cmp	r3, #110	; 0x6e
 80027b8:	d148      	bne.n	800284c <balancePhAndNutrient+0x204>
	{
		if(     TDS > nutrient_set_point && (TDS - nutrient_bounds_check) > nutrient_set_point) 	error = 'y'; 				 // if we are over our TDS set point ERROR
 80027ba:	4b56      	ldr	r3, [pc, #344]	; (8002914 <balancePhAndNutrient+0x2cc>)
 80027bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027c0:	4b55      	ldr	r3, [pc, #340]	; (8002918 <balancePhAndNutrient+0x2d0>)
 80027c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c6:	f7fe f961 	bl	8000a8c <__aeabi_dcmpgt>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d017      	beq.n	8002800 <balancePhAndNutrient+0x1b8>
 80027d0:	4b50      	ldr	r3, [pc, #320]	; (8002914 <balancePhAndNutrient+0x2cc>)
 80027d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027d6:	4b51      	ldr	r3, [pc, #324]	; (800291c <balancePhAndNutrient+0x2d4>)
 80027d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027dc:	f7fd fd0e 	bl	80001fc <__aeabi_dsub>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4610      	mov	r0, r2
 80027e6:	4619      	mov	r1, r3
 80027e8:	4b4b      	ldr	r3, [pc, #300]	; (8002918 <balancePhAndNutrient+0x2d0>)
 80027ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ee:	f7fe f94d 	bl	8000a8c <__aeabi_dcmpgt>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <balancePhAndNutrient+0x1b8>
 80027f8:	4b49      	ldr	r3, [pc, #292]	; (8002920 <balancePhAndNutrient+0x2d8>)
 80027fa:	2279      	movs	r2, #121	; 0x79
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	e047      	b.n	8002890 <balancePhAndNutrient+0x248>
		else if(TDS < nutrient_set_point && (TDS + nutrient_bounds_check) < nutrient_set_point )
 8002800:	4b44      	ldr	r3, [pc, #272]	; (8002914 <balancePhAndNutrient+0x2cc>)
 8002802:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002806:	4b44      	ldr	r3, [pc, #272]	; (8002918 <balancePhAndNutrient+0x2d0>)
 8002808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280c:	f7fe f920 	bl	8000a50 <__aeabi_dcmplt>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d03c      	beq.n	8002890 <balancePhAndNutrient+0x248>
 8002816:	4b3f      	ldr	r3, [pc, #252]	; (8002914 <balancePhAndNutrient+0x2cc>)
 8002818:	e9d3 0100 	ldrd	r0, r1, [r3]
 800281c:	4b3f      	ldr	r3, [pc, #252]	; (800291c <balancePhAndNutrient+0x2d4>)
 800281e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002822:	f7fd fced 	bl	8000200 <__adddf3>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4610      	mov	r0, r2
 800282c:	4619      	mov	r1, r3
 800282e:	4b3a      	ldr	r3, [pc, #232]	; (8002918 <balancePhAndNutrient+0x2d0>)
 8002830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002834:	f7fe f90c 	bl	8000a50 <__aeabi_dcmplt>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d028      	beq.n	8002890 <balancePhAndNutrient+0x248>
		{
			nutrient_up = 'y';// if we checked twice and we still need to dose nutrients then go for it.
 800283e:	4b2e      	ldr	r3, [pc, #184]	; (80028f8 <balancePhAndNutrient+0x2b0>)
 8002840:	2279      	movs	r2, #121	; 0x79
 8002842:	701a      	strb	r2, [r3, #0]
			calibrateDosage('n');
 8002844:	206e      	movs	r0, #110	; 0x6e
 8002846:	f002 f837 	bl	80048b8 <calibrateDosage>
 800284a:	e021      	b.n	8002890 <balancePhAndNutrient+0x248>
		}
	}
	else if(TDS < nutrient_set_point && (TDS + nutrient_bounds_set) < nutrient_set_point) nutrient_up = 'y';		 // if we are under our set point dose the water with pH-down
 800284c:	4b31      	ldr	r3, [pc, #196]	; (8002914 <balancePhAndNutrient+0x2cc>)
 800284e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002852:	4b31      	ldr	r3, [pc, #196]	; (8002918 <balancePhAndNutrient+0x2d0>)
 8002854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002858:	f7fe f8fa 	bl	8000a50 <__aeabi_dcmplt>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d016      	beq.n	8002890 <balancePhAndNutrient+0x248>
 8002862:	4b2c      	ldr	r3, [pc, #176]	; (8002914 <balancePhAndNutrient+0x2cc>)
 8002864:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002868:	4b2e      	ldr	r3, [pc, #184]	; (8002924 <balancePhAndNutrient+0x2dc>)
 800286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286e:	f7fd fcc7 	bl	8000200 <__adddf3>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	4b27      	ldr	r3, [pc, #156]	; (8002918 <balancePhAndNutrient+0x2d0>)
 800287c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002880:	f7fe f8e6 	bl	8000a50 <__aeabi_dcmplt>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <balancePhAndNutrient+0x248>
 800288a:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <balancePhAndNutrient+0x2b0>)
 800288c:	2279      	movs	r2, #121	; 0x79
 800288e:	701a      	strb	r2, [r3, #0]

	if(get_init_conditions == 'n') appendInitialConditions();
 8002890:	4b25      	ldr	r3, [pc, #148]	; (8002928 <balancePhAndNutrient+0x2e0>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b6e      	cmp	r3, #110	; 0x6e
 8002896:	d101      	bne.n	800289c <balancePhAndNutrient+0x254>
 8002898:	f7ff fd40 	bl	800231c <appendInitialConditions>

	if((pH_down == 'y' || pH_up == 'y' || nutrient_up == 'y'))				// if we are adding pH-up/down or nutrient, signify what we are setting so we can change the accuracy range
 800289c:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <balancePhAndNutrient+0x2ac>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b79      	cmp	r3, #121	; 0x79
 80028a2:	d007      	beq.n	80028b4 <balancePhAndNutrient+0x26c>
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <balancePhAndNutrient+0x2a8>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b79      	cmp	r3, #121	; 0x79
 80028aa:	d003      	beq.n	80028b4 <balancePhAndNutrient+0x26c>
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <balancePhAndNutrient+0x2b0>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b79      	cmp	r3, #121	; 0x79
 80028b2:	d142      	bne.n	800293a <balancePhAndNutrient+0x2f2>
	{
		if(nutrient_up == 'y') 			setting_nutrient = 'y';
 80028b4:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <balancePhAndNutrient+0x2b0>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b79      	cmp	r3, #121	; 0x79
 80028ba:	d103      	bne.n	80028c4 <balancePhAndNutrient+0x27c>
 80028bc:	4b14      	ldr	r3, [pc, #80]	; (8002910 <balancePhAndNutrient+0x2c8>)
 80028be:	2279      	movs	r2, #121	; 0x79
 80028c0:	701a      	strb	r2, [r3, #0]
 80028c2:	e002      	b.n	80028ca <balancePhAndNutrient+0x282>
		else setting_nutrient = 'n';
 80028c4:	4b12      	ldr	r3, [pc, #72]	; (8002910 <balancePhAndNutrient+0x2c8>)
 80028c6:	226e      	movs	r2, #110	; 0x6e
 80028c8:	701a      	strb	r2, [r3, #0]

		if(pH_down == 'y' || pH_up == 'y')  setting_pH = 'y';
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <balancePhAndNutrient+0x2ac>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b79      	cmp	r3, #121	; 0x79
 80028d0:	d003      	beq.n	80028da <balancePhAndNutrient+0x292>
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <balancePhAndNutrient+0x2a8>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b79      	cmp	r3, #121	; 0x79
 80028d8:	d128      	bne.n	800292c <balancePhAndNutrient+0x2e4>
 80028da:	4b08      	ldr	r3, [pc, #32]	; (80028fc <balancePhAndNutrient+0x2b4>)
 80028dc:	2279      	movs	r2, #121	; 0x79
 80028de:	701a      	strb	r2, [r3, #0]
 80028e0:	e027      	b.n	8002932 <balancePhAndNutrient+0x2ea>
 80028e2:	bf00      	nop
 80028e4:	20003fe8 	.word	0x20003fe8
 80028e8:	20003ff0 	.word	0x20003ff0
 80028ec:	200000c9 	.word	0x200000c9
 80028f0:	200001cd 	.word	0x200001cd
 80028f4:	200001ce 	.word	0x200001ce
 80028f8:	200001cf 	.word	0x200001cf
 80028fc:	200001c6 	.word	0x200001c6
 8002900:	200017c8 	.word	0x200017c8
 8002904:	20000038 	.word	0x20000038
 8002908:	20000058 	.word	0x20000058
 800290c:	20000060 	.word	0x20000060
 8002910:	200001c7 	.word	0x200001c7
 8002914:	200017c0 	.word	0x200017c0
 8002918:	20000030 	.word	0x20000030
 800291c:	20000068 	.word	0x20000068
 8002920:	200001cc 	.word	0x200001cc
 8002924:	20000070 	.word	0x20000070
 8002928:	200000ca 	.word	0x200000ca
		else setting_pH = 'n';
 800292c:	4b84      	ldr	r3, [pc, #528]	; (8002b40 <balancePhAndNutrient+0x4f8>)
 800292e:	226e      	movs	r2, #110	; 0x6e
 8002930:	701a      	strb	r2, [r3, #0]
		num_of_stable_runs = 0;
 8002932:	4b84      	ldr	r3, [pc, #528]	; (8002b44 <balancePhAndNutrient+0x4fc>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e011      	b.n	800295e <balancePhAndNutrient+0x316>
	}
	else if(pH_down == 'n' && pH_up == 'n' && nutrient_up == 'n')				// else if we are not setting anything, signify that
 800293a:	4b83      	ldr	r3, [pc, #524]	; (8002b48 <balancePhAndNutrient+0x500>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b6e      	cmp	r3, #110	; 0x6e
 8002940:	d10d      	bne.n	800295e <balancePhAndNutrient+0x316>
 8002942:	4b82      	ldr	r3, [pc, #520]	; (8002b4c <balancePhAndNutrient+0x504>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b6e      	cmp	r3, #110	; 0x6e
 8002948:	d109      	bne.n	800295e <balancePhAndNutrient+0x316>
 800294a:	4b81      	ldr	r3, [pc, #516]	; (8002b50 <balancePhAndNutrient+0x508>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b6e      	cmp	r3, #110	; 0x6e
 8002950:	d105      	bne.n	800295e <balancePhAndNutrient+0x316>
	{
		setting_nutrient = 'n';
 8002952:	4b80      	ldr	r3, [pc, #512]	; (8002b54 <balancePhAndNutrient+0x50c>)
 8002954:	226e      	movs	r2, #110	; 0x6e
 8002956:	701a      	strb	r2, [r3, #0]
		setting_pH = 'n';
 8002958:	4b79      	ldr	r3, [pc, #484]	; (8002b40 <balancePhAndNutrient+0x4f8>)
 800295a:	226e      	movs	r2, #110	; 0x6e
 800295c:	701a      	strb	r2, [r3, #0]
	}

	if(num_of_stable_runs >= 0 && num_of_stable_runs < 7 && ((10000 - balance_index) >= 500) && waiting_to_write == 'n' ) // consider changing to 10
 800295e:	4b79      	ldr	r3, [pc, #484]	; (8002b44 <balancePhAndNutrient+0x4fc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f2c0 8218 	blt.w	8002d98 <balancePhAndNutrient+0x750>
 8002968:	4b76      	ldr	r3, [pc, #472]	; (8002b44 <balancePhAndNutrient+0x4fc>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b06      	cmp	r3, #6
 800296e:	f300 8213 	bgt.w	8002d98 <balancePhAndNutrient+0x750>
 8002972:	4b79      	ldr	r3, [pc, #484]	; (8002b58 <balancePhAndNutrient+0x510>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 800297a:	3310      	adds	r3, #16
 800297c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002980:	f2c0 820a 	blt.w	8002d98 <balancePhAndNutrient+0x750>
 8002984:	4b75      	ldr	r3, [pc, #468]	; (8002b5c <balancePhAndNutrient+0x514>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b6e      	cmp	r3, #110	; 0x6e
 800298a:	f040 8205 	bne.w	8002d98 <balancePhAndNutrient+0x750>
	{
		time_to_bal_pH = 0;
 800298e:	4b74      	ldr	r3, [pc, #464]	; (8002b60 <balancePhAndNutrient+0x518>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
		time_to_bal_nutrient = 0;
 8002994:	4b73      	ldr	r3, [pc, #460]	; (8002b64 <balancePhAndNutrient+0x51c>)
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]

		if(nutrient_up == 'y')	// if we need to add nutrients and we also need to adjust the pH, add the nutrients first and wait to stabilize then add pH-up/down
 800299a:	4b6d      	ldr	r3, [pc, #436]	; (8002b50 <balancePhAndNutrient+0x508>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b79      	cmp	r3, #121	; 0x79
 80029a0:	f040 813a 	bne.w	8002c18 <balancePhAndNutrient+0x5d0>
		{
			nutrient_dose = calcNutrientDose(pH_set_point, nutrient_set_point);
 80029a4:	4b70      	ldr	r3, [pc, #448]	; (8002b68 <balancePhAndNutrient+0x520>)
 80029a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029aa:	4b70      	ldr	r3, [pc, #448]	; (8002b6c <balancePhAndNutrient+0x524>)
 80029ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b0:	f001 ff28 	bl	8004804 <calcNutrientDose>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	496d      	ldr	r1, [pc, #436]	; (8002b70 <balancePhAndNutrient+0x528>)
 80029ba:	e9c1 2300 	strd	r2, r3, [r1]
			doseWater(0,0,nutrient_dose);
 80029be:	4b6c      	ldr	r3, [pc, #432]	; (8002b70 <balancePhAndNutrient+0x528>)
 80029c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c4:	e9cd 2300 	strd	r2, r3, [sp]
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	f04f 0000 	mov.w	r0, #0
 80029d4:	f04f 0100 	mov.w	r1, #0
 80029d8:	f001 fe17 	bl	800460a <doseWater>
			total_nutrient_ml += nutrient_dose;
 80029dc:	4b65      	ldr	r3, [pc, #404]	; (8002b74 <balancePhAndNutrient+0x52c>)
 80029de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029e2:	4b63      	ldr	r3, [pc, #396]	; (8002b70 <balancePhAndNutrient+0x528>)
 80029e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e8:	f7fd fc0a 	bl	8000200 <__adddf3>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4960      	ldr	r1, [pc, #384]	; (8002b74 <balancePhAndNutrient+0x52c>)
 80029f2:	e9c1 2300 	strd	r2, r3, [r1]
			total_nutrient_ml_per_file += nutrient_dose;
 80029f6:	4b60      	ldr	r3, [pc, #384]	; (8002b78 <balancePhAndNutrient+0x530>)
 80029f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029fc:	4b5c      	ldr	r3, [pc, #368]	; (8002b70 <balancePhAndNutrient+0x528>)
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	f7fd fbfd 	bl	8000200 <__adddf3>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	495b      	ldr	r1, [pc, #364]	; (8002b78 <balancePhAndNutrient+0x530>)
 8002a0c:	e9c1 2300 	strd	r2, r3, [r1]
			time_to_bal_nutrient = waitForWaterToStabilize();
 8002a10:	f000 fff4 	bl	80039fc <waitForWaterToStabilize>
 8002a14:	4603      	mov	r3, r0
 8002a16:	4a53      	ldr	r2, [pc, #332]	; (8002b64 <balancePhAndNutrient+0x51c>)
 8002a18:	6013      	str	r3, [r2, #0]

			getSensorValues();	// after adding nutrient check the pH again to see if it needs to be adjustedgetSensorValues
 8002a1a:	f002 fcc3 	bl	80053a4 <getSensorValues>

			nutrient_up = 'n';
 8002a1e:	4b4c      	ldr	r3, [pc, #304]	; (8002b50 <balancePhAndNutrient+0x508>)
 8002a20:	226e      	movs	r2, #110	; 0x6e
 8002a22:	701a      	strb	r2, [r3, #0]
			pH_down = 'n';
 8002a24:	4b48      	ldr	r3, [pc, #288]	; (8002b48 <balancePhAndNutrient+0x500>)
 8002a26:	226e      	movs	r2, #110	; 0x6e
 8002a28:	701a      	strb	r2, [r3, #0]
			pH_up 	= 'n';
 8002a2a:	4b48      	ldr	r3, [pc, #288]	; (8002b4c <balancePhAndNutrient+0x504>)
 8002a2c:	226e      	movs	r2, #110	; 0x6e
 8002a2e:	701a      	strb	r2, [r3, #0]
			if(     pH  > pH_set_point     &&     (pH - pH_bounds_check) > pH_set_point)   		pH_down = 'y';  // if we are over our set point dose the water with pH-down
 8002a30:	4b52      	ldr	r3, [pc, #328]	; (8002b7c <balancePhAndNutrient+0x534>)
 8002a32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a36:	4b4c      	ldr	r3, [pc, #304]	; (8002b68 <balancePhAndNutrient+0x520>)
 8002a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3c:	f7fe f826 	bl	8000a8c <__aeabi_dcmpgt>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d017      	beq.n	8002a76 <balancePhAndNutrient+0x42e>
 8002a46:	4b4d      	ldr	r3, [pc, #308]	; (8002b7c <balancePhAndNutrient+0x534>)
 8002a48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a4c:	4b4c      	ldr	r3, [pc, #304]	; (8002b80 <balancePhAndNutrient+0x538>)
 8002a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a52:	f7fd fbd3 	bl	80001fc <__aeabi_dsub>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4b42      	ldr	r3, [pc, #264]	; (8002b68 <balancePhAndNutrient+0x520>)
 8002a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a64:	f7fe f812 	bl	8000a8c <__aeabi_dcmpgt>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <balancePhAndNutrient+0x42e>
 8002a6e:	4b36      	ldr	r3, [pc, #216]	; (8002b48 <balancePhAndNutrient+0x500>)
 8002a70:	2279      	movs	r2, #121	; 0x79
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e021      	b.n	8002aba <balancePhAndNutrient+0x472>
			else if(pH  < pH_set_point 	   &&     (pH + pH_bounds_check) < pH_set_point)  		pH_up   = 'y';  // if we are under our set point dose the water with pH-up
 8002a76:	4b41      	ldr	r3, [pc, #260]	; (8002b7c <balancePhAndNutrient+0x534>)
 8002a78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a7c:	4b3a      	ldr	r3, [pc, #232]	; (8002b68 <balancePhAndNutrient+0x520>)
 8002a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a82:	f7fd ffe5 	bl	8000a50 <__aeabi_dcmplt>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d016      	beq.n	8002aba <balancePhAndNutrient+0x472>
 8002a8c:	4b3b      	ldr	r3, [pc, #236]	; (8002b7c <balancePhAndNutrient+0x534>)
 8002a8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a92:	4b3b      	ldr	r3, [pc, #236]	; (8002b80 <balancePhAndNutrient+0x538>)
 8002a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a98:	f7fd fbb2 	bl	8000200 <__adddf3>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4b30      	ldr	r3, [pc, #192]	; (8002b68 <balancePhAndNutrient+0x520>)
 8002aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aaa:	f7fd ffd1 	bl	8000a50 <__aeabi_dcmplt>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <balancePhAndNutrient+0x472>
 8002ab4:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <balancePhAndNutrient+0x504>)
 8002ab6:	2279      	movs	r2, #121	; 0x79
 8002ab8:	701a      	strb	r2, [r3, #0]

			if(pH_down == 'y')
 8002aba:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <balancePhAndNutrient+0x500>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b79      	cmp	r3, #121	; 0x79
 8002ac0:	d166      	bne.n	8002b90 <balancePhAndNutrient+0x548>
			{
				pH_down_dose = calcPhDownDose(pH_set_point, nutrient_set_point);
 8002ac2:	4b29      	ldr	r3, [pc, #164]	; (8002b68 <balancePhAndNutrient+0x520>)
 8002ac4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ac8:	4b28      	ldr	r3, [pc, #160]	; (8002b6c <balancePhAndNutrient+0x524>)
 8002aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ace:	f001 fe2b 	bl	8004728 <calcPhDownDose>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	492b      	ldr	r1, [pc, #172]	; (8002b84 <balancePhAndNutrient+0x53c>)
 8002ad8:	e9c1 2300 	strd	r2, r3, [r1]
				doseWater(pH_down_dose,0,0);
 8002adc:	4b29      	ldr	r3, [pc, #164]	; (8002b84 <balancePhAndNutrient+0x53c>)
 8002ade:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	e9cd 2300 	strd	r2, r3, [sp]
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	f001 fd88 	bl	800460a <doseWater>
				total_pH_down_ml += pH_down_dose;
 8002afa:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <balancePhAndNutrient+0x540>)
 8002afc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b00:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <balancePhAndNutrient+0x53c>)
 8002b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b06:	f7fd fb7b 	bl	8000200 <__adddf3>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	491e      	ldr	r1, [pc, #120]	; (8002b88 <balancePhAndNutrient+0x540>)
 8002b10:	e9c1 2300 	strd	r2, r3, [r1]
				total_pH_down_ml_per_file += pH_down_dose;
 8002b14:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <balancePhAndNutrient+0x544>)
 8002b16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b1a:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <balancePhAndNutrient+0x53c>)
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	f7fd fb6e 	bl	8000200 <__adddf3>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4918      	ldr	r1, [pc, #96]	; (8002b8c <balancePhAndNutrient+0x544>)
 8002b2a:	e9c1 2300 	strd	r2, r3, [r1]
				pH_down = 'n';
 8002b2e:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <balancePhAndNutrient+0x500>)
 8002b30:	226e      	movs	r2, #110	; 0x6e
 8002b32:	701a      	strb	r2, [r3, #0]
				time_to_bal_pH = waitForWaterToStabilize();
 8002b34:	f000 ff62 	bl	80039fc <waitForWaterToStabilize>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4a09      	ldr	r2, [pc, #36]	; (8002b60 <balancePhAndNutrient+0x518>)
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e0f0      	b.n	8002d22 <balancePhAndNutrient+0x6da>
 8002b40:	200001c6 	.word	0x200001c6
 8002b44:	20004010 	.word	0x20004010
 8002b48:	200001ce 	.word	0x200001ce
 8002b4c:	200001cd 	.word	0x200001cd
 8002b50:	200001cf 	.word	0x200001cf
 8002b54:	200001c7 	.word	0x200001c7
 8002b58:	20003ff8 	.word	0x20003ff8
 8002b5c:	200000c9 	.word	0x200000c9
 8002b60:	20004004 	.word	0x20004004
 8002b64:	20004000 	.word	0x20004000
 8002b68:	20000038 	.word	0x20000038
 8002b6c:	20000030 	.word	0x20000030
 8002b70:	20001788 	.word	0x20001788
 8002b74:	20001790 	.word	0x20001790
 8002b78:	200017a8 	.word	0x200017a8
 8002b7c:	200017c8 	.word	0x200017c8
 8002b80:	20000058 	.word	0x20000058
 8002b84:	20001780 	.word	0x20001780
 8002b88:	200017a0 	.word	0x200017a0
 8002b8c:	200017b8 	.word	0x200017b8
			}
			else if(pH_up == 'y')
 8002b90:	4b74      	ldr	r3, [pc, #464]	; (8002d64 <balancePhAndNutrient+0x71c>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b79      	cmp	r3, #121	; 0x79
 8002b96:	f040 80c4 	bne.w	8002d22 <balancePhAndNutrient+0x6da>
			{
				pH_up_dose = calcPhUpDose(pH_set_point, nutrient_set_point);
 8002b9a:	4b73      	ldr	r3, [pc, #460]	; (8002d68 <balancePhAndNutrient+0x720>)
 8002b9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ba0:	4b72      	ldr	r3, [pc, #456]	; (8002d6c <balancePhAndNutrient+0x724>)
 8002ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba6:	f001 fd4f 	bl	8004648 <calcPhUpDose>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4970      	ldr	r1, [pc, #448]	; (8002d70 <balancePhAndNutrient+0x728>)
 8002bb0:	e9c1 2300 	strd	r2, r3, [r1]
				doseWater(0,pH_up_dose,0);
 8002bb4:	4b6e      	ldr	r3, [pc, #440]	; (8002d70 <balancePhAndNutrient+0x728>)
 8002bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bba:	f04f 0000 	mov.w	r0, #0
 8002bbe:	f04f 0100 	mov.w	r1, #0
 8002bc2:	e9cd 0100 	strd	r0, r1, [sp]
 8002bc6:	f04f 0000 	mov.w	r0, #0
 8002bca:	f04f 0100 	mov.w	r1, #0
 8002bce:	f001 fd1c 	bl	800460a <doseWater>
				total_pH_up_ml += pH_up_dose;
 8002bd2:	4b68      	ldr	r3, [pc, #416]	; (8002d74 <balancePhAndNutrient+0x72c>)
 8002bd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bd8:	4b65      	ldr	r3, [pc, #404]	; (8002d70 <balancePhAndNutrient+0x728>)
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	f7fd fb0f 	bl	8000200 <__adddf3>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4963      	ldr	r1, [pc, #396]	; (8002d74 <balancePhAndNutrient+0x72c>)
 8002be8:	e9c1 2300 	strd	r2, r3, [r1]
				total_pH_up_ml_per_file+= pH_up_dose;
 8002bec:	4b62      	ldr	r3, [pc, #392]	; (8002d78 <balancePhAndNutrient+0x730>)
 8002bee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bf2:	4b5f      	ldr	r3, [pc, #380]	; (8002d70 <balancePhAndNutrient+0x728>)
 8002bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf8:	f7fd fb02 	bl	8000200 <__adddf3>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	495d      	ldr	r1, [pc, #372]	; (8002d78 <balancePhAndNutrient+0x730>)
 8002c02:	e9c1 2300 	strd	r2, r3, [r1]
				pH_up = 'n';
 8002c06:	4b57      	ldr	r3, [pc, #348]	; (8002d64 <balancePhAndNutrient+0x71c>)
 8002c08:	226e      	movs	r2, #110	; 0x6e
 8002c0a:	701a      	strb	r2, [r3, #0]
				time_to_bal_pH = waitForWaterToStabilize();
 8002c0c:	f000 fef6 	bl	80039fc <waitForWaterToStabilize>
 8002c10:	4603      	mov	r3, r0
 8002c12:	4a5a      	ldr	r2, [pc, #360]	; (8002d7c <balancePhAndNutrient+0x734>)
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e084      	b.n	8002d22 <balancePhAndNutrient+0x6da>
			}
		}
		else if(pH_down == 'y')
 8002c18:	4b59      	ldr	r3, [pc, #356]	; (8002d80 <balancePhAndNutrient+0x738>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b79      	cmp	r3, #121	; 0x79
 8002c1e:	d13e      	bne.n	8002c9e <balancePhAndNutrient+0x656>
		{
			pH_down_dose = calcPhDownDose(pH_set_point, nutrient_set_point);
 8002c20:	4b51      	ldr	r3, [pc, #324]	; (8002d68 <balancePhAndNutrient+0x720>)
 8002c22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c26:	4b51      	ldr	r3, [pc, #324]	; (8002d6c <balancePhAndNutrient+0x724>)
 8002c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2c:	f001 fd7c 	bl	8004728 <calcPhDownDose>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4953      	ldr	r1, [pc, #332]	; (8002d84 <balancePhAndNutrient+0x73c>)
 8002c36:	e9c1 2300 	strd	r2, r3, [r1]
			doseWater(pH_down_dose,0,0);
 8002c3a:	4b52      	ldr	r3, [pc, #328]	; (8002d84 <balancePhAndNutrient+0x73c>)
 8002c3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	e9cd 2300 	strd	r2, r3, [sp]
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	f001 fcd9 	bl	800460a <doseWater>
			total_pH_down_ml += pH_down_dose;
 8002c58:	4b4b      	ldr	r3, [pc, #300]	; (8002d88 <balancePhAndNutrient+0x740>)
 8002c5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c5e:	4b49      	ldr	r3, [pc, #292]	; (8002d84 <balancePhAndNutrient+0x73c>)
 8002c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c64:	f7fd facc 	bl	8000200 <__adddf3>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4946      	ldr	r1, [pc, #280]	; (8002d88 <balancePhAndNutrient+0x740>)
 8002c6e:	e9c1 2300 	strd	r2, r3, [r1]
			total_pH_down_ml_per_file += pH_down_dose;
 8002c72:	4b46      	ldr	r3, [pc, #280]	; (8002d8c <balancePhAndNutrient+0x744>)
 8002c74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c78:	4b42      	ldr	r3, [pc, #264]	; (8002d84 <balancePhAndNutrient+0x73c>)
 8002c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7e:	f7fd fabf 	bl	8000200 <__adddf3>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	4941      	ldr	r1, [pc, #260]	; (8002d8c <balancePhAndNutrient+0x744>)
 8002c88:	e9c1 2300 	strd	r2, r3, [r1]
			pH_down = 'n';
 8002c8c:	4b3c      	ldr	r3, [pc, #240]	; (8002d80 <balancePhAndNutrient+0x738>)
 8002c8e:	226e      	movs	r2, #110	; 0x6e
 8002c90:	701a      	strb	r2, [r3, #0]
			time_to_bal_pH = waitForWaterToStabilize();
 8002c92:	f000 feb3 	bl	80039fc <waitForWaterToStabilize>
 8002c96:	4603      	mov	r3, r0
 8002c98:	4a38      	ldr	r2, [pc, #224]	; (8002d7c <balancePhAndNutrient+0x734>)
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	e041      	b.n	8002d22 <balancePhAndNutrient+0x6da>
		}
		else if(pH_up == 'y')
 8002c9e:	4b31      	ldr	r3, [pc, #196]	; (8002d64 <balancePhAndNutrient+0x71c>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b79      	cmp	r3, #121	; 0x79
 8002ca4:	d13d      	bne.n	8002d22 <balancePhAndNutrient+0x6da>
		{
			pH_up_dose = calcPhUpDose(pH_set_point, nutrient_set_point);
 8002ca6:	4b30      	ldr	r3, [pc, #192]	; (8002d68 <balancePhAndNutrient+0x720>)
 8002ca8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cac:	4b2f      	ldr	r3, [pc, #188]	; (8002d6c <balancePhAndNutrient+0x724>)
 8002cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb2:	f001 fcc9 	bl	8004648 <calcPhUpDose>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	492d      	ldr	r1, [pc, #180]	; (8002d70 <balancePhAndNutrient+0x728>)
 8002cbc:	e9c1 2300 	strd	r2, r3, [r1]
			doseWater(0,pH_up_dose,0);
 8002cc0:	4b2b      	ldr	r3, [pc, #172]	; (8002d70 <balancePhAndNutrient+0x728>)
 8002cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc6:	f04f 0000 	mov.w	r0, #0
 8002cca:	f04f 0100 	mov.w	r1, #0
 8002cce:	e9cd 0100 	strd	r0, r1, [sp]
 8002cd2:	f04f 0000 	mov.w	r0, #0
 8002cd6:	f04f 0100 	mov.w	r1, #0
 8002cda:	f001 fc96 	bl	800460a <doseWater>
			total_pH_up_ml += pH_up_dose;
 8002cde:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <balancePhAndNutrient+0x72c>)
 8002ce0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ce4:	4b22      	ldr	r3, [pc, #136]	; (8002d70 <balancePhAndNutrient+0x728>)
 8002ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cea:	f7fd fa89 	bl	8000200 <__adddf3>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4920      	ldr	r1, [pc, #128]	; (8002d74 <balancePhAndNutrient+0x72c>)
 8002cf4:	e9c1 2300 	strd	r2, r3, [r1]
			total_pH_up_ml_per_file += pH_up_dose;
 8002cf8:	4b1f      	ldr	r3, [pc, #124]	; (8002d78 <balancePhAndNutrient+0x730>)
 8002cfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <balancePhAndNutrient+0x728>)
 8002d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d04:	f7fd fa7c 	bl	8000200 <__adddf3>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	491a      	ldr	r1, [pc, #104]	; (8002d78 <balancePhAndNutrient+0x730>)
 8002d0e:	e9c1 2300 	strd	r2, r3, [r1]
			pH_up = 'n';
 8002d12:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <balancePhAndNutrient+0x71c>)
 8002d14:	226e      	movs	r2, #110	; 0x6e
 8002d16:	701a      	strb	r2, [r3, #0]
			time_to_bal_pH = waitForWaterToStabilize();
 8002d18:	f000 fe70 	bl	80039fc <waitForWaterToStabilize>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4a17      	ldr	r2, [pc, #92]	; (8002d7c <balancePhAndNutrient+0x734>)
 8002d20:	6013      	str	r3, [r2, #0]
		}
		osDelay(500);
 8002d22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d26:	f00f fd68 	bl	80127fa <osDelay>
		num_of_stable_runs++;
 8002d2a:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <balancePhAndNutrient+0x748>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	4a17      	ldr	r2, [pc, #92]	; (8002d90 <balancePhAndNutrient+0x748>)
 8002d32:	6013      	str	r3, [r2, #0]
		add_data_to_array();
 8002d34:	f7ff f850 	bl	8001dd8 <add_data_to_array>
		pH_up_dose = 0;
 8002d38:	490d      	ldr	r1, [pc, #52]	; (8002d70 <balancePhAndNutrient+0x728>)
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	e9c1 2300 	strd	r2, r3, [r1]
		pH_down_dose = 0;
 8002d46:	490f      	ldr	r1, [pc, #60]	; (8002d84 <balancePhAndNutrient+0x73c>)
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	e9c1 2300 	strd	r2, r3, [r1]
		nutrient_dose = 0;
 8002d54:	490f      	ldr	r1, [pc, #60]	; (8002d94 <balancePhAndNutrient+0x74c>)
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	e9c1 2300 	strd	r2, r3, [r1]
 8002d62:	e065      	b.n	8002e30 <balancePhAndNutrient+0x7e8>
 8002d64:	200001cd 	.word	0x200001cd
 8002d68:	20000038 	.word	0x20000038
 8002d6c:	20000030 	.word	0x20000030
 8002d70:	20001778 	.word	0x20001778
 8002d74:	20001798 	.word	0x20001798
 8002d78:	200017b0 	.word	0x200017b0
 8002d7c:	20004004 	.word	0x20004004
 8002d80:	200001ce 	.word	0x200001ce
 8002d84:	20001780 	.word	0x20001780
 8002d88:	200017a0 	.word	0x200017a0
 8002d8c:	200017b8 	.word	0x200017b8
 8002d90:	20004010 	.word	0x20004010
 8002d94:	20001788 	.word	0x20001788
	}
	else if(num_of_stable_runs>=7 && waiting_to_write == 'n' && (total_pH_up_ml_per_file > 0 || total_pH_down_ml_per_file > 0 || total_nutrient_ml_per_file > 0) && setting_nutrient =='n' && setting_pH == 'n')
 8002d98:	4b4a      	ldr	r3, [pc, #296]	; (8002ec4 <balancePhAndNutrient+0x87c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b06      	cmp	r3, #6
 8002d9e:	dd47      	ble.n	8002e30 <balancePhAndNutrient+0x7e8>
 8002da0:	4b49      	ldr	r3, [pc, #292]	; (8002ec8 <balancePhAndNutrient+0x880>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b6e      	cmp	r3, #110	; 0x6e
 8002da6:	d143      	bne.n	8002e30 <balancePhAndNutrient+0x7e8>
 8002da8:	4b48      	ldr	r3, [pc, #288]	; (8002ecc <balancePhAndNutrient+0x884>)
 8002daa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	f7fd fe69 	bl	8000a8c <__aeabi_dcmpgt>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d117      	bne.n	8002df0 <balancePhAndNutrient+0x7a8>
 8002dc0:	4b43      	ldr	r3, [pc, #268]	; (8002ed0 <balancePhAndNutrient+0x888>)
 8002dc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	f7fd fe5d 	bl	8000a8c <__aeabi_dcmpgt>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10b      	bne.n	8002df0 <balancePhAndNutrient+0x7a8>
 8002dd8:	4b3e      	ldr	r3, [pc, #248]	; (8002ed4 <balancePhAndNutrient+0x88c>)
 8002dda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	f7fd fe51 	bl	8000a8c <__aeabi_dcmpgt>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01f      	beq.n	8002e30 <balancePhAndNutrient+0x7e8>
 8002df0:	4b39      	ldr	r3, [pc, #228]	; (8002ed8 <balancePhAndNutrient+0x890>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b6e      	cmp	r3, #110	; 0x6e
 8002df6:	d11b      	bne.n	8002e30 <balancePhAndNutrient+0x7e8>
 8002df8:	4b38      	ldr	r3, [pc, #224]	; (8002edc <balancePhAndNutrient+0x894>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b6e      	cmp	r3, #110	; 0x6e
 8002dfe:	d117      	bne.n	8002e30 <balancePhAndNutrient+0x7e8>
	{
		waiting_to_write = 'y';
 8002e00:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <balancePhAndNutrient+0x880>)
 8002e02:	2279      	movs	r2, #121	; 0x79
 8002e04:	701a      	strb	r2, [r3, #0]
		total_pH_down_ml_per_file = 0;
 8002e06:	4932      	ldr	r1, [pc, #200]	; (8002ed0 <balancePhAndNutrient+0x888>)
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	e9c1 2300 	strd	r2, r3, [r1]
		total_pH_up_ml_per_file = 0;
 8002e14:	492d      	ldr	r1, [pc, #180]	; (8002ecc <balancePhAndNutrient+0x884>)
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	e9c1 2300 	strd	r2, r3, [r1]
		total_nutrient_ml_per_file = 0;
 8002e22:	492c      	ldr	r1, [pc, #176]	; (8002ed4 <balancePhAndNutrient+0x88c>)
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if(usb_good == 1 && num_of_stable_runs >= 7 && waiting_to_write == 'y')
 8002e30:	4b2b      	ldr	r3, [pc, #172]	; (8002ee0 <balancePhAndNutrient+0x898>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d131      	bne.n	8002e9c <balancePhAndNutrient+0x854>
 8002e38:	4b22      	ldr	r3, [pc, #136]	; (8002ec4 <balancePhAndNutrient+0x87c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b06      	cmp	r3, #6
 8002e3e:	dd2d      	ble.n	8002e9c <balancePhAndNutrient+0x854>
 8002e40:	4b21      	ldr	r3, [pc, #132]	; (8002ec8 <balancePhAndNutrient+0x880>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b79      	cmp	r3, #121	; 0x79
 8002e46:	d129      	bne.n	8002e9c <balancePhAndNutrient+0x854>
	{
		write_balance_data_file('n');
 8002e48:	206e      	movs	r0, #110	; 0x6e
 8002e4a:	f7fe fee5 	bl	8001c18 <write_balance_data_file>
		num_of_stable_runs = 0;
 8002e4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <balancePhAndNutrient+0x87c>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
		balance_index = 0;
 8002e54:	4b23      	ldr	r3, [pc, #140]	; (8002ee4 <balancePhAndNutrient+0x89c>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
		get_init_conditions  = 'n';
 8002e5a:	4b23      	ldr	r3, [pc, #140]	; (8002ee8 <balancePhAndNutrient+0x8a0>)
 8002e5c:	226e      	movs	r2, #110	; 0x6e
 8002e5e:	701a      	strb	r2, [r3, #0]
		waiting_to_write = 'n';
 8002e60:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <balancePhAndNutrient+0x880>)
 8002e62:	226e      	movs	r2, #110	; 0x6e
 8002e64:	701a      	strb	r2, [r3, #0]
		resetStabilityVars();
 8002e66:	f000 f845 	bl	8002ef4 <resetStabilityVars>
		for(int a = 0; a < (sizeof balance_data); a++)	// reset the data buffer since we just wrote the data
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	607b      	str	r3, [r7, #4]
 8002e6e:	e00f      	b.n	8002e90 <balancePhAndNutrient+0x848>
		{
			balance_data[a]   = '\0';
 8002e70:	4a1e      	ldr	r2, [pc, #120]	; (8002eec <balancePhAndNutrient+0x8a4>)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
			if(a<25)buffer[a] = '\0';
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b18      	cmp	r3, #24
 8002e7e:	dc04      	bgt.n	8002e8a <balancePhAndNutrient+0x842>
 8002e80:	4a1b      	ldr	r2, [pc, #108]	; (8002ef0 <balancePhAndNutrient+0x8a8>)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	2200      	movs	r2, #0
 8002e88:	701a      	strb	r2, [r3, #0]
		for(int a = 0; a < (sizeof balance_data); a++)	// reset the data buffer since we just wrote the data
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f241 3287 	movw	r2, #4999	; 0x1387
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d9ea      	bls.n	8002e70 <balancePhAndNutrient+0x828>
 8002e9a:	e00f      	b.n	8002ebc <balancePhAndNutrient+0x874>
		}
	}
	else if(usb_good == 1 && ((5000 - balance_index) < 500)) write_balance_data_file('y'); // if the buffer is full write the file
 8002e9c:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <balancePhAndNutrient+0x898>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d10b      	bne.n	8002ebc <balancePhAndNutrient+0x874>
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <balancePhAndNutrient+0x89c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8002eac:	3308      	adds	r3, #8
 8002eae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002eb2:	da03      	bge.n	8002ebc <balancePhAndNutrient+0x874>
 8002eb4:	2079      	movs	r0, #121	; 0x79
 8002eb6:	f7fe feaf 	bl	8001c18 <write_balance_data_file>
}
 8002eba:	e7ff      	b.n	8002ebc <balancePhAndNutrient+0x874>
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20004010 	.word	0x20004010
 8002ec8:	200000c9 	.word	0x200000c9
 8002ecc:	200017b0 	.word	0x200017b0
 8002ed0:	200017b8 	.word	0x200017b8
 8002ed4:	200017a8 	.word	0x200017a8
 8002ed8:	200001c7 	.word	0x200001c7
 8002edc:	200001c6 	.word	0x200001c6
 8002ee0:	20009498 	.word	0x20009498
 8002ee4:	20003ff8 	.word	0x20003ff8
 8002ee8:	200000ca 	.word	0x200000ca
 8002eec:	2000405c 	.word	0x2000405c
 8002ef0:	20004034 	.word	0x20004034

08002ef4 <resetStabilityVars>:

void resetStabilityVars()
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
	average_pH = 0;
 8002efa:	492e      	ldr	r1, [pc, #184]	; (8002fb4 <resetStabilityVars+0xc0>)
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	e9c1 2300 	strd	r2, r3, [r1]
	average_TDS = 0;
 8002f08:	492b      	ldr	r1, [pc, #172]	; (8002fb8 <resetStabilityVars+0xc4>)
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	e9c1 2300 	strd	r2, r3, [r1]
	run_again = 1; 		// set to one its the first run 2 is multiple 0 is do not run again
 8002f16:	4b29      	ldr	r3, [pc, #164]	; (8002fbc <resetStabilityVars+0xc8>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
	valid = 0;
 8002f1c:	4b28      	ldr	r3, [pc, #160]	; (8002fc0 <resetStabilityVars+0xcc>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
	historic_sample_index = 0;
 8002f22:	4b28      	ldr	r3, [pc, #160]	; (8002fc4 <resetStabilityVars+0xd0>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
	slope_factor_average_TDS = 0;
 8002f28:	4927      	ldr	r1, [pc, #156]	; (8002fc8 <resetStabilityVars+0xd4>)
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	e9c1 2300 	strd	r2, r3, [r1]
	slope_factor_average_ph = 0;
 8002f36:	4925      	ldr	r1, [pc, #148]	; (8002fcc <resetStabilityVars+0xd8>)
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	e9c1 2300 	strd	r2, r3, [r1]

	for(int h = 0; h<200; h++)
 8002f44:	2300      	movs	r3, #0
 8002f46:	607b      	str	r3, [r7, #4]
 8002f48:	e02a      	b.n	8002fa0 <resetStabilityVars+0xac>
	{
		historic_largest_pH[h] = 0;
 8002f4a:	4a21      	ldr	r2, [pc, #132]	; (8002fd0 <resetStabilityVars+0xdc>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	18d1      	adds	r1, r2, r3
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	e9c1 2300 	strd	r2, r3, [r1]
		historic_smallest_pH[h] = 0;
 8002f5e:	4a1d      	ldr	r2, [pc, #116]	; (8002fd4 <resetStabilityVars+0xe0>)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	18d1      	adds	r1, r2, r3
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	e9c1 2300 	strd	r2, r3, [r1]
		historic_largest_TDS[h] = 0;
 8002f72:	4a19      	ldr	r2, [pc, #100]	; (8002fd8 <resetStabilityVars+0xe4>)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	18d1      	adds	r1, r2, r3
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	e9c1 2300 	strd	r2, r3, [r1]
		historic_smallest_TDS[h] = 0;
 8002f86:	4a15      	ldr	r2, [pc, #84]	; (8002fdc <resetStabilityVars+0xe8>)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	18d1      	adds	r1, r2, r3
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	e9c1 2300 	strd	r2, r3, [r1]
	for(int h = 0; h<200; h++)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	607b      	str	r3, [r7, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2bc7      	cmp	r3, #199	; 0xc7
 8002fa4:	ddd1      	ble.n	8002f4a <resetStabilityVars+0x56>
	}
}
 8002fa6:	bf00      	nop
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	20003d88 	.word	0x20003d88
 8002fb8:	20003d90 	.word	0x20003d90
 8002fbc:	200000a4 	.word	0x200000a4
 8002fc0:	2000402c 	.word	0x2000402c
 8002fc4:	20004030 	.word	0x20004030
 8002fc8:	20003dc8 	.word	0x20003dc8
 8002fcc:	20003dd0 	.word	0x20003dd0
 8002fd0:	200017e8 	.word	0x200017e8
 8002fd4:	20001e28 	.word	0x20001e28
 8002fd8:	20002468 	.word	0x20002468
 8002fdc:	20002aa8 	.word	0x20002aa8

08002fe0 <isStabalized>:

void isStabalized()  // will take a few samples of the waters pH and TDS to determine if the solution has stabilized. If stabilized returns one else 0
{		// get the current system time sets global variables sTime and sDate in RTC_driver.c
 8002fe0:	b5b0      	push	{r4, r5, r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0

	end_time_seconds = 0;
 8002fe6:	4b26      	ldr	r3, [pc, #152]	; (8003080 <isStabalized+0xa0>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
	prev_smallest_ph = smallest_value_pH;
 8002fec:	4b25      	ldr	r3, [pc, #148]	; (8003084 <isStabalized+0xa4>)
 8002fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff2:	4925      	ldr	r1, [pc, #148]	; (8003088 <isStabalized+0xa8>)
 8002ff4:	e9c1 2300 	strd	r2, r3, [r1]
	prev_smallest_TDS = smallest_value_TDS;
 8002ff8:	4b24      	ldr	r3, [pc, #144]	; (800308c <isStabalized+0xac>)
 8002ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffe:	4924      	ldr	r1, [pc, #144]	; (8003090 <isStabalized+0xb0>)
 8003000:	e9c1 2300 	strd	r2, r3, [r1]
	prev_largest_TDS = largest_value_TDS;
 8003004:	4b23      	ldr	r3, [pc, #140]	; (8003094 <isStabalized+0xb4>)
 8003006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300a:	4923      	ldr	r1, [pc, #140]	; (8003098 <isStabalized+0xb8>)
 800300c:	e9c1 2300 	strd	r2, r3, [r1]
	prev_largest_pH = largest_value_pH;
 8003010:	4b22      	ldr	r3, [pc, #136]	; (800309c <isStabalized+0xbc>)
 8003012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003016:	4922      	ldr	r1, [pc, #136]	; (80030a0 <isStabalized+0xc0>)
 8003018:	e9c1 2300 	strd	r2, r3, [r1]

	getSensorValues();
 800301c:	f002 f9c2 	bl	80053a4 <getSensorValues>

	smallest_value_TDS = 10000;							   // set smallest values to value much higher than expected
 8003020:	491a      	ldr	r1, [pc, #104]	; (800308c <isStabalized+0xac>)
 8003022:	a315      	add	r3, pc, #84	; (adr r3, 8003078 <isStabalized+0x98>)
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	e9c1 2300 	strd	r2, r3, [r1]
	largest_value_TDS = 0;	  							   // set largest to the smallest possible value these steps ensure we catch error cases
 800302c:	4919      	ldr	r1, [pc, #100]	; (8003094 <isStabalized+0xb4>)
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	e9c1 2300 	strd	r2, r3, [r1]
	smallest_value_pH = 100;
 800303a:	4912      	ldr	r1, [pc, #72]	; (8003084 <isStabalized+0xa4>)
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <isStabalized+0xc4>)
 8003042:	e9c1 2300 	strd	r2, r3, [r1]
    largest_value_pH = 0;
 8003046:	4915      	ldr	r1, [pc, #84]	; (800309c <isStabalized+0xbc>)
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	e9c1 2300 	strd	r2, r3, [r1]


    average_pH = 0;
 8003054:	4914      	ldr	r1, [pc, #80]	; (80030a8 <isStabalized+0xc8>)
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	e9c1 2300 	strd	r2, r3, [r1]
    average_TDS = 0;
 8003062:	4912      	ldr	r1, [pc, #72]	; (80030ac <isStabalized+0xcc>)
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0; i<num_sensor_samples;i++)
 8003070:	2300      	movs	r3, #0
 8003072:	607b      	str	r3, [r7, #4]
 8003074:	e0fa      	b.n	800326c <isStabalized+0x28c>
 8003076:	bf00      	nop
 8003078:	00000000 	.word	0x00000000
 800307c:	40c38800 	.word	0x40c38800
 8003080:	2000401c 	.word	0x2000401c
 8003084:	20000090 	.word	0x20000090
 8003088:	200017d8 	.word	0x200017d8
 800308c:	20000088 	.word	0x20000088
 8003090:	200017e0 	.word	0x200017e0
 8003094:	20003fb8 	.word	0x20003fb8
 8003098:	20003fd0 	.word	0x20003fd0
 800309c:	20003fc0 	.word	0x20003fc0
 80030a0:	20003fc8 	.word	0x20003fc8
 80030a4:	40590000 	.word	0x40590000
 80030a8:	20003d88 	.word	0x20003d88
 80030ac:	20003d90 	.word	0x20003d90
	{
		if(sample_array_TDS[i] > largest_value_TDS  && sample_array_TDS[i] != 0)  largest_value_TDS  = sample_array_TDS[i];	// find largest and smallest values in our data
 80030b0:	4aa5      	ldr	r2, [pc, #660]	; (8003348 <isStabalized+0x368>)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	4413      	add	r3, r2
 80030b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030bc:	4ba3      	ldr	r3, [pc, #652]	; (800334c <isStabalized+0x36c>)
 80030be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c2:	f7fd fce3 	bl	8000a8c <__aeabi_dcmpgt>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d017      	beq.n	80030fc <isStabalized+0x11c>
 80030cc:	4a9e      	ldr	r2, [pc, #632]	; (8003348 <isStabalized+0x368>)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	f7fd fcac 	bl	8000a3c <__aeabi_dcmpeq>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d108      	bne.n	80030fc <isStabalized+0x11c>
 80030ea:	4a97      	ldr	r2, [pc, #604]	; (8003348 <isStabalized+0x368>)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f6:	4995      	ldr	r1, [pc, #596]	; (800334c <isStabalized+0x36c>)
 80030f8:	e9c1 2300 	strd	r2, r3, [r1]
		if(sample_array_TDS[i] < smallest_value_TDS && sample_array_TDS[i] != 0) smallest_value_TDS = sample_array_TDS[i];
 80030fc:	4a92      	ldr	r2, [pc, #584]	; (8003348 <isStabalized+0x368>)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4413      	add	r3, r2
 8003104:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003108:	4b91      	ldr	r3, [pc, #580]	; (8003350 <isStabalized+0x370>)
 800310a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310e:	f7fd fc9f 	bl	8000a50 <__aeabi_dcmplt>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d017      	beq.n	8003148 <isStabalized+0x168>
 8003118:	4a8b      	ldr	r2, [pc, #556]	; (8003348 <isStabalized+0x368>)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	f7fd fc86 	bl	8000a3c <__aeabi_dcmpeq>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d108      	bne.n	8003148 <isStabalized+0x168>
 8003136:	4a84      	ldr	r2, [pc, #528]	; (8003348 <isStabalized+0x368>)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003142:	4983      	ldr	r1, [pc, #524]	; (8003350 <isStabalized+0x370>)
 8003144:	e9c1 2300 	strd	r2, r3, [r1]
		if(sample_array_pH[i]  > largest_value_pH && sample_array_pH[i] != 0) 	 largest_value_pH   = sample_array_pH[i];
 8003148:	4a82      	ldr	r2, [pc, #520]	; (8003354 <isStabalized+0x374>)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4413      	add	r3, r2
 8003150:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003154:	4b80      	ldr	r3, [pc, #512]	; (8003358 <isStabalized+0x378>)
 8003156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315a:	f7fd fc97 	bl	8000a8c <__aeabi_dcmpgt>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d017      	beq.n	8003194 <isStabalized+0x1b4>
 8003164:	4a7b      	ldr	r2, [pc, #492]	; (8003354 <isStabalized+0x374>)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	f7fd fc60 	bl	8000a3c <__aeabi_dcmpeq>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d108      	bne.n	8003194 <isStabalized+0x1b4>
 8003182:	4a74      	ldr	r2, [pc, #464]	; (8003354 <isStabalized+0x374>)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4413      	add	r3, r2
 800318a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318e:	4972      	ldr	r1, [pc, #456]	; (8003358 <isStabalized+0x378>)
 8003190:	e9c1 2300 	strd	r2, r3, [r1]
		if(sample_array_pH[i]  < smallest_value_pH && sample_array_pH[i] != 0)   smallest_value_pH  = sample_array_pH[i];
 8003194:	4a6f      	ldr	r2, [pc, #444]	; (8003354 <isStabalized+0x374>)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4413      	add	r3, r2
 800319c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031a0:	4b6e      	ldr	r3, [pc, #440]	; (800335c <isStabalized+0x37c>)
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	f7fd fc53 	bl	8000a50 <__aeabi_dcmplt>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d017      	beq.n	80031e0 <isStabalized+0x200>
 80031b0:	4a68      	ldr	r2, [pc, #416]	; (8003354 <isStabalized+0x374>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4413      	add	r3, r2
 80031b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	f7fd fc3a 	bl	8000a3c <__aeabi_dcmpeq>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d108      	bne.n	80031e0 <isStabalized+0x200>
 80031ce:	4a61      	ldr	r2, [pc, #388]	; (8003354 <isStabalized+0x374>)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4413      	add	r3, r2
 80031d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031da:	4960      	ldr	r1, [pc, #384]	; (800335c <isStabalized+0x37c>)
 80031dc:	e9c1 2300 	strd	r2, r3, [r1]
		if( sample_array_TDS[i] != 0 && sample_array_pH[i] != 0)
 80031e0:	4a59      	ldr	r2, [pc, #356]	; (8003348 <isStabalized+0x368>)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4413      	add	r3, r2
 80031e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	f7fd fc22 	bl	8000a3c <__aeabi_dcmpeq>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d133      	bne.n	8003266 <isStabalized+0x286>
 80031fe:	4a55      	ldr	r2, [pc, #340]	; (8003354 <isStabalized+0x374>)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4413      	add	r3, r2
 8003206:	e9d3 0100 	ldrd	r0, r1, [r3]
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	f7fd fc13 	bl	8000a3c <__aeabi_dcmpeq>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d124      	bne.n	8003266 <isStabalized+0x286>
		{
			average_pH  += sample_array_pH[i];
 800321c:	4a4d      	ldr	r2, [pc, #308]	; (8003354 <isStabalized+0x374>)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4413      	add	r3, r2
 8003224:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003228:	4b4d      	ldr	r3, [pc, #308]	; (8003360 <isStabalized+0x380>)
 800322a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322e:	f7fc ffe7 	bl	8000200 <__adddf3>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	494a      	ldr	r1, [pc, #296]	; (8003360 <isStabalized+0x380>)
 8003238:	e9c1 2300 	strd	r2, r3, [r1]
			average_TDS += sample_array_TDS[i];
 800323c:	4a42      	ldr	r2, [pc, #264]	; (8003348 <isStabalized+0x368>)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4413      	add	r3, r2
 8003244:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003248:	4b46      	ldr	r3, [pc, #280]	; (8003364 <isStabalized+0x384>)
 800324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324e:	f7fc ffd7 	bl	8000200 <__adddf3>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4943      	ldr	r1, [pc, #268]	; (8003364 <isStabalized+0x384>)
 8003258:	e9c1 2300 	strd	r2, r3, [r1]
			sample_index1++;
 800325c:	4b42      	ldr	r3, [pc, #264]	; (8003368 <isStabalized+0x388>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3301      	adds	r3, #1
 8003262:	4a41      	ldr	r2, [pc, #260]	; (8003368 <isStabalized+0x388>)
 8003264:	6013      	str	r3, [r2, #0]
	for(int i = 0; i<num_sensor_samples;i++)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3301      	adds	r3, #1
 800326a:	607b      	str	r3, [r7, #4]
 800326c:	4b3f      	ldr	r3, [pc, #252]	; (800336c <isStabalized+0x38c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	429a      	cmp	r2, r3
 8003274:	f6ff af1c 	blt.w	80030b0 <isStabalized+0xd0>
		}
	}

	TDS_range = largest_value_TDS - smallest_value_TDS; // calculate the range in the samples i.e. (largest valve)-(smallest value)
 8003278:	4b34      	ldr	r3, [pc, #208]	; (800334c <isStabalized+0x36c>)
 800327a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800327e:	4b34      	ldr	r3, [pc, #208]	; (8003350 <isStabalized+0x370>)
 8003280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003284:	f7fc ffba 	bl	80001fc <__aeabi_dsub>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4938      	ldr	r1, [pc, #224]	; (8003370 <isStabalized+0x390>)
 800328e:	e9c1 2300 	strd	r2, r3, [r1]
	pH_range  = largest_value_pH  - smallest_value_pH;
 8003292:	4b31      	ldr	r3, [pc, #196]	; (8003358 <isStabalized+0x378>)
 8003294:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003298:	4b30      	ldr	r3, [pc, #192]	; (800335c <isStabalized+0x37c>)
 800329a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329e:	f7fc ffad 	bl	80001fc <__aeabi_dsub>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4933      	ldr	r1, [pc, #204]	; (8003374 <isStabalized+0x394>)
 80032a8:	e9c1 2300 	strd	r2, r3, [r1]

	historic_TDS_max = 0;
 80032ac:	4932      	ldr	r1, [pc, #200]	; (8003378 <isStabalized+0x398>)
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	e9c1 2300 	strd	r2, r3, [r1]
	historic_TDS_min = 100000;
 80032ba:	4930      	ldr	r1, [pc, #192]	; (800337c <isStabalized+0x39c>)
 80032bc:	a320      	add	r3, pc, #128	; (adr r3, 8003340 <isStabalized+0x360>)
 80032be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c2:	e9c1 2300 	strd	r2, r3, [r1]
	historic_pH_max  = 0;
 80032c6:	492e      	ldr	r1, [pc, #184]	; (8003380 <isStabalized+0x3a0>)
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	e9c1 2300 	strd	r2, r3, [r1]
	historic_pH_min  = 100000;
 80032d4:	492b      	ldr	r1, [pc, #172]	; (8003384 <isStabalized+0x3a4>)
 80032d6:	a31a      	add	r3, pc, #104	; (adr r3, 8003340 <isStabalized+0x360>)
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	e9c1 2300 	strd	r2, r3, [r1]

	average_pH  = average_pH/(sample_index1);
 80032e0:	4b1f      	ldr	r3, [pc, #124]	; (8003360 <isStabalized+0x380>)
 80032e2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80032e6:	4b20      	ldr	r3, [pc, #128]	; (8003368 <isStabalized+0x388>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd f8d4 	bl	8000498 <__aeabi_i2d>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4620      	mov	r0, r4
 80032f6:	4629      	mov	r1, r5
 80032f8:	f7fd fa62 	bl	80007c0 <__aeabi_ddiv>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4917      	ldr	r1, [pc, #92]	; (8003360 <isStabalized+0x380>)
 8003302:	e9c1 2300 	strd	r2, r3, [r1]
	average_TDS = average_TDS/(sample_index1);
 8003306:	4b17      	ldr	r3, [pc, #92]	; (8003364 <isStabalized+0x384>)
 8003308:	e9d3 4500 	ldrd	r4, r5, [r3]
 800330c:	4b16      	ldr	r3, [pc, #88]	; (8003368 <isStabalized+0x388>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd f8c1 	bl	8000498 <__aeabi_i2d>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4620      	mov	r0, r4
 800331c:	4629      	mov	r1, r5
 800331e:	f7fd fa4f 	bl	80007c0 <__aeabi_ddiv>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	490f      	ldr	r1, [pc, #60]	; (8003364 <isStabalized+0x384>)
 8003328:	e9c1 2300 	strd	r2, r3, [r1]
	sample_index1 = 0;
 800332c:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <isStabalized+0x388>)
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
	if(historic_sample_index < number_historic_samples)
 8003332:	4b15      	ldr	r3, [pc, #84]	; (8003388 <isStabalized+0x3a8>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	4b15      	ldr	r3, [pc, #84]	; (800338c <isStabalized+0x3ac>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	da6a      	bge.n	8003414 <isStabalized+0x434>
 800333e:	e027      	b.n	8003390 <isStabalized+0x3b0>
 8003340:	00000000 	.word	0x00000000
 8003344:	40f86a00 	.word	0x40f86a00
 8003348:	20003dd8 	.word	0x20003dd8
 800334c:	20003fb8 	.word	0x20003fb8
 8003350:	20000088 	.word	0x20000088
 8003354:	20003ec8 	.word	0x20003ec8
 8003358:	20003fc0 	.word	0x20003fc0
 800335c:	20000090 	.word	0x20000090
 8003360:	20003d88 	.word	0x20003d88
 8003364:	20003d90 	.word	0x20003d90
 8003368:	20004024 	.word	0x20004024
 800336c:	20000098 	.word	0x20000098
 8003370:	20003fd8 	.word	0x20003fd8
 8003374:	20003fe0 	.word	0x20003fe0
 8003378:	20003da8 	.word	0x20003da8
 800337c:	20003dc0 	.word	0x20003dc0
 8003380:	20003db0 	.word	0x20003db0
 8003384:	20003db8 	.word	0x20003db8
 8003388:	20004030 	.word	0x20004030
 800338c:	200000a0 	.word	0x200000a0
	{
		historic_largest_pH[historic_sample_index]   = largest_value_pH;
 8003390:	4b4b      	ldr	r3, [pc, #300]	; (80034c0 <isStabalized+0x4e0>)
 8003392:	6819      	ldr	r1, [r3, #0]
 8003394:	4b4b      	ldr	r3, [pc, #300]	; (80034c4 <isStabalized+0x4e4>)
 8003396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339a:	484b      	ldr	r0, [pc, #300]	; (80034c8 <isStabalized+0x4e8>)
 800339c:	00c9      	lsls	r1, r1, #3
 800339e:	4401      	add	r1, r0
 80033a0:	e9c1 2300 	strd	r2, r3, [r1]
		historic_smallest_pH[historic_sample_index]  = smallest_value_pH;
 80033a4:	4b46      	ldr	r3, [pc, #280]	; (80034c0 <isStabalized+0x4e0>)
 80033a6:	6819      	ldr	r1, [r3, #0]
 80033a8:	4b48      	ldr	r3, [pc, #288]	; (80034cc <isStabalized+0x4ec>)
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	4848      	ldr	r0, [pc, #288]	; (80034d0 <isStabalized+0x4f0>)
 80033b0:	00c9      	lsls	r1, r1, #3
 80033b2:	4401      	add	r1, r0
 80033b4:	e9c1 2300 	strd	r2, r3, [r1]
		historic_largest_TDS[historic_sample_index]  = largest_value_TDS;
 80033b8:	4b41      	ldr	r3, [pc, #260]	; (80034c0 <isStabalized+0x4e0>)
 80033ba:	6819      	ldr	r1, [r3, #0]
 80033bc:	4b45      	ldr	r3, [pc, #276]	; (80034d4 <isStabalized+0x4f4>)
 80033be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c2:	4845      	ldr	r0, [pc, #276]	; (80034d8 <isStabalized+0x4f8>)
 80033c4:	00c9      	lsls	r1, r1, #3
 80033c6:	4401      	add	r1, r0
 80033c8:	e9c1 2300 	strd	r2, r3, [r1]
		historic_smallest_TDS[historic_sample_index] = smallest_value_TDS;
 80033cc:	4b3c      	ldr	r3, [pc, #240]	; (80034c0 <isStabalized+0x4e0>)
 80033ce:	6819      	ldr	r1, [r3, #0]
 80033d0:	4b42      	ldr	r3, [pc, #264]	; (80034dc <isStabalized+0x4fc>)
 80033d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d6:	4842      	ldr	r0, [pc, #264]	; (80034e0 <isStabalized+0x500>)
 80033d8:	00c9      	lsls	r1, r1, #3
 80033da:	4401      	add	r1, r0
 80033dc:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_pH[historic_sample_index]   = average_pH;
 80033e0:	4b37      	ldr	r3, [pc, #220]	; (80034c0 <isStabalized+0x4e0>)
 80033e2:	6819      	ldr	r1, [r3, #0]
 80033e4:	4b3f      	ldr	r3, [pc, #252]	; (80034e4 <isStabalized+0x504>)
 80033e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ea:	483f      	ldr	r0, [pc, #252]	; (80034e8 <isStabalized+0x508>)
 80033ec:	00c9      	lsls	r1, r1, #3
 80033ee:	4401      	add	r1, r0
 80033f0:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_TDS[historic_sample_index]  = average_TDS;
 80033f4:	4b32      	ldr	r3, [pc, #200]	; (80034c0 <isStabalized+0x4e0>)
 80033f6:	6819      	ldr	r1, [r3, #0]
 80033f8:	4b3c      	ldr	r3, [pc, #240]	; (80034ec <isStabalized+0x50c>)
 80033fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fe:	483c      	ldr	r0, [pc, #240]	; (80034f0 <isStabalized+0x510>)
 8003400:	00c9      	lsls	r1, r1, #3
 8003402:	4401      	add	r1, r0
 8003404:	e9c1 2300 	strd	r2, r3, [r1]
		historic_sample_index++;
 8003408:	4b2d      	ldr	r3, [pc, #180]	; (80034c0 <isStabalized+0x4e0>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3301      	adds	r3, #1
 800340e:	4a2c      	ldr	r2, [pc, #176]	; (80034c0 <isStabalized+0x4e0>)
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	e004      	b.n	800341e <isStabalized+0x43e>
	}
	else
	{
		resetStabilityVars();
 8003414:	f7ff fd6e 	bl	8002ef4 <resetStabilityVars>
		run_again = 2;
 8003418:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <isStabalized+0x514>)
 800341a:	2202      	movs	r2, #2
 800341c:	601a      	str	r2, [r3, #0]
	}

	if(historic_sample_index > 20)
 800341e:	4b28      	ldr	r3, [pc, #160]	; (80034c0 <isStabalized+0x4e0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b14      	cmp	r3, #20
 8003424:	f340 81a7 	ble.w	8003776 <isStabalized+0x796>
	{
		historic_average_pH_min = 1000;
 8003428:	4933      	ldr	r1, [pc, #204]	; (80034f8 <isStabalized+0x518>)
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	4b33      	ldr	r3, [pc, #204]	; (80034fc <isStabalized+0x51c>)
 8003430:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_pH_max = 0;
 8003434:	4932      	ldr	r1, [pc, #200]	; (8003500 <isStabalized+0x520>)
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_TDS_min = 100000;
 8003442:	4930      	ldr	r1, [pc, #192]	; (8003504 <isStabalized+0x524>)
 8003444:	a31c      	add	r3, pc, #112	; (adr r3, 80034b8 <isStabalized+0x4d8>)
 8003446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344a:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_TDS_max = 0;
 800344e:	492e      	ldr	r1, [pc, #184]	; (8003508 <isStabalized+0x528>)
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	e9c1 2300 	strd	r2, r3, [r1]
		smallest_value_TDS = 100000;							   // set smallest values to value much higher than expected
 800345c:	491f      	ldr	r1, [pc, #124]	; (80034dc <isStabalized+0x4fc>)
 800345e:	a316      	add	r3, pc, #88	; (adr r3, 80034b8 <isStabalized+0x4d8>)
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	e9c1 2300 	strd	r2, r3, [r1]
		largest_value_TDS = 0;	  							   // set largest to the smallest possible value these steps ensure we catch error cases
 8003468:	491a      	ldr	r1, [pc, #104]	; (80034d4 <isStabalized+0x4f4>)
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	e9c1 2300 	strd	r2, r3, [r1]
		smallest_value_pH = 100;
 8003476:	4915      	ldr	r1, [pc, #84]	; (80034cc <isStabalized+0x4ec>)
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	4b23      	ldr	r3, [pc, #140]	; (800350c <isStabalized+0x52c>)
 800347e:	e9c1 2300 	strd	r2, r3, [r1]
		largest_value_pH = 0;
 8003482:	4910      	ldr	r1, [pc, #64]	; (80034c4 <isStabalized+0x4e4>)
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	e9c1 2300 	strd	r2, r3, [r1]
		slope_factor_average_TDS = 0;
 8003490:	491f      	ldr	r1, [pc, #124]	; (8003510 <isStabalized+0x530>)
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	e9c1 2300 	strd	r2, r3, [r1]
		slope_factor_average_ph = 0;
 800349e:	491d      	ldr	r1, [pc, #116]	; (8003514 <isStabalized+0x534>)
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	e9c1 2300 	strd	r2, r3, [r1]
		for(int k = historic_sample_index-20; k<historic_sample_index; k++) 								// if we have at-least 5 samples find the max and min to calculate range of the last 5 runs
 80034ac:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <isStabalized+0x4e0>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3b14      	subs	r3, #20
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	e125      	b.n	8003702 <isStabalized+0x722>
 80034b6:	bf00      	nop
 80034b8:	00000000 	.word	0x00000000
 80034bc:	40f86a00 	.word	0x40f86a00
 80034c0:	20004030 	.word	0x20004030
 80034c4:	20003fc0 	.word	0x20003fc0
 80034c8:	200017e8 	.word	0x200017e8
 80034cc:	20000090 	.word	0x20000090
 80034d0:	20001e28 	.word	0x20001e28
 80034d4:	20003fb8 	.word	0x20003fb8
 80034d8:	20002468 	.word	0x20002468
 80034dc:	20000088 	.word	0x20000088
 80034e0:	20002aa8 	.word	0x20002aa8
 80034e4:	20003d88 	.word	0x20003d88
 80034e8:	200030e8 	.word	0x200030e8
 80034ec:	20003d90 	.word	0x20003d90
 80034f0:	20003728 	.word	0x20003728
 80034f4:	200000a4 	.word	0x200000a4
 80034f8:	20000078 	.word	0x20000078
 80034fc:	408f4000 	.word	0x408f4000
 8003500:	20003d98 	.word	0x20003d98
 8003504:	20000080 	.word	0x20000080
 8003508:	20003da0 	.word	0x20003da0
 800350c:	40590000 	.word	0x40590000
 8003510:	20003dc8 	.word	0x20003dc8
 8003514:	20003dd0 	.word	0x20003dd0
		{
			if(historic_largest_TDS[k]  > historic_TDS_max)   		historic_TDS_max 		  = historic_largest_TDS[k];	// find largest and smallest valuesin our data
 8003518:	4a9b      	ldr	r2, [pc, #620]	; (8003788 <isStabalized+0x7a8>)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4413      	add	r3, r2
 8003520:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003524:	4b99      	ldr	r3, [pc, #612]	; (800378c <isStabalized+0x7ac>)
 8003526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352a:	f7fd faaf 	bl	8000a8c <__aeabi_dcmpgt>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <isStabalized+0x566>
 8003534:	4a94      	ldr	r2, [pc, #592]	; (8003788 <isStabalized+0x7a8>)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4413      	add	r3, r2
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	4992      	ldr	r1, [pc, #584]	; (800378c <isStabalized+0x7ac>)
 8003542:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_smallest_TDS[k] < historic_TDS_min)  		historic_TDS_min		  = historic_smallest_TDS[k];
 8003546:	4a92      	ldr	r2, [pc, #584]	; (8003790 <isStabalized+0x7b0>)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003552:	4b90      	ldr	r3, [pc, #576]	; (8003794 <isStabalized+0x7b4>)
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	f7fd fa7a 	bl	8000a50 <__aeabi_dcmplt>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <isStabalized+0x594>
 8003562:	4a8b      	ldr	r2, [pc, #556]	; (8003790 <isStabalized+0x7b0>)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4413      	add	r3, r2
 800356a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356e:	4989      	ldr	r1, [pc, #548]	; (8003794 <isStabalized+0x7b4>)
 8003570:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_largest_pH[k]   > historic_pH_max )     	historic_pH_max  		  = historic_largest_pH[k];
 8003574:	4a88      	ldr	r2, [pc, #544]	; (8003798 <isStabalized+0x7b8>)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4413      	add	r3, r2
 800357c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003580:	4b86      	ldr	r3, [pc, #536]	; (800379c <isStabalized+0x7bc>)
 8003582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003586:	f7fd fa81 	bl	8000a8c <__aeabi_dcmpgt>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <isStabalized+0x5c2>
 8003590:	4a81      	ldr	r2, [pc, #516]	; (8003798 <isStabalized+0x7b8>)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	497f      	ldr	r1, [pc, #508]	; (800379c <isStabalized+0x7bc>)
 800359e:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_smallest_pH[k]  < historic_pH_min )    		historic_pH_min  		  = historic_smallest_pH[k];
 80035a2:	4a7f      	ldr	r2, [pc, #508]	; (80037a0 <isStabalized+0x7c0>)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4413      	add	r3, r2
 80035aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035ae:	4b7d      	ldr	r3, [pc, #500]	; (80037a4 <isStabalized+0x7c4>)
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	f7fd fa4c 	bl	8000a50 <__aeabi_dcmplt>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d008      	beq.n	80035d0 <isStabalized+0x5f0>
 80035be:	4a78      	ldr	r2, [pc, #480]	; (80037a0 <isStabalized+0x7c0>)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ca:	4976      	ldr	r1, [pc, #472]	; (80037a4 <isStabalized+0x7c4>)
 80035cc:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_average_pH[k]   < historic_average_pH_min)  historic_average_pH_min   = historic_average_pH[k];
 80035d0:	4a75      	ldr	r2, [pc, #468]	; (80037a8 <isStabalized+0x7c8>)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4413      	add	r3, r2
 80035d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035dc:	4b73      	ldr	r3, [pc, #460]	; (80037ac <isStabalized+0x7cc>)
 80035de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e2:	f7fd fa35 	bl	8000a50 <__aeabi_dcmplt>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d008      	beq.n	80035fe <isStabalized+0x61e>
 80035ec:	4a6e      	ldr	r2, [pc, #440]	; (80037a8 <isStabalized+0x7c8>)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4413      	add	r3, r2
 80035f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f8:	496c      	ldr	r1, [pc, #432]	; (80037ac <isStabalized+0x7cc>)
 80035fa:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_average_pH[k]   > historic_average_pH_max)  historic_average_pH_max   = historic_average_pH[k];
 80035fe:	4a6a      	ldr	r2, [pc, #424]	; (80037a8 <isStabalized+0x7c8>)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4413      	add	r3, r2
 8003606:	e9d3 0100 	ldrd	r0, r1, [r3]
 800360a:	4b69      	ldr	r3, [pc, #420]	; (80037b0 <isStabalized+0x7d0>)
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	f7fd fa3c 	bl	8000a8c <__aeabi_dcmpgt>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <isStabalized+0x64c>
 800361a:	4a63      	ldr	r2, [pc, #396]	; (80037a8 <isStabalized+0x7c8>)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4413      	add	r3, r2
 8003622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003626:	4962      	ldr	r1, [pc, #392]	; (80037b0 <isStabalized+0x7d0>)
 8003628:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_average_TDS[k]  < historic_average_TDS_min) historic_average_TDS_min  = historic_average_TDS[k];
 800362c:	4a61      	ldr	r2, [pc, #388]	; (80037b4 <isStabalized+0x7d4>)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4413      	add	r3, r2
 8003634:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003638:	4b5f      	ldr	r3, [pc, #380]	; (80037b8 <isStabalized+0x7d8>)
 800363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363e:	f7fd fa07 	bl	8000a50 <__aeabi_dcmplt>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <isStabalized+0x67a>
 8003648:	4a5a      	ldr	r2, [pc, #360]	; (80037b4 <isStabalized+0x7d4>)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	4413      	add	r3, r2
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	4958      	ldr	r1, [pc, #352]	; (80037b8 <isStabalized+0x7d8>)
 8003656:	e9c1 2300 	strd	r2, r3, [r1]
			if(historic_average_TDS[k]  > historic_average_TDS_max) historic_average_TDS_max  = historic_average_TDS[k];
 800365a:	4a56      	ldr	r2, [pc, #344]	; (80037b4 <isStabalized+0x7d4>)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003666:	4b55      	ldr	r3, [pc, #340]	; (80037bc <isStabalized+0x7dc>)
 8003668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366c:	f7fd fa0e 	bl	8000a8c <__aeabi_dcmpgt>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d008      	beq.n	8003688 <isStabalized+0x6a8>
 8003676:	4a4f      	ldr	r2, [pc, #316]	; (80037b4 <isStabalized+0x7d4>)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4413      	add	r3, r2
 800367e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003682:	494e      	ldr	r1, [pc, #312]	; (80037bc <isStabalized+0x7dc>)
 8003684:	e9c1 2300 	strd	r2, r3, [r1]

			slope_factor_average_TDS += (historic_average_TDS[k]-historic_average_TDS[k-1]);
 8003688:	4a4a      	ldr	r2, [pc, #296]	; (80037b4 <isStabalized+0x7d4>)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4413      	add	r3, r2
 8003690:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	3b01      	subs	r3, #1
 8003698:	4a46      	ldr	r2, [pc, #280]	; (80037b4 <isStabalized+0x7d4>)
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	4413      	add	r3, r2
 800369e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a2:	f7fc fdab 	bl	80001fc <__aeabi_dsub>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4610      	mov	r0, r2
 80036ac:	4619      	mov	r1, r3
 80036ae:	4b44      	ldr	r3, [pc, #272]	; (80037c0 <isStabalized+0x7e0>)
 80036b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b4:	f7fc fda4 	bl	8000200 <__adddf3>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4940      	ldr	r1, [pc, #256]	; (80037c0 <isStabalized+0x7e0>)
 80036be:	e9c1 2300 	strd	r2, r3, [r1]
			slope_factor_average_ph  += (historic_average_pH[k]-historic_average_pH[k-1]);
 80036c2:	4a39      	ldr	r2, [pc, #228]	; (80037a8 <isStabalized+0x7c8>)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4413      	add	r3, r2
 80036ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	4a35      	ldr	r2, [pc, #212]	; (80037a8 <isStabalized+0x7c8>)
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	4413      	add	r3, r2
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	f7fc fd8e 	bl	80001fc <__aeabi_dsub>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4610      	mov	r0, r2
 80036e6:	4619      	mov	r1, r3
 80036e8:	4b36      	ldr	r3, [pc, #216]	; (80037c4 <isStabalized+0x7e4>)
 80036ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ee:	f7fc fd87 	bl	8000200 <__adddf3>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4933      	ldr	r1, [pc, #204]	; (80037c4 <isStabalized+0x7e4>)
 80036f8:	e9c1 2300 	strd	r2, r3, [r1]
		for(int k = historic_sample_index-20; k<historic_sample_index; k++) 								// if we have at-least 5 samples find the max and min to calculate range of the last 5 runs
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	3301      	adds	r3, #1
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	4b31      	ldr	r3, [pc, #196]	; (80037c8 <isStabalized+0x7e8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	f6ff af05 	blt.w	8003518 <isStabalized+0x538>
		}
		historic_range_pH  = historic_pH_max  - historic_pH_min;
 800370e:	4b23      	ldr	r3, [pc, #140]	; (800379c <isStabalized+0x7bc>)
 8003710:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003714:	4b23      	ldr	r3, [pc, #140]	; (80037a4 <isStabalized+0x7c4>)
 8003716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371a:	f7fc fd6f 	bl	80001fc <__aeabi_dsub>
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	492a      	ldr	r1, [pc, #168]	; (80037cc <isStabalized+0x7ec>)
 8003724:	e9c1 2300 	strd	r2, r3, [r1]
		historic_range_TDS = historic_TDS_max - historic_TDS_min;
 8003728:	4b18      	ldr	r3, [pc, #96]	; (800378c <isStabalized+0x7ac>)
 800372a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800372e:	4b19      	ldr	r3, [pc, #100]	; (8003794 <isStabalized+0x7b4>)
 8003730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003734:	f7fc fd62 	bl	80001fc <__aeabi_dsub>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4924      	ldr	r1, [pc, #144]	; (80037d0 <isStabalized+0x7f0>)
 800373e:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_pH_range  = historic_average_pH_max  - historic_average_pH_min;
 8003742:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <isStabalized+0x7d0>)
 8003744:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003748:	4b18      	ldr	r3, [pc, #96]	; (80037ac <isStabalized+0x7cc>)
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	f7fc fd55 	bl	80001fc <__aeabi_dsub>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	491f      	ldr	r1, [pc, #124]	; (80037d4 <isStabalized+0x7f4>)
 8003758:	e9c1 2300 	strd	r2, r3, [r1]
		historic_average_TDS_range = historic_average_TDS_max - historic_average_TDS_min;
 800375c:	4b17      	ldr	r3, [pc, #92]	; (80037bc <isStabalized+0x7dc>)
 800375e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003762:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <isStabalized+0x7d8>)
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	f7fc fd48 	bl	80001fc <__aeabi_dsub>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4919      	ldr	r1, [pc, #100]	; (80037d8 <isStabalized+0x7f8>)
 8003772:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(run_again != 2 && ( slope_factor_average_TDS > 1.5 ||  slope_factor_average_TDS < -1.5 || slope_factor_average_ph > 0.01 || slope_factor_average_ph < -0.01 || historic_sample_index <= 20 || TDS_range > 10.5 || pH_range > 0.1 || historic_average_pH_range > 0.05 || historic_average_pH_range < -0.05  || historic_range_pH > 0.1 || historic_range_pH < -0.1 || historic_range_TDS > 25 || historic_range_TDS < -25 || historic_average_TDS_range > 4.0 || historic_average_TDS_range < -4.0))
 8003776:	4b19      	ldr	r3, [pc, #100]	; (80037dc <isStabalized+0x7fc>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b02      	cmp	r3, #2
 800377c:	f000 80d9 	beq.w	8003932 <isStabalized+0x952>
 8003780:	4b0f      	ldr	r3, [pc, #60]	; (80037c0 <isStabalized+0x7e0>)
 8003782:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003786:	e02b      	b.n	80037e0 <isStabalized+0x800>
 8003788:	20002468 	.word	0x20002468
 800378c:	20003da8 	.word	0x20003da8
 8003790:	20002aa8 	.word	0x20002aa8
 8003794:	20003dc0 	.word	0x20003dc0
 8003798:	200017e8 	.word	0x200017e8
 800379c:	20003db0 	.word	0x20003db0
 80037a0:	20001e28 	.word	0x20001e28
 80037a4:	20003db8 	.word	0x20003db8
 80037a8:	200030e8 	.word	0x200030e8
 80037ac:	20000078 	.word	0x20000078
 80037b0:	20003d98 	.word	0x20003d98
 80037b4:	20003728 	.word	0x20003728
 80037b8:	20000080 	.word	0x20000080
 80037bc:	20003da0 	.word	0x20003da0
 80037c0:	20003dc8 	.word	0x20003dc8
 80037c4:	20003dd0 	.word	0x20003dd0
 80037c8:	20004030 	.word	0x20004030
 80037cc:	20003d78 	.word	0x20003d78
 80037d0:	20003d80 	.word	0x20003d80
 80037d4:	20003d68 	.word	0x20003d68
 80037d8:	20003d70 	.word	0x20003d70
 80037dc:	200000a4 	.word	0x200000a4
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	4b72      	ldr	r3, [pc, #456]	; (80039b0 <isStabalized+0x9d0>)
 80037e6:	f7fd f951 	bl	8000a8c <__aeabi_dcmpgt>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f040 8094 	bne.w	800391a <isStabalized+0x93a>
 80037f2:	4b70      	ldr	r3, [pc, #448]	; (80039b4 <isStabalized+0x9d4>)
 80037f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	4b6e      	ldr	r3, [pc, #440]	; (80039b8 <isStabalized+0x9d8>)
 80037fe:	f7fd f927 	bl	8000a50 <__aeabi_dcmplt>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	f040 8088 	bne.w	800391a <isStabalized+0x93a>
 800380a:	4b6c      	ldr	r3, [pc, #432]	; (80039bc <isStabalized+0x9dc>)
 800380c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003810:	a35b      	add	r3, pc, #364	; (adr r3, 8003980 <isStabalized+0x9a0>)
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	f7fd f939 	bl	8000a8c <__aeabi_dcmpgt>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d17c      	bne.n	800391a <isStabalized+0x93a>
 8003820:	4b66      	ldr	r3, [pc, #408]	; (80039bc <isStabalized+0x9dc>)
 8003822:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003826:	a358      	add	r3, pc, #352	; (adr r3, 8003988 <isStabalized+0x9a8>)
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f7fd f910 	bl	8000a50 <__aeabi_dcmplt>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d171      	bne.n	800391a <isStabalized+0x93a>
 8003836:	4b62      	ldr	r3, [pc, #392]	; (80039c0 <isStabalized+0x9e0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b14      	cmp	r3, #20
 800383c:	dd6d      	ble.n	800391a <isStabalized+0x93a>
 800383e:	4b61      	ldr	r3, [pc, #388]	; (80039c4 <isStabalized+0x9e4>)
 8003840:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	4b5f      	ldr	r3, [pc, #380]	; (80039c8 <isStabalized+0x9e8>)
 800384a:	f7fd f91f 	bl	8000a8c <__aeabi_dcmpgt>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d162      	bne.n	800391a <isStabalized+0x93a>
 8003854:	4b5d      	ldr	r3, [pc, #372]	; (80039cc <isStabalized+0x9ec>)
 8003856:	e9d3 0100 	ldrd	r0, r1, [r3]
 800385a:	a34d      	add	r3, pc, #308	; (adr r3, 8003990 <isStabalized+0x9b0>)
 800385c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003860:	f7fd f914 	bl	8000a8c <__aeabi_dcmpgt>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d157      	bne.n	800391a <isStabalized+0x93a>
 800386a:	4b59      	ldr	r3, [pc, #356]	; (80039d0 <isStabalized+0x9f0>)
 800386c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003870:	a349      	add	r3, pc, #292	; (adr r3, 8003998 <isStabalized+0x9b8>)
 8003872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003876:	f7fd f909 	bl	8000a8c <__aeabi_dcmpgt>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d14c      	bne.n	800391a <isStabalized+0x93a>
 8003880:	4b53      	ldr	r3, [pc, #332]	; (80039d0 <isStabalized+0x9f0>)
 8003882:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003886:	a346      	add	r3, pc, #280	; (adr r3, 80039a0 <isStabalized+0x9c0>)
 8003888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388c:	f7fd f8e0 	bl	8000a50 <__aeabi_dcmplt>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d141      	bne.n	800391a <isStabalized+0x93a>
 8003896:	4b4f      	ldr	r3, [pc, #316]	; (80039d4 <isStabalized+0x9f4>)
 8003898:	e9d3 0100 	ldrd	r0, r1, [r3]
 800389c:	a33c      	add	r3, pc, #240	; (adr r3, 8003990 <isStabalized+0x9b0>)
 800389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a2:	f7fd f8f3 	bl	8000a8c <__aeabi_dcmpgt>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d136      	bne.n	800391a <isStabalized+0x93a>
 80038ac:	4b49      	ldr	r3, [pc, #292]	; (80039d4 <isStabalized+0x9f4>)
 80038ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038b2:	a33d      	add	r3, pc, #244	; (adr r3, 80039a8 <isStabalized+0x9c8>)
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	f7fd f8ca 	bl	8000a50 <__aeabi_dcmplt>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d12b      	bne.n	800391a <isStabalized+0x93a>
 80038c2:	4b45      	ldr	r3, [pc, #276]	; (80039d8 <isStabalized+0x9f8>)
 80038c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	4b43      	ldr	r3, [pc, #268]	; (80039dc <isStabalized+0x9fc>)
 80038ce:	f7fd f8dd 	bl	8000a8c <__aeabi_dcmpgt>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d120      	bne.n	800391a <isStabalized+0x93a>
 80038d8:	4b3f      	ldr	r3, [pc, #252]	; (80039d8 <isStabalized+0x9f8>)
 80038da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	4b3f      	ldr	r3, [pc, #252]	; (80039e0 <isStabalized+0xa00>)
 80038e4:	f7fd f8b4 	bl	8000a50 <__aeabi_dcmplt>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d115      	bne.n	800391a <isStabalized+0x93a>
 80038ee:	4b3d      	ldr	r3, [pc, #244]	; (80039e4 <isStabalized+0xa04>)
 80038f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	4b3b      	ldr	r3, [pc, #236]	; (80039e8 <isStabalized+0xa08>)
 80038fa:	f7fd f8c7 	bl	8000a8c <__aeabi_dcmpgt>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10a      	bne.n	800391a <isStabalized+0x93a>
 8003904:	4b37      	ldr	r3, [pc, #220]	; (80039e4 <isStabalized+0xa04>)
 8003906:	e9d3 0100 	ldrd	r0, r1, [r3]
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	4b37      	ldr	r3, [pc, #220]	; (80039ec <isStabalized+0xa0c>)
 8003910:	f7fd f89e 	bl	8000a50 <__aeabi_dcmplt>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <isStabalized+0x952>
	{
 		valid = 0;
 800391a:	4b35      	ldr	r3, [pc, #212]	; (80039f0 <isStabalized+0xa10>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
 		recheck_count++;
 8003920:	4b34      	ldr	r3, [pc, #208]	; (80039f4 <isStabalized+0xa14>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3301      	adds	r3, #1
 8003926:	4a33      	ldr	r2, [pc, #204]	; (80039f4 <isStabalized+0xa14>)
 8003928:	6013      	str	r3, [r2, #0]
 		run_again = 2; 				// if the ph or TDS values are still changing check again, or the smallest value is at the beginning of the array, or the largest value is at the end of the array
 800392a:	4b33      	ldr	r3, [pc, #204]	; (80039f8 <isStabalized+0xa18>)
 800392c:	2202      	movs	r2, #2
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	e012      	b.n	8003958 <isStabalized+0x978>
	}
	else if(run_again == 1)		    // we are stabilized however, the system could still be changing so we need to check how many times we re-sampled the water if its > 1 check until its 1
 8003932:	4b31      	ldr	r3, [pc, #196]	; (80039f8 <isStabalized+0xa18>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d10e      	bne.n	8003958 <isStabalized+0x978>
	{
		run_again = 0; 				// set run again to 0(no) however, if our validity is not high enough we will set run_again to 2(yes)
 800393a:	4b2f      	ldr	r3, [pc, #188]	; (80039f8 <isStabalized+0xa18>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
		valid++;
 8003940:	4b2b      	ldr	r3, [pc, #172]	; (80039f0 <isStabalized+0xa10>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3301      	adds	r3, #1
 8003946:	4a2a      	ldr	r2, [pc, #168]	; (80039f0 <isStabalized+0xa10>)
 8003948:	6013      	str	r3, [r2, #0]
		if(valid < 10) run_again = 2;			// if we have not completed three valid runs in a row re-run
 800394a:	4b29      	ldr	r3, [pc, #164]	; (80039f0 <isStabalized+0xa10>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b09      	cmp	r3, #9
 8003950:	dc02      	bgt.n	8003958 <isStabalized+0x978>
 8003952:	4b29      	ldr	r3, [pc, #164]	; (80039f8 <isStabalized+0xa18>)
 8003954:	2202      	movs	r2, #2
 8003956:	601a      	str	r2, [r3, #0]
	}
	if(run_again == 1) run_again = 0;
 8003958:	4b27      	ldr	r3, [pc, #156]	; (80039f8 <isStabalized+0xa18>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d103      	bne.n	8003968 <isStabalized+0x988>
 8003960:	4b25      	ldr	r3, [pc, #148]	; (80039f8 <isStabalized+0xa18>)
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]
	else if (run_again == 2) run_again = 1;
}
 8003966:	e006      	b.n	8003976 <isStabalized+0x996>
	else if (run_again == 2) run_again = 1;
 8003968:	4b23      	ldr	r3, [pc, #140]	; (80039f8 <isStabalized+0xa18>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b02      	cmp	r3, #2
 800396e:	d102      	bne.n	8003976 <isStabalized+0x996>
 8003970:	4b21      	ldr	r3, [pc, #132]	; (80039f8 <isStabalized+0xa18>)
 8003972:	2201      	movs	r2, #1
 8003974:	601a      	str	r2, [r3, #0]
}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bdb0      	pop	{r4, r5, r7, pc}
 800397e:	bf00      	nop
 8003980:	47ae147b 	.word	0x47ae147b
 8003984:	3f847ae1 	.word	0x3f847ae1
 8003988:	47ae147b 	.word	0x47ae147b
 800398c:	bf847ae1 	.word	0xbf847ae1
 8003990:	9999999a 	.word	0x9999999a
 8003994:	3fb99999 	.word	0x3fb99999
 8003998:	9999999a 	.word	0x9999999a
 800399c:	3fa99999 	.word	0x3fa99999
 80039a0:	9999999a 	.word	0x9999999a
 80039a4:	bfa99999 	.word	0xbfa99999
 80039a8:	9999999a 	.word	0x9999999a
 80039ac:	bfb99999 	.word	0xbfb99999
 80039b0:	3ff80000 	.word	0x3ff80000
 80039b4:	20003dc8 	.word	0x20003dc8
 80039b8:	bff80000 	.word	0xbff80000
 80039bc:	20003dd0 	.word	0x20003dd0
 80039c0:	20004030 	.word	0x20004030
 80039c4:	20003fd8 	.word	0x20003fd8
 80039c8:	40250000 	.word	0x40250000
 80039cc:	20003fe0 	.word	0x20003fe0
 80039d0:	20003d68 	.word	0x20003d68
 80039d4:	20003d78 	.word	0x20003d78
 80039d8:	20003d80 	.word	0x20003d80
 80039dc:	40390000 	.word	0x40390000
 80039e0:	c0390000 	.word	0xc0390000
 80039e4:	20003d70 	.word	0x20003d70
 80039e8:	40100000 	.word	0x40100000
 80039ec:	c0100000 	.word	0xc0100000
 80039f0:	2000402c 	.word	0x2000402c
 80039f4:	20004028 	.word	0x20004028
 80039f8:	200000a4 	.word	0x200000a4

080039fc <waitForWaterToStabilize>:

int waitForWaterToStabilize() // Returns the total time in seconds
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
	getTime();
 8003a00:	f7fd fc14 	bl	800122c <getTime>
	eq_start_time_sec = sTime.Seconds + sTime.Minutes*60;
 8003a04:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <waitForWaterToStabilize+0x9c>)
 8003a06:	789b      	ldrb	r3, [r3, #2]
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <waitForWaterToStabilize+0x9c>)
 8003a0c:	785b      	ldrb	r3, [r3, #1]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	4613      	mov	r3, r2
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	4a20      	ldr	r2, [pc, #128]	; (8003a9c <waitForWaterToStabilize+0xa0>)
 8003a1c:	6013      	str	r3, [r2, #0]

	while(run_again > 0)
 8003a1e:	e005      	b.n	8003a2c <waitForWaterToStabilize+0x30>
	{
		isStabalized();// if we are not stabilized wait until we are
 8003a20:	f7ff fade 	bl	8002fe0 <isStabalized>
		osDelay(2000);
 8003a24:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003a28:	f00e fee7 	bl	80127fa <osDelay>
	while(run_again > 0)
 8003a2c:	4b1c      	ldr	r3, [pc, #112]	; (8003aa0 <waitForWaterToStabilize+0xa4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	dcf5      	bgt.n	8003a20 <waitForWaterToStabilize+0x24>
	}
	getTime();
 8003a34:	f7fd fbfa 	bl	800122c <getTime>
	eq_end_time_sec = sTime.Seconds + sTime.Minutes*60;
 8003a38:	4b17      	ldr	r3, [pc, #92]	; (8003a98 <waitForWaterToStabilize+0x9c>)
 8003a3a:	789b      	ldrb	r3, [r3, #2]
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4b16      	ldr	r3, [pc, #88]	; (8003a98 <waitForWaterToStabilize+0x9c>)
 8003a40:	785b      	ldrb	r3, [r3, #1]
 8003a42:	461a      	mov	r2, r3
 8003a44:	4613      	mov	r3, r2
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	4a15      	ldr	r2, [pc, #84]	; (8003aa4 <waitForWaterToStabilize+0xa8>)
 8003a50:	6013      	str	r3, [r2, #0]
	if(eq_start_time_sec > eq_end_time_sec) total_time_seconds = (3600-eq_start_time_sec)+eq_end_time_sec;	// if seconds rolled over we cannot just subtract since we will get a negative
 8003a52:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <waitForWaterToStabilize+0xa0>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <waitForWaterToStabilize+0xa8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	dd09      	ble.n	8003a72 <waitForWaterToStabilize+0x76>
 8003a5e:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <waitForWaterToStabilize+0xa0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f5c3 6261 	rsb	r2, r3, #3600	; 0xe10
 8003a66:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <waitForWaterToStabilize+0xa8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	4a0e      	ldr	r2, [pc, #56]	; (8003aa8 <waitForWaterToStabilize+0xac>)
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	e006      	b.n	8003a80 <waitForWaterToStabilize+0x84>
	else total_time_seconds = eq_end_time_sec-eq_start_time_sec;	// else we did not roll over so total seconds is end time - start time
 8003a72:	4b0c      	ldr	r3, [pc, #48]	; (8003aa4 <waitForWaterToStabilize+0xa8>)
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <waitForWaterToStabilize+0xa0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <waitForWaterToStabilize+0xac>)
 8003a7e:	6013      	str	r3, [r2, #0]

	stability_value = 0;
 8003a80:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <waitForWaterToStabilize+0xb0>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
	recheck_count = 0;
 8003a86:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <waitForWaterToStabilize+0xb4>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
	resetStabilityVars();
 8003a8c:	f7ff fa32 	bl	8002ef4 <resetStabilityVars>
	return (total_time_seconds);
 8003a90:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <waitForWaterToStabilize+0xac>)
 8003a92:	681b      	ldr	r3, [r3, #0]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	20005400 	.word	0x20005400
 8003a9c:	20004018 	.word	0x20004018
 8003aa0:	200000a4 	.word	0x200000a4
 8003aa4:	20004014 	.word	0x20004014
 8003aa8:	20004020 	.word	0x20004020
 8003aac:	2000009c 	.word	0x2000009c
 8003ab0:	20004028 	.word	0x20004028

08003ab4 <waterTempControl>:

void waterTempControl()
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
	temp_up = 'n';
 8003ab8:	4b74      	ldr	r3, [pc, #464]	; (8003c8c <waterTempControl+0x1d8>)
 8003aba:	226e      	movs	r2, #110	; 0x6e
 8003abc:	701a      	strb	r2, [r3, #0]
	temp_down = 'n';
 8003abe:	4b74      	ldr	r3, [pc, #464]	; (8003c90 <waterTempControl+0x1dc>)
 8003ac0:	226e      	movs	r2, #110	; 0x6e
 8003ac2:	701a      	strb	r2, [r3, #0]

	if(setting_water_temp == 'n')	// if we are not changing the pH or nutrient level, check to see if we are out of bounds
 8003ac4:	4b73      	ldr	r3, [pc, #460]	; (8003c94 <waterTempControl+0x1e0>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	2b6e      	cmp	r3, #110	; 0x6e
 8003aca:	d145      	bne.n	8003b58 <waterTempControl+0xa4>
	{
		if(     water_temp  > water_temp_set_point     &&     (water_temp - water_temp_bounds_check) > water_temp_set_point)   				temp_down = 'y'; 			// if we are over our set point dose the water with pH-down
 8003acc:	4b72      	ldr	r3, [pc, #456]	; (8003c98 <waterTempControl+0x1e4>)
 8003ace:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ad2:	4b72      	ldr	r3, [pc, #456]	; (8003c9c <waterTempControl+0x1e8>)
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	f7fc ffd8 	bl	8000a8c <__aeabi_dcmpgt>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d017      	beq.n	8003b12 <waterTempControl+0x5e>
 8003ae2:	4b6d      	ldr	r3, [pc, #436]	; (8003c98 <waterTempControl+0x1e4>)
 8003ae4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ae8:	4b6d      	ldr	r3, [pc, #436]	; (8003ca0 <waterTempControl+0x1ec>)
 8003aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aee:	f7fc fb85 	bl	80001fc <__aeabi_dsub>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4610      	mov	r0, r2
 8003af8:	4619      	mov	r1, r3
 8003afa:	4b68      	ldr	r3, [pc, #416]	; (8003c9c <waterTempControl+0x1e8>)
 8003afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b00:	f7fc ffc4 	bl	8000a8c <__aeabi_dcmpgt>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <waterTempControl+0x5e>
 8003b0a:	4b61      	ldr	r3, [pc, #388]	; (8003c90 <waterTempControl+0x1dc>)
 8003b0c:	2279      	movs	r2, #121	; 0x79
 8003b0e:	701a      	strb	r2, [r3, #0]
 8003b10:	e067      	b.n	8003be2 <waterTempControl+0x12e>
		else if(water_temp  < water_temp_set_point 	   &&     (water_temp + water_temp_bounds_check) < water_temp_set_point)  				temp_up = 'y'; 				// if we are under our set point dose the water with pH-up
 8003b12:	4b61      	ldr	r3, [pc, #388]	; (8003c98 <waterTempControl+0x1e4>)
 8003b14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b18:	4b60      	ldr	r3, [pc, #384]	; (8003c9c <waterTempControl+0x1e8>)
 8003b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1e:	f7fc ff97 	bl	8000a50 <__aeabi_dcmplt>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d05c      	beq.n	8003be2 <waterTempControl+0x12e>
 8003b28:	4b5b      	ldr	r3, [pc, #364]	; (8003c98 <waterTempControl+0x1e4>)
 8003b2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b2e:	4b5c      	ldr	r3, [pc, #368]	; (8003ca0 <waterTempControl+0x1ec>)
 8003b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b34:	f7fc fb64 	bl	8000200 <__adddf3>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4b56      	ldr	r3, [pc, #344]	; (8003c9c <waterTempControl+0x1e8>)
 8003b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b46:	f7fc ff83 	bl	8000a50 <__aeabi_dcmplt>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d048      	beq.n	8003be2 <waterTempControl+0x12e>
 8003b50:	4b4e      	ldr	r3, [pc, #312]	; (8003c8c <waterTempControl+0x1d8>)
 8003b52:	2279      	movs	r2, #121	; 0x79
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	e044      	b.n	8003be2 <waterTempControl+0x12e>
	}
	else	// else we are setting the pH so reduce the pH bounds to accurately set the value
	{
		if(     water_temp  > water_temp_set_point     &&     (water_temp - water_temp_bounds_set) > water_temp_set_point)   				temp_down = 'y'; 			// if we are over our set point dose the water with pH-down
 8003b58:	4b4f      	ldr	r3, [pc, #316]	; (8003c98 <waterTempControl+0x1e4>)
 8003b5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b5e:	4b4f      	ldr	r3, [pc, #316]	; (8003c9c <waterTempControl+0x1e8>)
 8003b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b64:	f7fc ff92 	bl	8000a8c <__aeabi_dcmpgt>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d017      	beq.n	8003b9e <waterTempControl+0xea>
 8003b6e:	4b4a      	ldr	r3, [pc, #296]	; (8003c98 <waterTempControl+0x1e4>)
 8003b70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b74:	4b4b      	ldr	r3, [pc, #300]	; (8003ca4 <waterTempControl+0x1f0>)
 8003b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7a:	f7fc fb3f 	bl	80001fc <__aeabi_dsub>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4610      	mov	r0, r2
 8003b84:	4619      	mov	r1, r3
 8003b86:	4b45      	ldr	r3, [pc, #276]	; (8003c9c <waterTempControl+0x1e8>)
 8003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8c:	f7fc ff7e 	bl	8000a8c <__aeabi_dcmpgt>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <waterTempControl+0xea>
 8003b96:	4b3e      	ldr	r3, [pc, #248]	; (8003c90 <waterTempControl+0x1dc>)
 8003b98:	2279      	movs	r2, #121	; 0x79
 8003b9a:	701a      	strb	r2, [r3, #0]
 8003b9c:	e021      	b.n	8003be2 <waterTempControl+0x12e>
		else if(water_temp  < water_temp_set_point 	   &&     (water_temp + water_temp_bounds_set) < water_temp_set_point)  				temp_up = 'y'; 				// if we are under our set point dose the water with pH-up
 8003b9e:	4b3e      	ldr	r3, [pc, #248]	; (8003c98 <waterTempControl+0x1e4>)
 8003ba0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ba4:	4b3d      	ldr	r3, [pc, #244]	; (8003c9c <waterTempControl+0x1e8>)
 8003ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003baa:	f7fc ff51 	bl	8000a50 <__aeabi_dcmplt>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d016      	beq.n	8003be2 <waterTempControl+0x12e>
 8003bb4:	4b38      	ldr	r3, [pc, #224]	; (8003c98 <waterTempControl+0x1e4>)
 8003bb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bba:	4b3a      	ldr	r3, [pc, #232]	; (8003ca4 <waterTempControl+0x1f0>)
 8003bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc0:	f7fc fb1e 	bl	8000200 <__adddf3>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4610      	mov	r0, r2
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4b33      	ldr	r3, [pc, #204]	; (8003c9c <waterTempControl+0x1e8>)
 8003bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd2:	f7fc ff3d 	bl	8000a50 <__aeabi_dcmplt>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <waterTempControl+0x12e>
 8003bdc:	4b2b      	ldr	r3, [pc, #172]	; (8003c8c <waterTempControl+0x1d8>)
 8003bde:	2279      	movs	r2, #121	; 0x79
 8003be0:	701a      	strb	r2, [r3, #0]
	}

	if((temp_up == 'y' || temp_down == 'y'))				// if we are adding pH-up/down or nutrient, signify what we are setting so we can change the accuracy range
 8003be2:	4b2a      	ldr	r3, [pc, #168]	; (8003c8c <waterTempControl+0x1d8>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b79      	cmp	r3, #121	; 0x79
 8003be8:	d003      	beq.n	8003bf2 <waterTempControl+0x13e>
 8003bea:	4b29      	ldr	r3, [pc, #164]	; (8003c90 <waterTempControl+0x1dc>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b79      	cmp	r3, #121	; 0x79
 8003bf0:	d103      	bne.n	8003bfa <waterTempControl+0x146>
	{
		setting_water_temp = 'y';
 8003bf2:	4b28      	ldr	r3, [pc, #160]	; (8003c94 <waterTempControl+0x1e0>)
 8003bf4:	2279      	movs	r2, #121	; 0x79
 8003bf6:	701a      	strb	r2, [r3, #0]
 8003bf8:	e002      	b.n	8003c00 <waterTempControl+0x14c>
	}
	else setting_water_temp = 'n';
 8003bfa:	4b26      	ldr	r3, [pc, #152]	; (8003c94 <waterTempControl+0x1e0>)
 8003bfc:	226e      	movs	r2, #110	; 0x6e
 8003bfe:	701a      	strb	r2, [r3, #0]

	if(temp_up == 'y' && heat_on == 'n')
 8003c00:	4b22      	ldr	r3, [pc, #136]	; (8003c8c <waterTempControl+0x1d8>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b79      	cmp	r3, #121	; 0x79
 8003c06:	d111      	bne.n	8003c2c <waterTempControl+0x178>
 8003c08:	4b27      	ldr	r3, [pc, #156]	; (8003ca8 <waterTempControl+0x1f4>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b6e      	cmp	r3, #110	; 0x6e
 8003c0e:	d10d      	bne.n	8003c2c <waterTempControl+0x178>
	{
		heatOn();	// if we need heat the water turn on the heater
 8003c10:	f7fd fcf0 	bl	80015f4 <heatOn>
		setFanSpeed(3.5,3.5,3.5);
 8003c14:	4a25      	ldr	r2, [pc, #148]	; (8003cac <waterTempControl+0x1f8>)
 8003c16:	4925      	ldr	r1, [pc, #148]	; (8003cac <waterTempControl+0x1f8>)
 8003c18:	4824      	ldr	r0, [pc, #144]	; (8003cac <waterTempControl+0x1f8>)
 8003c1a:	f7fd fca7 	bl	800156c <setFanSpeed>
		heat_on = 'y';
 8003c1e:	4b22      	ldr	r3, [pc, #136]	; (8003ca8 <waterTempControl+0x1f4>)
 8003c20:	2279      	movs	r2, #121	; 0x79
 8003c22:	701a      	strb	r2, [r3, #0]
		cool_on = 'n';
 8003c24:	4b22      	ldr	r3, [pc, #136]	; (8003cb0 <waterTempControl+0x1fc>)
 8003c26:	226e      	movs	r2, #110	; 0x6e
 8003c28:	701a      	strb	r2, [r3, #0]
 8003c2a:	e02c      	b.n	8003c86 <waterTempControl+0x1d2>
	}
	else if(temp_down == 'y' && cool_on == 'n')
 8003c2c:	4b18      	ldr	r3, [pc, #96]	; (8003c90 <waterTempControl+0x1dc>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b79      	cmp	r3, #121	; 0x79
 8003c32:	d111      	bne.n	8003c58 <waterTempControl+0x1a4>
 8003c34:	4b1e      	ldr	r3, [pc, #120]	; (8003cb0 <waterTempControl+0x1fc>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b6e      	cmp	r3, #110	; 0x6e
 8003c3a:	d10d      	bne.n	8003c58 <waterTempControl+0x1a4>
	{
		coolOn();	// if we need cool the water turn on the cooler
 8003c3c:	f7fd fcfc 	bl	8001638 <coolOn>
		setFanSpeed(3.5,3.5,2.5);
 8003c40:	4a1c      	ldr	r2, [pc, #112]	; (8003cb4 <waterTempControl+0x200>)
 8003c42:	491a      	ldr	r1, [pc, #104]	; (8003cac <waterTempControl+0x1f8>)
 8003c44:	4819      	ldr	r0, [pc, #100]	; (8003cac <waterTempControl+0x1f8>)
 8003c46:	f7fd fc91 	bl	800156c <setFanSpeed>
		cool_on = 'y';
 8003c4a:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <waterTempControl+0x1fc>)
 8003c4c:	2279      	movs	r2, #121	; 0x79
 8003c4e:	701a      	strb	r2, [r3, #0]
		heat_on = 'n';
 8003c50:	4b15      	ldr	r3, [pc, #84]	; (8003ca8 <waterTempControl+0x1f4>)
 8003c52:	226e      	movs	r2, #110	; 0x6e
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e016      	b.n	8003c86 <waterTempControl+0x1d2>
	}
	else if(temp_up == 'n' && temp_down == 'n')
 8003c58:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <waterTempControl+0x1d8>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b6e      	cmp	r3, #110	; 0x6e
 8003c5e:	d112      	bne.n	8003c86 <waterTempControl+0x1d2>
 8003c60:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <waterTempControl+0x1dc>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b6e      	cmp	r3, #110	; 0x6e
 8003c66:	d10e      	bne.n	8003c86 <waterTempControl+0x1d2>
	{
		heat_on = 'n';
 8003c68:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <waterTempControl+0x1f4>)
 8003c6a:	226e      	movs	r2, #110	; 0x6e
 8003c6c:	701a      	strb	r2, [r3, #0]
		cool_on = 'n';
 8003c6e:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <waterTempControl+0x1fc>)
 8003c70:	226e      	movs	r2, #110	; 0x6e
 8003c72:	701a      	strb	r2, [r3, #0]
		heatCoolOff();
 8003c74:	f7fd fcd4 	bl	8001620 <heatCoolOff>
		setFanSpeed(3.5,3.5,0);
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	490b      	ldr	r1, [pc, #44]	; (8003cac <waterTempControl+0x1f8>)
 8003c7e:	480b      	ldr	r0, [pc, #44]	; (8003cac <waterTempControl+0x1f8>)
 8003c80:	f7fd fc74 	bl	800156c <setFanSpeed>
	}
}
 8003c84:	e7ff      	b.n	8003c86 <waterTempControl+0x1d2>
 8003c86:	bf00      	nop
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	200001d1 	.word	0x200001d1
 8003c90:	200053e4 	.word	0x200053e4
 8003c94:	200001ca 	.word	0x200001ca
 8003c98:	200017d0 	.word	0x200017d0
 8003c9c:	20000040 	.word	0x20000040
 8003ca0:	20000050 	.word	0x20000050
 8003ca4:	20000048 	.word	0x20000048
 8003ca8:	200001c8 	.word	0x200001c8
 8003cac:	40600000 	.word	0x40600000
 8003cb0:	200001c9 	.word	0x200001c9
 8003cb4:	40200000 	.word	0x40200000

08003cb8 <systemControl>:

void systemControl()
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af02      	add	r7, sp, #8

	if(run_once == 'n')
 8003cbe:	4b13      	ldr	r3, [pc, #76]	; (8003d0c <systemControl+0x54>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b6e      	cmp	r3, #110	; 0x6e
 8003cc4:	d11a      	bne.n	8003cfc <systemControl+0x44>
	{
		//doseWater(100,100,100);
		run_once = 'y';
 8003cc6:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <systemControl+0x54>)
 8003cc8:	2279      	movs	r2, #121	; 0x79
 8003cca:	701a      	strb	r2, [r3, #0]
		fanOn();
 8003ccc:	f7fd fbae 	bl	800142c <fanOn>
		setFanSpeed(3.5,3.5,0);
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	490e      	ldr	r1, [pc, #56]	; (8003d10 <systemControl+0x58>)
 8003cd6:	480e      	ldr	r0, [pc, #56]	; (8003d10 <systemControl+0x58>)
 8003cd8:	f7fd fc48 	bl	800156c <setFanSpeed>
		setTimeDate(0x01, 0x08, 0x22, 0x19, 0x09, 0x00); // MUST BE HEX BUT NOT CONVERTED i,e,(the 22 day of the month is represented as 0x22 NOT 0x16) (month, day, year, hours, min, sec)
 8003cdc:	2300      	movs	r3, #0
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	2309      	movs	r3, #9
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	2319      	movs	r3, #25
 8003ce6:	2222      	movs	r2, #34	; 0x22
 8003ce8:	2108      	movs	r1, #8
 8003cea:	2001      	movs	r0, #1
 8003cec:	f7fd fab2 	bl	8001254 <setTimeDate>
		setLightCyle(19, 9, 19, 10); 			   		 // MUST BE INT (start hour, start min, start sec, end hour, end min)
 8003cf0:	230a      	movs	r3, #10
 8003cf2:	2213      	movs	r2, #19
 8003cf4:	2109      	movs	r1, #9
 8003cf6:	2013      	movs	r0, #19
 8003cf8:	f000 f80c 	bl	8003d14 <setLightCyle>
	}
	getSensorValues();
 8003cfc:	f001 fb52 	bl	80053a4 <getSensorValues>
	balancePhAndNutrient();
 8003d00:	f7fe fca2 	bl	8002648 <balancePhAndNutrient>
}
 8003d04:	bf00      	nop
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	200001cb 	.word	0x200001cb
 8003d10:	40600000 	.word	0x40600000

08003d14 <setLightCyle>:
	HAL_GPIO_WritePin(GPIOE,grow_light_Pin,GPIO_PIN_RESET);		// turn off grow light
	day_or_night = 0;											// it just turned to night time so set night status
}

void setLightCyle(uint8_t start_hour, uint8_t start_min, uint8_t end_hours, uint8_t end_min)
{
 8003d14:	b490      	push	{r4, r7}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	4608      	mov	r0, r1
 8003d1e:	4611      	mov	r1, r2
 8003d20:	461a      	mov	r2, r3
 8003d22:	4623      	mov	r3, r4
 8003d24:	71fb      	strb	r3, [r7, #7]
 8003d26:	4603      	mov	r3, r0
 8003d28:	71bb      	strb	r3, [r7, #6]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	717b      	strb	r3, [r7, #5]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	713b      	strb	r3, [r7, #4]
	light_on_time.Hours = start_hour;
 8003d32:	4a08      	ldr	r2, [pc, #32]	; (8003d54 <setLightCyle+0x40>)
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	7013      	strb	r3, [r2, #0]
	light_on_time.Minutes = start_min;
 8003d38:	4a06      	ldr	r2, [pc, #24]	; (8003d54 <setLightCyle+0x40>)
 8003d3a:	79bb      	ldrb	r3, [r7, #6]
 8003d3c:	7053      	strb	r3, [r2, #1]

	light_off_time.Hours = end_hours;
 8003d3e:	4a06      	ldr	r2, [pc, #24]	; (8003d58 <setLightCyle+0x44>)
 8003d40:	797b      	ldrb	r3, [r7, #5]
 8003d42:	7013      	strb	r3, [r2, #0]
	light_off_time.Minutes = end_min;
 8003d44:	4a04      	ldr	r2, [pc, #16]	; (8003d58 <setLightCyle+0x44>)
 8003d46:	793b      	ldrb	r3, [r7, #4]
 8003d48:	7053      	strb	r3, [r2, #1]
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc90      	pop	{r4, r7}
 8003d52:	4770      	bx	lr
 8003d54:	200053e8 	.word	0x200053e8
 8003d58:	200053f4 	.word	0x200053f4

08003d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d5c:	b5b0      	push	{r4, r5, r7, lr}
 8003d5e:	b08e      	sub	sp, #56	; 0x38
 8003d60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d62:	f002 f801 	bl	8005d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d66:	f000 f84b 	bl	8003e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d6a:	f000 fb3d 	bl	80043e8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8003d6e:	f000 f999 	bl	80040a4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003d72:	f000 fa43 	bl	80041fc <MX_TIM4_Init>
  MX_TIM10_Init();
 8003d76:	f000 fa8f 	bl	8004298 <MX_TIM10_Init>
  MX_RTC_Init();
 8003d7a:	f000 f901 	bl	8003f80 <MX_RTC_Init>
  MX_TIM12_Init();
 8003d7e:	f000 fad9 	bl	8004334 <MX_TIM12_Init>
  MX_FATFS_Init();
 8003d82:	f008 fb11 	bl	800c3a8 <MX_FATFS_Init>
  MX_DMA_Init();
 8003d86:	f000 fb0f 	bl	80043a8 <MX_DMA_Init>
  MX_ADC1_Init();
 8003d8a:	f000 f899 	bl	8003ec0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
 // (DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
//HAL_DMA_RegisterCallback(&hdma_adc2,HAL_DMA_XFER_CPLT_CB_ID,&DMATransferComplete);
HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&nutrient_ph_values, 80);
 8003d8e:	2250      	movs	r2, #80	; 0x50
 8003d90:	4915      	ldr	r1, [pc, #84]	; (8003de8 <main+0x8c>)
 8003d92:	4816      	ldr	r0, [pc, #88]	; (8003dec <main+0x90>)
 8003d94:	f002 f9ce 	bl	8006134 <HAL_ADC_Start_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of BalanceWater */
  osThreadStaticDef(BalanceWater, StartBalanceWater, osPriorityNormal, 0, 3100, BalanceWaterBuffer, &BalanceWaterControlBlock);
 8003d98:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <main+0x94>)
 8003d9a:	f107 041c 	add.w	r4, r7, #28
 8003d9e:	461d      	mov	r5, r3
 8003da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003da4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003da8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BalanceWaterHandle = osThreadCreate(osThread(BalanceWater), NULL);
 8003dac:	f107 031c 	add.w	r3, r7, #28
 8003db0:	2100      	movs	r1, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f00e fcd5 	bl	8012762 <osThreadCreate>
 8003db8:	4603      	mov	r3, r0
 8003dba:	4a0e      	ldr	r2, [pc, #56]	; (8003df4 <main+0x98>)
 8003dbc:	6013      	str	r3, [r2, #0]

  /* definition and creation of WebAppCom */
  osThreadStaticDef(WebAppCom, StartWebAppCom, osPriorityNormal, 0, 1024, myTask02Buffer, &myTask02ControlBlock);
 8003dbe:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <main+0x9c>)
 8003dc0:	463c      	mov	r4, r7
 8003dc2:	461d      	mov	r5, r3
 8003dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003dcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WebAppComHandle = osThreadCreate(osThread(WebAppCom), NULL);
 8003dd0:	463b      	mov	r3, r7
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f00e fcc4 	bl	8012762 <osThreadCreate>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	4a07      	ldr	r2, [pc, #28]	; (8003dfc <main+0xa0>)
 8003dde:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003de0:	f00e fcb8 	bl	8012754 <osKernelStart>
  GPIO_InitStruct.Pull = GPIO_NOPULL;


  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);*/

  while (1)
 8003de4:	e7fe      	b.n	8003de4 <main+0x88>
 8003de6:	bf00      	nop
 8003de8:	20005410 	.word	0x20005410
 8003dec:	200096e4 	.word	0x200096e4
 8003df0:	0801a388 	.word	0x0801a388
 8003df4:	200094e8 	.word	0x200094e8
 8003df8:	0801a3a4 	.word	0x0801a3a4
 8003dfc:	2000c79c 	.word	0x2000c79c

08003e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b096      	sub	sp, #88	; 0x58
 8003e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e0a:	2230      	movs	r2, #48	; 0x30
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f011 ff1e 	bl	8015c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e14:	f107 0314 	add.w	r3, r7, #20
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	605a      	str	r2, [r3, #4]
 8003e1e:	609a      	str	r2, [r3, #8]
 8003e20:	60da      	str	r2, [r3, #12]
 8003e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e24:	463b      	mov	r3, r7
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	605a      	str	r2, [r3, #4]
 8003e2c:	609a      	str	r2, [r3, #8]
 8003e2e:	60da      	str	r2, [r3, #12]
 8003e30:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003e32:	230a      	movs	r3, #10
 8003e34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e36:	2301      	movs	r3, #1
 8003e38:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e3a:	2310      	movs	r3, #16
 8003e3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e42:	2302      	movs	r3, #2
 8003e44:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e46:	2300      	movs	r3, #0
 8003e48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003e4a:	2308      	movs	r3, #8
 8003e4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003e4e:	23d8      	movs	r3, #216	; 0xd8
 8003e50:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8003e52:	2306      	movs	r3, #6
 8003e54:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8003e56:	2309      	movs	r3, #9
 8003e58:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f005 f8ac 	bl	8008fbc <HAL_RCC_OscConfig>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8003e6a:	f000 fbc9 	bl	8004600 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e6e:	230f      	movs	r3, #15
 8003e70:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e72:	2302      	movs	r3, #2
 8003e74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003e7a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003e7e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e86:	f107 0314 	add.w	r3, r7, #20
 8003e8a:	2102      	movs	r1, #2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f005 fae5 	bl	800945c <HAL_RCC_ClockConfig>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003e98:	f000 fbb2 	bl	8004600 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003e9c:	2304      	movs	r3, #4
 8003e9e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ea4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ea6:	463b      	mov	r3, r7
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f005 fcd5 	bl	8009858 <HAL_RCCEx_PeriphCLKConfig>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003eb4:	f000 fba4 	bl	8004600 <Error_Handler>
  }
}
 8003eb8:	bf00      	nop
 8003eba:	3758      	adds	r7, #88	; 0x58
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003ec6:	463b      	mov	r3, r7
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	609a      	str	r2, [r3, #8]
 8003ed0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003ed2:	4b28      	ldr	r3, [pc, #160]	; (8003f74 <MX_ADC1_Init+0xb4>)
 8003ed4:	4a28      	ldr	r2, [pc, #160]	; (8003f78 <MX_ADC1_Init+0xb8>)
 8003ed6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003ed8:	4b26      	ldr	r3, [pc, #152]	; (8003f74 <MX_ADC1_Init+0xb4>)
 8003eda:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003ede:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003ee0:	4b24      	ldr	r3, [pc, #144]	; (8003f74 <MX_ADC1_Init+0xb4>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003ee6:	4b23      	ldr	r3, [pc, #140]	; (8003f74 <MX_ADC1_Init+0xb4>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003eec:	4b21      	ldr	r3, [pc, #132]	; (8003f74 <MX_ADC1_Init+0xb4>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003ef2:	4b20      	ldr	r3, [pc, #128]	; (8003f74 <MX_ADC1_Init+0xb4>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003efa:	4b1e      	ldr	r3, [pc, #120]	; (8003f74 <MX_ADC1_Init+0xb4>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f00:	4b1c      	ldr	r3, [pc, #112]	; (8003f74 <MX_ADC1_Init+0xb4>)
 8003f02:	4a1e      	ldr	r2, [pc, #120]	; (8003f7c <MX_ADC1_Init+0xbc>)
 8003f04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f06:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <MX_ADC1_Init+0xb4>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003f0c:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <MX_ADC1_Init+0xb4>)
 8003f0e:	2202      	movs	r2, #2
 8003f10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003f12:	4b18      	ldr	r3, [pc, #96]	; (8003f74 <MX_ADC1_Init+0xb4>)
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003f1a:	4b16      	ldr	r3, [pc, #88]	; (8003f74 <MX_ADC1_Init+0xb4>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003f20:	4814      	ldr	r0, [pc, #80]	; (8003f74 <MX_ADC1_Init+0xb4>)
 8003f22:	f001 ff83 	bl	8005e2c <HAL_ADC_Init>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003f2c:	f000 fb68 	bl	8004600 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003f30:	2305      	movs	r3, #5
 8003f32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003f34:	2301      	movs	r3, #1
 8003f36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003f38:	2307      	movs	r3, #7
 8003f3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f3c:	463b      	mov	r3, r7
 8003f3e:	4619      	mov	r1, r3
 8003f40:	480c      	ldr	r0, [pc, #48]	; (8003f74 <MX_ADC1_Init+0xb4>)
 8003f42:	f002 f9f1 	bl	8006328 <HAL_ADC_ConfigChannel>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003f4c:	f000 fb58 	bl	8004600 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003f50:	2304      	movs	r3, #4
 8003f52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003f54:	2302      	movs	r3, #2
 8003f56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f58:	463b      	mov	r3, r7
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4805      	ldr	r0, [pc, #20]	; (8003f74 <MX_ADC1_Init+0xb4>)
 8003f5e:	f002 f9e3 	bl	8006328 <HAL_ADC_ConfigChannel>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003f68:	f000 fb4a 	bl	8004600 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	200096e4 	.word	0x200096e4
 8003f78:	40012000 	.word	0x40012000
 8003f7c:	0f000001 	.word	0x0f000001

08003f80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08c      	sub	sp, #48	; 0x30
 8003f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	605a      	str	r2, [r3, #4]
 8003f90:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 8003f92:	2300      	movs	r3, #0
 8003f94:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 8003f96:	1d3b      	adds	r3, r7, #4
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	605a      	str	r2, [r3, #4]
 8003f9e:	609a      	str	r2, [r3, #8]
 8003fa0:	60da      	str	r2, [r3, #12]
 8003fa2:	611a      	str	r2, [r3, #16]
 8003fa4:	615a      	str	r2, [r3, #20]
 8003fa6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003fa8:	4b3c      	ldr	r3, [pc, #240]	; (800409c <MX_RTC_Init+0x11c>)
 8003faa:	4a3d      	ldr	r2, [pc, #244]	; (80040a0 <MX_RTC_Init+0x120>)
 8003fac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003fae:	4b3b      	ldr	r3, [pc, #236]	; (800409c <MX_RTC_Init+0x11c>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003fb4:	4b39      	ldr	r3, [pc, #228]	; (800409c <MX_RTC_Init+0x11c>)
 8003fb6:	227f      	movs	r2, #127	; 0x7f
 8003fb8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003fba:	4b38      	ldr	r3, [pc, #224]	; (800409c <MX_RTC_Init+0x11c>)
 8003fbc:	22ff      	movs	r2, #255	; 0xff
 8003fbe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003fc0:	4b36      	ldr	r3, [pc, #216]	; (800409c <MX_RTC_Init+0x11c>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003fc6:	4b35      	ldr	r3, [pc, #212]	; (800409c <MX_RTC_Init+0x11c>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003fcc:	4b33      	ldr	r3, [pc, #204]	; (800409c <MX_RTC_Init+0x11c>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003fd2:	4832      	ldr	r0, [pc, #200]	; (800409c <MX_RTC_Init+0x11c>)
 8003fd4:	f005 fd36 	bl	8009a44 <HAL_RTC_Init>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8003fde:	f000 fb0f 	bl	8004600 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sTime.Minutes = 0x0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sTime.Seconds = 0x0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004000:	2201      	movs	r2, #1
 8004002:	4619      	mov	r1, r3
 8004004:	4825      	ldr	r0, [pc, #148]	; (800409c <MX_RTC_Init+0x11c>)
 8004006:	f005 fda7 	bl	8009b58 <HAL_RTC_SetTime>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8004010:	f000 faf6 	bl	8004600 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_JANUARY;
 800401a:	2301      	movs	r3, #1
 800401c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sDate.Date = 0x1;
 8004020:	2301      	movs	r3, #1
 8004022:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sDate.Year = 0x0;
 8004026:	2300      	movs	r3, #0
 8004028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800402c:	f107 0320 	add.w	r3, r7, #32
 8004030:	2201      	movs	r2, #1
 8004032:	4619      	mov	r1, r3
 8004034:	4819      	ldr	r0, [pc, #100]	; (800409c <MX_RTC_Init+0x11c>)
 8004036:	f005 fe97 	bl	8009d68 <HAL_RTC_SetDate>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8004040:	f000 fade 	bl	8004600 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8004044:	2300      	movs	r3, #0
 8004046:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8004048:	2300      	movs	r3, #0
 800404a:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 800404c:	2300      	movs	r3, #0
 800404e:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004050:	2300      	movs	r3, #0
 8004052:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8004058:	2300      	movs	r3, #0
 800405a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 0x1;
 8004060:	2301      	movs	r3, #1
 8004062:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 8004064:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004068:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800406a:	1d3b      	adds	r3, r7, #4
 800406c:	2201      	movs	r2, #1
 800406e:	4619      	mov	r1, r3
 8004070:	480a      	ldr	r0, [pc, #40]	; (800409c <MX_RTC_Init+0x11c>)
 8004072:	f005 ff68 	bl	8009f46 <HAL_RTC_SetAlarm>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <MX_RTC_Init+0x100>
  {
    Error_Handler();
 800407c:	f000 fac0 	bl	8004600 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8004080:	2200      	movs	r2, #0
 8004082:	2100      	movs	r1, #0
 8004084:	4805      	ldr	r0, [pc, #20]	; (800409c <MX_RTC_Init+0x11c>)
 8004086:	f006 f8f2 	bl	800a26e <HAL_RTCEx_SetWakeUpTimer>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <MX_RTC_Init+0x114>
  {
    Error_Handler();
 8004090:	f000 fab6 	bl	8004600 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004094:	bf00      	nop
 8004096:	3730      	adds	r7, #48	; 0x30
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	2000c800 	.word	0x2000c800
 80040a0:	40002800 	.word	0x40002800

080040a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b096      	sub	sp, #88	; 0x58
 80040a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	605a      	str	r2, [r3, #4]
 80040b4:	609a      	str	r2, [r3, #8]
 80040b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	605a      	str	r2, [r3, #4]
 80040cc:	609a      	str	r2, [r3, #8]
 80040ce:	60da      	str	r2, [r3, #12]
 80040d0:	611a      	str	r2, [r3, #16]
 80040d2:	615a      	str	r2, [r3, #20]
 80040d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80040d6:	1d3b      	adds	r3, r7, #4
 80040d8:	2220      	movs	r2, #32
 80040da:	2100      	movs	r1, #0
 80040dc:	4618      	mov	r0, r3
 80040de:	f011 fdb7 	bl	8015c50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80040e2:	4b44      	ldr	r3, [pc, #272]	; (80041f4 <MX_TIM1_Init+0x150>)
 80040e4:	4a44      	ldr	r2, [pc, #272]	; (80041f8 <MX_TIM1_Init+0x154>)
 80040e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80040e8:	4b42      	ldr	r3, [pc, #264]	; (80041f4 <MX_TIM1_Init+0x150>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ee:	4b41      	ldr	r3, [pc, #260]	; (80041f4 <MX_TIM1_Init+0x150>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80040f4:	4b3f      	ldr	r3, [pc, #252]	; (80041f4 <MX_TIM1_Init+0x150>)
 80040f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040fc:	4b3d      	ldr	r3, [pc, #244]	; (80041f4 <MX_TIM1_Init+0x150>)
 80040fe:	2200      	movs	r2, #0
 8004100:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004102:	4b3c      	ldr	r3, [pc, #240]	; (80041f4 <MX_TIM1_Init+0x150>)
 8004104:	2200      	movs	r2, #0
 8004106:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004108:	4b3a      	ldr	r3, [pc, #232]	; (80041f4 <MX_TIM1_Init+0x150>)
 800410a:	2280      	movs	r2, #128	; 0x80
 800410c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800410e:	4839      	ldr	r0, [pc, #228]	; (80041f4 <MX_TIM1_Init+0x150>)
 8004110:	f006 f941 	bl	800a396 <HAL_TIM_Base_Init>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800411a:	f000 fa71 	bl	8004600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800411e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004122:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004124:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004128:	4619      	mov	r1, r3
 800412a:	4832      	ldr	r0, [pc, #200]	; (80041f4 <MX_TIM1_Init+0x150>)
 800412c:	f006 fcd6 	bl	800aadc <HAL_TIM_ConfigClockSource>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004136:	f000 fa63 	bl	8004600 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800413a:	482e      	ldr	r0, [pc, #184]	; (80041f4 <MX_TIM1_Init+0x150>)
 800413c:	f006 f9e8 	bl	800a510 <HAL_TIM_PWM_Init>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004146:	f000 fa5b 	bl	8004600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800414a:	2300      	movs	r3, #0
 800414c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800414e:	2300      	movs	r3, #0
 8004150:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004152:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004156:	4619      	mov	r1, r3
 8004158:	4826      	ldr	r0, [pc, #152]	; (80041f4 <MX_TIM1_Init+0x150>)
 800415a:	f007 f8ab 	bl	800b2b4 <HAL_TIMEx_MasterConfigSynchronization>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004164:	f000 fa4c 	bl	8004600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004168:	2360      	movs	r3, #96	; 0x60
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004170:	2300      	movs	r3, #0
 8004172:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004174:	2300      	movs	r3, #0
 8004176:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004178:	2304      	movs	r3, #4
 800417a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800417c:	2300      	movs	r3, #0
 800417e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004180:	2300      	movs	r3, #0
 8004182:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004188:	2200      	movs	r2, #0
 800418a:	4619      	mov	r1, r3
 800418c:	4819      	ldr	r0, [pc, #100]	; (80041f4 <MX_TIM1_Init+0x150>)
 800418e:	f006 fbe7 	bl	800a960 <HAL_TIM_PWM_ConfigChannel>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004198:	f000 fa32 	bl	8004600 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800419c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041a0:	2208      	movs	r2, #8
 80041a2:	4619      	mov	r1, r3
 80041a4:	4813      	ldr	r0, [pc, #76]	; (80041f4 <MX_TIM1_Init+0x150>)
 80041a6:	f006 fbdb 	bl	800a960 <HAL_TIM_PWM_ConfigChannel>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80041b0:	f000 fa26 	bl	8004600 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041b4:	2300      	movs	r3, #0
 80041b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80041d2:	1d3b      	adds	r3, r7, #4
 80041d4:	4619      	mov	r1, r3
 80041d6:	4807      	ldr	r0, [pc, #28]	; (80041f4 <MX_TIM1_Init+0x150>)
 80041d8:	f007 f8e6 	bl	800b3a8 <HAL_TIMEx_ConfigBreakDeadTime>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80041e2:	f000 fa0d 	bl	8004600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80041e6:	4803      	ldr	r0, [pc, #12]	; (80041f4 <MX_TIM1_Init+0x150>)
 80041e8:	f001 fa8c 	bl	8005704 <HAL_TIM_MspPostInit>

}
 80041ec:	bf00      	nop
 80041ee:	3758      	adds	r7, #88	; 0x58
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	2000c834 	.word	0x2000c834
 80041f8:	40010000 	.word	0x40010000

080041fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004202:	f107 0308 	add.w	r3, r7, #8
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	605a      	str	r2, [r3, #4]
 800420c:	609a      	str	r2, [r3, #8]
 800420e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004210:	463b      	mov	r3, r7
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004218:	4b1d      	ldr	r3, [pc, #116]	; (8004290 <MX_TIM4_Init+0x94>)
 800421a:	4a1e      	ldr	r2, [pc, #120]	; (8004294 <MX_TIM4_Init+0x98>)
 800421c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36-1;
 800421e:	4b1c      	ldr	r3, [pc, #112]	; (8004290 <MX_TIM4_Init+0x94>)
 8004220:	2223      	movs	r2, #35	; 0x23
 8004222:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004224:	4b1a      	ldr	r3, [pc, #104]	; (8004290 <MX_TIM4_Init+0x94>)
 8004226:	2200      	movs	r2, #0
 8004228:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 800422a:	4b19      	ldr	r3, [pc, #100]	; (8004290 <MX_TIM4_Init+0x94>)
 800422c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004230:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004232:	4b17      	ldr	r3, [pc, #92]	; (8004290 <MX_TIM4_Init+0x94>)
 8004234:	2200      	movs	r2, #0
 8004236:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004238:	4b15      	ldr	r3, [pc, #84]	; (8004290 <MX_TIM4_Init+0x94>)
 800423a:	2200      	movs	r2, #0
 800423c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800423e:	4814      	ldr	r0, [pc, #80]	; (8004290 <MX_TIM4_Init+0x94>)
 8004240:	f006 f8a9 	bl	800a396 <HAL_TIM_Base_Init>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800424a:	f000 f9d9 	bl	8004600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800424e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004252:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004254:	f107 0308 	add.w	r3, r7, #8
 8004258:	4619      	mov	r1, r3
 800425a:	480d      	ldr	r0, [pc, #52]	; (8004290 <MX_TIM4_Init+0x94>)
 800425c:	f006 fc3e 	bl	800aadc <HAL_TIM_ConfigClockSource>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8004266:	f000 f9cb 	bl	8004600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800426a:	2300      	movs	r3, #0
 800426c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800426e:	2300      	movs	r3, #0
 8004270:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004272:	463b      	mov	r3, r7
 8004274:	4619      	mov	r1, r3
 8004276:	4806      	ldr	r0, [pc, #24]	; (8004290 <MX_TIM4_Init+0x94>)
 8004278:	f007 f81c 	bl	800b2b4 <HAL_TIMEx_MasterConfigSynchronization>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8004282:	f000 f9bd 	bl	8004600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004286:	bf00      	nop
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20009654 	.word	0x20009654
 8004294:	40000800 	.word	0x40000800

08004298 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800429e:	1d3b      	adds	r3, r7, #4
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	605a      	str	r2, [r3, #4]
 80042a6:	609a      	str	r2, [r3, #8]
 80042a8:	60da      	str	r2, [r3, #12]
 80042aa:	611a      	str	r2, [r3, #16]
 80042ac:	615a      	str	r2, [r3, #20]
 80042ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80042b0:	4b1e      	ldr	r3, [pc, #120]	; (800432c <MX_TIM10_Init+0x94>)
 80042b2:	4a1f      	ldr	r2, [pc, #124]	; (8004330 <MX_TIM10_Init+0x98>)
 80042b4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80042b6:	4b1d      	ldr	r3, [pc, #116]	; (800432c <MX_TIM10_Init+0x94>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042bc:	4b1b      	ldr	r3, [pc, #108]	; (800432c <MX_TIM10_Init+0x94>)
 80042be:	2200      	movs	r2, #0
 80042c0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80042c2:	4b1a      	ldr	r3, [pc, #104]	; (800432c <MX_TIM10_Init+0x94>)
 80042c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042c8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042ca:	4b18      	ldr	r3, [pc, #96]	; (800432c <MX_TIM10_Init+0x94>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042d0:	4b16      	ldr	r3, [pc, #88]	; (800432c <MX_TIM10_Init+0x94>)
 80042d2:	2280      	movs	r2, #128	; 0x80
 80042d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80042d6:	4815      	ldr	r0, [pc, #84]	; (800432c <MX_TIM10_Init+0x94>)
 80042d8:	f006 f85d 	bl	800a396 <HAL_TIM_Base_Init>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80042e2:	f000 f98d 	bl	8004600 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80042e6:	4811      	ldr	r0, [pc, #68]	; (800432c <MX_TIM10_Init+0x94>)
 80042e8:	f006 f912 	bl	800a510 <HAL_TIM_PWM_Init>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80042f2:	f000 f985 	bl	8004600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042f6:	2360      	movs	r3, #96	; 0x60
 80042f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004306:	1d3b      	adds	r3, r7, #4
 8004308:	2200      	movs	r2, #0
 800430a:	4619      	mov	r1, r3
 800430c:	4807      	ldr	r0, [pc, #28]	; (800432c <MX_TIM10_Init+0x94>)
 800430e:	f006 fb27 	bl	800a960 <HAL_TIM_PWM_ConfigChannel>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8004318:	f000 f972 	bl	8004600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800431c:	4803      	ldr	r0, [pc, #12]	; (800432c <MX_TIM10_Init+0x94>)
 800431e:	f001 f9f1 	bl	8005704 <HAL_TIM_MspPostInit>

}
 8004322:	bf00      	nop
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	2000969c 	.word	0x2000969c
 8004330:	40014400 	.word	0x40014400

08004334 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800433a:	463b      	mov	r3, r7
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	605a      	str	r2, [r3, #4]
 8004342:	609a      	str	r2, [r3, #8]
 8004344:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004346:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <MX_TIM12_Init+0x6c>)
 8004348:	4a16      	ldr	r2, [pc, #88]	; (80043a4 <MX_TIM12_Init+0x70>)
 800434a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1000;
 800434c:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <MX_TIM12_Init+0x6c>)
 800434e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004352:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004354:	4b12      	ldr	r3, [pc, #72]	; (80043a0 <MX_TIM12_Init+0x6c>)
 8004356:	2200      	movs	r2, #0
 8004358:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 36000;
 800435a:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <MX_TIM12_Init+0x6c>)
 800435c:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8004360:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004362:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <MX_TIM12_Init+0x6c>)
 8004364:	2200      	movs	r2, #0
 8004366:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004368:	4b0d      	ldr	r3, [pc, #52]	; (80043a0 <MX_TIM12_Init+0x6c>)
 800436a:	2200      	movs	r2, #0
 800436c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800436e:	480c      	ldr	r0, [pc, #48]	; (80043a0 <MX_TIM12_Init+0x6c>)
 8004370:	f006 f811 	bl	800a396 <HAL_TIM_Base_Init>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 800437a:	f000 f941 	bl	8004600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800437e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004382:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004384:	463b      	mov	r3, r7
 8004386:	4619      	mov	r1, r3
 8004388:	4805      	ldr	r0, [pc, #20]	; (80043a0 <MX_TIM12_Init+0x6c>)
 800438a:	f006 fba7 	bl	800aadc <HAL_TIM_ConfigClockSource>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8004394:	f000 f934 	bl	8004600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8004398:	bf00      	nop
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	2000c87c 	.word	0x2000c87c
 80043a4:	40001800 	.word	0x40001800

080043a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	607b      	str	r3, [r7, #4]
 80043b2:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <MX_DMA_Init+0x3c>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	4a0b      	ldr	r2, [pc, #44]	; (80043e4 <MX_DMA_Init+0x3c>)
 80043b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043bc:	6313      	str	r3, [r2, #48]	; 0x30
 80043be:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <MX_DMA_Init+0x3c>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c6:	607b      	str	r3, [r7, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80043ca:	2200      	movs	r2, #0
 80043cc:	2105      	movs	r1, #5
 80043ce:	2038      	movs	r0, #56	; 0x38
 80043d0:	f002 fb11 	bl	80069f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80043d4:	2038      	movs	r0, #56	; 0x38
 80043d6:	f002 fb2a 	bl	8006a2e <HAL_NVIC_EnableIRQ>

}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40023800 	.word	0x40023800

080043e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08c      	sub	sp, #48	; 0x30
 80043ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ee:	f107 031c 	add.w	r3, r7, #28
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	605a      	str	r2, [r3, #4]
 80043f8:	609a      	str	r2, [r3, #8]
 80043fa:	60da      	str	r2, [r3, #12]
 80043fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043fe:	2300      	movs	r3, #0
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	4b5f      	ldr	r3, [pc, #380]	; (8004580 <MX_GPIO_Init+0x198>)
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	4a5e      	ldr	r2, [pc, #376]	; (8004580 <MX_GPIO_Init+0x198>)
 8004408:	f043 0310 	orr.w	r3, r3, #16
 800440c:	6313      	str	r3, [r2, #48]	; 0x30
 800440e:	4b5c      	ldr	r3, [pc, #368]	; (8004580 <MX_GPIO_Init+0x198>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	61bb      	str	r3, [r7, #24]
 8004418:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800441a:	2300      	movs	r3, #0
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	4b58      	ldr	r3, [pc, #352]	; (8004580 <MX_GPIO_Init+0x198>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	4a57      	ldr	r2, [pc, #348]	; (8004580 <MX_GPIO_Init+0x198>)
 8004424:	f043 0320 	orr.w	r3, r3, #32
 8004428:	6313      	str	r3, [r2, #48]	; 0x30
 800442a:	4b55      	ldr	r3, [pc, #340]	; (8004580 <MX_GPIO_Init+0x198>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004436:	2300      	movs	r3, #0
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	4b51      	ldr	r3, [pc, #324]	; (8004580 <MX_GPIO_Init+0x198>)
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	4a50      	ldr	r2, [pc, #320]	; (8004580 <MX_GPIO_Init+0x198>)
 8004440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004444:	6313      	str	r3, [r2, #48]	; 0x30
 8004446:	4b4e      	ldr	r3, [pc, #312]	; (8004580 <MX_GPIO_Init+0x198>)
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	4b4a      	ldr	r3, [pc, #296]	; (8004580 <MX_GPIO_Init+0x198>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	4a49      	ldr	r2, [pc, #292]	; (8004580 <MX_GPIO_Init+0x198>)
 800445c:	f043 0304 	orr.w	r3, r3, #4
 8004460:	6313      	str	r3, [r2, #48]	; 0x30
 8004462:	4b47      	ldr	r3, [pc, #284]	; (8004580 <MX_GPIO_Init+0x198>)
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800446e:	2300      	movs	r3, #0
 8004470:	60bb      	str	r3, [r7, #8]
 8004472:	4b43      	ldr	r3, [pc, #268]	; (8004580 <MX_GPIO_Init+0x198>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	4a42      	ldr	r2, [pc, #264]	; (8004580 <MX_GPIO_Init+0x198>)
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	6313      	str	r3, [r2, #48]	; 0x30
 800447e:	4b40      	ldr	r3, [pc, #256]	; (8004580 <MX_GPIO_Init+0x198>)
 8004480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	60bb      	str	r3, [r7, #8]
 8004488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800448a:	2300      	movs	r3, #0
 800448c:	607b      	str	r3, [r7, #4]
 800448e:	4b3c      	ldr	r3, [pc, #240]	; (8004580 <MX_GPIO_Init+0x198>)
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	4a3b      	ldr	r2, [pc, #236]	; (8004580 <MX_GPIO_Init+0x198>)
 8004494:	f043 0302 	orr.w	r3, r3, #2
 8004498:	6313      	str	r3, [r2, #48]	; 0x30
 800449a:	4b39      	ldr	r3, [pc, #228]	; (8004580 <MX_GPIO_Init+0x198>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	607b      	str	r3, [r7, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 80044a6:	2201      	movs	r2, #1
 80044a8:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 80044ac:	4835      	ldr	r0, [pc, #212]	; (8004584 <MX_GPIO_Init+0x19c>)
 80044ae:	f002 ffee 	bl	800748e <HAL_GPIO_WritePin>
                          |ph_down_enable_Pin|nutrient_enable_Pin|water_heat_cool_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80044b2:	2200      	movs	r2, #0
 80044b4:	2104      	movs	r1, #4
 80044b6:	4834      	ldr	r0, [pc, #208]	; (8004588 <MX_GPIO_Init+0x1a0>)
 80044b8:	f002 ffe9 	bl	800748e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(water_temp_GPIO_Port, water_temp_Pin, GPIO_PIN_RESET);
 80044bc:	2200      	movs	r2, #0
 80044be:	2104      	movs	r1, #4
 80044c0:	4832      	ldr	r0, [pc, #200]	; (800458c <MX_GPIO_Init+0x1a4>)
 80044c2:	f002 ffe4 	bl	800748e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, grow_light_Pin|water_pump_enable_Pin|water_heat_cool_enable_Pin, GPIO_PIN_RESET);
 80044c6:	2200      	movs	r2, #0
 80044c8:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80044cc:	482d      	ldr	r0, [pc, #180]	; (8004584 <MX_GPIO_Init+0x19c>)
 80044ce:	f002 ffde 	bl	800748e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ph_up_pump_Pin ph_down_pump_Pin nutrient_pump_Pin ph_up_enable_Pin
                           ph_down_enable_Pin nutrient_enable_Pin water_heat_cool_Pin */
  GPIO_InitStruct.Pin = ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 80044d2:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 80044d6:	61fb      	str	r3, [r7, #28]
                          |ph_down_enable_Pin|nutrient_enable_Pin|water_heat_cool_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044d8:	2301      	movs	r3, #1
 80044da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044dc:	2300      	movs	r3, #0
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e0:	2303      	movs	r3, #3
 80044e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044e4:	f107 031c 	add.w	r3, r7, #28
 80044e8:	4619      	mov	r1, r3
 80044ea:	4826      	ldr	r0, [pc, #152]	; (8004584 <MX_GPIO_Init+0x19c>)
 80044ec:	f002 fe1a 	bl	8007124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80044f0:	2304      	movs	r3, #4
 80044f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044f4:	2301      	movs	r3, #1
 80044f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fc:	2300      	movs	r3, #0
 80044fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004500:	f107 031c 	add.w	r3, r7, #28
 8004504:	4619      	mov	r1, r3
 8004506:	4820      	ldr	r0, [pc, #128]	; (8004588 <MX_GPIO_Init+0x1a0>)
 8004508:	f002 fe0c 	bl	8007124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800450c:	2320      	movs	r3, #32
 800450e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004510:	2303      	movs	r3, #3
 8004512:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004514:	2300      	movs	r3, #0
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004518:	f107 031c 	add.w	r3, r7, #28
 800451c:	4619      	mov	r1, r3
 800451e:	481c      	ldr	r0, [pc, #112]	; (8004590 <MX_GPIO_Init+0x1a8>)
 8004520:	f002 fe00 	bl	8007124 <HAL_GPIO_Init>

  /*Configure GPIO pin : water_temp_Pin */
  GPIO_InitStruct.Pin = water_temp_Pin;
 8004524:	2304      	movs	r3, #4
 8004526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004528:	2301      	movs	r3, #1
 800452a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452c:	2300      	movs	r3, #0
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004530:	2300      	movs	r3, #0
 8004532:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(water_temp_GPIO_Port, &GPIO_InitStruct);
 8004534:	f107 031c 	add.w	r3, r7, #28
 8004538:	4619      	mov	r1, r3
 800453a:	4814      	ldr	r0, [pc, #80]	; (800458c <MX_GPIO_Init+0x1a4>)
 800453c:	f002 fdf2 	bl	8007124 <HAL_GPIO_Init>

  /*Configure GPIO pins : grow_light_Pin water_pump_enable_Pin water_heat_cool_enable_Pin */
  GPIO_InitStruct.Pin = grow_light_Pin|water_pump_enable_Pin|water_heat_cool_enable_Pin;
 8004540:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004546:	2301      	movs	r3, #1
 8004548:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454a:	2300      	movs	r3, #0
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800454e:	2300      	movs	r3, #0
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004552:	f107 031c 	add.w	r3, r7, #28
 8004556:	4619      	mov	r1, r3
 8004558:	480a      	ldr	r0, [pc, #40]	; (8004584 <MX_GPIO_Init+0x19c>)
 800455a:	f002 fde3 	bl	8007124 <HAL_GPIO_Init>

  /*Configure GPIO pin : water_level_Pin */
  GPIO_InitStruct.Pin = water_level_Pin;
 800455e:	2302      	movs	r3, #2
 8004560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004562:	2300      	movs	r3, #0
 8004564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004566:	2300      	movs	r3, #0
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(water_level_GPIO_Port, &GPIO_InitStruct);
 800456a:	f107 031c 	add.w	r3, r7, #28
 800456e:	4619      	mov	r1, r3
 8004570:	4804      	ldr	r0, [pc, #16]	; (8004584 <MX_GPIO_Init+0x19c>)
 8004572:	f002 fdd7 	bl	8007124 <HAL_GPIO_Init>

}
 8004576:	bf00      	nop
 8004578:	3730      	adds	r7, #48	; 0x30
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40023800 	.word	0x40023800
 8004584:	40021000 	.word	0x40021000
 8004588:	40020800 	.word	0x40020800
 800458c:	40020400 	.word	0x40020400
 8004590:	40020000 	.word	0x40020000

08004594 <HAL_ADC_ConvCpltCallback>:



char retrieved_ADC_values = 'n';
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
	retrieved_ADC_values = 'y';
 800459c:	4b03      	ldr	r3, [pc, #12]	; (80045ac <HAL_ADC_ConvCpltCallback+0x18>)
 800459e:	2279      	movs	r2, #121	; 0x79
 80045a0:	701a      	strb	r2, [r3, #0]
	//water_temp = readWaterTemp();

}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr
 80045ac:	200001d2 	.word	0x200001d2

080045b0 <StartBalanceWater>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBalanceWater */
void StartBalanceWater(void const * argument)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80045b8:	f010 fec8 	bl	801534c <MX_USB_HOST_Init>
  /* Infinite loop */
  for(;;)
  {

	 // MX_USB_HOST_Process();
	systemControl();
 80045bc:	f7ff fb7c 	bl	8003cb8 <systemControl>
    osDelay(1000);
 80045c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045c4:	f00e f919 	bl	80127fa <osDelay>
	systemControl();
 80045c8:	e7f8      	b.n	80045bc <StartBalanceWater+0xc>

080045ca <StartWebAppCom>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWebAppCom */
void StartWebAppCom(void const * argument)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWebAppCom */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80045d2:	2001      	movs	r0, #1
 80045d4:	f00e f911 	bl	80127fa <osDelay>
 80045d8:	e7fb      	b.n	80045d2 <StartWebAppCom+0x8>
	...

080045dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a04      	ldr	r2, [pc, #16]	; (80045fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d101      	bne.n	80045f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80045ee:	f001 fbdd 	bl	8005dac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80045f2:	bf00      	nop
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40001000 	.word	0x40001000

08004600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004604:	b672      	cpsid	i
}
 8004606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004608:	e7fe      	b.n	8004608 <Error_Handler+0x8>

0800460a <doseWater>:
#include "hydro_control_loop.h"
double pH_up_volume = 0;
double pH_down_volume = 0;
double nutrient_volume = 0;
void doseWater(double acid_ml, double base_ml, double nutrient_ml)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b088      	sub	sp, #32
 800460e:	af00      	add	r7, sp, #0
 8004610:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004614:	e9c7 2300 	strd	r2, r3, [r7]
	int ph_down_steps = calc_dose_steps(acid_ml);
 8004618:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800461c:	f000 fab0 	bl	8004b80 <calc_dose_steps>
 8004620:	61f8      	str	r0, [r7, #28]
	int ph_up_steps = calc_dose_steps(base_ml);
 8004622:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004626:	f000 faab 	bl	8004b80 <calc_dose_steps>
 800462a:	61b8      	str	r0, [r7, #24]
	int nutrient_steps = calc_dose_steps(nutrient_ml);
 800462c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004630:	f000 faa6 	bl	8004b80 <calc_dose_steps>
 8004634:	6178      	str	r0, [r7, #20]
	step(nutrient_steps,ph_up_steps, ph_down_steps);
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	69b9      	ldr	r1, [r7, #24]
 800463a:	6978      	ldr	r0, [r7, #20]
 800463c:	f000 fc76 	bl	8004f2c <step>
}
 8004640:	bf00      	nop
 8004642:	3720      	adds	r7, #32
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <calcPhUpDose>:
//max_pH_up_dose = 1.0, max_pH_down_dose = 1.0, max_nutrient_dose = 50
double d  = 0;
double pH_up_dose_factor = 1000, pH_down_dose_factor = 1000, nutrient_dose_factor = 1000;
double calcPhUpDose(double pH_set_val, double TDS_set_val)      // following dose methods return a double in milliliters.
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004652:	e9c7 2300 	strd	r2, r3, [r7]
	pH_up_volume =  0; // set dose to the minimum
 8004656:	492e      	ldr	r1, [pc, #184]	; (8004710 <calcPhUpDose+0xc8>)
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	e9c1 2300 	strd	r2, r3, [r1]
	for(d = 0; (d < pH_set_val-pH) && (pH_up_volume < max_pH_up_dose); d += 0.01) 		 pH_up_volume += (double) max_pH_up_dose/pH_up_dose_factor;
 8004664:	492b      	ldr	r1, [pc, #172]	; (8004714 <calcPhUpDose+0xcc>)
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	f04f 0300 	mov.w	r3, #0
 800466e:	e9c1 2300 	strd	r2, r3, [r1]
 8004672:	e022      	b.n	80046ba <calcPhUpDose+0x72>
 8004674:	4b28      	ldr	r3, [pc, #160]	; (8004718 <calcPhUpDose+0xd0>)
 8004676:	e9d3 0100 	ldrd	r0, r1, [r3]
 800467a:	4b28      	ldr	r3, [pc, #160]	; (800471c <calcPhUpDose+0xd4>)
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	f7fc f89e 	bl	80007c0 <__aeabi_ddiv>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4610      	mov	r0, r2
 800468a:	4619      	mov	r1, r3
 800468c:	4b20      	ldr	r3, [pc, #128]	; (8004710 <calcPhUpDose+0xc8>)
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	f7fb fdb5 	bl	8000200 <__adddf3>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	491d      	ldr	r1, [pc, #116]	; (8004710 <calcPhUpDose+0xc8>)
 800469c:	e9c1 2300 	strd	r2, r3, [r1]
 80046a0:	4b1c      	ldr	r3, [pc, #112]	; (8004714 <calcPhUpDose+0xcc>)
 80046a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046a6:	a318      	add	r3, pc, #96	; (adr r3, 8004708 <calcPhUpDose+0xc0>)
 80046a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ac:	f7fb fda8 	bl	8000200 <__adddf3>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4917      	ldr	r1, [pc, #92]	; (8004714 <calcPhUpDose+0xcc>)
 80046b6:	e9c1 2300 	strd	r2, r3, [r1]
 80046ba:	4b19      	ldr	r3, [pc, #100]	; (8004720 <calcPhUpDose+0xd8>)
 80046bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046c4:	f7fb fd9a 	bl	80001fc <__aeabi_dsub>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4610      	mov	r0, r2
 80046ce:	4619      	mov	r1, r3
 80046d0:	4b10      	ldr	r3, [pc, #64]	; (8004714 <calcPhUpDose+0xcc>)
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	f7fc f9d9 	bl	8000a8c <__aeabi_dcmpgt>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <calcPhUpDose+0xae>
 80046e0:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <calcPhUpDose+0xc8>)
 80046e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046e6:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <calcPhUpDose+0xd0>)
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	f7fc f9b0 	bl	8000a50 <__aeabi_dcmplt>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1be      	bne.n	8004674 <calcPhUpDose+0x2c>
	return pH_up_volume;
 80046f6:	4b06      	ldr	r3, [pc, #24]	; (8004710 <calcPhUpDose+0xc8>)
 80046f8:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80046fc:	4610      	mov	r0, r2
 80046fe:	4619      	mov	r1, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	47ae147b 	.word	0x47ae147b
 800470c:	3f847ae1 	.word	0x3f847ae1
 8004710:	20005568 	.word	0x20005568
 8004714:	20005580 	.word	0x20005580
 8004718:	20000018 	.word	0x20000018
 800471c:	200001d8 	.word	0x200001d8
 8004720:	200017c8 	.word	0x200017c8
 8004724:	00000000 	.word	0x00000000

08004728 <calcPhDownDose>:

double calcPhDownDose(double pH_set_val, double TDS_set_val)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004732:	e9c7 2300 	strd	r2, r3, [r7]
	pH_down_volume =  0;
 8004736:	492e      	ldr	r1, [pc, #184]	; (80047f0 <calcPhDownDose+0xc8>)
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	e9c1 2300 	strd	r2, r3, [r1]
	for(d = 0; (d < pH-pH_set_val) && (pH_down_volume < max_pH_down_dose); d += 0.01) 	 pH_down_volume += (double) max_pH_down_dose/pH_down_dose_factor;
 8004744:	492b      	ldr	r1, [pc, #172]	; (80047f4 <calcPhDownDose+0xcc>)
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	e9c1 2300 	strd	r2, r3, [r1]
 8004752:	e022      	b.n	800479a <calcPhDownDose+0x72>
 8004754:	4b28      	ldr	r3, [pc, #160]	; (80047f8 <calcPhDownDose+0xd0>)
 8004756:	e9d3 0100 	ldrd	r0, r1, [r3]
 800475a:	4b28      	ldr	r3, [pc, #160]	; (80047fc <calcPhDownDose+0xd4>)
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	f7fc f82e 	bl	80007c0 <__aeabi_ddiv>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4610      	mov	r0, r2
 800476a:	4619      	mov	r1, r3
 800476c:	4b20      	ldr	r3, [pc, #128]	; (80047f0 <calcPhDownDose+0xc8>)
 800476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004772:	f7fb fd45 	bl	8000200 <__adddf3>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	491d      	ldr	r1, [pc, #116]	; (80047f0 <calcPhDownDose+0xc8>)
 800477c:	e9c1 2300 	strd	r2, r3, [r1]
 8004780:	4b1c      	ldr	r3, [pc, #112]	; (80047f4 <calcPhDownDose+0xcc>)
 8004782:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004786:	a318      	add	r3, pc, #96	; (adr r3, 80047e8 <calcPhDownDose+0xc0>)
 8004788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478c:	f7fb fd38 	bl	8000200 <__adddf3>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4917      	ldr	r1, [pc, #92]	; (80047f4 <calcPhDownDose+0xcc>)
 8004796:	e9c1 2300 	strd	r2, r3, [r1]
 800479a:	4b19      	ldr	r3, [pc, #100]	; (8004800 <calcPhDownDose+0xd8>)
 800479c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047a4:	f7fb fd2a 	bl	80001fc <__aeabi_dsub>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4610      	mov	r0, r2
 80047ae:	4619      	mov	r1, r3
 80047b0:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <calcPhDownDose+0xcc>)
 80047b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b6:	f7fc f969 	bl	8000a8c <__aeabi_dcmpgt>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <calcPhDownDose+0xae>
 80047c0:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <calcPhDownDose+0xc8>)
 80047c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047c6:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <calcPhDownDose+0xd0>)
 80047c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047cc:	f7fc f940 	bl	8000a50 <__aeabi_dcmplt>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1be      	bne.n	8004754 <calcPhDownDose+0x2c>
	return pH_down_volume;
 80047d6:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <calcPhDownDose+0xc8>)
 80047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80047dc:	4610      	mov	r0, r2
 80047de:	4619      	mov	r1, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	47ae147b 	.word	0x47ae147b
 80047ec:	3f847ae1 	.word	0x3f847ae1
 80047f0:	20005570 	.word	0x20005570
 80047f4:	20005580 	.word	0x20005580
 80047f8:	20000020 	.word	0x20000020
 80047fc:	200001e0 	.word	0x200001e0
 8004800:	200017c8 	.word	0x200017c8

08004804 <calcNutrientDose>:

double calcNutrientDose(double pH_set_val, double TDS_set_val)	// calculates nutrient dosage based on how far we are away from the set-point
{
 8004804:	b5b0      	push	{r4, r5, r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800480e:	e9c7 2300 	strd	r2, r3, [r7]
	nutrient_volume =  0;
 8004812:	4925      	ldr	r1, [pc, #148]	; (80048a8 <calcNutrientDose+0xa4>)
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	f04f 0300 	mov.w	r3, #0
 800481c:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0; (i < TDS_set_val - TDS) && (nutrient_volume < max_nutrient_dose); i++) nutrient_volume += (double) max_nutrient_dose/nutrient_dose_factor;
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	e018      	b.n	8004858 <calcNutrientDose+0x54>
 8004826:	4b21      	ldr	r3, [pc, #132]	; (80048ac <calcNutrientDose+0xa8>)
 8004828:	e9d3 0100 	ldrd	r0, r1, [r3]
 800482c:	4b20      	ldr	r3, [pc, #128]	; (80048b0 <calcNutrientDose+0xac>)
 800482e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004832:	f7fb ffc5 	bl	80007c0 <__aeabi_ddiv>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4610      	mov	r0, r2
 800483c:	4619      	mov	r1, r3
 800483e:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <calcNutrientDose+0xa4>)
 8004840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004844:	f7fb fcdc 	bl	8000200 <__adddf3>
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	4916      	ldr	r1, [pc, #88]	; (80048a8 <calcNutrientDose+0xa4>)
 800484e:	e9c1 2300 	strd	r2, r3, [r1]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	3301      	adds	r3, #1
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	6978      	ldr	r0, [r7, #20]
 800485a:	f7fb fe1d 	bl	8000498 <__aeabi_i2d>
 800485e:	4604      	mov	r4, r0
 8004860:	460d      	mov	r5, r1
 8004862:	4b14      	ldr	r3, [pc, #80]	; (80048b4 <calcNutrientDose+0xb0>)
 8004864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004868:	e9d7 0100 	ldrd	r0, r1, [r7]
 800486c:	f7fb fcc6 	bl	80001fc <__aeabi_dsub>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4620      	mov	r0, r4
 8004876:	4629      	mov	r1, r5
 8004878:	f7fc f8ea 	bl	8000a50 <__aeabi_dcmplt>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <calcNutrientDose+0x94>
 8004882:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <calcNutrientDose+0xa4>)
 8004884:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004888:	4b08      	ldr	r3, [pc, #32]	; (80048ac <calcNutrientDose+0xa8>)
 800488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488e:	f7fc f8df 	bl	8000a50 <__aeabi_dcmplt>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1c6      	bne.n	8004826 <calcNutrientDose+0x22>
	return nutrient_volume;
 8004898:	4b03      	ldr	r3, [pc, #12]	; (80048a8 <calcNutrientDose+0xa4>)
 800489a:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800489e:	4610      	mov	r0, r2
 80048a0:	4619      	mov	r1, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bdb0      	pop	{r4, r5, r7, pc}
 80048a8:	20005578 	.word	0x20005578
 80048ac:	20000028 	.word	0x20000028
 80048b0:	200001e8 	.word	0x200001e8
 80048b4:	200017c0 	.word	0x200017c0

080048b8 <calibrateDosage>:

double Start_pH = 0;
double Start_Nutrient = 0;
void calibrateDosage(char what_to_cal) // goal: Calculate the pH/nutrient change given a set volume. This will allow us to reduce over/undershooting without PID
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af02      	add	r7, sp, #8
 80048be:	4603      	mov	r3, r0
 80048c0:	71fb      	strb	r3, [r7, #7]
	Start_pH = pH;
 80048c2:	4b51      	ldr	r3, [pc, #324]	; (8004a08 <calibrateDosage+0x150>)
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	4950      	ldr	r1, [pc, #320]	; (8004a0c <calibrateDosage+0x154>)
 80048ca:	e9c1 2300 	strd	r2, r3, [r1]
	Start_Nutrient = TDS;
 80048ce:	4b50      	ldr	r3, [pc, #320]	; (8004a10 <calibrateDosage+0x158>)
 80048d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d4:	494f      	ldr	r1, [pc, #316]	; (8004a14 <calibrateDosage+0x15c>)
 80048d6:	e9c1 2300 	strd	r2, r3, [r1]
	if(what_to_cal == 'u')	   doseWater(0,0.1,0);	// 'u' = pH up, 'd' = pH down, 'u' = nutrient up,
 80048da:	79fb      	ldrb	r3, [r7, #7]
 80048dc:	2b75      	cmp	r3, #117	; 0x75
 80048de:	d10f      	bne.n	8004900 <calibrateDosage+0x48>
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	e9cd 2300 	strd	r2, r3, [sp]
 80048ec:	a340      	add	r3, pc, #256	; (adr r3, 80049f0 <calibrateDosage+0x138>)
 80048ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f2:	f04f 0000 	mov.w	r0, #0
 80048f6:	f04f 0100 	mov.w	r1, #0
 80048fa:	f7ff fe86 	bl	800460a <doseWater>
 80048fe:	e024      	b.n	800494a <calibrateDosage+0x92>
	else if(what_to_cal == 'd')doseWater(0.1,0,0);
 8004900:	79fb      	ldrb	r3, [r7, #7]
 8004902:	2b64      	cmp	r3, #100	; 0x64
 8004904:	d10f      	bne.n	8004926 <calibrateDosage+0x6e>
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	e9cd 2300 	strd	r2, r3, [sp]
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	a135      	add	r1, pc, #212	; (adr r1, 80049f0 <calibrateDosage+0x138>)
 800491c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004920:	f7ff fe73 	bl	800460a <doseWater>
 8004924:	e011      	b.n	800494a <calibrateDosage+0x92>
	else if(what_to_cal == 'n')doseWater(0,0,3);
 8004926:	79fb      	ldrb	r3, [r7, #7]
 8004928:	2b6e      	cmp	r3, #110	; 0x6e
 800492a:	d10e      	bne.n	800494a <calibrateDosage+0x92>
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	4b39      	ldr	r3, [pc, #228]	; (8004a18 <calibrateDosage+0x160>)
 8004932:	e9cd 2300 	strd	r2, r3, [sp]
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	f04f 0000 	mov.w	r0, #0
 8004942:	f04f 0100 	mov.w	r1, #0
 8004946:	f7ff fe60 	bl	800460a <doseWater>
	waitForWaterToStabilize();
 800494a:	f7ff f857 	bl	80039fc <waitForWaterToStabilize>
	if(what_to_cal == 'u')      pH_up_dose_factor    = (pH-Start_pH)*10000;
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	2b75      	cmp	r3, #117	; 0x75
 8004952:	d116      	bne.n	8004982 <calibrateDosage+0xca>
 8004954:	4b2c      	ldr	r3, [pc, #176]	; (8004a08 <calibrateDosage+0x150>)
 8004956:	e9d3 0100 	ldrd	r0, r1, [r3]
 800495a:	4b2c      	ldr	r3, [pc, #176]	; (8004a0c <calibrateDosage+0x154>)
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	f7fb fc4c 	bl	80001fc <__aeabi_dsub>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4610      	mov	r0, r2
 800496a:	4619      	mov	r1, r3
 800496c:	a322      	add	r3, pc, #136	; (adr r3, 80049f8 <calibrateDosage+0x140>)
 800496e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004972:	f7fb fdfb 	bl	800056c <__aeabi_dmul>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4928      	ldr	r1, [pc, #160]	; (8004a1c <calibrateDosage+0x164>)
 800497c:	e9c1 2300 	strd	r2, r3, [r1]
	else if(what_to_cal == 'd') pH_down_dose_factor  = (Start_pH-pH)*11000;
	else if(what_to_cal == 'n') nutrient_dose_factor = (TDS-Start_Nutrient)*50;
}
 8004980:	e032      	b.n	80049e8 <calibrateDosage+0x130>
	else if(what_to_cal == 'd') pH_down_dose_factor  = (Start_pH-pH)*11000;
 8004982:	79fb      	ldrb	r3, [r7, #7]
 8004984:	2b64      	cmp	r3, #100	; 0x64
 8004986:	d116      	bne.n	80049b6 <calibrateDosage+0xfe>
 8004988:	4b20      	ldr	r3, [pc, #128]	; (8004a0c <calibrateDosage+0x154>)
 800498a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800498e:	4b1e      	ldr	r3, [pc, #120]	; (8004a08 <calibrateDosage+0x150>)
 8004990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004994:	f7fb fc32 	bl	80001fc <__aeabi_dsub>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4610      	mov	r0, r2
 800499e:	4619      	mov	r1, r3
 80049a0:	a317      	add	r3, pc, #92	; (adr r3, 8004a00 <calibrateDosage+0x148>)
 80049a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a6:	f7fb fde1 	bl	800056c <__aeabi_dmul>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	491c      	ldr	r1, [pc, #112]	; (8004a20 <calibrateDosage+0x168>)
 80049b0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80049b4:	e018      	b.n	80049e8 <calibrateDosage+0x130>
	else if(what_to_cal == 'n') nutrient_dose_factor = (TDS-Start_Nutrient)*50;
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	2b6e      	cmp	r3, #110	; 0x6e
 80049ba:	d115      	bne.n	80049e8 <calibrateDosage+0x130>
 80049bc:	4b14      	ldr	r3, [pc, #80]	; (8004a10 <calibrateDosage+0x158>)
 80049be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049c2:	4b14      	ldr	r3, [pc, #80]	; (8004a14 <calibrateDosage+0x15c>)
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f7fb fc18 	bl	80001fc <__aeabi_dsub>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4610      	mov	r0, r2
 80049d2:	4619      	mov	r1, r3
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	4b12      	ldr	r3, [pc, #72]	; (8004a24 <calibrateDosage+0x16c>)
 80049da:	f7fb fdc7 	bl	800056c <__aeabi_dmul>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4911      	ldr	r1, [pc, #68]	; (8004a28 <calibrateDosage+0x170>)
 80049e4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80049e8:	bf00      	nop
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	9999999a 	.word	0x9999999a
 80049f4:	3fb99999 	.word	0x3fb99999
 80049f8:	00000000 	.word	0x00000000
 80049fc:	40c38800 	.word	0x40c38800
 8004a00:	00000000 	.word	0x00000000
 8004a04:	40c57c00 	.word	0x40c57c00
 8004a08:	200017c8 	.word	0x200017c8
 8004a0c:	20005588 	.word	0x20005588
 8004a10:	200017c0 	.word	0x200017c0
 8004a14:	20005590 	.word	0x20005590
 8004a18:	40080000 	.word	0x40080000
 8004a1c:	200001d8 	.word	0x200001d8
 8004a20:	200001e0 	.word	0x200001e0
 8004a24:	40490000 	.word	0x40490000
 8004a28:	200001e8 	.word	0x200001e8

08004a2c <convert_ph>:
double ph_voltage_buffer[30] = {0};
double pH_low_cal = 2021.0, pH_mid_cal = 1523.0, pH_high_cal= 1135.0, low_ph_solution = 4.0, mid_ph_solution = 6.86, High_ph_solution = 9.18;
double slope = 0, ph_Value_Buf = 0;

double convert_ph(float voltage_mV)	// converts voltage to pH value based on three point calibration
{
 8004a2c:	b5b0      	push	{r4, r5, r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
	if(voltage_mV>pH_mid_cal)
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7fb fd41 	bl	80004bc <__aeabi_f2d>
 8004a3a:	4b4a      	ldr	r3, [pc, #296]	; (8004b64 <convert_ph+0x138>)
 8004a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a40:	f7fc f824 	bl	8000a8c <__aeabi_dcmpgt>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d03b      	beq.n	8004ac2 <convert_ph+0x96>
	{
		slope = (mid_ph_solution-low_ph_solution)/(pH_mid_cal-pH_low_cal);	// if the solution is Acidic calculate the slope of the (calibration_ph_Value_Buf vs calibration_milimvoltage) line  bases on calibration parameters
 8004a4a:	4b47      	ldr	r3, [pc, #284]	; (8004b68 <convert_ph+0x13c>)
 8004a4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a50:	4b46      	ldr	r3, [pc, #280]	; (8004b6c <convert_ph+0x140>)
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	f7fb fbd1 	bl	80001fc <__aeabi_dsub>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4614      	mov	r4, r2
 8004a60:	461d      	mov	r5, r3
 8004a62:	4b40      	ldr	r3, [pc, #256]	; (8004b64 <convert_ph+0x138>)
 8004a64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a68:	4b41      	ldr	r3, [pc, #260]	; (8004b70 <convert_ph+0x144>)
 8004a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6e:	f7fb fbc5 	bl	80001fc <__aeabi_dsub>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4620      	mov	r0, r4
 8004a78:	4629      	mov	r1, r5
 8004a7a:	f7fb fea1 	bl	80007c0 <__aeabi_ddiv>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	493c      	ldr	r1, [pc, #240]	; (8004b74 <convert_ph+0x148>)
 8004a84:	e9c1 2300 	strd	r2, r3, [r1]
		return (slope*(voltage_mV - pH_low_cal)+low_ph_solution);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7fb fd17 	bl	80004bc <__aeabi_f2d>
 8004a8e:	4b38      	ldr	r3, [pc, #224]	; (8004b70 <convert_ph+0x144>)
 8004a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a94:	f7fb fbb2 	bl	80001fc <__aeabi_dsub>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4b34      	ldr	r3, [pc, #208]	; (8004b74 <convert_ph+0x148>)
 8004aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa6:	f7fb fd61 	bl	800056c <__aeabi_dmul>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4610      	mov	r0, r2
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4b2e      	ldr	r3, [pc, #184]	; (8004b6c <convert_ph+0x140>)
 8004ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab8:	f7fb fba2 	bl	8000200 <__adddf3>
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	e04a      	b.n	8004b58 <convert_ph+0x12c>
	}
	else if(voltage_mV<=pH_mid_cal)
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fb fcfa 	bl	80004bc <__aeabi_f2d>
 8004ac8:	4b26      	ldr	r3, [pc, #152]	; (8004b64 <convert_ph+0x138>)
 8004aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ace:	f7fb ffc9 	bl	8000a64 <__aeabi_dcmple>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d03b      	beq.n	8004b50 <convert_ph+0x124>
	{
		slope = (High_ph_solution-mid_ph_solution)/(pH_high_cal-pH_mid_cal);// if the solution is Basic calculate the slope bases just like we did above but for the higher range
 8004ad8:	4b27      	ldr	r3, [pc, #156]	; (8004b78 <convert_ph+0x14c>)
 8004ada:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ade:	4b22      	ldr	r3, [pc, #136]	; (8004b68 <convert_ph+0x13c>)
 8004ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae4:	f7fb fb8a 	bl	80001fc <__aeabi_dsub>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4614      	mov	r4, r2
 8004aee:	461d      	mov	r5, r3
 8004af0:	4b22      	ldr	r3, [pc, #136]	; (8004b7c <convert_ph+0x150>)
 8004af2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004af6:	4b1b      	ldr	r3, [pc, #108]	; (8004b64 <convert_ph+0x138>)
 8004af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afc:	f7fb fb7e 	bl	80001fc <__aeabi_dsub>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4620      	mov	r0, r4
 8004b06:	4629      	mov	r1, r5
 8004b08:	f7fb fe5a 	bl	80007c0 <__aeabi_ddiv>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4918      	ldr	r1, [pc, #96]	; (8004b74 <convert_ph+0x148>)
 8004b12:	e9c1 2300 	strd	r2, r3, [r1]
		return (slope*(voltage_mV - pH_mid_cal)+mid_ph_solution);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fb fcd0 	bl	80004bc <__aeabi_f2d>
 8004b1c:	4b11      	ldr	r3, [pc, #68]	; (8004b64 <convert_ph+0x138>)
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	f7fb fb6b 	bl	80001fc <__aeabi_dsub>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4b11      	ldr	r3, [pc, #68]	; (8004b74 <convert_ph+0x148>)
 8004b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b34:	f7fb fd1a 	bl	800056c <__aeabi_dmul>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4b09      	ldr	r3, [pc, #36]	; (8004b68 <convert_ph+0x13c>)
 8004b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b46:	f7fb fb5b 	bl	8000200 <__adddf3>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	e003      	b.n	8004b58 <convert_ph+0x12c>
	}
	return 0;
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
}
 8004b58:	4610      	mov	r0, r2
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bdb0      	pop	{r4, r5, r7, pc}
 8004b62:	bf00      	nop
 8004b64:	200001f8 	.word	0x200001f8
 8004b68:	20000210 	.word	0x20000210
 8004b6c:	20000208 	.word	0x20000208
 8004b70:	200001f0 	.word	0x200001f0
 8004b74:	20005598 	.word	0x20005598
 8004b78:	20000218 	.word	0x20000218
 8004b7c:	20000200 	.word	0x20000200

08004b80 <calc_dose_steps>:
//extern TIM_HandleTypeDef step_timer;


double steps = 0;
int calc_dose_steps(double miliLiters)	// takes a dose in mls and returns the number of steps for that volume
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	e9c7 0100 	strd	r0, r1, [r7]
	if	   (miliLiters > 0 && miliLiters <= 1)	steps = (1/0.221)*(miliLiters+0.2012)*(1745);
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b96:	f7fb ff79 	bl	8000a8c <__aeabi_dcmpgt>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d028      	beq.n	8004bf2 <calc_dose_steps+0x72>
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	4bbe      	ldr	r3, [pc, #760]	; (8004ea0 <calc_dose_steps+0x320>)
 8004ba6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004baa:	f7fb ff5b 	bl	8000a64 <__aeabi_dcmple>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01e      	beq.n	8004bf2 <calc_dose_steps+0x72>
 8004bb4:	a3ae      	add	r3, pc, #696	; (adr r3, 8004e70 <calc_dose_steps+0x2f0>)
 8004bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bbe:	f7fb fb1f 	bl	8000200 <__adddf3>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	4619      	mov	r1, r3
 8004bca:	a3ab      	add	r3, pc, #684	; (adr r3, 8004e78 <calc_dose_steps+0x2f8>)
 8004bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd0:	f7fb fccc 	bl	800056c <__aeabi_dmul>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4610      	mov	r0, r2
 8004bda:	4619      	mov	r1, r3
 8004bdc:	a3a8      	add	r3, pc, #672	; (adr r3, 8004e80 <calc_dose_steps+0x300>)
 8004bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be2:	f7fb fcc3 	bl	800056c <__aeabi_dmul>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	49ae      	ldr	r1, [pc, #696]	; (8004ea4 <calc_dose_steps+0x324>)
 8004bec:	e9c1 2300 	strd	r2, r3, [r1]
 8004bf0:	e131      	b.n	8004e56 <calc_dose_steps+0x2d6>
	else if(miliLiters > 1 && miliLiters <= 2)	steps = (1/0.221)*(miliLiters+0.2012)*(1790);
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	4baa      	ldr	r3, [pc, #680]	; (8004ea0 <calc_dose_steps+0x320>)
 8004bf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bfc:	f7fb ff46 	bl	8000a8c <__aeabi_dcmpgt>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d029      	beq.n	8004c5a <calc_dose_steps+0xda>
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c12:	f7fb ff27 	bl	8000a64 <__aeabi_dcmple>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01e      	beq.n	8004c5a <calc_dose_steps+0xda>
 8004c1c:	a394      	add	r3, pc, #592	; (adr r3, 8004e70 <calc_dose_steps+0x2f0>)
 8004c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c26:	f7fb faeb 	bl	8000200 <__adddf3>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4610      	mov	r0, r2
 8004c30:	4619      	mov	r1, r3
 8004c32:	a391      	add	r3, pc, #580	; (adr r3, 8004e78 <calc_dose_steps+0x2f8>)
 8004c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c38:	f7fb fc98 	bl	800056c <__aeabi_dmul>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4610      	mov	r0, r2
 8004c42:	4619      	mov	r1, r3
 8004c44:	a390      	add	r3, pc, #576	; (adr r3, 8004e88 <calc_dose_steps+0x308>)
 8004c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4a:	f7fb fc8f 	bl	800056c <__aeabi_dmul>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	4994      	ldr	r1, [pc, #592]	; (8004ea4 <calc_dose_steps+0x324>)
 8004c54:	e9c1 2300 	strd	r2, r3, [r1]
 8004c58:	e0fd      	b.n	8004e56 <calc_dose_steps+0x2d6>
	else if(miliLiters > 2 && miliLiters <= 3)  steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c66:	f7fb ff11 	bl	8000a8c <__aeabi_dcmpgt>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d028      	beq.n	8004cc2 <calc_dose_steps+0x142>
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	4b8c      	ldr	r3, [pc, #560]	; (8004ea8 <calc_dose_steps+0x328>)
 8004c76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c7a:	f7fb fef3 	bl	8000a64 <__aeabi_dcmple>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01e      	beq.n	8004cc2 <calc_dose_steps+0x142>
 8004c84:	a37a      	add	r3, pc, #488	; (adr r3, 8004e70 <calc_dose_steps+0x2f0>)
 8004c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c8e:	f7fb fab7 	bl	8000200 <__adddf3>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4610      	mov	r0, r2
 8004c98:	4619      	mov	r1, r3
 8004c9a:	a377      	add	r3, pc, #476	; (adr r3, 8004e78 <calc_dose_steps+0x2f8>)
 8004c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca0:	f7fb fc64 	bl	800056c <__aeabi_dmul>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4610      	mov	r0, r2
 8004caa:	4619      	mov	r1, r3
 8004cac:	a378      	add	r3, pc, #480	; (adr r3, 8004e90 <calc_dose_steps+0x310>)
 8004cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb2:	f7fb fc5b 	bl	800056c <__aeabi_dmul>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	497a      	ldr	r1, [pc, #488]	; (8004ea4 <calc_dose_steps+0x324>)
 8004cbc:	e9c1 2300 	strd	r2, r3, [r1]
 8004cc0:	e0c9      	b.n	8004e56 <calc_dose_steps+0x2d6>
	else if(miliLiters > 3 && miliLiters <= 4)  steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	4b78      	ldr	r3, [pc, #480]	; (8004ea8 <calc_dose_steps+0x328>)
 8004cc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ccc:	f7fb fede 	bl	8000a8c <__aeabi_dcmpgt>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d028      	beq.n	8004d28 <calc_dose_steps+0x1a8>
 8004cd6:	f04f 0200 	mov.w	r2, #0
 8004cda:	4b74      	ldr	r3, [pc, #464]	; (8004eac <calc_dose_steps+0x32c>)
 8004cdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ce0:	f7fb fec0 	bl	8000a64 <__aeabi_dcmple>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d01e      	beq.n	8004d28 <calc_dose_steps+0x1a8>
 8004cea:	a361      	add	r3, pc, #388	; (adr r3, 8004e70 <calc_dose_steps+0x2f0>)
 8004cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cf4:	f7fb fa84 	bl	8000200 <__adddf3>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4610      	mov	r0, r2
 8004cfe:	4619      	mov	r1, r3
 8004d00:	a35d      	add	r3, pc, #372	; (adr r3, 8004e78 <calc_dose_steps+0x2f8>)
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	f7fb fc31 	bl	800056c <__aeabi_dmul>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	4610      	mov	r0, r2
 8004d10:	4619      	mov	r1, r3
 8004d12:	a35f      	add	r3, pc, #380	; (adr r3, 8004e90 <calc_dose_steps+0x310>)
 8004d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d18:	f7fb fc28 	bl	800056c <__aeabi_dmul>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4960      	ldr	r1, [pc, #384]	; (8004ea4 <calc_dose_steps+0x324>)
 8004d22:	e9c1 2300 	strd	r2, r3, [r1]
 8004d26:	e096      	b.n	8004e56 <calc_dose_steps+0x2d6>
	else if(miliLiters > 4 && miliLiters <= 5)  steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	4b5f      	ldr	r3, [pc, #380]	; (8004eac <calc_dose_steps+0x32c>)
 8004d2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d32:	f7fb feab 	bl	8000a8c <__aeabi_dcmpgt>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d028      	beq.n	8004d8e <calc_dose_steps+0x20e>
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	4b5b      	ldr	r3, [pc, #364]	; (8004eb0 <calc_dose_steps+0x330>)
 8004d42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d46:	f7fb fe8d 	bl	8000a64 <__aeabi_dcmple>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d01e      	beq.n	8004d8e <calc_dose_steps+0x20e>
 8004d50:	a347      	add	r3, pc, #284	; (adr r3, 8004e70 <calc_dose_steps+0x2f0>)
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d5a:	f7fb fa51 	bl	8000200 <__adddf3>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	4610      	mov	r0, r2
 8004d64:	4619      	mov	r1, r3
 8004d66:	a344      	add	r3, pc, #272	; (adr r3, 8004e78 <calc_dose_steps+0x2f8>)
 8004d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6c:	f7fb fbfe 	bl	800056c <__aeabi_dmul>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	4610      	mov	r0, r2
 8004d76:	4619      	mov	r1, r3
 8004d78:	a345      	add	r3, pc, #276	; (adr r3, 8004e90 <calc_dose_steps+0x310>)
 8004d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7e:	f7fb fbf5 	bl	800056c <__aeabi_dmul>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4947      	ldr	r1, [pc, #284]	; (8004ea4 <calc_dose_steps+0x324>)
 8004d88:	e9c1 2300 	strd	r2, r3, [r1]
 8004d8c:	e063      	b.n	8004e56 <calc_dose_steps+0x2d6>
	else if(miliLiters > 5 && miliLiters <= 30) steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	4b47      	ldr	r3, [pc, #284]	; (8004eb0 <calc_dose_steps+0x330>)
 8004d94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d98:	f7fb fe78 	bl	8000a8c <__aeabi_dcmpgt>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d028      	beq.n	8004df4 <calc_dose_steps+0x274>
 8004da2:	f04f 0200 	mov.w	r2, #0
 8004da6:	4b43      	ldr	r3, [pc, #268]	; (8004eb4 <calc_dose_steps+0x334>)
 8004da8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dac:	f7fb fe5a 	bl	8000a64 <__aeabi_dcmple>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d01e      	beq.n	8004df4 <calc_dose_steps+0x274>
 8004db6:	a32e      	add	r3, pc, #184	; (adr r3, 8004e70 <calc_dose_steps+0x2f0>)
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dc0:	f7fb fa1e 	bl	8000200 <__adddf3>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4610      	mov	r0, r2
 8004dca:	4619      	mov	r1, r3
 8004dcc:	a32a      	add	r3, pc, #168	; (adr r3, 8004e78 <calc_dose_steps+0x2f8>)
 8004dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd2:	f7fb fbcb 	bl	800056c <__aeabi_dmul>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4610      	mov	r0, r2
 8004ddc:	4619      	mov	r1, r3
 8004dde:	a32c      	add	r3, pc, #176	; (adr r3, 8004e90 <calc_dose_steps+0x310>)
 8004de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de4:	f7fb fbc2 	bl	800056c <__aeabi_dmul>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	492d      	ldr	r1, [pc, #180]	; (8004ea4 <calc_dose_steps+0x324>)
 8004dee:	e9c1 2300 	strd	r2, r3, [r1]
 8004df2:	e030      	b.n	8004e56 <calc_dose_steps+0x2d6>
	else if(miliLiters == 0) steps = 0;
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e00:	f7fb fe1c 	bl	8000a3c <__aeabi_dcmpeq>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d007      	beq.n	8004e1a <calc_dose_steps+0x29a>
 8004e0a:	4926      	ldr	r1, [pc, #152]	; (8004ea4 <calc_dose_steps+0x324>)
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	e9c1 2300 	strd	r2, r3, [r1]
 8004e18:	e01d      	b.n	8004e56 <calc_dose_steps+0x2d6>
	else steps = (1/0.221)*(miliLiters+0.2012)*(1915);
 8004e1a:	a315      	add	r3, pc, #84	; (adr r3, 8004e70 <calc_dose_steps+0x2f0>)
 8004e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e24:	f7fb f9ec 	bl	8000200 <__adddf3>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	4619      	mov	r1, r3
 8004e30:	a311      	add	r3, pc, #68	; (adr r3, 8004e78 <calc_dose_steps+0x2f8>)
 8004e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e36:	f7fb fb99 	bl	800056c <__aeabi_dmul>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4610      	mov	r0, r2
 8004e40:	4619      	mov	r1, r3
 8004e42:	a315      	add	r3, pc, #84	; (adr r3, 8004e98 <calc_dose_steps+0x318>)
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	f7fb fb90 	bl	800056c <__aeabi_dmul>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4914      	ldr	r1, [pc, #80]	; (8004ea4 <calc_dose_steps+0x324>)
 8004e52:	e9c1 2300 	strd	r2, r3, [r1]
	return (int)steps;
 8004e56:	4b13      	ldr	r3, [pc, #76]	; (8004ea4 <calc_dose_steps+0x324>)
 8004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	4619      	mov	r1, r3
 8004e60:	f7fb fe34 	bl	8000acc <__aeabi_d2iz>
 8004e64:	4603      	mov	r3, r0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	edfa43fe 	.word	0xedfa43fe
 8004e74:	3fc9c0eb 	.word	0x3fc9c0eb
 8004e78:	f2197bf2 	.word	0xf2197bf2
 8004e7c:	4012197b 	.word	0x4012197b
 8004e80:	00000000 	.word	0x00000000
 8004e84:	409b4400 	.word	0x409b4400
 8004e88:	00000000 	.word	0x00000000
 8004e8c:	409bf800 	.word	0x409bf800
 8004e90:	00000000 	.word	0x00000000
 8004e94:	409ef000 	.word	0x409ef000
 8004e98:	00000000 	.word	0x00000000
 8004e9c:	409dec00 	.word	0x409dec00
 8004ea0:	3ff00000 	.word	0x3ff00000
 8004ea4:	200055a0 	.word	0x200055a0
 8004ea8:	40080000 	.word	0x40080000
 8004eac:	40100000 	.word	0x40100000
 8004eb0:	40140000 	.word	0x40140000
 8004eb4:	403e0000 	.word	0x403e0000

08004eb8 <disablePumps>:

void disablePumps()	// disable all pumps
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,nutrient_enable_Pin,GPIO_PIN_SET);
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	2180      	movs	r1, #128	; 0x80
 8004ec0:	4807      	ldr	r0, [pc, #28]	; (8004ee0 <disablePumps+0x28>)
 8004ec2:	f002 fae4 	bl	800748e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,ph_down_enable_Pin,GPIO_PIN_SET);
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	2140      	movs	r1, #64	; 0x40
 8004eca:	4805      	ldr	r0, [pc, #20]	; (8004ee0 <disablePumps+0x28>)
 8004ecc:	f002 fadf 	bl	800748e <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(GPIOE,ph_up_enable_Pin,GPIO_PIN_SET);
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	2120      	movs	r1, #32
 8004ed4:	4802      	ldr	r0, [pc, #8]	; (8004ee0 <disablePumps+0x28>)
 8004ed6:	f002 fada 	bl	800748e <HAL_GPIO_WritePin>

}
 8004eda:	bf00      	nop
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	40021000 	.word	0x40021000

08004ee4 <enablePumps>:

void enablePumps(int nutrient_steps, int ph_up_steps, int ph_down_steps)	// enable only the pumps that are going to dose
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
	if(nutrient_steps>0)HAL_GPIO_WritePin(GPIOE,nutrient_enable_Pin,GPIO_PIN_RESET);		// enable nutrient pump
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	dd04      	ble.n	8004f00 <enablePumps+0x1c>
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2180      	movs	r1, #128	; 0x80
 8004efa:	480b      	ldr	r0, [pc, #44]	; (8004f28 <enablePumps+0x44>)
 8004efc:	f002 fac7 	bl	800748e <HAL_GPIO_WritePin>
	if(ph_down_steps>0)	HAL_GPIO_WritePin(GPIOE,ph_down_enable_Pin,GPIO_PIN_RESET);			// enable ph down pump
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	dd04      	ble.n	8004f10 <enablePumps+0x2c>
 8004f06:	2200      	movs	r2, #0
 8004f08:	2140      	movs	r1, #64	; 0x40
 8004f0a:	4807      	ldr	r0, [pc, #28]	; (8004f28 <enablePumps+0x44>)
 8004f0c:	f002 fabf 	bl	800748e <HAL_GPIO_WritePin>
	if(ph_up_steps>0)	HAL_GPIO_WritePin(GPIOE,ph_up_enable_Pin,GPIO_PIN_RESET);			// enable ph up pump
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	dd04      	ble.n	8004f20 <enablePumps+0x3c>
 8004f16:	2200      	movs	r2, #0
 8004f18:	2120      	movs	r1, #32
 8004f1a:	4803      	ldr	r0, [pc, #12]	; (8004f28 <enablePumps+0x44>)
 8004f1c:	f002 fab7 	bl	800748e <HAL_GPIO_WritePin>
}
 8004f20:	bf00      	nop
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40021000 	.word	0x40021000

08004f2c <step>:

void step(int nutrient_steps, int ph_up_steps, int ph_down_steps)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
	 DWT_Delay_Init();
 8004f38:	f000 fda4 	bl	8005a84 <DWT_Delay_Init>

	int most_steps = nutrient_steps;										// find the largest dose in steps. Will be used in step loop
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	617b      	str	r3, [r7, #20]
	if(ph_up_steps>most_steps) most_steps 	= ph_up_steps;
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	dd01      	ble.n	8004f4c <step+0x20>
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	617b      	str	r3, [r7, #20]
	if(ph_down_steps>most_steps) most_steps = ph_down_steps;
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	dd01      	ble.n	8004f58 <step+0x2c>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	617b      	str	r3, [r7, #20]
	enablePumps(nutrient_steps,ph_up_steps,ph_down_steps);					// enable only the pumps that are going to dose
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f7ff ffc1 	bl	8004ee4 <enablePumps>

	for(int i = 0; i<most_steps; i++)										// step each pump their respective number of steps.
 8004f62:	2300      	movs	r3, #0
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	e038      	b.n	8004fda <step+0xae>
	{
		if(i<nutrient_steps) HAL_GPIO_TogglePin(GPIOE, nutrient_pump_Pin);
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	da03      	bge.n	8004f78 <step+0x4c>
 8004f70:	2110      	movs	r1, #16
 8004f72:	481f      	ldr	r0, [pc, #124]	; (8004ff0 <step+0xc4>)
 8004f74:	f002 faa3 	bl	80074be <HAL_GPIO_TogglePin>
		if(i<ph_up_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_up_pump_Pin);
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	da03      	bge.n	8004f88 <step+0x5c>
 8004f80:	2104      	movs	r1, #4
 8004f82:	481b      	ldr	r0, [pc, #108]	; (8004ff0 <step+0xc4>)
 8004f84:	f002 fa9b 	bl	80074be <HAL_GPIO_TogglePin>
		if(i<ph_down_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_down_pump_Pin);
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	da03      	bge.n	8004f98 <step+0x6c>
 8004f90:	2108      	movs	r1, #8
 8004f92:	4817      	ldr	r0, [pc, #92]	; (8004ff0 <step+0xc4>)
 8004f94:	f002 fa93 	bl	80074be <HAL_GPIO_TogglePin>
		 DWT_Delay_us(40);
 8004f98:	2028      	movs	r0, #40	; 0x28
 8004f9a:	f000 fda3 	bl	8005ae4 <DWT_Delay_us>
		if(i<nutrient_steps) HAL_GPIO_TogglePin(GPIOE, nutrient_pump_Pin);
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	da03      	bge.n	8004fae <step+0x82>
 8004fa6:	2110      	movs	r1, #16
 8004fa8:	4811      	ldr	r0, [pc, #68]	; (8004ff0 <step+0xc4>)
 8004faa:	f002 fa88 	bl	80074be <HAL_GPIO_TogglePin>
		if(i<ph_up_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_up_pump_Pin);
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	da03      	bge.n	8004fbe <step+0x92>
 8004fb6:	2104      	movs	r1, #4
 8004fb8:	480d      	ldr	r0, [pc, #52]	; (8004ff0 <step+0xc4>)
 8004fba:	f002 fa80 	bl	80074be <HAL_GPIO_TogglePin>
		if(i<ph_down_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_down_pump_Pin);
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	da03      	bge.n	8004fce <step+0xa2>
 8004fc6:	2108      	movs	r1, #8
 8004fc8:	4809      	ldr	r0, [pc, #36]	; (8004ff0 <step+0xc4>)
 8004fca:	f002 fa78 	bl	80074be <HAL_GPIO_TogglePin>
		 DWT_Delay_us(40);
 8004fce:	2028      	movs	r0, #40	; 0x28
 8004fd0:	f000 fd88 	bl	8005ae4 <DWT_Delay_us>
	for(int i = 0; i<most_steps; i++)										// step each pump their respective number of steps.
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	dbc2      	blt.n	8004f68 <step+0x3c>
	}
	disablePumps();
 8004fe2:	f7ff ff69 	bl	8004eb8 <disablePumps>
}
 8004fe6:	bf00      	nop
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40021000 	.word	0x40021000

08004ff4 <readWaterTemp>:

int TDS_computation_buffer[80] = {0}, valid_value_pH  = 0, valid_value_TDS  = 0;
double TDS_voltage = 0, compensationCoefficient = 0, compensationVolatge = 0, DMA_pH_sample_avg = 0, mili_voltage, Humidity = 0;

void readWaterTemp()
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
	taskENTER_CRITICAL();
 8004ff8:	f00f fed0 	bl	8014d9c <vPortEnterCritical>
	{
		 DWT_Delay_Init();
 8004ffc:	f000 fd42 	bl	8005a84 <DWT_Delay_Init>
		 HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 1);
 8005000:	2201      	movs	r2, #1
 8005002:	2104      	movs	r1, #4
 8005004:	4828      	ldr	r0, [pc, #160]	; (80050a8 <readWaterTemp+0xb4>)
 8005006:	f002 fa42 	bl	800748e <HAL_GPIO_WritePin>
		 DWT_Delay_us(100);
 800500a:	2064      	movs	r0, #100	; 0x64
 800500c:	f000 fd6a 	bl	8005ae4 <DWT_Delay_us>
		 Presence = DS18B20_Start();
 8005010:	f000 fd90 	bl	8005b34 <DS18B20_Start>
 8005014:	4603      	mov	r3, r0
 8005016:	461a      	mov	r2, r3
 8005018:	4b24      	ldr	r3, [pc, #144]	; (80050ac <readWaterTemp+0xb8>)
 800501a:	701a      	strb	r2, [r3, #0]

		 DWT_Delay_us (300);
 800501c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005020:	f000 fd60 	bl	8005ae4 <DWT_Delay_us>
		 DS18B20_Write (0xCC);  // skip ROM
 8005024:	20cc      	movs	r0, #204	; 0xcc
 8005026:	f000 fdb5 	bl	8005b94 <DS18B20_Write>
		 DS18B20_Write (0x44);  // convert t
 800502a:	2044      	movs	r0, #68	; 0x44
 800502c:	f000 fdb2 	bl	8005b94 <DS18B20_Write>

		 Presence = DS18B20_Start();
 8005030:	f000 fd80 	bl	8005b34 <DS18B20_Start>
 8005034:	4603      	mov	r3, r0
 8005036:	461a      	mov	r2, r3
 8005038:	4b1c      	ldr	r3, [pc, #112]	; (80050ac <readWaterTemp+0xb8>)
 800503a:	701a      	strb	r2, [r3, #0]
		 DWT_Delay_us (300);
 800503c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005040:	f000 fd50 	bl	8005ae4 <DWT_Delay_us>
		 DS18B20_Write (0xCC);  // skip ROM
 8005044:	20cc      	movs	r0, #204	; 0xcc
 8005046:	f000 fda5 	bl	8005b94 <DS18B20_Write>
		 DS18B20_Write (0xBE);  // Read Scratch-pad
 800504a:	20be      	movs	r0, #190	; 0xbe
 800504c:	f000 fda2 	bl	8005b94 <DS18B20_Write>

		 Temp_byte1 = DS18B20_Read();
 8005050:	f000 fde6 	bl	8005c20 <DS18B20_Read>
 8005054:	4603      	mov	r3, r0
 8005056:	461a      	mov	r2, r3
 8005058:	4b15      	ldr	r3, [pc, #84]	; (80050b0 <readWaterTemp+0xbc>)
 800505a:	701a      	strb	r2, [r3, #0]
		 Temp_byte2 = DS18B20_Read();
 800505c:	f000 fde0 	bl	8005c20 <DS18B20_Read>
 8005060:	4603      	mov	r3, r0
 8005062:	461a      	mov	r2, r3
 8005064:	4b13      	ldr	r3, [pc, #76]	; (80050b4 <readWaterTemp+0xc0>)
 8005066:	701a      	strb	r2, [r3, #0]
		 TEMP = (Temp_byte2<<8)|Temp_byte1;
 8005068:	4b12      	ldr	r3, [pc, #72]	; (80050b4 <readWaterTemp+0xc0>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	021b      	lsls	r3, r3, #8
 800506e:	b21a      	sxth	r2, r3
 8005070:	4b0f      	ldr	r3, [pc, #60]	; (80050b0 <readWaterTemp+0xbc>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	b21b      	sxth	r3, r3
 8005076:	4313      	orrs	r3, r2
 8005078:	b21b      	sxth	r3, r3
 800507a:	b29a      	uxth	r2, r3
 800507c:	4b0e      	ldr	r3, [pc, #56]	; (80050b8 <readWaterTemp+0xc4>)
 800507e:	801a      	strh	r2, [r3, #0]
		 water_temp = (double)TEMP/16;
 8005080:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <readWaterTemp+0xc4>)
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	4618      	mov	r0, r3
 8005086:	f7fb f9f7 	bl	8000478 <__aeabi_ui2d>
 800508a:	f04f 0200 	mov.w	r2, #0
 800508e:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <readWaterTemp+0xc8>)
 8005090:	f7fb fb96 	bl	80007c0 <__aeabi_ddiv>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	4909      	ldr	r1, [pc, #36]	; (80050c0 <readWaterTemp+0xcc>)
 800509a:	e9c1 2300 	strd	r2, r3, [r1]
	} taskEXIT_CRITICAL();
 800509e:	f00f fead 	bl	8014dfc <vPortExitCritical>
}
 80050a2:	bf00      	nop
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40020400 	.word	0x40020400
 80050ac:	200055a8 	.word	0x200055a8
 80050b0:	2000d8ca 	.word	0x2000d8ca
 80050b4:	2000d8d8 	.word	0x2000d8d8
 80050b8:	2000d8c8 	.word	0x2000d8c8
 80050bc:	40300000 	.word	0x40300000
 80050c0:	200017d0 	.word	0x200017d0
 80050c4:	00000000 	.word	0x00000000

080050c8 <readWaterTDS>:


void readWaterTDS() // Get nutrient level
{
 80050c8:	b5b0      	push	{r4, r5, r7, lr}
 80050ca:	af00      	add	r7, sp, #0
	TDS_voltage = getMedianNum(TDS_computation_buffer,40)*(double)0.000805664; 																					 // read the analog value more stable by averaging and convert to voltage value
 80050cc:	2128      	movs	r1, #40	; 0x28
 80050ce:	4854      	ldr	r0, [pc, #336]	; (8005220 <readWaterTDS+0x158>)
 80050d0:	f7fc f908 	bl	80012e4 <getMedianNum>
 80050d4:	4603      	mov	r3, r0
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fb f9de 	bl	8000498 <__aeabi_i2d>
 80050dc:	a346      	add	r3, pc, #280	; (adr r3, 80051f8 <readWaterTDS+0x130>)
 80050de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e2:	f7fb fa43 	bl	800056c <__aeabi_dmul>
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	494e      	ldr	r1, [pc, #312]	; (8005224 <readWaterTDS+0x15c>)
 80050ec:	e9c1 2300 	strd	r2, r3, [r1]
	compensationCoefficient=1.0+0.02*(water_temp-25.0);   																								    		 //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
 80050f0:	4b4d      	ldr	r3, [pc, #308]	; (8005228 <readWaterTDS+0x160>)
 80050f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	4b4c      	ldr	r3, [pc, #304]	; (800522c <readWaterTDS+0x164>)
 80050fc:	f7fb f87e 	bl	80001fc <__aeabi_dsub>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4610      	mov	r0, r2
 8005106:	4619      	mov	r1, r3
 8005108:	a33d      	add	r3, pc, #244	; (adr r3, 8005200 <readWaterTDS+0x138>)
 800510a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510e:	f7fb fa2d 	bl	800056c <__aeabi_dmul>
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	4610      	mov	r0, r2
 8005118:	4619      	mov	r1, r3
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	4b44      	ldr	r3, [pc, #272]	; (8005230 <readWaterTDS+0x168>)
 8005120:	f7fb f86e 	bl	8000200 <__adddf3>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4942      	ldr	r1, [pc, #264]	; (8005234 <readWaterTDS+0x16c>)
 800512a:	e9c1 2300 	strd	r2, r3, [r1]
	compensationVolatge=TDS_voltage/compensationCoefficient;  																									 //temperature compensation
 800512e:	4b3d      	ldr	r3, [pc, #244]	; (8005224 <readWaterTDS+0x15c>)
 8005130:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005134:	4b3f      	ldr	r3, [pc, #252]	; (8005234 <readWaterTDS+0x16c>)
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	f7fb fb41 	bl	80007c0 <__aeabi_ddiv>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	493d      	ldr	r1, [pc, #244]	; (8005238 <readWaterTDS+0x170>)
 8005144:	e9c1 2300 	strd	r2, r3, [r1]
	TDS =(133.42*compensationVolatge*compensationVolatge*compensationVolatge - 255.86*compensationVolatge*compensationVolatge + 857.39*compensationVolatge)*0.5; //convert voltage value to tds
 8005148:	4b3b      	ldr	r3, [pc, #236]	; (8005238 <readWaterTDS+0x170>)
 800514a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800514e:	a32e      	add	r3, pc, #184	; (adr r3, 8005208 <readWaterTDS+0x140>)
 8005150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005154:	f7fb fa0a 	bl	800056c <__aeabi_dmul>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4610      	mov	r0, r2
 800515e:	4619      	mov	r1, r3
 8005160:	4b35      	ldr	r3, [pc, #212]	; (8005238 <readWaterTDS+0x170>)
 8005162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005166:	f7fb fa01 	bl	800056c <__aeabi_dmul>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4610      	mov	r0, r2
 8005170:	4619      	mov	r1, r3
 8005172:	4b31      	ldr	r3, [pc, #196]	; (8005238 <readWaterTDS+0x170>)
 8005174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005178:	f7fb f9f8 	bl	800056c <__aeabi_dmul>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4614      	mov	r4, r2
 8005182:	461d      	mov	r5, r3
 8005184:	4b2c      	ldr	r3, [pc, #176]	; (8005238 <readWaterTDS+0x170>)
 8005186:	e9d3 0100 	ldrd	r0, r1, [r3]
 800518a:	a321      	add	r3, pc, #132	; (adr r3, 8005210 <readWaterTDS+0x148>)
 800518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005190:	f7fb f9ec 	bl	800056c <__aeabi_dmul>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4610      	mov	r0, r2
 800519a:	4619      	mov	r1, r3
 800519c:	4b26      	ldr	r3, [pc, #152]	; (8005238 <readWaterTDS+0x170>)
 800519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a2:	f7fb f9e3 	bl	800056c <__aeabi_dmul>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4620      	mov	r0, r4
 80051ac:	4629      	mov	r1, r5
 80051ae:	f7fb f825 	bl	80001fc <__aeabi_dsub>
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	4614      	mov	r4, r2
 80051b8:	461d      	mov	r5, r3
 80051ba:	4b1f      	ldr	r3, [pc, #124]	; (8005238 <readWaterTDS+0x170>)
 80051bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051c0:	a315      	add	r3, pc, #84	; (adr r3, 8005218 <readWaterTDS+0x150>)
 80051c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c6:	f7fb f9d1 	bl	800056c <__aeabi_dmul>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4620      	mov	r0, r4
 80051d0:	4629      	mov	r1, r5
 80051d2:	f7fb f815 	bl	8000200 <__adddf3>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4610      	mov	r0, r2
 80051dc:	4619      	mov	r1, r3
 80051de:	f04f 0200 	mov.w	r2, #0
 80051e2:	4b16      	ldr	r3, [pc, #88]	; (800523c <readWaterTDS+0x174>)
 80051e4:	f7fb f9c2 	bl	800056c <__aeabi_dmul>
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	4914      	ldr	r1, [pc, #80]	; (8005240 <readWaterTDS+0x178>)
 80051ee:	e9c1 2300 	strd	r2, r3, [r1]
}
 80051f2:	bf00      	nop
 80051f4:	bdb0      	pop	{r4, r5, r7, pc}
 80051f6:	bf00      	nop
 80051f8:	440a4e96 	.word	0x440a4e96
 80051fc:	3f4a6666 	.word	0x3f4a6666
 8005200:	47ae147b 	.word	0x47ae147b
 8005204:	3f947ae1 	.word	0x3f947ae1
 8005208:	a3d70a3d 	.word	0xa3d70a3d
 800520c:	4060ad70 	.word	0x4060ad70
 8005210:	1eb851ec 	.word	0x1eb851ec
 8005214:	406ffb85 	.word	0x406ffb85
 8005218:	b851eb85 	.word	0xb851eb85
 800521c:	408acb1e 	.word	0x408acb1e
 8005220:	200055ac 	.word	0x200055ac
 8005224:	200056f8 	.word	0x200056f8
 8005228:	200017d0 	.word	0x200017d0
 800522c:	40390000 	.word	0x40390000
 8005230:	3ff00000 	.word	0x3ff00000
 8005234:	20005700 	.word	0x20005700
 8005238:	20005708 	.word	0x20005708
 800523c:	3fe00000 	.word	0x3fe00000
 8005240:	200017c0 	.word	0x200017c0

08005244 <get_nutrient_ph_value>:


void get_nutrient_ph_value()	// gets nutrient and ph values from the ADC DMA buffer and place it in a buffer
{
 8005244:	b5b0      	push	{r4, r5, r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
	valid_value_pH = 0;
 800524a:	4b30      	ldr	r3, [pc, #192]	; (800530c <get_nutrient_ph_value+0xc8>)
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
	valid_value_TDS = 0;
 8005250:	4b2f      	ldr	r3, [pc, #188]	; (8005310 <get_nutrient_ph_value+0xcc>)
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
	DMA_pH_sample_avg = 0;
 8005256:	492f      	ldr	r1, [pc, #188]	; (8005314 <get_nutrient_ph_value+0xd0>)
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	e9c1 2300 	strd	r2, r3, [r1]
	taskENTER_CRITICAL();
 8005264:	f00f fd9a 	bl	8014d9c <vPortEnterCritical>
	{
		for(int j = 0; j<80; j++ )
 8005268:	2300      	movs	r3, #0
 800526a:	607b      	str	r3, [r7, #4]
 800526c:	e031      	b.n	80052d2 <get_nutrient_ph_value+0x8e>
		{
			if(j%2 == 0 )//&& nutrient_ph_values[j] < 80)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10e      	bne.n	8005296 <get_nutrient_ph_value+0x52>
			{
				TDS_computation_buffer[valid_value_TDS] = nutrient_ph_values[j];
 8005278:	4a27      	ldr	r2, [pc, #156]	; (8005318 <get_nutrient_ph_value+0xd4>)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005280:	4b23      	ldr	r3, [pc, #140]	; (8005310 <get_nutrient_ph_value+0xcc>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4611      	mov	r1, r2
 8005286:	4a25      	ldr	r2, [pc, #148]	; (800531c <get_nutrient_ph_value+0xd8>)
 8005288:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				valid_value_TDS++;
 800528c:	4b20      	ldr	r3, [pc, #128]	; (8005310 <get_nutrient_ph_value+0xcc>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3301      	adds	r3, #1
 8005292:	4a1f      	ldr	r2, [pc, #124]	; (8005310 <get_nutrient_ph_value+0xcc>)
 8005294:	6013      	str	r3, [r2, #0]
			}
			if(j%2 != 0)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d015      	beq.n	80052cc <get_nutrient_ph_value+0x88>
			{
				DMA_pH_sample_avg += nutrient_ph_values[j];
 80052a0:	4a1d      	ldr	r2, [pc, #116]	; (8005318 <get_nutrient_ph_value+0xd4>)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fb f8e5 	bl	8000478 <__aeabi_ui2d>
 80052ae:	4b19      	ldr	r3, [pc, #100]	; (8005314 <get_nutrient_ph_value+0xd0>)
 80052b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b4:	f7fa ffa4 	bl	8000200 <__adddf3>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4915      	ldr	r1, [pc, #84]	; (8005314 <get_nutrient_ph_value+0xd0>)
 80052be:	e9c1 2300 	strd	r2, r3, [r1]
				valid_value_pH++;
 80052c2:	4b12      	ldr	r3, [pc, #72]	; (800530c <get_nutrient_ph_value+0xc8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3301      	adds	r3, #1
 80052c8:	4a10      	ldr	r2, [pc, #64]	; (800530c <get_nutrient_ph_value+0xc8>)
 80052ca:	6013      	str	r3, [r2, #0]
		for(int j = 0; j<80; j++ )
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3301      	adds	r3, #1
 80052d0:	607b      	str	r3, [r7, #4]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b4f      	cmp	r3, #79	; 0x4f
 80052d6:	ddca      	ble.n	800526e <get_nutrient_ph_value+0x2a>
			}
		}
	}
	taskEXIT_CRITICAL();
 80052d8:	f00f fd90 	bl	8014dfc <vPortExitCritical>
	DMA_pH_sample_avg = DMA_pH_sample_avg/valid_value_pH;
 80052dc:	4b0d      	ldr	r3, [pc, #52]	; (8005314 <get_nutrient_ph_value+0xd0>)
 80052de:	e9d3 4500 	ldrd	r4, r5, [r3]
 80052e2:	4b0a      	ldr	r3, [pc, #40]	; (800530c <get_nutrient_ph_value+0xc8>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fb f8d6 	bl	8000498 <__aeabi_i2d>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4620      	mov	r0, r4
 80052f2:	4629      	mov	r1, r5
 80052f4:	f7fb fa64 	bl	80007c0 <__aeabi_ddiv>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4905      	ldr	r1, [pc, #20]	; (8005314 <get_nutrient_ph_value+0xd0>)
 80052fe:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005302:	bf00      	nop
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bdb0      	pop	{r4, r5, r7, pc}
 800530a:	bf00      	nop
 800530c:	200056ec 	.word	0x200056ec
 8005310:	200056f0 	.word	0x200056f0
 8005314:	20005710 	.word	0x20005710
 8005318:	20005410 	.word	0x20005410
 800531c:	200055ac 	.word	0x200055ac

08005320 <readPH>:

}


void readPH()
{
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0
	mili_voltage = ((DMA_pH_sample_avg/4096.0)*3.3)*1000;
 8005324:	4b1a      	ldr	r3, [pc, #104]	; (8005390 <readPH+0x70>)
 8005326:	e9d3 0100 	ldrd	r0, r1, [r3]
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	4b19      	ldr	r3, [pc, #100]	; (8005394 <readPH+0x74>)
 8005330:	f7fb fa46 	bl	80007c0 <__aeabi_ddiv>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4610      	mov	r0, r2
 800533a:	4619      	mov	r1, r3
 800533c:	a312      	add	r3, pc, #72	; (adr r3, 8005388 <readPH+0x68>)
 800533e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005342:	f7fb f913 	bl	800056c <__aeabi_dmul>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4610      	mov	r0, r2
 800534c:	4619      	mov	r1, r3
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	4b11      	ldr	r3, [pc, #68]	; (8005398 <readPH+0x78>)
 8005354:	f7fb f90a 	bl	800056c <__aeabi_dmul>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	490f      	ldr	r1, [pc, #60]	; (800539c <readPH+0x7c>)
 800535e:	e9c1 2300 	strd	r2, r3, [r1]
	pH = convert_ph(mili_voltage);
 8005362:	4b0e      	ldr	r3, [pc, #56]	; (800539c <readPH+0x7c>)
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	4610      	mov	r0, r2
 800536a:	4619      	mov	r1, r3
 800536c:	f7fb fbf6 	bl	8000b5c <__aeabi_d2f>
 8005370:	4603      	mov	r3, r0
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff fb5a 	bl	8004a2c <convert_ph>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	4908      	ldr	r1, [pc, #32]	; (80053a0 <readPH+0x80>)
 800537e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005382:	bf00      	nop
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	66666666 	.word	0x66666666
 800538c:	400a6666 	.word	0x400a6666
 8005390:	20005710 	.word	0x20005710
 8005394:	40b00000 	.word	0x40b00000
 8005398:	408f4000 	.word	0x408f4000
 800539c:	2000d8d0 	.word	0x2000d8d0
 80053a0:	200017c8 	.word	0x200017c8

080053a4 <getSensorValues>:


void getSensorValues()
{
 80053a4:	b5b0      	push	{r4, r5, r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0

	for(int checkSamples = 0; checkSamples<num_sensor_samples; checkSamples++)			   // sample TDS and PH every half second for 30 times
 80053aa:	2300      	movs	r3, #0
 80053ac:	607b      	str	r3, [r7, #4]
 80053ae:	e01d      	b.n	80053ec <getSensorValues+0x48>
	{
		get_nutrient_ph_value();
 80053b0:	f7ff ff48 	bl	8005244 <get_nutrient_ph_value>
		readWaterTDS();
 80053b4:	f7ff fe88 	bl	80050c8 <readWaterTDS>
		readPH();
 80053b8:	f7ff ffb2 	bl	8005320 <readPH>

		sample_array_TDS[checkSamples] = TDS;
 80053bc:	4b3a      	ldr	r3, [pc, #232]	; (80054a8 <getSensorValues+0x104>)
 80053be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c2:	483a      	ldr	r0, [pc, #232]	; (80054ac <getSensorValues+0x108>)
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	00c9      	lsls	r1, r1, #3
 80053c8:	4401      	add	r1, r0
 80053ca:	e9c1 2300 	strd	r2, r3, [r1]
		sample_array_pH[checkSamples] = pH;
 80053ce:	4b38      	ldr	r3, [pc, #224]	; (80054b0 <getSensorValues+0x10c>)
 80053d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d4:	4837      	ldr	r0, [pc, #220]	; (80054b4 <getSensorValues+0x110>)
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	00c9      	lsls	r1, r1, #3
 80053da:	4401      	add	r1, r0
 80053dc:	e9c1 2300 	strd	r2, r3, [r1]
		osDelay(10);
 80053e0:	200a      	movs	r0, #10
 80053e2:	f00d fa0a 	bl	80127fa <osDelay>
	for(int checkSamples = 0; checkSamples<num_sensor_samples; checkSamples++)			   // sample TDS and PH every half second for 30 times
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3301      	adds	r3, #1
 80053ea:	607b      	str	r3, [r7, #4]
 80053ec:	4b32      	ldr	r3, [pc, #200]	; (80054b8 <getSensorValues+0x114>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	dbdc      	blt.n	80053b0 <getSensorValues+0xc>
	}
	for(int checkSamples = 0; checkSamples<num_sensor_samples; checkSamples++)			   // sample TDS and PH every half second for 30 times
 80053f6:	2300      	movs	r3, #0
 80053f8:	603b      	str	r3, [r7, #0]
 80053fa:	e022      	b.n	8005442 <getSensorValues+0x9e>
	{
		TDS += sample_array_TDS[checkSamples];
 80053fc:	4a2b      	ldr	r2, [pc, #172]	; (80054ac <getSensorValues+0x108>)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	4413      	add	r3, r2
 8005404:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005408:	4b27      	ldr	r3, [pc, #156]	; (80054a8 <getSensorValues+0x104>)
 800540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540e:	f7fa fef7 	bl	8000200 <__adddf3>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4924      	ldr	r1, [pc, #144]	; (80054a8 <getSensorValues+0x104>)
 8005418:	e9c1 2300 	strd	r2, r3, [r1]
		pH += sample_array_pH[checkSamples];
 800541c:	4a25      	ldr	r2, [pc, #148]	; (80054b4 <getSensorValues+0x110>)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	4413      	add	r3, r2
 8005424:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005428:	4b21      	ldr	r3, [pc, #132]	; (80054b0 <getSensorValues+0x10c>)
 800542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542e:	f7fa fee7 	bl	8000200 <__adddf3>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	491e      	ldr	r1, [pc, #120]	; (80054b0 <getSensorValues+0x10c>)
 8005438:	e9c1 2300 	strd	r2, r3, [r1]
	for(int checkSamples = 0; checkSamples<num_sensor_samples; checkSamples++)			   // sample TDS and PH every half second for 30 times
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	3301      	adds	r3, #1
 8005440:	603b      	str	r3, [r7, #0]
 8005442:	4b1d      	ldr	r3, [pc, #116]	; (80054b8 <getSensorValues+0x114>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	429a      	cmp	r2, r3
 800544a:	dbd7      	blt.n	80053fc <getSensorValues+0x58>
	}
	readWaterTemp();
 800544c:	f7ff fdd2 	bl	8004ff4 <readWaterTemp>
	TDS = TDS/num_sensor_samples;
 8005450:	4b15      	ldr	r3, [pc, #84]	; (80054a8 <getSensorValues+0x104>)
 8005452:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005456:	4b18      	ldr	r3, [pc, #96]	; (80054b8 <getSensorValues+0x114>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4618      	mov	r0, r3
 800545c:	f7fb f81c 	bl	8000498 <__aeabi_i2d>
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	4620      	mov	r0, r4
 8005466:	4629      	mov	r1, r5
 8005468:	f7fb f9aa 	bl	80007c0 <__aeabi_ddiv>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	490d      	ldr	r1, [pc, #52]	; (80054a8 <getSensorValues+0x104>)
 8005472:	e9c1 2300 	strd	r2, r3, [r1]
	pH  = pH/num_sensor_samples;
 8005476:	4b0e      	ldr	r3, [pc, #56]	; (80054b0 <getSensorValues+0x10c>)
 8005478:	e9d3 4500 	ldrd	r4, r5, [r3]
 800547c:	4b0e      	ldr	r3, [pc, #56]	; (80054b8 <getSensorValues+0x114>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	f7fb f809 	bl	8000498 <__aeabi_i2d>
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	4620      	mov	r0, r4
 800548c:	4629      	mov	r1, r5
 800548e:	f7fb f997 	bl	80007c0 <__aeabi_ddiv>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4906      	ldr	r1, [pc, #24]	; (80054b0 <getSensorValues+0x10c>)
 8005498:	e9c1 2300 	strd	r2, r3, [r1]
	waterTempControl();
 800549c:	f7fe fb0a 	bl	8003ab4 <waterTempControl>
}
 80054a0:	bf00      	nop
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bdb0      	pop	{r4, r5, r7, pc}
 80054a8:	200017c0 	.word	0x200017c0
 80054ac:	20003dd8 	.word	0x20003dd8
 80054b0:	200017c8 	.word	0x200017c8
 80054b4:	20003ec8 	.word	0x20003ec8
 80054b8:	20000098 	.word	0x20000098

080054bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054c2:	2300      	movs	r3, #0
 80054c4:	607b      	str	r3, [r7, #4]
 80054c6:	4b12      	ldr	r3, [pc, #72]	; (8005510 <HAL_MspInit+0x54>)
 80054c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ca:	4a11      	ldr	r2, [pc, #68]	; (8005510 <HAL_MspInit+0x54>)
 80054cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054d0:	6453      	str	r3, [r2, #68]	; 0x44
 80054d2:	4b0f      	ldr	r3, [pc, #60]	; (8005510 <HAL_MspInit+0x54>)
 80054d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054da:	607b      	str	r3, [r7, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054de:	2300      	movs	r3, #0
 80054e0:	603b      	str	r3, [r7, #0]
 80054e2:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <HAL_MspInit+0x54>)
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	4a0a      	ldr	r2, [pc, #40]	; (8005510 <HAL_MspInit+0x54>)
 80054e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ec:	6413      	str	r3, [r2, #64]	; 0x40
 80054ee:	4b08      	ldr	r3, [pc, #32]	; (8005510 <HAL_MspInit+0x54>)
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80054fa:	2200      	movs	r2, #0
 80054fc:	210f      	movs	r1, #15
 80054fe:	f06f 0001 	mvn.w	r0, #1
 8005502:	f001 fa78 	bl	80069f6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005506:	bf00      	nop
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	40023800 	.word	0x40023800

08005514 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08a      	sub	sp, #40	; 0x28
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800551c:	f107 0314 	add.w	r3, r7, #20
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	605a      	str	r2, [r3, #4]
 8005526:	609a      	str	r2, [r3, #8]
 8005528:	60da      	str	r2, [r3, #12]
 800552a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a33      	ldr	r2, [pc, #204]	; (8005600 <HAL_ADC_MspInit+0xec>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d15f      	bne.n	80055f6 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005536:	2300      	movs	r3, #0
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	4b32      	ldr	r3, [pc, #200]	; (8005604 <HAL_ADC_MspInit+0xf0>)
 800553c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553e:	4a31      	ldr	r2, [pc, #196]	; (8005604 <HAL_ADC_MspInit+0xf0>)
 8005540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005544:	6453      	str	r3, [r2, #68]	; 0x44
 8005546:	4b2f      	ldr	r3, [pc, #188]	; (8005604 <HAL_ADC_MspInit+0xf0>)
 8005548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005552:	2300      	movs	r3, #0
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	4b2b      	ldr	r3, [pc, #172]	; (8005604 <HAL_ADC_MspInit+0xf0>)
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	4a2a      	ldr	r2, [pc, #168]	; (8005604 <HAL_ADC_MspInit+0xf0>)
 800555c:	f043 0301 	orr.w	r3, r3, #1
 8005560:	6313      	str	r3, [r2, #48]	; 0x30
 8005562:	4b28      	ldr	r3, [pc, #160]	; (8005604 <HAL_ADC_MspInit+0xf0>)
 8005564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800556e:	2330      	movs	r3, #48	; 0x30
 8005570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005572:	2303      	movs	r3, #3
 8005574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005576:	2300      	movs	r3, #0
 8005578:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800557a:	f107 0314 	add.w	r3, r7, #20
 800557e:	4619      	mov	r1, r3
 8005580:	4821      	ldr	r0, [pc, #132]	; (8005608 <HAL_ADC_MspInit+0xf4>)
 8005582:	f001 fdcf 	bl	8007124 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005586:	4b21      	ldr	r3, [pc, #132]	; (800560c <HAL_ADC_MspInit+0xf8>)
 8005588:	4a21      	ldr	r2, [pc, #132]	; (8005610 <HAL_ADC_MspInit+0xfc>)
 800558a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800558c:	4b1f      	ldr	r3, [pc, #124]	; (800560c <HAL_ADC_MspInit+0xf8>)
 800558e:	2200      	movs	r2, #0
 8005590:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005592:	4b1e      	ldr	r3, [pc, #120]	; (800560c <HAL_ADC_MspInit+0xf8>)
 8005594:	2200      	movs	r2, #0
 8005596:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005598:	4b1c      	ldr	r3, [pc, #112]	; (800560c <HAL_ADC_MspInit+0xf8>)
 800559a:	2200      	movs	r2, #0
 800559c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800559e:	4b1b      	ldr	r3, [pc, #108]	; (800560c <HAL_ADC_MspInit+0xf8>)
 80055a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80055a6:	4b19      	ldr	r3, [pc, #100]	; (800560c <HAL_ADC_MspInit+0xf8>)
 80055a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80055ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80055ae:	4b17      	ldr	r3, [pc, #92]	; (800560c <HAL_ADC_MspInit+0xf8>)
 80055b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80055b6:	4b15      	ldr	r3, [pc, #84]	; (800560c <HAL_ADC_MspInit+0xf8>)
 80055b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80055be:	4b13      	ldr	r3, [pc, #76]	; (800560c <HAL_ADC_MspInit+0xf8>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055c4:	4b11      	ldr	r3, [pc, #68]	; (800560c <HAL_ADC_MspInit+0xf8>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80055ca:	4810      	ldr	r0, [pc, #64]	; (800560c <HAL_ADC_MspInit+0xf8>)
 80055cc:	f001 fa3e 	bl	8006a4c <HAL_DMA_Init>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80055d6:	f7ff f813 	bl	8004600 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a0b      	ldr	r2, [pc, #44]	; (800560c <HAL_ADC_MspInit+0xf8>)
 80055de:	639a      	str	r2, [r3, #56]	; 0x38
 80055e0:	4a0a      	ldr	r2, [pc, #40]	; (800560c <HAL_ADC_MspInit+0xf8>)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80055e6:	2200      	movs	r2, #0
 80055e8:	2105      	movs	r1, #5
 80055ea:	2012      	movs	r0, #18
 80055ec:	f001 fa03 	bl	80069f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80055f0:	2012      	movs	r0, #18
 80055f2:	f001 fa1c 	bl	8006a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80055f6:	bf00      	nop
 80055f8:	3728      	adds	r7, #40	; 0x28
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	40012000 	.word	0x40012000
 8005604:	40023800 	.word	0x40023800
 8005608:	40020000 	.word	0x40020000
 800560c:	2000c7a0 	.word	0x2000c7a0
 8005610:	40026410 	.word	0x40026410

08005614 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a05      	ldr	r2, [pc, #20]	; (8005638 <HAL_RTC_MspInit+0x24>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d102      	bne.n	800562c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <HAL_RTC_MspInit+0x28>)
 8005628:	2201      	movs	r2, #1
 800562a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	bc80      	pop	{r7}
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	40002800 	.word	0x40002800
 800563c:	42470e3c 	.word	0x42470e3c

08005640 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005640:	b480      	push	{r7}
 8005642:	b087      	sub	sp, #28
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a28      	ldr	r2, [pc, #160]	; (80056f0 <HAL_TIM_Base_MspInit+0xb0>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d10e      	bne.n	8005670 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]
 8005656:	4b27      	ldr	r3, [pc, #156]	; (80056f4 <HAL_TIM_Base_MspInit+0xb4>)
 8005658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565a:	4a26      	ldr	r2, [pc, #152]	; (80056f4 <HAL_TIM_Base_MspInit+0xb4>)
 800565c:	f043 0301 	orr.w	r3, r3, #1
 8005660:	6453      	str	r3, [r2, #68]	; 0x44
 8005662:	4b24      	ldr	r3, [pc, #144]	; (80056f4 <HAL_TIM_Base_MspInit+0xb4>)
 8005664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800566e:	e03a      	b.n	80056e6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a20      	ldr	r2, [pc, #128]	; (80056f8 <HAL_TIM_Base_MspInit+0xb8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d10e      	bne.n	8005698 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800567a:	2300      	movs	r3, #0
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	4b1d      	ldr	r3, [pc, #116]	; (80056f4 <HAL_TIM_Base_MspInit+0xb4>)
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	4a1c      	ldr	r2, [pc, #112]	; (80056f4 <HAL_TIM_Base_MspInit+0xb4>)
 8005684:	f043 0304 	orr.w	r3, r3, #4
 8005688:	6413      	str	r3, [r2, #64]	; 0x40
 800568a:	4b1a      	ldr	r3, [pc, #104]	; (80056f4 <HAL_TIM_Base_MspInit+0xb4>)
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	613b      	str	r3, [r7, #16]
 8005694:	693b      	ldr	r3, [r7, #16]
}
 8005696:	e026      	b.n	80056e6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM10)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a17      	ldr	r2, [pc, #92]	; (80056fc <HAL_TIM_Base_MspInit+0xbc>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d10e      	bne.n	80056c0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	4b13      	ldr	r3, [pc, #76]	; (80056f4 <HAL_TIM_Base_MspInit+0xb4>)
 80056a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056aa:	4a12      	ldr	r2, [pc, #72]	; (80056f4 <HAL_TIM_Base_MspInit+0xb4>)
 80056ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056b0:	6453      	str	r3, [r2, #68]	; 0x44
 80056b2:	4b10      	ldr	r3, [pc, #64]	; (80056f4 <HAL_TIM_Base_MspInit+0xb4>)
 80056b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	68fb      	ldr	r3, [r7, #12]
}
 80056be:	e012      	b.n	80056e6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM12)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a0e      	ldr	r2, [pc, #56]	; (8005700 <HAL_TIM_Base_MspInit+0xc0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d10d      	bne.n	80056e6 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80056ca:	2300      	movs	r3, #0
 80056cc:	60bb      	str	r3, [r7, #8]
 80056ce:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <HAL_TIM_Base_MspInit+0xb4>)
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	4a08      	ldr	r2, [pc, #32]	; (80056f4 <HAL_TIM_Base_MspInit+0xb4>)
 80056d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056d8:	6413      	str	r3, [r2, #64]	; 0x40
 80056da:	4b06      	ldr	r3, [pc, #24]	; (80056f4 <HAL_TIM_Base_MspInit+0xb4>)
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e2:	60bb      	str	r3, [r7, #8]
 80056e4:	68bb      	ldr	r3, [r7, #8]
}
 80056e6:	bf00      	nop
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bc80      	pop	{r7}
 80056ee:	4770      	bx	lr
 80056f0:	40010000 	.word	0x40010000
 80056f4:	40023800 	.word	0x40023800
 80056f8:	40000800 	.word	0x40000800
 80056fc:	40014400 	.word	0x40014400
 8005700:	40001800 	.word	0x40001800

08005704 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b08a      	sub	sp, #40	; 0x28
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800570c:	f107 0314 	add.w	r3, r7, #20
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	605a      	str	r2, [r3, #4]
 8005716:	609a      	str	r2, [r3, #8]
 8005718:	60da      	str	r2, [r3, #12]
 800571a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a24      	ldr	r2, [pc, #144]	; (80057b4 <HAL_TIM_MspPostInit+0xb0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d11f      	bne.n	8005766 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005726:	2300      	movs	r3, #0
 8005728:	613b      	str	r3, [r7, #16]
 800572a:	4b23      	ldr	r3, [pc, #140]	; (80057b8 <HAL_TIM_MspPostInit+0xb4>)
 800572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572e:	4a22      	ldr	r2, [pc, #136]	; (80057b8 <HAL_TIM_MspPostInit+0xb4>)
 8005730:	f043 0310 	orr.w	r3, r3, #16
 8005734:	6313      	str	r3, [r2, #48]	; 0x30
 8005736:	4b20      	ldr	r3, [pc, #128]	; (80057b8 <HAL_TIM_MspPostInit+0xb4>)
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	f003 0310 	and.w	r3, r3, #16
 800573e:	613b      	str	r3, [r7, #16]
 8005740:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = heat_cool_fan_speed_Pin|system_fan_speed_Pin;
 8005742:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8005746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005748:	2302      	movs	r3, #2
 800574a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800574c:	2300      	movs	r3, #0
 800574e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005750:	2300      	movs	r3, #0
 8005752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005754:	2301      	movs	r3, #1
 8005756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005758:	f107 0314 	add.w	r3, r7, #20
 800575c:	4619      	mov	r1, r3
 800575e:	4817      	ldr	r0, [pc, #92]	; (80057bc <HAL_TIM_MspPostInit+0xb8>)
 8005760:	f001 fce0 	bl	8007124 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8005764:	e022      	b.n	80057ac <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM10)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a15      	ldr	r2, [pc, #84]	; (80057c0 <HAL_TIM_MspPostInit+0xbc>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d11d      	bne.n	80057ac <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005770:	2300      	movs	r3, #0
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	4b10      	ldr	r3, [pc, #64]	; (80057b8 <HAL_TIM_MspPostInit+0xb4>)
 8005776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005778:	4a0f      	ldr	r2, [pc, #60]	; (80057b8 <HAL_TIM_MspPostInit+0xb4>)
 800577a:	f043 0320 	orr.w	r3, r3, #32
 800577e:	6313      	str	r3, [r2, #48]	; 0x30
 8005780:	4b0d      	ldr	r3, [pc, #52]	; (80057b8 <HAL_TIM_MspPostInit+0xb4>)
 8005782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	60fb      	str	r3, [r7, #12]
 800578a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = plant_fan_speed_Pin;
 800578c:	2340      	movs	r3, #64	; 0x40
 800578e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005790:	2302      	movs	r3, #2
 8005792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005794:	2300      	movs	r3, #0
 8005796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005798:	2300      	movs	r3, #0
 800579a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800579c:	2303      	movs	r3, #3
 800579e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(plant_fan_speed_GPIO_Port, &GPIO_InitStruct);
 80057a0:	f107 0314 	add.w	r3, r7, #20
 80057a4:	4619      	mov	r1, r3
 80057a6:	4807      	ldr	r0, [pc, #28]	; (80057c4 <HAL_TIM_MspPostInit+0xc0>)
 80057a8:	f001 fcbc 	bl	8007124 <HAL_GPIO_Init>
}
 80057ac:	bf00      	nop
 80057ae:	3728      	adds	r7, #40	; 0x28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	40010000 	.word	0x40010000
 80057b8:	40023800 	.word	0x40023800
 80057bc:	40021000 	.word	0x40021000
 80057c0:	40014400 	.word	0x40014400
 80057c4:	40021400 	.word	0x40021400

080057c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08c      	sub	sp, #48	; 0x30
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80057d0:	2300      	movs	r3, #0
 80057d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80057d4:	2300      	movs	r3, #0
 80057d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80057d8:	2200      	movs	r2, #0
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	2036      	movs	r0, #54	; 0x36
 80057de:	f001 f90a 	bl	80069f6 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80057e2:	2036      	movs	r0, #54	; 0x36
 80057e4:	f001 f923 	bl	8006a2e <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80057e8:	2300      	movs	r3, #0
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	4b1f      	ldr	r3, [pc, #124]	; (800586c <HAL_InitTick+0xa4>)
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	4a1e      	ldr	r2, [pc, #120]	; (800586c <HAL_InitTick+0xa4>)
 80057f2:	f043 0310 	orr.w	r3, r3, #16
 80057f6:	6413      	str	r3, [r2, #64]	; 0x40
 80057f8:	4b1c      	ldr	r3, [pc, #112]	; (800586c <HAL_InitTick+0xa4>)
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	f003 0310 	and.w	r3, r3, #16
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005804:	f107 0210 	add.w	r2, r7, #16
 8005808:	f107 0314 	add.w	r3, r7, #20
 800580c:	4611      	mov	r1, r2
 800580e:	4618      	mov	r0, r3
 8005810:	f003 fff2 	bl	80097f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005814:	f003 ffce 	bl	80097b4 <HAL_RCC_GetPCLK1Freq>
 8005818:	4603      	mov	r3, r0
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800581e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005820:	4a13      	ldr	r2, [pc, #76]	; (8005870 <HAL_InitTick+0xa8>)
 8005822:	fba2 2303 	umull	r2, r3, r2, r3
 8005826:	0c9b      	lsrs	r3, r3, #18
 8005828:	3b01      	subs	r3, #1
 800582a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800582c:	4b11      	ldr	r3, [pc, #68]	; (8005874 <HAL_InitTick+0xac>)
 800582e:	4a12      	ldr	r2, [pc, #72]	; (8005878 <HAL_InitTick+0xb0>)
 8005830:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005832:	4b10      	ldr	r3, [pc, #64]	; (8005874 <HAL_InitTick+0xac>)
 8005834:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005838:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800583a:	4a0e      	ldr	r2, [pc, #56]	; (8005874 <HAL_InitTick+0xac>)
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005840:	4b0c      	ldr	r3, [pc, #48]	; (8005874 <HAL_InitTick+0xac>)
 8005842:	2200      	movs	r2, #0
 8005844:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005846:	4b0b      	ldr	r3, [pc, #44]	; (8005874 <HAL_InitTick+0xac>)
 8005848:	2200      	movs	r2, #0
 800584a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800584c:	4809      	ldr	r0, [pc, #36]	; (8005874 <HAL_InitTick+0xac>)
 800584e:	f004 fda2 	bl	800a396 <HAL_TIM_Base_Init>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d104      	bne.n	8005862 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005858:	4806      	ldr	r0, [pc, #24]	; (8005874 <HAL_InitTick+0xac>)
 800585a:	f004 fdeb 	bl	800a434 <HAL_TIM_Base_Start_IT>
 800585e:	4603      	mov	r3, r0
 8005860:	e000      	b.n	8005864 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
}
 8005864:	4618      	mov	r0, r3
 8005866:	3730      	adds	r7, #48	; 0x30
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40023800 	.word	0x40023800
 8005870:	431bde83 	.word	0x431bde83
 8005874:	2000d8dc 	.word	0x2000d8dc
 8005878:	40001000 	.word	0x40001000

0800587c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005880:	e7fe      	b.n	8005880 <NMI_Handler+0x4>

08005882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005882:	b480      	push	{r7}
 8005884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005886:	e7fe      	b.n	8005886 <HardFault_Handler+0x4>

08005888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800588c:	e7fe      	b.n	800588c <MemManage_Handler+0x4>

0800588e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800588e:	b480      	push	{r7}
 8005890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005892:	e7fe      	b.n	8005892 <BusFault_Handler+0x4>

08005894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005898:	e7fe      	b.n	8005898 <UsageFault_Handler+0x4>

0800589a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800589a:	b480      	push	{r7}
 800589c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800589e:	bf00      	nop
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bc80      	pop	{r7}
 80058a4:	4770      	bx	lr
	...

080058a8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80058ac:	4802      	ldr	r0, [pc, #8]	; (80058b8 <ADC_IRQHandler+0x10>)
 80058ae:	f000 fb00 	bl	8005eb2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80058b2:	bf00      	nop
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	200096e4 	.word	0x200096e4

080058bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80058c0:	4802      	ldr	r0, [pc, #8]	; (80058cc <TIM6_DAC_IRQHandler+0x10>)
 80058c2:	f004 ff45 	bl	800a750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80058c6:	bf00      	nop
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	2000d8dc 	.word	0x2000d8dc

080058d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80058d4:	4802      	ldr	r0, [pc, #8]	; (80058e0 <DMA2_Stream0_IRQHandler+0x10>)
 80058d6:	f001 f9bf 	bl	8006c58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80058da:	bf00      	nop
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	2000c7a0 	.word	0x2000c7a0

080058e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80058e8:	4802      	ldr	r0, [pc, #8]	; (80058f4 <OTG_FS_IRQHandler+0x10>)
 80058ea:	f002 f86b 	bl	80079c4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80058ee:	bf00      	nop
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	2000e1ac 	.word	0x2000e1ac

080058f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
	return 1;
 80058fc:	2301      	movs	r3, #1
}
 80058fe:	4618      	mov	r0, r3
 8005900:	46bd      	mov	sp, r7
 8005902:	bc80      	pop	{r7}
 8005904:	4770      	bx	lr

08005906 <_kill>:

int _kill(int pid, int sig)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b082      	sub	sp, #8
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005910:	f010 f85c 	bl	80159cc <__errno>
 8005914:	4603      	mov	r3, r0
 8005916:	2216      	movs	r2, #22
 8005918:	601a      	str	r2, [r3, #0]
	return -1;
 800591a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800591e:	4618      	mov	r0, r3
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <_exit>:

void _exit (int status)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b082      	sub	sp, #8
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800592e:	f04f 31ff 	mov.w	r1, #4294967295
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7ff ffe7 	bl	8005906 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005938:	e7fe      	b.n	8005938 <_exit+0x12>

0800593a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b086      	sub	sp, #24
 800593e:	af00      	add	r7, sp, #0
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005946:	2300      	movs	r3, #0
 8005948:	617b      	str	r3, [r7, #20]
 800594a:	e00a      	b.n	8005962 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800594c:	f3af 8000 	nop.w
 8005950:	4601      	mov	r1, r0
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	1c5a      	adds	r2, r3, #1
 8005956:	60ba      	str	r2, [r7, #8]
 8005958:	b2ca      	uxtb	r2, r1
 800595a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	3301      	adds	r3, #1
 8005960:	617b      	str	r3, [r7, #20]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	429a      	cmp	r2, r3
 8005968:	dbf0      	blt.n	800594c <_read+0x12>
	}

return len;
 800596a:	687b      	ldr	r3, [r7, #4]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005980:	2300      	movs	r3, #0
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	e009      	b.n	800599a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	60ba      	str	r2, [r7, #8]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	4618      	mov	r0, r3
 8005990:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	3301      	adds	r3, #1
 8005998:	617b      	str	r3, [r7, #20]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	429a      	cmp	r2, r3
 80059a0:	dbf1      	blt.n	8005986 <_write+0x12>
	}
	return len;
 80059a2:	687b      	ldr	r3, [r7, #4]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3718      	adds	r7, #24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <_close>:

int _close(int file)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
	return -1;
 80059b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr

080059c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
 80059ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80059d2:	605a      	str	r2, [r3, #4]
	return 0;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr

080059e0 <_isatty>:

int _isatty(int file)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
	return 1;
 80059e8:	2301      	movs	r3, #1
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bc80      	pop	{r7}
 80059f2:	4770      	bx	lr

080059f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
	return 0;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bc80      	pop	{r7}
 8005a0a:	4770      	bx	lr

08005a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a14:	4a14      	ldr	r2, [pc, #80]	; (8005a68 <_sbrk+0x5c>)
 8005a16:	4b15      	ldr	r3, [pc, #84]	; (8005a6c <_sbrk+0x60>)
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005a20:	4b13      	ldr	r3, [pc, #76]	; (8005a70 <_sbrk+0x64>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d102      	bne.n	8005a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005a28:	4b11      	ldr	r3, [pc, #68]	; (8005a70 <_sbrk+0x64>)
 8005a2a:	4a12      	ldr	r2, [pc, #72]	; (8005a74 <_sbrk+0x68>)
 8005a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005a2e:	4b10      	ldr	r3, [pc, #64]	; (8005a70 <_sbrk+0x64>)
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4413      	add	r3, r2
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d207      	bcs.n	8005a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005a3c:	f00f ffc6 	bl	80159cc <__errno>
 8005a40:	4603      	mov	r3, r0
 8005a42:	220c      	movs	r2, #12
 8005a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005a46:	f04f 33ff 	mov.w	r3, #4294967295
 8005a4a:	e009      	b.n	8005a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005a4c:	4b08      	ldr	r3, [pc, #32]	; (8005a70 <_sbrk+0x64>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005a52:	4b07      	ldr	r3, [pc, #28]	; (8005a70 <_sbrk+0x64>)
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4413      	add	r3, r2
 8005a5a:	4a05      	ldr	r2, [pc, #20]	; (8005a70 <_sbrk+0x64>)
 8005a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	2001c000 	.word	0x2001c000
 8005a6c:	00000800 	.word	0x00000800
 8005a70:	20005718 	.word	0x20005718
 8005a74:	2000e4c0 	.word	0x2000e4c0

08005a78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a7c:	bf00      	nop
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bc80      	pop	{r7}
 8005a82:	4770      	bx	lr

08005a84 <DWT_Delay_Init>:
#include "main.h"
#include "sensors.h"
#include "water_temp_driver.h"

uint32_t DWT_Delay_Init(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8005a88:	4b14      	ldr	r3, [pc, #80]	; (8005adc <DWT_Delay_Init+0x58>)
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	4a13      	ldr	r2, [pc, #76]	; (8005adc <DWT_Delay_Init+0x58>)
 8005a8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a92:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8005a94:	4b11      	ldr	r3, [pc, #68]	; (8005adc <DWT_Delay_Init+0x58>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	4a10      	ldr	r2, [pc, #64]	; (8005adc <DWT_Delay_Init+0x58>)
 8005a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a9e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8005aa0:	4b0f      	ldr	r3, [pc, #60]	; (8005ae0 <DWT_Delay_Init+0x5c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a0e      	ldr	r2, [pc, #56]	; (8005ae0 <DWT_Delay_Init+0x5c>)
 8005aa6:	f023 0301 	bic.w	r3, r3, #1
 8005aaa:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8005aac:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <DWT_Delay_Init+0x5c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a0b      	ldr	r2, [pc, #44]	; (8005ae0 <DWT_Delay_Init+0x5c>)
 8005ab2:	f043 0301 	orr.w	r3, r3, #1
 8005ab6:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8005ab8:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <DWT_Delay_Init+0x5c>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8005abe:	bf00      	nop
    __ASM volatile ("NOP");
 8005ac0:	bf00      	nop
    __ASM volatile ("NOP");
 8005ac2:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8005ac4:	4b06      	ldr	r3, [pc, #24]	; (8005ae0 <DWT_Delay_Init+0x5c>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8005acc:	2300      	movs	r3, #0
 8005ace:	e000      	b.n	8005ad2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8005ad0:	2301      	movs	r3, #1
    }
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bc80      	pop	{r7}
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	e000edf0 	.word	0xe000edf0
 8005ae0:	e0001000 	.word	0xe0001000

08005ae4 <DWT_Delay_us>:

 void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8005aec:	4b0f      	ldr	r3, [pc, #60]	; (8005b2c <DWT_Delay_us+0x48>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8005af2:	f003 fe55 	bl	80097a0 <HAL_RCC_GetHCLKFreq>
 8005af6:	4603      	mov	r3, r0
 8005af8:	4a0d      	ldr	r2, [pc, #52]	; (8005b30 <DWT_Delay_us+0x4c>)
 8005afa:	fba2 2303 	umull	r2, r3, r2, r3
 8005afe:	0c9b      	lsrs	r3, r3, #18
 8005b00:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	fb02 f303 	mul.w	r3, r2, r3
 8005b0a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8005b0c:	bf00      	nop
 8005b0e:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <DWT_Delay_us+0x48>)
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	1ad2      	subs	r2, r2, r3
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	1acb      	subs	r3, r1, r3
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d3f6      	bcc.n	8005b0e <DWT_Delay_us+0x2a>
}
 8005b20:	bf00      	nop
 8005b22:	bf00      	nop
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	e0001000 	.word	0xe0001000
 8005b30:	431bde83 	.word	0x431bde83

08005b34 <DS18B20_Start>:


uint8_t DS18B20_Start (void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set the pin as output
 8005b3e:	2104      	movs	r1, #4
 8005b40:	4813      	ldr	r0, [pc, #76]	; (8005b90 <DS18B20_Start+0x5c>)
 8005b42:	f000 f8ab 	bl	8005c9c <Set_Pin_Output>
	HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin low
 8005b46:	2200      	movs	r2, #0
 8005b48:	2104      	movs	r1, #4
 8005b4a:	4811      	ldr	r0, [pc, #68]	; (8005b90 <DS18B20_Start+0x5c>)
 8005b4c:	f001 fc9f 	bl	800748e <HAL_GPIO_WritePin>
	DWT_Delay_us (480);   // delay according to datasheet
 8005b50:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8005b54:	f7ff ffc6 	bl	8005ae4 <DWT_Delay_us>

	Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);    // set the pin as input
 8005b58:	2104      	movs	r1, #4
 8005b5a:	480d      	ldr	r0, [pc, #52]	; (8005b90 <DS18B20_Start+0x5c>)
 8005b5c:	f000 f8bc 	bl	8005cd8 <Set_Pin_Input>
	DWT_Delay_us (80);    // delay according to datasheet
 8005b60:	2050      	movs	r0, #80	; 0x50
 8005b62:	f7ff ffbf 	bl	8005ae4 <DWT_Delay_us>

	if (!(HAL_GPIO_ReadPin (water_temp_GPIO_Port, water_temp_Pin))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8005b66:	2104      	movs	r1, #4
 8005b68:	4809      	ldr	r0, [pc, #36]	; (8005b90 <DS18B20_Start+0x5c>)
 8005b6a:	f001 fc79 	bl	8007460 <HAL_GPIO_ReadPin>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d102      	bne.n	8005b7a <DS18B20_Start+0x46>
 8005b74:	2301      	movs	r3, #1
 8005b76:	71fb      	strb	r3, [r7, #7]
 8005b78:	e001      	b.n	8005b7e <DS18B20_Start+0x4a>
	else Response = -1;
 8005b7a:	23ff      	movs	r3, #255	; 0xff
 8005b7c:	71fb      	strb	r3, [r7, #7]

	DWT_Delay_us (400); // 480 us delay totally.
 8005b7e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005b82:	f7ff ffaf 	bl	8005ae4 <DWT_Delay_us>

	return Response;
 8005b86:	79fb      	ldrb	r3, [r7, #7]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	40020400 	.word	0x40020400

08005b94 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);  // set as output
 8005b9e:	2104      	movs	r1, #4
 8005ba0:	481e      	ldr	r0, [pc, #120]	; (8005c1c <DS18B20_Write+0x88>)
 8005ba2:	f000 f87b 	bl	8005c9c <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
 8005baa:	e02e      	b.n	8005c0a <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8005bac:	79fa      	ldrb	r2, [r7, #7]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	fa42 f303 	asr.w	r3, r2, r3
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d013      	beq.n	8005be4 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);  // set as output
 8005bbc:	2104      	movs	r1, #4
 8005bbe:	4817      	ldr	r0, [pc, #92]	; (8005c1c <DS18B20_Write+0x88>)
 8005bc0:	f000 f86c 	bl	8005c9c <Set_Pin_Output>
			HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin LOW
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	2104      	movs	r1, #4
 8005bc8:	4814      	ldr	r0, [pc, #80]	; (8005c1c <DS18B20_Write+0x88>)
 8005bca:	f001 fc60 	bl	800748e <HAL_GPIO_WritePin>
			DWT_Delay_us (5);  // wait for 1 us
 8005bce:	2005      	movs	r0, #5
 8005bd0:	f7ff ff88 	bl	8005ae4 <DWT_Delay_us>

			Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);  // set as input
 8005bd4:	2104      	movs	r1, #4
 8005bd6:	4811      	ldr	r0, [pc, #68]	; (8005c1c <DS18B20_Write+0x88>)
 8005bd8:	f000 f87e 	bl	8005cd8 <Set_Pin_Input>
			DWT_Delay_us (65);  // wait for 60 us
 8005bdc:	2041      	movs	r0, #65	; 0x41
 8005bde:	f7ff ff81 	bl	8005ae4 <DWT_Delay_us>
 8005be2:	e00f      	b.n	8005c04 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);
 8005be4:	2104      	movs	r1, #4
 8005be6:	480d      	ldr	r0, [pc, #52]	; (8005c1c <DS18B20_Write+0x88>)
 8005be8:	f000 f858 	bl	8005c9c <Set_Pin_Output>
			HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin LOW
 8005bec:	2200      	movs	r2, #0
 8005bee:	2104      	movs	r1, #4
 8005bf0:	480a      	ldr	r0, [pc, #40]	; (8005c1c <DS18B20_Write+0x88>)
 8005bf2:	f001 fc4c 	bl	800748e <HAL_GPIO_WritePin>
			DWT_Delay_us (65);  // wait for 60 us
 8005bf6:	2041      	movs	r0, #65	; 0x41
 8005bf8:	f7ff ff74 	bl	8005ae4 <DWT_Delay_us>

			Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);
 8005bfc:	2104      	movs	r1, #4
 8005bfe:	4807      	ldr	r0, [pc, #28]	; (8005c1c <DS18B20_Write+0x88>)
 8005c00:	f000 f86a 	bl	8005cd8 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	3301      	adds	r3, #1
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2b07      	cmp	r3, #7
 8005c0e:	ddcd      	ble.n	8005bac <DS18B20_Write+0x18>
		}
	}
}
 8005c10:	bf00      	nop
 8005c12:	bf00      	nop
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	40020400 	.word	0x40020400

08005c20 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);
 8005c2a:	2104      	movs	r1, #4
 8005c2c:	481a      	ldr	r0, [pc, #104]	; (8005c98 <DS18B20_Read+0x78>)
 8005c2e:	f000 f853 	bl	8005cd8 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 8005c32:	2300      	movs	r3, #0
 8005c34:	603b      	str	r3, [r7, #0]
 8005c36:	e026      	b.n	8005c86 <DS18B20_Read+0x66>
	{
		Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set as output
 8005c38:	2104      	movs	r1, #4
 8005c3a:	4817      	ldr	r0, [pc, #92]	; (8005c98 <DS18B20_Read+0x78>)
 8005c3c:	f000 f82e 	bl	8005c9c <Set_Pin_Output>

		HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the data pin LOW
 8005c40:	2200      	movs	r2, #0
 8005c42:	2104      	movs	r1, #4
 8005c44:	4814      	ldr	r0, [pc, #80]	; (8005c98 <DS18B20_Read+0x78>)
 8005c46:	f001 fc22 	bl	800748e <HAL_GPIO_WritePin>
		DWT_Delay_us (5);  // wait for > 1us
 8005c4a:	2005      	movs	r0, #5
 8005c4c:	f7ff ff4a 	bl	8005ae4 <DWT_Delay_us>

		Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);  // set as input
 8005c50:	2104      	movs	r1, #4
 8005c52:	4811      	ldr	r0, [pc, #68]	; (8005c98 <DS18B20_Read+0x78>)
 8005c54:	f000 f840 	bl	8005cd8 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (water_temp_GPIO_Port, water_temp_Pin))  // if the pin is HIGH
 8005c58:	2104      	movs	r1, #4
 8005c5a:	480f      	ldr	r0, [pc, #60]	; (8005c98 <DS18B20_Read+0x78>)
 8005c5c:	f001 fc00 	bl	8007460 <HAL_GPIO_ReadPin>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d009      	beq.n	8005c7a <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 8005c66:	2201      	movs	r2, #1
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6e:	b25a      	sxtb	r2, r3
 8005c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	b25b      	sxtb	r3, r3
 8005c78:	71fb      	strb	r3, [r7, #7]
		}
		DWT_Delay_us (50);  // wait for 60 us
 8005c7a:	2032      	movs	r0, #50	; 0x32
 8005c7c:	f7ff ff32 	bl	8005ae4 <DWT_Delay_us>
	for (int i=0;i<8;i++)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	3301      	adds	r3, #1
 8005c84:	603b      	str	r3, [r7, #0]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b07      	cmp	r3, #7
 8005c8a:	ddd5      	ble.n	8005c38 <DS18B20_Read+0x18>
	}
	return value;
 8005c8c:	79fb      	ldrb	r3, [r7, #7]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	40020400 	.word	0x40020400

08005c9c <Set_Pin_Output>:


void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ca8:	f107 030c 	add.w	r3, r7, #12
 8005cac:	2200      	movs	r2, #0
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	605a      	str	r2, [r3, #4]
 8005cb2:	609a      	str	r2, [r3, #8]
 8005cb4:	60da      	str	r2, [r3, #12]
 8005cb6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8005cb8:	887b      	ldrh	r3, [r7, #2]
 8005cba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8005cc4:	f107 030c 	add.w	r3, r7, #12
 8005cc8:	4619      	mov	r1, r3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f001 fa2a 	bl	8007124 <HAL_GPIO_Init>
}
 8005cd0:	bf00      	nop
 8005cd2:	3720      	adds	r7, #32
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b088      	sub	sp, #32
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ce4:	f107 030c 	add.w	r3, r7, #12
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	605a      	str	r2, [r3, #4]
 8005cee:	609a      	str	r2, [r3, #8]
 8005cf0:	60da      	str	r2, [r3, #12]
 8005cf2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8005cf4:	887b      	ldrh	r3, [r7, #2]
 8005cf6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8005d00:	f107 030c 	add.w	r3, r7, #12
 8005d04:	4619      	mov	r1, r3
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f001 fa0c 	bl	8007124 <HAL_GPIO_Init>
}
 8005d0c:	bf00      	nop
 8005d0e:	3720      	adds	r7, #32
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005d4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005d18:	480d      	ldr	r0, [pc, #52]	; (8005d50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005d1a:	490e      	ldr	r1, [pc, #56]	; (8005d54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005d1c:	4a0e      	ldr	r2, [pc, #56]	; (8005d58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d20:	e002      	b.n	8005d28 <LoopCopyDataInit>

08005d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d26:	3304      	adds	r3, #4

08005d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d2c:	d3f9      	bcc.n	8005d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d2e:	4a0b      	ldr	r2, [pc, #44]	; (8005d5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005d30:	4c0b      	ldr	r4, [pc, #44]	; (8005d60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d34:	e001      	b.n	8005d3a <LoopFillZerobss>

08005d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d38:	3204      	adds	r2, #4

08005d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d3c:	d3fb      	bcc.n	8005d36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005d3e:	f7ff fe9b 	bl	8005a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005d42:	f00f ff3f 	bl	8015bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005d46:	f7fe f809 	bl	8003d5c <main>
  bx  lr
 8005d4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005d4c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8005d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d54:	20000424 	.word	0x20000424
  ldr r2, =_sidata
 8005d58:	0801a9c4 	.word	0x0801a9c4
  ldr r2, =_sbss
 8005d5c:	20000428 	.word	0x20000428
  ldr r4, =_ebss
 8005d60:	2000e4c0 	.word	0x2000e4c0

08005d64 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d64:	e7fe      	b.n	8005d64 <CAN1_RX0_IRQHandler>
	...

08005d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d6c:	4b0e      	ldr	r3, [pc, #56]	; (8005da8 <HAL_Init+0x40>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a0d      	ldr	r2, [pc, #52]	; (8005da8 <HAL_Init+0x40>)
 8005d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d78:	4b0b      	ldr	r3, [pc, #44]	; (8005da8 <HAL_Init+0x40>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a0a      	ldr	r2, [pc, #40]	; (8005da8 <HAL_Init+0x40>)
 8005d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d84:	4b08      	ldr	r3, [pc, #32]	; (8005da8 <HAL_Init+0x40>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a07      	ldr	r2, [pc, #28]	; (8005da8 <HAL_Init+0x40>)
 8005d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d90:	2003      	movs	r0, #3
 8005d92:	f000 fe25 	bl	80069e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d96:	200f      	movs	r0, #15
 8005d98:	f7ff fd16 	bl	80057c8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005d9c:	f7ff fb8e 	bl	80054bc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	40023c00 	.word	0x40023c00

08005dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005db0:	4b05      	ldr	r3, [pc, #20]	; (8005dc8 <HAL_IncTick+0x1c>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	461a      	mov	r2, r3
 8005db6:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <HAL_IncTick+0x20>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4413      	add	r3, r2
 8005dbc:	4a03      	ldr	r2, [pc, #12]	; (8005dcc <HAL_IncTick+0x20>)
 8005dbe:	6013      	str	r3, [r2, #0]
}
 8005dc0:	bf00      	nop
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bc80      	pop	{r7}
 8005dc6:	4770      	bx	lr
 8005dc8:	20000228 	.word	0x20000228
 8005dcc:	2000d924 	.word	0x2000d924

08005dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8005dd4:	4b02      	ldr	r3, [pc, #8]	; (8005de0 <HAL_GetTick+0x10>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bc80      	pop	{r7}
 8005dde:	4770      	bx	lr
 8005de0:	2000d924 	.word	0x2000d924

08005de4 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005dec:	f7ff fff0 	bl	8005dd0 <HAL_GetTick>
 8005df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfc:	d005      	beq.n	8005e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005dfe:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <HAL_Delay+0x44>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	461a      	mov	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4413      	add	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e0a:	bf00      	nop
 8005e0c:	f7ff ffe0 	bl	8005dd0 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d8f7      	bhi.n	8005e0c <HAL_Delay+0x28>
  {
  }
}
 8005e1c:	bf00      	nop
 8005e1e:	bf00      	nop
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20000228 	.word	0x20000228

08005e2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e033      	b.n	8005eaa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d109      	bne.n	8005e5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff fb62 	bl	8005514 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	f003 0310 	and.w	r3, r3, #16
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d118      	bne.n	8005e9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005e72:	f023 0302 	bic.w	r3, r3, #2
 8005e76:	f043 0202 	orr.w	r2, r3, #2
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fb72 	bl	8006568 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	f023 0303 	bic.w	r3, r3, #3
 8005e92:	f043 0201 	orr.w	r2, r3, #1
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	641a      	str	r2, [r3, #64]	; 0x40
 8005e9a:	e001      	b.n	8005ea0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b084      	sub	sp, #16
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	bf0c      	ite	eq
 8005ed0:	2301      	moveq	r3, #1
 8005ed2:	2300      	movne	r3, #0
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f003 0320 	and.w	r3, r3, #32
 8005ee2:	2b20      	cmp	r3, #32
 8005ee4:	bf0c      	ite	eq
 8005ee6:	2301      	moveq	r3, #1
 8005ee8:	2300      	movne	r3, #0
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d049      	beq.n	8005f88 <HAL_ADC_IRQHandler+0xd6>
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d046      	beq.n	8005f88 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	f003 0310 	and.w	r3, r3, #16
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d105      	bne.n	8005f12 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d12b      	bne.n	8005f78 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d127      	bne.n	8005f78 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d006      	beq.n	8005f44 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d119      	bne.n	8005f78 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 0220 	bic.w	r2, r2, #32
 8005f52:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d105      	bne.n	8005f78 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f70:	f043 0201 	orr.w	r2, r3, #1
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7fe fb0b 	bl	8004594 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f06f 0212 	mvn.w	r2, #18
 8005f86:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0304 	and.w	r3, r3, #4
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	bf0c      	ite	eq
 8005f96:	2301      	moveq	r3, #1
 8005f98:	2300      	movne	r3, #0
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa8:	2b80      	cmp	r3, #128	; 0x80
 8005faa:	bf0c      	ite	eq
 8005fac:	2301      	moveq	r3, #1
 8005fae:	2300      	movne	r3, #0
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d057      	beq.n	800606a <HAL_ADC_IRQHandler+0x1b8>
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d054      	beq.n	800606a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc4:	f003 0310 	and.w	r3, r3, #16
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d105      	bne.n	8005fd8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d139      	bne.n	800605a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d006      	beq.n	8006002 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d12b      	bne.n	800605a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800600c:	2b00      	cmp	r3, #0
 800600e:	d124      	bne.n	800605a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800601a:	2b00      	cmp	r3, #0
 800601c:	d11d      	bne.n	800605a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8006022:	2b00      	cmp	r3, #0
 8006024:	d119      	bne.n	800605a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006034:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604a:	2b00      	cmp	r3, #0
 800604c:	d105      	bne.n	800605a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	f043 0201 	orr.w	r2, r3, #1
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fc0c 	bl	8006878 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f06f 020c 	mvn.w	r2, #12
 8006068:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b01      	cmp	r3, #1
 8006076:	bf0c      	ite	eq
 8006078:	2301      	moveq	r3, #1
 800607a:	2300      	movne	r3, #0
 800607c:	b2db      	uxtb	r3, r3
 800607e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608a:	2b40      	cmp	r3, #64	; 0x40
 800608c:	bf0c      	ite	eq
 800608e:	2301      	moveq	r3, #1
 8006090:	2300      	movne	r3, #0
 8006092:	b2db      	uxtb	r3, r3
 8006094:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d017      	beq.n	80060cc <HAL_ADC_IRQHandler+0x21a>
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d014      	beq.n	80060cc <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d10d      	bne.n	80060cc <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f920 	bl	8006302 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f06f 0201 	mvn.w	r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	2b20      	cmp	r3, #32
 80060d8:	bf0c      	ite	eq
 80060da:	2301      	moveq	r3, #1
 80060dc:	2300      	movne	r3, #0
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060f0:	bf0c      	ite	eq
 80060f2:	2301      	moveq	r3, #1
 80060f4:	2300      	movne	r3, #0
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d015      	beq.n	800612c <HAL_ADC_IRQHandler+0x27a>
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d012      	beq.n	800612c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F2, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610a:	f043 0202 	orr.w	r2, r3, #2
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f06f 0220 	mvn.w	r2, #32
 800611a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f8f9 	bl	8006314 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f06f 0220 	mvn.w	r2, #32
 800612a:	601a      	str	r2, [r3, #0]
  }
}
 800612c:	bf00      	nop
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800614a:	2b01      	cmp	r3, #1
 800614c:	d101      	bne.n	8006152 <HAL_ADC_Start_DMA+0x1e>
 800614e:	2302      	movs	r3, #2
 8006150:	e0bc      	b.n	80062cc <HAL_ADC_Start_DMA+0x198>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b01      	cmp	r3, #1
 8006166:	d018      	beq.n	800619a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689a      	ldr	r2, [r3, #8]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f042 0201 	orr.w	r2, r2, #1
 8006176:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006178:	4b56      	ldr	r3, [pc, #344]	; (80062d4 <HAL_ADC_Start_DMA+0x1a0>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a56      	ldr	r2, [pc, #344]	; (80062d8 <HAL_ADC_Start_DMA+0x1a4>)
 800617e:	fba2 2303 	umull	r2, r3, r2, r3
 8006182:	0c9a      	lsrs	r2, r3, #18
 8006184:	4613      	mov	r3, r2
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	4413      	add	r3, r2
 800618a:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 800618c:	e002      	b.n	8006194 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	3b01      	subs	r3, #1
 8006192:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1f9      	bne.n	800618e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	f040 8084 	bne.w	80062b2 <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80061b2:	f023 0301 	bic.w	r3, r3, #1
 80061b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d007      	beq.n	80061dc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80061d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e8:	d106      	bne.n	80061f8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ee:	f023 0206 	bic.w	r2, r3, #6
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	645a      	str	r2, [r3, #68]	; 0x44
 80061f6:	e002      	b.n	80061fe <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	4a34      	ldr	r2, [pc, #208]	; (80062dc <HAL_ADC_Start_DMA+0x1a8>)
 800620c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	4a33      	ldr	r2, [pc, #204]	; (80062e0 <HAL_ADC_Start_DMA+0x1ac>)
 8006214:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621a:	4a32      	ldr	r2, [pc, #200]	; (80062e4 <HAL_ADC_Start_DMA+0x1b0>)
 800621c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006226:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006236:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689a      	ldr	r2, [r3, #8]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006246:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	334c      	adds	r3, #76	; 0x4c
 8006252:	4619      	mov	r1, r3
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f000 fca6 	bl	8006ba8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800625c:	4b22      	ldr	r3, [pc, #136]	; (80062e8 <HAL_ADC_Start_DMA+0x1b4>)
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f003 031f 	and.w	r3, r3, #31
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10f      	bne.n	8006288 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d129      	bne.n	80062ca <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006284:	609a      	str	r2, [r3, #8]
 8006286:	e020      	b.n	80062ca <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a17      	ldr	r2, [pc, #92]	; (80062ec <HAL_ADC_Start_DMA+0x1b8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d11b      	bne.n	80062ca <HAL_ADC_Start_DMA+0x196>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d114      	bne.n	80062ca <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80062ae:	609a      	str	r2, [r3, #8]
 80062b0:	e00b      	b.n	80062ca <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b6:	f043 0210 	orr.w	r2, r3, #16
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c2:	f043 0201 	orr.w	r2, r3, #1
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	20000220 	.word	0x20000220
 80062d8:	431bde83 	.word	0x431bde83
 80062dc:	08006775 	.word	0x08006775
 80062e0:	0800682f 	.word	0x0800682f
 80062e4:	0800684b 	.word	0x0800684b
 80062e8:	40012300 	.word	0x40012300
 80062ec:	40012000 	.word	0x40012000

080062f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bc80      	pop	{r7}
 8006300:	4770      	bx	lr

08006302 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800630a:	bf00      	nop
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	bc80      	pop	{r7}
 8006312:	4770      	bx	lr

08006314 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	bc80      	pop	{r7}
 8006324:	4770      	bx	lr
	...

08006328 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800633c:	2b01      	cmp	r3, #1
 800633e:	d101      	bne.n	8006344 <HAL_ADC_ConfigChannel+0x1c>
 8006340:	2302      	movs	r3, #2
 8006342:	e103      	b.n	800654c <HAL_ADC_ConfigChannel+0x224>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b09      	cmp	r3, #9
 8006352:	d925      	bls.n	80063a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68d9      	ldr	r1, [r3, #12]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	461a      	mov	r2, r3
 8006362:	4613      	mov	r3, r2
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	4413      	add	r3, r2
 8006368:	3b1e      	subs	r3, #30
 800636a:	2207      	movs	r2, #7
 800636c:	fa02 f303 	lsl.w	r3, r2, r3
 8006370:	43da      	mvns	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	400a      	ands	r2, r1
 8006378:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68d9      	ldr	r1, [r3, #12]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	b29b      	uxth	r3, r3
 800638a:	4618      	mov	r0, r3
 800638c:	4603      	mov	r3, r0
 800638e:	005b      	lsls	r3, r3, #1
 8006390:	4403      	add	r3, r0
 8006392:	3b1e      	subs	r3, #30
 8006394:	409a      	lsls	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	60da      	str	r2, [r3, #12]
 800639e:	e022      	b.n	80063e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6919      	ldr	r1, [r3, #16]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	461a      	mov	r2, r3
 80063ae:	4613      	mov	r3, r2
 80063b0:	005b      	lsls	r3, r3, #1
 80063b2:	4413      	add	r3, r2
 80063b4:	2207      	movs	r2, #7
 80063b6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ba:	43da      	mvns	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	400a      	ands	r2, r1
 80063c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6919      	ldr	r1, [r3, #16]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	689a      	ldr	r2, [r3, #8]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	4618      	mov	r0, r3
 80063d6:	4603      	mov	r3, r0
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	4403      	add	r3, r0
 80063dc:	409a      	lsls	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2b06      	cmp	r3, #6
 80063ec:	d824      	bhi.n	8006438 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	4613      	mov	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	3b05      	subs	r3, #5
 8006400:	221f      	movs	r2, #31
 8006402:	fa02 f303 	lsl.w	r3, r2, r3
 8006406:	43da      	mvns	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	400a      	ands	r2, r1
 800640e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	b29b      	uxth	r3, r3
 800641c:	4618      	mov	r0, r3
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	4613      	mov	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	3b05      	subs	r3, #5
 800642a:	fa00 f203 	lsl.w	r2, r0, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	430a      	orrs	r2, r1
 8006434:	635a      	str	r2, [r3, #52]	; 0x34
 8006436:	e04c      	b.n	80064d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	2b0c      	cmp	r3, #12
 800643e:	d824      	bhi.n	800648a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	4613      	mov	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	3b23      	subs	r3, #35	; 0x23
 8006452:	221f      	movs	r2, #31
 8006454:	fa02 f303 	lsl.w	r3, r2, r3
 8006458:	43da      	mvns	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	400a      	ands	r2, r1
 8006460:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	b29b      	uxth	r3, r3
 800646e:	4618      	mov	r0, r3
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	4613      	mov	r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	3b23      	subs	r3, #35	; 0x23
 800647c:	fa00 f203 	lsl.w	r2, r0, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	631a      	str	r2, [r3, #48]	; 0x30
 8006488:	e023      	b.n	80064d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	3b41      	subs	r3, #65	; 0x41
 800649c:	221f      	movs	r2, #31
 800649e:	fa02 f303 	lsl.w	r3, r2, r3
 80064a2:	43da      	mvns	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	400a      	ands	r2, r1
 80064aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	4618      	mov	r0, r3
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	4613      	mov	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	3b41      	subs	r3, #65	; 0x41
 80064c6:	fa00 f203 	lsl.w	r2, r0, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a20      	ldr	r2, [pc, #128]	; (8006558 <HAL_ADC_ConfigChannel+0x230>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d109      	bne.n	80064f0 <HAL_ADC_ConfigChannel+0x1c8>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b12      	cmp	r3, #18
 80064e2:	d105      	bne.n	80064f0 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80064e4:	4b1d      	ldr	r3, [pc, #116]	; (800655c <HAL_ADC_ConfigChannel+0x234>)
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	4a1c      	ldr	r2, [pc, #112]	; (800655c <HAL_ADC_ConfigChannel+0x234>)
 80064ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80064ee:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a18      	ldr	r2, [pc, #96]	; (8006558 <HAL_ADC_ConfigChannel+0x230>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d123      	bne.n	8006542 <HAL_ADC_ConfigChannel+0x21a>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b10      	cmp	r3, #16
 8006500:	d003      	beq.n	800650a <HAL_ADC_ConfigChannel+0x1e2>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b11      	cmp	r3, #17
 8006508:	d11b      	bne.n	8006542 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800650a:	4b14      	ldr	r3, [pc, #80]	; (800655c <HAL_ADC_ConfigChannel+0x234>)
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	4a13      	ldr	r2, [pc, #76]	; (800655c <HAL_ADC_ConfigChannel+0x234>)
 8006510:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006514:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b10      	cmp	r3, #16
 800651c:	d111      	bne.n	8006542 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800651e:	4b10      	ldr	r3, [pc, #64]	; (8006560 <HAL_ADC_ConfigChannel+0x238>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a10      	ldr	r2, [pc, #64]	; (8006564 <HAL_ADC_ConfigChannel+0x23c>)
 8006524:	fba2 2303 	umull	r2, r3, r2, r3
 8006528:	0c9a      	lsrs	r2, r3, #18
 800652a:	4613      	mov	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8006534:	e002      	b.n	800653c <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3b01      	subs	r3, #1
 800653a:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1f9      	bne.n	8006536 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	bc80      	pop	{r7}
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	40012000 	.word	0x40012000
 800655c:	40012300 	.word	0x40012300
 8006560:	20000220 	.word	0x20000220
 8006564:	431bde83 	.word	0x431bde83

08006568 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006570:	4b7e      	ldr	r3, [pc, #504]	; (800676c <ADC_Init+0x204>)
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	4a7d      	ldr	r2, [pc, #500]	; (800676c <ADC_Init+0x204>)
 8006576:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800657a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800657c:	4b7b      	ldr	r3, [pc, #492]	; (800676c <ADC_Init+0x204>)
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	4979      	ldr	r1, [pc, #484]	; (800676c <ADC_Init+0x204>)
 8006586:	4313      	orrs	r3, r2
 8006588:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006598:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6859      	ldr	r1, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	021a      	lsls	r2, r3, #8
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80065bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6859      	ldr	r1, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689a      	ldr	r2, [r3, #8]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689a      	ldr	r2, [r3, #8]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6899      	ldr	r1, [r3, #8]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68da      	ldr	r2, [r3, #12]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f6:	4a5e      	ldr	r2, [pc, #376]	; (8006770 <ADC_Init+0x208>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d022      	beq.n	8006642 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689a      	ldr	r2, [r3, #8]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800660a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6899      	ldr	r1, [r3, #8]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800662c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6899      	ldr	r1, [r3, #8]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	609a      	str	r2, [r3, #8]
 8006640:	e00f      	b.n	8006662 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006650:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006660:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689a      	ldr	r2, [r3, #8]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 0202 	bic.w	r2, r2, #2
 8006670:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6899      	ldr	r1, [r3, #8]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	7e1b      	ldrb	r3, [r3, #24]
 800667c:	005a      	lsls	r2, r3, #1
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 3020 	ldrb.w	r3, [r3, #32]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d027      	beq.n	80066e0 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800669e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80066ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	3b01      	subs	r3, #1
 80066b6:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80066ba:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	fa92 f2a2 	rbit	r2, r2
 80066c2:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	fab2 f282 	clz	r2, r2
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	fa03 f102 	lsl.w	r1, r3, r2
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	605a      	str	r2, [r3, #4]
 80066de:	e007      	b.n	80066f0 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80066fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	3b01      	subs	r3, #1
 800670c:	051a      	lsls	r2, r3, #20
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006724:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6899      	ldr	r1, [r3, #8]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006732:	025a      	lsls	r2, r3, #9
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800674a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6899      	ldr	r1, [r3, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	029a      	lsls	r2, r3, #10
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	609a      	str	r2, [r3, #8]
}
 8006760:	bf00      	nop
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	bc80      	pop	{r7}
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40012300 	.word	0x40012300
 8006770:	0f000001 	.word	0x0f000001

08006774 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006780:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800678a:	2b00      	cmp	r3, #0
 800678c:	d13c      	bne.n	8006808 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006792:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d12b      	bne.n	8006800 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d127      	bne.n	8006800 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d006      	beq.n	80067cc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d119      	bne.n	8006800 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0220 	bic.w	r2, r2, #32
 80067da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d105      	bne.n	8006800 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f8:	f043 0201 	orr.w	r2, r3, #1
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f7fd fec7 	bl	8004594 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006806:	e00e      	b.n	8006826 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680c:	f003 0310 	and.w	r3, r3, #16
 8006810:	2b00      	cmp	r3, #0
 8006812:	d003      	beq.n	800681c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f7ff fd7d 	bl	8006314 <HAL_ADC_ErrorCallback>
}
 800681a:	e004      	b.n	8006826 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	4798      	blx	r3
}
 8006826:	bf00      	nop
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f7ff fd57 	bl	80062f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006842:	bf00      	nop
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b084      	sub	sp, #16
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006856:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2240      	movs	r2, #64	; 0x40
 800685c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006862:	f043 0204 	orr.w	r2, r3, #4
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f7ff fd52 	bl	8006314 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006870:	bf00      	nop
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	bc80      	pop	{r7}
 8006888:	4770      	bx	lr
	...

0800688c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800689c:	4b0c      	ldr	r3, [pc, #48]	; (80068d0 <__NVIC_SetPriorityGrouping+0x44>)
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80068a8:	4013      	ands	r3, r2
 80068aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80068b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80068b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80068be:	4a04      	ldr	r2, [pc, #16]	; (80068d0 <__NVIC_SetPriorityGrouping+0x44>)
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	60d3      	str	r3, [r2, #12]
}
 80068c4:	bf00      	nop
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bc80      	pop	{r7}
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	e000ed00 	.word	0xe000ed00

080068d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80068d4:	b480      	push	{r7}
 80068d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80068d8:	4b04      	ldr	r3, [pc, #16]	; (80068ec <__NVIC_GetPriorityGrouping+0x18>)
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	0a1b      	lsrs	r3, r3, #8
 80068de:	f003 0307 	and.w	r3, r3, #7
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bc80      	pop	{r7}
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	e000ed00 	.word	0xe000ed00

080068f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	4603      	mov	r3, r0
 80068f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	db0b      	blt.n	800691a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006902:	79fb      	ldrb	r3, [r7, #7]
 8006904:	f003 021f 	and.w	r2, r3, #31
 8006908:	4906      	ldr	r1, [pc, #24]	; (8006924 <__NVIC_EnableIRQ+0x34>)
 800690a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800690e:	095b      	lsrs	r3, r3, #5
 8006910:	2001      	movs	r0, #1
 8006912:	fa00 f202 	lsl.w	r2, r0, r2
 8006916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	bc80      	pop	{r7}
 8006922:	4770      	bx	lr
 8006924:	e000e100 	.word	0xe000e100

08006928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	4603      	mov	r3, r0
 8006930:	6039      	str	r1, [r7, #0]
 8006932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006938:	2b00      	cmp	r3, #0
 800693a:	db0a      	blt.n	8006952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	b2da      	uxtb	r2, r3
 8006940:	490c      	ldr	r1, [pc, #48]	; (8006974 <__NVIC_SetPriority+0x4c>)
 8006942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006946:	0112      	lsls	r2, r2, #4
 8006948:	b2d2      	uxtb	r2, r2
 800694a:	440b      	add	r3, r1
 800694c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006950:	e00a      	b.n	8006968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	b2da      	uxtb	r2, r3
 8006956:	4908      	ldr	r1, [pc, #32]	; (8006978 <__NVIC_SetPriority+0x50>)
 8006958:	79fb      	ldrb	r3, [r7, #7]
 800695a:	f003 030f 	and.w	r3, r3, #15
 800695e:	3b04      	subs	r3, #4
 8006960:	0112      	lsls	r2, r2, #4
 8006962:	b2d2      	uxtb	r2, r2
 8006964:	440b      	add	r3, r1
 8006966:	761a      	strb	r2, [r3, #24]
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	bc80      	pop	{r7}
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	e000e100 	.word	0xe000e100
 8006978:	e000ed00 	.word	0xe000ed00

0800697c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800697c:	b480      	push	{r7}
 800697e:	b089      	sub	sp, #36	; 0x24
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	f1c3 0307 	rsb	r3, r3, #7
 8006996:	2b04      	cmp	r3, #4
 8006998:	bf28      	it	cs
 800699a:	2304      	movcs	r3, #4
 800699c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	3304      	adds	r3, #4
 80069a2:	2b06      	cmp	r3, #6
 80069a4:	d902      	bls.n	80069ac <NVIC_EncodePriority+0x30>
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	3b03      	subs	r3, #3
 80069aa:	e000      	b.n	80069ae <NVIC_EncodePriority+0x32>
 80069ac:	2300      	movs	r3, #0
 80069ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069b0:	f04f 32ff 	mov.w	r2, #4294967295
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ba:	43da      	mvns	r2, r3
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	401a      	ands	r2, r3
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069c4:	f04f 31ff 	mov.w	r1, #4294967295
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	fa01 f303 	lsl.w	r3, r1, r3
 80069ce:	43d9      	mvns	r1, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069d4:	4313      	orrs	r3, r2
         );
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3724      	adds	r7, #36	; 0x24
 80069da:	46bd      	mov	sp, r7
 80069dc:	bc80      	pop	{r7}
 80069de:	4770      	bx	lr

080069e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7ff ff4f 	bl	800688c <__NVIC_SetPriorityGrouping>
}
 80069ee:	bf00      	nop
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b086      	sub	sp, #24
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	4603      	mov	r3, r0
 80069fe:	60b9      	str	r1, [r7, #8]
 8006a00:	607a      	str	r2, [r7, #4]
 8006a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a08:	f7ff ff64 	bl	80068d4 <__NVIC_GetPriorityGrouping>
 8006a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	68b9      	ldr	r1, [r7, #8]
 8006a12:	6978      	ldr	r0, [r7, #20]
 8006a14:	f7ff ffb2 	bl	800697c <NVIC_EncodePriority>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a1e:	4611      	mov	r1, r2
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7ff ff81 	bl	8006928 <__NVIC_SetPriority>
}
 8006a26:	bf00      	nop
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b082      	sub	sp, #8
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	4603      	mov	r3, r0
 8006a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7ff ff57 	bl	80068f0 <__NVIC_EnableIRQ>
}
 8006a42:	bf00      	nop
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
	...

08006a4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006a58:	f7ff f9ba 	bl	8005dd0 <HAL_GetTick>
 8006a5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e099      	b.n	8006b9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 0201 	bic.w	r2, r2, #1
 8006a86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a88:	e00f      	b.n	8006aaa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a8a:	f7ff f9a1 	bl	8005dd0 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b05      	cmp	r3, #5
 8006a96:	d908      	bls.n	8006aaa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2203      	movs	r2, #3
 8006aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e078      	b.n	8006b9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e8      	bne.n	8006a8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	4b38      	ldr	r3, [pc, #224]	; (8006ba4 <HAL_DMA_Init+0x158>)
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006aee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	d107      	bne.n	8006b14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f023 0307 	bic.w	r3, r3, #7
 8006b2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	d117      	bne.n	8006b6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00e      	beq.n	8006b6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fa6d 	bl	8007030 <DMA_CheckFifoParam>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d008      	beq.n	8006b6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2240      	movs	r2, #64	; 0x40
 8006b60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e016      	b.n	8006b9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fa26 	bl	8006fc8 <DMA_CalcBaseAndBitshift>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b84:	223f      	movs	r2, #63	; 0x3f
 8006b86:	409a      	lsls	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3718      	adds	r7, #24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	f010803f 	.word	0xf010803f

08006ba8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bbe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d101      	bne.n	8006bce <HAL_DMA_Start_IT+0x26>
 8006bca:	2302      	movs	r3, #2
 8006bcc:	e040      	b.n	8006c50 <HAL_DMA_Start_IT+0xa8>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d12f      	bne.n	8006c42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2202      	movs	r2, #2
 8006be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	68b9      	ldr	r1, [r7, #8]
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 f9b8 	bl	8006f6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c00:	223f      	movs	r2, #63	; 0x3f
 8006c02:	409a      	lsls	r2, r3
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 0216 	orr.w	r2, r2, #22
 8006c16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d007      	beq.n	8006c30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 0208 	orr.w	r2, r2, #8
 8006c2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f042 0201 	orr.w	r2, r2, #1
 8006c3e:	601a      	str	r2, [r3, #0]
 8006c40:	e005      	b.n	8006c4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006c64:	4b92      	ldr	r3, [pc, #584]	; (8006eb0 <HAL_DMA_IRQHandler+0x258>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a92      	ldr	r2, [pc, #584]	; (8006eb4 <HAL_DMA_IRQHandler+0x25c>)
 8006c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c6e:	0a9b      	lsrs	r3, r3, #10
 8006c70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c82:	2208      	movs	r2, #8
 8006c84:	409a      	lsls	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	4013      	ands	r3, r2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01a      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d013      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 0204 	bic.w	r2, r2, #4
 8006caa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb0:	2208      	movs	r2, #8
 8006cb2:	409a      	lsls	r2, r3
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cbc:	f043 0201 	orr.w	r2, r3, #1
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc8:	2201      	movs	r2, #1
 8006cca:	409a      	lsls	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d012      	beq.n	8006cfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00b      	beq.n	8006cfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	409a      	lsls	r2, r3
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf2:	f043 0202 	orr.w	r2, r3, #2
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cfe:	2204      	movs	r2, #4
 8006d00:	409a      	lsls	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	4013      	ands	r3, r2
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d012      	beq.n	8006d30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00b      	beq.n	8006d30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d1c:	2204      	movs	r2, #4
 8006d1e:	409a      	lsls	r2, r3
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d28:	f043 0204 	orr.w	r2, r3, #4
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d34:	2210      	movs	r2, #16
 8006d36:	409a      	lsls	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d043      	beq.n	8006dc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0308 	and.w	r3, r3, #8
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d03c      	beq.n	8006dc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d52:	2210      	movs	r2, #16
 8006d54:	409a      	lsls	r2, r3
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d018      	beq.n	8006d9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d108      	bne.n	8006d88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d024      	beq.n	8006dc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	4798      	blx	r3
 8006d86:	e01f      	b.n	8006dc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d01b      	beq.n	8006dc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	4798      	blx	r3
 8006d98:	e016      	b.n	8006dc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d107      	bne.n	8006db8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 0208 	bic.w	r2, r2, #8
 8006db6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d003      	beq.n	8006dc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dcc:	2220      	movs	r2, #32
 8006dce:	409a      	lsls	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 808e 	beq.w	8006ef6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0310 	and.w	r3, r3, #16
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 8086 	beq.w	8006ef6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dee:	2220      	movs	r2, #32
 8006df0:	409a      	lsls	r2, r3
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b05      	cmp	r3, #5
 8006e00:	d136      	bne.n	8006e70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 0216 	bic.w	r2, r2, #22
 8006e10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	695a      	ldr	r2, [r3, #20]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d103      	bne.n	8006e32 <HAL_DMA_IRQHandler+0x1da>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d007      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f022 0208 	bic.w	r2, r2, #8
 8006e40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e46:	223f      	movs	r2, #63	; 0x3f
 8006e48:	409a      	lsls	r2, r3
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d07d      	beq.n	8006f62 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	4798      	blx	r3
        }
        return;
 8006e6e:	e078      	b.n	8006f62 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d01c      	beq.n	8006eb8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d108      	bne.n	8006e9e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d030      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	4798      	blx	r3
 8006e9c:	e02b      	b.n	8006ef6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d027      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	4798      	blx	r3
 8006eae:	e022      	b.n	8006ef6 <HAL_DMA_IRQHandler+0x29e>
 8006eb0:	20000220 	.word	0x20000220
 8006eb4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10f      	bne.n	8006ee6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 0210 	bic.w	r2, r2, #16
 8006ed4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d032      	beq.n	8006f64 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d022      	beq.n	8006f50 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2205      	movs	r2, #5
 8006f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f022 0201 	bic.w	r2, r2, #1
 8006f20:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	3301      	adds	r3, #1
 8006f26:	60bb      	str	r3, [r7, #8]
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d307      	bcc.n	8006f3e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1f2      	bne.n	8006f22 <HAL_DMA_IRQHandler+0x2ca>
 8006f3c:	e000      	b.n	8006f40 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006f3e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d005      	beq.n	8006f64 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	4798      	blx	r3
 8006f60:	e000      	b.n	8006f64 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006f62:	bf00      	nop
    }
  }
}
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop

08006f6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
 8006f78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	683a      	ldr	r2, [r7, #0]
 8006f90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	2b40      	cmp	r3, #64	; 0x40
 8006f98:	d108      	bne.n	8006fac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006faa:	e007      	b.n	8006fbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	60da      	str	r2, [r3, #12]
}
 8006fbc:	bf00      	nop
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc80      	pop	{r7}
 8006fc4:	4770      	bx	lr
	...

08006fc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	3b10      	subs	r3, #16
 8006fd8:	4a13      	ldr	r2, [pc, #76]	; (8007028 <DMA_CalcBaseAndBitshift+0x60>)
 8006fda:	fba2 2303 	umull	r2, r3, r2, r3
 8006fde:	091b      	lsrs	r3, r3, #4
 8006fe0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006fe2:	4a12      	ldr	r2, [pc, #72]	; (800702c <DMA_CalcBaseAndBitshift+0x64>)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d909      	bls.n	800700a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006ffe:	f023 0303 	bic.w	r3, r3, #3
 8007002:	1d1a      	adds	r2, r3, #4
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	659a      	str	r2, [r3, #88]	; 0x58
 8007008:	e007      	b.n	800701a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007012:	f023 0303 	bic.w	r3, r3, #3
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800701e:	4618      	mov	r0, r3
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	bc80      	pop	{r7}
 8007026:	4770      	bx	lr
 8007028:	aaaaaaab 	.word	0xaaaaaaab
 800702c:	0801a464 	.word	0x0801a464

08007030 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007040:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d11f      	bne.n	800708a <DMA_CheckFifoParam+0x5a>
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	2b03      	cmp	r3, #3
 800704e:	d856      	bhi.n	80070fe <DMA_CheckFifoParam+0xce>
 8007050:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <DMA_CheckFifoParam+0x28>)
 8007052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007056:	bf00      	nop
 8007058:	08007069 	.word	0x08007069
 800705c:	0800707b 	.word	0x0800707b
 8007060:	08007069 	.word	0x08007069
 8007064:	080070ff 	.word	0x080070ff
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d046      	beq.n	8007102 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007078:	e043      	b.n	8007102 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007082:	d140      	bne.n	8007106 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007088:	e03d      	b.n	8007106 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007092:	d121      	bne.n	80070d8 <DMA_CheckFifoParam+0xa8>
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2b03      	cmp	r3, #3
 8007098:	d837      	bhi.n	800710a <DMA_CheckFifoParam+0xda>
 800709a:	a201      	add	r2, pc, #4	; (adr r2, 80070a0 <DMA_CheckFifoParam+0x70>)
 800709c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a0:	080070b1 	.word	0x080070b1
 80070a4:	080070b7 	.word	0x080070b7
 80070a8:	080070b1 	.word	0x080070b1
 80070ac:	080070c9 	.word	0x080070c9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	73fb      	strb	r3, [r7, #15]
      break;
 80070b4:	e030      	b.n	8007118 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d025      	beq.n	800710e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070c6:	e022      	b.n	800710e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80070d0:	d11f      	bne.n	8007112 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80070d6:	e01c      	b.n	8007112 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d903      	bls.n	80070e6 <DMA_CheckFifoParam+0xb6>
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d003      	beq.n	80070ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80070e4:	e018      	b.n	8007118 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	73fb      	strb	r3, [r7, #15]
      break;
 80070ea:	e015      	b.n	8007118 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00e      	beq.n	8007116 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	73fb      	strb	r3, [r7, #15]
      break;
 80070fc:	e00b      	b.n	8007116 <DMA_CheckFifoParam+0xe6>
      break;
 80070fe:	bf00      	nop
 8007100:	e00a      	b.n	8007118 <DMA_CheckFifoParam+0xe8>
      break;
 8007102:	bf00      	nop
 8007104:	e008      	b.n	8007118 <DMA_CheckFifoParam+0xe8>
      break;
 8007106:	bf00      	nop
 8007108:	e006      	b.n	8007118 <DMA_CheckFifoParam+0xe8>
      break;
 800710a:	bf00      	nop
 800710c:	e004      	b.n	8007118 <DMA_CheckFifoParam+0xe8>
      break;
 800710e:	bf00      	nop
 8007110:	e002      	b.n	8007118 <DMA_CheckFifoParam+0xe8>
      break;   
 8007112:	bf00      	nop
 8007114:	e000      	b.n	8007118 <DMA_CheckFifoParam+0xe8>
      break;
 8007116:	bf00      	nop
    }
  } 
  
  return status; 
 8007118:	7bfb      	ldrb	r3, [r7, #15]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	bc80      	pop	{r7}
 8007122:	4770      	bx	lr

08007124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007124:	b480      	push	{r7}
 8007126:	b087      	sub	sp, #28
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800712e:	2300      	movs	r3, #0
 8007130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007132:	e16f      	b.n	8007414 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	2101      	movs	r1, #1
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	fa01 f303 	lsl.w	r3, r1, r3
 8007140:	4013      	ands	r3, r2
 8007142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b00      	cmp	r3, #0
 8007148:	f000 8161 	beq.w	800740e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f003 0303 	and.w	r3, r3, #3
 8007154:	2b01      	cmp	r3, #1
 8007156:	d005      	beq.n	8007164 <HAL_GPIO_Init+0x40>
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f003 0303 	and.w	r3, r3, #3
 8007160:	2b02      	cmp	r3, #2
 8007162:	d130      	bne.n	80071c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	005b      	lsls	r3, r3, #1
 800716e:	2203      	movs	r2, #3
 8007170:	fa02 f303 	lsl.w	r3, r2, r3
 8007174:	43db      	mvns	r3, r3
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	4013      	ands	r3, r2
 800717a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	68da      	ldr	r2, [r3, #12]
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	fa02 f303 	lsl.w	r3, r2, r3
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	4313      	orrs	r3, r2
 800718c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800719a:	2201      	movs	r2, #1
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	fa02 f303 	lsl.w	r3, r2, r3
 80071a2:	43db      	mvns	r3, r3
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	4013      	ands	r3, r2
 80071a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	091b      	lsrs	r3, r3, #4
 80071b0:	f003 0201 	and.w	r2, r3, #1
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	fa02 f303 	lsl.w	r3, r2, r3
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	4313      	orrs	r3, r2
 80071be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f003 0303 	and.w	r3, r3, #3
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d017      	beq.n	8007202 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	2203      	movs	r2, #3
 80071de:	fa02 f303 	lsl.w	r3, r2, r3
 80071e2:	43db      	mvns	r3, r3
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	4013      	ands	r3, r2
 80071e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	689a      	ldr	r2, [r3, #8]
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	005b      	lsls	r3, r3, #1
 80071f2:	fa02 f303 	lsl.w	r3, r2, r3
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f003 0303 	and.w	r3, r3, #3
 800720a:	2b02      	cmp	r3, #2
 800720c:	d123      	bne.n	8007256 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	08da      	lsrs	r2, r3, #3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3208      	adds	r2, #8
 8007216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	f003 0307 	and.w	r3, r3, #7
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	220f      	movs	r2, #15
 8007226:	fa02 f303 	lsl.w	r3, r2, r3
 800722a:	43db      	mvns	r3, r3
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	4013      	ands	r3, r2
 8007230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	691a      	ldr	r2, [r3, #16]
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f003 0307 	and.w	r3, r3, #7
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	fa02 f303 	lsl.w	r3, r2, r3
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	4313      	orrs	r3, r2
 8007246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	08da      	lsrs	r2, r3, #3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3208      	adds	r2, #8
 8007250:	6939      	ldr	r1, [r7, #16]
 8007252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	005b      	lsls	r3, r3, #1
 8007260:	2203      	movs	r2, #3
 8007262:	fa02 f303 	lsl.w	r3, r2, r3
 8007266:	43db      	mvns	r3, r3
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	4013      	ands	r3, r2
 800726c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f003 0203 	and.w	r2, r3, #3
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	005b      	lsls	r3, r3, #1
 800727a:	fa02 f303 	lsl.w	r3, r2, r3
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	4313      	orrs	r3, r2
 8007282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 80bb 	beq.w	800740e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007298:	2300      	movs	r3, #0
 800729a:	60bb      	str	r3, [r7, #8]
 800729c:	4b64      	ldr	r3, [pc, #400]	; (8007430 <HAL_GPIO_Init+0x30c>)
 800729e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a0:	4a63      	ldr	r2, [pc, #396]	; (8007430 <HAL_GPIO_Init+0x30c>)
 80072a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072a6:	6453      	str	r3, [r2, #68]	; 0x44
 80072a8:	4b61      	ldr	r3, [pc, #388]	; (8007430 <HAL_GPIO_Init+0x30c>)
 80072aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072b0:	60bb      	str	r3, [r7, #8]
 80072b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80072b4:	4a5f      	ldr	r2, [pc, #380]	; (8007434 <HAL_GPIO_Init+0x310>)
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	089b      	lsrs	r3, r3, #2
 80072ba:	3302      	adds	r3, #2
 80072bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f003 0303 	and.w	r3, r3, #3
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	220f      	movs	r2, #15
 80072cc:	fa02 f303 	lsl.w	r3, r2, r3
 80072d0:	43db      	mvns	r3, r3
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	4013      	ands	r3, r2
 80072d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a57      	ldr	r2, [pc, #348]	; (8007438 <HAL_GPIO_Init+0x314>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d031      	beq.n	8007344 <HAL_GPIO_Init+0x220>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a56      	ldr	r2, [pc, #344]	; (800743c <HAL_GPIO_Init+0x318>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d02b      	beq.n	8007340 <HAL_GPIO_Init+0x21c>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a55      	ldr	r2, [pc, #340]	; (8007440 <HAL_GPIO_Init+0x31c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d025      	beq.n	800733c <HAL_GPIO_Init+0x218>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a54      	ldr	r2, [pc, #336]	; (8007444 <HAL_GPIO_Init+0x320>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d01f      	beq.n	8007338 <HAL_GPIO_Init+0x214>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a53      	ldr	r2, [pc, #332]	; (8007448 <HAL_GPIO_Init+0x324>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d019      	beq.n	8007334 <HAL_GPIO_Init+0x210>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a52      	ldr	r2, [pc, #328]	; (800744c <HAL_GPIO_Init+0x328>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d013      	beq.n	8007330 <HAL_GPIO_Init+0x20c>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a51      	ldr	r2, [pc, #324]	; (8007450 <HAL_GPIO_Init+0x32c>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d00d      	beq.n	800732c <HAL_GPIO_Init+0x208>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a50      	ldr	r2, [pc, #320]	; (8007454 <HAL_GPIO_Init+0x330>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d007      	beq.n	8007328 <HAL_GPIO_Init+0x204>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a4f      	ldr	r2, [pc, #316]	; (8007458 <HAL_GPIO_Init+0x334>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d101      	bne.n	8007324 <HAL_GPIO_Init+0x200>
 8007320:	2308      	movs	r3, #8
 8007322:	e010      	b.n	8007346 <HAL_GPIO_Init+0x222>
 8007324:	2309      	movs	r3, #9
 8007326:	e00e      	b.n	8007346 <HAL_GPIO_Init+0x222>
 8007328:	2307      	movs	r3, #7
 800732a:	e00c      	b.n	8007346 <HAL_GPIO_Init+0x222>
 800732c:	2306      	movs	r3, #6
 800732e:	e00a      	b.n	8007346 <HAL_GPIO_Init+0x222>
 8007330:	2305      	movs	r3, #5
 8007332:	e008      	b.n	8007346 <HAL_GPIO_Init+0x222>
 8007334:	2304      	movs	r3, #4
 8007336:	e006      	b.n	8007346 <HAL_GPIO_Init+0x222>
 8007338:	2303      	movs	r3, #3
 800733a:	e004      	b.n	8007346 <HAL_GPIO_Init+0x222>
 800733c:	2302      	movs	r3, #2
 800733e:	e002      	b.n	8007346 <HAL_GPIO_Init+0x222>
 8007340:	2301      	movs	r3, #1
 8007342:	e000      	b.n	8007346 <HAL_GPIO_Init+0x222>
 8007344:	2300      	movs	r3, #0
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	f002 0203 	and.w	r2, r2, #3
 800734c:	0092      	lsls	r2, r2, #2
 800734e:	4093      	lsls	r3, r2
 8007350:	461a      	mov	r2, r3
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	4313      	orrs	r3, r2
 8007356:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007358:	4936      	ldr	r1, [pc, #216]	; (8007434 <HAL_GPIO_Init+0x310>)
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	089b      	lsrs	r3, r3, #2
 800735e:	3302      	adds	r3, #2
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007366:	4b3d      	ldr	r3, [pc, #244]	; (800745c <HAL_GPIO_Init+0x338>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	43db      	mvns	r3, r3
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	4013      	ands	r3, r2
 8007374:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4313      	orrs	r3, r2
 8007388:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800738a:	4a34      	ldr	r2, [pc, #208]	; (800745c <HAL_GPIO_Init+0x338>)
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007390:	4b32      	ldr	r3, [pc, #200]	; (800745c <HAL_GPIO_Init+0x338>)
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	43db      	mvns	r3, r3
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	4013      	ands	r3, r2
 800739e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d003      	beq.n	80073b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80073b4:	4a29      	ldr	r2, [pc, #164]	; (800745c <HAL_GPIO_Init+0x338>)
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80073ba:	4b28      	ldr	r3, [pc, #160]	; (800745c <HAL_GPIO_Init+0x338>)
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	43db      	mvns	r3, r3
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	4013      	ands	r3, r2
 80073c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4313      	orrs	r3, r2
 80073dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80073de:	4a1f      	ldr	r2, [pc, #124]	; (800745c <HAL_GPIO_Init+0x338>)
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80073e4:	4b1d      	ldr	r3, [pc, #116]	; (800745c <HAL_GPIO_Init+0x338>)
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	43db      	mvns	r3, r3
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	4013      	ands	r3, r2
 80073f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	4313      	orrs	r3, r2
 8007406:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007408:	4a14      	ldr	r2, [pc, #80]	; (800745c <HAL_GPIO_Init+0x338>)
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	3301      	adds	r3, #1
 8007412:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	fa22 f303 	lsr.w	r3, r2, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	f47f ae88 	bne.w	8007134 <HAL_GPIO_Init+0x10>
  }
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop
 8007428:	371c      	adds	r7, #28
 800742a:	46bd      	mov	sp, r7
 800742c:	bc80      	pop	{r7}
 800742e:	4770      	bx	lr
 8007430:	40023800 	.word	0x40023800
 8007434:	40013800 	.word	0x40013800
 8007438:	40020000 	.word	0x40020000
 800743c:	40020400 	.word	0x40020400
 8007440:	40020800 	.word	0x40020800
 8007444:	40020c00 	.word	0x40020c00
 8007448:	40021000 	.word	0x40021000
 800744c:	40021400 	.word	0x40021400
 8007450:	40021800 	.word	0x40021800
 8007454:	40021c00 	.word	0x40021c00
 8007458:	40022000 	.word	0x40022000
 800745c:	40013c00 	.word	0x40013c00

08007460 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	460b      	mov	r3, r1
 800746a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	691a      	ldr	r2, [r3, #16]
 8007470:	887b      	ldrh	r3, [r7, #2]
 8007472:	4013      	ands	r3, r2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007478:	2301      	movs	r3, #1
 800747a:	73fb      	strb	r3, [r7, #15]
 800747c:	e001      	b.n	8007482 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800747e:	2300      	movs	r3, #0
 8007480:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007482:	7bfb      	ldrb	r3, [r7, #15]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	bc80      	pop	{r7}
 800748c:	4770      	bx	lr

0800748e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800748e:	b480      	push	{r7}
 8007490:	b083      	sub	sp, #12
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	460b      	mov	r3, r1
 8007498:	807b      	strh	r3, [r7, #2]
 800749a:	4613      	mov	r3, r2
 800749c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800749e:	787b      	ldrb	r3, [r7, #1]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d003      	beq.n	80074ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80074a4:	887a      	ldrh	r2, [r7, #2]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80074aa:	e003      	b.n	80074b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80074ac:	887b      	ldrh	r3, [r7, #2]
 80074ae:	041a      	lsls	r2, r3, #16
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	619a      	str	r2, [r3, #24]
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bc80      	pop	{r7}
 80074bc:	4770      	bx	lr

080074be <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80074be:	b480      	push	{r7}
 80074c0:	b085      	sub	sp, #20
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	460b      	mov	r3, r1
 80074c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80074d0:	887a      	ldrh	r2, [r7, #2]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	4013      	ands	r3, r2
 80074d6:	041a      	lsls	r2, r3, #16
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	43d9      	mvns	r1, r3
 80074dc:	887b      	ldrh	r3, [r7, #2]
 80074de:	400b      	ands	r3, r1
 80074e0:	431a      	orrs	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	619a      	str	r2, [r3, #24]
}
 80074e6:	bf00      	nop
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bc80      	pop	{r7}
 80074ee:	4770      	bx	lr

080074f0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80074f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074f2:	b08f      	sub	sp, #60	; 0x3c
 80074f4:	af0a      	add	r7, sp, #40	; 0x28
 80074f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e054      	b.n	80075ac <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b00      	cmp	r3, #0
 8007512:	d106      	bne.n	8007522 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f00d ff79 	bl	8015414 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2203      	movs	r2, #3
 8007526:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800752e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007532:	2b00      	cmp	r3, #0
 8007534:	d102      	bne.n	800753c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4618      	mov	r0, r3
 8007542:	f003 fffb 	bl	800b53c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	603b      	str	r3, [r7, #0]
 800754c:	687e      	ldr	r6, [r7, #4]
 800754e:	466d      	mov	r5, sp
 8007550:	f106 0410 	add.w	r4, r6, #16
 8007554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800755a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800755c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007560:	e885 0003 	stmia.w	r5, {r0, r1}
 8007564:	1d33      	adds	r3, r6, #4
 8007566:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007568:	6838      	ldr	r0, [r7, #0]
 800756a:	f003 ff80 	bl	800b46e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2101      	movs	r1, #1
 8007574:	4618      	mov	r0, r3
 8007576:	f003 fff1 	bl	800b55c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	603b      	str	r3, [r7, #0]
 8007580:	687e      	ldr	r6, [r7, #4]
 8007582:	466d      	mov	r5, sp
 8007584:	f106 0410 	add.w	r4, r6, #16
 8007588:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800758a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800758c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800758e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007590:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007594:	e885 0003 	stmia.w	r5, {r0, r1}
 8007598:	1d33      	adds	r3, r6, #4
 800759a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800759c:	6838      	ldr	r0, [r7, #0]
 800759e:	f004 f953 	bl	800b848 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075b4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80075b4:	b590      	push	{r4, r7, lr}
 80075b6:	b089      	sub	sp, #36	; 0x24
 80075b8:	af04      	add	r7, sp, #16
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	4608      	mov	r0, r1
 80075be:	4611      	mov	r1, r2
 80075c0:	461a      	mov	r2, r3
 80075c2:	4603      	mov	r3, r0
 80075c4:	70fb      	strb	r3, [r7, #3]
 80075c6:	460b      	mov	r3, r1
 80075c8:	70bb      	strb	r3, [r7, #2]
 80075ca:	4613      	mov	r3, r2
 80075cc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d101      	bne.n	80075dc <HAL_HCD_HC_Init+0x28>
 80075d8:	2302      	movs	r3, #2
 80075da:	e076      	b.n	80076ca <HAL_HCD_HC_Init+0x116>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80075e4:	78fb      	ldrb	r3, [r7, #3]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	212c      	movs	r1, #44	; 0x2c
 80075ea:	fb01 f303 	mul.w	r3, r1, r3
 80075ee:	4413      	add	r3, r2
 80075f0:	333d      	adds	r3, #61	; 0x3d
 80075f2:	2200      	movs	r2, #0
 80075f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80075f6:	78fb      	ldrb	r3, [r7, #3]
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	212c      	movs	r1, #44	; 0x2c
 80075fc:	fb01 f303 	mul.w	r3, r1, r3
 8007600:	4413      	add	r3, r2
 8007602:	3338      	adds	r3, #56	; 0x38
 8007604:	787a      	ldrb	r2, [r7, #1]
 8007606:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8007608:	78fb      	ldrb	r3, [r7, #3]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	212c      	movs	r1, #44	; 0x2c
 800760e:	fb01 f303 	mul.w	r3, r1, r3
 8007612:	4413      	add	r3, r2
 8007614:	3340      	adds	r3, #64	; 0x40
 8007616:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007618:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800761a:	78fb      	ldrb	r3, [r7, #3]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	212c      	movs	r1, #44	; 0x2c
 8007620:	fb01 f303 	mul.w	r3, r1, r3
 8007624:	4413      	add	r3, r2
 8007626:	3339      	adds	r3, #57	; 0x39
 8007628:	78fa      	ldrb	r2, [r7, #3]
 800762a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800762c:	78fb      	ldrb	r3, [r7, #3]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	212c      	movs	r1, #44	; 0x2c
 8007632:	fb01 f303 	mul.w	r3, r1, r3
 8007636:	4413      	add	r3, r2
 8007638:	333f      	adds	r3, #63	; 0x3f
 800763a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800763e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8007640:	78fb      	ldrb	r3, [r7, #3]
 8007642:	78ba      	ldrb	r2, [r7, #2]
 8007644:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007648:	b2d0      	uxtb	r0, r2
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	212c      	movs	r1, #44	; 0x2c
 800764e:	fb01 f303 	mul.w	r3, r1, r3
 8007652:	4413      	add	r3, r2
 8007654:	333a      	adds	r3, #58	; 0x3a
 8007656:	4602      	mov	r2, r0
 8007658:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800765a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800765e:	2b00      	cmp	r3, #0
 8007660:	da09      	bge.n	8007676 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8007662:	78fb      	ldrb	r3, [r7, #3]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	212c      	movs	r1, #44	; 0x2c
 8007668:	fb01 f303 	mul.w	r3, r1, r3
 800766c:	4413      	add	r3, r2
 800766e:	333b      	adds	r3, #59	; 0x3b
 8007670:	2201      	movs	r2, #1
 8007672:	701a      	strb	r2, [r3, #0]
 8007674:	e008      	b.n	8007688 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8007676:	78fb      	ldrb	r3, [r7, #3]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	212c      	movs	r1, #44	; 0x2c
 800767c:	fb01 f303 	mul.w	r3, r1, r3
 8007680:	4413      	add	r3, r2
 8007682:	333b      	adds	r3, #59	; 0x3b
 8007684:	2200      	movs	r2, #0
 8007686:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8007688:	78fb      	ldrb	r3, [r7, #3]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	212c      	movs	r1, #44	; 0x2c
 800768e:	fb01 f303 	mul.w	r3, r1, r3
 8007692:	4413      	add	r3, r2
 8007694:	333c      	adds	r3, #60	; 0x3c
 8007696:	f897 2020 	ldrb.w	r2, [r7, #32]
 800769a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6818      	ldr	r0, [r3, #0]
 80076a0:	787c      	ldrb	r4, [r7, #1]
 80076a2:	78ba      	ldrb	r2, [r7, #2]
 80076a4:	78f9      	ldrb	r1, [r7, #3]
 80076a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80076a8:	9302      	str	r3, [sp, #8]
 80076aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80076ae:	9301      	str	r3, [sp, #4]
 80076b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	4623      	mov	r3, r4
 80076b8:	f004 fa3c 	bl	800bb34 <USB_HC_Init>
 80076bc:	4603      	mov	r3, r0
 80076be:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd90      	pop	{r4, r7, pc}

080076d2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b084      	sub	sp, #16
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
 80076da:	460b      	mov	r3, r1
 80076dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d101      	bne.n	80076f0 <HAL_HCD_HC_Halt+0x1e>
 80076ec:	2302      	movs	r3, #2
 80076ee:	e00f      	b.n	8007710 <HAL_HCD_HC_Halt+0x3e>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	78fa      	ldrb	r2, [r7, #3]
 80076fe:	4611      	mov	r1, r2
 8007700:	4618      	mov	r0, r3
 8007702:	f004 fc77 	bl	800bff4 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800770e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	4608      	mov	r0, r1
 8007722:	4611      	mov	r1, r2
 8007724:	461a      	mov	r2, r3
 8007726:	4603      	mov	r3, r0
 8007728:	70fb      	strb	r3, [r7, #3]
 800772a:	460b      	mov	r3, r1
 800772c:	70bb      	strb	r3, [r7, #2]
 800772e:	4613      	mov	r3, r2
 8007730:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8007732:	78fb      	ldrb	r3, [r7, #3]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	212c      	movs	r1, #44	; 0x2c
 8007738:	fb01 f303 	mul.w	r3, r1, r3
 800773c:	4413      	add	r3, r2
 800773e:	333b      	adds	r3, #59	; 0x3b
 8007740:	78ba      	ldrb	r2, [r7, #2]
 8007742:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8007744:	78fb      	ldrb	r3, [r7, #3]
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	212c      	movs	r1, #44	; 0x2c
 800774a:	fb01 f303 	mul.w	r3, r1, r3
 800774e:	4413      	add	r3, r2
 8007750:	333f      	adds	r3, #63	; 0x3f
 8007752:	787a      	ldrb	r2, [r7, #1]
 8007754:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8007756:	7c3b      	ldrb	r3, [r7, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d112      	bne.n	8007782 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800775c:	78fb      	ldrb	r3, [r7, #3]
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	212c      	movs	r1, #44	; 0x2c
 8007762:	fb01 f303 	mul.w	r3, r1, r3
 8007766:	4413      	add	r3, r2
 8007768:	3342      	adds	r3, #66	; 0x42
 800776a:	2203      	movs	r2, #3
 800776c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800776e:	78fb      	ldrb	r3, [r7, #3]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	212c      	movs	r1, #44	; 0x2c
 8007774:	fb01 f303 	mul.w	r3, r1, r3
 8007778:	4413      	add	r3, r2
 800777a:	333d      	adds	r3, #61	; 0x3d
 800777c:	7f3a      	ldrb	r2, [r7, #28]
 800777e:	701a      	strb	r2, [r3, #0]
 8007780:	e008      	b.n	8007794 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007782:	78fb      	ldrb	r3, [r7, #3]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	212c      	movs	r1, #44	; 0x2c
 8007788:	fb01 f303 	mul.w	r3, r1, r3
 800778c:	4413      	add	r3, r2
 800778e:	3342      	adds	r3, #66	; 0x42
 8007790:	2202      	movs	r2, #2
 8007792:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8007794:	787b      	ldrb	r3, [r7, #1]
 8007796:	2b03      	cmp	r3, #3
 8007798:	f200 80c6 	bhi.w	8007928 <HAL_HCD_HC_SubmitRequest+0x210>
 800779c:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800779e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a2:	bf00      	nop
 80077a4:	080077b5 	.word	0x080077b5
 80077a8:	08007915 	.word	0x08007915
 80077ac:	08007819 	.word	0x08007819
 80077b0:	08007897 	.word	0x08007897
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80077b4:	7c3b      	ldrb	r3, [r7, #16]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	f040 80b8 	bne.w	800792c <HAL_HCD_HC_SubmitRequest+0x214>
 80077bc:	78bb      	ldrb	r3, [r7, #2]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f040 80b4 	bne.w	800792c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80077c4:	8b3b      	ldrh	r3, [r7, #24]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d108      	bne.n	80077dc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80077ca:	78fb      	ldrb	r3, [r7, #3]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	212c      	movs	r1, #44	; 0x2c
 80077d0:	fb01 f303 	mul.w	r3, r1, r3
 80077d4:	4413      	add	r3, r2
 80077d6:	3355      	adds	r3, #85	; 0x55
 80077d8:	2201      	movs	r2, #1
 80077da:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80077dc:	78fb      	ldrb	r3, [r7, #3]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	212c      	movs	r1, #44	; 0x2c
 80077e2:	fb01 f303 	mul.w	r3, r1, r3
 80077e6:	4413      	add	r3, r2
 80077e8:	3355      	adds	r3, #85	; 0x55
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d109      	bne.n	8007804 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	212c      	movs	r1, #44	; 0x2c
 80077f6:	fb01 f303 	mul.w	r3, r1, r3
 80077fa:	4413      	add	r3, r2
 80077fc:	3342      	adds	r3, #66	; 0x42
 80077fe:	2200      	movs	r2, #0
 8007800:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8007802:	e093      	b.n	800792c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007804:	78fb      	ldrb	r3, [r7, #3]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	212c      	movs	r1, #44	; 0x2c
 800780a:	fb01 f303 	mul.w	r3, r1, r3
 800780e:	4413      	add	r3, r2
 8007810:	3342      	adds	r3, #66	; 0x42
 8007812:	2202      	movs	r2, #2
 8007814:	701a      	strb	r2, [r3, #0]
      break;
 8007816:	e089      	b.n	800792c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8007818:	78bb      	ldrb	r3, [r7, #2]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d11d      	bne.n	800785a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800781e:	78fb      	ldrb	r3, [r7, #3]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	212c      	movs	r1, #44	; 0x2c
 8007824:	fb01 f303 	mul.w	r3, r1, r3
 8007828:	4413      	add	r3, r2
 800782a:	3355      	adds	r3, #85	; 0x55
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d109      	bne.n	8007846 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007832:	78fb      	ldrb	r3, [r7, #3]
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	212c      	movs	r1, #44	; 0x2c
 8007838:	fb01 f303 	mul.w	r3, r1, r3
 800783c:	4413      	add	r3, r2
 800783e:	3342      	adds	r3, #66	; 0x42
 8007840:	2200      	movs	r2, #0
 8007842:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8007844:	e073      	b.n	800792e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007846:	78fb      	ldrb	r3, [r7, #3]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	212c      	movs	r1, #44	; 0x2c
 800784c:	fb01 f303 	mul.w	r3, r1, r3
 8007850:	4413      	add	r3, r2
 8007852:	3342      	adds	r3, #66	; 0x42
 8007854:	2202      	movs	r2, #2
 8007856:	701a      	strb	r2, [r3, #0]
      break;
 8007858:	e069      	b.n	800792e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800785a:	78fb      	ldrb	r3, [r7, #3]
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	212c      	movs	r1, #44	; 0x2c
 8007860:	fb01 f303 	mul.w	r3, r1, r3
 8007864:	4413      	add	r3, r2
 8007866:	3354      	adds	r3, #84	; 0x54
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d109      	bne.n	8007882 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800786e:	78fb      	ldrb	r3, [r7, #3]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	212c      	movs	r1, #44	; 0x2c
 8007874:	fb01 f303 	mul.w	r3, r1, r3
 8007878:	4413      	add	r3, r2
 800787a:	3342      	adds	r3, #66	; 0x42
 800787c:	2200      	movs	r2, #0
 800787e:	701a      	strb	r2, [r3, #0]
      break;
 8007880:	e055      	b.n	800792e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007882:	78fb      	ldrb	r3, [r7, #3]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	212c      	movs	r1, #44	; 0x2c
 8007888:	fb01 f303 	mul.w	r3, r1, r3
 800788c:	4413      	add	r3, r2
 800788e:	3342      	adds	r3, #66	; 0x42
 8007890:	2202      	movs	r2, #2
 8007892:	701a      	strb	r2, [r3, #0]
      break;
 8007894:	e04b      	b.n	800792e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8007896:	78bb      	ldrb	r3, [r7, #2]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d11d      	bne.n	80078d8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800789c:	78fb      	ldrb	r3, [r7, #3]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	212c      	movs	r1, #44	; 0x2c
 80078a2:	fb01 f303 	mul.w	r3, r1, r3
 80078a6:	4413      	add	r3, r2
 80078a8:	3355      	adds	r3, #85	; 0x55
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d109      	bne.n	80078c4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80078b0:	78fb      	ldrb	r3, [r7, #3]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	212c      	movs	r1, #44	; 0x2c
 80078b6:	fb01 f303 	mul.w	r3, r1, r3
 80078ba:	4413      	add	r3, r2
 80078bc:	3342      	adds	r3, #66	; 0x42
 80078be:	2200      	movs	r2, #0
 80078c0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80078c2:	e034      	b.n	800792e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80078c4:	78fb      	ldrb	r3, [r7, #3]
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	212c      	movs	r1, #44	; 0x2c
 80078ca:	fb01 f303 	mul.w	r3, r1, r3
 80078ce:	4413      	add	r3, r2
 80078d0:	3342      	adds	r3, #66	; 0x42
 80078d2:	2202      	movs	r2, #2
 80078d4:	701a      	strb	r2, [r3, #0]
      break;
 80078d6:	e02a      	b.n	800792e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80078d8:	78fb      	ldrb	r3, [r7, #3]
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	212c      	movs	r1, #44	; 0x2c
 80078de:	fb01 f303 	mul.w	r3, r1, r3
 80078e2:	4413      	add	r3, r2
 80078e4:	3354      	adds	r3, #84	; 0x54
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d109      	bne.n	8007900 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80078ec:	78fb      	ldrb	r3, [r7, #3]
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	212c      	movs	r1, #44	; 0x2c
 80078f2:	fb01 f303 	mul.w	r3, r1, r3
 80078f6:	4413      	add	r3, r2
 80078f8:	3342      	adds	r3, #66	; 0x42
 80078fa:	2200      	movs	r2, #0
 80078fc:	701a      	strb	r2, [r3, #0]
      break;
 80078fe:	e016      	b.n	800792e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007900:	78fb      	ldrb	r3, [r7, #3]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	212c      	movs	r1, #44	; 0x2c
 8007906:	fb01 f303 	mul.w	r3, r1, r3
 800790a:	4413      	add	r3, r2
 800790c:	3342      	adds	r3, #66	; 0x42
 800790e:	2202      	movs	r2, #2
 8007910:	701a      	strb	r2, [r3, #0]
      break;
 8007912:	e00c      	b.n	800792e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	212c      	movs	r1, #44	; 0x2c
 800791a:	fb01 f303 	mul.w	r3, r1, r3
 800791e:	4413      	add	r3, r2
 8007920:	3342      	adds	r3, #66	; 0x42
 8007922:	2200      	movs	r2, #0
 8007924:	701a      	strb	r2, [r3, #0]
      break;
 8007926:	e002      	b.n	800792e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8007928:	bf00      	nop
 800792a:	e000      	b.n	800792e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800792c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800792e:	78fb      	ldrb	r3, [r7, #3]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	212c      	movs	r1, #44	; 0x2c
 8007934:	fb01 f303 	mul.w	r3, r1, r3
 8007938:	4413      	add	r3, r2
 800793a:	3344      	adds	r3, #68	; 0x44
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8007940:	78fb      	ldrb	r3, [r7, #3]
 8007942:	8b3a      	ldrh	r2, [r7, #24]
 8007944:	6879      	ldr	r1, [r7, #4]
 8007946:	202c      	movs	r0, #44	; 0x2c
 8007948:	fb00 f303 	mul.w	r3, r0, r3
 800794c:	440b      	add	r3, r1
 800794e:	334c      	adds	r3, #76	; 0x4c
 8007950:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8007952:	78fb      	ldrb	r3, [r7, #3]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	212c      	movs	r1, #44	; 0x2c
 8007958:	fb01 f303 	mul.w	r3, r1, r3
 800795c:	4413      	add	r3, r2
 800795e:	3360      	adds	r3, #96	; 0x60
 8007960:	2200      	movs	r2, #0
 8007962:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8007964:	78fb      	ldrb	r3, [r7, #3]
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	212c      	movs	r1, #44	; 0x2c
 800796a:	fb01 f303 	mul.w	r3, r1, r3
 800796e:	4413      	add	r3, r2
 8007970:	3350      	adds	r3, #80	; 0x50
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8007976:	78fb      	ldrb	r3, [r7, #3]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	212c      	movs	r1, #44	; 0x2c
 800797c:	fb01 f303 	mul.w	r3, r1, r3
 8007980:	4413      	add	r3, r2
 8007982:	3339      	adds	r3, #57	; 0x39
 8007984:	78fa      	ldrb	r2, [r7, #3]
 8007986:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	212c      	movs	r1, #44	; 0x2c
 800798e:	fb01 f303 	mul.w	r3, r1, r3
 8007992:	4413      	add	r3, r2
 8007994:	3361      	adds	r3, #97	; 0x61
 8007996:	2200      	movs	r2, #0
 8007998:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6818      	ldr	r0, [r3, #0]
 800799e:	78fb      	ldrb	r3, [r7, #3]
 80079a0:	222c      	movs	r2, #44	; 0x2c
 80079a2:	fb02 f303 	mul.w	r3, r2, r3
 80079a6:	3338      	adds	r3, #56	; 0x38
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	18d1      	adds	r1, r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	461a      	mov	r2, r3
 80079b4:	f004 f9cc 	bl	800bd50 <USB_HC_StartXfer>
 80079b8:	4603      	mov	r3, r0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop

080079c4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4618      	mov	r0, r3
 80079dc:	f003 fef4 	bl	800b7c8 <USB_GetMode>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	f040 80ef 	bne.w	8007bc6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f003 fed9 	bl	800b7a4 <USB_ReadInterrupts>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f000 80e5 	beq.w	8007bc4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f003 fed0 	bl	800b7a4 <USB_ReadInterrupts>
 8007a04:	4603      	mov	r3, r0
 8007a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a0e:	d104      	bne.n	8007a1a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007a18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f003 fec0 	bl	800b7a4 <USB_ReadInterrupts>
 8007a24:	4603      	mov	r3, r0
 8007a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a2e:	d104      	bne.n	8007a3a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f003 feb0 	bl	800b7a4 <USB_ReadInterrupts>
 8007a44:	4603      	mov	r3, r0
 8007a46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a4e:	d104      	bne.n	8007a5a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007a58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f003 fea0 	bl	800b7a4 <USB_ReadInterrupts>
 8007a64:	4603      	mov	r3, r0
 8007a66:	f003 0302 	and.w	r3, r3, #2
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d103      	bne.n	8007a76 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2202      	movs	r2, #2
 8007a74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f003 fe92 	bl	800b7a4 <USB_ReadInterrupts>
 8007a80:	4603      	mov	r3, r0
 8007a82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a8a:	d115      	bne.n	8007ab8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007a94:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d108      	bne.n	8007ab8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f00d fd32 	bl	8015510 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f003 ff7c 	bl	800b9b0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f003 fe71 	bl	800b7a4 <USB_ReadInterrupts>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007acc:	d102      	bne.n	8007ad4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f001 fa01 	bl	8008ed6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f003 fe63 	bl	800b7a4 <USB_ReadInterrupts>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	f003 0308 	and.w	r3, r3, #8
 8007ae4:	2b08      	cmp	r3, #8
 8007ae6:	d106      	bne.n	8007af6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f00d fcf5 	bl	80154d8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2208      	movs	r2, #8
 8007af4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f003 fe52 	bl	800b7a4 <USB_ReadInterrupts>
 8007b00:	4603      	mov	r3, r0
 8007b02:	f003 0310 	and.w	r3, r3, #16
 8007b06:	2b10      	cmp	r3, #16
 8007b08:	d101      	bne.n	8007b0e <HAL_HCD_IRQHandler+0x14a>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e000      	b.n	8007b10 <HAL_HCD_IRQHandler+0x14c>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d012      	beq.n	8007b3a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	699a      	ldr	r2, [r3, #24]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f022 0210 	bic.w	r2, r2, #16
 8007b22:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f001 f904 	bl	8008d32 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	699a      	ldr	r2, [r3, #24]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f042 0210 	orr.w	r2, r2, #16
 8007b38:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f003 fe30 	bl	800b7a4 <USB_ReadInterrupts>
 8007b44:	4603      	mov	r3, r0
 8007b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b4e:	d13a      	bne.n	8007bc6 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f004 fa3d 	bl	800bfd4 <USB_HC_ReadInterrupt>
 8007b5a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	617b      	str	r3, [r7, #20]
 8007b60:	e025      	b.n	8007bae <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f003 030f 	and.w	r3, r3, #15
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d018      	beq.n	8007ba8 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	015a      	lsls	r2, r3, #5
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b8c:	d106      	bne.n	8007b9c <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f8a9 	bl	8007cec <HCD_HC_IN_IRQHandler>
 8007b9a:	e005      	b.n	8007ba8 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fcc4 	bl	8008530 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	3301      	adds	r3, #1
 8007bac:	617b      	str	r3, [r7, #20]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d3d4      	bcc.n	8007b62 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007bc0:	615a      	str	r2, [r3, #20]
 8007bc2:	e000      	b.n	8007bc6 <HAL_HCD_IRQHandler+0x202>
      return;
 8007bc4:	bf00      	nop
    }
  }
}
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d101      	bne.n	8007be2 <HAL_HCD_Start+0x16>
 8007bde:	2302      	movs	r3, #2
 8007be0:	e013      	b.n	8007c0a <HAL_HCD_Start+0x3e>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2101      	movs	r1, #1
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f003 ff40 	bl	800ba76 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f003 fc8e 	bl	800b51c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b082      	sub	sp, #8
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d101      	bne.n	8007c28 <HAL_HCD_Stop+0x16>
 8007c24:	2302      	movs	r3, #2
 8007c26:	e00d      	b.n	8007c44 <HAL_HCD_Stop+0x32>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f004 fb33 	bl	800c2a0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f003 fee2 	bl	800ba22 <USB_ResetPort>
 8007c5e:	4603      	mov	r3, r0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8007c74:	78fb      	ldrb	r3, [r7, #3]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	212c      	movs	r1, #44	; 0x2c
 8007c7a:	fb01 f303 	mul.w	r3, r1, r3
 8007c7e:	4413      	add	r3, r2
 8007c80:	3360      	adds	r3, #96	; 0x60
 8007c82:	781b      	ldrb	r3, [r3, #0]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bc80      	pop	{r7}
 8007c8c:	4770      	bx	lr

08007c8e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	460b      	mov	r3, r1
 8007c98:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8007c9a:	78fb      	ldrb	r3, [r7, #3]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	212c      	movs	r1, #44	; 0x2c
 8007ca0:	fb01 f303 	mul.w	r3, r1, r3
 8007ca4:	4413      	add	r3, r2
 8007ca6:	3350      	adds	r3, #80	; 0x50
 8007ca8:	681b      	ldr	r3, [r3, #0]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bc80      	pop	{r7}
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f003 ff26 	bl	800bb12 <USB_GetCurrentFrame>
 8007cc6:	4603      	mov	r3, r0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f003 ff02 	bl	800bae6 <USB_GetHostSpeed>
 8007ce2:	4603      	mov	r3, r0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8007d02:	78fb      	ldrb	r3, [r7, #3]
 8007d04:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	015a      	lsls	r2, r3, #5
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	f003 0304 	and.w	r3, r3, #4
 8007d18:	2b04      	cmp	r3, #4
 8007d1a:	d119      	bne.n	8007d50 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	015a      	lsls	r2, r3, #5
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	4413      	add	r3, r2
 8007d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d28:	461a      	mov	r2, r3
 8007d2a:	2304      	movs	r3, #4
 8007d2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	015a      	lsls	r2, r3, #5
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	4413      	add	r3, r2
 8007d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	0151      	lsls	r1, r2, #5
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	440a      	add	r2, r1
 8007d44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d48:	f043 0302 	orr.w	r3, r3, #2
 8007d4c:	60d3      	str	r3, [r2, #12]
 8007d4e:	e101      	b.n	8007f54 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d66:	d12b      	bne.n	8007dc0 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d74:	461a      	mov	r2, r3
 8007d76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	212c      	movs	r1, #44	; 0x2c
 8007d82:	fb01 f303 	mul.w	r3, r1, r3
 8007d86:	4413      	add	r3, r2
 8007d88:	3361      	adds	r3, #97	; 0x61
 8007d8a:	2207      	movs	r2, #7
 8007d8c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	015a      	lsls	r2, r3, #5
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	4413      	add	r3, r2
 8007d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	0151      	lsls	r1, r2, #5
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	440a      	add	r2, r1
 8007da4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007da8:	f043 0302 	orr.w	r3, r3, #2
 8007dac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	b2d2      	uxtb	r2, r2
 8007db6:	4611      	mov	r1, r2
 8007db8:	4618      	mov	r0, r3
 8007dba:	f004 f91b 	bl	800bff4 <USB_HC_Halt>
 8007dbe:	e0c9      	b.n	8007f54 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f003 0320 	and.w	r3, r3, #32
 8007dd2:	2b20      	cmp	r3, #32
 8007dd4:	d109      	bne.n	8007dea <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007de2:	461a      	mov	r2, r3
 8007de4:	2320      	movs	r3, #32
 8007de6:	6093      	str	r3, [r2, #8]
 8007de8:	e0b4      	b.n	8007f54 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	015a      	lsls	r2, r3, #5
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f003 0308 	and.w	r3, r3, #8
 8007dfc:	2b08      	cmp	r3, #8
 8007dfe:	d133      	bne.n	8007e68 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	015a      	lsls	r2, r3, #5
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	0151      	lsls	r1, r2, #5
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	440a      	add	r2, r1
 8007e16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e1a:	f043 0302 	orr.w	r3, r3, #2
 8007e1e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	212c      	movs	r1, #44	; 0x2c
 8007e26:	fb01 f303 	mul.w	r3, r1, r3
 8007e2a:	4413      	add	r3, r2
 8007e2c:	3361      	adds	r3, #97	; 0x61
 8007e2e:	2205      	movs	r2, #5
 8007e30:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e3e:	461a      	mov	r2, r3
 8007e40:	2310      	movs	r3, #16
 8007e42:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e50:	461a      	mov	r2, r3
 8007e52:	2308      	movs	r3, #8
 8007e54:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	b2d2      	uxtb	r2, r2
 8007e5e:	4611      	mov	r1, r2
 8007e60:	4618      	mov	r0, r3
 8007e62:	f004 f8c7 	bl	800bff4 <USB_HC_Halt>
 8007e66:	e075      	b.n	8007f54 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e7e:	d134      	bne.n	8007eea <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	015a      	lsls	r2, r3, #5
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	4413      	add	r3, r2
 8007e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	0151      	lsls	r1, r2, #5
 8007e92:	693a      	ldr	r2, [r7, #16]
 8007e94:	440a      	add	r2, r1
 8007e96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e9a:	f043 0302 	orr.w	r3, r3, #2
 8007e9e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	212c      	movs	r1, #44	; 0x2c
 8007ea6:	fb01 f303 	mul.w	r3, r1, r3
 8007eaa:	4413      	add	r3, r2
 8007eac:	3361      	adds	r3, #97	; 0x61
 8007eae:	2208      	movs	r2, #8
 8007eb0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	015a      	lsls	r2, r3, #5
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	2310      	movs	r3, #16
 8007ec2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ed6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	b2d2      	uxtb	r2, r2
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f004 f886 	bl	800bff4 <USB_HC_Halt>
 8007ee8:	e034      	b.n	8007f54 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	015a      	lsls	r2, r3, #5
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007efc:	2b80      	cmp	r3, #128	; 0x80
 8007efe:	d129      	bne.n	8007f54 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	0151      	lsls	r1, r2, #5
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	440a      	add	r2, r1
 8007f16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f1a:	f043 0302 	orr.w	r3, r3, #2
 8007f1e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	212c      	movs	r1, #44	; 0x2c
 8007f26:	fb01 f303 	mul.w	r3, r1, r3
 8007f2a:	4413      	add	r3, r2
 8007f2c:	3361      	adds	r3, #97	; 0x61
 8007f2e:	2206      	movs	r2, #6
 8007f30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	b2d2      	uxtb	r2, r2
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f004 f859 	bl	800bff4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f4e:	461a      	mov	r2, r3
 8007f50:	2380      	movs	r3, #128	; 0x80
 8007f52:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f6a:	d122      	bne.n	8007fb2 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	015a      	lsls	r2, r3, #5
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	4413      	add	r3, r2
 8007f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	0151      	lsls	r1, r2, #5
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	440a      	add	r2, r1
 8007f82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f86:	f043 0302 	orr.w	r3, r3, #2
 8007f8a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	b2d2      	uxtb	r2, r2
 8007f94:	4611      	mov	r1, r2
 8007f96:	4618      	mov	r0, r3
 8007f98:	f004 f82c 	bl	800bff4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fa8:	461a      	mov	r2, r3
 8007faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fae:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8007fb0:	e2ba      	b.n	8008528 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	015a      	lsls	r2, r3, #5
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	4413      	add	r3, r2
 8007fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	f040 811b 	bne.w	8008200 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d019      	beq.n	8008006 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	212c      	movs	r1, #44	; 0x2c
 8007fd8:	fb01 f303 	mul.w	r3, r1, r3
 8007fdc:	4413      	add	r3, r2
 8007fde:	3348      	adds	r3, #72	; 0x48
 8007fe0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	0159      	lsls	r1, r3, #5
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	440b      	add	r3, r1
 8007fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8007ff4:	1ad2      	subs	r2, r2, r3
 8007ff6:	6879      	ldr	r1, [r7, #4]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	202c      	movs	r0, #44	; 0x2c
 8007ffc:	fb00 f303 	mul.w	r3, r0, r3
 8008000:	440b      	add	r3, r1
 8008002:	3350      	adds	r3, #80	; 0x50
 8008004:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	212c      	movs	r1, #44	; 0x2c
 800800c:	fb01 f303 	mul.w	r3, r1, r3
 8008010:	4413      	add	r3, r2
 8008012:	3361      	adds	r3, #97	; 0x61
 8008014:	2201      	movs	r2, #1
 8008016:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	212c      	movs	r1, #44	; 0x2c
 800801e:	fb01 f303 	mul.w	r3, r1, r3
 8008022:	4413      	add	r3, r2
 8008024:	335c      	adds	r3, #92	; 0x5c
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	015a      	lsls	r2, r3, #5
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	4413      	add	r3, r2
 8008032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008036:	461a      	mov	r2, r3
 8008038:	2301      	movs	r3, #1
 800803a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	212c      	movs	r1, #44	; 0x2c
 8008042:	fb01 f303 	mul.w	r3, r1, r3
 8008046:	4413      	add	r3, r2
 8008048:	333f      	adds	r3, #63	; 0x3f
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d009      	beq.n	8008064 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	212c      	movs	r1, #44	; 0x2c
 8008056:	fb01 f303 	mul.w	r3, r1, r3
 800805a:	4413      	add	r3, r2
 800805c:	333f      	adds	r3, #63	; 0x3f
 800805e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008060:	2b02      	cmp	r3, #2
 8008062:	d121      	bne.n	80080a8 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	4413      	add	r3, r2
 800806c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	0151      	lsls	r1, r2, #5
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	440a      	add	r2, r1
 800807a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800807e:	f043 0302 	orr.w	r3, r3, #2
 8008082:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	b2d2      	uxtb	r2, r2
 800808c:	4611      	mov	r1, r2
 800808e:	4618      	mov	r0, r3
 8008090:	f003 ffb0 	bl	800bff4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	015a      	lsls	r2, r3, #5
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	4413      	add	r3, r2
 800809c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080a0:	461a      	mov	r2, r3
 80080a2:	2310      	movs	r3, #16
 80080a4:	6093      	str	r3, [r2, #8]
 80080a6:	e066      	b.n	8008176 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	212c      	movs	r1, #44	; 0x2c
 80080ae:	fb01 f303 	mul.w	r3, r1, r3
 80080b2:	4413      	add	r3, r2
 80080b4:	333f      	adds	r3, #63	; 0x3f
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b03      	cmp	r3, #3
 80080ba:	d127      	bne.n	800810c <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	0151      	lsls	r1, r2, #5
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	440a      	add	r2, r1
 80080d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080da:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	212c      	movs	r1, #44	; 0x2c
 80080e2:	fb01 f303 	mul.w	r3, r1, r3
 80080e6:	4413      	add	r3, r2
 80080e8:	3360      	adds	r3, #96	; 0x60
 80080ea:	2201      	movs	r2, #1
 80080ec:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	b2d9      	uxtb	r1, r3
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	202c      	movs	r0, #44	; 0x2c
 80080f8:	fb00 f303 	mul.w	r3, r0, r3
 80080fc:	4413      	add	r3, r2
 80080fe:	3360      	adds	r3, #96	; 0x60
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	461a      	mov	r2, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f00d fa11 	bl	801552c <HAL_HCD_HC_NotifyURBChange_Callback>
 800810a:	e034      	b.n	8008176 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	212c      	movs	r1, #44	; 0x2c
 8008112:	fb01 f303 	mul.w	r3, r1, r3
 8008116:	4413      	add	r3, r2
 8008118:	333f      	adds	r3, #63	; 0x3f
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d12a      	bne.n	8008176 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	212c      	movs	r1, #44	; 0x2c
 8008126:	fb01 f303 	mul.w	r3, r1, r3
 800812a:	4413      	add	r3, r2
 800812c:	3360      	adds	r3, #96	; 0x60
 800812e:	2201      	movs	r2, #1
 8008130:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	212c      	movs	r1, #44	; 0x2c
 8008138:	fb01 f303 	mul.w	r3, r1, r3
 800813c:	4413      	add	r3, r2
 800813e:	3354      	adds	r3, #84	; 0x54
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	f083 0301 	eor.w	r3, r3, #1
 8008146:	b2d8      	uxtb	r0, r3
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	212c      	movs	r1, #44	; 0x2c
 800814e:	fb01 f303 	mul.w	r3, r1, r3
 8008152:	4413      	add	r3, r2
 8008154:	3354      	adds	r3, #84	; 0x54
 8008156:	4602      	mov	r2, r0
 8008158:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	b2d9      	uxtb	r1, r3
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	202c      	movs	r0, #44	; 0x2c
 8008164:	fb00 f303 	mul.w	r3, r0, r3
 8008168:	4413      	add	r3, r2
 800816a:	3360      	adds	r3, #96	; 0x60
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f00d f9db 	bl	801552c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d12b      	bne.n	80081d6 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	212c      	movs	r1, #44	; 0x2c
 8008184:	fb01 f303 	mul.w	r3, r1, r3
 8008188:	4413      	add	r3, r2
 800818a:	3348      	adds	r3, #72	; 0x48
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	6879      	ldr	r1, [r7, #4]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	202c      	movs	r0, #44	; 0x2c
 8008194:	fb00 f202 	mul.w	r2, r0, r2
 8008198:	440a      	add	r2, r1
 800819a:	3240      	adds	r2, #64	; 0x40
 800819c:	8812      	ldrh	r2, [r2, #0]
 800819e:	fbb3 f3f2 	udiv	r3, r3, r2
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f000 81be 	beq.w	8008528 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	212c      	movs	r1, #44	; 0x2c
 80081b2:	fb01 f303 	mul.w	r3, r1, r3
 80081b6:	4413      	add	r3, r2
 80081b8:	3354      	adds	r3, #84	; 0x54
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	f083 0301 	eor.w	r3, r3, #1
 80081c0:	b2d8      	uxtb	r0, r3
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	212c      	movs	r1, #44	; 0x2c
 80081c8:	fb01 f303 	mul.w	r3, r1, r3
 80081cc:	4413      	add	r3, r2
 80081ce:	3354      	adds	r3, #84	; 0x54
 80081d0:	4602      	mov	r2, r0
 80081d2:	701a      	strb	r2, [r3, #0]
}
 80081d4:	e1a8      	b.n	8008528 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	212c      	movs	r1, #44	; 0x2c
 80081dc:	fb01 f303 	mul.w	r3, r1, r3
 80081e0:	4413      	add	r3, r2
 80081e2:	3354      	adds	r3, #84	; 0x54
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	f083 0301 	eor.w	r3, r3, #1
 80081ea:	b2d8      	uxtb	r0, r3
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	212c      	movs	r1, #44	; 0x2c
 80081f2:	fb01 f303 	mul.w	r3, r1, r3
 80081f6:	4413      	add	r3, r2
 80081f8:	3354      	adds	r3, #84	; 0x54
 80081fa:	4602      	mov	r2, r0
 80081fc:	701a      	strb	r2, [r3, #0]
}
 80081fe:	e193      	b.n	8008528 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	015a      	lsls	r2, r3, #5
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	4413      	add	r3, r2
 8008208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	f003 0302 	and.w	r3, r3, #2
 8008212:	2b02      	cmp	r3, #2
 8008214:	f040 8106 	bne.w	8008424 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	015a      	lsls	r2, r3, #5
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	4413      	add	r3, r2
 8008220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	0151      	lsls	r1, r2, #5
 800822a:	693a      	ldr	r2, [r7, #16]
 800822c:	440a      	add	r2, r1
 800822e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008232:	f023 0302 	bic.w	r3, r3, #2
 8008236:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	212c      	movs	r1, #44	; 0x2c
 800823e:	fb01 f303 	mul.w	r3, r1, r3
 8008242:	4413      	add	r3, r2
 8008244:	3361      	adds	r3, #97	; 0x61
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d109      	bne.n	8008260 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	212c      	movs	r1, #44	; 0x2c
 8008252:	fb01 f303 	mul.w	r3, r1, r3
 8008256:	4413      	add	r3, r2
 8008258:	3360      	adds	r3, #96	; 0x60
 800825a:	2201      	movs	r2, #1
 800825c:	701a      	strb	r2, [r3, #0]
 800825e:	e0c9      	b.n	80083f4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	212c      	movs	r1, #44	; 0x2c
 8008266:	fb01 f303 	mul.w	r3, r1, r3
 800826a:	4413      	add	r3, r2
 800826c:	3361      	adds	r3, #97	; 0x61
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	2b05      	cmp	r3, #5
 8008272:	d109      	bne.n	8008288 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	212c      	movs	r1, #44	; 0x2c
 800827a:	fb01 f303 	mul.w	r3, r1, r3
 800827e:	4413      	add	r3, r2
 8008280:	3360      	adds	r3, #96	; 0x60
 8008282:	2205      	movs	r2, #5
 8008284:	701a      	strb	r2, [r3, #0]
 8008286:	e0b5      	b.n	80083f4 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	212c      	movs	r1, #44	; 0x2c
 800828e:	fb01 f303 	mul.w	r3, r1, r3
 8008292:	4413      	add	r3, r2
 8008294:	3361      	adds	r3, #97	; 0x61
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	2b06      	cmp	r3, #6
 800829a:	d009      	beq.n	80082b0 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	212c      	movs	r1, #44	; 0x2c
 80082a2:	fb01 f303 	mul.w	r3, r1, r3
 80082a6:	4413      	add	r3, r2
 80082a8:	3361      	adds	r3, #97	; 0x61
 80082aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80082ac:	2b08      	cmp	r3, #8
 80082ae:	d150      	bne.n	8008352 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	212c      	movs	r1, #44	; 0x2c
 80082b6:	fb01 f303 	mul.w	r3, r1, r3
 80082ba:	4413      	add	r3, r2
 80082bc:	335c      	adds	r3, #92	; 0x5c
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	6879      	ldr	r1, [r7, #4]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	202c      	movs	r0, #44	; 0x2c
 80082c8:	fb00 f303 	mul.w	r3, r0, r3
 80082cc:	440b      	add	r3, r1
 80082ce:	335c      	adds	r3, #92	; 0x5c
 80082d0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	212c      	movs	r1, #44	; 0x2c
 80082d8:	fb01 f303 	mul.w	r3, r1, r3
 80082dc:	4413      	add	r3, r2
 80082de:	335c      	adds	r3, #92	; 0x5c
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d912      	bls.n	800830c <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	212c      	movs	r1, #44	; 0x2c
 80082ec:	fb01 f303 	mul.w	r3, r1, r3
 80082f0:	4413      	add	r3, r2
 80082f2:	335c      	adds	r3, #92	; 0x5c
 80082f4:	2200      	movs	r2, #0
 80082f6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	212c      	movs	r1, #44	; 0x2c
 80082fe:	fb01 f303 	mul.w	r3, r1, r3
 8008302:	4413      	add	r3, r2
 8008304:	3360      	adds	r3, #96	; 0x60
 8008306:	2204      	movs	r2, #4
 8008308:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800830a:	e073      	b.n	80083f4 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	212c      	movs	r1, #44	; 0x2c
 8008312:	fb01 f303 	mul.w	r3, r1, r3
 8008316:	4413      	add	r3, r2
 8008318:	3360      	adds	r3, #96	; 0x60
 800831a:	2202      	movs	r2, #2
 800831c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	015a      	lsls	r2, r3, #5
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	4413      	add	r3, r2
 8008326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008334:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800833c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	015a      	lsls	r2, r3, #5
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	4413      	add	r3, r2
 8008346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800834a:	461a      	mov	r2, r3
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008350:	e050      	b.n	80083f4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	212c      	movs	r1, #44	; 0x2c
 8008358:	fb01 f303 	mul.w	r3, r1, r3
 800835c:	4413      	add	r3, r2
 800835e:	3361      	adds	r3, #97	; 0x61
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	2b03      	cmp	r3, #3
 8008364:	d122      	bne.n	80083ac <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	212c      	movs	r1, #44	; 0x2c
 800836c:	fb01 f303 	mul.w	r3, r1, r3
 8008370:	4413      	add	r3, r2
 8008372:	3360      	adds	r3, #96	; 0x60
 8008374:	2202      	movs	r2, #2
 8008376:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	015a      	lsls	r2, r3, #5
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	4413      	add	r3, r2
 8008380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800838e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008396:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	015a      	lsls	r2, r3, #5
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083a4:	461a      	mov	r2, r3
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	6013      	str	r3, [r2, #0]
 80083aa:	e023      	b.n	80083f4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	212c      	movs	r1, #44	; 0x2c
 80083b2:	fb01 f303 	mul.w	r3, r1, r3
 80083b6:	4413      	add	r3, r2
 80083b8:	3361      	adds	r3, #97	; 0x61
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	2b07      	cmp	r3, #7
 80083be:	d119      	bne.n	80083f4 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	212c      	movs	r1, #44	; 0x2c
 80083c6:	fb01 f303 	mul.w	r3, r1, r3
 80083ca:	4413      	add	r3, r2
 80083cc:	335c      	adds	r3, #92	; 0x5c
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	1c5a      	adds	r2, r3, #1
 80083d2:	6879      	ldr	r1, [r7, #4]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	202c      	movs	r0, #44	; 0x2c
 80083d8:	fb00 f303 	mul.w	r3, r0, r3
 80083dc:	440b      	add	r3, r1
 80083de:	335c      	adds	r3, #92	; 0x5c
 80083e0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	212c      	movs	r1, #44	; 0x2c
 80083e8:	fb01 f303 	mul.w	r3, r1, r3
 80083ec:	4413      	add	r3, r2
 80083ee:	3360      	adds	r3, #96	; 0x60
 80083f0:	2204      	movs	r2, #4
 80083f2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008400:	461a      	mov	r2, r3
 8008402:	2302      	movs	r3, #2
 8008404:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	b2d9      	uxtb	r1, r3
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	202c      	movs	r0, #44	; 0x2c
 8008410:	fb00 f303 	mul.w	r3, r0, r3
 8008414:	4413      	add	r3, r2
 8008416:	3360      	adds	r3, #96	; 0x60
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f00d f885 	bl	801552c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8008422:	e081      	b.n	8008528 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	4413      	add	r3, r2
 800842c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f003 0310 	and.w	r3, r3, #16
 8008436:	2b10      	cmp	r3, #16
 8008438:	d176      	bne.n	8008528 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	212c      	movs	r1, #44	; 0x2c
 8008440:	fb01 f303 	mul.w	r3, r1, r3
 8008444:	4413      	add	r3, r2
 8008446:	333f      	adds	r3, #63	; 0x3f
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	2b03      	cmp	r3, #3
 800844c:	d121      	bne.n	8008492 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	212c      	movs	r1, #44	; 0x2c
 8008454:	fb01 f303 	mul.w	r3, r1, r3
 8008458:	4413      	add	r3, r2
 800845a:	335c      	adds	r3, #92	; 0x5c
 800845c:	2200      	movs	r2, #0
 800845e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	015a      	lsls	r2, r3, #5
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	4413      	add	r3, r2
 8008468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	0151      	lsls	r1, r2, #5
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	440a      	add	r2, r1
 8008476:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800847a:	f043 0302 	orr.w	r3, r3, #2
 800847e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	b2d2      	uxtb	r2, r2
 8008488:	4611      	mov	r1, r2
 800848a:	4618      	mov	r0, r3
 800848c:	f003 fdb2 	bl	800bff4 <USB_HC_Halt>
 8008490:	e041      	b.n	8008516 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	212c      	movs	r1, #44	; 0x2c
 8008498:	fb01 f303 	mul.w	r3, r1, r3
 800849c:	4413      	add	r3, r2
 800849e:	333f      	adds	r3, #63	; 0x3f
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d009      	beq.n	80084ba <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	212c      	movs	r1, #44	; 0x2c
 80084ac:	fb01 f303 	mul.w	r3, r1, r3
 80084b0:	4413      	add	r3, r2
 80084b2:	333f      	adds	r3, #63	; 0x3f
 80084b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d12d      	bne.n	8008516 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	212c      	movs	r1, #44	; 0x2c
 80084c0:	fb01 f303 	mul.w	r3, r1, r3
 80084c4:	4413      	add	r3, r2
 80084c6:	335c      	adds	r3, #92	; 0x5c
 80084c8:	2200      	movs	r2, #0
 80084ca:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d120      	bne.n	8008516 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	212c      	movs	r1, #44	; 0x2c
 80084da:	fb01 f303 	mul.w	r3, r1, r3
 80084de:	4413      	add	r3, r2
 80084e0:	3361      	adds	r3, #97	; 0x61
 80084e2:	2203      	movs	r2, #3
 80084e4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	0151      	lsls	r1, r2, #5
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	440a      	add	r2, r1
 80084fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008500:	f043 0302 	orr.w	r3, r3, #2
 8008504:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	b2d2      	uxtb	r2, r2
 800850e:	4611      	mov	r1, r2
 8008510:	4618      	mov	r0, r3
 8008512:	f003 fd6f 	bl	800bff4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	4413      	add	r3, r2
 800851e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008522:	461a      	mov	r2, r3
 8008524:	2310      	movs	r3, #16
 8008526:	6093      	str	r3, [r2, #8]
}
 8008528:	bf00      	nop
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8008546:	78fb      	ldrb	r3, [r7, #3]
 8008548:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	015a      	lsls	r2, r3, #5
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	4413      	add	r3, r2
 8008552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f003 0304 	and.w	r3, r3, #4
 800855c:	2b04      	cmp	r3, #4
 800855e:	d119      	bne.n	8008594 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	4413      	add	r3, r2
 8008568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800856c:	461a      	mov	r2, r3
 800856e:	2304      	movs	r3, #4
 8008570:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	015a      	lsls	r2, r3, #5
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	4413      	add	r3, r2
 800857a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	0151      	lsls	r1, r2, #5
 8008584:	69ba      	ldr	r2, [r7, #24]
 8008586:	440a      	add	r2, r1
 8008588:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800858c:	f043 0302 	orr.w	r3, r3, #2
 8008590:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8008592:	e3ca      	b.n	8008d2a <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	4413      	add	r3, r2
 800859c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	f003 0320 	and.w	r3, r3, #32
 80085a6:	2b20      	cmp	r3, #32
 80085a8:	d13e      	bne.n	8008628 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	015a      	lsls	r2, r3, #5
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	4413      	add	r3, r2
 80085b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085b6:	461a      	mov	r2, r3
 80085b8:	2320      	movs	r3, #32
 80085ba:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	212c      	movs	r1, #44	; 0x2c
 80085c2:	fb01 f303 	mul.w	r3, r1, r3
 80085c6:	4413      	add	r3, r2
 80085c8:	333d      	adds	r3, #61	; 0x3d
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	f040 83ac 	bne.w	8008d2a <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	212c      	movs	r1, #44	; 0x2c
 80085d8:	fb01 f303 	mul.w	r3, r1, r3
 80085dc:	4413      	add	r3, r2
 80085de:	333d      	adds	r3, #61	; 0x3d
 80085e0:	2200      	movs	r2, #0
 80085e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	212c      	movs	r1, #44	; 0x2c
 80085ea:	fb01 f303 	mul.w	r3, r1, r3
 80085ee:	4413      	add	r3, r2
 80085f0:	3360      	adds	r3, #96	; 0x60
 80085f2:	2202      	movs	r2, #2
 80085f4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	0151      	lsls	r1, r2, #5
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	440a      	add	r2, r1
 800860c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008610:	f043 0302 	orr.w	r3, r3, #2
 8008614:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	b2d2      	uxtb	r2, r2
 800861e:	4611      	mov	r1, r2
 8008620:	4618      	mov	r0, r3
 8008622:	f003 fce7 	bl	800bff4 <USB_HC_Halt>
}
 8008626:	e380      	b.n	8008d2a <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	015a      	lsls	r2, r3, #5
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	4413      	add	r3, r2
 8008630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800863a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800863e:	d122      	bne.n	8008686 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	015a      	lsls	r2, r3, #5
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	4413      	add	r3, r2
 8008648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	0151      	lsls	r1, r2, #5
 8008652:	69ba      	ldr	r2, [r7, #24]
 8008654:	440a      	add	r2, r1
 8008656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800865a:	f043 0302 	orr.w	r3, r3, #2
 800865e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	697a      	ldr	r2, [r7, #20]
 8008666:	b2d2      	uxtb	r2, r2
 8008668:	4611      	mov	r1, r2
 800866a:	4618      	mov	r0, r3
 800866c:	f003 fcc2 	bl	800bff4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	015a      	lsls	r2, r3, #5
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	4413      	add	r3, r2
 8008678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800867c:	461a      	mov	r2, r3
 800867e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008682:	6093      	str	r3, [r2, #8]
}
 8008684:	e351      	b.n	8008d2a <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	015a      	lsls	r2, r3, #5
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	4413      	add	r3, r2
 800868e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	f003 0301 	and.w	r3, r3, #1
 8008698:	2b01      	cmp	r3, #1
 800869a:	d150      	bne.n	800873e <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	212c      	movs	r1, #44	; 0x2c
 80086a2:	fb01 f303 	mul.w	r3, r1, r3
 80086a6:	4413      	add	r3, r2
 80086a8:	335c      	adds	r3, #92	; 0x5c
 80086aa:	2200      	movs	r2, #0
 80086ac:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c0:	2b40      	cmp	r3, #64	; 0x40
 80086c2:	d111      	bne.n	80086e8 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	212c      	movs	r1, #44	; 0x2c
 80086ca:	fb01 f303 	mul.w	r3, r1, r3
 80086ce:	4413      	add	r3, r2
 80086d0:	333d      	adds	r3, #61	; 0x3d
 80086d2:	2201      	movs	r2, #1
 80086d4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	015a      	lsls	r2, r3, #5
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	4413      	add	r3, r2
 80086de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086e2:	461a      	mov	r2, r3
 80086e4:	2340      	movs	r3, #64	; 0x40
 80086e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	015a      	lsls	r2, r3, #5
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	4413      	add	r3, r2
 80086f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	0151      	lsls	r1, r2, #5
 80086fa:	69ba      	ldr	r2, [r7, #24]
 80086fc:	440a      	add	r2, r1
 80086fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008702:	f043 0302 	orr.w	r3, r3, #2
 8008706:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	697a      	ldr	r2, [r7, #20]
 800870e:	b2d2      	uxtb	r2, r2
 8008710:	4611      	mov	r1, r2
 8008712:	4618      	mov	r0, r3
 8008714:	f003 fc6e 	bl	800bff4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	015a      	lsls	r2, r3, #5
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	4413      	add	r3, r2
 8008720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008724:	461a      	mov	r2, r3
 8008726:	2301      	movs	r3, #1
 8008728:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	212c      	movs	r1, #44	; 0x2c
 8008730:	fb01 f303 	mul.w	r3, r1, r3
 8008734:	4413      	add	r3, r2
 8008736:	3361      	adds	r3, #97	; 0x61
 8008738:	2201      	movs	r2, #1
 800873a:	701a      	strb	r2, [r3, #0]
}
 800873c:	e2f5      	b.n	8008d2a <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	015a      	lsls	r2, r3, #5
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	4413      	add	r3, r2
 8008746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008750:	2b40      	cmp	r3, #64	; 0x40
 8008752:	d13c      	bne.n	80087ce <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	212c      	movs	r1, #44	; 0x2c
 800875a:	fb01 f303 	mul.w	r3, r1, r3
 800875e:	4413      	add	r3, r2
 8008760:	3361      	adds	r3, #97	; 0x61
 8008762:	2204      	movs	r2, #4
 8008764:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	212c      	movs	r1, #44	; 0x2c
 800876c:	fb01 f303 	mul.w	r3, r1, r3
 8008770:	4413      	add	r3, r2
 8008772:	333d      	adds	r3, #61	; 0x3d
 8008774:	2201      	movs	r2, #1
 8008776:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	212c      	movs	r1, #44	; 0x2c
 800877e:	fb01 f303 	mul.w	r3, r1, r3
 8008782:	4413      	add	r3, r2
 8008784:	335c      	adds	r3, #92	; 0x5c
 8008786:	2200      	movs	r2, #0
 8008788:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	015a      	lsls	r2, r3, #5
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	4413      	add	r3, r2
 8008792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	697a      	ldr	r2, [r7, #20]
 800879a:	0151      	lsls	r1, r2, #5
 800879c:	69ba      	ldr	r2, [r7, #24]
 800879e:	440a      	add	r2, r1
 80087a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087a4:	f043 0302 	orr.w	r3, r3, #2
 80087a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	b2d2      	uxtb	r2, r2
 80087b2:	4611      	mov	r1, r2
 80087b4:	4618      	mov	r0, r3
 80087b6:	f003 fc1d 	bl	800bff4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087c6:	461a      	mov	r2, r3
 80087c8:	2340      	movs	r3, #64	; 0x40
 80087ca:	6093      	str	r3, [r2, #8]
}
 80087cc:	e2ad      	b.n	8008d2a <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	015a      	lsls	r2, r3, #5
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	4413      	add	r3, r2
 80087d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	f003 0308 	and.w	r3, r3, #8
 80087e0:	2b08      	cmp	r3, #8
 80087e2:	d12a      	bne.n	800883a <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087f0:	461a      	mov	r2, r3
 80087f2:	2308      	movs	r3, #8
 80087f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	0151      	lsls	r1, r2, #5
 8008808:	69ba      	ldr	r2, [r7, #24]
 800880a:	440a      	add	r2, r1
 800880c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008810:	f043 0302 	orr.w	r3, r3, #2
 8008814:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	697a      	ldr	r2, [r7, #20]
 800881c:	b2d2      	uxtb	r2, r2
 800881e:	4611      	mov	r1, r2
 8008820:	4618      	mov	r0, r3
 8008822:	f003 fbe7 	bl	800bff4 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	212c      	movs	r1, #44	; 0x2c
 800882c:	fb01 f303 	mul.w	r3, r1, r3
 8008830:	4413      	add	r3, r2
 8008832:	3361      	adds	r3, #97	; 0x61
 8008834:	2205      	movs	r2, #5
 8008836:	701a      	strb	r2, [r3, #0]
}
 8008838:	e277      	b.n	8008d2a <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	015a      	lsls	r2, r3, #5
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	4413      	add	r3, r2
 8008842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	f003 0310 	and.w	r3, r3, #16
 800884c:	2b10      	cmp	r3, #16
 800884e:	d150      	bne.n	80088f2 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	212c      	movs	r1, #44	; 0x2c
 8008856:	fb01 f303 	mul.w	r3, r1, r3
 800885a:	4413      	add	r3, r2
 800885c:	335c      	adds	r3, #92	; 0x5c
 800885e:	2200      	movs	r2, #0
 8008860:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	212c      	movs	r1, #44	; 0x2c
 8008868:	fb01 f303 	mul.w	r3, r1, r3
 800886c:	4413      	add	r3, r2
 800886e:	3361      	adds	r3, #97	; 0x61
 8008870:	2203      	movs	r2, #3
 8008872:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	212c      	movs	r1, #44	; 0x2c
 800887a:	fb01 f303 	mul.w	r3, r1, r3
 800887e:	4413      	add	r3, r2
 8008880:	333d      	adds	r3, #61	; 0x3d
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d112      	bne.n	80088ae <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	212c      	movs	r1, #44	; 0x2c
 800888e:	fb01 f303 	mul.w	r3, r1, r3
 8008892:	4413      	add	r3, r2
 8008894:	333c      	adds	r3, #60	; 0x3c
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d108      	bne.n	80088ae <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	212c      	movs	r1, #44	; 0x2c
 80088a2:	fb01 f303 	mul.w	r3, r1, r3
 80088a6:	4413      	add	r3, r2
 80088a8:	333d      	adds	r3, #61	; 0x3d
 80088aa:	2201      	movs	r2, #1
 80088ac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	0151      	lsls	r1, r2, #5
 80088c0:	69ba      	ldr	r2, [r7, #24]
 80088c2:	440a      	add	r2, r1
 80088c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088c8:	f043 0302 	orr.w	r3, r3, #2
 80088cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	b2d2      	uxtb	r2, r2
 80088d6:	4611      	mov	r1, r2
 80088d8:	4618      	mov	r0, r3
 80088da:	f003 fb8b 	bl	800bff4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	015a      	lsls	r2, r3, #5
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	4413      	add	r3, r2
 80088e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ea:	461a      	mov	r2, r3
 80088ec:	2310      	movs	r3, #16
 80088ee:	6093      	str	r3, [r2, #8]
}
 80088f0:	e21b      	b.n	8008d2a <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	015a      	lsls	r2, r3, #5
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	4413      	add	r3, r2
 80088fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008904:	2b80      	cmp	r3, #128	; 0x80
 8008906:	d174      	bne.n	80089f2 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d121      	bne.n	8008954 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	212c      	movs	r1, #44	; 0x2c
 8008916:	fb01 f303 	mul.w	r3, r1, r3
 800891a:	4413      	add	r3, r2
 800891c:	3361      	adds	r3, #97	; 0x61
 800891e:	2206      	movs	r2, #6
 8008920:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	015a      	lsls	r2, r3, #5
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	4413      	add	r3, r2
 800892a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	697a      	ldr	r2, [r7, #20]
 8008932:	0151      	lsls	r1, r2, #5
 8008934:	69ba      	ldr	r2, [r7, #24]
 8008936:	440a      	add	r2, r1
 8008938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800893c:	f043 0302 	orr.w	r3, r3, #2
 8008940:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	b2d2      	uxtb	r2, r2
 800894a:	4611      	mov	r1, r2
 800894c:	4618      	mov	r0, r3
 800894e:	f003 fb51 	bl	800bff4 <USB_HC_Halt>
 8008952:	e044      	b.n	80089de <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	212c      	movs	r1, #44	; 0x2c
 800895a:	fb01 f303 	mul.w	r3, r1, r3
 800895e:	4413      	add	r3, r2
 8008960:	335c      	adds	r3, #92	; 0x5c
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	1c5a      	adds	r2, r3, #1
 8008966:	6879      	ldr	r1, [r7, #4]
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	202c      	movs	r0, #44	; 0x2c
 800896c:	fb00 f303 	mul.w	r3, r0, r3
 8008970:	440b      	add	r3, r1
 8008972:	335c      	adds	r3, #92	; 0x5c
 8008974:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	212c      	movs	r1, #44	; 0x2c
 800897c:	fb01 f303 	mul.w	r3, r1, r3
 8008980:	4413      	add	r3, r2
 8008982:	335c      	adds	r3, #92	; 0x5c
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b02      	cmp	r3, #2
 8008988:	d920      	bls.n	80089cc <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	212c      	movs	r1, #44	; 0x2c
 8008990:	fb01 f303 	mul.w	r3, r1, r3
 8008994:	4413      	add	r3, r2
 8008996:	335c      	adds	r3, #92	; 0x5c
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	212c      	movs	r1, #44	; 0x2c
 80089a2:	fb01 f303 	mul.w	r3, r1, r3
 80089a6:	4413      	add	r3, r2
 80089a8:	3360      	adds	r3, #96	; 0x60
 80089aa:	2204      	movs	r2, #4
 80089ac:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	b2d9      	uxtb	r1, r3
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	202c      	movs	r0, #44	; 0x2c
 80089b8:	fb00 f303 	mul.w	r3, r0, r3
 80089bc:	4413      	add	r3, r2
 80089be:	3360      	adds	r3, #96	; 0x60
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	461a      	mov	r2, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f00c fdb1 	bl	801552c <HAL_HCD_HC_NotifyURBChange_Callback>
 80089ca:	e008      	b.n	80089de <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	212c      	movs	r1, #44	; 0x2c
 80089d2:	fb01 f303 	mul.w	r3, r1, r3
 80089d6:	4413      	add	r3, r2
 80089d8:	3360      	adds	r3, #96	; 0x60
 80089da:	2202      	movs	r2, #2
 80089dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	4413      	add	r3, r2
 80089e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ea:	461a      	mov	r2, r3
 80089ec:	2380      	movs	r3, #128	; 0x80
 80089ee:	6093      	str	r3, [r2, #8]
}
 80089f0:	e19b      	b.n	8008d2a <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	015a      	lsls	r2, r3, #5
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	4413      	add	r3, r2
 80089fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a08:	d134      	bne.n	8008a74 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	015a      	lsls	r2, r3, #5
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	4413      	add	r3, r2
 8008a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	697a      	ldr	r2, [r7, #20]
 8008a1a:	0151      	lsls	r1, r2, #5
 8008a1c:	69ba      	ldr	r2, [r7, #24]
 8008a1e:	440a      	add	r2, r1
 8008a20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a24:	f043 0302 	orr.w	r3, r3, #2
 8008a28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	b2d2      	uxtb	r2, r2
 8008a32:	4611      	mov	r1, r2
 8008a34:	4618      	mov	r0, r3
 8008a36:	f003 fadd 	bl	800bff4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a46:	461a      	mov	r2, r3
 8008a48:	2310      	movs	r3, #16
 8008a4a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a58:	461a      	mov	r2, r3
 8008a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	212c      	movs	r1, #44	; 0x2c
 8008a66:	fb01 f303 	mul.w	r3, r1, r3
 8008a6a:	4413      	add	r3, r2
 8008a6c:	3361      	adds	r3, #97	; 0x61
 8008a6e:	2208      	movs	r2, #8
 8008a70:	701a      	strb	r2, [r3, #0]
}
 8008a72:	e15a      	b.n	8008d2a <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	f003 0302 	and.w	r3, r3, #2
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	f040 814f 	bne.w	8008d2a <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	015a      	lsls	r2, r3, #5
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	4413      	add	r3, r2
 8008a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	0151      	lsls	r1, r2, #5
 8008a9e:	69ba      	ldr	r2, [r7, #24]
 8008aa0:	440a      	add	r2, r1
 8008aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008aa6:	f023 0302 	bic.w	r3, r3, #2
 8008aaa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	212c      	movs	r1, #44	; 0x2c
 8008ab2:	fb01 f303 	mul.w	r3, r1, r3
 8008ab6:	4413      	add	r3, r2
 8008ab8:	3361      	adds	r3, #97	; 0x61
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d17d      	bne.n	8008bbc <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	212c      	movs	r1, #44	; 0x2c
 8008ac6:	fb01 f303 	mul.w	r3, r1, r3
 8008aca:	4413      	add	r3, r2
 8008acc:	3360      	adds	r3, #96	; 0x60
 8008ace:	2201      	movs	r2, #1
 8008ad0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	212c      	movs	r1, #44	; 0x2c
 8008ad8:	fb01 f303 	mul.w	r3, r1, r3
 8008adc:	4413      	add	r3, r2
 8008ade:	333f      	adds	r3, #63	; 0x3f
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d00a      	beq.n	8008afc <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	212c      	movs	r1, #44	; 0x2c
 8008aec:	fb01 f303 	mul.w	r3, r1, r3
 8008af0:	4413      	add	r3, r2
 8008af2:	333f      	adds	r3, #63	; 0x3f
 8008af4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8008af6:	2b03      	cmp	r3, #3
 8008af8:	f040 8100 	bne.w	8008cfc <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d113      	bne.n	8008b2c <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	212c      	movs	r1, #44	; 0x2c
 8008b0a:	fb01 f303 	mul.w	r3, r1, r3
 8008b0e:	4413      	add	r3, r2
 8008b10:	3355      	adds	r3, #85	; 0x55
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	f083 0301 	eor.w	r3, r3, #1
 8008b18:	b2d8      	uxtb	r0, r3
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	212c      	movs	r1, #44	; 0x2c
 8008b20:	fb01 f303 	mul.w	r3, r1, r3
 8008b24:	4413      	add	r3, r2
 8008b26:	3355      	adds	r3, #85	; 0x55
 8008b28:	4602      	mov	r2, r0
 8008b2a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	f040 80e3 	bne.w	8008cfc <HCD_HC_OUT_IRQHandler+0x7cc>
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	212c      	movs	r1, #44	; 0x2c
 8008b3c:	fb01 f303 	mul.w	r3, r1, r3
 8008b40:	4413      	add	r3, r2
 8008b42:	334c      	adds	r3, #76	; 0x4c
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f000 80d8 	beq.w	8008cfc <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	212c      	movs	r1, #44	; 0x2c
 8008b52:	fb01 f303 	mul.w	r3, r1, r3
 8008b56:	4413      	add	r3, r2
 8008b58:	334c      	adds	r3, #76	; 0x4c
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6879      	ldr	r1, [r7, #4]
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	202c      	movs	r0, #44	; 0x2c
 8008b62:	fb00 f202 	mul.w	r2, r0, r2
 8008b66:	440a      	add	r2, r1
 8008b68:	3240      	adds	r2, #64	; 0x40
 8008b6a:	8812      	ldrh	r2, [r2, #0]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	6879      	ldr	r1, [r7, #4]
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	202c      	movs	r0, #44	; 0x2c
 8008b76:	fb00 f202 	mul.w	r2, r0, r2
 8008b7a:	440a      	add	r2, r1
 8008b7c:	3240      	adds	r2, #64	; 0x40
 8008b7e:	8812      	ldrh	r2, [r2, #0]
 8008b80:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b84:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f003 0301 	and.w	r3, r3, #1
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f000 80b5 	beq.w	8008cfc <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	212c      	movs	r1, #44	; 0x2c
 8008b98:	fb01 f303 	mul.w	r3, r1, r3
 8008b9c:	4413      	add	r3, r2
 8008b9e:	3355      	adds	r3, #85	; 0x55
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	f083 0301 	eor.w	r3, r3, #1
 8008ba6:	b2d8      	uxtb	r0, r3
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	212c      	movs	r1, #44	; 0x2c
 8008bae:	fb01 f303 	mul.w	r3, r1, r3
 8008bb2:	4413      	add	r3, r2
 8008bb4:	3355      	adds	r3, #85	; 0x55
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	701a      	strb	r2, [r3, #0]
 8008bba:	e09f      	b.n	8008cfc <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	212c      	movs	r1, #44	; 0x2c
 8008bc2:	fb01 f303 	mul.w	r3, r1, r3
 8008bc6:	4413      	add	r3, r2
 8008bc8:	3361      	adds	r3, #97	; 0x61
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	2b03      	cmp	r3, #3
 8008bce:	d109      	bne.n	8008be4 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	212c      	movs	r1, #44	; 0x2c
 8008bd6:	fb01 f303 	mul.w	r3, r1, r3
 8008bda:	4413      	add	r3, r2
 8008bdc:	3360      	adds	r3, #96	; 0x60
 8008bde:	2202      	movs	r2, #2
 8008be0:	701a      	strb	r2, [r3, #0]
 8008be2:	e08b      	b.n	8008cfc <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	212c      	movs	r1, #44	; 0x2c
 8008bea:	fb01 f303 	mul.w	r3, r1, r3
 8008bee:	4413      	add	r3, r2
 8008bf0:	3361      	adds	r3, #97	; 0x61
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	2b04      	cmp	r3, #4
 8008bf6:	d109      	bne.n	8008c0c <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	212c      	movs	r1, #44	; 0x2c
 8008bfe:	fb01 f303 	mul.w	r3, r1, r3
 8008c02:	4413      	add	r3, r2
 8008c04:	3360      	adds	r3, #96	; 0x60
 8008c06:	2202      	movs	r2, #2
 8008c08:	701a      	strb	r2, [r3, #0]
 8008c0a:	e077      	b.n	8008cfc <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	212c      	movs	r1, #44	; 0x2c
 8008c12:	fb01 f303 	mul.w	r3, r1, r3
 8008c16:	4413      	add	r3, r2
 8008c18:	3361      	adds	r3, #97	; 0x61
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	2b05      	cmp	r3, #5
 8008c1e:	d109      	bne.n	8008c34 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	212c      	movs	r1, #44	; 0x2c
 8008c26:	fb01 f303 	mul.w	r3, r1, r3
 8008c2a:	4413      	add	r3, r2
 8008c2c:	3360      	adds	r3, #96	; 0x60
 8008c2e:	2205      	movs	r2, #5
 8008c30:	701a      	strb	r2, [r3, #0]
 8008c32:	e063      	b.n	8008cfc <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	212c      	movs	r1, #44	; 0x2c
 8008c3a:	fb01 f303 	mul.w	r3, r1, r3
 8008c3e:	4413      	add	r3, r2
 8008c40:	3361      	adds	r3, #97	; 0x61
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	2b06      	cmp	r3, #6
 8008c46:	d009      	beq.n	8008c5c <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	212c      	movs	r1, #44	; 0x2c
 8008c4e:	fb01 f303 	mul.w	r3, r1, r3
 8008c52:	4413      	add	r3, r2
 8008c54:	3361      	adds	r3, #97	; 0x61
 8008c56:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008c58:	2b08      	cmp	r3, #8
 8008c5a:	d14f      	bne.n	8008cfc <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	212c      	movs	r1, #44	; 0x2c
 8008c62:	fb01 f303 	mul.w	r3, r1, r3
 8008c66:	4413      	add	r3, r2
 8008c68:	335c      	adds	r3, #92	; 0x5c
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	1c5a      	adds	r2, r3, #1
 8008c6e:	6879      	ldr	r1, [r7, #4]
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	202c      	movs	r0, #44	; 0x2c
 8008c74:	fb00 f303 	mul.w	r3, r0, r3
 8008c78:	440b      	add	r3, r1
 8008c7a:	335c      	adds	r3, #92	; 0x5c
 8008c7c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	212c      	movs	r1, #44	; 0x2c
 8008c84:	fb01 f303 	mul.w	r3, r1, r3
 8008c88:	4413      	add	r3, r2
 8008c8a:	335c      	adds	r3, #92	; 0x5c
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d912      	bls.n	8008cb8 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	212c      	movs	r1, #44	; 0x2c
 8008c98:	fb01 f303 	mul.w	r3, r1, r3
 8008c9c:	4413      	add	r3, r2
 8008c9e:	335c      	adds	r3, #92	; 0x5c
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	212c      	movs	r1, #44	; 0x2c
 8008caa:	fb01 f303 	mul.w	r3, r1, r3
 8008cae:	4413      	add	r3, r2
 8008cb0:	3360      	adds	r3, #96	; 0x60
 8008cb2:	2204      	movs	r2, #4
 8008cb4:	701a      	strb	r2, [r3, #0]
 8008cb6:	e021      	b.n	8008cfc <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	212c      	movs	r1, #44	; 0x2c
 8008cbe:	fb01 f303 	mul.w	r3, r1, r3
 8008cc2:	4413      	add	r3, r2
 8008cc4:	3360      	adds	r3, #96	; 0x60
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	015a      	lsls	r2, r3, #5
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ce0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ce8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	015a      	lsls	r2, r3, #5
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	015a      	lsls	r2, r3, #5
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d08:	461a      	mov	r2, r3
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	b2d9      	uxtb	r1, r3
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	202c      	movs	r0, #44	; 0x2c
 8008d18:	fb00 f303 	mul.w	r3, r0, r3
 8008d1c:	4413      	add	r3, r2
 8008d1e:	3360      	adds	r3, #96	; 0x60
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	461a      	mov	r2, r3
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f00c fc01 	bl	801552c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8008d2a:	bf00      	nop
 8008d2c:	3720      	adds	r7, #32
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b08a      	sub	sp, #40	; 0x28
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d42:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6a1b      	ldr	r3, [r3, #32]
 8008d4a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	f003 030f 	and.w	r3, r3, #15
 8008d52:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	0c5b      	lsrs	r3, r3, #17
 8008d58:	f003 030f 	and.w	r3, r3, #15
 8008d5c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	091b      	lsrs	r3, r3, #4
 8008d62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d66:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d004      	beq.n	8008d78 <HCD_RXQLVL_IRQHandler+0x46>
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	2b05      	cmp	r3, #5
 8008d72:	f000 80a9 	beq.w	8008ec8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8008d76:	e0aa      	b.n	8008ece <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f000 80a6 	beq.w	8008ecc <HCD_RXQLVL_IRQHandler+0x19a>
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	212c      	movs	r1, #44	; 0x2c
 8008d86:	fb01 f303 	mul.w	r3, r1, r3
 8008d8a:	4413      	add	r3, r2
 8008d8c:	3344      	adds	r3, #68	; 0x44
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f000 809b 	beq.w	8008ecc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	212c      	movs	r1, #44	; 0x2c
 8008d9c:	fb01 f303 	mul.w	r3, r1, r3
 8008da0:	4413      	add	r3, r2
 8008da2:	3350      	adds	r3, #80	; 0x50
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	441a      	add	r2, r3
 8008daa:	6879      	ldr	r1, [r7, #4]
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	202c      	movs	r0, #44	; 0x2c
 8008db0:	fb00 f303 	mul.w	r3, r0, r3
 8008db4:	440b      	add	r3, r1
 8008db6:	334c      	adds	r3, #76	; 0x4c
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d87a      	bhi.n	8008eb4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6818      	ldr	r0, [r3, #0]
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	212c      	movs	r1, #44	; 0x2c
 8008dc8:	fb01 f303 	mul.w	r3, r1, r3
 8008dcc:	4413      	add	r3, r2
 8008dce:	3344      	adds	r3, #68	; 0x44
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	b292      	uxth	r2, r2
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	f002 fc8d 	bl	800b6f6 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	212c      	movs	r1, #44	; 0x2c
 8008de2:	fb01 f303 	mul.w	r3, r1, r3
 8008de6:	4413      	add	r3, r2
 8008de8:	3344      	adds	r3, #68	; 0x44
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	441a      	add	r2, r3
 8008df0:	6879      	ldr	r1, [r7, #4]
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	202c      	movs	r0, #44	; 0x2c
 8008df6:	fb00 f303 	mul.w	r3, r0, r3
 8008dfa:	440b      	add	r3, r1
 8008dfc:	3344      	adds	r3, #68	; 0x44
 8008dfe:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	212c      	movs	r1, #44	; 0x2c
 8008e06:	fb01 f303 	mul.w	r3, r1, r3
 8008e0a:	4413      	add	r3, r2
 8008e0c:	3350      	adds	r3, #80	; 0x50
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	441a      	add	r2, r3
 8008e14:	6879      	ldr	r1, [r7, #4]
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	202c      	movs	r0, #44	; 0x2c
 8008e1a:	fb00 f303 	mul.w	r3, r0, r3
 8008e1e:	440b      	add	r3, r1
 8008e20:	3350      	adds	r3, #80	; 0x50
 8008e22:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	015a      	lsls	r2, r3, #5
 8008e28:	6a3b      	ldr	r3, [r7, #32]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	0cdb      	lsrs	r3, r3, #19
 8008e34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e38:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	212c      	movs	r1, #44	; 0x2c
 8008e40:	fb01 f303 	mul.w	r3, r1, r3
 8008e44:	4413      	add	r3, r2
 8008e46:	3340      	adds	r3, #64	; 0x40
 8008e48:	881b      	ldrh	r3, [r3, #0]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d13c      	bne.n	8008ecc <HCD_RXQLVL_IRQHandler+0x19a>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d039      	beq.n	8008ecc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	015a      	lsls	r2, r3, #5
 8008e5c:	6a3b      	ldr	r3, [r7, #32]
 8008e5e:	4413      	add	r3, r2
 8008e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e6e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e76:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	015a      	lsls	r2, r3, #5
 8008e7c:	6a3b      	ldr	r3, [r7, #32]
 8008e7e:	4413      	add	r3, r2
 8008e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e84:	461a      	mov	r2, r3
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	212c      	movs	r1, #44	; 0x2c
 8008e90:	fb01 f303 	mul.w	r3, r1, r3
 8008e94:	4413      	add	r3, r2
 8008e96:	3354      	adds	r3, #84	; 0x54
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	f083 0301 	eor.w	r3, r3, #1
 8008e9e:	b2d8      	uxtb	r0, r3
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	212c      	movs	r1, #44	; 0x2c
 8008ea6:	fb01 f303 	mul.w	r3, r1, r3
 8008eaa:	4413      	add	r3, r2
 8008eac:	3354      	adds	r3, #84	; 0x54
 8008eae:	4602      	mov	r2, r0
 8008eb0:	701a      	strb	r2, [r3, #0]
      break;
 8008eb2:	e00b      	b.n	8008ecc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	212c      	movs	r1, #44	; 0x2c
 8008eba:	fb01 f303 	mul.w	r3, r1, r3
 8008ebe:	4413      	add	r3, r2
 8008ec0:	3360      	adds	r3, #96	; 0x60
 8008ec2:	2204      	movs	r2, #4
 8008ec4:	701a      	strb	r2, [r3, #0]
      break;
 8008ec6:	e001      	b.n	8008ecc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8008ec8:	bf00      	nop
 8008eca:	e000      	b.n	8008ece <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8008ecc:	bf00      	nop
  }
}
 8008ece:	bf00      	nop
 8008ed0:	3728      	adds	r7, #40	; 0x28
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b086      	sub	sp, #24
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008f02:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f003 0302 	and.w	r3, r3, #2
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d10b      	bne.n	8008f26 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f003 0301 	and.w	r3, r3, #1
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d102      	bne.n	8008f1e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f00c faeb 	bl	80154f4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	f043 0302 	orr.w	r3, r3, #2
 8008f24:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f003 0308 	and.w	r3, r3, #8
 8008f2c:	2b08      	cmp	r3, #8
 8008f2e:	d132      	bne.n	8008f96 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	f043 0308 	orr.w	r3, r3, #8
 8008f36:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f003 0304 	and.w	r3, r3, #4
 8008f3e:	2b04      	cmp	r3, #4
 8008f40:	d126      	bne.n	8008f90 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	699b      	ldr	r3, [r3, #24]
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d113      	bne.n	8008f72 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8008f50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f54:	d106      	bne.n	8008f64 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2102      	movs	r1, #2
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f002 fd27 	bl	800b9b0 <USB_InitFSLSPClkSel>
 8008f62:	e011      	b.n	8008f88 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2101      	movs	r1, #1
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f002 fd20 	bl	800b9b0 <USB_InitFSLSPClkSel>
 8008f70:	e00a      	b.n	8008f88 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d106      	bne.n	8008f88 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f80:	461a      	mov	r2, r3
 8008f82:	f64e 2360 	movw	r3, #60000	; 0xea60
 8008f86:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f00c fae1 	bl	8015550 <HAL_HCD_PortEnabled_Callback>
 8008f8e:	e002      	b.n	8008f96 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f00c faeb 	bl	801556c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f003 0320 	and.w	r3, r3, #32
 8008f9c:	2b20      	cmp	r3, #32
 8008f9e:	d103      	bne.n	8008fa8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	f043 0320 	orr.w	r3, r3, #32
 8008fa6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008fae:	461a      	mov	r2, r3
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	6013      	str	r3, [r2, #0]
}
 8008fb4:	bf00      	nop
 8008fb6:	3718      	adds	r7, #24
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b08a      	sub	sp, #40	; 0x28
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d101      	bne.n	8008fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e237      	b.n	800943e <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 0301 	and.w	r3, r3, #1
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d050      	beq.n	800907c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008fda:	4ba3      	ldr	r3, [pc, #652]	; (8009268 <HAL_RCC_OscConfig+0x2ac>)
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	f003 030c 	and.w	r3, r3, #12
 8008fe2:	2b04      	cmp	r3, #4
 8008fe4:	d00c      	beq.n	8009000 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008fe6:	4ba0      	ldr	r3, [pc, #640]	; (8009268 <HAL_RCC_OscConfig+0x2ac>)
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008fee:	2b08      	cmp	r3, #8
 8008ff0:	d112      	bne.n	8009018 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ff2:	4b9d      	ldr	r3, [pc, #628]	; (8009268 <HAL_RCC_OscConfig+0x2ac>)
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ffe:	d10b      	bne.n	8009018 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009000:	4b99      	ldr	r3, [pc, #612]	; (8009268 <HAL_RCC_OscConfig+0x2ac>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009008:	2b00      	cmp	r3, #0
 800900a:	d036      	beq.n	800907a <HAL_RCC_OscConfig+0xbe>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d132      	bne.n	800907a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e212      	b.n	800943e <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	4b93      	ldr	r3, [pc, #588]	; (800926c <HAL_RCC_OscConfig+0x2b0>)
 800901e:	b2d2      	uxtb	r2, r2
 8009020:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d013      	beq.n	8009052 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800902a:	f7fc fed1 	bl	8005dd0 <HAL_GetTick>
 800902e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009030:	e008      	b.n	8009044 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009032:	f7fc fecd 	bl	8005dd0 <HAL_GetTick>
 8009036:	4602      	mov	r2, r0
 8009038:	6a3b      	ldr	r3, [r7, #32]
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	2b64      	cmp	r3, #100	; 0x64
 800903e:	d901      	bls.n	8009044 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8009040:	2303      	movs	r3, #3
 8009042:	e1fc      	b.n	800943e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009044:	4b88      	ldr	r3, [pc, #544]	; (8009268 <HAL_RCC_OscConfig+0x2ac>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d0f0      	beq.n	8009032 <HAL_RCC_OscConfig+0x76>
 8009050:	e014      	b.n	800907c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009052:	f7fc febd 	bl	8005dd0 <HAL_GetTick>
 8009056:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009058:	e008      	b.n	800906c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800905a:	f7fc feb9 	bl	8005dd0 <HAL_GetTick>
 800905e:	4602      	mov	r2, r0
 8009060:	6a3b      	ldr	r3, [r7, #32]
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	2b64      	cmp	r3, #100	; 0x64
 8009066:	d901      	bls.n	800906c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e1e8      	b.n	800943e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800906c:	4b7e      	ldr	r3, [pc, #504]	; (8009268 <HAL_RCC_OscConfig+0x2ac>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1f0      	bne.n	800905a <HAL_RCC_OscConfig+0x9e>
 8009078:	e000      	b.n	800907c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800907a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0302 	and.w	r3, r3, #2
 8009084:	2b00      	cmp	r3, #0
 8009086:	d077      	beq.n	8009178 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009088:	4b77      	ldr	r3, [pc, #476]	; (8009268 <HAL_RCC_OscConfig+0x2ac>)
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f003 030c 	and.w	r3, r3, #12
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00b      	beq.n	80090ac <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009094:	4b74      	ldr	r3, [pc, #464]	; (8009268 <HAL_RCC_OscConfig+0x2ac>)
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800909c:	2b08      	cmp	r3, #8
 800909e:	d126      	bne.n	80090ee <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090a0:	4b71      	ldr	r3, [pc, #452]	; (8009268 <HAL_RCC_OscConfig+0x2ac>)
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d120      	bne.n	80090ee <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090ac:	4b6e      	ldr	r3, [pc, #440]	; (8009268 <HAL_RCC_OscConfig+0x2ac>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 0302 	and.w	r3, r3, #2
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d005      	beq.n	80090c4 <HAL_RCC_OscConfig+0x108>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d001      	beq.n	80090c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e1bc      	b.n	800943e <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090c4:	4b68      	ldr	r3, [pc, #416]	; (8009268 <HAL_RCC_OscConfig+0x2ac>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	21f8      	movs	r1, #248	; 0xf8
 80090d2:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090d4:	69b9      	ldr	r1, [r7, #24]
 80090d6:	fa91 f1a1 	rbit	r1, r1
 80090da:	6179      	str	r1, [r7, #20]
  return result;
 80090dc:	6979      	ldr	r1, [r7, #20]
 80090de:	fab1 f181 	clz	r1, r1
 80090e2:	b2c9      	uxtb	r1, r1
 80090e4:	408b      	lsls	r3, r1
 80090e6:	4960      	ldr	r1, [pc, #384]	; (8009268 <HAL_RCC_OscConfig+0x2ac>)
 80090e8:	4313      	orrs	r3, r2
 80090ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090ec:	e044      	b.n	8009178 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d02a      	beq.n	800914c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80090f6:	4b5e      	ldr	r3, [pc, #376]	; (8009270 <HAL_RCC_OscConfig+0x2b4>)
 80090f8:	2201      	movs	r2, #1
 80090fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090fc:	f7fc fe68 	bl	8005dd0 <HAL_GetTick>
 8009100:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009102:	e008      	b.n	8009116 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009104:	f7fc fe64 	bl	8005dd0 <HAL_GetTick>
 8009108:	4602      	mov	r2, r0
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	2b02      	cmp	r3, #2
 8009110:	d901      	bls.n	8009116 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e193      	b.n	800943e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009116:	4b54      	ldr	r3, [pc, #336]	; (8009268 <HAL_RCC_OscConfig+0x2ac>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 0302 	and.w	r3, r3, #2
 800911e:	2b00      	cmp	r3, #0
 8009120:	d0f0      	beq.n	8009104 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009122:	4b51      	ldr	r3, [pc, #324]	; (8009268 <HAL_RCC_OscConfig+0x2ac>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	21f8      	movs	r1, #248	; 0xf8
 8009130:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009132:	6939      	ldr	r1, [r7, #16]
 8009134:	fa91 f1a1 	rbit	r1, r1
 8009138:	60f9      	str	r1, [r7, #12]
  return result;
 800913a:	68f9      	ldr	r1, [r7, #12]
 800913c:	fab1 f181 	clz	r1, r1
 8009140:	b2c9      	uxtb	r1, r1
 8009142:	408b      	lsls	r3, r1
 8009144:	4948      	ldr	r1, [pc, #288]	; (8009268 <HAL_RCC_OscConfig+0x2ac>)
 8009146:	4313      	orrs	r3, r2
 8009148:	600b      	str	r3, [r1, #0]
 800914a:	e015      	b.n	8009178 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800914c:	4b48      	ldr	r3, [pc, #288]	; (8009270 <HAL_RCC_OscConfig+0x2b4>)
 800914e:	2200      	movs	r2, #0
 8009150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009152:	f7fc fe3d 	bl	8005dd0 <HAL_GetTick>
 8009156:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009158:	e008      	b.n	800916c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800915a:	f7fc fe39 	bl	8005dd0 <HAL_GetTick>
 800915e:	4602      	mov	r2, r0
 8009160:	6a3b      	ldr	r3, [r7, #32]
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	2b02      	cmp	r3, #2
 8009166:	d901      	bls.n	800916c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8009168:	2303      	movs	r3, #3
 800916a:	e168      	b.n	800943e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800916c:	4b3e      	ldr	r3, [pc, #248]	; (8009268 <HAL_RCC_OscConfig+0x2ac>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f003 0302 	and.w	r3, r3, #2
 8009174:	2b00      	cmp	r3, #0
 8009176:	d1f0      	bne.n	800915a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 0308 	and.w	r3, r3, #8
 8009180:	2b00      	cmp	r3, #0
 8009182:	d030      	beq.n	80091e6 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	695b      	ldr	r3, [r3, #20]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d016      	beq.n	80091ba <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800918c:	4b39      	ldr	r3, [pc, #228]	; (8009274 <HAL_RCC_OscConfig+0x2b8>)
 800918e:	2201      	movs	r2, #1
 8009190:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009192:	f7fc fe1d 	bl	8005dd0 <HAL_GetTick>
 8009196:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009198:	e008      	b.n	80091ac <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800919a:	f7fc fe19 	bl	8005dd0 <HAL_GetTick>
 800919e:	4602      	mov	r2, r0
 80091a0:	6a3b      	ldr	r3, [r7, #32]
 80091a2:	1ad3      	subs	r3, r2, r3
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d901      	bls.n	80091ac <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80091a8:	2303      	movs	r3, #3
 80091aa:	e148      	b.n	800943e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091ac:	4b2e      	ldr	r3, [pc, #184]	; (8009268 <HAL_RCC_OscConfig+0x2ac>)
 80091ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091b0:	f003 0302 	and.w	r3, r3, #2
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d0f0      	beq.n	800919a <HAL_RCC_OscConfig+0x1de>
 80091b8:	e015      	b.n	80091e6 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091ba:	4b2e      	ldr	r3, [pc, #184]	; (8009274 <HAL_RCC_OscConfig+0x2b8>)
 80091bc:	2200      	movs	r2, #0
 80091be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091c0:	f7fc fe06 	bl	8005dd0 <HAL_GetTick>
 80091c4:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091c6:	e008      	b.n	80091da <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091c8:	f7fc fe02 	bl	8005dd0 <HAL_GetTick>
 80091cc:	4602      	mov	r2, r0
 80091ce:	6a3b      	ldr	r3, [r7, #32]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d901      	bls.n	80091da <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e131      	b.n	800943e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091da:	4b23      	ldr	r3, [pc, #140]	; (8009268 <HAL_RCC_OscConfig+0x2ac>)
 80091dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091de:	f003 0302 	and.w	r3, r3, #2
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1f0      	bne.n	80091c8 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 0304 	and.w	r3, r3, #4
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 8088 	beq.w	8009304 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091f4:	2300      	movs	r3, #0
 80091f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091fa:	4b1b      	ldr	r3, [pc, #108]	; (8009268 <HAL_RCC_OscConfig+0x2ac>)
 80091fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009202:	2b00      	cmp	r3, #0
 8009204:	d110      	bne.n	8009228 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009206:	2300      	movs	r3, #0
 8009208:	60bb      	str	r3, [r7, #8]
 800920a:	4b17      	ldr	r3, [pc, #92]	; (8009268 <HAL_RCC_OscConfig+0x2ac>)
 800920c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920e:	4a16      	ldr	r2, [pc, #88]	; (8009268 <HAL_RCC_OscConfig+0x2ac>)
 8009210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009214:	6413      	str	r3, [r2, #64]	; 0x40
 8009216:	4b14      	ldr	r3, [pc, #80]	; (8009268 <HAL_RCC_OscConfig+0x2ac>)
 8009218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800921e:	60bb      	str	r3, [r7, #8]
 8009220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009222:	2301      	movs	r3, #1
 8009224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009228:	4b13      	ldr	r3, [pc, #76]	; (8009278 <HAL_RCC_OscConfig+0x2bc>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a12      	ldr	r2, [pc, #72]	; (8009278 <HAL_RCC_OscConfig+0x2bc>)
 800922e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009232:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009234:	4b10      	ldr	r3, [pc, #64]	; (8009278 <HAL_RCC_OscConfig+0x2bc>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800923c:	2b00      	cmp	r3, #0
 800923e:	d123      	bne.n	8009288 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009240:	4b0d      	ldr	r3, [pc, #52]	; (8009278 <HAL_RCC_OscConfig+0x2bc>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a0c      	ldr	r2, [pc, #48]	; (8009278 <HAL_RCC_OscConfig+0x2bc>)
 8009246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800924a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800924c:	f7fc fdc0 	bl	8005dd0 <HAL_GetTick>
 8009250:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009252:	e013      	b.n	800927c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009254:	f7fc fdbc 	bl	8005dd0 <HAL_GetTick>
 8009258:	4602      	mov	r2, r0
 800925a:	6a3b      	ldr	r3, [r7, #32]
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	2b02      	cmp	r3, #2
 8009260:	d90c      	bls.n	800927c <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8009262:	2303      	movs	r3, #3
 8009264:	e0eb      	b.n	800943e <HAL_RCC_OscConfig+0x482>
 8009266:	bf00      	nop
 8009268:	40023800 	.word	0x40023800
 800926c:	40023802 	.word	0x40023802
 8009270:	42470000 	.word	0x42470000
 8009274:	42470e80 	.word	0x42470e80
 8009278:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800927c:	4b72      	ldr	r3, [pc, #456]	; (8009448 <HAL_RCC_OscConfig+0x48c>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009284:	2b00      	cmp	r3, #0
 8009286:	d0e5      	beq.n	8009254 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	689a      	ldr	r2, [r3, #8]
 800928c:	4b6f      	ldr	r3, [pc, #444]	; (800944c <HAL_RCC_OscConfig+0x490>)
 800928e:	b2d2      	uxtb	r2, r2
 8009290:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d015      	beq.n	80092c6 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800929a:	f7fc fd99 	bl	8005dd0 <HAL_GetTick>
 800929e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092a0:	e00a      	b.n	80092b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092a2:	f7fc fd95 	bl	8005dd0 <HAL_GetTick>
 80092a6:	4602      	mov	r2, r0
 80092a8:	6a3b      	ldr	r3, [r7, #32]
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d901      	bls.n	80092b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80092b4:	2303      	movs	r3, #3
 80092b6:	e0c2      	b.n	800943e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092b8:	4b65      	ldr	r3, [pc, #404]	; (8009450 <HAL_RCC_OscConfig+0x494>)
 80092ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092bc:	f003 0302 	and.w	r3, r3, #2
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d0ee      	beq.n	80092a2 <HAL_RCC_OscConfig+0x2e6>
 80092c4:	e014      	b.n	80092f0 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80092c6:	f7fc fd83 	bl	8005dd0 <HAL_GetTick>
 80092ca:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092cc:	e00a      	b.n	80092e4 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092ce:	f7fc fd7f 	bl	8005dd0 <HAL_GetTick>
 80092d2:	4602      	mov	r2, r0
 80092d4:	6a3b      	ldr	r3, [r7, #32]
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80092dc:	4293      	cmp	r3, r2
 80092de:	d901      	bls.n	80092e4 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80092e0:	2303      	movs	r3, #3
 80092e2:	e0ac      	b.n	800943e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092e4:	4b5a      	ldr	r3, [pc, #360]	; (8009450 <HAL_RCC_OscConfig+0x494>)
 80092e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e8:	f003 0302 	and.w	r3, r3, #2
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1ee      	bne.n	80092ce <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80092f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d105      	bne.n	8009304 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092f8:	4b55      	ldr	r3, [pc, #340]	; (8009450 <HAL_RCC_OscConfig+0x494>)
 80092fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fc:	4a54      	ldr	r2, [pc, #336]	; (8009450 <HAL_RCC_OscConfig+0x494>)
 80092fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009302:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 8097 	beq.w	800943c <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800930e:	4b50      	ldr	r3, [pc, #320]	; (8009450 <HAL_RCC_OscConfig+0x494>)
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	f003 030c 	and.w	r3, r3, #12
 8009316:	2b08      	cmp	r3, #8
 8009318:	d061      	beq.n	80093de <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	2b02      	cmp	r3, #2
 8009320:	d146      	bne.n	80093b0 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009322:	4b4c      	ldr	r3, [pc, #304]	; (8009454 <HAL_RCC_OscConfig+0x498>)
 8009324:	2200      	movs	r2, #0
 8009326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009328:	f7fc fd52 	bl	8005dd0 <HAL_GetTick>
 800932c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800932e:	e008      	b.n	8009342 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009330:	f7fc fd4e 	bl	8005dd0 <HAL_GetTick>
 8009334:	4602      	mov	r2, r0
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	2b64      	cmp	r3, #100	; 0x64
 800933c:	d901      	bls.n	8009342 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e07d      	b.n	800943e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009342:	4b43      	ldr	r3, [pc, #268]	; (8009450 <HAL_RCC_OscConfig+0x494>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1f0      	bne.n	8009330 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800934e:	4b40      	ldr	r3, [pc, #256]	; (8009450 <HAL_RCC_OscConfig+0x494>)
 8009350:	685a      	ldr	r2, [r3, #4]
 8009352:	4b41      	ldr	r3, [pc, #260]	; (8009458 <HAL_RCC_OscConfig+0x49c>)
 8009354:	4013      	ands	r3, r2
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	69d1      	ldr	r1, [r2, #28]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	6a12      	ldr	r2, [r2, #32]
 800935e:	4311      	orrs	r1, r2
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009364:	0192      	lsls	r2, r2, #6
 8009366:	4311      	orrs	r1, r2
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800936c:	0612      	lsls	r2, r2, #24
 800936e:	4311      	orrs	r1, r2
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009374:	0852      	lsrs	r2, r2, #1
 8009376:	3a01      	subs	r2, #1
 8009378:	0412      	lsls	r2, r2, #16
 800937a:	430a      	orrs	r2, r1
 800937c:	4934      	ldr	r1, [pc, #208]	; (8009450 <HAL_RCC_OscConfig+0x494>)
 800937e:	4313      	orrs	r3, r2
 8009380:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009382:	4b34      	ldr	r3, [pc, #208]	; (8009454 <HAL_RCC_OscConfig+0x498>)
 8009384:	2201      	movs	r2, #1
 8009386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009388:	f7fc fd22 	bl	8005dd0 <HAL_GetTick>
 800938c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800938e:	e008      	b.n	80093a2 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009390:	f7fc fd1e 	bl	8005dd0 <HAL_GetTick>
 8009394:	4602      	mov	r2, r0
 8009396:	6a3b      	ldr	r3, [r7, #32]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	2b64      	cmp	r3, #100	; 0x64
 800939c:	d901      	bls.n	80093a2 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 800939e:	2303      	movs	r3, #3
 80093a0:	e04d      	b.n	800943e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093a2:	4b2b      	ldr	r3, [pc, #172]	; (8009450 <HAL_RCC_OscConfig+0x494>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0f0      	beq.n	8009390 <HAL_RCC_OscConfig+0x3d4>
 80093ae:	e045      	b.n	800943c <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093b0:	4b28      	ldr	r3, [pc, #160]	; (8009454 <HAL_RCC_OscConfig+0x498>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093b6:	f7fc fd0b 	bl	8005dd0 <HAL_GetTick>
 80093ba:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093bc:	e008      	b.n	80093d0 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093be:	f7fc fd07 	bl	8005dd0 <HAL_GetTick>
 80093c2:	4602      	mov	r2, r0
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	2b64      	cmp	r3, #100	; 0x64
 80093ca:	d901      	bls.n	80093d0 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 80093cc:	2303      	movs	r3, #3
 80093ce:	e036      	b.n	800943e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093d0:	4b1f      	ldr	r3, [pc, #124]	; (8009450 <HAL_RCC_OscConfig+0x494>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1f0      	bne.n	80093be <HAL_RCC_OscConfig+0x402>
 80093dc:	e02e      	b.n	800943c <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d101      	bne.n	80093ea <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	e029      	b.n	800943e <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80093ea:	4b19      	ldr	r3, [pc, #100]	; (8009450 <HAL_RCC_OscConfig+0x494>)
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	69db      	ldr	r3, [r3, #28]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d11c      	bne.n	8009438 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009408:	429a      	cmp	r2, r3
 800940a:	d115      	bne.n	8009438 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	099b      	lsrs	r3, r3, #6
 8009410:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009418:	429a      	cmp	r2, r3
 800941a:	d10d      	bne.n	8009438 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009426:	429a      	cmp	r2, r3
 8009428:	d106      	bne.n	8009438 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009434:	429a      	cmp	r2, r3
 8009436:	d001      	beq.n	800943c <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	e000      	b.n	800943e <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3728      	adds	r7, #40	; 0x28
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	40007000 	.word	0x40007000
 800944c:	40023870 	.word	0x40023870
 8009450:	40023800 	.word	0x40023800
 8009454:	42470060 	.word	0x42470060
 8009458:	f0bc8000 	.word	0xf0bc8000

0800945c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b086      	sub	sp, #24
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d101      	bne.n	8009470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	e0d2      	b.n	8009616 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009470:	4b6b      	ldr	r3, [pc, #428]	; (8009620 <HAL_RCC_ClockConfig+0x1c4>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 030f 	and.w	r3, r3, #15
 8009478:	683a      	ldr	r2, [r7, #0]
 800947a:	429a      	cmp	r2, r3
 800947c:	d90c      	bls.n	8009498 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800947e:	4b68      	ldr	r3, [pc, #416]	; (8009620 <HAL_RCC_ClockConfig+0x1c4>)
 8009480:	683a      	ldr	r2, [r7, #0]
 8009482:	b2d2      	uxtb	r2, r2
 8009484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009486:	4b66      	ldr	r3, [pc, #408]	; (8009620 <HAL_RCC_ClockConfig+0x1c4>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f003 030f 	and.w	r3, r3, #15
 800948e:	683a      	ldr	r2, [r7, #0]
 8009490:	429a      	cmp	r2, r3
 8009492:	d001      	beq.n	8009498 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	e0be      	b.n	8009616 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 0302 	and.w	r3, r3, #2
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d020      	beq.n	80094e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0304 	and.w	r3, r3, #4
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d005      	beq.n	80094bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80094b0:	4b5c      	ldr	r3, [pc, #368]	; (8009624 <HAL_RCC_ClockConfig+0x1c8>)
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	4a5b      	ldr	r2, [pc, #364]	; (8009624 <HAL_RCC_ClockConfig+0x1c8>)
 80094b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80094ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0308 	and.w	r3, r3, #8
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d005      	beq.n	80094d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80094c8:	4b56      	ldr	r3, [pc, #344]	; (8009624 <HAL_RCC_ClockConfig+0x1c8>)
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	4a55      	ldr	r2, [pc, #340]	; (8009624 <HAL_RCC_ClockConfig+0x1c8>)
 80094ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80094d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094d4:	4b53      	ldr	r3, [pc, #332]	; (8009624 <HAL_RCC_ClockConfig+0x1c8>)
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	4950      	ldr	r1, [pc, #320]	; (8009624 <HAL_RCC_ClockConfig+0x1c8>)
 80094e2:	4313      	orrs	r3, r2
 80094e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d040      	beq.n	8009574 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d107      	bne.n	800950a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094fa:	4b4a      	ldr	r3, [pc, #296]	; (8009624 <HAL_RCC_ClockConfig+0x1c8>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009502:	2b00      	cmp	r3, #0
 8009504:	d115      	bne.n	8009532 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e085      	b.n	8009616 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	2b02      	cmp	r3, #2
 8009510:	d107      	bne.n	8009522 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009512:	4b44      	ldr	r3, [pc, #272]	; (8009624 <HAL_RCC_ClockConfig+0x1c8>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800951a:	2b00      	cmp	r3, #0
 800951c:	d109      	bne.n	8009532 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e079      	b.n	8009616 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009522:	4b40      	ldr	r3, [pc, #256]	; (8009624 <HAL_RCC_ClockConfig+0x1c8>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 0302 	and.w	r3, r3, #2
 800952a:	2b00      	cmp	r3, #0
 800952c:	d101      	bne.n	8009532 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e071      	b.n	8009616 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009532:	4b3c      	ldr	r3, [pc, #240]	; (8009624 <HAL_RCC_ClockConfig+0x1c8>)
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f023 0203 	bic.w	r2, r3, #3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	4939      	ldr	r1, [pc, #228]	; (8009624 <HAL_RCC_ClockConfig+0x1c8>)
 8009540:	4313      	orrs	r3, r2
 8009542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009544:	f7fc fc44 	bl	8005dd0 <HAL_GetTick>
 8009548:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800954a:	e00a      	b.n	8009562 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800954c:	f7fc fc40 	bl	8005dd0 <HAL_GetTick>
 8009550:	4602      	mov	r2, r0
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	1ad3      	subs	r3, r2, r3
 8009556:	f241 3288 	movw	r2, #5000	; 0x1388
 800955a:	4293      	cmp	r3, r2
 800955c:	d901      	bls.n	8009562 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800955e:	2303      	movs	r3, #3
 8009560:	e059      	b.n	8009616 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009562:	4b30      	ldr	r3, [pc, #192]	; (8009624 <HAL_RCC_ClockConfig+0x1c8>)
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	f003 020c 	and.w	r2, r3, #12
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	429a      	cmp	r2, r3
 8009572:	d1eb      	bne.n	800954c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009574:	4b2a      	ldr	r3, [pc, #168]	; (8009620 <HAL_RCC_ClockConfig+0x1c4>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f003 030f 	and.w	r3, r3, #15
 800957c:	683a      	ldr	r2, [r7, #0]
 800957e:	429a      	cmp	r2, r3
 8009580:	d20c      	bcs.n	800959c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009582:	4b27      	ldr	r3, [pc, #156]	; (8009620 <HAL_RCC_ClockConfig+0x1c4>)
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	b2d2      	uxtb	r2, r2
 8009588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800958a:	4b25      	ldr	r3, [pc, #148]	; (8009620 <HAL_RCC_ClockConfig+0x1c4>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f003 030f 	and.w	r3, r3, #15
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	429a      	cmp	r2, r3
 8009596:	d001      	beq.n	800959c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	e03c      	b.n	8009616 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 0304 	and.w	r3, r3, #4
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d008      	beq.n	80095ba <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80095a8:	4b1e      	ldr	r3, [pc, #120]	; (8009624 <HAL_RCC_ClockConfig+0x1c8>)
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	491b      	ldr	r1, [pc, #108]	; (8009624 <HAL_RCC_ClockConfig+0x1c8>)
 80095b6:	4313      	orrs	r3, r2
 80095b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f003 0308 	and.w	r3, r3, #8
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d009      	beq.n	80095da <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80095c6:	4b17      	ldr	r3, [pc, #92]	; (8009624 <HAL_RCC_ClockConfig+0x1c8>)
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	691b      	ldr	r3, [r3, #16]
 80095d2:	00db      	lsls	r3, r3, #3
 80095d4:	4913      	ldr	r1, [pc, #76]	; (8009624 <HAL_RCC_ClockConfig+0x1c8>)
 80095d6:	4313      	orrs	r3, r2
 80095d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80095da:	f000 f82b 	bl	8009634 <HAL_RCC_GetSysClockFreq>
 80095de:	4601      	mov	r1, r0
 80095e0:	4b10      	ldr	r3, [pc, #64]	; (8009624 <HAL_RCC_ClockConfig+0x1c8>)
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095e8:	22f0      	movs	r2, #240	; 0xf0
 80095ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095ec:	693a      	ldr	r2, [r7, #16]
 80095ee:	fa92 f2a2 	rbit	r2, r2
 80095f2:	60fa      	str	r2, [r7, #12]
  return result;
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	fab2 f282 	clz	r2, r2
 80095fa:	b2d2      	uxtb	r2, r2
 80095fc:	40d3      	lsrs	r3, r2
 80095fe:	4a0a      	ldr	r2, [pc, #40]	; (8009628 <HAL_RCC_ClockConfig+0x1cc>)
 8009600:	5cd3      	ldrb	r3, [r2, r3]
 8009602:	fa21 f303 	lsr.w	r3, r1, r3
 8009606:	4a09      	ldr	r2, [pc, #36]	; (800962c <HAL_RCC_ClockConfig+0x1d0>)
 8009608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800960a:	4b09      	ldr	r3, [pc, #36]	; (8009630 <HAL_RCC_ClockConfig+0x1d4>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4618      	mov	r0, r3
 8009610:	f7fc f8da 	bl	80057c8 <HAL_InitTick>

  return HAL_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3718      	adds	r7, #24
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	40023c00 	.word	0x40023c00
 8009624:	40023800 	.word	0x40023800
 8009628:	0801a44c 	.word	0x0801a44c
 800962c:	20000220 	.word	0x20000220
 8009630:	20000224 	.word	0x20000224

08009634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009634:	b5b0      	push	{r4, r5, r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800963a:	2100      	movs	r1, #0
 800963c:	6079      	str	r1, [r7, #4]
 800963e:	2100      	movs	r1, #0
 8009640:	60f9      	str	r1, [r7, #12]
 8009642:	2100      	movs	r1, #0
 8009644:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009646:	2100      	movs	r1, #0
 8009648:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800964a:	4952      	ldr	r1, [pc, #328]	; (8009794 <HAL_RCC_GetSysClockFreq+0x160>)
 800964c:	6889      	ldr	r1, [r1, #8]
 800964e:	f001 010c 	and.w	r1, r1, #12
 8009652:	2908      	cmp	r1, #8
 8009654:	d00d      	beq.n	8009672 <HAL_RCC_GetSysClockFreq+0x3e>
 8009656:	2908      	cmp	r1, #8
 8009658:	f200 8094 	bhi.w	8009784 <HAL_RCC_GetSysClockFreq+0x150>
 800965c:	2900      	cmp	r1, #0
 800965e:	d002      	beq.n	8009666 <HAL_RCC_GetSysClockFreq+0x32>
 8009660:	2904      	cmp	r1, #4
 8009662:	d003      	beq.n	800966c <HAL_RCC_GetSysClockFreq+0x38>
 8009664:	e08e      	b.n	8009784 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009666:	4b4c      	ldr	r3, [pc, #304]	; (8009798 <HAL_RCC_GetSysClockFreq+0x164>)
 8009668:	60bb      	str	r3, [r7, #8]
       break;
 800966a:	e08e      	b.n	800978a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800966c:	4b4b      	ldr	r3, [pc, #300]	; (800979c <HAL_RCC_GetSysClockFreq+0x168>)
 800966e:	60bb      	str	r3, [r7, #8]
      break;
 8009670:	e08b      	b.n	800978a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009672:	4948      	ldr	r1, [pc, #288]	; (8009794 <HAL_RCC_GetSysClockFreq+0x160>)
 8009674:	6849      	ldr	r1, [r1, #4]
 8009676:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800967a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800967c:	4945      	ldr	r1, [pc, #276]	; (8009794 <HAL_RCC_GetSysClockFreq+0x160>)
 800967e:	6849      	ldr	r1, [r1, #4]
 8009680:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009684:	2900      	cmp	r1, #0
 8009686:	d024      	beq.n	80096d2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009688:	4942      	ldr	r1, [pc, #264]	; (8009794 <HAL_RCC_GetSysClockFreq+0x160>)
 800968a:	6849      	ldr	r1, [r1, #4]
 800968c:	0989      	lsrs	r1, r1, #6
 800968e:	4608      	mov	r0, r1
 8009690:	f04f 0100 	mov.w	r1, #0
 8009694:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009698:	f04f 0500 	mov.w	r5, #0
 800969c:	ea00 0204 	and.w	r2, r0, r4
 80096a0:	ea01 0305 	and.w	r3, r1, r5
 80096a4:	493d      	ldr	r1, [pc, #244]	; (800979c <HAL_RCC_GetSysClockFreq+0x168>)
 80096a6:	fb01 f003 	mul.w	r0, r1, r3
 80096aa:	2100      	movs	r1, #0
 80096ac:	fb01 f102 	mul.w	r1, r1, r2
 80096b0:	1844      	adds	r4, r0, r1
 80096b2:	493a      	ldr	r1, [pc, #232]	; (800979c <HAL_RCC_GetSysClockFreq+0x168>)
 80096b4:	fba2 0101 	umull	r0, r1, r2, r1
 80096b8:	1863      	adds	r3, r4, r1
 80096ba:	4619      	mov	r1, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	461a      	mov	r2, r3
 80096c0:	f04f 0300 	mov.w	r3, #0
 80096c4:	f7f7 fa9a 	bl	8000bfc <__aeabi_uldivmod>
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	4613      	mov	r3, r2
 80096ce:	60fb      	str	r3, [r7, #12]
 80096d0:	e04a      	b.n	8009768 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096d2:	4b30      	ldr	r3, [pc, #192]	; (8009794 <HAL_RCC_GetSysClockFreq+0x160>)
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	099b      	lsrs	r3, r3, #6
 80096d8:	461a      	mov	r2, r3
 80096da:	f04f 0300 	mov.w	r3, #0
 80096de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80096e2:	f04f 0100 	mov.w	r1, #0
 80096e6:	ea02 0400 	and.w	r4, r2, r0
 80096ea:	ea03 0501 	and.w	r5, r3, r1
 80096ee:	4620      	mov	r0, r4
 80096f0:	4629      	mov	r1, r5
 80096f2:	f04f 0200 	mov.w	r2, #0
 80096f6:	f04f 0300 	mov.w	r3, #0
 80096fa:	014b      	lsls	r3, r1, #5
 80096fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009700:	0142      	lsls	r2, r0, #5
 8009702:	4610      	mov	r0, r2
 8009704:	4619      	mov	r1, r3
 8009706:	1b00      	subs	r0, r0, r4
 8009708:	eb61 0105 	sbc.w	r1, r1, r5
 800970c:	f04f 0200 	mov.w	r2, #0
 8009710:	f04f 0300 	mov.w	r3, #0
 8009714:	018b      	lsls	r3, r1, #6
 8009716:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800971a:	0182      	lsls	r2, r0, #6
 800971c:	1a12      	subs	r2, r2, r0
 800971e:	eb63 0301 	sbc.w	r3, r3, r1
 8009722:	f04f 0000 	mov.w	r0, #0
 8009726:	f04f 0100 	mov.w	r1, #0
 800972a:	00d9      	lsls	r1, r3, #3
 800972c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009730:	00d0      	lsls	r0, r2, #3
 8009732:	4602      	mov	r2, r0
 8009734:	460b      	mov	r3, r1
 8009736:	1912      	adds	r2, r2, r4
 8009738:	eb45 0303 	adc.w	r3, r5, r3
 800973c:	f04f 0000 	mov.w	r0, #0
 8009740:	f04f 0100 	mov.w	r1, #0
 8009744:	0299      	lsls	r1, r3, #10
 8009746:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800974a:	0290      	lsls	r0, r2, #10
 800974c:	4602      	mov	r2, r0
 800974e:	460b      	mov	r3, r1
 8009750:	4610      	mov	r0, r2
 8009752:	4619      	mov	r1, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	461a      	mov	r2, r3
 8009758:	f04f 0300 	mov.w	r3, #0
 800975c:	f7f7 fa4e 	bl	8000bfc <__aeabi_uldivmod>
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	4613      	mov	r3, r2
 8009766:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009768:	4b0a      	ldr	r3, [pc, #40]	; (8009794 <HAL_RCC_GetSysClockFreq+0x160>)
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	0c1b      	lsrs	r3, r3, #16
 800976e:	f003 0303 	and.w	r3, r3, #3
 8009772:	3301      	adds	r3, #1
 8009774:	005b      	lsls	r3, r3, #1
 8009776:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009780:	60bb      	str	r3, [r7, #8]
      break;
 8009782:	e002      	b.n	800978a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009784:	4b04      	ldr	r3, [pc, #16]	; (8009798 <HAL_RCC_GetSysClockFreq+0x164>)
 8009786:	60bb      	str	r3, [r7, #8]
      break;
 8009788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800978a:	68bb      	ldr	r3, [r7, #8]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bdb0      	pop	{r4, r5, r7, pc}
 8009794:	40023800 	.word	0x40023800
 8009798:	00f42400 	.word	0x00f42400
 800979c:	017d7840 	.word	0x017d7840

080097a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80097a0:	b480      	push	{r7}
 80097a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80097a4:	4b02      	ldr	r3, [pc, #8]	; (80097b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80097a6:	681b      	ldr	r3, [r3, #0]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bc80      	pop	{r7}
 80097ae:	4770      	bx	lr
 80097b0:	20000220 	.word	0x20000220

080097b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80097ba:	f7ff fff1 	bl	80097a0 <HAL_RCC_GetHCLKFreq>
 80097be:	4601      	mov	r1, r0
 80097c0:	4b0b      	ldr	r3, [pc, #44]	; (80097f0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80097c8:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80097cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	fa92 f2a2 	rbit	r2, r2
 80097d4:	603a      	str	r2, [r7, #0]
  return result;
 80097d6:	683a      	ldr	r2, [r7, #0]
 80097d8:	fab2 f282 	clz	r2, r2
 80097dc:	b2d2      	uxtb	r2, r2
 80097de:	40d3      	lsrs	r3, r2
 80097e0:	4a04      	ldr	r2, [pc, #16]	; (80097f4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80097e2:	5cd3      	ldrb	r3, [r2, r3]
 80097e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	40023800 	.word	0x40023800
 80097f4:	0801a45c 	.word	0x0801a45c

080097f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	220f      	movs	r2, #15
 8009806:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009808:	4b11      	ldr	r3, [pc, #68]	; (8009850 <HAL_RCC_GetClockConfig+0x58>)
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	f003 0203 	and.w	r2, r3, #3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009814:	4b0e      	ldr	r3, [pc, #56]	; (8009850 <HAL_RCC_GetClockConfig+0x58>)
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009820:	4b0b      	ldr	r3, [pc, #44]	; (8009850 <HAL_RCC_GetClockConfig+0x58>)
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800982c:	4b08      	ldr	r3, [pc, #32]	; (8009850 <HAL_RCC_GetClockConfig+0x58>)
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	08db      	lsrs	r3, r3, #3
 8009832:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800983a:	4b06      	ldr	r3, [pc, #24]	; (8009854 <HAL_RCC_GetClockConfig+0x5c>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 020f 	and.w	r2, r3, #15
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	601a      	str	r2, [r3, #0]
}
 8009846:	bf00      	nop
 8009848:	370c      	adds	r7, #12
 800984a:	46bd      	mov	sp, r7
 800984c:	bc80      	pop	{r7}
 800984e:	4770      	bx	lr
 8009850:	40023800 	.word	0x40023800
 8009854:	40023c00 	.word	0x40023c00

08009858 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b08a      	sub	sp, #40	; 0x28
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009860:	2300      	movs	r3, #0
 8009862:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8009864:	2300      	movs	r3, #0
 8009866:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 0301 	and.w	r3, r3, #1
 8009870:	2b00      	cmp	r3, #0
 8009872:	d103      	bne.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8009878:	2b08      	cmp	r3, #8
 800987a:	d14c      	bne.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800987c:	4b6d      	ldr	r3, [pc, #436]	; (8009a34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800987e:	2200      	movs	r2, #0
 8009880:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009882:	f7fc faa5 	bl	8005dd0 <HAL_GetTick>
 8009886:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009888:	e008      	b.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800988a:	f7fc faa1 	bl	8005dd0 <HAL_GetTick>
 800988e:	4602      	mov	r2, r0
 8009890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009892:	1ad3      	subs	r3, r2, r3
 8009894:	2b02      	cmp	r3, #2
 8009896:	d901      	bls.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009898:	2303      	movs	r3, #3
 800989a:	e0c7      	b.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800989c:	4b66      	ldr	r3, [pc, #408]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1f0      	bne.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80098b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098b2:	697a      	ldr	r2, [r7, #20]
 80098b4:	fa92 f2a2 	rbit	r2, r2
 80098b8:	613a      	str	r2, [r7, #16]
  return result;
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	fab2 f282 	clz	r2, r2
 80098c0:	b2d2      	uxtb	r2, r2
 80098c2:	fa03 f202 	lsl.w	r2, r3, r2
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80098ce:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098d0:	69f9      	ldr	r1, [r7, #28]
 80098d2:	fa91 f1a1 	rbit	r1, r1
 80098d6:	61b9      	str	r1, [r7, #24]
  return result;
 80098d8:	69b9      	ldr	r1, [r7, #24]
 80098da:	fab1 f181 	clz	r1, r1
 80098de:	b2c9      	uxtb	r1, r1
 80098e0:	408b      	lsls	r3, r1
 80098e2:	4955      	ldr	r1, [pc, #340]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80098e4:	4313      	orrs	r3, r2
 80098e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80098ea:	4b52      	ldr	r3, [pc, #328]	; (8009a34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80098ec:	2201      	movs	r2, #1
 80098ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80098f0:	f7fc fa6e 	bl	8005dd0 <HAL_GetTick>
 80098f4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80098f6:	e008      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80098f8:	f7fc fa6a 	bl	8005dd0 <HAL_GetTick>
 80098fc:	4602      	mov	r2, r0
 80098fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	2b02      	cmp	r3, #2
 8009904:	d901      	bls.n	800990a <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009906:	2303      	movs	r3, #3
 8009908:	e090      	b.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800990a:	4b4b      	ldr	r3, [pc, #300]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009912:	2b00      	cmp	r3, #0
 8009914:	d0f0      	beq.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f003 0304 	and.w	r3, r3, #4
 800991e:	2b00      	cmp	r3, #0
 8009920:	f000 8083 	beq.w	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009924:	2300      	movs	r3, #0
 8009926:	60fb      	str	r3, [r7, #12]
 8009928:	4b43      	ldr	r3, [pc, #268]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800992a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992c:	4a42      	ldr	r2, [pc, #264]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800992e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009932:	6413      	str	r3, [r2, #64]	; 0x40
 8009934:	4b40      	ldr	r3, [pc, #256]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800993c:	60fb      	str	r3, [r7, #12]
 800993e:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009940:	4b3e      	ldr	r3, [pc, #248]	; (8009a3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a3d      	ldr	r2, [pc, #244]	; (8009a3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800994a:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800994c:	f7fc fa40 	bl	8005dd0 <HAL_GetTick>
 8009950:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009952:	e008      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009954:	f7fc fa3c 	bl	8005dd0 <HAL_GetTick>
 8009958:	4602      	mov	r2, r0
 800995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995c:	1ad3      	subs	r3, r2, r3
 800995e:	2b02      	cmp	r3, #2
 8009960:	d901      	bls.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009962:	2303      	movs	r3, #3
 8009964:	e062      	b.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009966:	4b35      	ldr	r3, [pc, #212]	; (8009a3c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800996e:	2b00      	cmp	r3, #0
 8009970:	d0f0      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009972:	4b31      	ldr	r3, [pc, #196]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800997a:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800997c:	6a3b      	ldr	r3, [r7, #32]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d02f      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800998a:	6a3a      	ldr	r2, [r7, #32]
 800998c:	429a      	cmp	r2, r3
 800998e:	d028      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009990:	4b29      	ldr	r3, [pc, #164]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009998:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800999a:	4b29      	ldr	r3, [pc, #164]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800999c:	2201      	movs	r2, #1
 800999e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80099a0:	4b27      	ldr	r3, [pc, #156]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80099a2:	2200      	movs	r2, #0
 80099a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80099a6:	4a24      	ldr	r2, [pc, #144]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80099a8:	6a3b      	ldr	r3, [r7, #32]
 80099aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80099ac:	4b22      	ldr	r3, [pc, #136]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80099ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099b0:	f003 0301 	and.w	r3, r3, #1
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d114      	bne.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80099b8:	f7fc fa0a 	bl	8005dd0 <HAL_GetTick>
 80099bc:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099be:	e00a      	b.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099c0:	f7fc fa06 	bl	8005dd0 <HAL_GetTick>
 80099c4:	4602      	mov	r2, r0
 80099c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d901      	bls.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 80099d2:	2303      	movs	r3, #3
 80099d4:	e02a      	b.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099d6:	4b18      	ldr	r3, [pc, #96]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80099d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099da:	f003 0302 	and.w	r3, r3, #2
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d0ee      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099ee:	d10d      	bne.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80099f0:	4b11      	ldr	r3, [pc, #68]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a04:	490c      	ldr	r1, [pc, #48]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009a06:	4313      	orrs	r3, r2
 8009a08:	608b      	str	r3, [r1, #8]
 8009a0a:	e005      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009a0c:	4b0a      	ldr	r3, [pc, #40]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	4a09      	ldr	r2, [pc, #36]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009a12:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009a16:	6093      	str	r3, [r2, #8]
 8009a18:	4b07      	ldr	r3, [pc, #28]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009a1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a24:	4904      	ldr	r1, [pc, #16]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009a26:	4313      	orrs	r3, r2
 8009a28:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3728      	adds	r7, #40	; 0x28
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	42470068 	.word	0x42470068
 8009a38:	40023800 	.word	0x40023800
 8009a3c:	40007000 	.word	0x40007000
 8009a40:	42470e40 	.word	0x42470e40

08009a44 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d101      	bne.n	8009a56 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e07c      	b.n	8009b50 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	7f5b      	ldrb	r3, [r3, #29]
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d105      	bne.n	8009a6c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f7fb fdd4 	bl	8005614 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2202      	movs	r2, #2
 8009a70:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	22ca      	movs	r2, #202	; 0xca
 8009a78:	625a      	str	r2, [r3, #36]	; 0x24
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2253      	movs	r2, #83	; 0x53
 8009a80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 fb8d 	bl	800a1a2 <RTC_EnterInitMode>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d008      	beq.n	8009aa0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	22ff      	movs	r2, #255	; 0xff
 8009a94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2204      	movs	r2, #4
 8009a9a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e057      	b.n	8009b50 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	6812      	ldr	r2, [r2, #0]
 8009aaa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ab2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	6899      	ldr	r1, [r3, #8]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	685a      	ldr	r2, [r3, #4]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	431a      	orrs	r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	695b      	ldr	r3, [r3, #20]
 8009ac8:	431a      	orrs	r2, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	430a      	orrs	r2, r1
 8009ad0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	68d2      	ldr	r2, [r2, #12]
 8009ada:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	6919      	ldr	r1, [r3, #16]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	041a      	lsls	r2, r3, #16
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	430a      	orrs	r2, r1
 8009aee:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68da      	ldr	r2, [r3, #12]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009afe:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fb26 	bl	800a152 <HAL_RTC_WaitForSynchro>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d008      	beq.n	8009b1e <HAL_RTC_Init+0xda>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	22ff      	movs	r2, #255	; 0xff
 8009b12:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2204      	movs	r2, #4
 8009b18:	775a      	strb	r2, [r3, #29]

      return HAL_ERROR;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e018      	b.n	8009b50 <HAL_RTC_Init+0x10c>
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009b2c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	699a      	ldr	r2, [r3, #24]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	430a      	orrs	r2, r1
 8009b3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	22ff      	movs	r2, #255	; 0xff
 8009b46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009b4e:	2300      	movs	r3, #0
  }
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009b58:	b590      	push	{r4, r7, lr}
 8009b5a:	b087      	sub	sp, #28
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009b64:	2300      	movs	r3, #0
 8009b66:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	7f1b      	ldrb	r3, [r3, #28]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d101      	bne.n	8009b74 <HAL_RTC_SetTime+0x1c>
 8009b70:	2302      	movs	r3, #2
 8009b72:	e0a3      	b.n	8009cbc <HAL_RTC_SetTime+0x164>
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2201      	movs	r2, #1
 8009b78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2202      	movs	r2, #2
 8009b7e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d126      	bne.n	8009bd4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d102      	bne.n	8009b9a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	2200      	movs	r2, #0
 8009b98:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 fb2b 	bl	800a1fa <RTC_ByteToBcd2>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	785b      	ldrb	r3, [r3, #1]
 8009bac:	4618      	mov	r0, r3
 8009bae:	f000 fb24 	bl	800a1fa <RTC_ByteToBcd2>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009bb6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	789b      	ldrb	r3, [r3, #2]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f000 fb1c 	bl	800a1fa <RTC_ByteToBcd2>
 8009bc2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009bc4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	78db      	ldrb	r3, [r3, #3]
 8009bcc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	617b      	str	r3, [r7, #20]
 8009bd2:	e018      	b.n	8009c06 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d102      	bne.n	8009be8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	2200      	movs	r2, #0
 8009be6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	785b      	ldrb	r3, [r3, #1]
 8009bf2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009bf4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009bf6:	68ba      	ldr	r2, [r7, #8]
 8009bf8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009bfa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	78db      	ldrb	r3, [r3, #3]
 8009c00:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009c02:	4313      	orrs	r3, r2
 8009c04:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	22ca      	movs	r2, #202	; 0xca
 8009c0c:	625a      	str	r2, [r3, #36]	; 0x24
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2253      	movs	r2, #83	; 0x53
 8009c14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f000 fac3 	bl	800a1a2 <RTC_EnterInitMode>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00b      	beq.n	8009c3a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	22ff      	movs	r2, #255	; 0xff
 8009c28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2204      	movs	r2, #4
 8009c2e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2200      	movs	r2, #0
 8009c34:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	e040      	b.n	8009cbc <HAL_RTC_SetTime+0x164>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009c44:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009c48:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	689a      	ldr	r2, [r3, #8]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009c58:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	6899      	ldr	r1, [r3, #8]
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	685a      	ldr	r2, [r3, #4]
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	431a      	orrs	r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	430a      	orrs	r2, r1
 8009c70:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68da      	ldr	r2, [r3, #12]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c80:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f000 fa65 	bl	800a152 <HAL_RTC_WaitForSynchro>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00b      	beq.n	8009ca6 <HAL_RTC_SetTime+0x14e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	22ff      	movs	r2, #255	; 0xff
 8009c94:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2204      	movs	r2, #4
 8009c9a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e00a      	b.n	8009cbc <HAL_RTC_SetTime+0x164>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	22ff      	movs	r2, #255	; 0xff
 8009cac:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009cba:	2300      	movs	r3, #0
  }
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	371c      	adds	r7, #28
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd90      	pop	{r4, r7, pc}

08009cc4 <HAL_RTC_GetTime>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b086      	sub	sp, #24
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009cde:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009ce2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	0c1b      	lsrs	r3, r3, #16
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cee:	b2da      	uxtb	r2, r3
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	0a1b      	lsrs	r3, r3, #8
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cfe:	b2da      	uxtb	r2, r3
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d0c:	b2da      	uxtb	r2, r3
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	0c1b      	lsrs	r3, r3, #16
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d1c:	b2da      	uxtb	r2, r3
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d11a      	bne.n	8009d5e <HAL_RTC_GetTime+0x9a>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f000 fa81 	bl	800a234 <RTC_Bcd2ToByte>
 8009d32:	4603      	mov	r3, r0
 8009d34:	461a      	mov	r2, r3
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	785b      	ldrb	r3, [r3, #1]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f000 fa78 	bl	800a234 <RTC_Bcd2ToByte>
 8009d44:	4603      	mov	r3, r0
 8009d46:	461a      	mov	r2, r3
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	789b      	ldrb	r3, [r3, #2]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f000 fa6f 	bl	800a234 <RTC_Bcd2ToByte>
 8009d56:	4603      	mov	r3, r0
 8009d58:	461a      	mov	r2, r3
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3718      	adds	r7, #24
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009d68:	b590      	push	{r4, r7, lr}
 8009d6a:	b087      	sub	sp, #28
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009d74:	2300      	movs	r3, #0
 8009d76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	7f1b      	ldrb	r3, [r3, #28]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d101      	bne.n	8009d84 <HAL_RTC_SetDate+0x1c>
 8009d80:	2302      	movs	r3, #2
 8009d82:	e08d      	b.n	8009ea0 <HAL_RTC_SetDate+0x138>
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2201      	movs	r2, #1
 8009d88:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2202      	movs	r2, #2
 8009d8e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10e      	bne.n	8009db4 <HAL_RTC_SetDate+0x4c>
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	785b      	ldrb	r3, [r3, #1]
 8009d9a:	f003 0310 	and.w	r3, r3, #16
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d008      	beq.n	8009db4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~0x10) + (uint8_t)0x0A);
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	785b      	ldrb	r3, [r3, #1]
 8009da6:	f023 0310 	bic.w	r3, r3, #16
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	330a      	adds	r3, #10
 8009dae:	b2da      	uxtb	r2, r3
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d11c      	bne.n	8009df4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	78db      	ldrb	r3, [r3, #3]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f000 fa1b 	bl	800a1fa <RTC_ByteToBcd2>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	785b      	ldrb	r3, [r3, #1]
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f000 fa14 	bl	800a1fa <RTC_ByteToBcd2>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009dd6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	789b      	ldrb	r3, [r3, #2]
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f000 fa0c 	bl	800a1fa <RTC_ByteToBcd2>
 8009de2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009de4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009dee:	4313      	orrs	r3, r2
 8009df0:	617b      	str	r3, [r7, #20]
 8009df2:	e00e      	b.n	8009e12 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	78db      	ldrb	r3, [r3, #3]
 8009df8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	785b      	ldrb	r3, [r3, #1]
 8009dfe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009e00:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009e06:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	22ca      	movs	r2, #202	; 0xca
 8009e18:	625a      	str	r2, [r3, #36]	; 0x24
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2253      	movs	r2, #83	; 0x53
 8009e20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f000 f9bd 	bl	800a1a2 <RTC_EnterInitMode>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00b      	beq.n	8009e46 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	22ff      	movs	r2, #255	; 0xff
 8009e34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2204      	movs	r2, #4
 8009e3a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e02c      	b.n	8009ea0 <HAL_RTC_SetDate+0x138>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009e50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009e54:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68da      	ldr	r2, [r3, #12]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e64:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f000 f973 	bl	800a152 <HAL_RTC_WaitForSynchro>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00b      	beq.n	8009e8a <HAL_RTC_SetDate+0x122>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	22ff      	movs	r2, #255	; 0xff
 8009e78:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2204      	movs	r2, #4
 8009e7e:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2200      	movs	r2, #0
 8009e84:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	e00a      	b.n	8009ea0 <HAL_RTC_SetDate+0x138>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	22ff      	movs	r2, #255	; 0xff
 8009e90:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2201      	movs	r2, #1
 8009e96:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
  }
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	371c      	adds	r7, #28
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd90      	pop	{r4, r7, pc}

08009ea8 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009ec2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009ec6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	0c1b      	lsrs	r3, r3, #16
 8009ecc:	b2da      	uxtb	r2, r3
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	0a1b      	lsrs	r3, r3, #8
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	f003 031f 	and.w	r3, r3, #31
 8009edc:	b2da      	uxtb	r2, r3
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009eea:	b2da      	uxtb	r2, r3
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	0b5b      	lsrs	r3, r3, #13
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	f003 0307 	and.w	r3, r3, #7
 8009efa:	b2da      	uxtb	r2, r3
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d11a      	bne.n	8009f3c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	78db      	ldrb	r3, [r3, #3]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f000 f992 	bl	800a234 <RTC_Bcd2ToByte>
 8009f10:	4603      	mov	r3, r0
 8009f12:	461a      	mov	r2, r3
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	785b      	ldrb	r3, [r3, #1]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f000 f989 	bl	800a234 <RTC_Bcd2ToByte>
 8009f22:	4603      	mov	r3, r0
 8009f24:	461a      	mov	r2, r3
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	789b      	ldrb	r3, [r3, #2]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f000 f980 	bl	800a234 <RTC_Bcd2ToByte>
 8009f34:	4603      	mov	r3, r0
 8009f36:	461a      	mov	r2, r3
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3718      	adds	r7, #24
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009f46:	b590      	push	{r4, r7, lr}
 8009f48:	b087      	sub	sp, #28
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	60f8      	str	r0, [r7, #12]
 8009f4e:	60b9      	str	r1, [r7, #8]
 8009f50:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009f52:	2300      	movs	r3, #0
 8009f54:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg = 0U;
 8009f56:	2300      	movs	r3, #0
 8009f58:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	7f1b      	ldrb	r3, [r3, #28]
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d101      	bne.n	8009f66 <HAL_RTC_SetAlarm+0x20>
 8009f62:	2302      	movs	r3, #2
 8009f64:	e0f1      	b.n	800a14a <HAL_RTC_SetAlarm+0x204>
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2202      	movs	r2, #2
 8009f70:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d136      	bne.n	8009fe6 <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d102      	bne.n	8009f8c <HAL_RTC_SetAlarm+0x46>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	4618      	mov	r0, r3
 8009f92:	f000 f932 	bl	800a1fa <RTC_ByteToBcd2>
 8009f96:	4603      	mov	r3, r0
 8009f98:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	785b      	ldrb	r3, [r3, #1]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f000 f92b 	bl	800a1fa <RTC_ByteToBcd2>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009fa8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	789b      	ldrb	r3, [r3, #2]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f000 f923 	bl	800a1fa <RTC_ByteToBcd2>
 8009fb4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009fb6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	78db      	ldrb	r3, [r3, #3]
 8009fbe:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009fc0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	7d1b      	ldrb	r3, [r3, #20]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f000 f916 	bl	800a1fa <RTC_ByteToBcd2>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009fd2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009fda:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	617b      	str	r3, [r7, #20]
 8009fe4:	e022      	b.n	800a02c <HAL_RTC_SetAlarm+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d102      	bne.n	8009ffa <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	785b      	ldrb	r3, [r3, #1]
 800a004:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a006:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a00c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	78db      	ldrb	r3, [r3, #3]
 800a012:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a014:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	7d1b      	ldrb	r3, [r3, #20]
 800a01a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a01c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a022:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a028:	4313      	orrs	r3, r2
 800a02a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	22ca      	movs	r2, #202	; 0xca
 800a032:	625a      	str	r2, [r3, #36]	; 0x24
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2253      	movs	r2, #83	; 0x53
 800a03a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a044:	d13b      	bne.n	800a0be <HAL_RTC_SetAlarm+0x178>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	689a      	ldr	r2, [r3, #8]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a054:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	689a      	ldr	r2, [r3, #8]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a064:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a066:	f7fb feb3 	bl	8005dd0 <HAL_GetTick>
 800a06a:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a06c:	e013      	b.n	800a096 <HAL_RTC_SetAlarm+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a06e:	f7fb feaf 	bl	8005dd0 <HAL_GetTick>
 800a072:	4602      	mov	r2, r0
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	1ad3      	subs	r3, r2, r3
 800a078:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a07c:	d90b      	bls.n	800a096 <HAL_RTC_SetAlarm+0x150>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	22ff      	movs	r2, #255	; 0xff
 800a084:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2203      	movs	r2, #3
 800a08a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a092:	2303      	movs	r3, #3
 800a094:	e059      	b.n	800a14a <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	f003 0301 	and.w	r3, r3, #1
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d0e4      	beq.n	800a06e <HAL_RTC_SetAlarm+0x128>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	689a      	ldr	r2, [r3, #8]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0ba:	609a      	str	r2, [r3, #8]
 800a0bc:	e03a      	b.n	800a134 <HAL_RTC_SetAlarm+0x1ee>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	689a      	ldr	r2, [r3, #8]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a0cc:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	689a      	ldr	r2, [r3, #8]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a0dc:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a0de:	f7fb fe77 	bl	8005dd0 <HAL_GetTick>
 800a0e2:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a0e4:	e013      	b.n	800a10e <HAL_RTC_SetAlarm+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a0e6:	f7fb fe73 	bl	8005dd0 <HAL_GetTick>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0f4:	d90b      	bls.n	800a10e <HAL_RTC_SetAlarm+0x1c8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	22ff      	movs	r2, #255	; 0xff
 800a0fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2203      	movs	r2, #3
 800a102:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a10a:	2303      	movs	r3, #3
 800a10c:	e01d      	b.n	800a14a <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	f003 0302 	and.w	r3, r3, #2
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d0e4      	beq.n	800a0e6 <HAL_RTC_SetAlarm+0x1a0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	697a      	ldr	r2, [r7, #20]
 800a122:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	689a      	ldr	r2, [r3, #8]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a132:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	22ff      	movs	r2, #255	; 0xff
 800a13a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2201      	movs	r2, #1
 800a140:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	371c      	adds	r7, #28
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd90      	pop	{r4, r7, pc}

0800a152 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b084      	sub	sp, #16
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a15a:	2300      	movs	r3, #0
 800a15c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68da      	ldr	r2, [r3, #12]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a16c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a16e:	f7fb fe2f 	bl	8005dd0 <HAL_GetTick>
 800a172:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a174:	e009      	b.n	800a18a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a176:	f7fb fe2b 	bl	8005dd0 <HAL_GetTick>
 800a17a:	4602      	mov	r2, r0
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	1ad3      	subs	r3, r2, r3
 800a180:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a184:	d901      	bls.n	800a18a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a186:	2303      	movs	r3, #3
 800a188:	e007      	b.n	800a19a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	f003 0320 	and.w	r3, r3, #32
 800a194:	2b00      	cmp	r3, #0
 800a196:	d0ee      	beq.n	800a176 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b084      	sub	sp, #16
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d119      	bne.n	800a1f0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a1c6:	f7fb fe03 	bl	8005dd0 <HAL_GetTick>
 800a1ca:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a1cc:	e009      	b.n	800a1e2 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a1ce:	f7fb fdff 	bl	8005dd0 <HAL_GetTick>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	1ad3      	subs	r3, r2, r3
 800a1d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1dc:	d901      	bls.n	800a1e2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a1de:	2303      	movs	r3, #3
 800a1e0:	e007      	b.n	800a1f2 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d0ee      	beq.n	800a1ce <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a1fa:	b480      	push	{r7}
 800a1fc:	b085      	sub	sp, #20
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	4603      	mov	r3, r0
 800a202:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a204:	2300      	movs	r3, #0
 800a206:	60fb      	str	r3, [r7, #12]

  while (Value >= 10)
 800a208:	e005      	b.n	800a216 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	3301      	adds	r3, #1
 800a20e:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800a210:	79fb      	ldrb	r3, [r7, #7]
 800a212:	3b0a      	subs	r3, #10
 800a214:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 800a216:	79fb      	ldrb	r3, [r7, #7]
 800a218:	2b09      	cmp	r3, #9
 800a21a:	d8f6      	bhi.n	800a20a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	011b      	lsls	r3, r3, #4
 800a222:	b2da      	uxtb	r2, r3
 800a224:	79fb      	ldrb	r3, [r7, #7]
 800a226:	4313      	orrs	r3, r2
 800a228:	b2db      	uxtb	r3, r3
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3714      	adds	r7, #20
 800a22e:	46bd      	mov	sp, r7
 800a230:	bc80      	pop	{r7}
 800a232:	4770      	bx	lr

0800a234 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a234:	b480      	push	{r7}
 800a236:	b085      	sub	sp, #20
 800a238:	af00      	add	r7, sp, #0
 800a23a:	4603      	mov	r3, r0
 800a23c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800a23e:	2300      	movs	r3, #0
 800a240:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a242:	79fb      	ldrb	r3, [r7, #7]
 800a244:	091b      	lsrs	r3, r3, #4
 800a246:	b2db      	uxtb	r3, r3
 800a248:	461a      	mov	r2, r3
 800a24a:	4613      	mov	r3, r2
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	4413      	add	r3, r2
 800a250:	005b      	lsls	r3, r3, #1
 800a252:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800a254:	79fb      	ldrb	r3, [r7, #7]
 800a256:	f003 030f 	and.w	r3, r3, #15
 800a25a:	b2da      	uxtb	r2, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	4413      	add	r3, r2
 800a262:	b2db      	uxtb	r3, r3
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	bc80      	pop	{r7}
 800a26c:	4770      	bx	lr

0800a26e <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b086      	sub	sp, #24
 800a272:	af00      	add	r7, sp, #0
 800a274:	60f8      	str	r0, [r7, #12]
 800a276:	60b9      	str	r1, [r7, #8]
 800a278:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a27a:	2300      	movs	r3, #0
 800a27c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	7f1b      	ldrb	r3, [r3, #28]
 800a282:	2b01      	cmp	r3, #1
 800a284:	d101      	bne.n	800a28a <HAL_RTCEx_SetWakeUpTimer+0x1c>
 800a286:	2302      	movs	r3, #2
 800a288:	e081      	b.n	800a38e <HAL_RTCEx_SetWakeUpTimer+0x120>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2201      	movs	r2, #1
 800a28e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2202      	movs	r2, #2
 800a294:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	22ca      	movs	r2, #202	; 0xca
 800a29c:	625a      	str	r2, [r3, #36]	; 0x24
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	2253      	movs	r2, #83	; 0x53
 800a2a4:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d01e      	beq.n	800a2f2 <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 800a2b4:	f7fb fd8c 	bl	8005dd0 <HAL_GetTick>
 800a2b8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 800a2ba:	e013      	b.n	800a2e4 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a2bc:	f7fb fd88 	bl	8005dd0 <HAL_GetTick>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	1ad3      	subs	r3, r2, r3
 800a2c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2ca:	d90b      	bls.n	800a2e4 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	22ff      	movs	r2, #255	; 0xff
 800a2d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2203      	movs	r2, #3
 800a2d8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a2e0:	2303      	movs	r3, #3
 800a2e2:	e054      	b.n	800a38e <HAL_RTCEx_SetWakeUpTimer+0x120>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	f003 0304 	and.w	r3, r3, #4
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1e4      	bne.n	800a2bc <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689a      	ldr	r2, [r3, #8]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a300:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a302:	f7fb fd65 	bl	8005dd0 <HAL_GetTick>
 800a306:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800a308:	e013      	b.n	800a332 <HAL_RTCEx_SetWakeUpTimer+0xc4>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a30a:	f7fb fd61 	bl	8005dd0 <HAL_GetTick>
 800a30e:	4602      	mov	r2, r0
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	1ad3      	subs	r3, r2, r3
 800a314:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a318:	d90b      	bls.n	800a332 <HAL_RTCEx_SetWakeUpTimer+0xc4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	22ff      	movs	r2, #255	; 0xff
 800a320:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2203      	movs	r2, #3
 800a326:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2200      	movs	r2, #0
 800a32c:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	e02d      	b.n	800a38e <HAL_RTCEx_SetWakeUpTimer+0x120>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	f003 0304 	and.w	r3, r3, #4
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d0e4      	beq.n	800a30a <HAL_RTCEx_SetWakeUpTimer+0x9c>
    }
  }

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	689a      	ldr	r2, [r3, #8]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f022 0207 	bic.w	r2, r2, #7
 800a34e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6899      	ldr	r1, [r3, #8]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	430a      	orrs	r2, r1
 800a35e:	609a      	str	r2, [r3, #8]

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	68ba      	ldr	r2, [r7, #8]
 800a366:	615a      	str	r2, [r3, #20]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	689a      	ldr	r2, [r3, #8]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a376:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	22ff      	movs	r2, #255	; 0xff
 800a37e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2201      	movs	r2, #1
 800a384:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2200      	movs	r2, #0
 800a38a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3718      	adds	r7, #24
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b082      	sub	sp, #8
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d101      	bne.n	800a3a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e041      	b.n	800a42c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d106      	bne.n	800a3c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7fb f93f 	bl	8005640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2202      	movs	r2, #2
 800a3c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	3304      	adds	r3, #4
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	4610      	mov	r0, r2
 800a3d6:	f000 fc69 	bl	800acac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2201      	movs	r2, #1
 800a406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2201      	movs	r2, #1
 800a40e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2201      	movs	r2, #1
 800a416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2201      	movs	r2, #1
 800a41e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a442:	b2db      	uxtb	r3, r3
 800a444:	2b01      	cmp	r3, #1
 800a446:	d001      	beq.n	800a44c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	e04e      	b.n	800a4ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2202      	movs	r2, #2
 800a450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	68da      	ldr	r2, [r3, #12]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f042 0201 	orr.w	r2, r2, #1
 800a462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a22      	ldr	r2, [pc, #136]	; (800a4f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d022      	beq.n	800a4b4 <HAL_TIM_Base_Start_IT+0x80>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a476:	d01d      	beq.n	800a4b4 <HAL_TIM_Base_Start_IT+0x80>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a1e      	ldr	r2, [pc, #120]	; (800a4f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d018      	beq.n	800a4b4 <HAL_TIM_Base_Start_IT+0x80>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a1d      	ldr	r2, [pc, #116]	; (800a4fc <HAL_TIM_Base_Start_IT+0xc8>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d013      	beq.n	800a4b4 <HAL_TIM_Base_Start_IT+0x80>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a1b      	ldr	r2, [pc, #108]	; (800a500 <HAL_TIM_Base_Start_IT+0xcc>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d00e      	beq.n	800a4b4 <HAL_TIM_Base_Start_IT+0x80>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a1a      	ldr	r2, [pc, #104]	; (800a504 <HAL_TIM_Base_Start_IT+0xd0>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d009      	beq.n	800a4b4 <HAL_TIM_Base_Start_IT+0x80>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a18      	ldr	r2, [pc, #96]	; (800a508 <HAL_TIM_Base_Start_IT+0xd4>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d004      	beq.n	800a4b4 <HAL_TIM_Base_Start_IT+0x80>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a17      	ldr	r2, [pc, #92]	; (800a50c <HAL_TIM_Base_Start_IT+0xd8>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d111      	bne.n	800a4d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	f003 0307 	and.w	r3, r3, #7
 800a4be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2b06      	cmp	r3, #6
 800a4c4:	d010      	beq.n	800a4e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f042 0201 	orr.w	r2, r2, #1
 800a4d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4d6:	e007      	b.n	800a4e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f042 0201 	orr.w	r2, r2, #1
 800a4e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3714      	adds	r7, #20
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bc80      	pop	{r7}
 800a4f2:	4770      	bx	lr
 800a4f4:	40010000 	.word	0x40010000
 800a4f8:	40000400 	.word	0x40000400
 800a4fc:	40000800 	.word	0x40000800
 800a500:	40000c00 	.word	0x40000c00
 800a504:	40010400 	.word	0x40010400
 800a508:	40014000 	.word	0x40014000
 800a50c:	40001800 	.word	0x40001800

0800a510 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d101      	bne.n	800a522 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e041      	b.n	800a5a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d106      	bne.n	800a53c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f839 	bl	800a5ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2202      	movs	r2, #2
 800a540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	3304      	adds	r3, #4
 800a54c:	4619      	mov	r1, r3
 800a54e:	4610      	mov	r0, r2
 800a550:	f000 fbac 	bl	800acac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a5ae:	b480      	push	{r7}
 800a5b0:	b083      	sub	sp, #12
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a5b6:	bf00      	nop
 800a5b8:	370c      	adds	r7, #12
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bc80      	pop	{r7}
 800a5be:	4770      	bx	lr

0800a5c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d109      	bne.n	800a5e4 <HAL_TIM_PWM_Start+0x24>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	bf14      	ite	ne
 800a5dc:	2301      	movne	r3, #1
 800a5de:	2300      	moveq	r3, #0
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	e022      	b.n	800a62a <HAL_TIM_PWM_Start+0x6a>
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	2b04      	cmp	r3, #4
 800a5e8:	d109      	bne.n	800a5fe <HAL_TIM_PWM_Start+0x3e>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	bf14      	ite	ne
 800a5f6:	2301      	movne	r3, #1
 800a5f8:	2300      	moveq	r3, #0
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	e015      	b.n	800a62a <HAL_TIM_PWM_Start+0x6a>
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	2b08      	cmp	r3, #8
 800a602:	d109      	bne.n	800a618 <HAL_TIM_PWM_Start+0x58>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	bf14      	ite	ne
 800a610:	2301      	movne	r3, #1
 800a612:	2300      	moveq	r3, #0
 800a614:	b2db      	uxtb	r3, r3
 800a616:	e008      	b.n	800a62a <HAL_TIM_PWM_Start+0x6a>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	2b01      	cmp	r3, #1
 800a622:	bf14      	ite	ne
 800a624:	2301      	movne	r3, #1
 800a626:	2300      	moveq	r3, #0
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d001      	beq.n	800a632 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e07c      	b.n	800a72c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d104      	bne.n	800a642 <HAL_TIM_PWM_Start+0x82>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2202      	movs	r2, #2
 800a63c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a640:	e013      	b.n	800a66a <HAL_TIM_PWM_Start+0xaa>
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	2b04      	cmp	r3, #4
 800a646:	d104      	bne.n	800a652 <HAL_TIM_PWM_Start+0x92>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2202      	movs	r2, #2
 800a64c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a650:	e00b      	b.n	800a66a <HAL_TIM_PWM_Start+0xaa>
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	2b08      	cmp	r3, #8
 800a656:	d104      	bne.n	800a662 <HAL_TIM_PWM_Start+0xa2>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2202      	movs	r2, #2
 800a65c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a660:	e003      	b.n	800a66a <HAL_TIM_PWM_Start+0xaa>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2202      	movs	r2, #2
 800a666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2201      	movs	r2, #1
 800a670:	6839      	ldr	r1, [r7, #0]
 800a672:	4618      	mov	r0, r3
 800a674:	f000 fdfa 	bl	800b26c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a2d      	ldr	r2, [pc, #180]	; (800a734 <HAL_TIM_PWM_Start+0x174>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d004      	beq.n	800a68c <HAL_TIM_PWM_Start+0xcc>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a2c      	ldr	r2, [pc, #176]	; (800a738 <HAL_TIM_PWM_Start+0x178>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d101      	bne.n	800a690 <HAL_TIM_PWM_Start+0xd0>
 800a68c:	2301      	movs	r3, #1
 800a68e:	e000      	b.n	800a692 <HAL_TIM_PWM_Start+0xd2>
 800a690:	2300      	movs	r3, #0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d007      	beq.n	800a6a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a22      	ldr	r2, [pc, #136]	; (800a734 <HAL_TIM_PWM_Start+0x174>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d022      	beq.n	800a6f6 <HAL_TIM_PWM_Start+0x136>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6b8:	d01d      	beq.n	800a6f6 <HAL_TIM_PWM_Start+0x136>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a1f      	ldr	r2, [pc, #124]	; (800a73c <HAL_TIM_PWM_Start+0x17c>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d018      	beq.n	800a6f6 <HAL_TIM_PWM_Start+0x136>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a1d      	ldr	r2, [pc, #116]	; (800a740 <HAL_TIM_PWM_Start+0x180>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d013      	beq.n	800a6f6 <HAL_TIM_PWM_Start+0x136>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a1c      	ldr	r2, [pc, #112]	; (800a744 <HAL_TIM_PWM_Start+0x184>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d00e      	beq.n	800a6f6 <HAL_TIM_PWM_Start+0x136>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a16      	ldr	r2, [pc, #88]	; (800a738 <HAL_TIM_PWM_Start+0x178>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d009      	beq.n	800a6f6 <HAL_TIM_PWM_Start+0x136>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a18      	ldr	r2, [pc, #96]	; (800a748 <HAL_TIM_PWM_Start+0x188>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d004      	beq.n	800a6f6 <HAL_TIM_PWM_Start+0x136>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a16      	ldr	r2, [pc, #88]	; (800a74c <HAL_TIM_PWM_Start+0x18c>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d111      	bne.n	800a71a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	f003 0307 	and.w	r3, r3, #7
 800a700:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2b06      	cmp	r3, #6
 800a706:	d010      	beq.n	800a72a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f042 0201 	orr.w	r2, r2, #1
 800a716:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a718:	e007      	b.n	800a72a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f042 0201 	orr.w	r2, r2, #1
 800a728:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a72a:	2300      	movs	r3, #0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	40010000 	.word	0x40010000
 800a738:	40010400 	.word	0x40010400
 800a73c:	40000400 	.word	0x40000400
 800a740:	40000800 	.word	0x40000800
 800a744:	40000c00 	.word	0x40000c00
 800a748:	40014000 	.word	0x40014000
 800a74c:	40001800 	.word	0x40001800

0800a750 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	691b      	ldr	r3, [r3, #16]
 800a75e:	f003 0302 	and.w	r3, r3, #2
 800a762:	2b02      	cmp	r3, #2
 800a764:	d122      	bne.n	800a7ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	68db      	ldr	r3, [r3, #12]
 800a76c:	f003 0302 	and.w	r3, r3, #2
 800a770:	2b02      	cmp	r3, #2
 800a772:	d11b      	bne.n	800a7ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f06f 0202 	mvn.w	r2, #2
 800a77c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2201      	movs	r2, #1
 800a782:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	699b      	ldr	r3, [r3, #24]
 800a78a:	f003 0303 	and.w	r3, r3, #3
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d003      	beq.n	800a79a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 fa6f 	bl	800ac76 <HAL_TIM_IC_CaptureCallback>
 800a798:	e005      	b.n	800a7a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 fa62 	bl	800ac64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 fa71 	bl	800ac88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	691b      	ldr	r3, [r3, #16]
 800a7b2:	f003 0304 	and.w	r3, r3, #4
 800a7b6:	2b04      	cmp	r3, #4
 800a7b8:	d122      	bne.n	800a800 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	f003 0304 	and.w	r3, r3, #4
 800a7c4:	2b04      	cmp	r3, #4
 800a7c6:	d11b      	bne.n	800a800 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f06f 0204 	mvn.w	r2, #4
 800a7d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2202      	movs	r2, #2
 800a7d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	699b      	ldr	r3, [r3, #24]
 800a7de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d003      	beq.n	800a7ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fa45 	bl	800ac76 <HAL_TIM_IC_CaptureCallback>
 800a7ec:	e005      	b.n	800a7fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 fa38 	bl	800ac64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 fa47 	bl	800ac88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	f003 0308 	and.w	r3, r3, #8
 800a80a:	2b08      	cmp	r3, #8
 800a80c:	d122      	bne.n	800a854 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	f003 0308 	and.w	r3, r3, #8
 800a818:	2b08      	cmp	r3, #8
 800a81a:	d11b      	bne.n	800a854 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f06f 0208 	mvn.w	r2, #8
 800a824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2204      	movs	r2, #4
 800a82a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	69db      	ldr	r3, [r3, #28]
 800a832:	f003 0303 	and.w	r3, r3, #3
 800a836:	2b00      	cmp	r3, #0
 800a838:	d003      	beq.n	800a842 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 fa1b 	bl	800ac76 <HAL_TIM_IC_CaptureCallback>
 800a840:	e005      	b.n	800a84e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fa0e 	bl	800ac64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 fa1d 	bl	800ac88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	f003 0310 	and.w	r3, r3, #16
 800a85e:	2b10      	cmp	r3, #16
 800a860:	d122      	bne.n	800a8a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	f003 0310 	and.w	r3, r3, #16
 800a86c:	2b10      	cmp	r3, #16
 800a86e:	d11b      	bne.n	800a8a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f06f 0210 	mvn.w	r2, #16
 800a878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2208      	movs	r2, #8
 800a87e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	69db      	ldr	r3, [r3, #28]
 800a886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d003      	beq.n	800a896 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 f9f1 	bl	800ac76 <HAL_TIM_IC_CaptureCallback>
 800a894:	e005      	b.n	800a8a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f9e4 	bl	800ac64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 f9f3 	bl	800ac88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	f003 0301 	and.w	r3, r3, #1
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d10e      	bne.n	800a8d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	f003 0301 	and.w	r3, r3, #1
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d107      	bne.n	800a8d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f06f 0201 	mvn.w	r2, #1
 800a8cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f7f9 fe84 	bl	80045dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8de:	2b80      	cmp	r3, #128	; 0x80
 800a8e0:	d10e      	bne.n	800a900 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8ec:	2b80      	cmp	r3, #128	; 0x80
 800a8ee:	d107      	bne.n	800a900 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a8f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 fdae 	bl	800b45c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a90a:	2b40      	cmp	r3, #64	; 0x40
 800a90c:	d10e      	bne.n	800a92c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	68db      	ldr	r3, [r3, #12]
 800a914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a918:	2b40      	cmp	r3, #64	; 0x40
 800a91a:	d107      	bne.n	800a92c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 f9b7 	bl	800ac9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	f003 0320 	and.w	r3, r3, #32
 800a936:	2b20      	cmp	r3, #32
 800a938:	d10e      	bne.n	800a958 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	f003 0320 	and.w	r3, r3, #32
 800a944:	2b20      	cmp	r3, #32
 800a946:	d107      	bne.n	800a958 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f06f 0220 	mvn.w	r2, #32
 800a950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 fd79 	bl	800b44a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a958:	bf00      	nop
 800a95a:	3708      	adds	r7, #8
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a972:	2b01      	cmp	r3, #1
 800a974:	d101      	bne.n	800a97a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a976:	2302      	movs	r3, #2
 800a978:	e0ac      	b.n	800aad4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2201      	movs	r2, #1
 800a97e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2b0c      	cmp	r3, #12
 800a986:	f200 809f 	bhi.w	800aac8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800a98a:	a201      	add	r2, pc, #4	; (adr r2, 800a990 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a990:	0800a9c5 	.word	0x0800a9c5
 800a994:	0800aac9 	.word	0x0800aac9
 800a998:	0800aac9 	.word	0x0800aac9
 800a99c:	0800aac9 	.word	0x0800aac9
 800a9a0:	0800aa05 	.word	0x0800aa05
 800a9a4:	0800aac9 	.word	0x0800aac9
 800a9a8:	0800aac9 	.word	0x0800aac9
 800a9ac:	0800aac9 	.word	0x0800aac9
 800a9b0:	0800aa47 	.word	0x0800aa47
 800a9b4:	0800aac9 	.word	0x0800aac9
 800a9b8:	0800aac9 	.word	0x0800aac9
 800a9bc:	0800aac9 	.word	0x0800aac9
 800a9c0:	0800aa87 	.word	0x0800aa87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	68b9      	ldr	r1, [r7, #8]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f000 fa0c 	bl	800ade8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	699a      	ldr	r2, [r3, #24]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f042 0208 	orr.w	r2, r2, #8
 800a9de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	699a      	ldr	r2, [r3, #24]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f022 0204 	bic.w	r2, r2, #4
 800a9ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	6999      	ldr	r1, [r3, #24]
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	691a      	ldr	r2, [r3, #16]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	430a      	orrs	r2, r1
 800aa00:	619a      	str	r2, [r3, #24]
      break;
 800aa02:	e062      	b.n	800aaca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	68b9      	ldr	r1, [r7, #8]
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 fa5c 	bl	800aec8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	699a      	ldr	r2, [r3, #24]
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	699a      	ldr	r2, [r3, #24]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	6999      	ldr	r1, [r3, #24]
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	021a      	lsls	r2, r3, #8
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	430a      	orrs	r2, r1
 800aa42:	619a      	str	r2, [r3, #24]
      break;
 800aa44:	e041      	b.n	800aaca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	68b9      	ldr	r1, [r7, #8]
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f000 faaf 	bl	800afb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	69da      	ldr	r2, [r3, #28]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f042 0208 	orr.w	r2, r2, #8
 800aa60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	69da      	ldr	r2, [r3, #28]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f022 0204 	bic.w	r2, r2, #4
 800aa70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	69d9      	ldr	r1, [r3, #28]
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	691a      	ldr	r2, [r3, #16]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	430a      	orrs	r2, r1
 800aa82:	61da      	str	r2, [r3, #28]
      break;
 800aa84:	e021      	b.n	800aaca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	68b9      	ldr	r1, [r7, #8]
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f000 fb03 	bl	800b098 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	69da      	ldr	r2, [r3, #28]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aaa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	69da      	ldr	r2, [r3, #28]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	69d9      	ldr	r1, [r3, #28]
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	691b      	ldr	r3, [r3, #16]
 800aabc:	021a      	lsls	r2, r3, #8
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	430a      	orrs	r2, r1
 800aac4:	61da      	str	r2, [r3, #28]
      break;
 800aac6:	e000      	b.n	800aaca <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800aac8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aad2:	2300      	movs	r3, #0
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d101      	bne.n	800aaf4 <HAL_TIM_ConfigClockSource+0x18>
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	e0b3      	b.n	800ac5c <HAL_TIM_ConfigClockSource+0x180>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2202      	movs	r2, #2
 800ab00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	689b      	ldr	r3, [r3, #8]
 800ab0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ab12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab2c:	d03e      	beq.n	800abac <HAL_TIM_ConfigClockSource+0xd0>
 800ab2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab32:	f200 8087 	bhi.w	800ac44 <HAL_TIM_ConfigClockSource+0x168>
 800ab36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab3a:	f000 8085 	beq.w	800ac48 <HAL_TIM_ConfigClockSource+0x16c>
 800ab3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab42:	d87f      	bhi.n	800ac44 <HAL_TIM_ConfigClockSource+0x168>
 800ab44:	2b70      	cmp	r3, #112	; 0x70
 800ab46:	d01a      	beq.n	800ab7e <HAL_TIM_ConfigClockSource+0xa2>
 800ab48:	2b70      	cmp	r3, #112	; 0x70
 800ab4a:	d87b      	bhi.n	800ac44 <HAL_TIM_ConfigClockSource+0x168>
 800ab4c:	2b60      	cmp	r3, #96	; 0x60
 800ab4e:	d050      	beq.n	800abf2 <HAL_TIM_ConfigClockSource+0x116>
 800ab50:	2b60      	cmp	r3, #96	; 0x60
 800ab52:	d877      	bhi.n	800ac44 <HAL_TIM_ConfigClockSource+0x168>
 800ab54:	2b50      	cmp	r3, #80	; 0x50
 800ab56:	d03c      	beq.n	800abd2 <HAL_TIM_ConfigClockSource+0xf6>
 800ab58:	2b50      	cmp	r3, #80	; 0x50
 800ab5a:	d873      	bhi.n	800ac44 <HAL_TIM_ConfigClockSource+0x168>
 800ab5c:	2b40      	cmp	r3, #64	; 0x40
 800ab5e:	d058      	beq.n	800ac12 <HAL_TIM_ConfigClockSource+0x136>
 800ab60:	2b40      	cmp	r3, #64	; 0x40
 800ab62:	d86f      	bhi.n	800ac44 <HAL_TIM_ConfigClockSource+0x168>
 800ab64:	2b30      	cmp	r3, #48	; 0x30
 800ab66:	d064      	beq.n	800ac32 <HAL_TIM_ConfigClockSource+0x156>
 800ab68:	2b30      	cmp	r3, #48	; 0x30
 800ab6a:	d86b      	bhi.n	800ac44 <HAL_TIM_ConfigClockSource+0x168>
 800ab6c:	2b20      	cmp	r3, #32
 800ab6e:	d060      	beq.n	800ac32 <HAL_TIM_ConfigClockSource+0x156>
 800ab70:	2b20      	cmp	r3, #32
 800ab72:	d867      	bhi.n	800ac44 <HAL_TIM_ConfigClockSource+0x168>
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d05c      	beq.n	800ac32 <HAL_TIM_ConfigClockSource+0x156>
 800ab78:	2b10      	cmp	r3, #16
 800ab7a:	d05a      	beq.n	800ac32 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800ab7c:	e062      	b.n	800ac44 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6818      	ldr	r0, [r3, #0]
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	6899      	ldr	r1, [r3, #8]
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	685a      	ldr	r2, [r3, #4]
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	68db      	ldr	r3, [r3, #12]
 800ab8e:	f000 fb4e 	bl	800b22e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aba0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	609a      	str	r2, [r3, #8]
      break;
 800abaa:	e04e      	b.n	800ac4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6818      	ldr	r0, [r3, #0]
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	6899      	ldr	r1, [r3, #8]
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	685a      	ldr	r2, [r3, #4]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	f000 fb37 	bl	800b22e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	689a      	ldr	r2, [r3, #8]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800abce:	609a      	str	r2, [r3, #8]
      break;
 800abd0:	e03b      	b.n	800ac4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6818      	ldr	r0, [r3, #0]
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	6859      	ldr	r1, [r3, #4]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	461a      	mov	r2, r3
 800abe0:	f000 faae 	bl	800b140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2150      	movs	r1, #80	; 0x50
 800abea:	4618      	mov	r0, r3
 800abec:	f000 fb05 	bl	800b1fa <TIM_ITRx_SetConfig>
      break;
 800abf0:	e02b      	b.n	800ac4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6818      	ldr	r0, [r3, #0]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	6859      	ldr	r1, [r3, #4]
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	461a      	mov	r2, r3
 800ac00:	f000 facc 	bl	800b19c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2160      	movs	r1, #96	; 0x60
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f000 faf5 	bl	800b1fa <TIM_ITRx_SetConfig>
      break;
 800ac10:	e01b      	b.n	800ac4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6818      	ldr	r0, [r3, #0]
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	6859      	ldr	r1, [r3, #4]
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	461a      	mov	r2, r3
 800ac20:	f000 fa8e 	bl	800b140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2140      	movs	r1, #64	; 0x40
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f000 fae5 	bl	800b1fa <TIM_ITRx_SetConfig>
      break;
 800ac30:	e00b      	b.n	800ac4a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	f000 fadc 	bl	800b1fa <TIM_ITRx_SetConfig>
        break;
 800ac42:	e002      	b.n	800ac4a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800ac44:	bf00      	nop
 800ac46:	e000      	b.n	800ac4a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800ac48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3710      	adds	r7, #16
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac6c:	bf00      	nop
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bc80      	pop	{r7}
 800ac74:	4770      	bx	lr

0800ac76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac76:	b480      	push	{r7}
 800ac78:	b083      	sub	sp, #12
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac7e:	bf00      	nop
 800ac80:	370c      	adds	r7, #12
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bc80      	pop	{r7}
 800ac86:	4770      	bx	lr

0800ac88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac90:	bf00      	nop
 800ac92:	370c      	adds	r7, #12
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bc80      	pop	{r7}
 800ac98:	4770      	bx	lr

0800ac9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac9a:	b480      	push	{r7}
 800ac9c:	b083      	sub	sp, #12
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aca2:	bf00      	nop
 800aca4:	370c      	adds	r7, #12
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bc80      	pop	{r7}
 800acaa:	4770      	bx	lr

0800acac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	4a3f      	ldr	r2, [pc, #252]	; (800adbc <TIM_Base_SetConfig+0x110>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d013      	beq.n	800acec <TIM_Base_SetConfig+0x40>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acca:	d00f      	beq.n	800acec <TIM_Base_SetConfig+0x40>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	4a3c      	ldr	r2, [pc, #240]	; (800adc0 <TIM_Base_SetConfig+0x114>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d00b      	beq.n	800acec <TIM_Base_SetConfig+0x40>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	4a3b      	ldr	r2, [pc, #236]	; (800adc4 <TIM_Base_SetConfig+0x118>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d007      	beq.n	800acec <TIM_Base_SetConfig+0x40>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4a3a      	ldr	r2, [pc, #232]	; (800adc8 <TIM_Base_SetConfig+0x11c>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d003      	beq.n	800acec <TIM_Base_SetConfig+0x40>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4a39      	ldr	r2, [pc, #228]	; (800adcc <TIM_Base_SetConfig+0x120>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d108      	bne.n	800acfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	4313      	orrs	r3, r2
 800acfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	4a2e      	ldr	r2, [pc, #184]	; (800adbc <TIM_Base_SetConfig+0x110>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d02b      	beq.n	800ad5e <TIM_Base_SetConfig+0xb2>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad0c:	d027      	beq.n	800ad5e <TIM_Base_SetConfig+0xb2>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4a2b      	ldr	r2, [pc, #172]	; (800adc0 <TIM_Base_SetConfig+0x114>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d023      	beq.n	800ad5e <TIM_Base_SetConfig+0xb2>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	4a2a      	ldr	r2, [pc, #168]	; (800adc4 <TIM_Base_SetConfig+0x118>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d01f      	beq.n	800ad5e <TIM_Base_SetConfig+0xb2>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a29      	ldr	r2, [pc, #164]	; (800adc8 <TIM_Base_SetConfig+0x11c>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d01b      	beq.n	800ad5e <TIM_Base_SetConfig+0xb2>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	4a28      	ldr	r2, [pc, #160]	; (800adcc <TIM_Base_SetConfig+0x120>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d017      	beq.n	800ad5e <TIM_Base_SetConfig+0xb2>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4a27      	ldr	r2, [pc, #156]	; (800add0 <TIM_Base_SetConfig+0x124>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d013      	beq.n	800ad5e <TIM_Base_SetConfig+0xb2>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4a26      	ldr	r2, [pc, #152]	; (800add4 <TIM_Base_SetConfig+0x128>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d00f      	beq.n	800ad5e <TIM_Base_SetConfig+0xb2>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4a25      	ldr	r2, [pc, #148]	; (800add8 <TIM_Base_SetConfig+0x12c>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d00b      	beq.n	800ad5e <TIM_Base_SetConfig+0xb2>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	4a24      	ldr	r2, [pc, #144]	; (800addc <TIM_Base_SetConfig+0x130>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d007      	beq.n	800ad5e <TIM_Base_SetConfig+0xb2>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4a23      	ldr	r2, [pc, #140]	; (800ade0 <TIM_Base_SetConfig+0x134>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d003      	beq.n	800ad5e <TIM_Base_SetConfig+0xb2>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4a22      	ldr	r2, [pc, #136]	; (800ade4 <TIM_Base_SetConfig+0x138>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d108      	bne.n	800ad70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	68db      	ldr	r3, [r3, #12]
 800ad6a:	68fa      	ldr	r2, [r7, #12]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	695b      	ldr	r3, [r3, #20]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	689a      	ldr	r2, [r3, #8]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	4a09      	ldr	r2, [pc, #36]	; (800adbc <TIM_Base_SetConfig+0x110>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d003      	beq.n	800ada4 <TIM_Base_SetConfig+0xf8>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4a0b      	ldr	r2, [pc, #44]	; (800adcc <TIM_Base_SetConfig+0x120>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d103      	bne.n	800adac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	691a      	ldr	r2, [r3, #16]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2201      	movs	r2, #1
 800adb0:	615a      	str	r2, [r3, #20]
}
 800adb2:	bf00      	nop
 800adb4:	3714      	adds	r7, #20
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bc80      	pop	{r7}
 800adba:	4770      	bx	lr
 800adbc:	40010000 	.word	0x40010000
 800adc0:	40000400 	.word	0x40000400
 800adc4:	40000800 	.word	0x40000800
 800adc8:	40000c00 	.word	0x40000c00
 800adcc:	40010400 	.word	0x40010400
 800add0:	40014000 	.word	0x40014000
 800add4:	40014400 	.word	0x40014400
 800add8:	40014800 	.word	0x40014800
 800addc:	40001800 	.word	0x40001800
 800ade0:	40001c00 	.word	0x40001c00
 800ade4:	40002000 	.word	0x40002000

0800ade8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ade8:	b480      	push	{r7}
 800adea:	b087      	sub	sp, #28
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a1b      	ldr	r3, [r3, #32]
 800adf6:	f023 0201 	bic.w	r2, r3, #1
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a1b      	ldr	r3, [r3, #32]
 800ae02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f023 0303 	bic.w	r3, r3, #3
 800ae1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	68fa      	ldr	r2, [r7, #12]
 800ae26:	4313      	orrs	r3, r2
 800ae28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	f023 0302 	bic.w	r3, r3, #2
 800ae30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	697a      	ldr	r2, [r7, #20]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4a20      	ldr	r2, [pc, #128]	; (800aec0 <TIM_OC1_SetConfig+0xd8>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d003      	beq.n	800ae4c <TIM_OC1_SetConfig+0x64>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a1f      	ldr	r2, [pc, #124]	; (800aec4 <TIM_OC1_SetConfig+0xdc>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d10c      	bne.n	800ae66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	f023 0308 	bic.w	r3, r3, #8
 800ae52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	697a      	ldr	r2, [r7, #20]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	f023 0304 	bic.w	r3, r3, #4
 800ae64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4a15      	ldr	r2, [pc, #84]	; (800aec0 <TIM_OC1_SetConfig+0xd8>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d003      	beq.n	800ae76 <TIM_OC1_SetConfig+0x8e>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4a14      	ldr	r2, [pc, #80]	; (800aec4 <TIM_OC1_SetConfig+0xdc>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d111      	bne.n	800ae9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	695b      	ldr	r3, [r3, #20]
 800ae8a:	693a      	ldr	r2, [r7, #16]
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	699b      	ldr	r3, [r3, #24]
 800ae94:	693a      	ldr	r2, [r7, #16]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	693a      	ldr	r2, [r7, #16]
 800ae9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	685a      	ldr	r2, [r3, #4]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	697a      	ldr	r2, [r7, #20]
 800aeb2:	621a      	str	r2, [r3, #32]
}
 800aeb4:	bf00      	nop
 800aeb6:	371c      	adds	r7, #28
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bc80      	pop	{r7}
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	40010000 	.word	0x40010000
 800aec4:	40010400 	.word	0x40010400

0800aec8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b087      	sub	sp, #28
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6a1b      	ldr	r3, [r3, #32]
 800aed6:	f023 0210 	bic.w	r2, r3, #16
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6a1b      	ldr	r3, [r3, #32]
 800aee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	699b      	ldr	r3, [r3, #24]
 800aeee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aefe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	021b      	lsls	r3, r3, #8
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	4313      	orrs	r3, r2
 800af0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	f023 0320 	bic.w	r3, r3, #32
 800af12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	011b      	lsls	r3, r3, #4
 800af1a:	697a      	ldr	r2, [r7, #20]
 800af1c:	4313      	orrs	r3, r2
 800af1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4a21      	ldr	r2, [pc, #132]	; (800afa8 <TIM_OC2_SetConfig+0xe0>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d003      	beq.n	800af30 <TIM_OC2_SetConfig+0x68>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a20      	ldr	r2, [pc, #128]	; (800afac <TIM_OC2_SetConfig+0xe4>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d10d      	bne.n	800af4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	011b      	lsls	r3, r3, #4
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	4313      	orrs	r3, r2
 800af42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	4a16      	ldr	r2, [pc, #88]	; (800afa8 <TIM_OC2_SetConfig+0xe0>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d003      	beq.n	800af5c <TIM_OC2_SetConfig+0x94>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	4a15      	ldr	r2, [pc, #84]	; (800afac <TIM_OC2_SetConfig+0xe4>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d113      	bne.n	800af84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	695b      	ldr	r3, [r3, #20]
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	693a      	ldr	r2, [r7, #16]
 800af74:	4313      	orrs	r3, r2
 800af76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	699b      	ldr	r3, [r3, #24]
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	693a      	ldr	r2, [r7, #16]
 800af80:	4313      	orrs	r3, r2
 800af82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	693a      	ldr	r2, [r7, #16]
 800af88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	68fa      	ldr	r2, [r7, #12]
 800af8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	685a      	ldr	r2, [r3, #4]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	697a      	ldr	r2, [r7, #20]
 800af9c:	621a      	str	r2, [r3, #32]
}
 800af9e:	bf00      	nop
 800afa0:	371c      	adds	r7, #28
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bc80      	pop	{r7}
 800afa6:	4770      	bx	lr
 800afa8:	40010000 	.word	0x40010000
 800afac:	40010400 	.word	0x40010400

0800afb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b087      	sub	sp, #28
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a1b      	ldr	r3, [r3, #32]
 800afbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a1b      	ldr	r3, [r3, #32]
 800afca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	69db      	ldr	r3, [r3, #28]
 800afd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f023 0303 	bic.w	r3, r3, #3
 800afe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	4313      	orrs	r3, r2
 800aff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	021b      	lsls	r3, r3, #8
 800b000:	697a      	ldr	r2, [r7, #20]
 800b002:	4313      	orrs	r3, r2
 800b004:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	4a21      	ldr	r2, [pc, #132]	; (800b090 <TIM_OC3_SetConfig+0xe0>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d003      	beq.n	800b016 <TIM_OC3_SetConfig+0x66>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4a20      	ldr	r2, [pc, #128]	; (800b094 <TIM_OC3_SetConfig+0xe4>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d10d      	bne.n	800b032 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b01c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	021b      	lsls	r3, r3, #8
 800b024:	697a      	ldr	r2, [r7, #20]
 800b026:	4313      	orrs	r3, r2
 800b028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	4a16      	ldr	r2, [pc, #88]	; (800b090 <TIM_OC3_SetConfig+0xe0>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d003      	beq.n	800b042 <TIM_OC3_SetConfig+0x92>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4a15      	ldr	r2, [pc, #84]	; (800b094 <TIM_OC3_SetConfig+0xe4>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d113      	bne.n	800b06a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	695b      	ldr	r3, [r3, #20]
 800b056:	011b      	lsls	r3, r3, #4
 800b058:	693a      	ldr	r2, [r7, #16]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	699b      	ldr	r3, [r3, #24]
 800b062:	011b      	lsls	r3, r3, #4
 800b064:	693a      	ldr	r2, [r7, #16]
 800b066:	4313      	orrs	r3, r2
 800b068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	693a      	ldr	r2, [r7, #16]
 800b06e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	68fa      	ldr	r2, [r7, #12]
 800b074:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	685a      	ldr	r2, [r3, #4]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	697a      	ldr	r2, [r7, #20]
 800b082:	621a      	str	r2, [r3, #32]
}
 800b084:	bf00      	nop
 800b086:	371c      	adds	r7, #28
 800b088:	46bd      	mov	sp, r7
 800b08a:	bc80      	pop	{r7}
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	40010000 	.word	0x40010000
 800b094:	40010400 	.word	0x40010400

0800b098 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b098:	b480      	push	{r7}
 800b09a:	b087      	sub	sp, #28
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6a1b      	ldr	r3, [r3, #32]
 800b0a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	69db      	ldr	r3, [r3, #28]
 800b0be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	021b      	lsls	r3, r3, #8
 800b0d6:	68fa      	ldr	r2, [r7, #12]
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b0e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	031b      	lsls	r3, r3, #12
 800b0ea:	693a      	ldr	r2, [r7, #16]
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4a11      	ldr	r2, [pc, #68]	; (800b138 <TIM_OC4_SetConfig+0xa0>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d003      	beq.n	800b100 <TIM_OC4_SetConfig+0x68>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4a10      	ldr	r2, [pc, #64]	; (800b13c <TIM_OC4_SetConfig+0xa4>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d109      	bne.n	800b114 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b106:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	695b      	ldr	r3, [r3, #20]
 800b10c:	019b      	lsls	r3, r3, #6
 800b10e:	697a      	ldr	r2, [r7, #20]
 800b110:	4313      	orrs	r3, r2
 800b112:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	697a      	ldr	r2, [r7, #20]
 800b118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	68fa      	ldr	r2, [r7, #12]
 800b11e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	685a      	ldr	r2, [r3, #4]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	693a      	ldr	r2, [r7, #16]
 800b12c:	621a      	str	r2, [r3, #32]
}
 800b12e:	bf00      	nop
 800b130:	371c      	adds	r7, #28
 800b132:	46bd      	mov	sp, r7
 800b134:	bc80      	pop	{r7}
 800b136:	4770      	bx	lr
 800b138:	40010000 	.word	0x40010000
 800b13c:	40010400 	.word	0x40010400

0800b140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b140:	b480      	push	{r7}
 800b142:	b087      	sub	sp, #28
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	6a1b      	ldr	r3, [r3, #32]
 800b150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	6a1b      	ldr	r3, [r3, #32]
 800b156:	f023 0201 	bic.w	r2, r3, #1
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	699b      	ldr	r3, [r3, #24]
 800b162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b16a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	011b      	lsls	r3, r3, #4
 800b170:	693a      	ldr	r2, [r7, #16]
 800b172:	4313      	orrs	r3, r2
 800b174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	f023 030a 	bic.w	r3, r3, #10
 800b17c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b17e:	697a      	ldr	r2, [r7, #20]
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	4313      	orrs	r3, r2
 800b184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	693a      	ldr	r2, [r7, #16]
 800b18a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	697a      	ldr	r2, [r7, #20]
 800b190:	621a      	str	r2, [r3, #32]
}
 800b192:	bf00      	nop
 800b194:	371c      	adds	r7, #28
 800b196:	46bd      	mov	sp, r7
 800b198:	bc80      	pop	{r7}
 800b19a:	4770      	bx	lr

0800b19c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b087      	sub	sp, #28
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6a1b      	ldr	r3, [r3, #32]
 800b1ac:	f023 0210 	bic.w	r2, r3, #16
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	699b      	ldr	r3, [r3, #24]
 800b1b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	6a1b      	ldr	r3, [r3, #32]
 800b1be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b1c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	031b      	lsls	r3, r3, #12
 800b1cc:	697a      	ldr	r2, [r7, #20]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b1d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	011b      	lsls	r3, r3, #4
 800b1de:	693a      	ldr	r2, [r7, #16]
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	697a      	ldr	r2, [r7, #20]
 800b1e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	693a      	ldr	r2, [r7, #16]
 800b1ee:	621a      	str	r2, [r3, #32]
}
 800b1f0:	bf00      	nop
 800b1f2:	371c      	adds	r7, #28
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bc80      	pop	{r7}
 800b1f8:	4770      	bx	lr

0800b1fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b1fa:	b480      	push	{r7}
 800b1fc:	b085      	sub	sp, #20
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
 800b202:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b210:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b212:	683a      	ldr	r2, [r7, #0]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	4313      	orrs	r3, r2
 800b218:	f043 0307 	orr.w	r3, r3, #7
 800b21c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	68fa      	ldr	r2, [r7, #12]
 800b222:	609a      	str	r2, [r3, #8]
}
 800b224:	bf00      	nop
 800b226:	3714      	adds	r7, #20
 800b228:	46bd      	mov	sp, r7
 800b22a:	bc80      	pop	{r7}
 800b22c:	4770      	bx	lr

0800b22e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b22e:	b480      	push	{r7}
 800b230:	b087      	sub	sp, #28
 800b232:	af00      	add	r7, sp, #0
 800b234:	60f8      	str	r0, [r7, #12]
 800b236:	60b9      	str	r1, [r7, #8]
 800b238:	607a      	str	r2, [r7, #4]
 800b23a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b248:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	021a      	lsls	r2, r3, #8
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	431a      	orrs	r2, r3
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	4313      	orrs	r3, r2
 800b256:	697a      	ldr	r2, [r7, #20]
 800b258:	4313      	orrs	r3, r2
 800b25a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	697a      	ldr	r2, [r7, #20]
 800b260:	609a      	str	r2, [r3, #8]
}
 800b262:	bf00      	nop
 800b264:	371c      	adds	r7, #28
 800b266:	46bd      	mov	sp, r7
 800b268:	bc80      	pop	{r7}
 800b26a:	4770      	bx	lr

0800b26c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b087      	sub	sp, #28
 800b270:	af00      	add	r7, sp, #0
 800b272:	60f8      	str	r0, [r7, #12]
 800b274:	60b9      	str	r1, [r7, #8]
 800b276:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	f003 031f 	and.w	r3, r3, #31
 800b27e:	2201      	movs	r2, #1
 800b280:	fa02 f303 	lsl.w	r3, r2, r3
 800b284:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	6a1a      	ldr	r2, [r3, #32]
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	43db      	mvns	r3, r3
 800b28e:	401a      	ands	r2, r3
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6a1a      	ldr	r2, [r3, #32]
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	f003 031f 	and.w	r3, r3, #31
 800b29e:	6879      	ldr	r1, [r7, #4]
 800b2a0:	fa01 f303 	lsl.w	r3, r1, r3
 800b2a4:	431a      	orrs	r2, r3
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	621a      	str	r2, [r3, #32]
}
 800b2aa:	bf00      	nop
 800b2ac:	371c      	adds	r7, #28
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bc80      	pop	{r7}
 800b2b2:	4770      	bx	lr

0800b2b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b085      	sub	sp, #20
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d101      	bne.n	800b2cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b2c8:	2302      	movs	r3, #2
 800b2ca:	e05a      	b.n	800b382 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2202      	movs	r2, #2
 800b2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4a20      	ldr	r2, [pc, #128]	; (800b38c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d022      	beq.n	800b356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b318:	d01d      	beq.n	800b356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4a1c      	ldr	r2, [pc, #112]	; (800b390 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d018      	beq.n	800b356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a1a      	ldr	r2, [pc, #104]	; (800b394 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d013      	beq.n	800b356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a19      	ldr	r2, [pc, #100]	; (800b398 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d00e      	beq.n	800b356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a17      	ldr	r2, [pc, #92]	; (800b39c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d009      	beq.n	800b356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a16      	ldr	r2, [pc, #88]	; (800b3a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d004      	beq.n	800b356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a14      	ldr	r2, [pc, #80]	; (800b3a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d10c      	bne.n	800b370 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b35c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	68ba      	ldr	r2, [r7, #8]
 800b364:	4313      	orrs	r3, r2
 800b366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2201      	movs	r2, #1
 800b374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	bc80      	pop	{r7}
 800b38a:	4770      	bx	lr
 800b38c:	40010000 	.word	0x40010000
 800b390:	40000400 	.word	0x40000400
 800b394:	40000800 	.word	0x40000800
 800b398:	40000c00 	.word	0x40000c00
 800b39c:	40010400 	.word	0x40010400
 800b3a0:	40014000 	.word	0x40014000
 800b3a4:	40001800 	.word	0x40001800

0800b3a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b085      	sub	sp, #20
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d101      	bne.n	800b3c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b3c0:	2302      	movs	r3, #2
 800b3c2:	e03d      	b.n	800b440 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4313      	orrs	r3, r2
 800b402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	691b      	ldr	r3, [r3, #16]
 800b40e:	4313      	orrs	r3, r2
 800b410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	695b      	ldr	r3, [r3, #20]
 800b41c:	4313      	orrs	r3, r2
 800b41e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	69db      	ldr	r3, [r3, #28]
 800b42a:	4313      	orrs	r3, r2
 800b42c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b43e:	2300      	movs	r3, #0
}
 800b440:	4618      	mov	r0, r3
 800b442:	3714      	adds	r7, #20
 800b444:	46bd      	mov	sp, r7
 800b446:	bc80      	pop	{r7}
 800b448:	4770      	bx	lr

0800b44a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b44a:	b480      	push	{r7}
 800b44c:	b083      	sub	sp, #12
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b452:	bf00      	nop
 800b454:	370c      	adds	r7, #12
 800b456:	46bd      	mov	sp, r7
 800b458:	bc80      	pop	{r7}
 800b45a:	4770      	bx	lr

0800b45c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b464:	bf00      	nop
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	bc80      	pop	{r7}
 800b46c:	4770      	bx	lr

0800b46e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b46e:	b084      	sub	sp, #16
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	f107 001c 	add.w	r0, r7, #28
 800b47c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b482:	2b01      	cmp	r3, #1
 800b484:	d122      	bne.n	800b4cc <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b48a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b49a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b4ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d105      	bne.n	800b4c0 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f000 f98f 	bl	800b7e4 <USB_CoreReset>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	73fb      	strb	r3, [r7, #15]
 800b4ca:	e010      	b.n	800b4ee <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 f983 	bl	800b7e4 <USB_CoreReset>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d10b      	bne.n	800b50c <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	f043 0206 	orr.w	r2, r3, #6
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	f043 0220 	orr.w	r2, r3, #32
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b50c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3710      	adds	r7, #16
 800b512:	46bd      	mov	sp, r7
 800b514:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b518:	b004      	add	sp, #16
 800b51a:	4770      	bx	lr

0800b51c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	689b      	ldr	r3, [r3, #8]
 800b528:	f043 0201 	orr.w	r2, r3, #1
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b530:	2300      	movs	r3, #0
}
 800b532:	4618      	mov	r0, r3
 800b534:	370c      	adds	r7, #12
 800b536:	46bd      	mov	sp, r7
 800b538:	bc80      	pop	{r7}
 800b53a:	4770      	bx	lr

0800b53c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	f023 0201 	bic.w	r2, r3, #1
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	370c      	adds	r7, #12
 800b556:	46bd      	mov	sp, r7
 800b558:	bc80      	pop	{r7}
 800b55a:	4770      	bx	lr

0800b55c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	460b      	mov	r3, r1
 800b566:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b568:	2300      	movs	r3, #0
 800b56a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b578:	78fb      	ldrb	r3, [r7, #3]
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d115      	bne.n	800b5aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	68db      	ldr	r3, [r3, #12]
 800b582:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b58a:	2001      	movs	r0, #1
 800b58c:	f7fa fc2a 	bl	8005de4 <HAL_Delay>
      ms++;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	3301      	adds	r3, #1
 800b594:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 f916 	bl	800b7c8 <USB_GetMode>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	d01e      	beq.n	800b5e0 <USB_SetCurrentMode+0x84>
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2b31      	cmp	r3, #49	; 0x31
 800b5a6:	d9f0      	bls.n	800b58a <USB_SetCurrentMode+0x2e>
 800b5a8:	e01a      	b.n	800b5e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b5aa:	78fb      	ldrb	r3, [r7, #3]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d115      	bne.n	800b5dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b5bc:	2001      	movs	r0, #1
 800b5be:	f7fa fc11 	bl	8005de4 <HAL_Delay>
      ms++;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 f8fd 	bl	800b7c8 <USB_GetMode>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d005      	beq.n	800b5e0 <USB_SetCurrentMode+0x84>
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2b31      	cmp	r3, #49	; 0x31
 800b5d8:	d9f0      	bls.n	800b5bc <USB_SetCurrentMode+0x60>
 800b5da:	e001      	b.n	800b5e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e005      	b.n	800b5ec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2b32      	cmp	r3, #50	; 0x32
 800b5e4:	d101      	bne.n	800b5ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e000      	b.n	800b5ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b5ea:	2300      	movs	r3, #0
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3710      	adds	r7, #16
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b085      	sub	sp, #20
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b5fe:	2300      	movs	r3, #0
 800b600:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	019b      	lsls	r3, r3, #6
 800b606:	f043 0220 	orr.w	r2, r3, #32
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	3301      	adds	r3, #1
 800b612:	60fb      	str	r3, [r7, #12]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	4a08      	ldr	r2, [pc, #32]	; (800b638 <USB_FlushTxFifo+0x44>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d901      	bls.n	800b620 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b61c:	2303      	movs	r3, #3
 800b61e:	e006      	b.n	800b62e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	691b      	ldr	r3, [r3, #16]
 800b624:	f003 0320 	and.w	r3, r3, #32
 800b628:	2b20      	cmp	r3, #32
 800b62a:	d0f0      	beq.n	800b60e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b62c:	2300      	movs	r3, #0
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3714      	adds	r7, #20
 800b632:	46bd      	mov	sp, r7
 800b634:	bc80      	pop	{r7}
 800b636:	4770      	bx	lr
 800b638:	00030d40 	.word	0x00030d40

0800b63c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b644:	2300      	movs	r3, #0
 800b646:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2210      	movs	r2, #16
 800b64c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	3301      	adds	r3, #1
 800b652:	60fb      	str	r3, [r7, #12]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	4a08      	ldr	r2, [pc, #32]	; (800b678 <USB_FlushRxFifo+0x3c>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d901      	bls.n	800b660 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b65c:	2303      	movs	r3, #3
 800b65e:	e006      	b.n	800b66e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	691b      	ldr	r3, [r3, #16]
 800b664:	f003 0310 	and.w	r3, r3, #16
 800b668:	2b10      	cmp	r3, #16
 800b66a:	d0f0      	beq.n	800b64e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b66c:	2300      	movs	r3, #0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3714      	adds	r7, #20
 800b672:	46bd      	mov	sp, r7
 800b674:	bc80      	pop	{r7}
 800b676:	4770      	bx	lr
 800b678:	00030d40 	.word	0x00030d40

0800b67c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b089      	sub	sp, #36	; 0x24
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	4611      	mov	r1, r2
 800b688:	461a      	mov	r2, r3
 800b68a:	460b      	mov	r3, r1
 800b68c:	71fb      	strb	r3, [r7, #7]
 800b68e:	4613      	mov	r3, r2
 800b690:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b69a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d123      	bne.n	800b6ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b6a2:	88bb      	ldrh	r3, [r7, #4]
 800b6a4:	3303      	adds	r3, #3
 800b6a6:	089b      	lsrs	r3, r3, #2
 800b6a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	61bb      	str	r3, [r7, #24]
 800b6ae:	e018      	b.n	800b6e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b6b0:	79fb      	ldrb	r3, [r7, #7]
 800b6b2:	031a      	lsls	r2, r3, #12
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6bc:	461a      	mov	r2, r3
 800b6be:	69fb      	ldr	r3, [r7, #28]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b6ca:	69fb      	ldr	r3, [r7, #28]
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b6d0:	69fb      	ldr	r3, [r7, #28]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b6d6:	69fb      	ldr	r3, [r7, #28]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	3301      	adds	r3, #1
 800b6e0:	61bb      	str	r3, [r7, #24]
 800b6e2:	69ba      	ldr	r2, [r7, #24]
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d3e2      	bcc.n	800b6b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b6ea:	2300      	movs	r3, #0
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3724      	adds	r7, #36	; 0x24
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bc80      	pop	{r7}
 800b6f4:	4770      	bx	lr

0800b6f6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b6f6:	b480      	push	{r7}
 800b6f8:	b08b      	sub	sp, #44	; 0x2c
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	60f8      	str	r0, [r7, #12]
 800b6fe:	60b9      	str	r1, [r7, #8]
 800b700:	4613      	mov	r3, r2
 800b702:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b70c:	88fb      	ldrh	r3, [r7, #6]
 800b70e:	089b      	lsrs	r3, r3, #2
 800b710:	b29b      	uxth	r3, r3
 800b712:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b714:	88fb      	ldrh	r3, [r7, #6]
 800b716:	f003 0303 	and.w	r3, r3, #3
 800b71a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b71c:	2300      	movs	r3, #0
 800b71e:	623b      	str	r3, [r7, #32]
 800b720:	e014      	b.n	800b74c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72c:	601a      	str	r2, [r3, #0]
    pDest++;
 800b72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b730:	3301      	adds	r3, #1
 800b732:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b736:	3301      	adds	r3, #1
 800b738:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73c:	3301      	adds	r3, #1
 800b73e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b742:	3301      	adds	r3, #1
 800b744:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b746:	6a3b      	ldr	r3, [r7, #32]
 800b748:	3301      	adds	r3, #1
 800b74a:	623b      	str	r3, [r7, #32]
 800b74c:	6a3a      	ldr	r2, [r7, #32]
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	429a      	cmp	r2, r3
 800b752:	d3e6      	bcc.n	800b722 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b754:	8bfb      	ldrh	r3, [r7, #30]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d01e      	beq.n	800b798 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b75a:	2300      	movs	r3, #0
 800b75c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b75e:	69bb      	ldr	r3, [r7, #24]
 800b760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b764:	461a      	mov	r2, r3
 800b766:	f107 0310 	add.w	r3, r7, #16
 800b76a:	6812      	ldr	r2, [r2, #0]
 800b76c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b76e:	693a      	ldr	r2, [r7, #16]
 800b770:	6a3b      	ldr	r3, [r7, #32]
 800b772:	b2db      	uxtb	r3, r3
 800b774:	00db      	lsls	r3, r3, #3
 800b776:	fa22 f303 	lsr.w	r3, r2, r3
 800b77a:	b2da      	uxtb	r2, r3
 800b77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77e:	701a      	strb	r2, [r3, #0]
      i++;
 800b780:	6a3b      	ldr	r3, [r7, #32]
 800b782:	3301      	adds	r3, #1
 800b784:	623b      	str	r3, [r7, #32]
      pDest++;
 800b786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b788:	3301      	adds	r3, #1
 800b78a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b78c:	8bfb      	ldrh	r3, [r7, #30]
 800b78e:	3b01      	subs	r3, #1
 800b790:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b792:	8bfb      	ldrh	r3, [r7, #30]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d1ea      	bne.n	800b76e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	372c      	adds	r7, #44	; 0x2c
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bc80      	pop	{r7}
 800b7a2:	4770      	bx	lr

0800b7a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b085      	sub	sp, #20
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	695b      	ldr	r3, [r3, #20]
 800b7b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	699b      	ldr	r3, [r3, #24]
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	4013      	ands	r3, r2
 800b7ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3714      	adds	r7, #20
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bc80      	pop	{r7}
 800b7c6:	4770      	bx	lr

0800b7c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	695b      	ldr	r3, [r3, #20]
 800b7d4:	f003 0301 	and.w	r3, r3, #1
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bc80      	pop	{r7}
 800b7e0:	4770      	bx	lr
	...

0800b7e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b085      	sub	sp, #20
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	60fb      	str	r3, [r7, #12]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	4a12      	ldr	r2, [pc, #72]	; (800b844 <USB_CoreReset+0x60>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d901      	bls.n	800b802 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b7fe:	2303      	movs	r3, #3
 800b800:	e01b      	b.n	800b83a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	691b      	ldr	r3, [r3, #16]
 800b806:	2b00      	cmp	r3, #0
 800b808:	daf2      	bge.n	800b7f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b80a:	2300      	movs	r3, #0
 800b80c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	691b      	ldr	r3, [r3, #16]
 800b812:	f043 0201 	orr.w	r2, r3, #1
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	3301      	adds	r3, #1
 800b81e:	60fb      	str	r3, [r7, #12]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	4a08      	ldr	r2, [pc, #32]	; (800b844 <USB_CoreReset+0x60>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d901      	bls.n	800b82c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b828:	2303      	movs	r3, #3
 800b82a:	e006      	b.n	800b83a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	691b      	ldr	r3, [r3, #16]
 800b830:	f003 0301 	and.w	r3, r3, #1
 800b834:	2b01      	cmp	r3, #1
 800b836:	d0f0      	beq.n	800b81a <USB_CoreReset+0x36>

  return HAL_OK;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3714      	adds	r7, #20
 800b83e:	46bd      	mov	sp, r7
 800b840:	bc80      	pop	{r7}
 800b842:	4770      	bx	lr
 800b844:	00030d40 	.word	0x00030d40

0800b848 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b848:	b084      	sub	sp, #16
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b084      	sub	sp, #16
 800b84e:	af00      	add	r7, sp, #0
 800b850:	6078      	str	r0, [r7, #4]
 800b852:	f107 001c 	add.w	r0, r7, #28
 800b856:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b864:	461a      	mov	r2, r3
 800b866:	2300      	movs	r3, #0
 800b868:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b86e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b87a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b886:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b896:	2b00      	cmp	r3, #0
 800b898:	d018      	beq.n	800b8cc <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d10a      	bne.n	800b8b6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	68ba      	ldr	r2, [r7, #8]
 800b8aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8ae:	f043 0304 	orr.w	r3, r3, #4
 800b8b2:	6013      	str	r3, [r2, #0]
 800b8b4:	e014      	b.n	800b8e0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	68ba      	ldr	r2, [r7, #8]
 800b8c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8c4:	f023 0304 	bic.w	r3, r3, #4
 800b8c8:	6013      	str	r3, [r2, #0]
 800b8ca:	e009      	b.n	800b8e0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	68ba      	ldr	r2, [r7, #8]
 800b8d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8da:	f023 0304 	bic.w	r3, r3, #4
 800b8de:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b8e0:	2110      	movs	r1, #16
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f7ff fe86 	bl	800b5f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f7ff fea7 	bl	800b63c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	60fb      	str	r3, [r7, #12]
 800b8f2:	e015      	b.n	800b920 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	015a      	lsls	r2, r3, #5
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b900:	461a      	mov	r2, r3
 800b902:	f04f 33ff 	mov.w	r3, #4294967295
 800b906:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	015a      	lsls	r2, r3, #5
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	4413      	add	r3, r2
 800b910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b914:	461a      	mov	r2, r3
 800b916:	2300      	movs	r3, #0
 800b918:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	3301      	adds	r3, #1
 800b91e:	60fb      	str	r3, [r7, #12]
 800b920:	6a3b      	ldr	r3, [r7, #32]
 800b922:	68fa      	ldr	r2, [r7, #12]
 800b924:	429a      	cmp	r2, r3
 800b926:	d3e5      	bcc.n	800b8f4 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f04f 32ff 	mov.w	r2, #4294967295
 800b934:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b93a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d00b      	beq.n	800b95a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b948:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4a13      	ldr	r2, [pc, #76]	; (800b99c <USB_HostInit+0x154>)
 800b94e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	4a13      	ldr	r2, [pc, #76]	; (800b9a0 <USB_HostInit+0x158>)
 800b954:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b958:	e009      	b.n	800b96e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2280      	movs	r2, #128	; 0x80
 800b95e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	4a10      	ldr	r2, [pc, #64]	; (800b9a4 <USB_HostInit+0x15c>)
 800b964:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	4a0f      	ldr	r2, [pc, #60]	; (800b9a8 <USB_HostInit+0x160>)
 800b96a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b970:	2b00      	cmp	r3, #0
 800b972:	d105      	bne.n	800b980 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	699b      	ldr	r3, [r3, #24]
 800b978:	f043 0210 	orr.w	r2, r3, #16
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	699a      	ldr	r2, [r3, #24]
 800b984:	4b09      	ldr	r3, [pc, #36]	; (800b9ac <USB_HostInit+0x164>)
 800b986:	4313      	orrs	r3, r2
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3710      	adds	r7, #16
 800b992:	46bd      	mov	sp, r7
 800b994:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b998:	b004      	add	sp, #16
 800b99a:	4770      	bx	lr
 800b99c:	01000200 	.word	0x01000200
 800b9a0:	00e00300 	.word	0x00e00300
 800b9a4:	00600080 	.word	0x00600080
 800b9a8:	004000e0 	.word	0x004000e0
 800b9ac:	a3200008 	.word	0xa3200008

0800b9b0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b085      	sub	sp, #20
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	68fa      	ldr	r2, [r7, #12]
 800b9ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b9ce:	f023 0303 	bic.w	r3, r3, #3
 800b9d2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	78fb      	ldrb	r3, [r7, #3]
 800b9de:	f003 0303 	and.w	r3, r3, #3
 800b9e2:	68f9      	ldr	r1, [r7, #12]
 800b9e4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b9ec:	78fb      	ldrb	r3, [r7, #3]
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d107      	bne.n	800ba02 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b9fe:	6053      	str	r3, [r2, #4]
 800ba00:	e009      	b.n	800ba16 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ba02:	78fb      	ldrb	r3, [r7, #3]
 800ba04:	2b02      	cmp	r3, #2
 800ba06:	d106      	bne.n	800ba16 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba0e:	461a      	mov	r2, r3
 800ba10:	f241 7370 	movw	r3, #6000	; 0x1770
 800ba14:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ba16:	2300      	movs	r3, #0
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3714      	adds	r7, #20
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bc80      	pop	{r7}
 800ba20:	4770      	bx	lr

0800ba22 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b084      	sub	sp, #16
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ba42:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	68fa      	ldr	r2, [r7, #12]
 800ba48:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ba4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba50:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800ba52:	2064      	movs	r0, #100	; 0x64
 800ba54:	f7fa f9c6 	bl	8005de4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	68fa      	ldr	r2, [r7, #12]
 800ba5c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ba60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba64:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800ba66:	200a      	movs	r0, #10
 800ba68:	f7fa f9bc 	bl	8005de4 <HAL_Delay>

  return HAL_OK;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800ba76:	b480      	push	{r7}
 800ba78:	b085      	sub	sp, #20
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
 800ba7e:	460b      	mov	r3, r1
 800ba80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ba86:	2300      	movs	r3, #0
 800ba88:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ba9a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d109      	bne.n	800baba <USB_DriveVbus+0x44>
 800baa6:	78fb      	ldrb	r3, [r7, #3]
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d106      	bne.n	800baba <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	68fa      	ldr	r2, [r7, #12]
 800bab0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bab4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bab8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bac4:	d109      	bne.n	800bada <USB_DriveVbus+0x64>
 800bac6:	78fb      	ldrb	r3, [r7, #3]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d106      	bne.n	800bada <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	68fa      	ldr	r2, [r7, #12]
 800bad0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bad8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	3714      	adds	r7, #20
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bc80      	pop	{r7}
 800bae4:	4770      	bx	lr

0800bae6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bae6:	b480      	push	{r7}
 800bae8:	b085      	sub	sp, #20
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800baf2:	2300      	movs	r3, #0
 800baf4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	0c5b      	lsrs	r3, r3, #17
 800bb04:	f003 0303 	and.w	r3, r3, #3
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3714      	adds	r7, #20
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bc80      	pop	{r7}
 800bb10:	4770      	bx	lr

0800bb12 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800bb12:	b480      	push	{r7}
 800bb14:	b085      	sub	sp, #20
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	b29b      	uxth	r3, r3
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3714      	adds	r7, #20
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bc80      	pop	{r7}
 800bb30:	4770      	bx	lr
	...

0800bb34 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b088      	sub	sp, #32
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	4608      	mov	r0, r1
 800bb3e:	4611      	mov	r1, r2
 800bb40:	461a      	mov	r2, r3
 800bb42:	4603      	mov	r3, r0
 800bb44:	70fb      	strb	r3, [r7, #3]
 800bb46:	460b      	mov	r3, r1
 800bb48:	70bb      	strb	r3, [r7, #2]
 800bb4a:	4613      	mov	r3, r2
 800bb4c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800bb56:	78fb      	ldrb	r3, [r7, #3]
 800bb58:	015a      	lsls	r2, r3, #5
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	4413      	add	r3, r2
 800bb5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb62:	461a      	mov	r2, r3
 800bb64:	f04f 33ff 	mov.w	r3, #4294967295
 800bb68:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800bb6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bb6e:	2b03      	cmp	r3, #3
 800bb70:	d87e      	bhi.n	800bc70 <USB_HC_Init+0x13c>
 800bb72:	a201      	add	r2, pc, #4	; (adr r2, 800bb78 <USB_HC_Init+0x44>)
 800bb74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb78:	0800bb89 	.word	0x0800bb89
 800bb7c:	0800bc33 	.word	0x0800bc33
 800bb80:	0800bb89 	.word	0x0800bb89
 800bb84:	0800bbf5 	.word	0x0800bbf5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bb88:	78fb      	ldrb	r3, [r7, #3]
 800bb8a:	015a      	lsls	r2, r3, #5
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	4413      	add	r3, r2
 800bb90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb94:	461a      	mov	r2, r3
 800bb96:	f240 439d 	movw	r3, #1181	; 0x49d
 800bb9a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800bb9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	da10      	bge.n	800bbc6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800bba4:	78fb      	ldrb	r3, [r7, #3]
 800bba6:	015a      	lsls	r2, r3, #5
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	4413      	add	r3, r2
 800bbac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	78fa      	ldrb	r2, [r7, #3]
 800bbb4:	0151      	lsls	r1, r2, #5
 800bbb6:	693a      	ldr	r2, [r7, #16]
 800bbb8:	440a      	add	r2, r1
 800bbba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbc2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800bbc4:	e057      	b.n	800bc76 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d051      	beq.n	800bc76 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800bbd2:	78fb      	ldrb	r3, [r7, #3]
 800bbd4:	015a      	lsls	r2, r3, #5
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	4413      	add	r3, r2
 800bbda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	78fa      	ldrb	r2, [r7, #3]
 800bbe2:	0151      	lsls	r1, r2, #5
 800bbe4:	693a      	ldr	r2, [r7, #16]
 800bbe6:	440a      	add	r2, r1
 800bbe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800bbf0:	60d3      	str	r3, [r2, #12]
      break;
 800bbf2:	e040      	b.n	800bc76 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bbf4:	78fb      	ldrb	r3, [r7, #3]
 800bbf6:	015a      	lsls	r2, r3, #5
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	4413      	add	r3, r2
 800bbfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc00:	461a      	mov	r2, r3
 800bc02:	f240 639d 	movw	r3, #1693	; 0x69d
 800bc06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800bc08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	da34      	bge.n	800bc7a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800bc10:	78fb      	ldrb	r3, [r7, #3]
 800bc12:	015a      	lsls	r2, r3, #5
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	4413      	add	r3, r2
 800bc18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc1c:	68db      	ldr	r3, [r3, #12]
 800bc1e:	78fa      	ldrb	r2, [r7, #3]
 800bc20:	0151      	lsls	r1, r2, #5
 800bc22:	693a      	ldr	r2, [r7, #16]
 800bc24:	440a      	add	r2, r1
 800bc26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc2e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800bc30:	e023      	b.n	800bc7a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bc32:	78fb      	ldrb	r3, [r7, #3]
 800bc34:	015a      	lsls	r2, r3, #5
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	4413      	add	r3, r2
 800bc3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc3e:	461a      	mov	r2, r3
 800bc40:	f240 2325 	movw	r3, #549	; 0x225
 800bc44:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800bc46:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	da17      	bge.n	800bc7e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800bc4e:	78fb      	ldrb	r3, [r7, #3]
 800bc50:	015a      	lsls	r2, r3, #5
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	4413      	add	r3, r2
 800bc56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	78fa      	ldrb	r2, [r7, #3]
 800bc5e:	0151      	lsls	r1, r2, #5
 800bc60:	693a      	ldr	r2, [r7, #16]
 800bc62:	440a      	add	r2, r1
 800bc64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc68:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800bc6c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800bc6e:	e006      	b.n	800bc7e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800bc70:	2301      	movs	r3, #1
 800bc72:	77fb      	strb	r3, [r7, #31]
      break;
 800bc74:	e004      	b.n	800bc80 <USB_HC_Init+0x14c>
      break;
 800bc76:	bf00      	nop
 800bc78:	e002      	b.n	800bc80 <USB_HC_Init+0x14c>
      break;
 800bc7a:	bf00      	nop
 800bc7c:	e000      	b.n	800bc80 <USB_HC_Init+0x14c>
      break;
 800bc7e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc86:	699a      	ldr	r2, [r3, #24]
 800bc88:	78fb      	ldrb	r3, [r7, #3]
 800bc8a:	f003 030f 	and.w	r3, r3, #15
 800bc8e:	2101      	movs	r1, #1
 800bc90:	fa01 f303 	lsl.w	r3, r1, r3
 800bc94:	6939      	ldr	r1, [r7, #16]
 800bc96:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	699b      	ldr	r3, [r3, #24]
 800bca2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800bcaa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	da03      	bge.n	800bcba <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800bcb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcb6:	61bb      	str	r3, [r7, #24]
 800bcb8:	e001      	b.n	800bcbe <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f7ff ff11 	bl	800bae6 <USB_GetHostSpeed>
 800bcc4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800bcc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bcca:	2b02      	cmp	r3, #2
 800bccc:	d106      	bne.n	800bcdc <USB_HC_Init+0x1a8>
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2b02      	cmp	r3, #2
 800bcd2:	d003      	beq.n	800bcdc <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800bcd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bcd8:	617b      	str	r3, [r7, #20]
 800bcda:	e001      	b.n	800bce0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bce0:	787b      	ldrb	r3, [r7, #1]
 800bce2:	059b      	lsls	r3, r3, #22
 800bce4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bce8:	78bb      	ldrb	r3, [r7, #2]
 800bcea:	02db      	lsls	r3, r3, #11
 800bcec:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bcf0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bcf2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bcf6:	049b      	lsls	r3, r3, #18
 800bcf8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bcfc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bcfe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bd00:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bd04:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bd06:	69bb      	ldr	r3, [r7, #24]
 800bd08:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bd0a:	78fb      	ldrb	r3, [r7, #3]
 800bd0c:	0159      	lsls	r1, r3, #5
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	440b      	add	r3, r1
 800bd12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd16:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bd1c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800bd1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bd22:	2b03      	cmp	r3, #3
 800bd24:	d10f      	bne.n	800bd46 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800bd26:	78fb      	ldrb	r3, [r7, #3]
 800bd28:	015a      	lsls	r2, r3, #5
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	78fa      	ldrb	r2, [r7, #3]
 800bd36:	0151      	lsls	r1, r2, #5
 800bd38:	693a      	ldr	r2, [r7, #16]
 800bd3a:	440a      	add	r2, r1
 800bd3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bd44:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800bd46:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3720      	adds	r7, #32
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b08c      	sub	sp, #48	; 0x30
 800bd54:	af02      	add	r7, sp, #8
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	785b      	ldrb	r3, [r3, #1]
 800bd66:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800bd68:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd6c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d02d      	beq.n	800bdd6 <USB_HC_StartXfer+0x86>
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	791b      	ldrb	r3, [r3, #4]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d129      	bne.n	800bdd6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800bd82:	79fb      	ldrb	r3, [r7, #7]
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d117      	bne.n	800bdb8 <USB_HC_StartXfer+0x68>
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	79db      	ldrb	r3, [r3, #7]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d003      	beq.n	800bd98 <USB_HC_StartXfer+0x48>
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	79db      	ldrb	r3, [r3, #7]
 800bd94:	2b02      	cmp	r3, #2
 800bd96:	d10f      	bne.n	800bdb8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	015a      	lsls	r2, r3, #5
 800bd9c:	6a3b      	ldr	r3, [r7, #32]
 800bd9e:	4413      	add	r3, r2
 800bda0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bda4:	68db      	ldr	r3, [r3, #12]
 800bda6:	69fa      	ldr	r2, [r7, #28]
 800bda8:	0151      	lsls	r1, r2, #5
 800bdaa:	6a3a      	ldr	r2, [r7, #32]
 800bdac:	440a      	add	r2, r1
 800bdae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bdb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdb6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800bdb8:	79fb      	ldrb	r3, [r7, #7]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d10b      	bne.n	800bdd6 <USB_HC_StartXfer+0x86>
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	795b      	ldrb	r3, [r3, #5]
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d107      	bne.n	800bdd6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	785b      	ldrb	r3, [r3, #1]
 800bdca:	4619      	mov	r1, r3
 800bdcc:	68f8      	ldr	r0, [r7, #12]
 800bdce:	f000 fa2d 	bl	800c22c <USB_DoPing>
      return HAL_OK;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	e0f8      	b.n	800bfc8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	695b      	ldr	r3, [r3, #20]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d018      	beq.n	800be10 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	695b      	ldr	r3, [r3, #20]
 800bde2:	68ba      	ldr	r2, [r7, #8]
 800bde4:	8912      	ldrh	r2, [r2, #8]
 800bde6:	4413      	add	r3, r2
 800bde8:	3b01      	subs	r3, #1
 800bdea:	68ba      	ldr	r2, [r7, #8]
 800bdec:	8912      	ldrh	r2, [r2, #8]
 800bdee:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdf2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800bdf4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bdf6:	8b7b      	ldrh	r3, [r7, #26]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d90b      	bls.n	800be14 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800bdfc:	8b7b      	ldrh	r3, [r7, #26]
 800bdfe:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800be00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be02:	68ba      	ldr	r2, [r7, #8]
 800be04:	8912      	ldrh	r2, [r2, #8]
 800be06:	fb02 f203 	mul.w	r2, r2, r3
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	611a      	str	r2, [r3, #16]
 800be0e:	e001      	b.n	800be14 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800be10:	2301      	movs	r3, #1
 800be12:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	78db      	ldrb	r3, [r3, #3]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d007      	beq.n	800be2c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800be1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be1e:	68ba      	ldr	r2, [r7, #8]
 800be20:	8912      	ldrh	r2, [r2, #8]
 800be22:	fb02 f203 	mul.w	r2, r2, r3
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	611a      	str	r2, [r3, #16]
 800be2a:	e003      	b.n	800be34 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	695a      	ldr	r2, [r3, #20]
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	691b      	ldr	r3, [r3, #16]
 800be38:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800be3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be3e:	04d9      	lsls	r1, r3, #19
 800be40:	4b63      	ldr	r3, [pc, #396]	; (800bfd0 <USB_HC_StartXfer+0x280>)
 800be42:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800be44:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	7a9b      	ldrb	r3, [r3, #10]
 800be4a:	075b      	lsls	r3, r3, #29
 800be4c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800be50:	69f9      	ldr	r1, [r7, #28]
 800be52:	0148      	lsls	r0, r1, #5
 800be54:	6a39      	ldr	r1, [r7, #32]
 800be56:	4401      	add	r1, r0
 800be58:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800be5c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800be5e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800be60:	79fb      	ldrb	r3, [r7, #7]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d009      	beq.n	800be7a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	68d9      	ldr	r1, [r3, #12]
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	015a      	lsls	r2, r3, #5
 800be6e:	6a3b      	ldr	r3, [r7, #32]
 800be70:	4413      	add	r3, r2
 800be72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be76:	460a      	mov	r2, r1
 800be78:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800be7a:	6a3b      	ldr	r3, [r7, #32]
 800be7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	f003 0301 	and.w	r3, r3, #1
 800be86:	2b00      	cmp	r3, #0
 800be88:	bf0c      	ite	eq
 800be8a:	2301      	moveq	r3, #1
 800be8c:	2300      	movne	r3, #0
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	015a      	lsls	r2, r3, #5
 800be96:	6a3b      	ldr	r3, [r7, #32]
 800be98:	4413      	add	r3, r2
 800be9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	69fa      	ldr	r2, [r7, #28]
 800bea2:	0151      	lsls	r1, r2, #5
 800bea4:	6a3a      	ldr	r2, [r7, #32]
 800bea6:	440a      	add	r2, r1
 800bea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800beac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800beb0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	015a      	lsls	r2, r3, #5
 800beb6:	6a3b      	ldr	r3, [r7, #32]
 800beb8:	4413      	add	r3, r2
 800beba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bebe:	681a      	ldr	r2, [r3, #0]
 800bec0:	7e7b      	ldrb	r3, [r7, #25]
 800bec2:	075b      	lsls	r3, r3, #29
 800bec4:	69f9      	ldr	r1, [r7, #28]
 800bec6:	0148      	lsls	r0, r1, #5
 800bec8:	6a39      	ldr	r1, [r7, #32]
 800beca:	4401      	add	r1, r0
 800becc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800bed0:	4313      	orrs	r3, r2
 800bed2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	015a      	lsls	r2, r3, #5
 800bed8:	6a3b      	ldr	r3, [r7, #32]
 800beda:	4413      	add	r3, r2
 800bedc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800beea:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	78db      	ldrb	r3, [r3, #3]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d004      	beq.n	800befe <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800befa:	613b      	str	r3, [r7, #16]
 800befc:	e003      	b.n	800bf06 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bf04:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf0c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	015a      	lsls	r2, r3, #5
 800bf12:	6a3b      	ldr	r3, [r7, #32]
 800bf14:	4413      	add	r3, r2
 800bf16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800bf20:	79fb      	ldrb	r3, [r7, #7]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d001      	beq.n	800bf2a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800bf26:	2300      	movs	r3, #0
 800bf28:	e04e      	b.n	800bfc8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	78db      	ldrb	r3, [r3, #3]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d149      	bne.n	800bfc6 <USB_HC_StartXfer+0x276>
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	695b      	ldr	r3, [r3, #20]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d045      	beq.n	800bfc6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	79db      	ldrb	r3, [r3, #7]
 800bf3e:	2b03      	cmp	r3, #3
 800bf40:	d830      	bhi.n	800bfa4 <USB_HC_StartXfer+0x254>
 800bf42:	a201      	add	r2, pc, #4	; (adr r2, 800bf48 <USB_HC_StartXfer+0x1f8>)
 800bf44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf48:	0800bf59 	.word	0x0800bf59
 800bf4c:	0800bf7d 	.word	0x0800bf7d
 800bf50:	0800bf59 	.word	0x0800bf59
 800bf54:	0800bf7d 	.word	0x0800bf7d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	695b      	ldr	r3, [r3, #20]
 800bf5c:	3303      	adds	r3, #3
 800bf5e:	089b      	lsrs	r3, r3, #2
 800bf60:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800bf62:	8afa      	ldrh	r2, [r7, #22]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf68:	b29b      	uxth	r3, r3
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d91c      	bls.n	800bfa8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	699b      	ldr	r3, [r3, #24]
 800bf72:	f043 0220 	orr.w	r2, r3, #32
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	619a      	str	r2, [r3, #24]
        }
        break;
 800bf7a:	e015      	b.n	800bfa8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	695b      	ldr	r3, [r3, #20]
 800bf80:	3303      	adds	r3, #3
 800bf82:	089b      	lsrs	r3, r3, #2
 800bf84:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800bf86:	8afa      	ldrh	r2, [r7, #22]
 800bf88:	6a3b      	ldr	r3, [r7, #32]
 800bf8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf8e:	691b      	ldr	r3, [r3, #16]
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d90a      	bls.n	800bfac <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	699b      	ldr	r3, [r3, #24]
 800bf9a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	619a      	str	r2, [r3, #24]
        }
        break;
 800bfa2:	e003      	b.n	800bfac <USB_HC_StartXfer+0x25c>

      default:
        break;
 800bfa4:	bf00      	nop
 800bfa6:	e002      	b.n	800bfae <USB_HC_StartXfer+0x25e>
        break;
 800bfa8:	bf00      	nop
 800bfaa:	e000      	b.n	800bfae <USB_HC_StartXfer+0x25e>
        break;
 800bfac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	68d9      	ldr	r1, [r3, #12]
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	785a      	ldrb	r2, [r3, #1]
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	695b      	ldr	r3, [r3, #20]
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	9000      	str	r0, [sp, #0]
 800bfc0:	68f8      	ldr	r0, [r7, #12]
 800bfc2:	f7ff fb5b 	bl	800b67c <USB_WritePacket>
  }

  return HAL_OK;
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3728      	adds	r7, #40	; 0x28
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	1ff80000 	.word	0x1ff80000

0800bfd4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bfe6:	695b      	ldr	r3, [r3, #20]
 800bfe8:	b29b      	uxth	r3, r3
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3714      	adds	r7, #20
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bc80      	pop	{r7}
 800bff2:	4770      	bx	lr

0800bff4 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b089      	sub	sp, #36	; 0x24
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	460b      	mov	r3, r1
 800bffe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800c004:	78fb      	ldrb	r3, [r7, #3]
 800c006:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800c008:	2300      	movs	r3, #0
 800c00a:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	015a      	lsls	r2, r3, #5
 800c010:	69bb      	ldr	r3, [r7, #24]
 800c012:	4413      	add	r3, r2
 800c014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	0c9b      	lsrs	r3, r3, #18
 800c01c:	f003 0303 	and.w	r3, r3, #3
 800c020:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	015a      	lsls	r2, r3, #5
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	4413      	add	r3, r2
 800c02a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	0fdb      	lsrs	r3, r3, #31
 800c032:	f003 0301 	and.w	r3, r3, #1
 800c036:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	f003 0320 	and.w	r3, r3, #32
 800c040:	2b20      	cmp	r3, #32
 800c042:	d104      	bne.n	800c04e <USB_HC_Halt+0x5a>
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d101      	bne.n	800c04e <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800c04a:	2300      	movs	r3, #0
 800c04c:	e0e8      	b.n	800c220 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d002      	beq.n	800c05a <USB_HC_Halt+0x66>
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	2b02      	cmp	r3, #2
 800c058:	d173      	bne.n	800c142 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	015a      	lsls	r2, r3, #5
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	4413      	add	r3, r2
 800c062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	697a      	ldr	r2, [r7, #20]
 800c06a:	0151      	lsls	r1, r2, #5
 800c06c:	69ba      	ldr	r2, [r7, #24]
 800c06e:	440a      	add	r2, r1
 800c070:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c074:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c078:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	689b      	ldr	r3, [r3, #8]
 800c07e:	f003 0320 	and.w	r3, r3, #32
 800c082:	2b00      	cmp	r3, #0
 800c084:	f040 80cb 	bne.w	800c21e <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c08c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c090:	2b00      	cmp	r3, #0
 800c092:	d143      	bne.n	800c11c <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	015a      	lsls	r2, r3, #5
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	4413      	add	r3, r2
 800c09c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	697a      	ldr	r2, [r7, #20]
 800c0a4:	0151      	lsls	r1, r2, #5
 800c0a6:	69ba      	ldr	r2, [r7, #24]
 800c0a8:	440a      	add	r2, r1
 800c0aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0b2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	015a      	lsls	r2, r3, #5
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	4413      	add	r3, r2
 800c0bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	697a      	ldr	r2, [r7, #20]
 800c0c4:	0151      	lsls	r1, r2, #5
 800c0c6:	69ba      	ldr	r2, [r7, #24]
 800c0c8:	440a      	add	r2, r1
 800c0ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c0d2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	015a      	lsls	r2, r3, #5
 800c0d8:	69bb      	ldr	r3, [r7, #24]
 800c0da:	4413      	add	r3, r2
 800c0dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	697a      	ldr	r2, [r7, #20]
 800c0e4:	0151      	lsls	r1, r2, #5
 800c0e6:	69ba      	ldr	r2, [r7, #24]
 800c0e8:	440a      	add	r2, r1
 800c0ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c0f2:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	61fb      	str	r3, [r7, #28]
 800c0fa:	69fb      	ldr	r3, [r7, #28]
 800c0fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c100:	d81d      	bhi.n	800c13e <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	015a      	lsls	r2, r3, #5
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	4413      	add	r3, r2
 800c10a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c114:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c118:	d0ec      	beq.n	800c0f4 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c11a:	e080      	b.n	800c21e <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	015a      	lsls	r2, r3, #5
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	4413      	add	r3, r2
 800c124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	697a      	ldr	r2, [r7, #20]
 800c12c:	0151      	lsls	r1, r2, #5
 800c12e:	69ba      	ldr	r2, [r7, #24]
 800c130:	440a      	add	r2, r1
 800c132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c136:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c13a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c13c:	e06f      	b.n	800c21e <USB_HC_Halt+0x22a>
            break;
 800c13e:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c140:	e06d      	b.n	800c21e <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	015a      	lsls	r2, r3, #5
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	4413      	add	r3, r2
 800c14a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	697a      	ldr	r2, [r7, #20]
 800c152:	0151      	lsls	r1, r2, #5
 800c154:	69ba      	ldr	r2, [r7, #24]
 800c156:	440a      	add	r2, r1
 800c158:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c15c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c160:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c162:	69bb      	ldr	r3, [r7, #24]
 800c164:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d143      	bne.n	800c1fa <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	015a      	lsls	r2, r3, #5
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	4413      	add	r3, r2
 800c17a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	697a      	ldr	r2, [r7, #20]
 800c182:	0151      	lsls	r1, r2, #5
 800c184:	69ba      	ldr	r2, [r7, #24]
 800c186:	440a      	add	r2, r1
 800c188:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c18c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c190:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	015a      	lsls	r2, r3, #5
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	4413      	add	r3, r2
 800c19a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	697a      	ldr	r2, [r7, #20]
 800c1a2:	0151      	lsls	r1, r2, #5
 800c1a4:	69ba      	ldr	r2, [r7, #24]
 800c1a6:	440a      	add	r2, r1
 800c1a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c1ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c1b0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	015a      	lsls	r2, r3, #5
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	697a      	ldr	r2, [r7, #20]
 800c1c2:	0151      	lsls	r1, r2, #5
 800c1c4:	69ba      	ldr	r2, [r7, #24]
 800c1c6:	440a      	add	r2, r1
 800c1c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c1cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c1d0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c1d2:	69fb      	ldr	r3, [r7, #28]
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	61fb      	str	r3, [r7, #28]
 800c1d8:	69fb      	ldr	r3, [r7, #28]
 800c1da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c1de:	d81d      	bhi.n	800c21c <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	015a      	lsls	r2, r3, #5
 800c1e4:	69bb      	ldr	r3, [r7, #24]
 800c1e6:	4413      	add	r3, r2
 800c1e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1f6:	d0ec      	beq.n	800c1d2 <USB_HC_Halt+0x1de>
 800c1f8:	e011      	b.n	800c21e <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	015a      	lsls	r2, r3, #5
 800c1fe:	69bb      	ldr	r3, [r7, #24]
 800c200:	4413      	add	r3, r2
 800c202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	697a      	ldr	r2, [r7, #20]
 800c20a:	0151      	lsls	r1, r2, #5
 800c20c:	69ba      	ldr	r2, [r7, #24]
 800c20e:	440a      	add	r2, r1
 800c210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c214:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c218:	6013      	str	r3, [r2, #0]
 800c21a:	e000      	b.n	800c21e <USB_HC_Halt+0x22a>
          break;
 800c21c:	bf00      	nop
    }
  }

  return HAL_OK;
 800c21e:	2300      	movs	r3, #0
}
 800c220:	4618      	mov	r0, r3
 800c222:	3724      	adds	r7, #36	; 0x24
 800c224:	46bd      	mov	sp, r7
 800c226:	bc80      	pop	{r7}
 800c228:	4770      	bx	lr
	...

0800c22c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b087      	sub	sp, #28
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	460b      	mov	r3, r1
 800c236:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c23c:	78fb      	ldrb	r3, [r7, #3]
 800c23e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c240:	2301      	movs	r3, #1
 800c242:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	04da      	lsls	r2, r3, #19
 800c248:	4b14      	ldr	r3, [pc, #80]	; (800c29c <USB_DoPing+0x70>)
 800c24a:	4013      	ands	r3, r2
 800c24c:	693a      	ldr	r2, [r7, #16]
 800c24e:	0151      	lsls	r1, r2, #5
 800c250:	697a      	ldr	r2, [r7, #20]
 800c252:	440a      	add	r2, r1
 800c254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c258:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c25c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	015a      	lsls	r2, r3, #5
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	4413      	add	r3, r2
 800c266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c274:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c27c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	015a      	lsls	r2, r3, #5
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	4413      	add	r3, r2
 800c286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c28a:	461a      	mov	r2, r3
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c290:	2300      	movs	r3, #0
}
 800c292:	4618      	mov	r0, r3
 800c294:	371c      	adds	r7, #28
 800c296:	46bd      	mov	sp, r7
 800c298:	bc80      	pop	{r7}
 800c29a:	4770      	bx	lr
 800c29c:	1ff80000 	.word	0x1ff80000

0800c2a0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b086      	sub	sp, #24
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f7ff f943 	bl	800b53c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800c2b6:	2110      	movs	r1, #16
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f7ff f99b 	bl	800b5f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f7ff f9bc 	bl	800b63c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	613b      	str	r3, [r7, #16]
 800c2c8:	e01f      	b.n	800c30a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	015a      	lsls	r2, r3, #5
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	4413      	add	r3, r2
 800c2d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c2e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c2e8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c2f0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	015a      	lsls	r2, r3, #5
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2fe:	461a      	mov	r2, r3
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	3301      	adds	r3, #1
 800c308:	613b      	str	r3, [r7, #16]
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	2b0f      	cmp	r3, #15
 800c30e:	d9dc      	bls.n	800c2ca <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c310:	2300      	movs	r3, #0
 800c312:	613b      	str	r3, [r7, #16]
 800c314:	e034      	b.n	800c380 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	015a      	lsls	r2, r3, #5
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	4413      	add	r3, r2
 800c31e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c32c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c334:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c33c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	015a      	lsls	r2, r3, #5
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	4413      	add	r3, r2
 800c346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c34a:	461a      	mov	r2, r3
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	3301      	adds	r3, #1
 800c354:	617b      	str	r3, [r7, #20]
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c35c:	d80c      	bhi.n	800c378 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	015a      	lsls	r2, r3, #5
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	4413      	add	r3, r2
 800c366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c370:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c374:	d0ec      	beq.n	800c350 <USB_StopHost+0xb0>
 800c376:	e000      	b.n	800c37a <USB_StopHost+0xda>
        break;
 800c378:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	3301      	adds	r3, #1
 800c37e:	613b      	str	r3, [r7, #16]
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	2b0f      	cmp	r3, #15
 800c384:	d9c7      	bls.n	800c316 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c38c:	461a      	mov	r2, r3
 800c38e:	f04f 33ff 	mov.w	r3, #4294967295
 800c392:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f04f 32ff 	mov.w	r2, #4294967295
 800c39a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c39c:	2300      	movs	r3, #0
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3718      	adds	r7, #24
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
	...

0800c3a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800c3ac:	4904      	ldr	r1, [pc, #16]	; (800c3c0 <MX_FATFS_Init+0x18>)
 800c3ae:	4805      	ldr	r0, [pc, #20]	; (800c3c4 <MX_FATFS_Init+0x1c>)
 800c3b0:	f006 f820 	bl	80123f4 <FATFS_LinkDriver>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	4b03      	ldr	r3, [pc, #12]	; (800c3c8 <MX_FATFS_Init+0x20>)
 800c3ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c3bc:	bf00      	nop
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	2000d928 	.word	0x2000d928
 800c3c4:	0801a4ec 	.word	0x0801a4ec
 800c3c8:	2000dd8c 	.word	0x2000dd8c

0800c3cc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c3d0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bc80      	pop	{r7}
 800c3d8:	4770      	bx	lr

0800c3da <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c3da:	b590      	push	{r4, r7, lr}
 800c3dc:	b089      	sub	sp, #36	; 0x24
 800c3de:	af04      	add	r7, sp, #16
 800c3e0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c3e8:	7919      	ldrb	r1, [r3, #4]
 800c3ea:	2350      	movs	r3, #80	; 0x50
 800c3ec:	2206      	movs	r2, #6
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f001 fd3b 	bl	800de6a <USBH_FindInterface>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800c3f8:	7bfb      	ldrb	r3, [r7, #15]
 800c3fa:	2bff      	cmp	r3, #255	; 0xff
 800c3fc:	d002      	beq.n	800c404 <USBH_MSC_InterfaceInit+0x2a>
 800c3fe:	7bfb      	ldrb	r3, [r7, #15]
 800c400:	2b01      	cmp	r3, #1
 800c402:	d901      	bls.n	800c408 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c404:	2302      	movs	r3, #2
 800c406:	e0ef      	b.n	800c5e8 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800c408:	7bfb      	ldrb	r3, [r7, #15]
 800c40a:	4619      	mov	r1, r3
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f001 fd11 	bl	800de34 <USBH_SelectInterface>
 800c412:	4603      	mov	r3, r0
 800c414:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c416:	7bbb      	ldrb	r3, [r7, #14]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d001      	beq.n	800c420 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800c41c:	2302      	movs	r3, #2
 800c41e:	e0e3      	b.n	800c5e8 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800c426:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c42a:	f009 fbf3 	bl	8015c14 <malloc>
 800c42e:	4603      	mov	r3, r0
 800c430:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c438:	69db      	ldr	r3, [r3, #28]
 800c43a:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d101      	bne.n	800c446 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800c442:	2302      	movs	r3, #2
 800c444:	e0d0      	b.n	800c5e8 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800c446:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c44a:	2100      	movs	r1, #0
 800c44c:	68b8      	ldr	r0, [r7, #8]
 800c44e:	f009 fbff 	bl	8015c50 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c452:	7bfb      	ldrb	r3, [r7, #15]
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	211a      	movs	r1, #26
 800c458:	fb01 f303 	mul.w	r3, r1, r3
 800c45c:	4413      	add	r3, r2
 800c45e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	b25b      	sxtb	r3, r3
 800c466:	2b00      	cmp	r3, #0
 800c468:	da16      	bge.n	800c498 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800c46a:	7bfb      	ldrb	r3, [r7, #15]
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	211a      	movs	r1, #26
 800c470:	fb01 f303 	mul.w	r3, r1, r3
 800c474:	4413      	add	r3, r2
 800c476:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800c47a:	781a      	ldrb	r2, [r3, #0]
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c480:	7bfb      	ldrb	r3, [r7, #15]
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	211a      	movs	r1, #26
 800c486:	fb01 f303 	mul.w	r3, r1, r3
 800c48a:	4413      	add	r3, r2
 800c48c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c490:	881a      	ldrh	r2, [r3, #0]
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	815a      	strh	r2, [r3, #10]
 800c496:	e015      	b.n	800c4c4 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800c498:	7bfb      	ldrb	r3, [r7, #15]
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	211a      	movs	r1, #26
 800c49e:	fb01 f303 	mul.w	r3, r1, r3
 800c4a2:	4413      	add	r3, r2
 800c4a4:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800c4a8:	781a      	ldrb	r2, [r3, #0]
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c4ae:	7bfb      	ldrb	r3, [r7, #15]
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	211a      	movs	r1, #26
 800c4b4:	fb01 f303 	mul.w	r3, r1, r3
 800c4b8:	4413      	add	r3, r2
 800c4ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c4be:	881a      	ldrh	r2, [r3, #0]
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800c4c4:	7bfb      	ldrb	r3, [r7, #15]
 800c4c6:	687a      	ldr	r2, [r7, #4]
 800c4c8:	211a      	movs	r1, #26
 800c4ca:	fb01 f303 	mul.w	r3, r1, r3
 800c4ce:	4413      	add	r3, r2
 800c4d0:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	b25b      	sxtb	r3, r3
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	da16      	bge.n	800c50a <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800c4dc:	7bfb      	ldrb	r3, [r7, #15]
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	211a      	movs	r1, #26
 800c4e2:	fb01 f303 	mul.w	r3, r1, r3
 800c4e6:	4413      	add	r3, r2
 800c4e8:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800c4ec:	781a      	ldrb	r2, [r3, #0]
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c4f2:	7bfb      	ldrb	r3, [r7, #15]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	211a      	movs	r1, #26
 800c4f8:	fb01 f303 	mul.w	r3, r1, r3
 800c4fc:	4413      	add	r3, r2
 800c4fe:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c502:	881a      	ldrh	r2, [r3, #0]
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	815a      	strh	r2, [r3, #10]
 800c508:	e015      	b.n	800c536 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800c50a:	7bfb      	ldrb	r3, [r7, #15]
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	211a      	movs	r1, #26
 800c510:	fb01 f303 	mul.w	r3, r1, r3
 800c514:	4413      	add	r3, r2
 800c516:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800c51a:	781a      	ldrb	r2, [r3, #0]
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c520:	7bfb      	ldrb	r3, [r7, #15]
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	211a      	movs	r1, #26
 800c526:	fb01 f303 	mul.w	r3, r1, r3
 800c52a:	4413      	add	r3, r2
 800c52c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c530:	881a      	ldrh	r2, [r3, #0]
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	2200      	movs	r2, #0
 800c53a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	2200      	movs	r2, #0
 800c540:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	2200      	movs	r2, #0
 800c546:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	799b      	ldrb	r3, [r3, #6]
 800c54c:	4619      	mov	r1, r3
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f002 ff77 	bl	800f442 <USBH_AllocPipe>
 800c554:	4603      	mov	r3, r0
 800c556:	461a      	mov	r2, r3
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	79db      	ldrb	r3, [r3, #7]
 800c560:	4619      	mov	r1, r3
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f002 ff6d 	bl	800f442 <USBH_AllocPipe>
 800c568:	4603      	mov	r3, r0
 800c56a:	461a      	mov	r2, r3
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 fdeb 	bl	800d14c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	7959      	ldrb	r1, [r3, #5]
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	7998      	ldrb	r0, [r3, #6]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c58a:	68ba      	ldr	r2, [r7, #8]
 800c58c:	8912      	ldrh	r2, [r2, #8]
 800c58e:	9202      	str	r2, [sp, #8]
 800c590:	2202      	movs	r2, #2
 800c592:	9201      	str	r2, [sp, #4]
 800c594:	9300      	str	r3, [sp, #0]
 800c596:	4623      	mov	r3, r4
 800c598:	4602      	mov	r2, r0
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f002 ff22 	bl	800f3e4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	7919      	ldrb	r1, [r3, #4]
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	79d8      	ldrb	r0, [r3, #7]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	8952      	ldrh	r2, [r2, #10]
 800c5b8:	9202      	str	r2, [sp, #8]
 800c5ba:	2202      	movs	r2, #2
 800c5bc:	9201      	str	r2, [sp, #4]
 800c5be:	9300      	str	r3, [sp, #0]
 800c5c0:	4623      	mov	r3, r4
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f002 ff0d 	bl	800f3e4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	791b      	ldrb	r3, [r3, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f009 f948 	bl	8015868 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	795b      	ldrb	r3, [r3, #5]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	4619      	mov	r1, r3
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f009 f941 	bl	8015868 <USBH_LL_SetToggle>

  return USBH_OK;
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3714      	adds	r7, #20
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd90      	pop	{r4, r7, pc}

0800c5f0 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c5fe:	69db      	ldr	r3, [r3, #28]
 800c600:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	795b      	ldrb	r3, [r3, #5]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00e      	beq.n	800c628 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	795b      	ldrb	r3, [r3, #5]
 800c60e:	4619      	mov	r1, r3
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f002 ff06 	bl	800f422 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	795b      	ldrb	r3, [r3, #5]
 800c61a:	4619      	mov	r1, r3
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f002 ff30 	bl	800f482 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2200      	movs	r2, #0
 800c626:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	791b      	ldrb	r3, [r3, #4]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d00e      	beq.n	800c64e <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	791b      	ldrb	r3, [r3, #4]
 800c634:	4619      	mov	r1, r3
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f002 fef3 	bl	800f422 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	791b      	ldrb	r3, [r3, #4]
 800c640:	4619      	mov	r1, r3
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f002 ff1d 	bl	800f482 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2200      	movs	r2, #0
 800c64c:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c654:	69db      	ldr	r3, [r3, #28]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d00b      	beq.n	800c672 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c660:	69db      	ldr	r3, [r3, #28]
 800c662:	4618      	mov	r0, r3
 800c664:	f009 fade 	bl	8015c24 <free>
    phost->pActiveClass->pData = 0U;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c66e:	2200      	movs	r2, #0
 800c670:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c672:	2300      	movs	r3, #0
}
 800c674:	4618      	mov	r0, r3
 800c676:	3710      	adds	r7, #16
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b084      	sub	sp, #16
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c68a:	69db      	ldr	r3, [r3, #28]
 800c68c:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c68e:	2301      	movs	r3, #1
 800c690:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	7b9b      	ldrb	r3, [r3, #14]
 800c696:	2b03      	cmp	r3, #3
 800c698:	d042      	beq.n	800c720 <USBH_MSC_ClassRequest+0xa4>
 800c69a:	2b03      	cmp	r3, #3
 800c69c:	dc4c      	bgt.n	800c738 <USBH_MSC_ClassRequest+0xbc>
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d001      	beq.n	800c6a6 <USBH_MSC_ClassRequest+0x2a>
 800c6a2:	2b02      	cmp	r3, #2
 800c6a4:	d148      	bne.n	800c738 <USBH_MSC_ClassRequest+0xbc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f000 fd30 	bl	800d110 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800c6b4:	7bfb      	ldrb	r3, [r7, #15]
 800c6b6:	2b03      	cmp	r3, #3
 800c6b8:	d104      	bne.n	800c6c4 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	601a      	str	r2, [r3, #0]
        status = USBH_OK;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800c6c4:	7bfb      	ldrb	r3, [r7, #15]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d138      	bne.n	800c73c <USBH_MSC_ClassRequest+0xc0>
      {
        MSC_Handle->max_lun = ((MSC_Handle->max_lun & 0xFFU) > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : ((MSC_Handle->max_lun & 0xFFU) + 1U);
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	2b02      	cmp	r3, #2
 800c6d2:	d804      	bhi.n	800c6de <USBH_MSC_ClassRequest+0x62>
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	b2db      	uxtb	r3, r3
 800c6da:	3301      	adds	r3, #1
 800c6dc:	e000      	b.n	800c6e0 <USBH_MSC_ClassRequest+0x64>
 800c6de:	2302      	movs	r3, #2
 800c6e0:	68ba      	ldr	r2, [r7, #8]
 800c6e2:	6013      	str	r3, [r2, #0]
        USBH_UsrLog("Number of supported LUN: %lu", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	73bb      	strb	r3, [r7, #14]
 800c6e8:	e014      	b.n	800c714 <USBH_MSC_ClassRequest+0x98>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800c6ea:	7bbb      	ldrb	r3, [r7, #14]
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	2134      	movs	r1, #52	; 0x34
 800c6f0:	fb01 f303 	mul.w	r3, r1, r3
 800c6f4:	4413      	add	r3, r2
 800c6f6:	3392      	adds	r3, #146	; 0x92
 800c6f8:	2202      	movs	r2, #2
 800c6fa:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800c6fc:	7bbb      	ldrb	r3, [r7, #14]
 800c6fe:	68ba      	ldr	r2, [r7, #8]
 800c700:	2134      	movs	r1, #52	; 0x34
 800c702:	fb01 f303 	mul.w	r3, r1, r3
 800c706:	4413      	add	r3, r2
 800c708:	33c1      	adds	r3, #193	; 0xc1
 800c70a:	2200      	movs	r2, #0
 800c70c:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800c70e:	7bbb      	ldrb	r3, [r7, #14]
 800c710:	3301      	adds	r3, #1
 800c712:	73bb      	strb	r3, [r7, #14]
 800c714:	7bba      	ldrb	r2, [r7, #14]
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d3e5      	bcc.n	800c6ea <USBH_MSC_ClassRequest+0x6e>
        }
      }
      break;
 800c71e:	e00d      	b.n	800c73c <USBH_MSC_ClassRequest+0xc0>

    case MSC_REQ_ERROR :
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800c720:	2100      	movs	r1, #0
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f002 f94f 	bl	800e9c6 <USBH_ClrFeature>
 800c728:	4603      	mov	r3, r0
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d108      	bne.n	800c740 <USBH_MSC_ClassRequest+0xc4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	7bda      	ldrb	r2, [r3, #15]
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	739a      	strb	r2, [r3, #14]
      }
      break;
 800c736:	e003      	b.n	800c740 <USBH_MSC_ClassRequest+0xc4>

    default:
      break;
 800c738:	bf00      	nop
 800c73a:	e002      	b.n	800c742 <USBH_MSC_ClassRequest+0xc6>
      break;
 800c73c:	bf00      	nop
 800c73e:	e000      	b.n	800c742 <USBH_MSC_ClassRequest+0xc6>
      break;
 800c740:	bf00      	nop
  }

  return status;
 800c742:	7bfb      	ldrb	r3, [r7, #15]
}
 800c744:	4618      	mov	r0, r3
 800c746:	3710      	adds	r7, #16
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b086      	sub	sp, #24
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c75a:	69db      	ldr	r3, [r3, #28]
 800c75c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800c75e:	2301      	movs	r3, #1
 800c760:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800c762:	2301      	movs	r3, #1
 800c764:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800c766:	2301      	movs	r3, #1
 800c768:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	7b1b      	ldrb	r3, [r3, #12]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d003      	beq.n	800c77a <USBH_MSC_Process+0x2e>
 800c772:	2b01      	cmp	r3, #1
 800c774:	f000 828d 	beq.w	800cc92 <USBH_MSC_Process+0x546>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800c778:	e28e      	b.n	800cc98 <USBH_MSC_Process+0x54c>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c780:	461a      	mov	r2, r3
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	429a      	cmp	r2, r3
 800c788:	f080 8267 	bcs.w	800cc5a <USBH_MSC_Process+0x50e>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c792:	4619      	mov	r1, r3
 800c794:	693a      	ldr	r2, [r7, #16]
 800c796:	2334      	movs	r3, #52	; 0x34
 800c798:	fb03 f301 	mul.w	r3, r3, r1
 800c79c:	4413      	add	r3, r2
 800c79e:	3391      	adds	r3, #145	; 0x91
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	693a      	ldr	r2, [r7, #16]
 800c7ae:	2334      	movs	r3, #52	; 0x34
 800c7b0:	fb03 f301 	mul.w	r3, r3, r1
 800c7b4:	4413      	add	r3, r2
 800c7b6:	3390      	adds	r3, #144	; 0x90
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	2b08      	cmp	r3, #8
 800c7bc:	f200 8235 	bhi.w	800cc2a <USBH_MSC_Process+0x4de>
 800c7c0:	a201      	add	r2, pc, #4	; (adr r2, 800c7c8 <USBH_MSC_Process+0x7c>)
 800c7c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7c6:	bf00      	nop
 800c7c8:	0800c7ed 	.word	0x0800c7ed
 800c7cc:	0800cc2b 	.word	0x0800cc2b
 800c7d0:	0800c8b5 	.word	0x0800c8b5
 800c7d4:	0800ca39 	.word	0x0800ca39
 800c7d8:	0800c813 	.word	0x0800c813
 800c7dc:	0800cb05 	.word	0x0800cb05
 800c7e0:	0800cc2b 	.word	0x0800cc2b
 800c7e4:	0800cc2b 	.word	0x0800cc2b
 800c7e8:	0800cc19 	.word	0x0800cc19
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	693a      	ldr	r2, [r7, #16]
 800c7f6:	2334      	movs	r3, #52	; 0x34
 800c7f8:	fb03 f301 	mul.w	r3, r3, r1
 800c7fc:	4413      	add	r3, r2
 800c7fe:	3390      	adds	r3, #144	; 0x90
 800c800:	2204      	movs	r2, #4
 800c802:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800c810:	e214      	b.n	800cc3c <USBH_MSC_Process+0x4f0>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c818:	b2d9      	uxtb	r1, r3
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c820:	461a      	mov	r2, r3
 800c822:	2334      	movs	r3, #52	; 0x34
 800c824:	fb03 f302 	mul.w	r3, r3, r2
 800c828:	3398      	adds	r3, #152	; 0x98
 800c82a:	693a      	ldr	r2, [r7, #16]
 800c82c:	4413      	add	r3, r2
 800c82e:	3307      	adds	r3, #7
 800c830:	461a      	mov	r2, r3
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f001 f834 	bl	800d8a0 <USBH_MSC_SCSI_Inquiry>
 800c838:	4603      	mov	r3, r0
 800c83a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800c83c:	7bfb      	ldrb	r3, [r7, #15]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d10b      	bne.n	800c85a <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c848:	4619      	mov	r1, r3
 800c84a:	693a      	ldr	r2, [r7, #16]
 800c84c:	2334      	movs	r3, #52	; 0x34
 800c84e:	fb03 f301 	mul.w	r3, r3, r1
 800c852:	4413      	add	r3, r2
 800c854:	3390      	adds	r3, #144	; 0x90
 800c856:	2202      	movs	r2, #2
 800c858:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800c85a:	7bfb      	ldrb	r3, [r7, #15]
 800c85c:	2b02      	cmp	r3, #2
 800c85e:	d10c      	bne.n	800c87a <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c866:	4619      	mov	r1, r3
 800c868:	693a      	ldr	r2, [r7, #16]
 800c86a:	2334      	movs	r3, #52	; 0x34
 800c86c:	fb03 f301 	mul.w	r3, r3, r1
 800c870:	4413      	add	r3, r2
 800c872:	3390      	adds	r3, #144	; 0x90
 800c874:	2205      	movs	r2, #5
 800c876:	701a      	strb	r2, [r3, #0]
            break;
 800c878:	e1d9      	b.n	800cc2e <USBH_MSC_Process+0x4e2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c87a:	7bfb      	ldrb	r3, [r7, #15]
 800c87c:	2b04      	cmp	r3, #4
 800c87e:	f040 81d6 	bne.w	800cc2e <USBH_MSC_Process+0x4e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c888:	4619      	mov	r1, r3
 800c88a:	693a      	ldr	r2, [r7, #16]
 800c88c:	2334      	movs	r3, #52	; 0x34
 800c88e:	fb03 f301 	mul.w	r3, r3, r1
 800c892:	4413      	add	r3, r2
 800c894:	3390      	adds	r3, #144	; 0x90
 800c896:	2201      	movs	r2, #1
 800c898:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	693a      	ldr	r2, [r7, #16]
 800c8a4:	2334      	movs	r3, #52	; 0x34
 800c8a6:	fb03 f301 	mul.w	r3, r3, r1
 800c8aa:	4413      	add	r3, r2
 800c8ac:	3391      	adds	r3, #145	; 0x91
 800c8ae:	2202      	movs	r2, #2
 800c8b0:	701a      	strb	r2, [r3, #0]
            break;
 800c8b2:	e1bc      	b.n	800cc2e <USBH_MSC_Process+0x4e2>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	4619      	mov	r1, r3
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 ff30 	bl	800d724 <USBH_MSC_SCSI_TestUnitReady>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800c8c8:	7bbb      	ldrb	r3, [r7, #14]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d149      	bne.n	800c962 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	693a      	ldr	r2, [r7, #16]
 800c8d8:	2334      	movs	r3, #52	; 0x34
 800c8da:	fb03 f301 	mul.w	r3, r3, r1
 800c8de:	4413      	add	r3, r2
 800c8e0:	3392      	adds	r3, #146	; 0x92
 800c8e2:	781b      	ldrb	r3, [r3, #0]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d00c      	beq.n	800c902 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	693a      	ldr	r2, [r7, #16]
 800c8f2:	2334      	movs	r3, #52	; 0x34
 800c8f4:	fb03 f301 	mul.w	r3, r3, r1
 800c8f8:	4413      	add	r3, r2
 800c8fa:	33c1      	adds	r3, #193	; 0xc1
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	701a      	strb	r2, [r3, #0]
 800c900:	e00b      	b.n	800c91a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c908:	4619      	mov	r1, r3
 800c90a:	693a      	ldr	r2, [r7, #16]
 800c90c:	2334      	movs	r3, #52	; 0x34
 800c90e:	fb03 f301 	mul.w	r3, r3, r1
 800c912:	4413      	add	r3, r2
 800c914:	33c1      	adds	r3, #193	; 0xc1
 800c916:	2200      	movs	r2, #0
 800c918:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c920:	4619      	mov	r1, r3
 800c922:	693a      	ldr	r2, [r7, #16]
 800c924:	2334      	movs	r3, #52	; 0x34
 800c926:	fb03 f301 	mul.w	r3, r3, r1
 800c92a:	4413      	add	r3, r2
 800c92c:	3390      	adds	r3, #144	; 0x90
 800c92e:	2203      	movs	r2, #3
 800c930:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c938:	4619      	mov	r1, r3
 800c93a:	693a      	ldr	r2, [r7, #16]
 800c93c:	2334      	movs	r3, #52	; 0x34
 800c93e:	fb03 f301 	mul.w	r3, r3, r1
 800c942:	4413      	add	r3, r2
 800c944:	3391      	adds	r3, #145	; 0x91
 800c946:	2200      	movs	r2, #0
 800c948:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c950:	4619      	mov	r1, r3
 800c952:	693a      	ldr	r2, [r7, #16]
 800c954:	2334      	movs	r3, #52	; 0x34
 800c956:	fb03 f301 	mul.w	r3, r3, r1
 800c95a:	4413      	add	r3, r2
 800c95c:	3392      	adds	r3, #146	; 0x92
 800c95e:	2200      	movs	r2, #0
 800c960:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800c962:	7bbb      	ldrb	r3, [r7, #14]
 800c964:	2b02      	cmp	r3, #2
 800c966:	d14a      	bne.n	800c9fe <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c96e:	4619      	mov	r1, r3
 800c970:	693a      	ldr	r2, [r7, #16]
 800c972:	2334      	movs	r3, #52	; 0x34
 800c974:	fb03 f301 	mul.w	r3, r3, r1
 800c978:	4413      	add	r3, r2
 800c97a:	3392      	adds	r3, #146	; 0x92
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	2b02      	cmp	r3, #2
 800c980:	d00c      	beq.n	800c99c <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c988:	4619      	mov	r1, r3
 800c98a:	693a      	ldr	r2, [r7, #16]
 800c98c:	2334      	movs	r3, #52	; 0x34
 800c98e:	fb03 f301 	mul.w	r3, r3, r1
 800c992:	4413      	add	r3, r2
 800c994:	33c1      	adds	r3, #193	; 0xc1
 800c996:	2201      	movs	r2, #1
 800c998:	701a      	strb	r2, [r3, #0]
 800c99a:	e00b      	b.n	800c9b4 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	693a      	ldr	r2, [r7, #16]
 800c9a6:	2334      	movs	r3, #52	; 0x34
 800c9a8:	fb03 f301 	mul.w	r3, r3, r1
 800c9ac:	4413      	add	r3, r2
 800c9ae:	33c1      	adds	r3, #193	; 0xc1
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	693a      	ldr	r2, [r7, #16]
 800c9be:	2334      	movs	r3, #52	; 0x34
 800c9c0:	fb03 f301 	mul.w	r3, r3, r1
 800c9c4:	4413      	add	r3, r2
 800c9c6:	3390      	adds	r3, #144	; 0x90
 800c9c8:	2205      	movs	r2, #5
 800c9ca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	693a      	ldr	r2, [r7, #16]
 800c9d6:	2334      	movs	r3, #52	; 0x34
 800c9d8:	fb03 f301 	mul.w	r3, r3, r1
 800c9dc:	4413      	add	r3, r2
 800c9de:	3391      	adds	r3, #145	; 0x91
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	693a      	ldr	r2, [r7, #16]
 800c9ee:	2334      	movs	r3, #52	; 0x34
 800c9f0:	fb03 f301 	mul.w	r3, r3, r1
 800c9f4:	4413      	add	r3, r2
 800c9f6:	3392      	adds	r3, #146	; 0x92
 800c9f8:	2202      	movs	r2, #2
 800c9fa:	701a      	strb	r2, [r3, #0]
            break;
 800c9fc:	e119      	b.n	800cc32 <USBH_MSC_Process+0x4e6>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800c9fe:	7bbb      	ldrb	r3, [r7, #14]
 800ca00:	2b04      	cmp	r3, #4
 800ca02:	f040 8116 	bne.w	800cc32 <USBH_MSC_Process+0x4e6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	693a      	ldr	r2, [r7, #16]
 800ca10:	2334      	movs	r3, #52	; 0x34
 800ca12:	fb03 f301 	mul.w	r3, r3, r1
 800ca16:	4413      	add	r3, r2
 800ca18:	3390      	adds	r3, #144	; 0x90
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ca24:	4619      	mov	r1, r3
 800ca26:	693a      	ldr	r2, [r7, #16]
 800ca28:	2334      	movs	r3, #52	; 0x34
 800ca2a:	fb03 f301 	mul.w	r3, r3, r1
 800ca2e:	4413      	add	r3, r2
 800ca30:	3391      	adds	r3, #145	; 0x91
 800ca32:	2202      	movs	r2, #2
 800ca34:	701a      	strb	r2, [r3, #0]
            break;
 800ca36:	e0fc      	b.n	800cc32 <USBH_MSC_Process+0x4e6>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ca3e:	b2d9      	uxtb	r1, r3
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ca46:	461a      	mov	r2, r3
 800ca48:	2334      	movs	r3, #52	; 0x34
 800ca4a:	fb03 f302 	mul.w	r3, r3, r2
 800ca4e:	3390      	adds	r3, #144	; 0x90
 800ca50:	693a      	ldr	r2, [r7, #16]
 800ca52:	4413      	add	r3, r2
 800ca54:	3304      	adds	r3, #4
 800ca56:	461a      	mov	r2, r3
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f000 fea6 	bl	800d7aa <USBH_MSC_SCSI_ReadCapacity>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800ca62:	7bfb      	ldrb	r3, [r7, #15]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d120      	bne.n	800caaa <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ca6e:	4619      	mov	r1, r3
 800ca70:	693a      	ldr	r2, [r7, #16]
 800ca72:	2334      	movs	r3, #52	; 0x34
 800ca74:	fb03 f301 	mul.w	r3, r3, r1
 800ca78:	4413      	add	r3, r2
 800ca7a:	3390      	adds	r3, #144	; 0x90
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ca86:	4619      	mov	r1, r3
 800ca88:	693a      	ldr	r2, [r7, #16]
 800ca8a:	2334      	movs	r3, #52	; 0x34
 800ca8c:	fb03 f301 	mul.w	r3, r3, r1
 800ca90:	4413      	add	r3, r2
 800ca92:	3391      	adds	r3, #145	; 0x91
 800ca94:	2200      	movs	r2, #0
 800ca96:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ca9e:	3301      	adds	r3, #1
 800caa0:	b29a      	uxth	r2, r3
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800caa8:	e0c5      	b.n	800cc36 <USBH_MSC_Process+0x4ea>
            else if (scsi_status == USBH_FAIL)
 800caaa:	7bfb      	ldrb	r3, [r7, #15]
 800caac:	2b02      	cmp	r3, #2
 800caae:	d10c      	bne.n	800caca <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cab6:	4619      	mov	r1, r3
 800cab8:	693a      	ldr	r2, [r7, #16]
 800caba:	2334      	movs	r3, #52	; 0x34
 800cabc:	fb03 f301 	mul.w	r3, r3, r1
 800cac0:	4413      	add	r3, r2
 800cac2:	3390      	adds	r3, #144	; 0x90
 800cac4:	2205      	movs	r2, #5
 800cac6:	701a      	strb	r2, [r3, #0]
            break;
 800cac8:	e0b5      	b.n	800cc36 <USBH_MSC_Process+0x4ea>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800caca:	7bfb      	ldrb	r3, [r7, #15]
 800cacc:	2b04      	cmp	r3, #4
 800cace:	f040 80b2 	bne.w	800cc36 <USBH_MSC_Process+0x4ea>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cad8:	4619      	mov	r1, r3
 800cada:	693a      	ldr	r2, [r7, #16]
 800cadc:	2334      	movs	r3, #52	; 0x34
 800cade:	fb03 f301 	mul.w	r3, r3, r1
 800cae2:	4413      	add	r3, r2
 800cae4:	3390      	adds	r3, #144	; 0x90
 800cae6:	2201      	movs	r2, #1
 800cae8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800caf0:	4619      	mov	r1, r3
 800caf2:	693a      	ldr	r2, [r7, #16]
 800caf4:	2334      	movs	r3, #52	; 0x34
 800caf6:	fb03 f301 	mul.w	r3, r3, r1
 800cafa:	4413      	add	r3, r2
 800cafc:	3391      	adds	r3, #145	; 0x91
 800cafe:	2202      	movs	r2, #2
 800cb00:	701a      	strb	r2, [r3, #0]
            break;
 800cb02:	e098      	b.n	800cc36 <USBH_MSC_Process+0x4ea>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cb0a:	b2d9      	uxtb	r1, r3
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cb12:	461a      	mov	r2, r3
 800cb14:	2334      	movs	r3, #52	; 0x34
 800cb16:	fb03 f302 	mul.w	r3, r3, r2
 800cb1a:	3398      	adds	r3, #152	; 0x98
 800cb1c:	693a      	ldr	r2, [r7, #16]
 800cb1e:	4413      	add	r3, r2
 800cb20:	3304      	adds	r3, #4
 800cb22:	461a      	mov	r2, r3
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f000 ff60 	bl	800d9ea <USBH_MSC_SCSI_RequestSense>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800cb2e:	7bfb      	ldrb	r3, [r7, #15]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d145      	bne.n	800cbc0 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	693a      	ldr	r2, [r7, #16]
 800cb3e:	2334      	movs	r3, #52	; 0x34
 800cb40:	fb03 f301 	mul.w	r3, r3, r1
 800cb44:	4413      	add	r3, r2
 800cb46:	339c      	adds	r3, #156	; 0x9c
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	2b06      	cmp	r3, #6
 800cb4c:	d00c      	beq.n	800cb68 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cb54:	4619      	mov	r1, r3
 800cb56:	693a      	ldr	r2, [r7, #16]
 800cb58:	2334      	movs	r3, #52	; 0x34
 800cb5a:	fb03 f301 	mul.w	r3, r3, r1
 800cb5e:	4413      	add	r3, r2
 800cb60:	339c      	adds	r3, #156	; 0x9c
 800cb62:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800cb64:	2b02      	cmp	r3, #2
 800cb66:	d117      	bne.n	800cb98 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800cb74:	1ad3      	subs	r3, r2, r3
 800cb76:	f242 720f 	movw	r2, #9999	; 0x270f
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d80c      	bhi.n	800cb98 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cb84:	4619      	mov	r1, r3
 800cb86:	693a      	ldr	r2, [r7, #16]
 800cb88:	2334      	movs	r3, #52	; 0x34
 800cb8a:	fb03 f301 	mul.w	r3, r3, r1
 800cb8e:	4413      	add	r3, r2
 800cb90:	3390      	adds	r3, #144	; 0x90
 800cb92:	2202      	movs	r2, #2
 800cb94:	701a      	strb	r2, [r3, #0]
                  break;
 800cb96:	e051      	b.n	800cc3c <USBH_MSC_Process+0x4f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cb9e:	4619      	mov	r1, r3
 800cba0:	693a      	ldr	r2, [r7, #16]
 800cba2:	2334      	movs	r3, #52	; 0x34
 800cba4:	fb03 f301 	mul.w	r3, r3, r1
 800cba8:	4413      	add	r3, r2
 800cbaa:	3390      	adds	r3, #144	; 0x90
 800cbac:	2201      	movs	r2, #1
 800cbae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	b29a      	uxth	r2, r3
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800cbc0:	7bfb      	ldrb	r3, [r7, #15]
 800cbc2:	2b02      	cmp	r3, #2
 800cbc4:	d10c      	bne.n	800cbe0 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cbcc:	4619      	mov	r1, r3
 800cbce:	693a      	ldr	r2, [r7, #16]
 800cbd0:	2334      	movs	r3, #52	; 0x34
 800cbd2:	fb03 f301 	mul.w	r3, r3, r1
 800cbd6:	4413      	add	r3, r2
 800cbd8:	3390      	adds	r3, #144	; 0x90
 800cbda:	2208      	movs	r2, #8
 800cbdc:	701a      	strb	r2, [r3, #0]
            break;
 800cbde:	e02c      	b.n	800cc3a <USBH_MSC_Process+0x4ee>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800cbe0:	7bfb      	ldrb	r3, [r7, #15]
 800cbe2:	2b04      	cmp	r3, #4
 800cbe4:	d129      	bne.n	800cc3a <USBH_MSC_Process+0x4ee>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cbec:	4619      	mov	r1, r3
 800cbee:	693a      	ldr	r2, [r7, #16]
 800cbf0:	2334      	movs	r3, #52	; 0x34
 800cbf2:	fb03 f301 	mul.w	r3, r3, r1
 800cbf6:	4413      	add	r3, r2
 800cbf8:	3390      	adds	r3, #144	; 0x90
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cc04:	4619      	mov	r1, r3
 800cc06:	693a      	ldr	r2, [r7, #16]
 800cc08:	2334      	movs	r3, #52	; 0x34
 800cc0a:	fb03 f301 	mul.w	r3, r3, r1
 800cc0e:	4413      	add	r3, r2
 800cc10:	3391      	adds	r3, #145	; 0x91
 800cc12:	2202      	movs	r2, #2
 800cc14:	701a      	strb	r2, [r3, #0]
            break;
 800cc16:	e010      	b.n	800cc3a <USBH_MSC_Process+0x4ee>
            MSC_Handle->current_lun++;
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cc1e:	3301      	adds	r3, #1
 800cc20:	b29a      	uxth	r2, r3
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800cc28:	e008      	b.n	800cc3c <USBH_MSC_Process+0x4f0>
            break;
 800cc2a:	bf00      	nop
 800cc2c:	e006      	b.n	800cc3c <USBH_MSC_Process+0x4f0>
            break;
 800cc2e:	bf00      	nop
 800cc30:	e004      	b.n	800cc3c <USBH_MSC_Process+0x4f0>
            break;
 800cc32:	bf00      	nop
 800cc34:	e002      	b.n	800cc3c <USBH_MSC_Process+0x4f0>
            break;
 800cc36:	bf00      	nop
 800cc38:	e000      	b.n	800cc3c <USBH_MSC_Process+0x4f0>
            break;
 800cc3a:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2204      	movs	r2, #4
 800cc40:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800cc50:	2200      	movs	r2, #0
 800cc52:	4619      	mov	r1, r3
 800cc54:	f005 fed8 	bl	8012a08 <osMessagePut>
      break;
 800cc58:	e01e      	b.n	800cc98 <USBH_MSC_Process+0x54c>
        MSC_Handle->current_lun = 0U;
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	2201      	movs	r2, #1
 800cc66:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2204      	movs	r2, #4
 800cc6c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	4619      	mov	r1, r3
 800cc80:	f005 fec2 	bl	8012a08 <osMessagePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800cc8a:	2102      	movs	r1, #2
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	4798      	blx	r3
      break;
 800cc90:	e002      	b.n	800cc98 <USBH_MSC_Process+0x54c>
      error = USBH_OK;
 800cc92:	2300      	movs	r3, #0
 800cc94:	75fb      	strb	r3, [r7, #23]
      break;
 800cc96:	bf00      	nop
  }
  return error;
 800cc98:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3718      	adds	r7, #24
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop

0800cca4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ccac:	2300      	movs	r3, #0
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	370c      	adds	r7, #12
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bc80      	pop	{r7}
 800ccb6:	4770      	bx	lr

0800ccb8 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b088      	sub	sp, #32
 800ccbc:	af02      	add	r7, sp, #8
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ccca:	69db      	ldr	r3, [r3, #28]
 800cccc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800ccce:	2301      	movs	r3, #1
 800ccd0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800ccd6:	78fb      	ldrb	r3, [r7, #3]
 800ccd8:	693a      	ldr	r2, [r7, #16]
 800ccda:	2134      	movs	r1, #52	; 0x34
 800ccdc:	fb01 f303 	mul.w	r3, r1, r3
 800cce0:	4413      	add	r3, r2
 800cce2:	3390      	adds	r3, #144	; 0x90
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	2b07      	cmp	r3, #7
 800cce8:	d04b      	beq.n	800cd82 <USBH_MSC_RdWrProcess+0xca>
 800ccea:	2b07      	cmp	r3, #7
 800ccec:	f300 80d2 	bgt.w	800ce94 <USBH_MSC_RdWrProcess+0x1dc>
 800ccf0:	2b05      	cmp	r3, #5
 800ccf2:	f000 8089 	beq.w	800ce08 <USBH_MSC_RdWrProcess+0x150>
 800ccf6:	2b06      	cmp	r3, #6
 800ccf8:	f040 80cc 	bne.w	800ce94 <USBH_MSC_RdWrProcess+0x1dc>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800ccfc:	78f9      	ldrb	r1, [r7, #3]
 800ccfe:	2300      	movs	r3, #0
 800cd00:	9300      	str	r3, [sp, #0]
 800cd02:	2300      	movs	r3, #0
 800cd04:	2200      	movs	r2, #0
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f000 ff53 	bl	800dbb2 <USBH_MSC_SCSI_Read>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800cd10:	7bfb      	ldrb	r3, [r7, #15]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d10b      	bne.n	800cd2e <USBH_MSC_RdWrProcess+0x76>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800cd16:	78fb      	ldrb	r3, [r7, #3]
 800cd18:	693a      	ldr	r2, [r7, #16]
 800cd1a:	2134      	movs	r1, #52	; 0x34
 800cd1c:	fb01 f303 	mul.w	r3, r1, r3
 800cd20:	4413      	add	r3, r2
 800cd22:	3390      	adds	r3, #144	; 0x90
 800cd24:	2201      	movs	r2, #1
 800cd26:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	75fb      	strb	r3, [r7, #23]
 800cd2c:	e01a      	b.n	800cd64 <USBH_MSC_RdWrProcess+0xac>
      }
      else if (scsi_status == USBH_FAIL)
 800cd2e:	7bfb      	ldrb	r3, [r7, #15]
 800cd30:	2b02      	cmp	r3, #2
 800cd32:	d109      	bne.n	800cd48 <USBH_MSC_RdWrProcess+0x90>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800cd34:	78fb      	ldrb	r3, [r7, #3]
 800cd36:	693a      	ldr	r2, [r7, #16]
 800cd38:	2134      	movs	r1, #52	; 0x34
 800cd3a:	fb01 f303 	mul.w	r3, r1, r3
 800cd3e:	4413      	add	r3, r2
 800cd40:	3390      	adds	r3, #144	; 0x90
 800cd42:	2205      	movs	r2, #5
 800cd44:	701a      	strb	r2, [r3, #0]
 800cd46:	e00d      	b.n	800cd64 <USBH_MSC_RdWrProcess+0xac>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800cd48:	7bfb      	ldrb	r3, [r7, #15]
 800cd4a:	2b04      	cmp	r3, #4
 800cd4c:	d10a      	bne.n	800cd64 <USBH_MSC_RdWrProcess+0xac>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800cd4e:	78fb      	ldrb	r3, [r7, #3]
 800cd50:	693a      	ldr	r2, [r7, #16]
 800cd52:	2134      	movs	r1, #52	; 0x34
 800cd54:	fb01 f303 	mul.w	r3, r1, r3
 800cd58:	4413      	add	r3, r2
 800cd5a:	3390      	adds	r3, #144	; 0x90
 800cd5c:	2208      	movs	r2, #8
 800cd5e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800cd60:	2302      	movs	r3, #2
 800cd62:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2204      	movs	r2, #4
 800cd68:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800cd78:	2200      	movs	r2, #0
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	f005 fe44 	bl	8012a08 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cd80:	e089      	b.n	800ce96 <USBH_MSC_RdWrProcess+0x1de>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800cd82:	78f9      	ldrb	r1, [r7, #3]
 800cd84:	2300      	movs	r3, #0
 800cd86:	9300      	str	r3, [sp, #0]
 800cd88:	2300      	movs	r3, #0
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 fea5 	bl	800dadc <USBH_MSC_SCSI_Write>
 800cd92:	4603      	mov	r3, r0
 800cd94:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800cd96:	7bfb      	ldrb	r3, [r7, #15]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d10b      	bne.n	800cdb4 <USBH_MSC_RdWrProcess+0xfc>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800cd9c:	78fb      	ldrb	r3, [r7, #3]
 800cd9e:	693a      	ldr	r2, [r7, #16]
 800cda0:	2134      	movs	r1, #52	; 0x34
 800cda2:	fb01 f303 	mul.w	r3, r1, r3
 800cda6:	4413      	add	r3, r2
 800cda8:	3390      	adds	r3, #144	; 0x90
 800cdaa:	2201      	movs	r2, #1
 800cdac:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	75fb      	strb	r3, [r7, #23]
 800cdb2:	e01a      	b.n	800cdea <USBH_MSC_RdWrProcess+0x132>
      }
      else if (scsi_status == USBH_FAIL)
 800cdb4:	7bfb      	ldrb	r3, [r7, #15]
 800cdb6:	2b02      	cmp	r3, #2
 800cdb8:	d109      	bne.n	800cdce <USBH_MSC_RdWrProcess+0x116>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800cdba:	78fb      	ldrb	r3, [r7, #3]
 800cdbc:	693a      	ldr	r2, [r7, #16]
 800cdbe:	2134      	movs	r1, #52	; 0x34
 800cdc0:	fb01 f303 	mul.w	r3, r1, r3
 800cdc4:	4413      	add	r3, r2
 800cdc6:	3390      	adds	r3, #144	; 0x90
 800cdc8:	2205      	movs	r2, #5
 800cdca:	701a      	strb	r2, [r3, #0]
 800cdcc:	e00d      	b.n	800cdea <USBH_MSC_RdWrProcess+0x132>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800cdce:	7bfb      	ldrb	r3, [r7, #15]
 800cdd0:	2b04      	cmp	r3, #4
 800cdd2:	d10a      	bne.n	800cdea <USBH_MSC_RdWrProcess+0x132>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800cdd4:	78fb      	ldrb	r3, [r7, #3]
 800cdd6:	693a      	ldr	r2, [r7, #16]
 800cdd8:	2134      	movs	r1, #52	; 0x34
 800cdda:	fb01 f303 	mul.w	r3, r1, r3
 800cdde:	4413      	add	r3, r2
 800cde0:	3390      	adds	r3, #144	; 0x90
 800cde2:	2208      	movs	r2, #8
 800cde4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800cde6:	2302      	movs	r3, #2
 800cde8:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2204      	movs	r2, #4
 800cdee:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800cdfe:	2200      	movs	r2, #0
 800ce00:	4619      	mov	r1, r3
 800ce02:	f005 fe01 	bl	8012a08 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ce06:	e046      	b.n	800ce96 <USBH_MSC_RdWrProcess+0x1de>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800ce08:	78fb      	ldrb	r3, [r7, #3]
 800ce0a:	2234      	movs	r2, #52	; 0x34
 800ce0c:	fb02 f303 	mul.w	r3, r2, r3
 800ce10:	3398      	adds	r3, #152	; 0x98
 800ce12:	693a      	ldr	r2, [r7, #16]
 800ce14:	4413      	add	r3, r2
 800ce16:	1d1a      	adds	r2, r3, #4
 800ce18:	78fb      	ldrb	r3, [r7, #3]
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 fde4 	bl	800d9ea <USBH_MSC_SCSI_RequestSense>
 800ce22:	4603      	mov	r3, r0
 800ce24:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800ce26:	7bfb      	ldrb	r3, [r7, #15]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d113      	bne.n	800ce54 <USBH_MSC_RdWrProcess+0x19c>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800ce2c:	78fb      	ldrb	r3, [r7, #3]
 800ce2e:	693a      	ldr	r2, [r7, #16]
 800ce30:	2134      	movs	r1, #52	; 0x34
 800ce32:	fb01 f303 	mul.w	r3, r1, r3
 800ce36:	4413      	add	r3, r2
 800ce38:	3390      	adds	r3, #144	; 0x90
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800ce3e:	78fb      	ldrb	r3, [r7, #3]
 800ce40:	693a      	ldr	r2, [r7, #16]
 800ce42:	2134      	movs	r1, #52	; 0x34
 800ce44:	fb01 f303 	mul.w	r3, r1, r3
 800ce48:	4413      	add	r3, r2
 800ce4a:	3391      	adds	r3, #145	; 0x91
 800ce4c:	2202      	movs	r2, #2
 800ce4e:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800ce50:	2302      	movs	r3, #2
 800ce52:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800ce54:	7bfb      	ldrb	r3, [r7, #15]
 800ce56:	2b02      	cmp	r3, #2
 800ce58:	d00d      	beq.n	800ce76 <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ce5a:	7bfb      	ldrb	r3, [r7, #15]
 800ce5c:	2b04      	cmp	r3, #4
 800ce5e:	d10a      	bne.n	800ce76 <USBH_MSC_RdWrProcess+0x1be>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800ce60:	78fb      	ldrb	r3, [r7, #3]
 800ce62:	693a      	ldr	r2, [r7, #16]
 800ce64:	2134      	movs	r1, #52	; 0x34
 800ce66:	fb01 f303 	mul.w	r3, r1, r3
 800ce6a:	4413      	add	r3, r2
 800ce6c:	3390      	adds	r3, #144	; 0x90
 800ce6e:	2208      	movs	r2, #8
 800ce70:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800ce72:	2302      	movs	r3, #2
 800ce74:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2204      	movs	r2, #4
 800ce7a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	f005 fdbb 	bl	8012a08 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ce92:	e000      	b.n	800ce96 <USBH_MSC_RdWrProcess+0x1de>

    default:
      break;
 800ce94:	bf00      	nop

  }
  return error;
 800ce96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3718      	adds	r7, #24
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b085      	sub	sp, #20
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	460b      	mov	r3, r1
 800ceaa:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ceb2:	69db      	ldr	r3, [r3, #28]
 800ceb4:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	2b0b      	cmp	r3, #11
 800cebe:	d10c      	bne.n	800ceda <USBH_MSC_UnitIsReady+0x3a>
 800cec0:	78fb      	ldrb	r3, [r7, #3]
 800cec2:	68ba      	ldr	r2, [r7, #8]
 800cec4:	2134      	movs	r1, #52	; 0x34
 800cec6:	fb01 f303 	mul.w	r3, r1, r3
 800ceca:	4413      	add	r3, r2
 800cecc:	3391      	adds	r3, #145	; 0x91
 800cece:	781b      	ldrb	r3, [r3, #0]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d102      	bne.n	800ceda <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800ced4:	2301      	movs	r3, #1
 800ced6:	73fb      	strb	r3, [r7, #15]
 800ced8:	e001      	b.n	800cede <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800ceda:	2300      	movs	r3, #0
 800cedc:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800cede:	7bfb      	ldrb	r3, [r7, #15]
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3714      	adds	r7, #20
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bc80      	pop	{r7}
 800cee8:	4770      	bx	lr

0800ceea <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b086      	sub	sp, #24
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	60f8      	str	r0, [r7, #12]
 800cef2:	460b      	mov	r3, r1
 800cef4:	607a      	str	r2, [r7, #4]
 800cef6:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cefe:	69db      	ldr	r3, [r3, #28]
 800cf00:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	b2db      	uxtb	r3, r3
 800cf08:	2b0b      	cmp	r3, #11
 800cf0a:	d10d      	bne.n	800cf28 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800cf0c:	7afb      	ldrb	r3, [r7, #11]
 800cf0e:	2234      	movs	r2, #52	; 0x34
 800cf10:	fb02 f303 	mul.w	r3, r2, r3
 800cf14:	3390      	adds	r3, #144	; 0x90
 800cf16:	697a      	ldr	r2, [r7, #20]
 800cf18:	4413      	add	r3, r2
 800cf1a:	2234      	movs	r2, #52	; 0x34
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f008 fe88 	bl	8015c34 <memcpy>
    return USBH_OK;
 800cf24:	2300      	movs	r3, #0
 800cf26:	e000      	b.n	800cf2a <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800cf28:	2302      	movs	r3, #2
  }
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3718      	adds	r7, #24
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}

0800cf32 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800cf32:	b580      	push	{r7, lr}
 800cf34:	b088      	sub	sp, #32
 800cf36:	af02      	add	r7, sp, #8
 800cf38:	60f8      	str	r0, [r7, #12]
 800cf3a:	607a      	str	r2, [r7, #4]
 800cf3c:	603b      	str	r3, [r7, #0]
 800cf3e:	460b      	mov	r3, r1
 800cf40:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cf48:	69db      	ldr	r3, [r3, #28]
 800cf4a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d00e      	beq.n	800cf76 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800cf5e:	2b0b      	cmp	r3, #11
 800cf60:	d109      	bne.n	800cf76 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800cf62:	7afb      	ldrb	r3, [r7, #11]
 800cf64:	697a      	ldr	r2, [r7, #20]
 800cf66:	2134      	movs	r1, #52	; 0x34
 800cf68:	fb01 f303 	mul.w	r3, r1, r3
 800cf6c:	4413      	add	r3, r2
 800cf6e:	3390      	adds	r3, #144	; 0x90
 800cf70:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d001      	beq.n	800cf7a <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800cf76:	2302      	movs	r3, #2
 800cf78:	e040      	b.n	800cffc <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	2206      	movs	r2, #6
 800cf7e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800cf80:	7afb      	ldrb	r3, [r7, #11]
 800cf82:	697a      	ldr	r2, [r7, #20]
 800cf84:	2134      	movs	r1, #52	; 0x34
 800cf86:	fb01 f303 	mul.w	r3, r1, r3
 800cf8a:	4413      	add	r3, r2
 800cf8c:	3390      	adds	r3, #144	; 0x90
 800cf8e:	2206      	movs	r2, #6
 800cf90:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800cf92:	7afb      	ldrb	r3, [r7, #11]
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800cf9c:	7af9      	ldrb	r1, [r7, #11]
 800cf9e:	6a3b      	ldr	r3, [r7, #32]
 800cfa0:	9300      	str	r3, [sp, #0]
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	687a      	ldr	r2, [r7, #4]
 800cfa6:	68f8      	ldr	r0, [r7, #12]
 800cfa8:	f000 fe03 	bl	800dbb2 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800cfb2:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800cfb4:	e016      	b.n	800cfe4 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	1ad2      	subs	r2, r2, r3
 800cfc0:	6a3b      	ldr	r3, [r7, #32]
 800cfc2:	f242 7110 	movw	r1, #10000	; 0x2710
 800cfc6:	fb01 f303 	mul.w	r3, r1, r3
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d805      	bhi.n	800cfda <USBH_MSC_Read+0xa8>
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cfd4:	b2db      	uxtb	r3, r3
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d104      	bne.n	800cfe4 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	2201      	movs	r2, #1
 800cfde:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800cfe0:	2302      	movs	r3, #2
 800cfe2:	e00b      	b.n	800cffc <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800cfe4:	7afb      	ldrb	r3, [r7, #11]
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	68f8      	ldr	r0, [r7, #12]
 800cfea:	f7ff fe65 	bl	800ccb8 <USBH_MSC_RdWrProcess>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	d0e0      	beq.n	800cfb6 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	2201      	movs	r2, #1
 800cff8:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800cffa:	2300      	movs	r3, #0
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3718      	adds	r7, #24
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}

0800d004 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b088      	sub	sp, #32
 800d008:	af02      	add	r7, sp, #8
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	607a      	str	r2, [r7, #4]
 800d00e:	603b      	str	r3, [r7, #0]
 800d010:	460b      	mov	r3, r1
 800d012:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d01a:	69db      	ldr	r3, [r3, #28]
 800d01c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d024:	b2db      	uxtb	r3, r3
 800d026:	2b00      	cmp	r3, #0
 800d028:	d00e      	beq.n	800d048 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800d030:	2b0b      	cmp	r3, #11
 800d032:	d109      	bne.n	800d048 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800d034:	7afb      	ldrb	r3, [r7, #11]
 800d036:	697a      	ldr	r2, [r7, #20]
 800d038:	2134      	movs	r1, #52	; 0x34
 800d03a:	fb01 f303 	mul.w	r3, r1, r3
 800d03e:	4413      	add	r3, r2
 800d040:	3390      	adds	r3, #144	; 0x90
 800d042:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800d044:	2b01      	cmp	r3, #1
 800d046:	d001      	beq.n	800d04c <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800d048:	2302      	movs	r3, #2
 800d04a:	e040      	b.n	800d0ce <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	2207      	movs	r2, #7
 800d050:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800d052:	7afb      	ldrb	r3, [r7, #11]
 800d054:	697a      	ldr	r2, [r7, #20]
 800d056:	2134      	movs	r1, #52	; 0x34
 800d058:	fb01 f303 	mul.w	r3, r1, r3
 800d05c:	4413      	add	r3, r2
 800d05e:	3390      	adds	r3, #144	; 0x90
 800d060:	2207      	movs	r2, #7
 800d062:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800d064:	7afb      	ldrb	r3, [r7, #11]
 800d066:	b29a      	uxth	r2, r3
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800d06e:	7af9      	ldrb	r1, [r7, #11]
 800d070:	6a3b      	ldr	r3, [r7, #32]
 800d072:	9300      	str	r3, [sp, #0]
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	68f8      	ldr	r0, [r7, #12]
 800d07a:	f000 fd2f 	bl	800dadc <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800d084:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800d086:	e016      	b.n	800d0b6 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	1ad2      	subs	r2, r2, r3
 800d092:	6a3b      	ldr	r3, [r7, #32]
 800d094:	f242 7110 	movw	r1, #10000	; 0x2710
 800d098:	fb01 f303 	mul.w	r3, r1, r3
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d805      	bhi.n	800d0ac <USBH_MSC_Write+0xa8>
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d0a6:	b2db      	uxtb	r3, r3
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d104      	bne.n	800d0b6 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800d0b2:	2302      	movs	r3, #2
 800d0b4:	e00b      	b.n	800d0ce <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800d0b6:	7afb      	ldrb	r3, [r7, #11]
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	68f8      	ldr	r0, [r7, #12]
 800d0bc:	f7ff fdfc 	bl	800ccb8 <USBH_MSC_RdWrProcess>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d0e0      	beq.n	800d088 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800d0cc:	2300      	movs	r3, #0
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3718      	adds	r7, #24
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b082      	sub	sp, #8
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2221      	movs	r2, #33	; 0x21
 800d0e2:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	22ff      	movs	r2, #255	; 0xff
 800d0e8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	2100      	movs	r1, #0
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f001 fe3b 	bl	800ed7c <USBH_CtlReq>
 800d106:	4603      	mov	r3, r0
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3708      	adds	r7, #8
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	22a1      	movs	r2, #161	; 0xa1
 800d11e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	22fe      	movs	r2, #254	; 0xfe
 800d124:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2200      	movs	r2, #0
 800d12a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2200      	movs	r2, #0
 800d130:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2201      	movs	r2, #1
 800d136:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800d138:	2201      	movs	r2, #1
 800d13a:	6839      	ldr	r1, [r7, #0]
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f001 fe1d 	bl	800ed7c <USBH_CtlReq>
 800d142:	4603      	mov	r3, r0
}
 800d144:	4618      	mov	r0, r3
 800d146:	3708      	adds	r7, #8
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b085      	sub	sp, #20
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d15a:	69db      	ldr	r3, [r3, #28]
 800d15c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	4a09      	ldr	r2, [pc, #36]	; (800d188 <USBH_MSC_BOT_Init+0x3c>)
 800d162:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	4a09      	ldr	r2, [pc, #36]	; (800d18c <USBH_MSC_BOT_Init+0x40>)
 800d168:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2201      	movs	r2, #1
 800d16e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2201      	movs	r2, #1
 800d176:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800d17a:	2300      	movs	r3, #0
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3714      	adds	r7, #20
 800d180:	46bd      	mov	sp, r7
 800d182:	bc80      	pop	{r7}
 800d184:	4770      	bx	lr
 800d186:	bf00      	nop
 800d188:	43425355 	.word	0x43425355
 800d18c:	20304050 	.word	0x20304050

0800d190 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b088      	sub	sp, #32
 800d194:	af02      	add	r7, sp, #8
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	460b      	mov	r3, r1
 800d19a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800d19c:	2301      	movs	r3, #1
 800d19e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d1b2:	69db      	ldr	r3, [r3, #28]
 800d1b4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d1c0:	3b01      	subs	r3, #1
 800d1c2:	2b0a      	cmp	r3, #10
 800d1c4:	f200 822a 	bhi.w	800d61c <USBH_MSC_BOT_Process+0x48c>
 800d1c8:	a201      	add	r2, pc, #4	; (adr r2, 800d1d0 <USBH_MSC_BOT_Process+0x40>)
 800d1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ce:	bf00      	nop
 800d1d0:	0800d1fd 	.word	0x0800d1fd
 800d1d4:	0800d225 	.word	0x0800d225
 800d1d8:	0800d2e3 	.word	0x0800d2e3
 800d1dc:	0800d301 	.word	0x0800d301
 800d1e0:	0800d3bd 	.word	0x0800d3bd
 800d1e4:	0800d3df 	.word	0x0800d3df
 800d1e8:	0800d4cb 	.word	0x0800d4cb
 800d1ec:	0800d4e7 	.word	0x0800d4e7
 800d1f0:	0800d571 	.word	0x0800d571
 800d1f4:	0800d5a1 	.word	0x0800d5a1
 800d1f8:	0800d603 	.word	0x0800d603
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	78fa      	ldrb	r2, [r7, #3]
 800d200:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	2202      	movs	r2, #2
 800d208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	795b      	ldrb	r3, [r3, #5]
 800d216:	2201      	movs	r2, #1
 800d218:	9200      	str	r2, [sp, #0]
 800d21a:	221f      	movs	r2, #31
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f002 f89e 	bl	800f35e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800d222:	e20a      	b.n	800d63a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	795b      	ldrb	r3, [r3, #5]
 800d228:	4619      	mov	r1, r3
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f008 faf2 	bl	8015814 <USBH_LL_GetURBState>
 800d230:	4603      	mov	r3, r0
 800d232:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800d234:	7d3b      	ldrb	r3, [r7, #20]
 800d236:	2b01      	cmp	r3, #1
 800d238:	d126      	bne.n	800d288 <USBH_MSC_BOT_Process+0xf8>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00f      	beq.n	800d262 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d248:	b25b      	sxtb	r3, r3
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	da04      	bge.n	800d258 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	2203      	movs	r2, #3
 800d252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800d256:	e008      	b.n	800d26a <USBH_MSC_BOT_Process+0xda>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	2205      	movs	r2, #5
 800d25c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800d260:	e003      	b.n	800d26a <USBH_MSC_BOT_Process+0xda>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	2207      	movs	r2, #7
 800d266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2202      	movs	r2, #2
 800d26e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d27e:	2200      	movs	r2, #0
 800d280:	4619      	mov	r1, r3
 800d282:	f005 fbc1 	bl	8012a08 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d286:	e1cb      	b.n	800d620 <USBH_MSC_BOT_Process+0x490>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d288:	7d3b      	ldrb	r3, [r7, #20]
 800d28a:	2b02      	cmp	r3, #2
 800d28c:	d112      	bne.n	800d2b4 <USBH_MSC_BOT_Process+0x124>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	2201      	movs	r2, #1
 800d292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2202      	movs	r2, #2
 800d29a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	f005 fbab 	bl	8012a08 <osMessagePut>
      break;
 800d2b2:	e1b5      	b.n	800d620 <USBH_MSC_BOT_Process+0x490>
        if (URB_Status == USBH_URB_STALL)
 800d2b4:	7d3b      	ldrb	r3, [r7, #20]
 800d2b6:	2b05      	cmp	r3, #5
 800d2b8:	f040 81b2 	bne.w	800d620 <USBH_MSC_BOT_Process+0x490>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	220a      	movs	r2, #10
 800d2c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2202      	movs	r2, #2
 800d2c8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d2d8:	2200      	movs	r2, #0
 800d2da:	4619      	mov	r1, r3
 800d2dc:	f005 fb94 	bl	8012a08 <osMessagePut>
      break;
 800d2e0:	e19e      	b.n	800d620 <USBH_MSC_BOT_Process+0x490>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	895a      	ldrh	r2, [r3, #10]
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	791b      	ldrb	r3, [r3, #4]
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f002 f859 	bl	800f3a8 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	2204      	movs	r2, #4
 800d2fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800d2fe:	e19c      	b.n	800d63a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	791b      	ldrb	r3, [r3, #4]
 800d304:	4619      	mov	r1, r3
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f008 fa84 	bl	8015814 <USBH_LL_GetURBState>
 800d30c:	4603      	mov	r3, r0
 800d30e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800d310:	7d3b      	ldrb	r3, [r7, #20]
 800d312:	2b01      	cmp	r3, #1
 800d314:	d13b      	bne.n	800d38e <USBH_MSC_BOT_Process+0x1fe>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d31a:	693a      	ldr	r2, [r7, #16]
 800d31c:	8952      	ldrh	r2, [r2, #10]
 800d31e:	4293      	cmp	r3, r2
 800d320:	d910      	bls.n	800d344 <USBH_MSC_BOT_Process+0x1b4>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d328:	693a      	ldr	r2, [r7, #16]
 800d32a:	8952      	ldrh	r2, [r2, #10]
 800d32c:	441a      	add	r2, r3
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d338:	693a      	ldr	r2, [r7, #16]
 800d33a:	8952      	ldrh	r2, [r2, #10]
 800d33c:	1a9a      	subs	r2, r3, r2
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	65da      	str	r2, [r3, #92]	; 0x5c
 800d342:	e002      	b.n	800d34a <USBH_MSC_BOT_Process+0x1ba>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	2200      	movs	r2, #0
 800d348:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00a      	beq.n	800d368 <USBH_MSC_BOT_Process+0x1d8>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	895a      	ldrh	r2, [r3, #10]
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	791b      	ldrb	r3, [r3, #4]
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f002 f821 	bl	800f3a8 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800d366:	e15d      	b.n	800d624 <USBH_MSC_BOT_Process+0x494>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	2207      	movs	r2, #7
 800d36c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2202      	movs	r2, #2
 800d374:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d384:	2200      	movs	r2, #0
 800d386:	4619      	mov	r1, r3
 800d388:	f005 fb3e 	bl	8012a08 <osMessagePut>
      break;
 800d38c:	e14a      	b.n	800d624 <USBH_MSC_BOT_Process+0x494>
      else if (URB_Status == USBH_URB_STALL)
 800d38e:	7d3b      	ldrb	r3, [r7, #20]
 800d390:	2b05      	cmp	r3, #5
 800d392:	f040 8147 	bne.w	800d624 <USBH_MSC_BOT_Process+0x494>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	2209      	movs	r2, #9
 800d39a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2202      	movs	r2, #2
 800d3a2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	f005 fb27 	bl	8012a08 <osMessagePut>
      break;
 800d3ba:	e133      	b.n	800d624 <USBH_MSC_BOT_Process+0x494>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	891a      	ldrh	r2, [r3, #8]
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	795b      	ldrb	r3, [r3, #5]
 800d3ca:	2001      	movs	r0, #1
 800d3cc:	9000      	str	r0, [sp, #0]
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f001 ffc5 	bl	800f35e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	2206      	movs	r2, #6
 800d3d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d3dc:	e12d      	b.n	800d63a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	795b      	ldrb	r3, [r3, #5]
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f008 fa15 	bl	8015814 <USBH_LL_GetURBState>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800d3ee:	7d3b      	ldrb	r3, [r7, #20]
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d13d      	bne.n	800d470 <USBH_MSC_BOT_Process+0x2e0>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3f8:	693a      	ldr	r2, [r7, #16]
 800d3fa:	8912      	ldrh	r2, [r2, #8]
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d910      	bls.n	800d422 <USBH_MSC_BOT_Process+0x292>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d406:	693a      	ldr	r2, [r7, #16]
 800d408:	8912      	ldrh	r2, [r2, #8]
 800d40a:	441a      	add	r2, r3
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d416:	693a      	ldr	r2, [r7, #16]
 800d418:	8912      	ldrh	r2, [r2, #8]
 800d41a:	1a9a      	subs	r2, r3, r2
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	65da      	str	r2, [r3, #92]	; 0x5c
 800d420:	e002      	b.n	800d428 <USBH_MSC_BOT_Process+0x298>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	2200      	movs	r2, #0
 800d426:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d00c      	beq.n	800d44a <USBH_MSC_BOT_Process+0x2ba>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	891a      	ldrh	r2, [r3, #8]
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	795b      	ldrb	r3, [r3, #5]
 800d43e:	2001      	movs	r0, #1
 800d440:	9000      	str	r0, [sp, #0]
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f001 ff8b 	bl	800f35e <USBH_BulkSendData>
 800d448:	e003      	b.n	800d452 <USBH_MSC_BOT_Process+0x2c2>
                            MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	2207      	movs	r2, #7
 800d44e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2202      	movs	r2, #2
 800d456:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d466:	2200      	movs	r2, #0
 800d468:	4619      	mov	r1, r3
 800d46a:	f005 facd 	bl	8012a08 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 800d46e:	e0db      	b.n	800d628 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d470:	7d3b      	ldrb	r3, [r7, #20]
 800d472:	2b02      	cmp	r3, #2
 800d474:	d112      	bne.n	800d49c <USBH_MSC_BOT_Process+0x30c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	2205      	movs	r2, #5
 800d47a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2202      	movs	r2, #2
 800d482:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d492:	2200      	movs	r2, #0
 800d494:	4619      	mov	r1, r3
 800d496:	f005 fab7 	bl	8012a08 <osMessagePut>
      break;
 800d49a:	e0c5      	b.n	800d628 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_STALL)
 800d49c:	7d3b      	ldrb	r3, [r7, #20]
 800d49e:	2b05      	cmp	r3, #5
 800d4a0:	f040 80c2 	bne.w	800d628 <USBH_MSC_BOT_Process+0x498>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	220a      	movs	r2, #10
 800d4a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2202      	movs	r2, #2
 800d4b0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	f005 faa0 	bl	8012a08 <osMessagePut>
      break;
 800d4c8:	e0ae      	b.n	800d628 <USBH_MSC_BOT_Process+0x498>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	791b      	ldrb	r3, [r3, #4]
 800d4d4:	220d      	movs	r2, #13
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f001 ff66 	bl	800f3a8 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	2208      	movs	r2, #8
 800d4e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d4e4:	e0a9      	b.n	800d63a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	791b      	ldrb	r3, [r3, #4]
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f008 f991 	bl	8015814 <USBH_LL_GetURBState>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800d4f6:	7d3b      	ldrb	r3, [r7, #20]
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	d123      	bne.n	800d544 <USBH_MSC_BOT_Process+0x3b4>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	2201      	movs	r2, #1
 800d500:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	2201      	movs	r2, #1
 800d508:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 f8c5 	bl	800d69c <USBH_MSC_DecodeCSW>
 800d512:	4603      	mov	r3, r0
 800d514:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800d516:	7d7b      	ldrb	r3, [r7, #21]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d102      	bne.n	800d522 <USBH_MSC_BOT_Process+0x392>
        {
          status = USBH_OK;
 800d51c:	2300      	movs	r3, #0
 800d51e:	75fb      	strb	r3, [r7, #23]
 800d520:	e001      	b.n	800d526 <USBH_MSC_BOT_Process+0x396>
        }
        else
        {
          status = USBH_FAIL;
 800d522:	2302      	movs	r3, #2
 800d524:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2202      	movs	r2, #2
 800d52a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d53a:	2200      	movs	r2, #0
 800d53c:	4619      	mov	r1, r3
 800d53e:	f005 fa63 	bl	8012a08 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 800d542:	e073      	b.n	800d62c <USBH_MSC_BOT_Process+0x49c>
      else if (URB_Status == USBH_URB_STALL)
 800d544:	7d3b      	ldrb	r3, [r7, #20]
 800d546:	2b05      	cmp	r3, #5
 800d548:	d170      	bne.n	800d62c <USBH_MSC_BOT_Process+0x49c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	2209      	movs	r2, #9
 800d54e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2202      	movs	r2, #2
 800d556:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800d566:	2200      	movs	r2, #0
 800d568:	4619      	mov	r1, r3
 800d56a:	f005 fa4d 	bl	8012a08 <osMessagePut>
      break;
 800d56e:	e05d      	b.n	800d62c <USBH_MSC_BOT_Process+0x49c>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800d570:	78fb      	ldrb	r3, [r7, #3]
 800d572:	2200      	movs	r2, #0
 800d574:	4619      	mov	r1, r3
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 f864 	bl	800d644 <USBH_MSC_BOT_Abort>
 800d57c:	4603      	mov	r3, r0
 800d57e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800d580:	7dbb      	ldrb	r3, [r7, #22]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d104      	bne.n	800d590 <USBH_MSC_BOT_Process+0x400>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	2207      	movs	r2, #7
 800d58a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800d58e:	e04f      	b.n	800d630 <USBH_MSC_BOT_Process+0x4a0>
      else if (error == USBH_UNRECOVERED_ERROR)
 800d590:	7dbb      	ldrb	r3, [r7, #22]
 800d592:	2b04      	cmp	r3, #4
 800d594:	d14c      	bne.n	800d630 <USBH_MSC_BOT_Process+0x4a0>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	220b      	movs	r2, #11
 800d59a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d59e:	e047      	b.n	800d630 <USBH_MSC_BOT_Process+0x4a0>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800d5a0:	78fb      	ldrb	r3, [r7, #3]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f000 f84c 	bl	800d644 <USBH_MSC_BOT_Abort>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800d5b0:	7dbb      	ldrb	r3, [r7, #22]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d11d      	bne.n	800d5f2 <USBH_MSC_BOT_Process+0x462>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	795b      	ldrb	r3, [r3, #5]
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f008 f982 	bl	80158c6 <USBH_LL_GetToggle>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	7959      	ldrb	r1, [r3, #5]
 800d5ca:	7bfb      	ldrb	r3, [r7, #15]
 800d5cc:	f1c3 0301 	rsb	r3, r3, #1
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f008 f947 	bl	8015868 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	791b      	ldrb	r3, [r3, #4]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f008 f940 	bl	8015868 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	2209      	movs	r2, #9
 800d5ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800d5f0:	e020      	b.n	800d634 <USBH_MSC_BOT_Process+0x4a4>
        if (error == USBH_UNRECOVERED_ERROR)
 800d5f2:	7dbb      	ldrb	r3, [r7, #22]
 800d5f4:	2b04      	cmp	r3, #4
 800d5f6:	d11d      	bne.n	800d634 <USBH_MSC_BOT_Process+0x4a4>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	220b      	movs	r2, #11
 800d5fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d600:	e018      	b.n	800d634 <USBH_MSC_BOT_Process+0x4a4>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f7ff fd67 	bl	800d0d6 <USBH_MSC_BOT_REQ_Reset>
 800d608:	4603      	mov	r3, r0
 800d60a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800d60c:	7dfb      	ldrb	r3, [r7, #23]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d112      	bne.n	800d638 <USBH_MSC_BOT_Process+0x4a8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	2201      	movs	r2, #1
 800d616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800d61a:	e00d      	b.n	800d638 <USBH_MSC_BOT_Process+0x4a8>

    default:
      break;
 800d61c:	bf00      	nop
 800d61e:	e00c      	b.n	800d63a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800d620:	bf00      	nop
 800d622:	e00a      	b.n	800d63a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800d624:	bf00      	nop
 800d626:	e008      	b.n	800d63a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800d628:	bf00      	nop
 800d62a:	e006      	b.n	800d63a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800d62c:	bf00      	nop
 800d62e:	e004      	b.n	800d63a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800d630:	bf00      	nop
 800d632:	e002      	b.n	800d63a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800d634:	bf00      	nop
 800d636:	e000      	b.n	800d63a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800d638:	bf00      	nop
  }
  return status;
 800d63a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3718      	adds	r7, #24
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	460b      	mov	r3, r1
 800d64e:	70fb      	strb	r3, [r7, #3]
 800d650:	4613      	mov	r3, r2
 800d652:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800d654:	2302      	movs	r3, #2
 800d656:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d65e:	69db      	ldr	r3, [r3, #28]
 800d660:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800d662:	78bb      	ldrb	r3, [r7, #2]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d002      	beq.n	800d66e <USBH_MSC_BOT_Abort+0x2a>
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d009      	beq.n	800d680 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800d66c:	e011      	b.n	800d692 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	79db      	ldrb	r3, [r3, #7]
 800d672:	4619      	mov	r1, r3
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f001 f9a6 	bl	800e9c6 <USBH_ClrFeature>
 800d67a:	4603      	mov	r3, r0
 800d67c:	73fb      	strb	r3, [r7, #15]
      break;
 800d67e:	e008      	b.n	800d692 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	799b      	ldrb	r3, [r3, #6]
 800d684:	4619      	mov	r1, r3
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f001 f99d 	bl	800e9c6 <USBH_ClrFeature>
 800d68c:	4603      	mov	r3, r0
 800d68e:	73fb      	strb	r3, [r7, #15]
      break;
 800d690:	bf00      	nop
  }
  return status;
 800d692:	7bfb      	ldrb	r3, [r7, #15]
}
 800d694:	4618      	mov	r0, r3
 800d696:	3710      	adds	r7, #16
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d6aa:	69db      	ldr	r3, [r3, #28]
 800d6ac:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	791b      	ldrb	r3, [r3, #4]
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f008 f819 	bl	80156f0 <USBH_LL_GetLastXferSize>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	2b0d      	cmp	r3, #13
 800d6c2:	d002      	beq.n	800d6ca <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800d6c4:	2302      	movs	r3, #2
 800d6c6:	73fb      	strb	r3, [r7, #15]
 800d6c8:	e024      	b.n	800d714 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d6ce:	4a14      	ldr	r2, [pc, #80]	; (800d720 <USBH_MSC_DecodeCSW+0x84>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d11d      	bne.n	800d710 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d119      	bne.n	800d714 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d102      	bne.n	800d6f0 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	73fb      	strb	r3, [r7, #15]
 800d6ee:	e011      	b.n	800d714 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d102      	bne.n	800d700 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	73fb      	strb	r3, [r7, #15]
 800d6fe:	e009      	b.n	800d714 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d706:	2b02      	cmp	r3, #2
 800d708:	d104      	bne.n	800d714 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800d70a:	2302      	movs	r3, #2
 800d70c:	73fb      	strb	r3, [r7, #15]
 800d70e:	e001      	b.n	800d714 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800d710:	2302      	movs	r3, #2
 800d712:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800d714:	7bfb      	ldrb	r3, [r7, #15]
}
 800d716:	4618      	mov	r0, r3
 800d718:	3710      	adds	r7, #16
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop
 800d720:	53425355 	.word	0x53425355

0800d724 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b084      	sub	sp, #16
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	460b      	mov	r3, r1
 800d72e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800d730:	2302      	movs	r3, #2
 800d732:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d73a:	69db      	ldr	r3, [r3, #28]
 800d73c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d744:	2b01      	cmp	r3, #1
 800d746:	d002      	beq.n	800d74e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800d748:	2b02      	cmp	r3, #2
 800d74a:	d021      	beq.n	800d790 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800d74c:	e028      	b.n	800d7a0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	2200      	movs	r2, #0
 800d752:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	2200      	movs	r2, #0
 800d758:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	220a      	movs	r2, #10
 800d760:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	3363      	adds	r3, #99	; 0x63
 800d768:	2210      	movs	r2, #16
 800d76a:	2100      	movs	r1, #0
 800d76c:	4618      	mov	r0, r3
 800d76e:	f008 fa6f 	bl	8015c50 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	2200      	movs	r2, #0
 800d776:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	2201      	movs	r2, #1
 800d77e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	2202      	movs	r2, #2
 800d786:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800d78a:	2301      	movs	r3, #1
 800d78c:	73fb      	strb	r3, [r7, #15]
      break;
 800d78e:	e007      	b.n	800d7a0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d790:	78fb      	ldrb	r3, [r7, #3]
 800d792:	4619      	mov	r1, r3
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f7ff fcfb 	bl	800d190 <USBH_MSC_BOT_Process>
 800d79a:	4603      	mov	r3, r0
 800d79c:	73fb      	strb	r3, [r7, #15]
      break;
 800d79e:	bf00      	nop
  }

  return error;
 800d7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3710      	adds	r7, #16
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}

0800d7aa <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800d7aa:	b580      	push	{r7, lr}
 800d7ac:	b086      	sub	sp, #24
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	60f8      	str	r0, [r7, #12]
 800d7b2:	460b      	mov	r3, r1
 800d7b4:	607a      	str	r2, [r7, #4]
 800d7b6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d7c2:	69db      	ldr	r3, [r3, #28]
 800d7c4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d002      	beq.n	800d7d6 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800d7d0:	2b02      	cmp	r3, #2
 800d7d2:	d027      	beq.n	800d824 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800d7d4:	e05f      	b.n	800d896 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	2208      	movs	r2, #8
 800d7da:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	2280      	movs	r2, #128	; 0x80
 800d7e0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	220a      	movs	r2, #10
 800d7e8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	3363      	adds	r3, #99	; 0x63
 800d7f0:	2210      	movs	r2, #16
 800d7f2:	2100      	movs	r1, #0
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f008 fa2b 	bl	8015c50 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	2225      	movs	r2, #37	; 0x25
 800d7fe:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	2201      	movs	r2, #1
 800d806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	2202      	movs	r2, #2
 800d80e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	f103 0210 	add.w	r2, r3, #16
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800d81e:	2301      	movs	r3, #1
 800d820:	75fb      	strb	r3, [r7, #23]
      break;
 800d822:	e038      	b.n	800d896 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d824:	7afb      	ldrb	r3, [r7, #11]
 800d826:	4619      	mov	r1, r3
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	f7ff fcb1 	bl	800d190 <USBH_MSC_BOT_Process>
 800d82e:	4603      	mov	r3, r0
 800d830:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800d832:	7dfb      	ldrb	r3, [r7, #23]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d12d      	bne.n	800d894 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d83e:	3303      	adds	r3, #3
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	461a      	mov	r2, r3
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d84a:	3302      	adds	r3, #2
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	021b      	lsls	r3, r3, #8
 800d850:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d858:	3301      	adds	r3, #1
 800d85a:	781b      	ldrb	r3, [r3, #0]
 800d85c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800d85e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	061b      	lsls	r3, r3, #24
 800d86a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d876:	3307      	adds	r3, #7
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	b29a      	uxth	r2, r3
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d882:	3306      	adds	r3, #6
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	b29b      	uxth	r3, r3
 800d888:	021b      	lsls	r3, r3, #8
 800d88a:	b29b      	uxth	r3, r3
 800d88c:	4313      	orrs	r3, r2
 800d88e:	b29a      	uxth	r2, r3
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	809a      	strh	r2, [r3, #4]
      break;
 800d894:	bf00      	nop
  }

  return error;
 800d896:	7dfb      	ldrb	r3, [r7, #23]
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3718      	adds	r7, #24
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b086      	sub	sp, #24
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	60f8      	str	r0, [r7, #12]
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	607a      	str	r2, [r7, #4]
 800d8ac:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800d8ae:	2302      	movs	r3, #2
 800d8b0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d8b8:	69db      	ldr	r3, [r3, #28]
 800d8ba:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d8c2:	2b01      	cmp	r3, #1
 800d8c4:	d002      	beq.n	800d8cc <USBH_MSC_SCSI_Inquiry+0x2c>
 800d8c6:	2b02      	cmp	r3, #2
 800d8c8:	d03d      	beq.n	800d946 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800d8ca:	e089      	b.n	800d9e0 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	2224      	movs	r2, #36	; 0x24
 800d8d0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	2280      	movs	r2, #128	; 0x80
 800d8d6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	220a      	movs	r2, #10
 800d8de:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	3363      	adds	r3, #99	; 0x63
 800d8e6:	220a      	movs	r2, #10
 800d8e8:	2100      	movs	r1, #0
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f008 f9b0 	bl	8015c50 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	2212      	movs	r2, #18
 800d8f4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800d8f8:	7afb      	ldrb	r3, [r7, #11]
 800d8fa:	015b      	lsls	r3, r3, #5
 800d8fc:	b2da      	uxtb	r2, r3
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	2200      	movs	r2, #0
 800d908:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	2200      	movs	r2, #0
 800d910:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	2224      	movs	r2, #36	; 0x24
 800d918:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	2200      	movs	r2, #0
 800d920:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	2201      	movs	r2, #1
 800d928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	2202      	movs	r2, #2
 800d930:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	f103 0210 	add.w	r2, r3, #16
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800d940:	2301      	movs	r3, #1
 800d942:	75fb      	strb	r3, [r7, #23]
      break;
 800d944:	e04c      	b.n	800d9e0 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d946:	7afb      	ldrb	r3, [r7, #11]
 800d948:	4619      	mov	r1, r3
 800d94a:	68f8      	ldr	r0, [r7, #12]
 800d94c:	f7ff fc20 	bl	800d190 <USBH_MSC_BOT_Process>
 800d950:	4603      	mov	r3, r0
 800d952:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800d954:	7dfb      	ldrb	r3, [r7, #23]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d141      	bne.n	800d9de <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800d95a:	2222      	movs	r2, #34	; 0x22
 800d95c:	2100      	movs	r1, #0
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f008 f976 	bl	8015c50 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	f003 031f 	and.w	r3, r3, #31
 800d970:	b2da      	uxtb	r2, r3
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	095b      	lsrs	r3, r3, #5
 800d980:	b2da      	uxtb	r2, r3
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d98c:	3301      	adds	r3, #1
 800d98e:	781b      	ldrb	r3, [r3, #0]
 800d990:	b25b      	sxtb	r3, r3
 800d992:	2b00      	cmp	r3, #0
 800d994:	da03      	bge.n	800d99e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2201      	movs	r2, #1
 800d99a:	709a      	strb	r2, [r3, #2]
 800d99c:	e002      	b.n	800d9a4 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	1cd8      	adds	r0, r3, #3
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9ae:	3308      	adds	r3, #8
 800d9b0:	2208      	movs	r2, #8
 800d9b2:	4619      	mov	r1, r3
 800d9b4:	f008 f93e 	bl	8015c34 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f103 000c 	add.w	r0, r3, #12
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9c4:	3310      	adds	r3, #16
 800d9c6:	2210      	movs	r2, #16
 800d9c8:	4619      	mov	r1, r3
 800d9ca:	f008 f933 	bl	8015c34 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	331d      	adds	r3, #29
 800d9d2:	693a      	ldr	r2, [r7, #16]
 800d9d4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800d9d8:	3220      	adds	r2, #32
 800d9da:	6812      	ldr	r2, [r2, #0]
 800d9dc:	601a      	str	r2, [r3, #0]
      break;
 800d9de:	bf00      	nop
  }

  return error;
 800d9e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3718      	adds	r7, #24
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}

0800d9ea <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800d9ea:	b580      	push	{r7, lr}
 800d9ec:	b086      	sub	sp, #24
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	60f8      	str	r0, [r7, #12]
 800d9f2:	460b      	mov	r3, r1
 800d9f4:	607a      	str	r2, [r7, #4]
 800d9f6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800d9f8:	2302      	movs	r3, #2
 800d9fa:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800da02:	69db      	ldr	r3, [r3, #28]
 800da04:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800da06:	693b      	ldr	r3, [r7, #16]
 800da08:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d002      	beq.n	800da16 <USBH_MSC_SCSI_RequestSense+0x2c>
 800da10:	2b02      	cmp	r3, #2
 800da12:	d03d      	beq.n	800da90 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800da14:	e05d      	b.n	800dad2 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	220e      	movs	r2, #14
 800da1a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	2280      	movs	r2, #128	; 0x80
 800da20:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	220a      	movs	r2, #10
 800da28:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	3363      	adds	r3, #99	; 0x63
 800da30:	2210      	movs	r2, #16
 800da32:	2100      	movs	r1, #0
 800da34:	4618      	mov	r0, r3
 800da36:	f008 f90b 	bl	8015c50 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	2203      	movs	r2, #3
 800da3e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800da42:	7afb      	ldrb	r3, [r7, #11]
 800da44:	015b      	lsls	r3, r3, #5
 800da46:	b2da      	uxtb	r2, r3
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	2200      	movs	r2, #0
 800da52:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	2200      	movs	r2, #0
 800da5a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	220e      	movs	r2, #14
 800da62:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	2200      	movs	r2, #0
 800da6a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	2201      	movs	r2, #1
 800da72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	2202      	movs	r2, #2
 800da7a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	f103 0210 	add.w	r2, r3, #16
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800da8a:	2301      	movs	r3, #1
 800da8c:	75fb      	strb	r3, [r7, #23]
      break;
 800da8e:	e020      	b.n	800dad2 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800da90:	7afb      	ldrb	r3, [r7, #11]
 800da92:	4619      	mov	r1, r3
 800da94:	68f8      	ldr	r0, [r7, #12]
 800da96:	f7ff fb7b 	bl	800d190 <USBH_MSC_BOT_Process>
 800da9a:	4603      	mov	r3, r0
 800da9c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800da9e:	7dfb      	ldrb	r3, [r7, #23]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d115      	bne.n	800dad0 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800daaa:	3302      	adds	r3, #2
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	f003 030f 	and.w	r3, r3, #15
 800dab2:	b2da      	uxtb	r2, r3
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dabe:	7b1a      	ldrb	r2, [r3, #12]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800daca:	7b5a      	ldrb	r2, [r3, #13]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	709a      	strb	r2, [r3, #2]
      break;
 800dad0:	bf00      	nop
  }

  return error;
 800dad2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3718      	adds	r7, #24
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b086      	sub	sp, #24
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	60f8      	str	r0, [r7, #12]
 800dae4:	607a      	str	r2, [r7, #4]
 800dae6:	603b      	str	r3, [r7, #0]
 800dae8:	460b      	mov	r3, r1
 800daea:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800daec:	2302      	movs	r3, #2
 800daee:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800daf6:	69db      	ldr	r3, [r3, #28]
 800daf8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800db00:	2b01      	cmp	r3, #1
 800db02:	d002      	beq.n	800db0a <USBH_MSC_SCSI_Write+0x2e>
 800db04:	2b02      	cmp	r3, #2
 800db06:	d047      	beq.n	800db98 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800db08:	e04e      	b.n	800dba8 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800db10:	461a      	mov	r2, r3
 800db12:	6a3b      	ldr	r3, [r7, #32]
 800db14:	fb03 f202 	mul.w	r2, r3, r2
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	2200      	movs	r2, #0
 800db20:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	220a      	movs	r2, #10
 800db28:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	3363      	adds	r3, #99	; 0x63
 800db30:	2210      	movs	r2, #16
 800db32:	2100      	movs	r1, #0
 800db34:	4618      	mov	r0, r3
 800db36:	f008 f88b 	bl	8015c50 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	222a      	movs	r2, #42	; 0x2a
 800db3e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800db42:	79fa      	ldrb	r2, [r7, #7]
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800db4a:	79ba      	ldrb	r2, [r7, #6]
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800db52:	797a      	ldrb	r2, [r7, #5]
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800db5a:	1d3b      	adds	r3, r7, #4
 800db5c:	781a      	ldrb	r2, [r3, #0]
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800db64:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800db6e:	f107 0320 	add.w	r3, r7, #32
 800db72:	781a      	ldrb	r2, [r3, #0]
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	2201      	movs	r2, #1
 800db7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	2202      	movs	r2, #2
 800db86:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	683a      	ldr	r2, [r7, #0]
 800db8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800db92:	2301      	movs	r3, #1
 800db94:	75fb      	strb	r3, [r7, #23]
      break;
 800db96:	e007      	b.n	800dba8 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800db98:	7afb      	ldrb	r3, [r7, #11]
 800db9a:	4619      	mov	r1, r3
 800db9c:	68f8      	ldr	r0, [r7, #12]
 800db9e:	f7ff faf7 	bl	800d190 <USBH_MSC_BOT_Process>
 800dba2:	4603      	mov	r3, r0
 800dba4:	75fb      	strb	r3, [r7, #23]
      break;
 800dba6:	bf00      	nop
  }

  return error;
 800dba8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3718      	adds	r7, #24
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}

0800dbb2 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800dbb2:	b580      	push	{r7, lr}
 800dbb4:	b086      	sub	sp, #24
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	60f8      	str	r0, [r7, #12]
 800dbba:	607a      	str	r2, [r7, #4]
 800dbbc:	603b      	str	r3, [r7, #0]
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800dbc2:	2302      	movs	r3, #2
 800dbc4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800dbcc:	69db      	ldr	r3, [r3, #28]
 800dbce:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	d002      	beq.n	800dbe0 <USBH_MSC_SCSI_Read+0x2e>
 800dbda:	2b02      	cmp	r3, #2
 800dbdc:	d047      	beq.n	800dc6e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800dbde:	e04e      	b.n	800dc7e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	6a3b      	ldr	r3, [r7, #32]
 800dbea:	fb03 f202 	mul.w	r2, r3, r2
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	2280      	movs	r2, #128	; 0x80
 800dbf6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	220a      	movs	r2, #10
 800dbfe:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	3363      	adds	r3, #99	; 0x63
 800dc06:	2210      	movs	r2, #16
 800dc08:	2100      	movs	r1, #0
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f008 f820 	bl	8015c50 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	2228      	movs	r2, #40	; 0x28
 800dc14:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800dc18:	79fa      	ldrb	r2, [r7, #7]
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800dc20:	79ba      	ldrb	r2, [r7, #6]
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800dc28:	797a      	ldrb	r2, [r7, #5]
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800dc30:	1d3b      	adds	r3, r7, #4
 800dc32:	781a      	ldrb	r2, [r3, #0]
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800dc3a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800dc44:	f107 0320 	add.w	r3, r7, #32
 800dc48:	781a      	ldrb	r2, [r3, #0]
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	2201      	movs	r2, #1
 800dc54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	2202      	movs	r2, #2
 800dc5c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	683a      	ldr	r2, [r7, #0]
 800dc64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800dc68:	2301      	movs	r3, #1
 800dc6a:	75fb      	strb	r3, [r7, #23]
      break;
 800dc6c:	e007      	b.n	800dc7e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800dc6e:	7afb      	ldrb	r3, [r7, #11]
 800dc70:	4619      	mov	r1, r3
 800dc72:	68f8      	ldr	r0, [r7, #12]
 800dc74:	f7ff fa8c 	bl	800d190 <USBH_MSC_BOT_Process>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	75fb      	strb	r3, [r7, #23]
      break;
 800dc7c:	bf00      	nop
  }

  return error;
 800dc7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3718      	adds	r7, #24
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800dc88:	b5b0      	push	{r4, r5, r7, lr}
 800dc8a:	b090      	sub	sp, #64	; 0x40
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	60f8      	str	r0, [r7, #12]
 800dc90:	60b9      	str	r1, [r7, #8]
 800dc92:	4613      	mov	r3, r2
 800dc94:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d101      	bne.n	800dca0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800dc9c:	2302      	movs	r3, #2
 800dc9e:	e04d      	b.n	800dd3c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	79fa      	ldrb	r2, [r7, #7]
 800dca4:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800dcb8:	68f8      	ldr	r0, [r7, #12]
 800dcba:	f000 f847 	bl	800dd4c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d003      	beq.n	800dcec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	68ba      	ldr	r2, [r7, #8]
 800dce8:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800dcec:	4b15      	ldr	r3, [pc, #84]	; (800dd44 <USBH_Init+0xbc>)
 800dcee:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800dcf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dcf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800dcf8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dcfc:	2100      	movs	r1, #0
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f004 fe59 	bl	80129b6 <osMessageCreate>
 800dd04:	4602      	mov	r2, r0
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800dd0c:	4b0e      	ldr	r3, [pc, #56]	; (800dd48 <USBH_Init+0xc0>)
 800dd0e:	f107 0414 	add.w	r4, r7, #20
 800dd12:	461d      	mov	r5, r3
 800dd14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dd1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800dd20:	f107 0314 	add.w	r3, r7, #20
 800dd24:	68f9      	ldr	r1, [r7, #12]
 800dd26:	4618      	mov	r0, r3
 800dd28:	f004 fd1b 	bl	8012762 <osThreadCreate>
 800dd2c:	4602      	mov	r2, r0
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800dd34:	68f8      	ldr	r0, [r7, #12]
 800dd36:	f007 fc27 	bl	8015588 <USBH_LL_Init>

  return USBH_OK;
 800dd3a:	2300      	movs	r3, #0
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3740      	adds	r7, #64	; 0x40
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bdb0      	pop	{r4, r5, r7, pc}
 800dd44:	0801a3d0 	.word	0x0801a3d0
 800dd48:	0801a3e0 	.word	0x0801a3e0

0800dd4c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b085      	sub	sp, #20
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800dd54:	2300      	movs	r3, #0
 800dd56:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800dd58:	2300      	movs	r3, #0
 800dd5a:	60fb      	str	r3, [r7, #12]
 800dd5c:	e008      	b.n	800dd70 <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	68fa      	ldr	r2, [r7, #12]
 800dd62:	32e0      	adds	r2, #224	; 0xe0
 800dd64:	2100      	movs	r1, #0
 800dd66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	60fb      	str	r3, [r7, #12]
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2b0e      	cmp	r3, #14
 800dd74:	d9f3      	bls.n	800dd5e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800dd76:	2300      	movs	r3, #0
 800dd78:	60fb      	str	r3, [r7, #12]
 800dd7a:	e009      	b.n	800dd90 <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 800dd7c:	687a      	ldr	r2, [r7, #4]
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	4413      	add	r3, r2
 800dd82:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dd86:	2200      	movs	r2, #0
 800dd88:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	60fb      	str	r3, [r7, #12]
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd96:	d3f1      	bcc.n	800dd7c <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2200      	movs	r2, #0
 800dda2:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2201      	movs	r2, #1
 800dda8:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2200      	movs	r2, #0
 800ddae:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  phost->Control.state = CTRL_SETUP;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2240      	movs	r2, #64	; 0x40
 800ddbc:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2201      	movs	r2, #1
 800ddd0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800ddd4:	2300      	movs	r3, #0
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3714      	adds	r7, #20
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bc80      	pop	{r7}
 800ddde:	4770      	bx	lr

0800dde0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b085      	sub	sp, #20
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ddea:	2300      	movs	r3, #0
 800ddec:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d017      	beq.n	800de24 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d10f      	bne.n	800de1e <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de04:	1c59      	adds	r1, r3, #1
 800de06:	687a      	ldr	r2, [r7, #4]
 800de08:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800de0c:	687a      	ldr	r2, [r7, #4]
 800de0e:	33dc      	adds	r3, #220	; 0xdc
 800de10:	009b      	lsls	r3, r3, #2
 800de12:	4413      	add	r3, r2
 800de14:	683a      	ldr	r2, [r7, #0]
 800de16:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800de18:	2300      	movs	r3, #0
 800de1a:	73fb      	strb	r3, [r7, #15]
 800de1c:	e004      	b.n	800de28 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800de1e:	2302      	movs	r3, #2
 800de20:	73fb      	strb	r3, [r7, #15]
 800de22:	e001      	b.n	800de28 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800de24:	2302      	movs	r3, #2
 800de26:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800de28:	7bfb      	ldrb	r3, [r7, #15]
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3714      	adds	r7, #20
 800de2e:	46bd      	mov	sp, r7
 800de30:	bc80      	pop	{r7}
 800de32:	4770      	bx	lr

0800de34 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800de34:	b480      	push	{r7}
 800de36:	b085      	sub	sp, #20
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	460b      	mov	r3, r1
 800de3e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800de40:	2300      	movs	r3, #0
 800de42:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800de4a:	78fa      	ldrb	r2, [r7, #3]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d204      	bcs.n	800de5a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	78fa      	ldrb	r2, [r7, #3]
 800de54:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 800de58:	e001      	b.n	800de5e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800de5a:	2302      	movs	r3, #2
 800de5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800de5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de60:	4618      	mov	r0, r3
 800de62:	3714      	adds	r7, #20
 800de64:	46bd      	mov	sp, r7
 800de66:	bc80      	pop	{r7}
 800de68:	4770      	bx	lr

0800de6a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800de6a:	b480      	push	{r7}
 800de6c:	b087      	sub	sp, #28
 800de6e:	af00      	add	r7, sp, #0
 800de70:	6078      	str	r0, [r7, #4]
 800de72:	4608      	mov	r0, r1
 800de74:	4611      	mov	r1, r2
 800de76:	461a      	mov	r2, r3
 800de78:	4603      	mov	r3, r0
 800de7a:	70fb      	strb	r3, [r7, #3]
 800de7c:	460b      	mov	r3, r1
 800de7e:	70bb      	strb	r3, [r7, #2]
 800de80:	4613      	mov	r3, r2
 800de82:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800de84:	2300      	movs	r3, #0
 800de86:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800de88:	2300      	movs	r3, #0
 800de8a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f203 3336 	addw	r3, r3, #822	; 0x336
 800de92:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800de94:	e025      	b.n	800dee2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800de96:	7dfb      	ldrb	r3, [r7, #23]
 800de98:	221a      	movs	r2, #26
 800de9a:	fb02 f303 	mul.w	r3, r2, r3
 800de9e:	3308      	adds	r3, #8
 800dea0:	68fa      	ldr	r2, [r7, #12]
 800dea2:	4413      	add	r3, r2
 800dea4:	3302      	adds	r3, #2
 800dea6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	795b      	ldrb	r3, [r3, #5]
 800deac:	78fa      	ldrb	r2, [r7, #3]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d002      	beq.n	800deb8 <USBH_FindInterface+0x4e>
 800deb2:	78fb      	ldrb	r3, [r7, #3]
 800deb4:	2bff      	cmp	r3, #255	; 0xff
 800deb6:	d111      	bne.n	800dedc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800debc:	78ba      	ldrb	r2, [r7, #2]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d002      	beq.n	800dec8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800dec2:	78bb      	ldrb	r3, [r7, #2]
 800dec4:	2bff      	cmp	r3, #255	; 0xff
 800dec6:	d109      	bne.n	800dedc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800decc:	787a      	ldrb	r2, [r7, #1]
 800dece:	429a      	cmp	r2, r3
 800ded0:	d002      	beq.n	800ded8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ded2:	787b      	ldrb	r3, [r7, #1]
 800ded4:	2bff      	cmp	r3, #255	; 0xff
 800ded6:	d101      	bne.n	800dedc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ded8:	7dfb      	ldrb	r3, [r7, #23]
 800deda:	e006      	b.n	800deea <USBH_FindInterface+0x80>
    }
    if_ix++;
 800dedc:	7dfb      	ldrb	r3, [r7, #23]
 800dede:	3301      	adds	r3, #1
 800dee0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800dee2:	7dfb      	ldrb	r3, [r7, #23]
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	d9d6      	bls.n	800de96 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800dee8:	23ff      	movs	r3, #255	; 0xff
}
 800deea:	4618      	mov	r0, r3
 800deec:	371c      	adds	r7, #28
 800deee:	46bd      	mov	sp, r7
 800def0:	bc80      	pop	{r7}
 800def2:	4770      	bx	lr

0800def4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b082      	sub	sp, #8
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f007 fb7f 	bl	8015600 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800df02:	2101      	movs	r1, #1
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f007 fc98 	bl	801583a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800df0a:	2300      	movs	r3, #0
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3708      	adds	r7, #8
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}

0800df14 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b088      	sub	sp, #32
 800df18:	af04      	add	r7, sp, #16
 800df1a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800df1c:	2302      	movs	r3, #2
 800df1e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800df20:	2300      	movs	r3, #0
 800df22:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d102      	bne.n	800df36 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2203      	movs	r2, #3
 800df34:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	b2db      	uxtb	r3, r3
 800df3c:	2b0b      	cmp	r3, #11
 800df3e:	f200 81e4 	bhi.w	800e30a <USBH_Process+0x3f6>
 800df42:	a201      	add	r2, pc, #4	; (adr r2, 800df48 <USBH_Process+0x34>)
 800df44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df48:	0800df79 	.word	0x0800df79
 800df4c:	0800dfb7 	.word	0x0800dfb7
 800df50:	0800dfcb 	.word	0x0800dfcb
 800df54:	0800e289 	.word	0x0800e289
 800df58:	0800e30b 	.word	0x0800e30b
 800df5c:	0800e08b 	.word	0x0800e08b
 800df60:	0800e223 	.word	0x0800e223
 800df64:	0800e0bb 	.word	0x0800e0bb
 800df68:	0800e0f7 	.word	0x0800e0f7
 800df6c:	0800e131 	.word	0x0800e131
 800df70:	0800e179 	.word	0x0800e179
 800df74:	0800e271 	.word	0x0800e271
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800df7e:	b2db      	uxtb	r3, r3
 800df80:	2b00      	cmp	r3, #0
 800df82:	f000 81c4 	beq.w	800e30e <USBH_Process+0x3fa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2201      	movs	r2, #1
 800df8a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800df8c:	20c8      	movs	r0, #200	; 0xc8
 800df8e:	f007 fcc9 	bl	8015924 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f007 fb91 	bl	80156ba <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2201      	movs	r2, #1
 800df9c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800dfac:	2200      	movs	r2, #0
 800dfae:	4619      	mov	r1, r3
 800dfb0:	f004 fd2a 	bl	8012a08 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800dfb4:	e1ab      	b.n	800e30e <USBH_Process+0x3fa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800dfbc:	2b01      	cmp	r3, #1
 800dfbe:	f040 81a8 	bne.w	800e312 <USBH_Process+0x3fe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->gState = HOST_DEV_ATTACHED;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2202      	movs	r2, #2
 800dfc6:	701a      	strb	r2, [r3, #0]
      }
      break;
 800dfc8:	e1a3      	b.n	800e312 <USBH_Process+0x3fe>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d005      	beq.n	800dfe0 <USBH_Process+0xcc>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800dfda:	2104      	movs	r1, #4
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800dfe0:	2064      	movs	r0, #100	; 0x64
 800dfe2:	f007 fc9f 	bl	8015924 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f007 fb40 	bl	801566c <USBH_LL_GetSpeed>
 800dfec:	4603      	mov	r3, r0
 800dfee:	461a      	mov	r2, r3
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2205      	movs	r2, #5
 800dffa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800dffc:	2100      	movs	r1, #0
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f001 fa1f 	bl	800f442 <USBH_AllocPipe>
 800e004:	4603      	mov	r3, r0
 800e006:	461a      	mov	r2, r3
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e00c:	2180      	movs	r1, #128	; 0x80
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f001 fa17 	bl	800f442 <USBH_AllocPipe>
 800e014:	4603      	mov	r3, r0
 800e016:	461a      	mov	r2, r3
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	7919      	ldrb	r1, [r3, #4]
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 800e02c:	687a      	ldr	r2, [r7, #4]
 800e02e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800e030:	b292      	uxth	r2, r2
 800e032:	9202      	str	r2, [sp, #8]
 800e034:	2200      	movs	r2, #0
 800e036:	9201      	str	r2, [sp, #4]
 800e038:	9300      	str	r3, [sp, #0]
 800e03a:	4603      	mov	r3, r0
 800e03c:	2280      	movs	r2, #128	; 0x80
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f001 f9d0 	bl	800f3e4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	7959      	ldrb	r1, [r3, #5]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 800e054:	687a      	ldr	r2, [r7, #4]
 800e056:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800e058:	b292      	uxth	r2, r2
 800e05a:	9202      	str	r2, [sp, #8]
 800e05c:	2200      	movs	r2, #0
 800e05e:	9201      	str	r2, [sp, #4]
 800e060:	9300      	str	r3, [sp, #0]
 800e062:	4603      	mov	r3, r0
 800e064:	2200      	movs	r2, #0
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f001 f9bc 	bl	800f3e4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2201      	movs	r2, #1
 800e070:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e080:	2200      	movs	r2, #0
 800e082:	4619      	mov	r1, r3
 800e084:	f004 fcc0 	bl	8012a08 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e088:	e14c      	b.n	800e324 <USBH_Process+0x410>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f000 f950 	bl	800e330 <USBH_HandleEnum>
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	f040 813f 	bne.w	800e316 <USBH_Process+0x402>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2200      	movs	r2, #0
 800e09c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800e0a6:	2b01      	cmp	r3, #1
 800e0a8:	d103      	bne.n	800e0b2 <USBH_Process+0x19e>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2208      	movs	r2, #8
 800e0ae:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 800e0b0:	e131      	b.n	800e316 <USBH_Process+0x402>
          phost->gState = HOST_INPUT;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2207      	movs	r2, #7
 800e0b6:	701a      	strb	r2, [r3, #0]
      break;
 800e0b8:	e12d      	b.n	800e316 <USBH_Process+0x402>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	f000 812a 	beq.w	800e31a <USBH_Process+0x406>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800e0cc:	2101      	movs	r1, #1
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2208      	movs	r2, #8
 800e0d6:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2205      	movs	r2, #5
 800e0dc:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	f004 fc8a 	bl	8012a08 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e0f4:	e111      	b.n	800e31a <USBH_Process+0x406>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800e0fc:	b29b      	uxth	r3, r3
 800e0fe:	4619      	mov	r1, r3
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f000 fc19 	bl	800e938 <USBH_SetCfg>
 800e106:	4603      	mov	r3, r0
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d102      	bne.n	800e112 <USBH_Process+0x1fe>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2209      	movs	r2, #9
 800e110:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2201      	movs	r2, #1
 800e116:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e126:	2200      	movs	r2, #0
 800e128:	4619      	mov	r1, r3
 800e12a:	f004 fc6d 	bl	8012a08 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e12e:	e0f9      	b.n	800e324 <USBH_Process+0x410>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800e136:	f003 0320 	and.w	r3, r3, #32
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d00a      	beq.n	800e154 <USBH_Process+0x240>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800e13e:	2101      	movs	r1, #1
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f000 fc1c 	bl	800e97e <USBH_SetFeature>
 800e146:	4603      	mov	r3, r0
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d106      	bne.n	800e15a <USBH_Process+0x246>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	220a      	movs	r2, #10
 800e150:	701a      	strb	r2, [r3, #0]
 800e152:	e002      	b.n	800e15a <USBH_Process+0x246>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	220a      	movs	r2, #10
 800e158:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2201      	movs	r2, #1
 800e15e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e16e:	2200      	movs	r2, #0
 800e170:	4619      	mov	r1, r3
 800e172:	f004 fc49 	bl	8012a08 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e176:	e0d5      	b.n	800e324 <USBH_Process+0x410>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d040      	beq.n	800e204 <USBH_Process+0x2f0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2200      	movs	r2, #0
 800e186:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e18a:	2300      	movs	r3, #0
 800e18c:	73fb      	strb	r3, [r7, #15]
 800e18e:	e017      	b.n	800e1c0 <USBH_Process+0x2ac>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e190:	7bfb      	ldrb	r3, [r7, #15]
 800e192:	687a      	ldr	r2, [r7, #4]
 800e194:	33dc      	adds	r3, #220	; 0xdc
 800e196:	009b      	lsls	r3, r3, #2
 800e198:	4413      	add	r3, r2
 800e19a:	685b      	ldr	r3, [r3, #4]
 800e19c:	791a      	ldrb	r2, [r3, #4]
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d108      	bne.n	800e1ba <USBH_Process+0x2a6>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e1a8:	7bfb      	ldrb	r3, [r7, #15]
 800e1aa:	687a      	ldr	r2, [r7, #4]
 800e1ac:	33dc      	adds	r3, #220	; 0xdc
 800e1ae:	009b      	lsls	r3, r3, #2
 800e1b0:	4413      	add	r3, r2
 800e1b2:	685a      	ldr	r2, [r3, #4]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e1ba:	7bfb      	ldrb	r3, [r7, #15]
 800e1bc:	3301      	adds	r3, #1
 800e1be:	73fb      	strb	r3, [r7, #15]
 800e1c0:	7bfb      	ldrb	r3, [r7, #15]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d0e4      	beq.n	800e190 <USBH_Process+0x27c>
          }
        }

        if (phost->pActiveClass != NULL)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d016      	beq.n	800e1fe <USBH_Process+0x2ea>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e1d6:	689b      	ldr	r3, [r3, #8]
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	4798      	blx	r3
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d109      	bne.n	800e1f6 <USBH_Process+0x2e2>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2206      	movs	r2, #6
 800e1e6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800e1ee:	2103      	movs	r1, #3
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	4798      	blx	r3
 800e1f4:	e006      	b.n	800e204 <USBH_Process+0x2f0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	220d      	movs	r2, #13
 800e1fa:	701a      	strb	r2, [r3, #0]
 800e1fc:	e002      	b.n	800e204 <USBH_Process+0x2f0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	220d      	movs	r2, #13
 800e202:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2205      	movs	r2, #5
 800e208:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e218:	2200      	movs	r2, #0
 800e21a:	4619      	mov	r1, r3
 800e21c:	f004 fbf4 	bl	8012a08 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e220:	e080      	b.n	800e324 <USBH_Process+0x410>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d00f      	beq.n	800e24c <USBH_Process+0x338>
      {
        status = phost->pActiveClass->Requests(phost);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e232:	691b      	ldr	r3, [r3, #16]
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	4798      	blx	r3
 800e238:	4603      	mov	r3, r0
 800e23a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e23c:	7bbb      	ldrb	r3, [r7, #14]
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	2b00      	cmp	r3, #0
 800e242:	d16c      	bne.n	800e31e <USBH_Process+0x40a>
        {
          phost->gState = HOST_CLASS;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	220b      	movs	r2, #11
 800e248:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e24a:	e068      	b.n	800e31e <USBH_Process+0x40a>
        phost->gState = HOST_ABORT_STATE;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	220d      	movs	r2, #13
 800e250:	701a      	strb	r2, [r3, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2205      	movs	r2, #5
 800e256:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e266:	2200      	movs	r2, #0
 800e268:	4619      	mov	r1, r3
 800e26a:	f004 fbcd 	bl	8012a08 <osMessagePut>
      break;
 800e26e:	e056      	b.n	800e31e <USBH_Process+0x40a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e276:	2b00      	cmp	r3, #0
 800e278:	d053      	beq.n	800e322 <USBH_Process+0x40e>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e280:	695b      	ldr	r3, [r3, #20]
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	4798      	blx	r3
      }
      break;
 800e286:	e04c      	b.n	800e322 <USBH_Process+0x40e>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2200      	movs	r2, #0
 800e28c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

      DeInitStateMachine(phost);
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f7ff fd5b 	bl	800dd4c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d009      	beq.n	800e2b4 <USBH_Process+0x3a0>
      {
        phost->pActiveClass->DeInit(phost);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      }

      if (phost->pUser != NULL)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d005      	beq.n	800e2ca <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800e2c4:	2105      	movs	r1, #5
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	2b01      	cmp	r3, #1
 800e2d4:	d107      	bne.n	800e2e6 <USBH_Process+0x3d2>
      {
        phost->device.is_ReEnumerated = 0U;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f7ff fe08 	bl	800def4 <USBH_Start>
 800e2e4:	e002      	b.n	800e2ec <USBH_Process+0x3d8>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f007 f98a 	bl	8015600 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e300:	2200      	movs	r2, #0
 800e302:	4619      	mov	r1, r3
 800e304:	f004 fb80 	bl	8012a08 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e308:	e00c      	b.n	800e324 <USBH_Process+0x410>

    case HOST_ABORT_STATE:
    default :
      break;
 800e30a:	bf00      	nop
 800e30c:	e00a      	b.n	800e324 <USBH_Process+0x410>
      break;
 800e30e:	bf00      	nop
 800e310:	e008      	b.n	800e324 <USBH_Process+0x410>
      break;
 800e312:	bf00      	nop
 800e314:	e006      	b.n	800e324 <USBH_Process+0x410>
      break;
 800e316:	bf00      	nop
 800e318:	e004      	b.n	800e324 <USBH_Process+0x410>
    break;
 800e31a:	bf00      	nop
 800e31c:	e002      	b.n	800e324 <USBH_Process+0x410>
      break;
 800e31e:	bf00      	nop
 800e320:	e000      	b.n	800e324 <USBH_Process+0x410>
      break;
 800e322:	bf00      	nop
  }
  return USBH_OK;
 800e324:	2300      	movs	r3, #0
}
 800e326:	4618      	mov	r0, r3
 800e328:	3710      	adds	r7, #16
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
 800e32e:	bf00      	nop

0800e330 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b088      	sub	sp, #32
 800e334:	af04      	add	r7, sp, #16
 800e336:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e338:	2301      	movs	r3, #1
 800e33a:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	785b      	ldrb	r3, [r3, #1]
 800e340:	2b07      	cmp	r3, #7
 800e342:	f200 8132 	bhi.w	800e5aa <USBH_HandleEnum+0x27a>
 800e346:	a201      	add	r2, pc, #4	; (adr r2, 800e34c <USBH_HandleEnum+0x1c>)
 800e348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e34c:	0800e36d 	.word	0x0800e36d
 800e350:	0800e3df 	.word	0x0800e3df
 800e354:	0800e3f7 	.word	0x0800e3f7
 800e358:	0800e46d 	.word	0x0800e46d
 800e35c:	0800e485 	.word	0x0800e485
 800e360:	0800e4a3 	.word	0x0800e4a3
 800e364:	0800e50f 	.word	0x0800e50f
 800e368:	0800e55f 	.word	0x0800e55f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800e36c:	2108      	movs	r1, #8
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 fa12 	bl	800e798 <USBH_Get_DevDesc>
 800e374:	4603      	mov	r3, r0
 800e376:	2b00      	cmp	r3, #0
 800e378:	f040 8119 	bne.w	800e5ae <USBH_HandleEnum+0x27e>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2201      	movs	r2, #1
 800e38a:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	7919      	ldrb	r1, [r3, #4]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e39c:	687a      	ldr	r2, [r7, #4]
 800e39e:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800e3a0:	b292      	uxth	r2, r2
 800e3a2:	9202      	str	r2, [sp, #8]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	9201      	str	r2, [sp, #4]
 800e3a8:	9300      	str	r3, [sp, #0]
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	2280      	movs	r2, #128	; 0x80
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f001 f818 	bl	800f3e4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	7959      	ldrb	r1, [r3, #5]
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800e3c8:	b292      	uxth	r2, r2
 800e3ca:	9202      	str	r2, [sp, #8]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	9201      	str	r2, [sp, #4]
 800e3d0:	9300      	str	r3, [sp, #0]
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f001 f804 	bl	800f3e4 <USBH_OpenPipe>
      }
      break;
 800e3dc:	e0e7      	b.n	800e5ae <USBH_HandleEnum+0x27e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 800e3de:	2112      	movs	r1, #18
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f000 f9d9 	bl	800e798 <USBH_Get_DevDesc>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	f040 80e2 	bne.w	800e5b2 <USBH_HandleEnum+0x282>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2202      	movs	r2, #2
 800e3f2:	705a      	strb	r2, [r3, #1]

      }
      break;
 800e3f4:	e0dd      	b.n	800e5b2 <USBH_HandleEnum+0x282>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800e3f6:	2101      	movs	r1, #1
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f000 fa79 	bl	800e8f0 <USBH_SetAddress>
 800e3fe:	4603      	mov	r3, r0
 800e400:	2b00      	cmp	r3, #0
 800e402:	f040 80d8 	bne.w	800e5b6 <USBH_HandleEnum+0x286>
      {
        USBH_Delay(2U);
 800e406:	2002      	movs	r0, #2
 800e408:	f007 fa8c 	bl	8015924 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2201      	movs	r2, #1
 800e410:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2203      	movs	r2, #3
 800e418:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	7919      	ldrb	r1, [r3, #4]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e42a:	687a      	ldr	r2, [r7, #4]
 800e42c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800e42e:	b292      	uxth	r2, r2
 800e430:	9202      	str	r2, [sp, #8]
 800e432:	2200      	movs	r2, #0
 800e434:	9201      	str	r2, [sp, #4]
 800e436:	9300      	str	r3, [sp, #0]
 800e438:	4603      	mov	r3, r0
 800e43a:	2280      	movs	r2, #128	; 0x80
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f000 ffd1 	bl	800f3e4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	7959      	ldrb	r1, [r3, #5]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e452:	687a      	ldr	r2, [r7, #4]
 800e454:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800e456:	b292      	uxth	r2, r2
 800e458:	9202      	str	r2, [sp, #8]
 800e45a:	2200      	movs	r2, #0
 800e45c:	9201      	str	r2, [sp, #4]
 800e45e:	9300      	str	r3, [sp, #0]
 800e460:	4603      	mov	r3, r0
 800e462:	2200      	movs	r2, #0
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f000 ffbd 	bl	800f3e4 <USBH_OpenPipe>
      }
      break;
 800e46a:	e0a4      	b.n	800e5b6 <USBH_HandleEnum+0x286>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 800e46c:	2109      	movs	r1, #9
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 f9ba 	bl	800e7e8 <USBH_Get_CfgDesc>
 800e474:	4603      	mov	r3, r0
 800e476:	2b00      	cmp	r3, #0
 800e478:	f040 809f 	bne.w	800e5ba <USBH_HandleEnum+0x28a>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2204      	movs	r2, #4
 800e480:	705a      	strb	r2, [r3, #1]
      }
      break;
 800e482:	e09a      	b.n	800e5ba <USBH_HandleEnum+0x28a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 800e48a:	4619      	mov	r1, r3
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 f9ab 	bl	800e7e8 <USBH_Get_CfgDesc>
 800e492:	4603      	mov	r3, r0
 800e494:	2b00      	cmp	r3, #0
 800e496:	f040 8092 	bne.w	800e5be <USBH_HandleEnum+0x28e>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2205      	movs	r2, #5
 800e49e:	705a      	strb	r2, [r3, #1]
      }
      break;
 800e4a0:	e08d      	b.n	800e5be <USBH_HandleEnum+0x28e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d01e      	beq.n	800e4ea <USBH_HandleEnum+0x1ba>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800e4b8:	23ff      	movs	r3, #255	; 0xff
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f000 f9b8 	bl	800e830 <USBH_Get_StringDesc>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d17d      	bne.n	800e5c2 <USBH_HandleEnum+0x292>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2206      	movs	r2, #6
 800e4ca:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2205      	movs	r2, #5
 800e4d0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	f004 fa90 	bl	8012a08 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e4e8:	e06b      	b.n	800e5c2 <USBH_HandleEnum+0x292>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	2206      	movs	r2, #6
 800e4ee:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2205      	movs	r2, #5
 800e4f4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e504:	2200      	movs	r2, #0
 800e506:	4619      	mov	r1, r3
 800e508:	f004 fa7e 	bl	8012a08 <osMessagePut>
      break;
 800e50c:	e059      	b.n	800e5c2 <USBH_HandleEnum+0x292>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800e514:	2b00      	cmp	r3, #0
 800e516:	d010      	beq.n	800e53a <USBH_HandleEnum+0x20a>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f893 1333 	ldrb.w	r1, [r3, #819]	; 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800e524:	23ff      	movs	r3, #255	; 0xff
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f000 f982 	bl	800e830 <USBH_Get_StringDesc>
 800e52c:	4603      	mov	r3, r0
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d149      	bne.n	800e5c6 <USBH_HandleEnum+0x296>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2207      	movs	r2, #7
 800e536:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e538:	e045      	b.n	800e5c6 <USBH_HandleEnum+0x296>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2207      	movs	r2, #7
 800e53e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2205      	movs	r2, #5
 800e544:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e554:	2200      	movs	r2, #0
 800e556:	4619      	mov	r1, r3
 800e558:	f004 fa56 	bl	8012a08 <osMessagePut>
      break;
 800e55c:	e033      	b.n	800e5c6 <USBH_HandleEnum+0x296>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800e564:	2b00      	cmp	r3, #0
 800e566:	d00f      	beq.n	800e588 <USBH_HandleEnum+0x258>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800e574:	23ff      	movs	r3, #255	; 0xff
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f000 f95a 	bl	800e830 <USBH_Get_StringDesc>
 800e57c:	4603      	mov	r3, r0
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d123      	bne.n	800e5ca <USBH_HandleEnum+0x29a>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800e582:	2300      	movs	r3, #0
 800e584:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e586:	e020      	b.n	800e5ca <USBH_HandleEnum+0x29a>
        Status = USBH_OK;
 800e588:	2300      	movs	r3, #0
 800e58a:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2205      	movs	r2, #5
 800e590:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	4619      	mov	r1, r3
 800e5a4:	f004 fa30 	bl	8012a08 <osMessagePut>
      break;
 800e5a8:	e00f      	b.n	800e5ca <USBH_HandleEnum+0x29a>

    default:
      break;
 800e5aa:	bf00      	nop
 800e5ac:	e00e      	b.n	800e5cc <USBH_HandleEnum+0x29c>
      break;
 800e5ae:	bf00      	nop
 800e5b0:	e00c      	b.n	800e5cc <USBH_HandleEnum+0x29c>
      break;
 800e5b2:	bf00      	nop
 800e5b4:	e00a      	b.n	800e5cc <USBH_HandleEnum+0x29c>
      break;
 800e5b6:	bf00      	nop
 800e5b8:	e008      	b.n	800e5cc <USBH_HandleEnum+0x29c>
      break;
 800e5ba:	bf00      	nop
 800e5bc:	e006      	b.n	800e5cc <USBH_HandleEnum+0x29c>
      break;
 800e5be:	bf00      	nop
 800e5c0:	e004      	b.n	800e5cc <USBH_HandleEnum+0x29c>
      break;
 800e5c2:	bf00      	nop
 800e5c4:	e002      	b.n	800e5cc <USBH_HandleEnum+0x29c>
      break;
 800e5c6:	bf00      	nop
 800e5c8:	e000      	b.n	800e5cc <USBH_HandleEnum+0x29c>
      break;
 800e5ca:	bf00      	nop
  }
  return Status;
 800e5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3710      	adds	r7, #16
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}
 800e5d6:	bf00      	nop

0800e5d8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	683a      	ldr	r2, [r7, #0]
 800e5e6:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
}
 800e5ea:	bf00      	nop
 800e5ec:	370c      	adds	r7, #12
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bc80      	pop	{r7}
 800e5f2:	4770      	bx	lr

0800e5f4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800e602:	1c5a      	adds	r2, r3, #1
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  USBH_HandleSof(phost);
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f000 f804 	bl	800e618 <USBH_HandleSof>
}
 800e610:	bf00      	nop
 800e612:	3708      	adds	r7, #8
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}

0800e618 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	781b      	ldrb	r3, [r3, #0]
 800e624:	b2db      	uxtb	r3, r3
 800e626:	2b0b      	cmp	r3, #11
 800e628:	d10a      	bne.n	800e640 <USBH_HandleSof+0x28>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e630:	2b00      	cmp	r3, #0
 800e632:	d005      	beq.n	800e640 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e63a:	699b      	ldr	r3, [r3, #24]
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	4798      	blx	r3
  }
}
 800e640:	bf00      	nop
 800e642:	3708      	adds	r7, #8
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}

0800e648 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2201      	movs	r2, #1
 800e654:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2201      	movs	r2, #1
 800e65c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e66c:	2200      	movs	r2, #0
 800e66e:	4619      	mov	r1, r3
 800e670:	f004 f9ca 	bl	8012a08 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800e674:	bf00      	nop
}
 800e676:	3708      	adds	r7, #8
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e67c:	b480      	push	{r7}
 800e67e:	b083      	sub	sp, #12
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2200      	movs	r2, #0
 800e688:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 800e68c:	bf00      	nop
}
 800e68e:	370c      	adds	r7, #12
 800e690:	46bd      	mov	sp, r7
 800e692:	bc80      	pop	{r7}
 800e694:	4770      	bx	lr

0800e696 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e696:	b580      	push	{r7, lr}
 800e698:	b082      	sub	sp, #8
 800e69a:	af00      	add	r7, sp, #0
 800e69c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2201      	movs	r2, #1
 800e6a2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2201      	movs	r2, #1
 800e6ba:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	f004 f99b 	bl	8012a08 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e6d2:	2300      	movs	r3, #0
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3708      	adds	r7, #8
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b082      	sub	sp, #8
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2201      	movs	r2, #1
 800e6e8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f006 ff9a 	bl	8015636 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	791b      	ldrb	r3, [r3, #4]
 800e706:	4619      	mov	r1, r3
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f000 feba 	bl	800f482 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	795b      	ldrb	r3, [r3, #5]
 800e712:	4619      	mov	r1, r3
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f000 feb4 	bl	800f482 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2201      	movs	r2, #1
 800e71e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e72e:	2200      	movs	r2, #0
 800e730:	4619      	mov	r1, r3
 800e732:	f004 f969 	bl	8012a08 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e736:	2300      	movs	r3, #0
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3708      	adds	r7, #8
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}

0800e740 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b086      	sub	sp, #24
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f8d3 13d0 	ldr.w	r1, [r3, #976]	; 0x3d0
 800e74e:	f107 030c 	add.w	r3, r7, #12
 800e752:	f04f 32ff 	mov.w	r2, #4294967295
 800e756:	4618      	mov	r0, r3
 800e758:	f004 f996 	bl	8012a88 <osMessageGet>
    if (event.status == osEventMessage)
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2b10      	cmp	r3, #16
 800e760:	d1f2      	bne.n	800e748 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f7ff fbd6 	bl	800df14 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800e768:	e7ee      	b.n	800e748 <USBH_Process_OS+0x8>

0800e76a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800e76a:	b580      	push	{r7, lr}
 800e76c:	b082      	sub	sp, #8
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2201      	movs	r2, #1
 800e776:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800e786:	2200      	movs	r2, #0
 800e788:	4619      	mov	r1, r3
 800e78a:	f004 f93d 	bl	8012a08 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800e78e:	2300      	movs	r3, #0
}
 800e790:	4618      	mov	r0, r3
 800e792:	3708      	adds	r7, #8
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}

0800e798 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b086      	sub	sp, #24
 800e79c:	af02      	add	r7, sp, #8
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800e7aa:	78fb      	ldrb	r3, [r7, #3]
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	9300      	str	r3, [sp, #0]
 800e7b0:	4613      	mov	r3, r2
 800e7b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e7b6:	2100      	movs	r1, #0
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f000 f864 	bl	800e886 <USBH_GetDescriptor>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	73fb      	strb	r3, [r7, #15]
 800e7c2:	7bfb      	ldrb	r3, [r7, #15]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d10a      	bne.n	800e7de <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f503 7049 	add.w	r0, r3, #804	; 0x324
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e7d4:	78fa      	ldrb	r2, [r7, #3]
 800e7d6:	b292      	uxth	r2, r2
 800e7d8:	4619      	mov	r1, r3
 800e7da:	f000 f918 	bl	800ea0e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800e7de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3710      	adds	r7, #16
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b086      	sub	sp, #24
 800e7ec:	af02      	add	r7, sp, #8
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	460b      	mov	r3, r1
 800e7f2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	331c      	adds	r3, #28
 800e7f8:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800e7fa:	887b      	ldrh	r3, [r7, #2]
 800e7fc:	9300      	str	r3, [sp, #0]
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e804:	2100      	movs	r1, #0
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f000 f83d 	bl	800e886 <USBH_GetDescriptor>
 800e80c:	4603      	mov	r3, r0
 800e80e:	72fb      	strb	r3, [r7, #11]
 800e810:	7afb      	ldrb	r3, [r7, #11]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d107      	bne.n	800e826 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f203 3336 	addw	r3, r3, #822	; 0x336
 800e81c:	887a      	ldrh	r2, [r7, #2]
 800e81e:	68f9      	ldr	r1, [r7, #12]
 800e820:	4618      	mov	r0, r3
 800e822:	f000 f963 	bl	800eaec <USBH_ParseCfgDesc>
  }

  return status;
 800e826:	7afb      	ldrb	r3, [r7, #11]
}
 800e828:	4618      	mov	r0, r3
 800e82a:	3710      	adds	r7, #16
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}

0800e830 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b088      	sub	sp, #32
 800e834:	af02      	add	r7, sp, #8
 800e836:	60f8      	str	r0, [r7, #12]
 800e838:	607a      	str	r2, [r7, #4]
 800e83a:	461a      	mov	r2, r3
 800e83c:	460b      	mov	r3, r1
 800e83e:	72fb      	strb	r3, [r7, #11]
 800e840:	4613      	mov	r3, r2
 800e842:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800e844:	7afb      	ldrb	r3, [r7, #11]
 800e846:	b29b      	uxth	r3, r3
 800e848:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e84c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800e854:	893b      	ldrh	r3, [r7, #8]
 800e856:	9300      	str	r3, [sp, #0]
 800e858:	460b      	mov	r3, r1
 800e85a:	2100      	movs	r1, #0
 800e85c:	68f8      	ldr	r0, [r7, #12]
 800e85e:	f000 f812 	bl	800e886 <USBH_GetDescriptor>
 800e862:	4603      	mov	r3, r0
 800e864:	75fb      	strb	r3, [r7, #23]
 800e866:	7dfb      	ldrb	r3, [r7, #23]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d107      	bne.n	800e87c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e872:	893a      	ldrh	r2, [r7, #8]
 800e874:	6879      	ldr	r1, [r7, #4]
 800e876:	4618      	mov	r0, r3
 800e878:	f000 fa34 	bl	800ece4 <USBH_ParseStringDesc>
  }

  return status;
 800e87c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3718      	adds	r7, #24
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}

0800e886 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800e886:	b580      	push	{r7, lr}
 800e888:	b084      	sub	sp, #16
 800e88a:	af00      	add	r7, sp, #0
 800e88c:	60f8      	str	r0, [r7, #12]
 800e88e:	607b      	str	r3, [r7, #4]
 800e890:	460b      	mov	r3, r1
 800e892:	72fb      	strb	r3, [r7, #11]
 800e894:	4613      	mov	r3, r2
 800e896:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	789b      	ldrb	r3, [r3, #2]
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d11c      	bne.n	800e8da <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800e8a0:	7afb      	ldrb	r3, [r7, #11]
 800e8a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e8a6:	b2da      	uxtb	r2, r3
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2206      	movs	r2, #6
 800e8b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	893a      	ldrh	r2, [r7, #8]
 800e8b6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800e8b8:	893b      	ldrh	r3, [r7, #8]
 800e8ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e8be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e8c2:	d104      	bne.n	800e8ce <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f240 4209 	movw	r2, #1033	; 0x409
 800e8ca:	829a      	strh	r2, [r3, #20]
 800e8cc:	e002      	b.n	800e8d4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	8b3a      	ldrh	r2, [r7, #24]
 800e8d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800e8da:	8b3b      	ldrh	r3, [r7, #24]
 800e8dc:	461a      	mov	r2, r3
 800e8de:	6879      	ldr	r1, [r7, #4]
 800e8e0:	68f8      	ldr	r0, [r7, #12]
 800e8e2:	f000 fa4b 	bl	800ed7c <USBH_CtlReq>
 800e8e6:	4603      	mov	r3, r0
}
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	3710      	adds	r7, #16
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}

0800e8f0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b082      	sub	sp, #8
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	460b      	mov	r3, r1
 800e8fa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	789b      	ldrb	r3, [r3, #2]
 800e900:	2b01      	cmp	r3, #1
 800e902:	d10f      	bne.n	800e924 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2200      	movs	r2, #0
 800e908:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2205      	movs	r2, #5
 800e90e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800e910:	78fb      	ldrb	r3, [r7, #3]
 800e912:	b29a      	uxth	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2200      	movs	r2, #0
 800e91c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2200      	movs	r2, #0
 800e922:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800e924:	2200      	movs	r2, #0
 800e926:	2100      	movs	r1, #0
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f000 fa27 	bl	800ed7c <USBH_CtlReq>
 800e92e:	4603      	mov	r3, r0
}
 800e930:	4618      	mov	r0, r3
 800e932:	3708      	adds	r7, #8
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}

0800e938 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b082      	sub	sp, #8
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
 800e940:	460b      	mov	r3, r1
 800e942:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	789b      	ldrb	r3, [r3, #2]
 800e948:	2b01      	cmp	r3, #1
 800e94a:	d10e      	bne.n	800e96a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2200      	movs	r2, #0
 800e950:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2209      	movs	r2, #9
 800e956:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	887a      	ldrh	r2, [r7, #2]
 800e95c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2200      	movs	r2, #0
 800e962:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2200      	movs	r2, #0
 800e968:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800e96a:	2200      	movs	r2, #0
 800e96c:	2100      	movs	r1, #0
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f000 fa04 	bl	800ed7c <USBH_CtlReq>
 800e974:	4603      	mov	r3, r0
}
 800e976:	4618      	mov	r0, r3
 800e978:	3708      	adds	r7, #8
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}

0800e97e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800e97e:	b580      	push	{r7, lr}
 800e980:	b082      	sub	sp, #8
 800e982:	af00      	add	r7, sp, #0
 800e984:	6078      	str	r0, [r7, #4]
 800e986:	460b      	mov	r3, r1
 800e988:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	789b      	ldrb	r3, [r3, #2]
 800e98e:	2b01      	cmp	r3, #1
 800e990:	d10f      	bne.n	800e9b2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2200      	movs	r2, #0
 800e996:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2203      	movs	r2, #3
 800e99c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800e99e:	78fb      	ldrb	r3, [r7, #3]
 800e9a0:	b29a      	uxth	r2, r3
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	2100      	movs	r1, #0
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f000 f9e0 	bl	800ed7c <USBH_CtlReq>
 800e9bc:	4603      	mov	r3, r0
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3708      	adds	r7, #8
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}

0800e9c6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800e9c6:	b580      	push	{r7, lr}
 800e9c8:	b082      	sub	sp, #8
 800e9ca:	af00      	add	r7, sp, #0
 800e9cc:	6078      	str	r0, [r7, #4]
 800e9ce:	460b      	mov	r3, r1
 800e9d0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	789b      	ldrb	r3, [r3, #2]
 800e9d6:	2b01      	cmp	r3, #1
 800e9d8:	d10f      	bne.n	800e9fa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2202      	movs	r2, #2
 800e9de:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800e9ec:	78fb      	ldrb	r3, [r7, #3]
 800e9ee:	b29a      	uxth	r2, r3
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	2100      	movs	r1, #0
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f000 f9bc 	bl	800ed7c <USBH_CtlReq>
 800ea04:	4603      	mov	r3, r0
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3708      	adds	r7, #8
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}

0800ea0e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ea0e:	b480      	push	{r7}
 800ea10:	b085      	sub	sp, #20
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	60f8      	str	r0, [r7, #12]
 800ea16:	60b9      	str	r1, [r7, #8]
 800ea18:	4613      	mov	r3, r2
 800ea1a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	781a      	ldrb	r2, [r3, #0]
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	785a      	ldrb	r2, [r3, #1]
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	3302      	adds	r3, #2
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	b29a      	uxth	r2, r3
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	3303      	adds	r3, #3
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	021b      	lsls	r3, r3, #8
 800ea3e:	b29b      	uxth	r3, r3
 800ea40:	4313      	orrs	r3, r2
 800ea42:	b29a      	uxth	r2, r3
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	791a      	ldrb	r2, [r3, #4]
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	795a      	ldrb	r2, [r3, #5]
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	799a      	ldrb	r2, [r3, #6]
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	79da      	ldrb	r2, [r3, #7]
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800ea68:	88fb      	ldrh	r3, [r7, #6]
 800ea6a:	2b08      	cmp	r3, #8
 800ea6c:	d939      	bls.n	800eae2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	3308      	adds	r3, #8
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	b29a      	uxth	r2, r3
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	3309      	adds	r3, #9
 800ea7a:	781b      	ldrb	r3, [r3, #0]
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	021b      	lsls	r3, r3, #8
 800ea80:	b29b      	uxth	r3, r3
 800ea82:	4313      	orrs	r3, r2
 800ea84:	b29a      	uxth	r2, r3
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	330a      	adds	r3, #10
 800ea8e:	781b      	ldrb	r3, [r3, #0]
 800ea90:	b29a      	uxth	r2, r3
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	330b      	adds	r3, #11
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	b29b      	uxth	r3, r3
 800ea9a:	021b      	lsls	r3, r3, #8
 800ea9c:	b29b      	uxth	r3, r3
 800ea9e:	4313      	orrs	r3, r2
 800eaa0:	b29a      	uxth	r2, r3
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	330c      	adds	r3, #12
 800eaaa:	781b      	ldrb	r3, [r3, #0]
 800eaac:	b29a      	uxth	r2, r3
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	330d      	adds	r3, #13
 800eab2:	781b      	ldrb	r3, [r3, #0]
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	021b      	lsls	r3, r3, #8
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	4313      	orrs	r3, r2
 800eabc:	b29a      	uxth	r2, r3
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	7b9a      	ldrb	r2, [r3, #14]
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	7bda      	ldrb	r2, [r3, #15]
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	7c1a      	ldrb	r2, [r3, #16]
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	7c5a      	ldrb	r2, [r3, #17]
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	745a      	strb	r2, [r3, #17]
  }
}
 800eae2:	bf00      	nop
 800eae4:	3714      	adds	r7, #20
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bc80      	pop	{r7}
 800eaea:	4770      	bx	lr

0800eaec <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b08a      	sub	sp, #40	; 0x28
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	60f8      	str	r0, [r7, #12]
 800eaf4:	60b9      	str	r1, [r7, #8]
 800eaf6:	4613      	mov	r3, r2
 800eaf8:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800eafe:	2300      	movs	r3, #0
 800eb00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800eb04:	2300      	movs	r3, #0
 800eb06:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	781a      	ldrb	r2, [r3, #0]
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	785a      	ldrb	r2, [r3, #1]
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	3302      	adds	r3, #2
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	b29a      	uxth	r2, r3
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	3303      	adds	r3, #3
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	b29b      	uxth	r3, r3
 800eb2e:	021b      	lsls	r3, r3, #8
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	4313      	orrs	r3, r2
 800eb34:	b29a      	uxth	r2, r3
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	791a      	ldrb	r2, [r3, #4]
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	795a      	ldrb	r2, [r3, #5]
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	799a      	ldrb	r2, [r3, #6]
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	79da      	ldrb	r2, [r3, #7]
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	7a1a      	ldrb	r2, [r3, #8]
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800eb62:	88fb      	ldrh	r3, [r7, #6]
 800eb64:	2b09      	cmp	r3, #9
 800eb66:	d95f      	bls.n	800ec28 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800eb68:	2309      	movs	r3, #9
 800eb6a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800eb70:	e051      	b.n	800ec16 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800eb72:	f107 0316 	add.w	r3, r7, #22
 800eb76:	4619      	mov	r1, r3
 800eb78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb7a:	f000 f8e5 	bl	800ed48 <USBH_GetNextDesc>
 800eb7e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800eb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb82:	785b      	ldrb	r3, [r3, #1]
 800eb84:	2b04      	cmp	r3, #4
 800eb86:	d146      	bne.n	800ec16 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800eb88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb8c:	221a      	movs	r2, #26
 800eb8e:	fb02 f303 	mul.w	r3, r2, r3
 800eb92:	3308      	adds	r3, #8
 800eb94:	68fa      	ldr	r2, [r7, #12]
 800eb96:	4413      	add	r3, r2
 800eb98:	3302      	adds	r3, #2
 800eb9a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800eb9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb9e:	69f8      	ldr	r0, [r7, #28]
 800eba0:	f000 f846 	bl	800ec30 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800eba4:	2300      	movs	r3, #0
 800eba6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ebae:	e022      	b.n	800ebf6 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ebb0:	f107 0316 	add.w	r3, r7, #22
 800ebb4:	4619      	mov	r1, r3
 800ebb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebb8:	f000 f8c6 	bl	800ed48 <USBH_GetNextDesc>
 800ebbc:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ebbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc0:	785b      	ldrb	r3, [r3, #1]
 800ebc2:	2b05      	cmp	r3, #5
 800ebc4:	d117      	bne.n	800ebf6 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ebc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ebca:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ebce:	3201      	adds	r2, #1
 800ebd0:	00d2      	lsls	r2, r2, #3
 800ebd2:	211a      	movs	r1, #26
 800ebd4:	fb01 f303 	mul.w	r3, r1, r3
 800ebd8:	4413      	add	r3, r2
 800ebda:	3308      	adds	r3, #8
 800ebdc:	68fa      	ldr	r2, [r7, #12]
 800ebde:	4413      	add	r3, r2
 800ebe0:	3304      	adds	r3, #4
 800ebe2:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ebe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ebe6:	69b8      	ldr	r0, [r7, #24]
 800ebe8:	f000 f850 	bl	800ec8c <USBH_ParseEPDesc>
            ep_ix++;
 800ebec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ebf6:	69fb      	ldr	r3, [r7, #28]
 800ebf8:	791b      	ldrb	r3, [r3, #4]
 800ebfa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d204      	bcs.n	800ec0c <USBH_ParseCfgDesc+0x120>
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	885a      	ldrh	r2, [r3, #2]
 800ec06:	8afb      	ldrh	r3, [r7, #22]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d8d1      	bhi.n	800ebb0 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ec0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec10:	3301      	adds	r3, #1
 800ec12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ec16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec1a:	2b01      	cmp	r3, #1
 800ec1c:	d804      	bhi.n	800ec28 <USBH_ParseCfgDesc+0x13c>
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	885a      	ldrh	r2, [r3, #2]
 800ec22:	8afb      	ldrh	r3, [r7, #22]
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d8a4      	bhi.n	800eb72 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800ec28:	bf00      	nop
 800ec2a:	3728      	adds	r7, #40	; 0x28
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}

0800ec30 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b083      	sub	sp, #12
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	781a      	ldrb	r2, [r3, #0]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	785a      	ldrb	r2, [r3, #1]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	789a      	ldrb	r2, [r3, #2]
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	78da      	ldrb	r2, [r3, #3]
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	791a      	ldrb	r2, [r3, #4]
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	795a      	ldrb	r2, [r3, #5]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	799a      	ldrb	r2, [r3, #6]
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	79da      	ldrb	r2, [r3, #7]
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	7a1a      	ldrb	r2, [r3, #8]
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	721a      	strb	r2, [r3, #8]
}
 800ec82:	bf00      	nop
 800ec84:	370c      	adds	r7, #12
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bc80      	pop	{r7}
 800ec8a:	4770      	bx	lr

0800ec8c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b083      	sub	sp, #12
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	781a      	ldrb	r2, [r3, #0]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	785a      	ldrb	r2, [r3, #1]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	789a      	ldrb	r2, [r3, #2]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	78da      	ldrb	r2, [r3, #3]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	3304      	adds	r3, #4
 800ecba:	781b      	ldrb	r3, [r3, #0]
 800ecbc:	b29a      	uxth	r2, r3
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	3305      	adds	r3, #5
 800ecc2:	781b      	ldrb	r3, [r3, #0]
 800ecc4:	b29b      	uxth	r3, r3
 800ecc6:	021b      	lsls	r3, r3, #8
 800ecc8:	b29b      	uxth	r3, r3
 800ecca:	4313      	orrs	r3, r2
 800eccc:	b29a      	uxth	r2, r3
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	799a      	ldrb	r2, [r3, #6]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	719a      	strb	r2, [r3, #6]
}
 800ecda:	bf00      	nop
 800ecdc:	370c      	adds	r7, #12
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bc80      	pop	{r7}
 800ece2:	4770      	bx	lr

0800ece4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ece4:	b480      	push	{r7}
 800ece6:	b087      	sub	sp, #28
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	60b9      	str	r1, [r7, #8]
 800ecee:	4613      	mov	r3, r2
 800ecf0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	781b      	ldrb	r3, [r3, #0]
 800ecf8:	2b03      	cmp	r3, #3
 800ecfa:	d120      	bne.n	800ed3e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	1e9a      	subs	r2, r3, #2
 800ed02:	88fb      	ldrh	r3, [r7, #6]
 800ed04:	4293      	cmp	r3, r2
 800ed06:	bf28      	it	cs
 800ed08:	4613      	movcs	r3, r2
 800ed0a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	3302      	adds	r3, #2
 800ed10:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ed12:	2300      	movs	r3, #0
 800ed14:	82fb      	strh	r3, [r7, #22]
 800ed16:	e00b      	b.n	800ed30 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ed18:	8afb      	ldrh	r3, [r7, #22]
 800ed1a:	68fa      	ldr	r2, [r7, #12]
 800ed1c:	4413      	add	r3, r2
 800ed1e:	781a      	ldrb	r2, [r3, #0]
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	3301      	adds	r3, #1
 800ed28:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ed2a:	8afb      	ldrh	r3, [r7, #22]
 800ed2c:	3302      	adds	r3, #2
 800ed2e:	82fb      	strh	r3, [r7, #22]
 800ed30:	8afa      	ldrh	r2, [r7, #22]
 800ed32:	8abb      	ldrh	r3, [r7, #20]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d3ef      	bcc.n	800ed18 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	701a      	strb	r2, [r3, #0]
  }
}
 800ed3e:	bf00      	nop
 800ed40:	371c      	adds	r7, #28
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bc80      	pop	{r7}
 800ed46:	4770      	bx	lr

0800ed48 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800ed48:	b480      	push	{r7}
 800ed4a:	b085      	sub	sp, #20
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	881a      	ldrh	r2, [r3, #0]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	781b      	ldrb	r3, [r3, #0]
 800ed5a:	b29b      	uxth	r3, r3
 800ed5c:	4413      	add	r3, r2
 800ed5e:	b29a      	uxth	r2, r3
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	781b      	ldrb	r3, [r3, #0]
 800ed68:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	4413      	add	r3, r2
 800ed6e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ed70:	68fb      	ldr	r3, [r7, #12]
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3714      	adds	r7, #20
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bc80      	pop	{r7}
 800ed7a:	4770      	bx	lr

0800ed7c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b086      	sub	sp, #24
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	60f8      	str	r0, [r7, #12]
 800ed84:	60b9      	str	r1, [r7, #8]
 800ed86:	4613      	mov	r3, r2
 800ed88:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	789b      	ldrb	r3, [r3, #2]
 800ed92:	2b01      	cmp	r3, #1
 800ed94:	d002      	beq.n	800ed9c <USBH_CtlReq+0x20>
 800ed96:	2b02      	cmp	r3, #2
 800ed98:	d01d      	beq.n	800edd6 <USBH_CtlReq+0x5a>
        }
      }
      break;

    default:
      break;
 800ed9a:	e042      	b.n	800ee22 <USBH_CtlReq+0xa6>
      phost->Control.buff = buff;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	68ba      	ldr	r2, [r7, #8]
 800eda0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	88fa      	ldrh	r2, [r7, #6]
 800eda6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	2201      	movs	r2, #1
 800edac:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	2202      	movs	r2, #2
 800edb2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800edb4:	2301      	movs	r3, #1
 800edb6:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	2203      	movs	r2, #3
 800edbc:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800edcc:	2200      	movs	r2, #0
 800edce:	4619      	mov	r1, r3
 800edd0:	f003 fe1a 	bl	8012a08 <osMessagePut>
      break;
 800edd4:	e025      	b.n	800ee22 <USBH_CtlReq+0xa6>
      status = USBH_HandleControl(phost);
 800edd6:	68f8      	ldr	r0, [r7, #12]
 800edd8:	f000 f828 	bl	800ee2c <USBH_HandleControl>
 800eddc:	4603      	mov	r3, r0
 800edde:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800ede0:	7dfb      	ldrb	r3, [r7, #23]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d108      	bne.n	800edf8 <USBH_CtlReq+0x7c>
        phost->RequestState = CMD_SEND;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2201      	movs	r2, #1
 800edea:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	2200      	movs	r2, #0
 800edf0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800edf2:	2300      	movs	r3, #0
 800edf4:	75fb      	strb	r3, [r7, #23]
      break;
 800edf6:	e013      	b.n	800ee20 <USBH_CtlReq+0xa4>
      else if (status == USBH_NOT_SUPPORTED)
 800edf8:	7dfb      	ldrb	r3, [r7, #23]
 800edfa:	2b03      	cmp	r3, #3
 800edfc:	d108      	bne.n	800ee10 <USBH_CtlReq+0x94>
        phost->RequestState = CMD_SEND;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2201      	movs	r2, #1
 800ee02:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	2200      	movs	r2, #0
 800ee08:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ee0a:	2303      	movs	r3, #3
 800ee0c:	75fb      	strb	r3, [r7, #23]
      break;
 800ee0e:	e007      	b.n	800ee20 <USBH_CtlReq+0xa4>
        if (status == USBH_FAIL)
 800ee10:	7dfb      	ldrb	r3, [r7, #23]
 800ee12:	2b02      	cmp	r3, #2
 800ee14:	d104      	bne.n	800ee20 <USBH_CtlReq+0xa4>
          phost->RequestState = CMD_SEND;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	2201      	movs	r2, #1
 800ee1a:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 800ee1c:	2302      	movs	r3, #2
 800ee1e:	75fb      	strb	r3, [r7, #23]
      break;
 800ee20:	bf00      	nop
  }
  return status;
 800ee22:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	3718      	adds	r7, #24
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}

0800ee2c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b086      	sub	sp, #24
 800ee30:	af02      	add	r7, sp, #8
 800ee32:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ee34:	2301      	movs	r3, #1
 800ee36:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	7e1b      	ldrb	r3, [r3, #24]
 800ee40:	3b01      	subs	r3, #1
 800ee42:	2b0a      	cmp	r3, #10
 800ee44:	f200 821d 	bhi.w	800f282 <USBH_HandleControl+0x456>
 800ee48:	a201      	add	r2, pc, #4	; (adr r2, 800ee50 <USBH_HandleControl+0x24>)
 800ee4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee4e:	bf00      	nop
 800ee50:	0800ee7d 	.word	0x0800ee7d
 800ee54:	0800ee97 	.word	0x0800ee97
 800ee58:	0800ef39 	.word	0x0800ef39
 800ee5c:	0800ef5f 	.word	0x0800ef5f
 800ee60:	0800efeb 	.word	0x0800efeb
 800ee64:	0800f015 	.word	0x0800f015
 800ee68:	0800f0d7 	.word	0x0800f0d7
 800ee6c:	0800f0f9 	.word	0x0800f0f9
 800ee70:	0800f18b 	.word	0x0800f18b
 800ee74:	0800f1b1 	.word	0x0800f1b1
 800ee78:	0800f243 	.word	0x0800f243
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f103 0110 	add.w	r1, r3, #16
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	795b      	ldrb	r3, [r3, #5]
 800ee86:	461a      	mov	r2, r3
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f000 fa0b 	bl	800f2a4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2202      	movs	r2, #2
 800ee92:	761a      	strb	r2, [r3, #24]
      break;
 800ee94:	e200      	b.n	800f298 <USBH_HandleControl+0x46c>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	795b      	ldrb	r3, [r3, #5]
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f006 fcb9 	bl	8015814 <USBH_LL_GetURBState>
 800eea2:	4603      	mov	r3, r0
 800eea4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800eea6:	7bbb      	ldrb	r3, [r7, #14]
 800eea8:	2b01      	cmp	r3, #1
 800eeaa:	d12c      	bne.n	800ef06 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	7c1b      	ldrb	r3, [r3, #16]
 800eeb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eeb4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	8adb      	ldrh	r3, [r3, #22]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d00a      	beq.n	800eed4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800eebe:	7b7b      	ldrb	r3, [r7, #13]
 800eec0:	2b80      	cmp	r3, #128	; 0x80
 800eec2:	d103      	bne.n	800eecc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2203      	movs	r2, #3
 800eec8:	761a      	strb	r2, [r3, #24]
 800eeca:	e00d      	b.n	800eee8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2205      	movs	r2, #5
 800eed0:	761a      	strb	r2, [r3, #24]
 800eed2:	e009      	b.n	800eee8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800eed4:	7b7b      	ldrb	r3, [r7, #13]
 800eed6:	2b80      	cmp	r3, #128	; 0x80
 800eed8:	d103      	bne.n	800eee2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2209      	movs	r2, #9
 800eede:	761a      	strb	r2, [r3, #24]
 800eee0:	e002      	b.n	800eee8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2207      	movs	r2, #7
 800eee6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2203      	movs	r2, #3
 800eeec:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800eefc:	2200      	movs	r2, #0
 800eefe:	4619      	mov	r1, r3
 800ef00:	f003 fd82 	bl	8012a08 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ef04:	e1bf      	b.n	800f286 <USBH_HandleControl+0x45a>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ef06:	7bbb      	ldrb	r3, [r7, #14]
 800ef08:	2b04      	cmp	r3, #4
 800ef0a:	d003      	beq.n	800ef14 <USBH_HandleControl+0xe8>
 800ef0c:	7bbb      	ldrb	r3, [r7, #14]
 800ef0e:	2b02      	cmp	r3, #2
 800ef10:	f040 81b9 	bne.w	800f286 <USBH_HandleControl+0x45a>
          phost->Control.state = CTRL_ERROR;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	220b      	movs	r2, #11
 800ef18:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2203      	movs	r2, #3
 800ef1e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ef2e:	2200      	movs	r2, #0
 800ef30:	4619      	mov	r1, r3
 800ef32:	f003 fd69 	bl	8012a08 <osMessagePut>
      break;
 800ef36:	e1a6      	b.n	800f286 <USBH_HandleControl+0x45a>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800ef3e:	b29a      	uxth	r2, r3
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	6899      	ldr	r1, [r3, #8]
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	899a      	ldrh	r2, [r3, #12]
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	791b      	ldrb	r3, [r3, #4]
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f000 f9e6 	bl	800f322 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2204      	movs	r2, #4
 800ef5a:	761a      	strb	r2, [r3, #24]
      break;
 800ef5c:	e19c      	b.n	800f298 <USBH_HandleControl+0x46c>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	791b      	ldrb	r3, [r3, #4]
 800ef62:	4619      	mov	r1, r3
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f006 fc55 	bl	8015814 <USBH_LL_GetURBState>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ef6e:	7bbb      	ldrb	r3, [r7, #14]
 800ef70:	2b01      	cmp	r3, #1
 800ef72:	d110      	bne.n	800ef96 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2209      	movs	r2, #9
 800ef78:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2203      	movs	r2, #3
 800ef7e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ef8e:	2200      	movs	r2, #0
 800ef90:	4619      	mov	r1, r3
 800ef92:	f003 fd39 	bl	8012a08 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ef96:	7bbb      	ldrb	r3, [r7, #14]
 800ef98:	2b05      	cmp	r3, #5
 800ef9a:	d110      	bne.n	800efbe <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ef9c:	2303      	movs	r3, #3
 800ef9e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2203      	movs	r2, #3
 800efa4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800efb4:	2200      	movs	r2, #0
 800efb6:	4619      	mov	r1, r3
 800efb8:	f003 fd26 	bl	8012a08 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800efbc:	e165      	b.n	800f28a <USBH_HandleControl+0x45e>
        if (URB_Status == USBH_URB_ERROR)
 800efbe:	7bbb      	ldrb	r3, [r7, #14]
 800efc0:	2b04      	cmp	r3, #4
 800efc2:	f040 8162 	bne.w	800f28a <USBH_HandleControl+0x45e>
          phost->Control.state = CTRL_ERROR;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	220b      	movs	r2, #11
 800efca:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2203      	movs	r2, #3
 800efd0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800efe0:	2200      	movs	r2, #0
 800efe2:	4619      	mov	r1, r3
 800efe4:	f003 fd10 	bl	8012a08 <osMessagePut>
      break;
 800efe8:	e14f      	b.n	800f28a <USBH_HandleControl+0x45e>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6899      	ldr	r1, [r3, #8]
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	899a      	ldrh	r2, [r3, #12]
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	795b      	ldrb	r3, [r3, #5]
 800eff6:	2001      	movs	r0, #1
 800eff8:	9000      	str	r0, [sp, #0]
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f000 f96c 	bl	800f2d8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800f006:	b29a      	uxth	r2, r3
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2206      	movs	r2, #6
 800f010:	761a      	strb	r2, [r3, #24]
      break;
 800f012:	e141      	b.n	800f298 <USBH_HandleControl+0x46c>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	795b      	ldrb	r3, [r3, #5]
 800f018:	4619      	mov	r1, r3
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f006 fbfa 	bl	8015814 <USBH_LL_GetURBState>
 800f020:	4603      	mov	r3, r0
 800f022:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f024:	7bbb      	ldrb	r3, [r7, #14]
 800f026:	2b01      	cmp	r3, #1
 800f028:	d111      	bne.n	800f04e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2207      	movs	r2, #7
 800f02e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2203      	movs	r2, #3
 800f034:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f044:	2200      	movs	r2, #0
 800f046:	4619      	mov	r1, r3
 800f048:	f003 fcde 	bl	8012a08 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f04c:	e11f      	b.n	800f28e <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_STALL)
 800f04e:	7bbb      	ldrb	r3, [r7, #14]
 800f050:	2b05      	cmp	r3, #5
 800f052:	d113      	bne.n	800f07c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	220c      	movs	r2, #12
 800f058:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f05a:	2303      	movs	r3, #3
 800f05c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	2203      	movs	r2, #3
 800f062:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f072:	2200      	movs	r2, #0
 800f074:	4619      	mov	r1, r3
 800f076:	f003 fcc7 	bl	8012a08 <osMessagePut>
      break;
 800f07a:	e108      	b.n	800f28e <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f07c:	7bbb      	ldrb	r3, [r7, #14]
 800f07e:	2b02      	cmp	r3, #2
 800f080:	d111      	bne.n	800f0a6 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2205      	movs	r2, #5
 800f086:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2203      	movs	r2, #3
 800f08c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f09c:	2200      	movs	r2, #0
 800f09e:	4619      	mov	r1, r3
 800f0a0:	f003 fcb2 	bl	8012a08 <osMessagePut>
      break;
 800f0a4:	e0f3      	b.n	800f28e <USBH_HandleControl+0x462>
        if (URB_Status == USBH_URB_ERROR)
 800f0a6:	7bbb      	ldrb	r3, [r7, #14]
 800f0a8:	2b04      	cmp	r3, #4
 800f0aa:	f040 80f0 	bne.w	800f28e <USBH_HandleControl+0x462>
          phost->Control.state = CTRL_ERROR;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	220b      	movs	r2, #11
 800f0b2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f0b4:	2302      	movs	r3, #2
 800f0b6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2203      	movs	r2, #3
 800f0bc:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	f003 fc9a 	bl	8012a08 <osMessagePut>
      break;
 800f0d4:	e0db      	b.n	800f28e <USBH_HandleControl+0x462>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	791b      	ldrb	r3, [r3, #4]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	2100      	movs	r1, #0
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f000 f91f 	bl	800f322 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800f0ea:	b29a      	uxth	r2, r3
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2208      	movs	r2, #8
 800f0f4:	761a      	strb	r2, [r3, #24]

      break;
 800f0f6:	e0cf      	b.n	800f298 <USBH_HandleControl+0x46c>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	791b      	ldrb	r3, [r3, #4]
 800f0fc:	4619      	mov	r1, r3
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f006 fb88 	bl	8015814 <USBH_LL_GetURBState>
 800f104:	4603      	mov	r3, r0
 800f106:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f108:	7bbb      	ldrb	r3, [r7, #14]
 800f10a:	2b01      	cmp	r3, #1
 800f10c:	d113      	bne.n	800f136 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	220d      	movs	r2, #13
 800f112:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f114:	2300      	movs	r3, #0
 800f116:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2203      	movs	r2, #3
 800f11c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f12c:	2200      	movs	r2, #0
 800f12e:	4619      	mov	r1, r3
 800f130:	f003 fc6a 	bl	8012a08 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f134:	e0ad      	b.n	800f292 <USBH_HandleControl+0x466>
      else if (URB_Status == USBH_URB_ERROR)
 800f136:	7bbb      	ldrb	r3, [r7, #14]
 800f138:	2b04      	cmp	r3, #4
 800f13a:	d111      	bne.n	800f160 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	220b      	movs	r2, #11
 800f140:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2203      	movs	r2, #3
 800f146:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f156:	2200      	movs	r2, #0
 800f158:	4619      	mov	r1, r3
 800f15a:	f003 fc55 	bl	8012a08 <osMessagePut>
      break;
 800f15e:	e098      	b.n	800f292 <USBH_HandleControl+0x466>
        if (URB_Status == USBH_URB_STALL)
 800f160:	7bbb      	ldrb	r3, [r7, #14]
 800f162:	2b05      	cmp	r3, #5
 800f164:	f040 8095 	bne.w	800f292 <USBH_HandleControl+0x466>
          status = USBH_NOT_SUPPORTED;
 800f168:	2303      	movs	r3, #3
 800f16a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2203      	movs	r2, #3
 800f170:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f180:	2200      	movs	r2, #0
 800f182:	4619      	mov	r1, r3
 800f184:	f003 fc40 	bl	8012a08 <osMessagePut>
      break;
 800f188:	e083      	b.n	800f292 <USBH_HandleControl+0x466>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	795b      	ldrb	r3, [r3, #5]
 800f18e:	2201      	movs	r2, #1
 800f190:	9200      	str	r2, [sp, #0]
 800f192:	2200      	movs	r2, #0
 800f194:	2100      	movs	r1, #0
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f000 f89e 	bl	800f2d8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800f1a2:	b29a      	uxth	r2, r3
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	220a      	movs	r2, #10
 800f1ac:	761a      	strb	r2, [r3, #24]
      break;
 800f1ae:	e073      	b.n	800f298 <USBH_HandleControl+0x46c>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	795b      	ldrb	r3, [r3, #5]
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	6878      	ldr	r0, [r7, #4]
 800f1b8:	f006 fb2c 	bl	8015814 <USBH_LL_GetURBState>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f1c0:	7bbb      	ldrb	r3, [r7, #14]
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	d113      	bne.n	800f1ee <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	220d      	movs	r2, #13
 800f1ce:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2203      	movs	r2, #3
 800f1d4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	4619      	mov	r1, r3
 800f1e8:	f003 fc0e 	bl	8012a08 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f1ec:	e053      	b.n	800f296 <USBH_HandleControl+0x46a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f1ee:	7bbb      	ldrb	r3, [r7, #14]
 800f1f0:	2b02      	cmp	r3, #2
 800f1f2:	d111      	bne.n	800f218 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2209      	movs	r2, #9
 800f1f8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2203      	movs	r2, #3
 800f1fe:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f20e:	2200      	movs	r2, #0
 800f210:	4619      	mov	r1, r3
 800f212:	f003 fbf9 	bl	8012a08 <osMessagePut>
      break;
 800f216:	e03e      	b.n	800f296 <USBH_HandleControl+0x46a>
        if (URB_Status == USBH_URB_ERROR)
 800f218:	7bbb      	ldrb	r3, [r7, #14]
 800f21a:	2b04      	cmp	r3, #4
 800f21c:	d13b      	bne.n	800f296 <USBH_HandleControl+0x46a>
          phost->Control.state = CTRL_ERROR;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	220b      	movs	r2, #11
 800f222:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2203      	movs	r2, #3
 800f228:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800f238:	2200      	movs	r2, #0
 800f23a:	4619      	mov	r1, r3
 800f23c:	f003 fbe4 	bl	8012a08 <osMessagePut>
      break;
 800f240:	e029      	b.n	800f296 <USBH_HandleControl+0x46a>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	7e5b      	ldrb	r3, [r3, #25]
 800f246:	3301      	adds	r3, #1
 800f248:	b2da      	uxtb	r2, r3
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	765a      	strb	r2, [r3, #25]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	7e5b      	ldrb	r3, [r3, #25]
 800f252:	2b02      	cmp	r3, #2
 800f254:	d806      	bhi.n	800f264 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2201      	movs	r2, #1
 800f25a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2201      	movs	r2, #1
 800f260:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f262:	e019      	b.n	800f298 <USBH_HandleControl+0x46c>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800f26a:	2106      	movs	r1, #6
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2200      	movs	r2, #0
 800f274:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2200      	movs	r2, #0
 800f27a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f27c:	2302      	movs	r3, #2
 800f27e:	73fb      	strb	r3, [r7, #15]
      break;
 800f280:	e00a      	b.n	800f298 <USBH_HandleControl+0x46c>

    default:
      break;
 800f282:	bf00      	nop
 800f284:	e008      	b.n	800f298 <USBH_HandleControl+0x46c>
      break;
 800f286:	bf00      	nop
 800f288:	e006      	b.n	800f298 <USBH_HandleControl+0x46c>
      break;
 800f28a:	bf00      	nop
 800f28c:	e004      	b.n	800f298 <USBH_HandleControl+0x46c>
      break;
 800f28e:	bf00      	nop
 800f290:	e002      	b.n	800f298 <USBH_HandleControl+0x46c>
      break;
 800f292:	bf00      	nop
 800f294:	e000      	b.n	800f298 <USBH_HandleControl+0x46c>
      break;
 800f296:	bf00      	nop
  }

  return status;
 800f298:	7bfb      	ldrb	r3, [r7, #15]
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3710      	adds	r7, #16
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop

0800f2a4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b088      	sub	sp, #32
 800f2a8:	af04      	add	r7, sp, #16
 800f2aa:	60f8      	str	r0, [r7, #12]
 800f2ac:	60b9      	str	r1, [r7, #8]
 800f2ae:	4613      	mov	r3, r2
 800f2b0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f2b2:	79f9      	ldrb	r1, [r7, #7]
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	9303      	str	r3, [sp, #12]
 800f2b8:	2308      	movs	r3, #8
 800f2ba:	9302      	str	r3, [sp, #8]
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	9301      	str	r3, [sp, #4]
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	9300      	str	r3, [sp, #0]
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	68f8      	ldr	r0, [r7, #12]
 800f2ca:	f006 fa72 	bl	80157b2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800f2ce:	2300      	movs	r3, #0
}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3710      	adds	r7, #16
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}

0800f2d8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b088      	sub	sp, #32
 800f2dc:	af04      	add	r7, sp, #16
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	4611      	mov	r1, r2
 800f2e4:	461a      	mov	r2, r3
 800f2e6:	460b      	mov	r3, r1
 800f2e8:	80fb      	strh	r3, [r7, #6]
 800f2ea:	4613      	mov	r3, r2
 800f2ec:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d001      	beq.n	800f2fc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f2fc:	7979      	ldrb	r1, [r7, #5]
 800f2fe:	7e3b      	ldrb	r3, [r7, #24]
 800f300:	9303      	str	r3, [sp, #12]
 800f302:	88fb      	ldrh	r3, [r7, #6]
 800f304:	9302      	str	r3, [sp, #8]
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	9301      	str	r3, [sp, #4]
 800f30a:	2301      	movs	r3, #1
 800f30c:	9300      	str	r3, [sp, #0]
 800f30e:	2300      	movs	r3, #0
 800f310:	2200      	movs	r2, #0
 800f312:	68f8      	ldr	r0, [r7, #12]
 800f314:	f006 fa4d 	bl	80157b2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f318:	2300      	movs	r3, #0
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3710      	adds	r7, #16
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}

0800f322 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f322:	b580      	push	{r7, lr}
 800f324:	b088      	sub	sp, #32
 800f326:	af04      	add	r7, sp, #16
 800f328:	60f8      	str	r0, [r7, #12]
 800f32a:	60b9      	str	r1, [r7, #8]
 800f32c:	4611      	mov	r1, r2
 800f32e:	461a      	mov	r2, r3
 800f330:	460b      	mov	r3, r1
 800f332:	80fb      	strh	r3, [r7, #6]
 800f334:	4613      	mov	r3, r2
 800f336:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f338:	7979      	ldrb	r1, [r7, #5]
 800f33a:	2300      	movs	r3, #0
 800f33c:	9303      	str	r3, [sp, #12]
 800f33e:	88fb      	ldrh	r3, [r7, #6]
 800f340:	9302      	str	r3, [sp, #8]
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	9301      	str	r3, [sp, #4]
 800f346:	2301      	movs	r3, #1
 800f348:	9300      	str	r3, [sp, #0]
 800f34a:	2300      	movs	r3, #0
 800f34c:	2201      	movs	r2, #1
 800f34e:	68f8      	ldr	r0, [r7, #12]
 800f350:	f006 fa2f 	bl	80157b2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f354:	2300      	movs	r3, #0

}
 800f356:	4618      	mov	r0, r3
 800f358:	3710      	adds	r7, #16
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b088      	sub	sp, #32
 800f362:	af04      	add	r7, sp, #16
 800f364:	60f8      	str	r0, [r7, #12]
 800f366:	60b9      	str	r1, [r7, #8]
 800f368:	4611      	mov	r1, r2
 800f36a:	461a      	mov	r2, r3
 800f36c:	460b      	mov	r3, r1
 800f36e:	80fb      	strh	r3, [r7, #6]
 800f370:	4613      	mov	r3, r2
 800f372:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d001      	beq.n	800f382 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f37e:	2300      	movs	r3, #0
 800f380:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f382:	7979      	ldrb	r1, [r7, #5]
 800f384:	7e3b      	ldrb	r3, [r7, #24]
 800f386:	9303      	str	r3, [sp, #12]
 800f388:	88fb      	ldrh	r3, [r7, #6]
 800f38a:	9302      	str	r3, [sp, #8]
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	9301      	str	r3, [sp, #4]
 800f390:	2301      	movs	r3, #1
 800f392:	9300      	str	r3, [sp, #0]
 800f394:	2302      	movs	r3, #2
 800f396:	2200      	movs	r2, #0
 800f398:	68f8      	ldr	r0, [r7, #12]
 800f39a:	f006 fa0a 	bl	80157b2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f39e:	2300      	movs	r3, #0
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3710      	adds	r7, #16
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}

0800f3a8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b088      	sub	sp, #32
 800f3ac:	af04      	add	r7, sp, #16
 800f3ae:	60f8      	str	r0, [r7, #12]
 800f3b0:	60b9      	str	r1, [r7, #8]
 800f3b2:	4611      	mov	r1, r2
 800f3b4:	461a      	mov	r2, r3
 800f3b6:	460b      	mov	r3, r1
 800f3b8:	80fb      	strh	r3, [r7, #6]
 800f3ba:	4613      	mov	r3, r2
 800f3bc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f3be:	7979      	ldrb	r1, [r7, #5]
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	9303      	str	r3, [sp, #12]
 800f3c4:	88fb      	ldrh	r3, [r7, #6]
 800f3c6:	9302      	str	r3, [sp, #8]
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	9301      	str	r3, [sp, #4]
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	9300      	str	r3, [sp, #0]
 800f3d0:	2302      	movs	r3, #2
 800f3d2:	2201      	movs	r2, #1
 800f3d4:	68f8      	ldr	r0, [r7, #12]
 800f3d6:	f006 f9ec 	bl	80157b2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f3da:	2300      	movs	r3, #0
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3710      	adds	r7, #16
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}

0800f3e4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b086      	sub	sp, #24
 800f3e8:	af04      	add	r7, sp, #16
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	4608      	mov	r0, r1
 800f3ee:	4611      	mov	r1, r2
 800f3f0:	461a      	mov	r2, r3
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	70fb      	strb	r3, [r7, #3]
 800f3f6:	460b      	mov	r3, r1
 800f3f8:	70bb      	strb	r3, [r7, #2]
 800f3fa:	4613      	mov	r3, r2
 800f3fc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f3fe:	7878      	ldrb	r0, [r7, #1]
 800f400:	78ba      	ldrb	r2, [r7, #2]
 800f402:	78f9      	ldrb	r1, [r7, #3]
 800f404:	8b3b      	ldrh	r3, [r7, #24]
 800f406:	9302      	str	r3, [sp, #8]
 800f408:	7d3b      	ldrb	r3, [r7, #20]
 800f40a:	9301      	str	r3, [sp, #4]
 800f40c:	7c3b      	ldrb	r3, [r7, #16]
 800f40e:	9300      	str	r3, [sp, #0]
 800f410:	4603      	mov	r3, r0
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f006 f97f 	bl	8015716 <USBH_LL_OpenPipe>

  return USBH_OK;
 800f418:	2300      	movs	r3, #0
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3708      	adds	r7, #8
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}

0800f422 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f422:	b580      	push	{r7, lr}
 800f424:	b082      	sub	sp, #8
 800f426:	af00      	add	r7, sp, #0
 800f428:	6078      	str	r0, [r7, #4]
 800f42a:	460b      	mov	r3, r1
 800f42c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800f42e:	78fb      	ldrb	r3, [r7, #3]
 800f430:	4619      	mov	r1, r3
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f006 f99e 	bl	8015774 <USBH_LL_ClosePipe>

  return USBH_OK;
 800f438:	2300      	movs	r3, #0
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3708      	adds	r7, #8
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}

0800f442 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f442:	b580      	push	{r7, lr}
 800f444:	b084      	sub	sp, #16
 800f446:	af00      	add	r7, sp, #0
 800f448:	6078      	str	r0, [r7, #4]
 800f44a:	460b      	mov	r3, r1
 800f44c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	f000 f832 	bl	800f4b8 <USBH_GetFreePipe>
 800f454:	4603      	mov	r3, r0
 800f456:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f458:	89fb      	ldrh	r3, [r7, #14]
 800f45a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f45e:	4293      	cmp	r3, r2
 800f460:	d009      	beq.n	800f476 <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800f462:	78fb      	ldrb	r3, [r7, #3]
 800f464:	89fa      	ldrh	r2, [r7, #14]
 800f466:	f002 020f 	and.w	r2, r2, #15
 800f46a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	32e0      	adds	r2, #224	; 0xe0
 800f472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 800f476:	89fb      	ldrh	r3, [r7, #14]
 800f478:	b2db      	uxtb	r3, r3
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3710      	adds	r7, #16
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}

0800f482 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f482:	b480      	push	{r7}
 800f484:	b083      	sub	sp, #12
 800f486:	af00      	add	r7, sp, #0
 800f488:	6078      	str	r0, [r7, #4]
 800f48a:	460b      	mov	r3, r1
 800f48c:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800f48e:	78fb      	ldrb	r3, [r7, #3]
 800f490:	2b0a      	cmp	r3, #10
 800f492:	d80b      	bhi.n	800f4ac <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f494:	78fa      	ldrb	r2, [r7, #3]
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	32e0      	adds	r2, #224	; 0xe0
 800f49a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f49e:	78fa      	ldrb	r2, [r7, #3]
 800f4a0:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	32e0      	adds	r2, #224	; 0xe0
 800f4a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 800f4ac:	2300      	movs	r3, #0
}
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	370c      	adds	r7, #12
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bc80      	pop	{r7}
 800f4b6:	4770      	bx	lr

0800f4b8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	b085      	sub	sp, #20
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	73fb      	strb	r3, [r7, #15]
 800f4c8:	e00e      	b.n	800f4e8 <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f4ca:	7bfa      	ldrb	r2, [r7, #15]
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	32e0      	adds	r2, #224	; 0xe0
 800f4d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d102      	bne.n	800f4e2 <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 800f4dc:	7bfb      	ldrb	r3, [r7, #15]
 800f4de:	b29b      	uxth	r3, r3
 800f4e0:	e007      	b.n	800f4f2 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800f4e2:	7bfb      	ldrb	r3, [r7, #15]
 800f4e4:	3301      	adds	r3, #1
 800f4e6:	73fb      	strb	r3, [r7, #15]
 800f4e8:	7bfb      	ldrb	r3, [r7, #15]
 800f4ea:	2b0a      	cmp	r3, #10
 800f4ec:	d9ed      	bls.n	800f4ca <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f4ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3714      	adds	r7, #20
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bc80      	pop	{r7}
 800f4fa:	4770      	bx	lr

0800f4fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b084      	sub	sp, #16
 800f500:	af00      	add	r7, sp, #0
 800f502:	4603      	mov	r3, r0
 800f504:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f506:	79fb      	ldrb	r3, [r7, #7]
 800f508:	4a08      	ldr	r2, [pc, #32]	; (800f52c <disk_status+0x30>)
 800f50a:	009b      	lsls	r3, r3, #2
 800f50c:	4413      	add	r3, r2
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	685b      	ldr	r3, [r3, #4]
 800f512:	79fa      	ldrb	r2, [r7, #7]
 800f514:	4905      	ldr	r1, [pc, #20]	; (800f52c <disk_status+0x30>)
 800f516:	440a      	add	r2, r1
 800f518:	7a12      	ldrb	r2, [r2, #8]
 800f51a:	4610      	mov	r0, r2
 800f51c:	4798      	blx	r3
 800f51e:	4603      	mov	r3, r0
 800f520:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f522:	7bfb      	ldrb	r3, [r7, #15]
}
 800f524:	4618      	mov	r0, r3
 800f526:	3710      	adds	r7, #16
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}
 800f52c:	2000573c 	.word	0x2000573c

0800f530 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b084      	sub	sp, #16
 800f534:	af00      	add	r7, sp, #0
 800f536:	4603      	mov	r3, r0
 800f538:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f53a:	2300      	movs	r3, #0
 800f53c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800f53e:	79fb      	ldrb	r3, [r7, #7]
 800f540:	4a0d      	ldr	r2, [pc, #52]	; (800f578 <disk_initialize+0x48>)
 800f542:	5cd3      	ldrb	r3, [r2, r3]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d111      	bne.n	800f56c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800f548:	79fb      	ldrb	r3, [r7, #7]
 800f54a:	4a0b      	ldr	r2, [pc, #44]	; (800f578 <disk_initialize+0x48>)
 800f54c:	2101      	movs	r1, #1
 800f54e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f550:	79fb      	ldrb	r3, [r7, #7]
 800f552:	4a09      	ldr	r2, [pc, #36]	; (800f578 <disk_initialize+0x48>)
 800f554:	009b      	lsls	r3, r3, #2
 800f556:	4413      	add	r3, r2
 800f558:	685b      	ldr	r3, [r3, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	79fa      	ldrb	r2, [r7, #7]
 800f55e:	4906      	ldr	r1, [pc, #24]	; (800f578 <disk_initialize+0x48>)
 800f560:	440a      	add	r2, r1
 800f562:	7a12      	ldrb	r2, [r2, #8]
 800f564:	4610      	mov	r0, r2
 800f566:	4798      	blx	r3
 800f568:	4603      	mov	r3, r0
 800f56a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f56c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f56e:	4618      	mov	r0, r3
 800f570:	3710      	adds	r7, #16
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}
 800f576:	bf00      	nop
 800f578:	2000573c 	.word	0x2000573c

0800f57c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f57c:	b590      	push	{r4, r7, lr}
 800f57e:	b087      	sub	sp, #28
 800f580:	af00      	add	r7, sp, #0
 800f582:	60b9      	str	r1, [r7, #8]
 800f584:	607a      	str	r2, [r7, #4]
 800f586:	603b      	str	r3, [r7, #0]
 800f588:	4603      	mov	r3, r0
 800f58a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f58c:	7bfb      	ldrb	r3, [r7, #15]
 800f58e:	4a0a      	ldr	r2, [pc, #40]	; (800f5b8 <disk_read+0x3c>)
 800f590:	009b      	lsls	r3, r3, #2
 800f592:	4413      	add	r3, r2
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	689c      	ldr	r4, [r3, #8]
 800f598:	7bfb      	ldrb	r3, [r7, #15]
 800f59a:	4a07      	ldr	r2, [pc, #28]	; (800f5b8 <disk_read+0x3c>)
 800f59c:	4413      	add	r3, r2
 800f59e:	7a18      	ldrb	r0, [r3, #8]
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	68b9      	ldr	r1, [r7, #8]
 800f5a6:	47a0      	blx	r4
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	75fb      	strb	r3, [r7, #23]
  return res;
 800f5ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	371c      	adds	r7, #28
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd90      	pop	{r4, r7, pc}
 800f5b6:	bf00      	nop
 800f5b8:	2000573c 	.word	0x2000573c

0800f5bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f5bc:	b590      	push	{r4, r7, lr}
 800f5be:	b087      	sub	sp, #28
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	60b9      	str	r1, [r7, #8]
 800f5c4:	607a      	str	r2, [r7, #4]
 800f5c6:	603b      	str	r3, [r7, #0]
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f5cc:	7bfb      	ldrb	r3, [r7, #15]
 800f5ce:	4a0a      	ldr	r2, [pc, #40]	; (800f5f8 <disk_write+0x3c>)
 800f5d0:	009b      	lsls	r3, r3, #2
 800f5d2:	4413      	add	r3, r2
 800f5d4:	685b      	ldr	r3, [r3, #4]
 800f5d6:	68dc      	ldr	r4, [r3, #12]
 800f5d8:	7bfb      	ldrb	r3, [r7, #15]
 800f5da:	4a07      	ldr	r2, [pc, #28]	; (800f5f8 <disk_write+0x3c>)
 800f5dc:	4413      	add	r3, r2
 800f5de:	7a18      	ldrb	r0, [r3, #8]
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	68b9      	ldr	r1, [r7, #8]
 800f5e6:	47a0      	blx	r4
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	75fb      	strb	r3, [r7, #23]
  return res;
 800f5ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	371c      	adds	r7, #28
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd90      	pop	{r4, r7, pc}
 800f5f6:	bf00      	nop
 800f5f8:	2000573c 	.word	0x2000573c

0800f5fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b084      	sub	sp, #16
 800f600:	af00      	add	r7, sp, #0
 800f602:	4603      	mov	r3, r0
 800f604:	603a      	str	r2, [r7, #0]
 800f606:	71fb      	strb	r3, [r7, #7]
 800f608:	460b      	mov	r3, r1
 800f60a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f60c:	79fb      	ldrb	r3, [r7, #7]
 800f60e:	4a09      	ldr	r2, [pc, #36]	; (800f634 <disk_ioctl+0x38>)
 800f610:	009b      	lsls	r3, r3, #2
 800f612:	4413      	add	r3, r2
 800f614:	685b      	ldr	r3, [r3, #4]
 800f616:	691b      	ldr	r3, [r3, #16]
 800f618:	79fa      	ldrb	r2, [r7, #7]
 800f61a:	4906      	ldr	r1, [pc, #24]	; (800f634 <disk_ioctl+0x38>)
 800f61c:	440a      	add	r2, r1
 800f61e:	7a10      	ldrb	r0, [r2, #8]
 800f620:	79b9      	ldrb	r1, [r7, #6]
 800f622:	683a      	ldr	r2, [r7, #0]
 800f624:	4798      	blx	r3
 800f626:	4603      	mov	r3, r0
 800f628:	73fb      	strb	r3, [r7, #15]
  return res;
 800f62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3710      	adds	r7, #16
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}
 800f634:	2000573c 	.word	0x2000573c

0800f638 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f638:	b480      	push	{r7}
 800f63a:	b087      	sub	sp, #28
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	60f8      	str	r0, [r7, #12]
 800f640:	60b9      	str	r1, [r7, #8]
 800f642:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800f64c:	e007      	b.n	800f65e <mem_cpy+0x26>
		*d++ = *s++;
 800f64e:	693a      	ldr	r2, [r7, #16]
 800f650:	1c53      	adds	r3, r2, #1
 800f652:	613b      	str	r3, [r7, #16]
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	1c59      	adds	r1, r3, #1
 800f658:	6179      	str	r1, [r7, #20]
 800f65a:	7812      	ldrb	r2, [r2, #0]
 800f65c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	1e5a      	subs	r2, r3, #1
 800f662:	607a      	str	r2, [r7, #4]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d1f2      	bne.n	800f64e <mem_cpy+0x16>
}
 800f668:	bf00      	nop
 800f66a:	bf00      	nop
 800f66c:	371c      	adds	r7, #28
 800f66e:	46bd      	mov	sp, r7
 800f670:	bc80      	pop	{r7}
 800f672:	4770      	bx	lr

0800f674 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f674:	b480      	push	{r7}
 800f676:	b087      	sub	sp, #28
 800f678:	af00      	add	r7, sp, #0
 800f67a:	60f8      	str	r0, [r7, #12]
 800f67c:	60b9      	str	r1, [r7, #8]
 800f67e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800f684:	e005      	b.n	800f692 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	1c5a      	adds	r2, r3, #1
 800f68a:	617a      	str	r2, [r7, #20]
 800f68c:	68ba      	ldr	r2, [r7, #8]
 800f68e:	b2d2      	uxtb	r2, r2
 800f690:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	1e5a      	subs	r2, r3, #1
 800f696:	607a      	str	r2, [r7, #4]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d1f4      	bne.n	800f686 <mem_set+0x12>
}
 800f69c:	bf00      	nop
 800f69e:	bf00      	nop
 800f6a0:	371c      	adds	r7, #28
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bc80      	pop	{r7}
 800f6a6:	4770      	bx	lr

0800f6a8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800f6a8:	b480      	push	{r7}
 800f6aa:	b089      	sub	sp, #36	; 0x24
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	60f8      	str	r0, [r7, #12]
 800f6b0:	60b9      	str	r1, [r7, #8]
 800f6b2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	61fb      	str	r3, [r7, #28]
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f6bc:	2300      	movs	r3, #0
 800f6be:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800f6c0:	bf00      	nop
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	1e5a      	subs	r2, r3, #1
 800f6c6:	607a      	str	r2, [r7, #4]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d00d      	beq.n	800f6e8 <mem_cmp+0x40>
 800f6cc:	69fb      	ldr	r3, [r7, #28]
 800f6ce:	1c5a      	adds	r2, r3, #1
 800f6d0:	61fa      	str	r2, [r7, #28]
 800f6d2:	781b      	ldrb	r3, [r3, #0]
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	69bb      	ldr	r3, [r7, #24]
 800f6d8:	1c5a      	adds	r2, r3, #1
 800f6da:	61ba      	str	r2, [r7, #24]
 800f6dc:	781b      	ldrb	r3, [r3, #0]
 800f6de:	1acb      	subs	r3, r1, r3
 800f6e0:	617b      	str	r3, [r7, #20]
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d0ec      	beq.n	800f6c2 <mem_cmp+0x1a>
	return r;
 800f6e8:	697b      	ldr	r3, [r7, #20]
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3724      	adds	r7, #36	; 0x24
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bc80      	pop	{r7}
 800f6f2:	4770      	bx	lr

0800f6f4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800f6f4:	b480      	push	{r7}
 800f6f6:	b083      	sub	sp, #12
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f6fe:	e002      	b.n	800f706 <chk_chr+0x12>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	3301      	adds	r3, #1
 800f704:	607b      	str	r3, [r7, #4]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d005      	beq.n	800f71a <chk_chr+0x26>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	461a      	mov	r2, r3
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	4293      	cmp	r3, r2
 800f718:	d1f2      	bne.n	800f700 <chk_chr+0xc>
	return *str;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	781b      	ldrb	r3, [r3, #0]
}
 800f71e:	4618      	mov	r0, r3
 800f720:	370c      	adds	r7, #12
 800f722:	46bd      	mov	sp, r7
 800f724:	bc80      	pop	{r7}
 800f726:	4770      	bx	lr

0800f728 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b082      	sub	sp, #8
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800f736:	4618      	mov	r0, r3
 800f738:	f002 ffc4 	bl	80126c4 <ff_req_grant>
 800f73c:	4603      	mov	r3, r0
}
 800f73e:	4618      	mov	r0, r3
 800f740:	3708      	adds	r7, #8
 800f742:	46bd      	mov	sp, r7
 800f744:	bd80      	pop	{r7, pc}

0800f746 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800f746:	b580      	push	{r7, lr}
 800f748:	b082      	sub	sp, #8
 800f74a:	af00      	add	r7, sp, #0
 800f74c:	6078      	str	r0, [r7, #4]
 800f74e:	460b      	mov	r3, r1
 800f750:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d011      	beq.n	800f77c <unlock_fs+0x36>
 800f758:	78fb      	ldrb	r3, [r7, #3]
 800f75a:	2b0c      	cmp	r3, #12
 800f75c:	d00e      	beq.n	800f77c <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 800f75e:	78fb      	ldrb	r3, [r7, #3]
 800f760:	2b0b      	cmp	r3, #11
 800f762:	d00b      	beq.n	800f77c <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 800f764:	78fb      	ldrb	r3, [r7, #3]
 800f766:	2b09      	cmp	r3, #9
 800f768:	d008      	beq.n	800f77c <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 800f76a:	78fb      	ldrb	r3, [r7, #3]
 800f76c:	2b0f      	cmp	r3, #15
 800f76e:	d005      	beq.n	800f77c <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800f776:	4618      	mov	r0, r3
 800f778:	f002 ffb9 	bl	80126ee <ff_rel_grant>
	}
}
 800f77c:	bf00      	nop
 800f77e:	3708      	adds	r7, #8
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}

0800f784 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f784:	b480      	push	{r7}
 800f786:	b085      	sub	sp, #20
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f78e:	2300      	movs	r3, #0
 800f790:	60bb      	str	r3, [r7, #8]
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	60fb      	str	r3, [r7, #12]
 800f796:	e038      	b.n	800f80a <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800f798:	492f      	ldr	r1, [pc, #188]	; (800f858 <chk_lock+0xd4>)
 800f79a:	68fa      	ldr	r2, [r7, #12]
 800f79c:	4613      	mov	r3, r2
 800f79e:	005b      	lsls	r3, r3, #1
 800f7a0:	4413      	add	r3, r2
 800f7a2:	009b      	lsls	r3, r3, #2
 800f7a4:	440b      	add	r3, r1
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d029      	beq.n	800f800 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800f7ac:	492a      	ldr	r1, [pc, #168]	; (800f858 <chk_lock+0xd4>)
 800f7ae:	68fa      	ldr	r2, [r7, #12]
 800f7b0:	4613      	mov	r3, r2
 800f7b2:	005b      	lsls	r3, r3, #1
 800f7b4:	4413      	add	r3, r2
 800f7b6:	009b      	lsls	r3, r3, #2
 800f7b8:	440b      	add	r3, r1
 800f7ba:	681a      	ldr	r2, [r3, #0]
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	d11e      	bne.n	800f804 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800f7c6:	4924      	ldr	r1, [pc, #144]	; (800f858 <chk_lock+0xd4>)
 800f7c8:	68fa      	ldr	r2, [r7, #12]
 800f7ca:	4613      	mov	r3, r2
 800f7cc:	005b      	lsls	r3, r3, #1
 800f7ce:	4413      	add	r3, r2
 800f7d0:	009b      	lsls	r3, r3, #2
 800f7d2:	440b      	add	r3, r1
 800f7d4:	3304      	adds	r3, #4
 800f7d6:	681a      	ldr	r2, [r3, #0]
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d110      	bne.n	800f804 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800f7e2:	491d      	ldr	r1, [pc, #116]	; (800f858 <chk_lock+0xd4>)
 800f7e4:	68fa      	ldr	r2, [r7, #12]
 800f7e6:	4613      	mov	r3, r2
 800f7e8:	005b      	lsls	r3, r3, #1
 800f7ea:	4413      	add	r3, r2
 800f7ec:	009b      	lsls	r3, r3, #2
 800f7ee:	440b      	add	r3, r1
 800f7f0:	3308      	adds	r3, #8
 800f7f2:	881a      	ldrh	r2, [r3, #0]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 800f7fa:	429a      	cmp	r2, r3
 800f7fc:	d102      	bne.n	800f804 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800f7fe:	e007      	b.n	800f810 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800f800:	2301      	movs	r3, #1
 800f802:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	3301      	adds	r3, #1
 800f808:	60fb      	str	r3, [r7, #12]
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	2b01      	cmp	r3, #1
 800f80e:	d9c3      	bls.n	800f798 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	2b02      	cmp	r3, #2
 800f814:	d109      	bne.n	800f82a <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d102      	bne.n	800f822 <chk_lock+0x9e>
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	2b02      	cmp	r3, #2
 800f820:	d101      	bne.n	800f826 <chk_lock+0xa2>
 800f822:	2300      	movs	r3, #0
 800f824:	e013      	b.n	800f84e <chk_lock+0xca>
 800f826:	2312      	movs	r3, #18
 800f828:	e011      	b.n	800f84e <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d10b      	bne.n	800f848 <chk_lock+0xc4>
 800f830:	4909      	ldr	r1, [pc, #36]	; (800f858 <chk_lock+0xd4>)
 800f832:	68fa      	ldr	r2, [r7, #12]
 800f834:	4613      	mov	r3, r2
 800f836:	005b      	lsls	r3, r3, #1
 800f838:	4413      	add	r3, r2
 800f83a:	009b      	lsls	r3, r3, #2
 800f83c:	440b      	add	r3, r1
 800f83e:	330a      	adds	r3, #10
 800f840:	881b      	ldrh	r3, [r3, #0]
 800f842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f846:	d101      	bne.n	800f84c <chk_lock+0xc8>
 800f848:	2310      	movs	r3, #16
 800f84a:	e000      	b.n	800f84e <chk_lock+0xca>
 800f84c:	2300      	movs	r3, #0
}
 800f84e:	4618      	mov	r0, r3
 800f850:	3714      	adds	r7, #20
 800f852:	46bd      	mov	sp, r7
 800f854:	bc80      	pop	{r7}
 800f856:	4770      	bx	lr
 800f858:	20005724 	.word	0x20005724

0800f85c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f85c:	b480      	push	{r7}
 800f85e:	b083      	sub	sp, #12
 800f860:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f862:	2300      	movs	r3, #0
 800f864:	607b      	str	r3, [r7, #4]
 800f866:	e002      	b.n	800f86e <enq_lock+0x12>
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	3301      	adds	r3, #1
 800f86c:	607b      	str	r3, [r7, #4]
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2b01      	cmp	r3, #1
 800f872:	d809      	bhi.n	800f888 <enq_lock+0x2c>
 800f874:	490a      	ldr	r1, [pc, #40]	; (800f8a0 <enq_lock+0x44>)
 800f876:	687a      	ldr	r2, [r7, #4]
 800f878:	4613      	mov	r3, r2
 800f87a:	005b      	lsls	r3, r3, #1
 800f87c:	4413      	add	r3, r2
 800f87e:	009b      	lsls	r3, r3, #2
 800f880:	440b      	add	r3, r1
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d1ef      	bne.n	800f868 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2b02      	cmp	r3, #2
 800f88c:	bf14      	ite	ne
 800f88e:	2301      	movne	r3, #1
 800f890:	2300      	moveq	r3, #0
 800f892:	b2db      	uxtb	r3, r3
}
 800f894:	4618      	mov	r0, r3
 800f896:	370c      	adds	r7, #12
 800f898:	46bd      	mov	sp, r7
 800f89a:	bc80      	pop	{r7}
 800f89c:	4770      	bx	lr
 800f89e:	bf00      	nop
 800f8a0:	20005724 	.word	0x20005724

0800f8a4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b085      	sub	sp, #20
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	60fb      	str	r3, [r7, #12]
 800f8b2:	e02b      	b.n	800f90c <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800f8b4:	4955      	ldr	r1, [pc, #340]	; (800fa0c <inc_lock+0x168>)
 800f8b6:	68fa      	ldr	r2, [r7, #12]
 800f8b8:	4613      	mov	r3, r2
 800f8ba:	005b      	lsls	r3, r3, #1
 800f8bc:	4413      	add	r3, r2
 800f8be:	009b      	lsls	r3, r3, #2
 800f8c0:	440b      	add	r3, r1
 800f8c2:	681a      	ldr	r2, [r3, #0]
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d11b      	bne.n	800f906 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800f8ce:	494f      	ldr	r1, [pc, #316]	; (800fa0c <inc_lock+0x168>)
 800f8d0:	68fa      	ldr	r2, [r7, #12]
 800f8d2:	4613      	mov	r3, r2
 800f8d4:	005b      	lsls	r3, r3, #1
 800f8d6:	4413      	add	r3, r2
 800f8d8:	009b      	lsls	r3, r3, #2
 800f8da:	440b      	add	r3, r1
 800f8dc:	3304      	adds	r3, #4
 800f8de:	681a      	ldr	r2, [r3, #0]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d10d      	bne.n	800f906 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800f8ea:	4948      	ldr	r1, [pc, #288]	; (800fa0c <inc_lock+0x168>)
 800f8ec:	68fa      	ldr	r2, [r7, #12]
 800f8ee:	4613      	mov	r3, r2
 800f8f0:	005b      	lsls	r3, r3, #1
 800f8f2:	4413      	add	r3, r2
 800f8f4:	009b      	lsls	r3, r3, #2
 800f8f6:	440b      	add	r3, r1
 800f8f8:	3308      	adds	r3, #8
 800f8fa:	881a      	ldrh	r2, [r3, #0]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800f902:	429a      	cmp	r2, r3
 800f904:	d006      	beq.n	800f914 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	3301      	adds	r3, #1
 800f90a:	60fb      	str	r3, [r7, #12]
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	2b01      	cmp	r3, #1
 800f910:	d9d0      	bls.n	800f8b4 <inc_lock+0x10>
 800f912:	e000      	b.n	800f916 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800f914:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2b02      	cmp	r3, #2
 800f91a:	d145      	bne.n	800f9a8 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f91c:	2300      	movs	r3, #0
 800f91e:	60fb      	str	r3, [r7, #12]
 800f920:	e002      	b.n	800f928 <inc_lock+0x84>
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	3301      	adds	r3, #1
 800f926:	60fb      	str	r3, [r7, #12]
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	2b01      	cmp	r3, #1
 800f92c:	d809      	bhi.n	800f942 <inc_lock+0x9e>
 800f92e:	4937      	ldr	r1, [pc, #220]	; (800fa0c <inc_lock+0x168>)
 800f930:	68fa      	ldr	r2, [r7, #12]
 800f932:	4613      	mov	r3, r2
 800f934:	005b      	lsls	r3, r3, #1
 800f936:	4413      	add	r3, r2
 800f938:	009b      	lsls	r3, r3, #2
 800f93a:	440b      	add	r3, r1
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d1ef      	bne.n	800f922 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	2b02      	cmp	r3, #2
 800f946:	d101      	bne.n	800f94c <inc_lock+0xa8>
 800f948:	2300      	movs	r3, #0
 800f94a:	e05a      	b.n	800fa02 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800f952:	482e      	ldr	r0, [pc, #184]	; (800fa0c <inc_lock+0x168>)
 800f954:	68fa      	ldr	r2, [r7, #12]
 800f956:	4613      	mov	r3, r2
 800f958:	005b      	lsls	r3, r3, #1
 800f95a:	4413      	add	r3, r2
 800f95c:	009b      	lsls	r3, r3, #2
 800f95e:	4403      	add	r3, r0
 800f960:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800f968:	4828      	ldr	r0, [pc, #160]	; (800fa0c <inc_lock+0x168>)
 800f96a:	68fa      	ldr	r2, [r7, #12]
 800f96c:	4613      	mov	r3, r2
 800f96e:	005b      	lsls	r3, r3, #1
 800f970:	4413      	add	r3, r2
 800f972:	009b      	lsls	r3, r3, #2
 800f974:	4403      	add	r3, r0
 800f976:	3304      	adds	r3, #4
 800f978:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800f980:	4922      	ldr	r1, [pc, #136]	; (800fa0c <inc_lock+0x168>)
 800f982:	68fa      	ldr	r2, [r7, #12]
 800f984:	4613      	mov	r3, r2
 800f986:	005b      	lsls	r3, r3, #1
 800f988:	4413      	add	r3, r2
 800f98a:	009b      	lsls	r3, r3, #2
 800f98c:	440b      	add	r3, r1
 800f98e:	3308      	adds	r3, #8
 800f990:	4602      	mov	r2, r0
 800f992:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800f994:	491d      	ldr	r1, [pc, #116]	; (800fa0c <inc_lock+0x168>)
 800f996:	68fa      	ldr	r2, [r7, #12]
 800f998:	4613      	mov	r3, r2
 800f99a:	005b      	lsls	r3, r3, #1
 800f99c:	4413      	add	r3, r2
 800f99e:	009b      	lsls	r3, r3, #2
 800f9a0:	440b      	add	r3, r1
 800f9a2:	330a      	adds	r3, #10
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d00c      	beq.n	800f9c8 <inc_lock+0x124>
 800f9ae:	4917      	ldr	r1, [pc, #92]	; (800fa0c <inc_lock+0x168>)
 800f9b0:	68fa      	ldr	r2, [r7, #12]
 800f9b2:	4613      	mov	r3, r2
 800f9b4:	005b      	lsls	r3, r3, #1
 800f9b6:	4413      	add	r3, r2
 800f9b8:	009b      	lsls	r3, r3, #2
 800f9ba:	440b      	add	r3, r1
 800f9bc:	330a      	adds	r3, #10
 800f9be:	881b      	ldrh	r3, [r3, #0]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d001      	beq.n	800f9c8 <inc_lock+0x124>
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	e01c      	b.n	800fa02 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d10b      	bne.n	800f9e6 <inc_lock+0x142>
 800f9ce:	490f      	ldr	r1, [pc, #60]	; (800fa0c <inc_lock+0x168>)
 800f9d0:	68fa      	ldr	r2, [r7, #12]
 800f9d2:	4613      	mov	r3, r2
 800f9d4:	005b      	lsls	r3, r3, #1
 800f9d6:	4413      	add	r3, r2
 800f9d8:	009b      	lsls	r3, r3, #2
 800f9da:	440b      	add	r3, r1
 800f9dc:	330a      	adds	r3, #10
 800f9de:	881b      	ldrh	r3, [r3, #0]
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	b299      	uxth	r1, r3
 800f9e4:	e001      	b.n	800f9ea <inc_lock+0x146>
 800f9e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f9ea:	4808      	ldr	r0, [pc, #32]	; (800fa0c <inc_lock+0x168>)
 800f9ec:	68fa      	ldr	r2, [r7, #12]
 800f9ee:	4613      	mov	r3, r2
 800f9f0:	005b      	lsls	r3, r3, #1
 800f9f2:	4413      	add	r3, r2
 800f9f4:	009b      	lsls	r3, r3, #2
 800f9f6:	4403      	add	r3, r0
 800f9f8:	330a      	adds	r3, #10
 800f9fa:	460a      	mov	r2, r1
 800f9fc:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	3301      	adds	r3, #1
}
 800fa02:	4618      	mov	r0, r3
 800fa04:	3714      	adds	r7, #20
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bc80      	pop	{r7}
 800fa0a:	4770      	bx	lr
 800fa0c:	20005724 	.word	0x20005724

0800fa10 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fa10:	b480      	push	{r7}
 800fa12:	b085      	sub	sp, #20
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	3b01      	subs	r3, #1
 800fa1c:	607b      	str	r3, [r7, #4]
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	d82e      	bhi.n	800fa82 <dec_lock+0x72>
		n = Files[i].ctr;
 800fa24:	491b      	ldr	r1, [pc, #108]	; (800fa94 <dec_lock+0x84>)
 800fa26:	687a      	ldr	r2, [r7, #4]
 800fa28:	4613      	mov	r3, r2
 800fa2a:	005b      	lsls	r3, r3, #1
 800fa2c:	4413      	add	r3, r2
 800fa2e:	009b      	lsls	r3, r3, #2
 800fa30:	440b      	add	r3, r1
 800fa32:	330a      	adds	r3, #10
 800fa34:	881b      	ldrh	r3, [r3, #0]
 800fa36:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fa38:	89fb      	ldrh	r3, [r7, #14]
 800fa3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa3e:	d101      	bne.n	800fa44 <dec_lock+0x34>
 800fa40:	2300      	movs	r3, #0
 800fa42:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800fa44:	89fb      	ldrh	r3, [r7, #14]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d002      	beq.n	800fa50 <dec_lock+0x40>
 800fa4a:	89fb      	ldrh	r3, [r7, #14]
 800fa4c:	3b01      	subs	r3, #1
 800fa4e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fa50:	4910      	ldr	r1, [pc, #64]	; (800fa94 <dec_lock+0x84>)
 800fa52:	687a      	ldr	r2, [r7, #4]
 800fa54:	4613      	mov	r3, r2
 800fa56:	005b      	lsls	r3, r3, #1
 800fa58:	4413      	add	r3, r2
 800fa5a:	009b      	lsls	r3, r3, #2
 800fa5c:	440b      	add	r3, r1
 800fa5e:	330a      	adds	r3, #10
 800fa60:	89fa      	ldrh	r2, [r7, #14]
 800fa62:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fa64:	89fb      	ldrh	r3, [r7, #14]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d108      	bne.n	800fa7c <dec_lock+0x6c>
 800fa6a:	490a      	ldr	r1, [pc, #40]	; (800fa94 <dec_lock+0x84>)
 800fa6c:	687a      	ldr	r2, [r7, #4]
 800fa6e:	4613      	mov	r3, r2
 800fa70:	005b      	lsls	r3, r3, #1
 800fa72:	4413      	add	r3, r2
 800fa74:	009b      	lsls	r3, r3, #2
 800fa76:	440b      	add	r3, r1
 800fa78:	2200      	movs	r2, #0
 800fa7a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	737b      	strb	r3, [r7, #13]
 800fa80:	e001      	b.n	800fa86 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fa82:	2302      	movs	r3, #2
 800fa84:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fa86:	7b7b      	ldrb	r3, [r7, #13]
}
 800fa88:	4618      	mov	r0, r3
 800fa8a:	3714      	adds	r7, #20
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bc80      	pop	{r7}
 800fa90:	4770      	bx	lr
 800fa92:	bf00      	nop
 800fa94:	20005724 	.word	0x20005724

0800fa98 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	b085      	sub	sp, #20
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800faa0:	2300      	movs	r3, #0
 800faa2:	60fb      	str	r3, [r7, #12]
 800faa4:	e016      	b.n	800fad4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800faa6:	4910      	ldr	r1, [pc, #64]	; (800fae8 <clear_lock+0x50>)
 800faa8:	68fa      	ldr	r2, [r7, #12]
 800faaa:	4613      	mov	r3, r2
 800faac:	005b      	lsls	r3, r3, #1
 800faae:	4413      	add	r3, r2
 800fab0:	009b      	lsls	r3, r3, #2
 800fab2:	440b      	add	r3, r1
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	687a      	ldr	r2, [r7, #4]
 800fab8:	429a      	cmp	r2, r3
 800faba:	d108      	bne.n	800face <clear_lock+0x36>
 800fabc:	490a      	ldr	r1, [pc, #40]	; (800fae8 <clear_lock+0x50>)
 800fabe:	68fa      	ldr	r2, [r7, #12]
 800fac0:	4613      	mov	r3, r2
 800fac2:	005b      	lsls	r3, r3, #1
 800fac4:	4413      	add	r3, r2
 800fac6:	009b      	lsls	r3, r3, #2
 800fac8:	440b      	add	r3, r1
 800faca:	2200      	movs	r2, #0
 800facc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	3301      	adds	r3, #1
 800fad2:	60fb      	str	r3, [r7, #12]
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	2b01      	cmp	r3, #1
 800fad8:	d9e5      	bls.n	800faa6 <clear_lock+0xe>
	}
}
 800fada:	bf00      	nop
 800fadc:	bf00      	nop
 800fade:	3714      	adds	r7, #20
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bc80      	pop	{r7}
 800fae4:	4770      	bx	lr
 800fae6:	bf00      	nop
 800fae8:	20005724 	.word	0x20005724

0800faec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b086      	sub	sp, #24
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800faf4:	2300      	movs	r3, #0
 800faf6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d038      	beq.n	800fb74 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800fb08:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800fb10:	6879      	ldr	r1, [r7, #4]
 800fb12:	2301      	movs	r3, #1
 800fb14:	697a      	ldr	r2, [r7, #20]
 800fb16:	f7ff fd51 	bl	800f5bc <disk_write>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d002      	beq.n	800fb26 <sync_window+0x3a>
			res = FR_DISK_ERR;
 800fb20:	2301      	movs	r3, #1
 800fb22:	73fb      	strb	r3, [r7, #15]
 800fb24:	e026      	b.n	800fb74 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	2200      	movs	r2, #0
 800fb2a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800fb34:	697a      	ldr	r2, [r7, #20]
 800fb36:	1ad2      	subs	r2, r2, r3
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fb3e:	429a      	cmp	r2, r3
 800fb40:	d218      	bcs.n	800fb74 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800fb48:	613b      	str	r3, [r7, #16]
 800fb4a:	e010      	b.n	800fb6e <sync_window+0x82>
					wsect += fs->fsize;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fb52:	697a      	ldr	r2, [r7, #20]
 800fb54:	4413      	add	r3, r2
 800fb56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800fb5e:	6879      	ldr	r1, [r7, #4]
 800fb60:	2301      	movs	r3, #1
 800fb62:	697a      	ldr	r2, [r7, #20]
 800fb64:	f7ff fd2a 	bl	800f5bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fb68:	693b      	ldr	r3, [r7, #16]
 800fb6a:	3b01      	subs	r3, #1
 800fb6c:	613b      	str	r3, [r7, #16]
 800fb6e:	693b      	ldr	r3, [r7, #16]
 800fb70:	2b01      	cmp	r3, #1
 800fb72:	d8eb      	bhi.n	800fb4c <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800fb74:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3718      	adds	r7, #24
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}

0800fb7e <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800fb7e:	b580      	push	{r7, lr}
 800fb80:	b084      	sub	sp, #16
 800fb82:	af00      	add	r7, sp, #0
 800fb84:	6078      	str	r0, [r7, #4]
 800fb86:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800fb92:	683a      	ldr	r2, [r7, #0]
 800fb94:	429a      	cmp	r2, r3
 800fb96:	d01b      	beq.n	800fbd0 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f7ff ffa7 	bl	800faec <sync_window>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fba2:	7bfb      	ldrb	r3, [r7, #15]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d113      	bne.n	800fbd0 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800fbae:	6879      	ldr	r1, [r7, #4]
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	683a      	ldr	r2, [r7, #0]
 800fbb4:	f7ff fce2 	bl	800f57c <disk_read>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d004      	beq.n	800fbc8 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fbbe:	f04f 33ff 	mov.w	r3, #4294967295
 800fbc2:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fbc4:	2301      	movs	r3, #1
 800fbc6:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	683a      	ldr	r2, [r7, #0]
 800fbcc:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 800fbd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3710      	adds	r7, #16
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}

0800fbda <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b084      	sub	sp, #16
 800fbde:	af00      	add	r7, sp, #0
 800fbe0:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f7ff ff82 	bl	800faec <sync_window>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fbec:	7bfb      	ldrb	r3, [r7, #15]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	f040 809b 	bne.w	800fd2a <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800fbfa:	2b03      	cmp	r3, #3
 800fbfc:	f040 8088 	bne.w	800fd10 <sync_fs+0x136>
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800fc06:	2b01      	cmp	r3, #1
 800fc08:	f040 8082 	bne.w	800fd10 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fc12:	2100      	movs	r1, #0
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7ff fd2d 	bl	800f674 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2255      	movs	r2, #85	; 0x55
 800fc1e:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	22aa      	movs	r2, #170	; 0xaa
 800fc26:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2252      	movs	r2, #82	; 0x52
 800fc2e:	701a      	strb	r2, [r3, #0]
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2252      	movs	r2, #82	; 0x52
 800fc34:	705a      	strb	r2, [r3, #1]
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2261      	movs	r2, #97	; 0x61
 800fc3a:	709a      	strb	r2, [r3, #2]
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2241      	movs	r2, #65	; 0x41
 800fc40:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2272      	movs	r2, #114	; 0x72
 800fc46:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	2272      	movs	r2, #114	; 0x72
 800fc4e:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2241      	movs	r2, #65	; 0x41
 800fc56:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2261      	movs	r2, #97	; 0x61
 800fc5e:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fc68:	b2da      	uxtb	r2, r3
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fc76:	b29b      	uxth	r3, r3
 800fc78:	0a1b      	lsrs	r3, r3, #8
 800fc7a:	b29b      	uxth	r3, r3
 800fc7c:	b2da      	uxtb	r2, r3
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fc8a:	0c1b      	lsrs	r3, r3, #16
 800fc8c:	b2da      	uxtb	r2, r3
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fc9a:	0e1b      	lsrs	r3, r3, #24
 800fc9c:	b2da      	uxtb	r2, r3
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800fcaa:	b2da      	uxtb	r2, r3
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800fcb8:	b29b      	uxth	r3, r3
 800fcba:	0a1b      	lsrs	r3, r3, #8
 800fcbc:	b29b      	uxth	r3, r3
 800fcbe:	b2da      	uxtb	r2, r3
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800fccc:	0c1b      	lsrs	r3, r3, #16
 800fcce:	b2da      	uxtb	r2, r3
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800fcdc:	0e1b      	lsrs	r3, r3, #24
 800fcde:	b2da      	uxtb	r2, r3
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800fcec:	1c5a      	adds	r2, r3, #1
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800fcfa:	6879      	ldr	r1, [r7, #4]
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 800fd02:	2301      	movs	r3, #1
 800fd04:	f7ff fc5a 	bl	800f5bc <disk_write>
			fs->fsi_flag = 0;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800fd16:	2200      	movs	r2, #0
 800fd18:	2100      	movs	r1, #0
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7ff fc6e 	bl	800f5fc <disk_ioctl>
 800fd20:	4603      	mov	r3, r0
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d001      	beq.n	800fd2a <sync_fs+0x150>
			res = FR_DISK_ERR;
 800fd26:	2301      	movs	r3, #1
 800fd28:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fd2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3710      	adds	r7, #16
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}

0800fd34 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fd34:	b480      	push	{r7}
 800fd36:	b083      	sub	sp, #12
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
 800fd3c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	3b02      	subs	r3, #2
 800fd42:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fd4a:	3b02      	subs	r3, #2
 800fd4c:	683a      	ldr	r2, [r7, #0]
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d301      	bcc.n	800fd56 <clust2sect+0x22>
 800fd52:	2300      	movs	r3, #0
 800fd54:	e00a      	b.n	800fd6c <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	fb03 f202 	mul.w	r2, r3, r2
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800fd6a:	4413      	add	r3, r2
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	370c      	adds	r7, #12
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bc80      	pop	{r7}
 800fd74:	4770      	bx	lr

0800fd76 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800fd76:	b580      	push	{r7, lr}
 800fd78:	b086      	sub	sp, #24
 800fd7a:	af00      	add	r7, sp, #0
 800fd7c:	6078      	str	r0, [r7, #4]
 800fd7e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	2b01      	cmp	r3, #1
 800fd84:	d905      	bls.n	800fd92 <get_fat+0x1c>
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fd8c:	683a      	ldr	r2, [r7, #0]
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d302      	bcc.n	800fd98 <get_fat+0x22>
		val = 1;	/* Internal error */
 800fd92:	2301      	movs	r3, #1
 800fd94:	617b      	str	r3, [r7, #20]
 800fd96:	e0a3      	b.n	800fee0 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fd98:	f04f 33ff 	mov.w	r3, #4294967295
 800fd9c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800fda4:	2b03      	cmp	r3, #3
 800fda6:	d068      	beq.n	800fe7a <get_fat+0x104>
 800fda8:	2b03      	cmp	r3, #3
 800fdaa:	f300 808f 	bgt.w	800fecc <get_fat+0x156>
 800fdae:	2b01      	cmp	r3, #1
 800fdb0:	d002      	beq.n	800fdb8 <get_fat+0x42>
 800fdb2:	2b02      	cmp	r3, #2
 800fdb4:	d040      	beq.n	800fe38 <get_fat+0xc2>
 800fdb6:	e089      	b.n	800fecc <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	60fb      	str	r3, [r7, #12]
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	085b      	lsrs	r3, r3, #1
 800fdc0:	68fa      	ldr	r2, [r7, #12]
 800fdc2:	4413      	add	r3, r2
 800fdc4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	0a5b      	lsrs	r3, r3, #9
 800fdd0:	4413      	add	r3, r2
 800fdd2:	4619      	mov	r1, r3
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f7ff fed2 	bl	800fb7e <move_window>
 800fdda:	4603      	mov	r3, r0
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d178      	bne.n	800fed2 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	1c5a      	adds	r2, r3, #1
 800fde4:	60fa      	str	r2, [r7, #12]
 800fde6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	5cd3      	ldrb	r3, [r2, r3]
 800fdee:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	0a5b      	lsrs	r3, r3, #9
 800fdfa:	4413      	add	r3, r2
 800fdfc:	4619      	mov	r1, r3
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f7ff febd 	bl	800fb7e <move_window>
 800fe04:	4603      	mov	r3, r0
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d165      	bne.n	800fed6 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe10:	687a      	ldr	r2, [r7, #4]
 800fe12:	5cd3      	ldrb	r3, [r2, r3]
 800fe14:	021b      	lsls	r3, r3, #8
 800fe16:	461a      	mov	r2, r3
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	4313      	orrs	r3, r2
 800fe1c:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	f003 0301 	and.w	r3, r3, #1
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d002      	beq.n	800fe2e <get_fat+0xb8>
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	091b      	lsrs	r3, r3, #4
 800fe2c:	e002      	b.n	800fe34 <get_fat+0xbe>
 800fe2e:	68bb      	ldr	r3, [r7, #8]
 800fe30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fe34:	617b      	str	r3, [r7, #20]
			break;
 800fe36:	e053      	b.n	800fee0 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	0a1b      	lsrs	r3, r3, #8
 800fe42:	4413      	add	r3, r2
 800fe44:	4619      	mov	r1, r3
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f7ff fe99 	bl	800fb7e <move_window>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d143      	bne.n	800feda <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	005b      	lsls	r3, r3, #1
 800fe56:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800fe5a:	687a      	ldr	r2, [r7, #4]
 800fe5c:	4413      	add	r3, r2
 800fe5e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800fe60:	693b      	ldr	r3, [r7, #16]
 800fe62:	3301      	adds	r3, #1
 800fe64:	781b      	ldrb	r3, [r3, #0]
 800fe66:	021b      	lsls	r3, r3, #8
 800fe68:	b21a      	sxth	r2, r3
 800fe6a:	693b      	ldr	r3, [r7, #16]
 800fe6c:	781b      	ldrb	r3, [r3, #0]
 800fe6e:	b21b      	sxth	r3, r3
 800fe70:	4313      	orrs	r3, r2
 800fe72:	b21b      	sxth	r3, r3
 800fe74:	b29b      	uxth	r3, r3
 800fe76:	617b      	str	r3, [r7, #20]
			break;
 800fe78:	e032      	b.n	800fee0 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	09db      	lsrs	r3, r3, #7
 800fe84:	4413      	add	r3, r2
 800fe86:	4619      	mov	r1, r3
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f7ff fe78 	bl	800fb7e <move_window>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d124      	bne.n	800fede <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	009b      	lsls	r3, r3, #2
 800fe98:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800fe9c:	687a      	ldr	r2, [r7, #4]
 800fe9e:	4413      	add	r3, r2
 800fea0:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800fea2:	693b      	ldr	r3, [r7, #16]
 800fea4:	3303      	adds	r3, #3
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	061a      	lsls	r2, r3, #24
 800feaa:	693b      	ldr	r3, [r7, #16]
 800feac:	3302      	adds	r3, #2
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	041b      	lsls	r3, r3, #16
 800feb2:	4313      	orrs	r3, r2
 800feb4:	693a      	ldr	r2, [r7, #16]
 800feb6:	3201      	adds	r2, #1
 800feb8:	7812      	ldrb	r2, [r2, #0]
 800feba:	0212      	lsls	r2, r2, #8
 800febc:	4313      	orrs	r3, r2
 800febe:	693a      	ldr	r2, [r7, #16]
 800fec0:	7812      	ldrb	r2, [r2, #0]
 800fec2:	4313      	orrs	r3, r2
 800fec4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fec8:	617b      	str	r3, [r7, #20]
			break;
 800feca:	e009      	b.n	800fee0 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 800fecc:	2301      	movs	r3, #1
 800fece:	617b      	str	r3, [r7, #20]
 800fed0:	e006      	b.n	800fee0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fed2:	bf00      	nop
 800fed4:	e004      	b.n	800fee0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fed6:	bf00      	nop
 800fed8:	e002      	b.n	800fee0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800feda:	bf00      	nop
 800fedc:	e000      	b.n	800fee0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fede:	bf00      	nop
		}
	}

	return val;
 800fee0:	697b      	ldr	r3, [r7, #20]
}
 800fee2:	4618      	mov	r0, r3
 800fee4:	3718      	adds	r7, #24
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}

0800feea <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800feea:	b580      	push	{r7, lr}
 800feec:	b088      	sub	sp, #32
 800feee:	af00      	add	r7, sp, #0
 800fef0:	60f8      	str	r0, [r7, #12]
 800fef2:	60b9      	str	r1, [r7, #8]
 800fef4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d905      	bls.n	800ff08 <put_fat+0x1e>
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ff02:	68ba      	ldr	r2, [r7, #8]
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d302      	bcc.n	800ff0e <put_fat+0x24>
		res = FR_INT_ERR;
 800ff08:	2302      	movs	r3, #2
 800ff0a:	77fb      	strb	r3, [r7, #31]
 800ff0c:	e0f6      	b.n	80100fc <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ff14:	2b03      	cmp	r3, #3
 800ff16:	f000 809e 	beq.w	8010056 <put_fat+0x16c>
 800ff1a:	2b03      	cmp	r3, #3
 800ff1c:	f300 80e4 	bgt.w	80100e8 <put_fat+0x1fe>
 800ff20:	2b01      	cmp	r3, #1
 800ff22:	d002      	beq.n	800ff2a <put_fat+0x40>
 800ff24:	2b02      	cmp	r3, #2
 800ff26:	d06f      	beq.n	8010008 <put_fat+0x11e>
 800ff28:	e0de      	b.n	80100e8 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	617b      	str	r3, [r7, #20]
 800ff2e:	697b      	ldr	r3, [r7, #20]
 800ff30:	085b      	lsrs	r3, r3, #1
 800ff32:	697a      	ldr	r2, [r7, #20]
 800ff34:	4413      	add	r3, r2
 800ff36:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800ff3e:	697b      	ldr	r3, [r7, #20]
 800ff40:	0a5b      	lsrs	r3, r3, #9
 800ff42:	4413      	add	r3, r2
 800ff44:	4619      	mov	r1, r3
 800ff46:	68f8      	ldr	r0, [r7, #12]
 800ff48:	f7ff fe19 	bl	800fb7e <move_window>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ff50:	7ffb      	ldrb	r3, [r7, #31]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	f040 80cb 	bne.w	80100ee <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800ff58:	697b      	ldr	r3, [r7, #20]
 800ff5a:	1c5a      	adds	r2, r3, #1
 800ff5c:	617a      	str	r2, [r7, #20]
 800ff5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff62:	68fa      	ldr	r2, [r7, #12]
 800ff64:	4413      	add	r3, r2
 800ff66:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	f003 0301 	and.w	r3, r3, #1
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d00d      	beq.n	800ff8e <put_fat+0xa4>
 800ff72:	69bb      	ldr	r3, [r7, #24]
 800ff74:	781b      	ldrb	r3, [r3, #0]
 800ff76:	b25b      	sxtb	r3, r3
 800ff78:	f003 030f 	and.w	r3, r3, #15
 800ff7c:	b25a      	sxtb	r2, r3
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	b2db      	uxtb	r3, r3
 800ff82:	011b      	lsls	r3, r3, #4
 800ff84:	b25b      	sxtb	r3, r3
 800ff86:	4313      	orrs	r3, r2
 800ff88:	b25b      	sxtb	r3, r3
 800ff8a:	b2db      	uxtb	r3, r3
 800ff8c:	e001      	b.n	800ff92 <put_fat+0xa8>
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	b2db      	uxtb	r3, r3
 800ff92:	69ba      	ldr	r2, [r7, #24]
 800ff94:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	2201      	movs	r2, #1
 800ff9a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800ffa4:	697b      	ldr	r3, [r7, #20]
 800ffa6:	0a5b      	lsrs	r3, r3, #9
 800ffa8:	4413      	add	r3, r2
 800ffaa:	4619      	mov	r1, r3
 800ffac:	68f8      	ldr	r0, [r7, #12]
 800ffae:	f7ff fde6 	bl	800fb7e <move_window>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ffb6:	7ffb      	ldrb	r3, [r7, #31]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	f040 809a 	bne.w	80100f2 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffc4:	68fa      	ldr	r2, [r7, #12]
 800ffc6:	4413      	add	r3, r2
 800ffc8:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	f003 0301 	and.w	r3, r3, #1
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d003      	beq.n	800ffdc <put_fat+0xf2>
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	091b      	lsrs	r3, r3, #4
 800ffd8:	b2db      	uxtb	r3, r3
 800ffda:	e00e      	b.n	800fffa <put_fat+0x110>
 800ffdc:	69bb      	ldr	r3, [r7, #24]
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	b25b      	sxtb	r3, r3
 800ffe2:	f023 030f 	bic.w	r3, r3, #15
 800ffe6:	b25a      	sxtb	r2, r3
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	0a1b      	lsrs	r3, r3, #8
 800ffec:	b25b      	sxtb	r3, r3
 800ffee:	f003 030f 	and.w	r3, r3, #15
 800fff2:	b25b      	sxtb	r3, r3
 800fff4:	4313      	orrs	r3, r2
 800fff6:	b25b      	sxtb	r3, r3
 800fff8:	b2db      	uxtb	r3, r3
 800fffa:	69ba      	ldr	r2, [r7, #24]
 800fffc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	2201      	movs	r2, #1
 8010002:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8010006:	e079      	b.n	80100fc <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	0a1b      	lsrs	r3, r3, #8
 8010012:	4413      	add	r3, r2
 8010014:	4619      	mov	r1, r3
 8010016:	68f8      	ldr	r0, [r7, #12]
 8010018:	f7ff fdb1 	bl	800fb7e <move_window>
 801001c:	4603      	mov	r3, r0
 801001e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010020:	7ffb      	ldrb	r3, [r7, #31]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d167      	bne.n	80100f6 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	005b      	lsls	r3, r3, #1
 801002a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801002e:	68fa      	ldr	r2, [r7, #12]
 8010030:	4413      	add	r3, r2
 8010032:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	b2da      	uxtb	r2, r3
 8010038:	69bb      	ldr	r3, [r7, #24]
 801003a:	701a      	strb	r2, [r3, #0]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	b29b      	uxth	r3, r3
 8010040:	0a1b      	lsrs	r3, r3, #8
 8010042:	b29a      	uxth	r2, r3
 8010044:	69bb      	ldr	r3, [r7, #24]
 8010046:	3301      	adds	r3, #1
 8010048:	b2d2      	uxtb	r2, r2
 801004a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	2201      	movs	r2, #1
 8010050:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8010054:	e052      	b.n	80100fc <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	09db      	lsrs	r3, r3, #7
 8010060:	4413      	add	r3, r2
 8010062:	4619      	mov	r1, r3
 8010064:	68f8      	ldr	r0, [r7, #12]
 8010066:	f7ff fd8a 	bl	800fb7e <move_window>
 801006a:	4603      	mov	r3, r0
 801006c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801006e:	7ffb      	ldrb	r3, [r7, #31]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d142      	bne.n	80100fa <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	009b      	lsls	r3, r3, #2
 8010078:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801007c:	68fa      	ldr	r2, [r7, #12]
 801007e:	4413      	add	r3, r2
 8010080:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8010082:	69bb      	ldr	r3, [r7, #24]
 8010084:	3303      	adds	r3, #3
 8010086:	781b      	ldrb	r3, [r3, #0]
 8010088:	061a      	lsls	r2, r3, #24
 801008a:	69bb      	ldr	r3, [r7, #24]
 801008c:	3302      	adds	r3, #2
 801008e:	781b      	ldrb	r3, [r3, #0]
 8010090:	041b      	lsls	r3, r3, #16
 8010092:	4313      	orrs	r3, r2
 8010094:	69ba      	ldr	r2, [r7, #24]
 8010096:	3201      	adds	r2, #1
 8010098:	7812      	ldrb	r2, [r2, #0]
 801009a:	0212      	lsls	r2, r2, #8
 801009c:	4313      	orrs	r3, r2
 801009e:	69ba      	ldr	r2, [r7, #24]
 80100a0:	7812      	ldrb	r2, [r2, #0]
 80100a2:	4313      	orrs	r3, r2
 80100a4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80100a8:	687a      	ldr	r2, [r7, #4]
 80100aa:	4313      	orrs	r3, r2
 80100ac:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	b2da      	uxtb	r2, r3
 80100b2:	69bb      	ldr	r3, [r7, #24]
 80100b4:	701a      	strb	r2, [r3, #0]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	b29b      	uxth	r3, r3
 80100ba:	0a1b      	lsrs	r3, r3, #8
 80100bc:	b29a      	uxth	r2, r3
 80100be:	69bb      	ldr	r3, [r7, #24]
 80100c0:	3301      	adds	r3, #1
 80100c2:	b2d2      	uxtb	r2, r2
 80100c4:	701a      	strb	r2, [r3, #0]
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	0c1a      	lsrs	r2, r3, #16
 80100ca:	69bb      	ldr	r3, [r7, #24]
 80100cc:	3302      	adds	r3, #2
 80100ce:	b2d2      	uxtb	r2, r2
 80100d0:	701a      	strb	r2, [r3, #0]
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	0e1a      	lsrs	r2, r3, #24
 80100d6:	69bb      	ldr	r3, [r7, #24]
 80100d8:	3303      	adds	r3, #3
 80100da:	b2d2      	uxtb	r2, r2
 80100dc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	2201      	movs	r2, #1
 80100e2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80100e6:	e009      	b.n	80100fc <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 80100e8:	2302      	movs	r3, #2
 80100ea:	77fb      	strb	r3, [r7, #31]
 80100ec:	e006      	b.n	80100fc <put_fat+0x212>
			if (res != FR_OK) break;
 80100ee:	bf00      	nop
 80100f0:	e004      	b.n	80100fc <put_fat+0x212>
			if (res != FR_OK) break;
 80100f2:	bf00      	nop
 80100f4:	e002      	b.n	80100fc <put_fat+0x212>
			if (res != FR_OK) break;
 80100f6:	bf00      	nop
 80100f8:	e000      	b.n	80100fc <put_fat+0x212>
			if (res != FR_OK) break;
 80100fa:	bf00      	nop
		}
	}

	return res;
 80100fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3720      	adds	r7, #32
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}

08010106 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8010106:	b580      	push	{r7, lr}
 8010108:	b084      	sub	sp, #16
 801010a:	af00      	add	r7, sp, #0
 801010c:	6078      	str	r0, [r7, #4]
 801010e:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	2b01      	cmp	r3, #1
 8010114:	d905      	bls.n	8010122 <remove_chain+0x1c>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801011c:	683a      	ldr	r2, [r7, #0]
 801011e:	429a      	cmp	r2, r3
 8010120:	d302      	bcc.n	8010128 <remove_chain+0x22>
		res = FR_INT_ERR;
 8010122:	2302      	movs	r3, #2
 8010124:	73fb      	strb	r3, [r7, #15]
 8010126:	e043      	b.n	80101b0 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8010128:	2300      	movs	r3, #0
 801012a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 801012c:	e036      	b.n	801019c <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 801012e:	6839      	ldr	r1, [r7, #0]
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f7ff fe20 	bl	800fd76 <get_fat>
 8010136:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d035      	beq.n	80101aa <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	2b01      	cmp	r3, #1
 8010142:	d102      	bne.n	801014a <remove_chain+0x44>
 8010144:	2302      	movs	r3, #2
 8010146:	73fb      	strb	r3, [r7, #15]
 8010148:	e032      	b.n	80101b0 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 801014a:	68bb      	ldr	r3, [r7, #8]
 801014c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010150:	d102      	bne.n	8010158 <remove_chain+0x52>
 8010152:	2301      	movs	r3, #1
 8010154:	73fb      	strb	r3, [r7, #15]
 8010156:	e02b      	b.n	80101b0 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8010158:	2200      	movs	r2, #0
 801015a:	6839      	ldr	r1, [r7, #0]
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f7ff fec4 	bl	800feea <put_fat>
 8010162:	4603      	mov	r3, r0
 8010164:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8010166:	7bfb      	ldrb	r3, [r7, #15]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d120      	bne.n	80101ae <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010176:	d00f      	beq.n	8010198 <remove_chain+0x92>
				fs->free_clust++;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801017e:	1c5a      	adds	r2, r3, #1
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				fs->fsi_flag |= 1;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 801018c:	f043 0301 	orr.w	r3, r3, #1
 8010190:	b2da      	uxtb	r2, r3
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80101a2:	683a      	ldr	r2, [r7, #0]
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d3c2      	bcc.n	801012e <remove_chain+0x28>
 80101a8:	e002      	b.n	80101b0 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 80101aa:	bf00      	nop
 80101ac:	e000      	b.n	80101b0 <remove_chain+0xaa>
			if (res != FR_OK) break;
 80101ae:	bf00      	nop
		}
	}

	return res;
 80101b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	3710      	adds	r7, #16
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}

080101ba <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80101ba:	b580      	push	{r7, lr}
 80101bc:	b086      	sub	sp, #24
 80101be:	af00      	add	r7, sp, #0
 80101c0:	6078      	str	r0, [r7, #4]
 80101c2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d10f      	bne.n	80101ea <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80101d0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80101d2:	693b      	ldr	r3, [r7, #16]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d005      	beq.n	80101e4 <create_chain+0x2a>
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80101de:	693a      	ldr	r2, [r7, #16]
 80101e0:	429a      	cmp	r2, r3
 80101e2:	d31c      	bcc.n	801021e <create_chain+0x64>
 80101e4:	2301      	movs	r3, #1
 80101e6:	613b      	str	r3, [r7, #16]
 80101e8:	e019      	b.n	801021e <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80101ea:	6839      	ldr	r1, [r7, #0]
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f7ff fdc2 	bl	800fd76 <get_fat>
 80101f2:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	2b01      	cmp	r3, #1
 80101f8:	d801      	bhi.n	80101fe <create_chain+0x44>
 80101fa:	2301      	movs	r3, #1
 80101fc:	e076      	b.n	80102ec <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010204:	d101      	bne.n	801020a <create_chain+0x50>
 8010206:	68bb      	ldr	r3, [r7, #8]
 8010208:	e070      	b.n	80102ec <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010210:	68ba      	ldr	r2, [r7, #8]
 8010212:	429a      	cmp	r2, r3
 8010214:	d201      	bcs.n	801021a <create_chain+0x60>
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	e068      	b.n	80102ec <create_chain+0x132>
		scl = clst;
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 801021e:	693b      	ldr	r3, [r7, #16]
 8010220:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8010222:	697b      	ldr	r3, [r7, #20]
 8010224:	3301      	adds	r3, #1
 8010226:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801022e:	697a      	ldr	r2, [r7, #20]
 8010230:	429a      	cmp	r2, r3
 8010232:	d307      	bcc.n	8010244 <create_chain+0x8a>
			ncl = 2;
 8010234:	2302      	movs	r3, #2
 8010236:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8010238:	697a      	ldr	r2, [r7, #20]
 801023a:	693b      	ldr	r3, [r7, #16]
 801023c:	429a      	cmp	r2, r3
 801023e:	d901      	bls.n	8010244 <create_chain+0x8a>
 8010240:	2300      	movs	r3, #0
 8010242:	e053      	b.n	80102ec <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8010244:	6979      	ldr	r1, [r7, #20]
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f7ff fd95 	bl	800fd76 <get_fat>
 801024c:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d00e      	beq.n	8010272 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	f1b3 3fff 	cmp.w	r3, #4294967295
 801025a:	d002      	beq.n	8010262 <create_chain+0xa8>
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	2b01      	cmp	r3, #1
 8010260:	d101      	bne.n	8010266 <create_chain+0xac>
			return cs;
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	e042      	b.n	80102ec <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8010266:	697a      	ldr	r2, [r7, #20]
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	429a      	cmp	r2, r3
 801026c:	d1d9      	bne.n	8010222 <create_chain+0x68>
 801026e:	2300      	movs	r3, #0
 8010270:	e03c      	b.n	80102ec <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8010272:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8010274:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8010278:	6979      	ldr	r1, [r7, #20]
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f7ff fe35 	bl	800feea <put_fat>
 8010280:	4603      	mov	r3, r0
 8010282:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8010284:	7bfb      	ldrb	r3, [r7, #15]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d109      	bne.n	801029e <create_chain+0xe4>
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d006      	beq.n	801029e <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8010290:	697a      	ldr	r2, [r7, #20]
 8010292:	6839      	ldr	r1, [r7, #0]
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f7ff fe28 	bl	800feea <put_fat>
 801029a:	4603      	mov	r3, r0
 801029c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 801029e:	7bfb      	ldrb	r3, [r7, #15]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d11a      	bne.n	80102da <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	697a      	ldr	r2, [r7, #20]
 80102a8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80102b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102b6:	d018      	beq.n	80102ea <create_chain+0x130>
			fs->free_clust--;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80102be:	1e5a      	subs	r2, r3, #1
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80102cc:	f043 0301 	orr.w	r3, r3, #1
 80102d0:	b2da      	uxtb	r2, r3
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 80102d8:	e007      	b.n	80102ea <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80102da:	7bfb      	ldrb	r3, [r7, #15]
 80102dc:	2b01      	cmp	r3, #1
 80102de:	d102      	bne.n	80102e6 <create_chain+0x12c>
 80102e0:	f04f 33ff 	mov.w	r3, #4294967295
 80102e4:	e000      	b.n	80102e8 <create_chain+0x12e>
 80102e6:	2301      	movs	r3, #1
 80102e8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80102ea:	697b      	ldr	r3, [r7, #20]
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3718      	adds	r7, #24
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80102f4:	b480      	push	{r7}
 80102f6:	b087      	sub	sp, #28
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8010304:	3304      	adds	r3, #4
 8010306:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	0a5b      	lsrs	r3, r3, #9
 801030c:	687a      	ldr	r2, [r7, #4]
 801030e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8010312:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8010316:	fbb3 f3f2 	udiv	r3, r3, r2
 801031a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801031c:	693b      	ldr	r3, [r7, #16]
 801031e:	1d1a      	adds	r2, r3, #4
 8010320:	613a      	str	r2, [r7, #16]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d101      	bne.n	8010330 <clmt_clust+0x3c>
 801032c:	2300      	movs	r3, #0
 801032e:	e010      	b.n	8010352 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8010330:	697a      	ldr	r2, [r7, #20]
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	429a      	cmp	r2, r3
 8010336:	d307      	bcc.n	8010348 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8010338:	697a      	ldr	r2, [r7, #20]
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	1ad3      	subs	r3, r2, r3
 801033e:	617b      	str	r3, [r7, #20]
 8010340:	693b      	ldr	r3, [r7, #16]
 8010342:	3304      	adds	r3, #4
 8010344:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010346:	e7e9      	b.n	801031c <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8010348:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	681a      	ldr	r2, [r3, #0]
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	4413      	add	r3, r2
}
 8010352:	4618      	mov	r0, r3
 8010354:	371c      	adds	r7, #28
 8010356:	46bd      	mov	sp, r7
 8010358:	bc80      	pop	{r7}
 801035a:	4770      	bx	lr

0801035c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b086      	sub	sp, #24
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
 8010364:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	b29a      	uxth	r2, r3
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010376:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	2b01      	cmp	r3, #1
 801037c:	d007      	beq.n	801038e <dir_sdi+0x32>
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010384:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010388:	697a      	ldr	r2, [r7, #20]
 801038a:	429a      	cmp	r2, r3
 801038c:	d301      	bcc.n	8010392 <dir_sdi+0x36>
		return FR_INT_ERR;
 801038e:	2302      	movs	r3, #2
 8010390:	e074      	b.n	801047c <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8010392:	697b      	ldr	r3, [r7, #20]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d10c      	bne.n	80103b2 <dir_sdi+0x56>
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801039e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80103a2:	2b03      	cmp	r3, #3
 80103a4:	d105      	bne.n	80103b2 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80103ac:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80103b0:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d111      	bne.n	80103dc <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80103be:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80103c2:	461a      	mov	r2, r3
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	4293      	cmp	r3, r2
 80103c8:	d301      	bcc.n	80103ce <dir_sdi+0x72>
			return FR_INT_ERR;
 80103ca:	2302      	movs	r3, #2
 80103cc:	e056      	b.n	801047c <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80103d4:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80103d8:	613b      	str	r3, [r7, #16]
 80103da:	e032      	b.n	8010442 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80103e2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80103e6:	011b      	lsls	r3, r3, #4
 80103e8:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80103ea:	e01e      	b.n	801042a <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80103f2:	6979      	ldr	r1, [r7, #20]
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7ff fcbe 	bl	800fd76 <get_fat>
 80103fa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010402:	d101      	bne.n	8010408 <dir_sdi+0xac>
 8010404:	2301      	movs	r3, #1
 8010406:	e039      	b.n	801047c <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8010408:	697b      	ldr	r3, [r7, #20]
 801040a:	2b01      	cmp	r3, #1
 801040c:	d907      	bls.n	801041e <dir_sdi+0xc2>
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010414:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010418:	697a      	ldr	r2, [r7, #20]
 801041a:	429a      	cmp	r2, r3
 801041c:	d301      	bcc.n	8010422 <dir_sdi+0xc6>
				return FR_INT_ERR;
 801041e:	2302      	movs	r3, #2
 8010420:	e02c      	b.n	801047c <dir_sdi+0x120>
			idx -= ic;
 8010422:	683a      	ldr	r2, [r7, #0]
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	1ad3      	subs	r3, r2, r3
 8010428:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 801042a:	683a      	ldr	r2, [r7, #0]
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	429a      	cmp	r2, r3
 8010430:	d2dc      	bcs.n	80103ec <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010438:	6979      	ldr	r1, [r7, #20]
 801043a:	4618      	mov	r0, r3
 801043c:	f7ff fc7a 	bl	800fd34 <clust2sect>
 8010440:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	697a      	ldr	r2, [r7, #20]
 8010446:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d101      	bne.n	8010454 <dir_sdi+0xf8>
 8010450:	2302      	movs	r3, #2
 8010452:	e013      	b.n	801047c <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	091a      	lsrs	r2, r3, #4
 8010458:	693b      	ldr	r3, [r7, #16]
 801045a:	441a      	add	r2, r3
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010468:	461a      	mov	r2, r3
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	f003 030f 	and.w	r3, r3, #15
 8010470:	015b      	lsls	r3, r3, #5
 8010472:	441a      	add	r2, r3
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 801047a:	2300      	movs	r3, #0
}
 801047c:	4618      	mov	r0, r3
 801047e:	3718      	adds	r7, #24
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}

08010484 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010484:	b590      	push	{r4, r7, lr}
 8010486:	b087      	sub	sp, #28
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8010494:	3301      	adds	r3, #1
 8010496:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	b29b      	uxth	r3, r3
 801049c:	2b00      	cmp	r3, #0
 801049e:	d004      	beq.n	80104aa <dir_next+0x26>
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d101      	bne.n	80104ae <dir_next+0x2a>
		return FR_NO_FILE;
 80104aa:	2304      	movs	r3, #4
 80104ac:	e0dd      	b.n	801066a <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	f003 030f 	and.w	r3, r3, #15
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	f040 80c6 	bne.w	8010646 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80104c0:	1c5a      	adds	r2, r3, #1
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d10b      	bne.n	80104ea <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80104d8:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80104dc:	461a      	mov	r2, r3
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	4293      	cmp	r3, r2
 80104e2:	f0c0 80b0 	bcc.w	8010646 <dir_next+0x1c2>
				return FR_NO_FILE;
 80104e6:	2304      	movs	r3, #4
 80104e8:	e0bf      	b.n	801066a <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	091b      	lsrs	r3, r3, #4
 80104ee:	687a      	ldr	r2, [r7, #4]
 80104f0:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80104f4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80104f8:	3a01      	subs	r2, #1
 80104fa:	4013      	ands	r3, r2
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	f040 80a2 	bne.w	8010646 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801050e:	4619      	mov	r1, r3
 8010510:	4610      	mov	r0, r2
 8010512:	f7ff fc30 	bl	800fd76 <get_fat>
 8010516:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8010518:	697b      	ldr	r3, [r7, #20]
 801051a:	2b01      	cmp	r3, #1
 801051c:	d801      	bhi.n	8010522 <dir_next+0x9e>
 801051e:	2302      	movs	r3, #2
 8010520:	e0a3      	b.n	801066a <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010528:	d101      	bne.n	801052e <dir_next+0xaa>
 801052a:	2301      	movs	r3, #1
 801052c:	e09d      	b.n	801066a <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010534:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010538:	697a      	ldr	r2, [r7, #20]
 801053a:	429a      	cmp	r2, r3
 801053c:	d374      	bcc.n	8010628 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d101      	bne.n	8010548 <dir_next+0xc4>
 8010544:	2304      	movs	r3, #4
 8010546:	e090      	b.n	801066a <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010554:	4619      	mov	r1, r3
 8010556:	4610      	mov	r0, r2
 8010558:	f7ff fe2f 	bl	80101ba <create_chain>
 801055c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d101      	bne.n	8010568 <dir_next+0xe4>
 8010564:	2307      	movs	r3, #7
 8010566:	e080      	b.n	801066a <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	2b01      	cmp	r3, #1
 801056c:	d101      	bne.n	8010572 <dir_next+0xee>
 801056e:	2302      	movs	r3, #2
 8010570:	e07b      	b.n	801066a <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8010572:	697b      	ldr	r3, [r7, #20]
 8010574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010578:	d101      	bne.n	801057e <dir_next+0xfa>
 801057a:	2301      	movs	r3, #1
 801057c:	e075      	b.n	801066a <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010584:	4618      	mov	r0, r3
 8010586:	f7ff fab1 	bl	800faec <sync_window>
 801058a:	4603      	mov	r3, r0
 801058c:	2b00      	cmp	r3, #0
 801058e:	d001      	beq.n	8010594 <dir_next+0x110>
 8010590:	2301      	movs	r3, #1
 8010592:	e06a      	b.n	801066a <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801059a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801059e:	2100      	movs	r1, #0
 80105a0:	4618      	mov	r0, r3
 80105a2:	f7ff f867 	bl	800f674 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80105b2:	6979      	ldr	r1, [r7, #20]
 80105b4:	4610      	mov	r0, r2
 80105b6:	f7ff fbbd 	bl	800fd34 <clust2sect>
 80105ba:	4603      	mov	r3, r0
 80105bc:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80105c0:	2300      	movs	r3, #0
 80105c2:	613b      	str	r3, [r7, #16]
 80105c4:	e01b      	b.n	80105fe <dir_next+0x17a>
						dp->fs->wflag = 1;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80105cc:	2201      	movs	r2, #1
 80105ce:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80105d8:	4618      	mov	r0, r3
 80105da:	f7ff fa87 	bl	800faec <sync_window>
 80105de:	4603      	mov	r3, r0
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d001      	beq.n	80105e8 <dir_next+0x164>
 80105e4:	2301      	movs	r3, #1
 80105e6:	e040      	b.n	801066a <dir_next+0x1e6>
						dp->fs->winsect++;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80105ee:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 80105f2:	3201      	adds	r2, #1
 80105f4:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	3301      	adds	r3, #1
 80105fc:	613b      	str	r3, [r7, #16]
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010604:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8010608:	461a      	mov	r2, r3
 801060a:	693b      	ldr	r3, [r7, #16]
 801060c:	4293      	cmp	r3, r2
 801060e:	d3da      	bcc.n	80105c6 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010616:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010620:	693a      	ldr	r2, [r7, #16]
 8010622:	1a8a      	subs	r2, r1, r2
 8010624:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	697a      	ldr	r2, [r7, #20]
 801062c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010636:	6979      	ldr	r1, [r7, #20]
 8010638:	4618      	mov	r0, r3
 801063a:	f7ff fb7b 	bl	800fd34 <clust2sect>
 801063e:	4602      	mov	r2, r0
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	b29a      	uxth	r2, r3
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010656:	461a      	mov	r2, r3
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	f003 030f 	and.w	r3, r3, #15
 801065e:	015b      	lsls	r3, r3, #5
 8010660:	441a      	add	r2, r3
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8010668:	2300      	movs	r3, #0
}
 801066a:	4618      	mov	r0, r3
 801066c:	371c      	adds	r7, #28
 801066e:	46bd      	mov	sp, r7
 8010670:	bd90      	pop	{r4, r7, pc}

08010672 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8010672:	b580      	push	{r7, lr}
 8010674:	b084      	sub	sp, #16
 8010676:	af00      	add	r7, sp, #0
 8010678:	6078      	str	r0, [r7, #4]
 801067a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 801067c:	2100      	movs	r1, #0
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	f7ff fe6c 	bl	801035c <dir_sdi>
 8010684:	4603      	mov	r3, r0
 8010686:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010688:	7bfb      	ldrb	r3, [r7, #15]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d131      	bne.n	80106f2 <dir_alloc+0x80>
		n = 0;
 801068e:	2300      	movs	r3, #0
 8010690:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801069e:	4619      	mov	r1, r3
 80106a0:	4610      	mov	r0, r2
 80106a2:	f7ff fa6c 	bl	800fb7e <move_window>
 80106a6:	4603      	mov	r3, r0
 80106a8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80106aa:	7bfb      	ldrb	r3, [r7, #15]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d11f      	bne.n	80106f0 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80106b6:	781b      	ldrb	r3, [r3, #0]
 80106b8:	2be5      	cmp	r3, #229	; 0xe5
 80106ba:	d005      	beq.n	80106c8 <dir_alloc+0x56>
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80106c2:	781b      	ldrb	r3, [r3, #0]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d107      	bne.n	80106d8 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	3301      	adds	r3, #1
 80106cc:	60bb      	str	r3, [r7, #8]
 80106ce:	68ba      	ldr	r2, [r7, #8]
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	429a      	cmp	r2, r3
 80106d4:	d102      	bne.n	80106dc <dir_alloc+0x6a>
 80106d6:	e00c      	b.n	80106f2 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80106d8:	2300      	movs	r3, #0
 80106da:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80106dc:	2101      	movs	r1, #1
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f7ff fed0 	bl	8010484 <dir_next>
 80106e4:	4603      	mov	r3, r0
 80106e6:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80106e8:	7bfb      	ldrb	r3, [r7, #15]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d0d1      	beq.n	8010692 <dir_alloc+0x20>
 80106ee:	e000      	b.n	80106f2 <dir_alloc+0x80>
			if (res != FR_OK) break;
 80106f0:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80106f2:	7bfb      	ldrb	r3, [r7, #15]
 80106f4:	2b04      	cmp	r3, #4
 80106f6:	d101      	bne.n	80106fc <dir_alloc+0x8a>
 80106f8:	2307      	movs	r3, #7
 80106fa:	73fb      	strb	r3, [r7, #15]
	return res;
 80106fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80106fe:	4618      	mov	r0, r3
 8010700:	3710      	adds	r7, #16
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}

08010706 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8010706:	b480      	push	{r7}
 8010708:	b085      	sub	sp, #20
 801070a:	af00      	add	r7, sp, #0
 801070c:	6078      	str	r0, [r7, #4]
 801070e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	331b      	adds	r3, #27
 8010714:	781b      	ldrb	r3, [r3, #0]
 8010716:	021b      	lsls	r3, r3, #8
 8010718:	b21a      	sxth	r2, r3
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	331a      	adds	r3, #26
 801071e:	781b      	ldrb	r3, [r3, #0]
 8010720:	b21b      	sxth	r3, r3
 8010722:	4313      	orrs	r3, r2
 8010724:	b21b      	sxth	r3, r3
 8010726:	b29b      	uxth	r3, r3
 8010728:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010730:	2b03      	cmp	r3, #3
 8010732:	d10f      	bne.n	8010754 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	3315      	adds	r3, #21
 8010738:	781b      	ldrb	r3, [r3, #0]
 801073a:	021b      	lsls	r3, r3, #8
 801073c:	b21a      	sxth	r2, r3
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	3314      	adds	r3, #20
 8010742:	781b      	ldrb	r3, [r3, #0]
 8010744:	b21b      	sxth	r3, r3
 8010746:	4313      	orrs	r3, r2
 8010748:	b21b      	sxth	r3, r3
 801074a:	b29b      	uxth	r3, r3
 801074c:	041b      	lsls	r3, r3, #16
 801074e:	68fa      	ldr	r2, [r7, #12]
 8010750:	4313      	orrs	r3, r2
 8010752:	60fb      	str	r3, [r7, #12]

	return cl;
 8010754:	68fb      	ldr	r3, [r7, #12]
}
 8010756:	4618      	mov	r0, r3
 8010758:	3714      	adds	r7, #20
 801075a:	46bd      	mov	sp, r7
 801075c:	bc80      	pop	{r7}
 801075e:	4770      	bx	lr

08010760 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8010760:	b480      	push	{r7}
 8010762:	b083      	sub	sp, #12
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	331a      	adds	r3, #26
 801076e:	683a      	ldr	r2, [r7, #0]
 8010770:	b2d2      	uxtb	r2, r2
 8010772:	701a      	strb	r2, [r3, #0]
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	b29b      	uxth	r3, r3
 8010778:	0a1b      	lsrs	r3, r3, #8
 801077a:	b29a      	uxth	r2, r3
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	331b      	adds	r3, #27
 8010780:	b2d2      	uxtb	r2, r2
 8010782:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8010784:	683b      	ldr	r3, [r7, #0]
 8010786:	0c1a      	lsrs	r2, r3, #16
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	3314      	adds	r3, #20
 801078c:	b2d2      	uxtb	r2, r2
 801078e:	701a      	strb	r2, [r3, #0]
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	0c1b      	lsrs	r3, r3, #16
 8010794:	b29b      	uxth	r3, r3
 8010796:	0a1b      	lsrs	r3, r3, #8
 8010798:	b29a      	uxth	r2, r3
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	3315      	adds	r3, #21
 801079e:	b2d2      	uxtb	r2, r2
 80107a0:	701a      	strb	r2, [r3, #0]
}
 80107a2:	bf00      	nop
 80107a4:	370c      	adds	r7, #12
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bc80      	pop	{r7}
 80107aa:	4770      	bx	lr

080107ac <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b086      	sub	sp, #24
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80107b4:	2100      	movs	r1, #0
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f7ff fdd0 	bl	801035c <dir_sdi>
 80107bc:	4603      	mov	r3, r0
 80107be:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80107c0:	7dfb      	ldrb	r3, [r7, #23]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d001      	beq.n	80107ca <dir_find+0x1e>
 80107c6:	7dfb      	ldrb	r3, [r7, #23]
 80107c8:	e03b      	b.n	8010842 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80107d6:	4619      	mov	r1, r3
 80107d8:	4610      	mov	r0, r2
 80107da:	f7ff f9d0 	bl	800fb7e <move_window>
 80107de:	4603      	mov	r3, r0
 80107e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80107e2:	7dfb      	ldrb	r3, [r7, #23]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d128      	bne.n	801083a <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80107ee:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80107f0:	693b      	ldr	r3, [r7, #16]
 80107f2:	781b      	ldrb	r3, [r3, #0]
 80107f4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80107f6:	7bfb      	ldrb	r3, [r7, #15]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d102      	bne.n	8010802 <dir_find+0x56>
 80107fc:	2304      	movs	r3, #4
 80107fe:	75fb      	strb	r3, [r7, #23]
 8010800:	e01e      	b.n	8010840 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8010802:	693b      	ldr	r3, [r7, #16]
 8010804:	330b      	adds	r3, #11
 8010806:	781b      	ldrb	r3, [r3, #0]
 8010808:	f003 0308 	and.w	r3, r3, #8
 801080c:	2b00      	cmp	r3, #0
 801080e:	d10a      	bne.n	8010826 <dir_find+0x7a>
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010816:	220b      	movs	r2, #11
 8010818:	4619      	mov	r1, r3
 801081a:	6938      	ldr	r0, [r7, #16]
 801081c:	f7fe ff44 	bl	800f6a8 <mem_cmp>
 8010820:	4603      	mov	r3, r0
 8010822:	2b00      	cmp	r3, #0
 8010824:	d00b      	beq.n	801083e <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8010826:	2100      	movs	r1, #0
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f7ff fe2b 	bl	8010484 <dir_next>
 801082e:	4603      	mov	r3, r0
 8010830:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010832:	7dfb      	ldrb	r3, [r7, #23]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d0c8      	beq.n	80107ca <dir_find+0x1e>
 8010838:	e002      	b.n	8010840 <dir_find+0x94>
		if (res != FR_OK) break;
 801083a:	bf00      	nop
 801083c:	e000      	b.n	8010840 <dir_find+0x94>
			break;
 801083e:	bf00      	nop

	return res;
 8010840:	7dfb      	ldrb	r3, [r7, #23]
}
 8010842:	4618      	mov	r0, r3
 8010844:	3718      	adds	r7, #24
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}

0801084a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801084a:	b580      	push	{r7, lr}
 801084c:	b086      	sub	sp, #24
 801084e:	af00      	add	r7, sp, #0
 8010850:	6078      	str	r0, [r7, #4]
 8010852:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 8010854:	2304      	movs	r3, #4
 8010856:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 8010858:	e03f      	b.n	80108da <dir_read+0x90>
		res = move_window(dp->fs, dp->sect);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010866:	4619      	mov	r1, r3
 8010868:	4610      	mov	r0, r2
 801086a:	f7ff f988 	bl	800fb7e <move_window>
 801086e:	4603      	mov	r3, r0
 8010870:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010872:	7dfb      	ldrb	r3, [r7, #23]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d136      	bne.n	80108e6 <dir_read+0x9c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801087e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8010880:	693b      	ldr	r3, [r7, #16]
 8010882:	781b      	ldrb	r3, [r3, #0]
 8010884:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010886:	7bfb      	ldrb	r3, [r7, #15]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d102      	bne.n	8010892 <dir_read+0x48>
 801088c:	2304      	movs	r3, #4
 801088e:	75fb      	strb	r3, [r7, #23]
 8010890:	e02e      	b.n	80108f0 <dir_read+0xa6>
		a = dir[DIR_Attr] & AM_MASK;
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	330b      	adds	r3, #11
 8010896:	781b      	ldrb	r3, [r3, #0]
 8010898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801089c:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 801089e:	7bfb      	ldrb	r3, [r7, #15]
 80108a0:	2be5      	cmp	r3, #229	; 0xe5
 80108a2:	d011      	beq.n	80108c8 <dir_read+0x7e>
 80108a4:	7bfb      	ldrb	r3, [r7, #15]
 80108a6:	2b2e      	cmp	r3, #46	; 0x2e
 80108a8:	d00e      	beq.n	80108c8 <dir_read+0x7e>
 80108aa:	7bbb      	ldrb	r3, [r7, #14]
 80108ac:	2b0f      	cmp	r3, #15
 80108ae:	d00b      	beq.n	80108c8 <dir_read+0x7e>
 80108b0:	7bbb      	ldrb	r3, [r7, #14]
 80108b2:	f023 0320 	bic.w	r3, r3, #32
 80108b6:	2b08      	cmp	r3, #8
 80108b8:	bf0c      	ite	eq
 80108ba:	2301      	moveq	r3, #1
 80108bc:	2300      	movne	r3, #0
 80108be:	b2db      	uxtb	r3, r3
 80108c0:	461a      	mov	r2, r3
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	4293      	cmp	r3, r2
 80108c6:	d010      	beq.n	80108ea <dir_read+0xa0>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 80108c8:	2100      	movs	r1, #0
 80108ca:	6878      	ldr	r0, [r7, #4]
 80108cc:	f7ff fdda 	bl	8010484 <dir_next>
 80108d0:	4603      	mov	r3, r0
 80108d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80108d4:	7dfb      	ldrb	r3, [r7, #23]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d109      	bne.n	80108ee <dir_read+0xa4>
	while (dp->sect) {
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d1ba      	bne.n	801085a <dir_read+0x10>
 80108e4:	e004      	b.n	80108f0 <dir_read+0xa6>
		if (res != FR_OK) break;
 80108e6:	bf00      	nop
 80108e8:	e002      	b.n	80108f0 <dir_read+0xa6>
			break;
 80108ea:	bf00      	nop
 80108ec:	e000      	b.n	80108f0 <dir_read+0xa6>
		if (res != FR_OK) break;
 80108ee:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 80108f0:	7dfb      	ldrb	r3, [r7, #23]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d003      	beq.n	80108fe <dir_read+0xb4>
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2200      	movs	r2, #0
 80108fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return res;
 80108fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8010900:	4618      	mov	r0, r3
 8010902:	3718      	adds	r7, #24
 8010904:	46bd      	mov	sp, r7
 8010906:	bd80      	pop	{r7, pc}

08010908 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b084      	sub	sp, #16
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010910:	2101      	movs	r1, #1
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f7ff fead 	bl	8010672 <dir_alloc>
 8010918:	4603      	mov	r3, r0
 801091a:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 801091c:	7bfb      	ldrb	r3, [r7, #15]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d126      	bne.n	8010970 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801092e:	4619      	mov	r1, r3
 8010930:	4610      	mov	r0, r2
 8010932:	f7ff f924 	bl	800fb7e <move_window>
 8010936:	4603      	mov	r3, r0
 8010938:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801093a:	7bfb      	ldrb	r3, [r7, #15]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d117      	bne.n	8010970 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010946:	2220      	movs	r2, #32
 8010948:	2100      	movs	r1, #0
 801094a:	4618      	mov	r0, r3
 801094c:	f7fe fe92 	bl	800f674 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801095c:	220b      	movs	r2, #11
 801095e:	4619      	mov	r1, r3
 8010960:	f7fe fe6a 	bl	800f638 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801096a:	2201      	movs	r2, #1
 801096c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8010970:	7bfb      	ldrb	r3, [r7, #15]
}
 8010972:	4618      	mov	r0, r3
 8010974:	3710      	adds	r7, #16
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}

0801097a <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801097a:	b480      	push	{r7}
 801097c:	b087      	sub	sp, #28
 801097e:	af00      	add	r7, sp, #0
 8010980:	6078      	str	r0, [r7, #4]
 8010982:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	3309      	adds	r3, #9
 8010988:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010990:	2b00      	cmp	r3, #0
 8010992:	d05a      	beq.n	8010a4a <get_fileinfo+0xd0>
		dir = dp->dir;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801099a:	60bb      	str	r3, [r7, #8]
		i = 0;
 801099c:	2300      	movs	r3, #0
 801099e:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 80109a0:	e01c      	b.n	80109dc <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	1c5a      	adds	r2, r3, #1
 80109a6:	617a      	str	r2, [r7, #20]
 80109a8:	68ba      	ldr	r2, [r7, #8]
 80109aa:	4413      	add	r3, r2
 80109ac:	781b      	ldrb	r3, [r3, #0]
 80109ae:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 80109b0:	7bfb      	ldrb	r3, [r7, #15]
 80109b2:	2b20      	cmp	r3, #32
 80109b4:	d100      	bne.n	80109b8 <get_fileinfo+0x3e>
 80109b6:	e011      	b.n	80109dc <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80109b8:	7bfb      	ldrb	r3, [r7, #15]
 80109ba:	2b05      	cmp	r3, #5
 80109bc:	d101      	bne.n	80109c2 <get_fileinfo+0x48>
 80109be:	23e5      	movs	r3, #229	; 0xe5
 80109c0:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	2b09      	cmp	r3, #9
 80109c6:	d104      	bne.n	80109d2 <get_fileinfo+0x58>
 80109c8:	693b      	ldr	r3, [r7, #16]
 80109ca:	1c5a      	adds	r2, r3, #1
 80109cc:	613a      	str	r2, [r7, #16]
 80109ce:	222e      	movs	r2, #46	; 0x2e
 80109d0:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 80109d2:	693b      	ldr	r3, [r7, #16]
 80109d4:	1c5a      	adds	r2, r3, #1
 80109d6:	613a      	str	r2, [r7, #16]
 80109d8:	7bfa      	ldrb	r2, [r7, #15]
 80109da:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 80109dc:	697b      	ldr	r3, [r7, #20]
 80109de:	2b0a      	cmp	r3, #10
 80109e0:	d9df      	bls.n	80109a2 <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	7ada      	ldrb	r2, [r3, #11]
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	331f      	adds	r3, #31
 80109ee:	781b      	ldrb	r3, [r3, #0]
 80109f0:	061a      	lsls	r2, r3, #24
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	331e      	adds	r3, #30
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	041b      	lsls	r3, r3, #16
 80109fa:	4313      	orrs	r3, r2
 80109fc:	68ba      	ldr	r2, [r7, #8]
 80109fe:	321d      	adds	r2, #29
 8010a00:	7812      	ldrb	r2, [r2, #0]
 8010a02:	0212      	lsls	r2, r2, #8
 8010a04:	4313      	orrs	r3, r2
 8010a06:	68ba      	ldr	r2, [r7, #8]
 8010a08:	321c      	adds	r2, #28
 8010a0a:	7812      	ldrb	r2, [r2, #0]
 8010a0c:	431a      	orrs	r2, r3
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	3319      	adds	r3, #25
 8010a16:	781b      	ldrb	r3, [r3, #0]
 8010a18:	021b      	lsls	r3, r3, #8
 8010a1a:	b21a      	sxth	r2, r3
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	3318      	adds	r3, #24
 8010a20:	781b      	ldrb	r3, [r3, #0]
 8010a22:	b21b      	sxth	r3, r3
 8010a24:	4313      	orrs	r3, r2
 8010a26:	b21b      	sxth	r3, r3
 8010a28:	b29a      	uxth	r2, r3
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8010a2e:	68bb      	ldr	r3, [r7, #8]
 8010a30:	3317      	adds	r3, #23
 8010a32:	781b      	ldrb	r3, [r3, #0]
 8010a34:	021b      	lsls	r3, r3, #8
 8010a36:	b21a      	sxth	r2, r3
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	3316      	adds	r3, #22
 8010a3c:	781b      	ldrb	r3, [r3, #0]
 8010a3e:	b21b      	sxth	r3, r3
 8010a40:	4313      	orrs	r3, r2
 8010a42:	b21b      	sxth	r3, r3
 8010a44:	b29a      	uxth	r2, r3
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8010a4a:	693b      	ldr	r3, [r7, #16]
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 8010a50:	bf00      	nop
 8010a52:	371c      	adds	r7, #28
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bc80      	pop	{r7}
 8010a58:	4770      	bx	lr
	...

08010a5c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b088      	sub	sp, #32
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
 8010a64:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8010a66:	683b      	ldr	r3, [r7, #0]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	60fb      	str	r3, [r7, #12]
 8010a6c:	e002      	b.n	8010a74 <create_name+0x18>
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	3301      	adds	r3, #1
 8010a72:	60fb      	str	r3, [r7, #12]
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	781b      	ldrb	r3, [r3, #0]
 8010a78:	2b2f      	cmp	r3, #47	; 0x2f
 8010a7a:	d0f8      	beq.n	8010a6e <create_name+0x12>
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	781b      	ldrb	r3, [r3, #0]
 8010a80:	2b5c      	cmp	r3, #92	; 0x5c
 8010a82:	d0f4      	beq.n	8010a6e <create_name+0x12>
	sfn = dp->fn;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010a8a:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010a8c:	220b      	movs	r2, #11
 8010a8e:	2120      	movs	r1, #32
 8010a90:	68b8      	ldr	r0, [r7, #8]
 8010a92:	f7fe fdef 	bl	800f674 <mem_set>
	si = i = b = 0; ni = 8;
 8010a96:	2300      	movs	r3, #0
 8010a98:	77fb      	strb	r3, [r7, #31]
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	613b      	str	r3, [r7, #16]
 8010a9e:	693b      	ldr	r3, [r7, #16]
 8010aa0:	617b      	str	r3, [r7, #20]
 8010aa2:	2308      	movs	r3, #8
 8010aa4:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010aa6:	697b      	ldr	r3, [r7, #20]
 8010aa8:	1c5a      	adds	r2, r3, #1
 8010aaa:	617a      	str	r2, [r7, #20]
 8010aac:	68fa      	ldr	r2, [r7, #12]
 8010aae:	4413      	add	r3, r2
 8010ab0:	781b      	ldrb	r3, [r3, #0]
 8010ab2:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8010ab4:	7fbb      	ldrb	r3, [r7, #30]
 8010ab6:	2b20      	cmp	r3, #32
 8010ab8:	d953      	bls.n	8010b62 <create_name+0x106>
 8010aba:	7fbb      	ldrb	r3, [r7, #30]
 8010abc:	2b2f      	cmp	r3, #47	; 0x2f
 8010abe:	d050      	beq.n	8010b62 <create_name+0x106>
 8010ac0:	7fbb      	ldrb	r3, [r7, #30]
 8010ac2:	2b5c      	cmp	r3, #92	; 0x5c
 8010ac4:	d04d      	beq.n	8010b62 <create_name+0x106>
		if (c == '.' || i >= ni) {
 8010ac6:	7fbb      	ldrb	r3, [r7, #30]
 8010ac8:	2b2e      	cmp	r3, #46	; 0x2e
 8010aca:	d003      	beq.n	8010ad4 <create_name+0x78>
 8010acc:	693a      	ldr	r2, [r7, #16]
 8010ace:	69bb      	ldr	r3, [r7, #24]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d30f      	bcc.n	8010af4 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8010ad4:	69bb      	ldr	r3, [r7, #24]
 8010ad6:	2b08      	cmp	r3, #8
 8010ad8:	d102      	bne.n	8010ae0 <create_name+0x84>
 8010ada:	7fbb      	ldrb	r3, [r7, #30]
 8010adc:	2b2e      	cmp	r3, #46	; 0x2e
 8010ade:	d001      	beq.n	8010ae4 <create_name+0x88>
 8010ae0:	2306      	movs	r3, #6
 8010ae2:	e073      	b.n	8010bcc <create_name+0x170>
			i = 8; ni = 11;
 8010ae4:	2308      	movs	r3, #8
 8010ae6:	613b      	str	r3, [r7, #16]
 8010ae8:	230b      	movs	r3, #11
 8010aea:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8010aec:	7ffb      	ldrb	r3, [r7, #31]
 8010aee:	009b      	lsls	r3, r3, #2
 8010af0:	77fb      	strb	r3, [r7, #31]
 8010af2:	e035      	b.n	8010b60 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010af4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	da08      	bge.n	8010b0e <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8010afc:	7ffb      	ldrb	r3, [r7, #31]
 8010afe:	f043 0303 	orr.w	r3, r3, #3
 8010b02:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010b04:	7fbb      	ldrb	r3, [r7, #30]
 8010b06:	3b80      	subs	r3, #128	; 0x80
 8010b08:	4a32      	ldr	r2, [pc, #200]	; (8010bd4 <create_name+0x178>)
 8010b0a:	5cd3      	ldrb	r3, [r2, r3]
 8010b0c:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8010b0e:	7fbb      	ldrb	r3, [r7, #30]
 8010b10:	4619      	mov	r1, r3
 8010b12:	4831      	ldr	r0, [pc, #196]	; (8010bd8 <create_name+0x17c>)
 8010b14:	f7fe fdee 	bl	800f6f4 <chk_chr>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d001      	beq.n	8010b22 <create_name+0xc6>
				return FR_INVALID_NAME;
 8010b1e:	2306      	movs	r3, #6
 8010b20:	e054      	b.n	8010bcc <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8010b22:	7fbb      	ldrb	r3, [r7, #30]
 8010b24:	2b40      	cmp	r3, #64	; 0x40
 8010b26:	d907      	bls.n	8010b38 <create_name+0xdc>
 8010b28:	7fbb      	ldrb	r3, [r7, #30]
 8010b2a:	2b5a      	cmp	r3, #90	; 0x5a
 8010b2c:	d804      	bhi.n	8010b38 <create_name+0xdc>
				b |= 2;
 8010b2e:	7ffb      	ldrb	r3, [r7, #31]
 8010b30:	f043 0302 	orr.w	r3, r3, #2
 8010b34:	77fb      	strb	r3, [r7, #31]
 8010b36:	e00c      	b.n	8010b52 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8010b38:	7fbb      	ldrb	r3, [r7, #30]
 8010b3a:	2b60      	cmp	r3, #96	; 0x60
 8010b3c:	d909      	bls.n	8010b52 <create_name+0xf6>
 8010b3e:	7fbb      	ldrb	r3, [r7, #30]
 8010b40:	2b7a      	cmp	r3, #122	; 0x7a
 8010b42:	d806      	bhi.n	8010b52 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8010b44:	7ffb      	ldrb	r3, [r7, #31]
 8010b46:	f043 0301 	orr.w	r3, r3, #1
 8010b4a:	77fb      	strb	r3, [r7, #31]
 8010b4c:	7fbb      	ldrb	r3, [r7, #30]
 8010b4e:	3b20      	subs	r3, #32
 8010b50:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8010b52:	693b      	ldr	r3, [r7, #16]
 8010b54:	1c5a      	adds	r2, r3, #1
 8010b56:	613a      	str	r2, [r7, #16]
 8010b58:	68ba      	ldr	r2, [r7, #8]
 8010b5a:	4413      	add	r3, r2
 8010b5c:	7fba      	ldrb	r2, [r7, #30]
 8010b5e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010b60:	e7a1      	b.n	8010aa6 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8010b62:	68fa      	ldr	r2, [r7, #12]
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	441a      	add	r2, r3
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8010b6c:	7fbb      	ldrb	r3, [r7, #30]
 8010b6e:	2b20      	cmp	r3, #32
 8010b70:	d801      	bhi.n	8010b76 <create_name+0x11a>
 8010b72:	2304      	movs	r3, #4
 8010b74:	e000      	b.n	8010b78 <create_name+0x11c>
 8010b76:	2300      	movs	r3, #0
 8010b78:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d101      	bne.n	8010b84 <create_name+0x128>
 8010b80:	2306      	movs	r3, #6
 8010b82:	e023      	b.n	8010bcc <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	781b      	ldrb	r3, [r3, #0]
 8010b88:	2be5      	cmp	r3, #229	; 0xe5
 8010b8a:	d102      	bne.n	8010b92 <create_name+0x136>
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	2205      	movs	r2, #5
 8010b90:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8010b92:	69bb      	ldr	r3, [r7, #24]
 8010b94:	2b08      	cmp	r3, #8
 8010b96:	d102      	bne.n	8010b9e <create_name+0x142>
 8010b98:	7ffb      	ldrb	r3, [r7, #31]
 8010b9a:	009b      	lsls	r3, r3, #2
 8010b9c:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8010b9e:	7ffb      	ldrb	r3, [r7, #31]
 8010ba0:	f003 0303 	and.w	r3, r3, #3
 8010ba4:	2b01      	cmp	r3, #1
 8010ba6:	d103      	bne.n	8010bb0 <create_name+0x154>
 8010ba8:	7fbb      	ldrb	r3, [r7, #30]
 8010baa:	f043 0310 	orr.w	r3, r3, #16
 8010bae:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8010bb0:	7ffb      	ldrb	r3, [r7, #31]
 8010bb2:	f003 030c 	and.w	r3, r3, #12
 8010bb6:	2b04      	cmp	r3, #4
 8010bb8:	d103      	bne.n	8010bc2 <create_name+0x166>
 8010bba:	7fbb      	ldrb	r3, [r7, #30]
 8010bbc:	f043 0308 	orr.w	r3, r3, #8
 8010bc0:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	330b      	adds	r3, #11
 8010bc6:	7fba      	ldrb	r2, [r7, #30]
 8010bc8:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010bca:	2300      	movs	r3, #0
#endif
}
 8010bcc:	4618      	mov	r0, r3
 8010bce:	3720      	adds	r7, #32
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}
 8010bd4:	0801a46c 	.word	0x0801a46c
 8010bd8:	0801a3fc 	.word	0x0801a3fc

08010bdc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b084      	sub	sp, #16
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
 8010be4:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	781b      	ldrb	r3, [r3, #0]
 8010bea:	2b2f      	cmp	r3, #47	; 0x2f
 8010bec:	d003      	beq.n	8010bf6 <follow_path+0x1a>
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	2b5c      	cmp	r3, #92	; 0x5c
 8010bf4:	d102      	bne.n	8010bfc <follow_path+0x20>
		path++;
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	3301      	adds	r3, #1
 8010bfa:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	781b      	ldrb	r3, [r3, #0]
 8010c08:	2b1f      	cmp	r3, #31
 8010c0a:	d80a      	bhi.n	8010c22 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8010c0c:	2100      	movs	r1, #0
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f7ff fba4 	bl	801035c <dir_sdi>
 8010c14:	4603      	mov	r3, r0
 8010c16:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8010c20:	e045      	b.n	8010cae <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010c22:	463b      	mov	r3, r7
 8010c24:	4619      	mov	r1, r3
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f7ff ff18 	bl	8010a5c <create_name>
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8010c30:	7bfb      	ldrb	r3, [r7, #15]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d136      	bne.n	8010ca4 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f7ff fdb8 	bl	80107ac <dir_find>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010c46:	7adb      	ldrb	r3, [r3, #11]
 8010c48:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8010c4a:	7bfb      	ldrb	r3, [r7, #15]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d00a      	beq.n	8010c66 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010c50:	7bfb      	ldrb	r3, [r7, #15]
 8010c52:	2b04      	cmp	r3, #4
 8010c54:	d128      	bne.n	8010ca8 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010c56:	7bbb      	ldrb	r3, [r7, #14]
 8010c58:	f003 0304 	and.w	r3, r3, #4
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d123      	bne.n	8010ca8 <follow_path+0xcc>
 8010c60:	2305      	movs	r3, #5
 8010c62:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8010c64:	e020      	b.n	8010ca8 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010c66:	7bbb      	ldrb	r3, [r7, #14]
 8010c68:	f003 0304 	and.w	r3, r3, #4
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d11d      	bne.n	8010cac <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010c76:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	330b      	adds	r3, #11
 8010c7c:	781b      	ldrb	r3, [r3, #0]
 8010c7e:	f003 0310 	and.w	r3, r3, #16
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d102      	bne.n	8010c8c <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8010c86:	2305      	movs	r3, #5
 8010c88:	73fb      	strb	r3, [r7, #15]
 8010c8a:	e010      	b.n	8010cae <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010c92:	68b9      	ldr	r1, [r7, #8]
 8010c94:	4618      	mov	r0, r3
 8010c96:	f7ff fd36 	bl	8010706 <ld_clust>
 8010c9a:	4602      	mov	r2, r0
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010ca2:	e7be      	b.n	8010c22 <follow_path+0x46>
			if (res != FR_OK) break;
 8010ca4:	bf00      	nop
 8010ca6:	e002      	b.n	8010cae <follow_path+0xd2>
				break;
 8010ca8:	bf00      	nop
 8010caa:	e000      	b.n	8010cae <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010cac:	bf00      	nop
		}
	}

	return res;
 8010cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	3710      	adds	r7, #16
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd80      	pop	{r7, pc}

08010cb8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010cb8:	b480      	push	{r7}
 8010cba:	b087      	sub	sp, #28
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8010cc4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d031      	beq.n	8010d32 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	617b      	str	r3, [r7, #20]
 8010cd4:	e002      	b.n	8010cdc <get_ldnumber+0x24>
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	3301      	adds	r3, #1
 8010cda:	617b      	str	r3, [r7, #20]
 8010cdc:	697b      	ldr	r3, [r7, #20]
 8010cde:	781b      	ldrb	r3, [r3, #0]
 8010ce0:	2b20      	cmp	r3, #32
 8010ce2:	d903      	bls.n	8010cec <get_ldnumber+0x34>
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	781b      	ldrb	r3, [r3, #0]
 8010ce8:	2b3a      	cmp	r3, #58	; 0x3a
 8010cea:	d1f4      	bne.n	8010cd6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010cec:	697b      	ldr	r3, [r7, #20]
 8010cee:	781b      	ldrb	r3, [r3, #0]
 8010cf0:	2b3a      	cmp	r3, #58	; 0x3a
 8010cf2:	d11c      	bne.n	8010d2e <get_ldnumber+0x76>
			tp = *path;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	1c5a      	adds	r2, r3, #1
 8010cfe:	60fa      	str	r2, [r7, #12]
 8010d00:	781b      	ldrb	r3, [r3, #0]
 8010d02:	3b30      	subs	r3, #48	; 0x30
 8010d04:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010d06:	68bb      	ldr	r3, [r7, #8]
 8010d08:	2b09      	cmp	r3, #9
 8010d0a:	d80e      	bhi.n	8010d2a <get_ldnumber+0x72>
 8010d0c:	68fa      	ldr	r2, [r7, #12]
 8010d0e:	697b      	ldr	r3, [r7, #20]
 8010d10:	429a      	cmp	r2, r3
 8010d12:	d10a      	bne.n	8010d2a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d107      	bne.n	8010d2a <get_ldnumber+0x72>
					vol = (int)i;
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	3301      	adds	r3, #1
 8010d22:	617b      	str	r3, [r7, #20]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	697a      	ldr	r2, [r7, #20]
 8010d28:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010d2a:	693b      	ldr	r3, [r7, #16]
 8010d2c:	e002      	b.n	8010d34 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010d2e:	2300      	movs	r3, #0
 8010d30:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010d32:	693b      	ldr	r3, [r7, #16]
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	371c      	adds	r7, #28
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bc80      	pop	{r7}
 8010d3c:	4770      	bx	lr
	...

08010d40 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b082      	sub	sp, #8
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f04f 32ff 	mov.w	r2, #4294967295
 8010d58:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8010d5c:	6839      	ldr	r1, [r7, #0]
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f7fe ff0d 	bl	800fb7e <move_window>
 8010d64:	4603      	mov	r3, r0
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d001      	beq.n	8010d6e <check_fs+0x2e>
		return 3;
 8010d6a:	2303      	movs	r3, #3
 8010d6c:	e04a      	b.n	8010e04 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010d74:	3301      	adds	r3, #1
 8010d76:	781b      	ldrb	r3, [r3, #0]
 8010d78:	021b      	lsls	r3, r3, #8
 8010d7a:	b21a      	sxth	r2, r3
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8010d82:	b21b      	sxth	r3, r3
 8010d84:	4313      	orrs	r3, r2
 8010d86:	b21b      	sxth	r3, r3
 8010d88:	4a20      	ldr	r2, [pc, #128]	; (8010e0c <check_fs+0xcc>)
 8010d8a:	4293      	cmp	r3, r2
 8010d8c:	d001      	beq.n	8010d92 <check_fs+0x52>
		return 2;
 8010d8e:	2302      	movs	r3, #2
 8010d90:	e038      	b.n	8010e04 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	3336      	adds	r3, #54	; 0x36
 8010d96:	3303      	adds	r3, #3
 8010d98:	781b      	ldrb	r3, [r3, #0]
 8010d9a:	061a      	lsls	r2, r3, #24
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	3336      	adds	r3, #54	; 0x36
 8010da0:	3302      	adds	r3, #2
 8010da2:	781b      	ldrb	r3, [r3, #0]
 8010da4:	041b      	lsls	r3, r3, #16
 8010da6:	4313      	orrs	r3, r2
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	3236      	adds	r2, #54	; 0x36
 8010dac:	3201      	adds	r2, #1
 8010dae:	7812      	ldrb	r2, [r2, #0]
 8010db0:	0212      	lsls	r2, r2, #8
 8010db2:	4313      	orrs	r3, r2
 8010db4:	687a      	ldr	r2, [r7, #4]
 8010db6:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8010dba:	4313      	orrs	r3, r2
 8010dbc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010dc0:	4a13      	ldr	r2, [pc, #76]	; (8010e10 <check_fs+0xd0>)
 8010dc2:	4293      	cmp	r3, r2
 8010dc4:	d101      	bne.n	8010dca <check_fs+0x8a>
		return 0;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	e01c      	b.n	8010e04 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	3352      	adds	r3, #82	; 0x52
 8010dce:	3303      	adds	r3, #3
 8010dd0:	781b      	ldrb	r3, [r3, #0]
 8010dd2:	061a      	lsls	r2, r3, #24
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	3352      	adds	r3, #82	; 0x52
 8010dd8:	3302      	adds	r3, #2
 8010dda:	781b      	ldrb	r3, [r3, #0]
 8010ddc:	041b      	lsls	r3, r3, #16
 8010dde:	4313      	orrs	r3, r2
 8010de0:	687a      	ldr	r2, [r7, #4]
 8010de2:	3252      	adds	r2, #82	; 0x52
 8010de4:	3201      	adds	r2, #1
 8010de6:	7812      	ldrb	r2, [r2, #0]
 8010de8:	0212      	lsls	r2, r2, #8
 8010dea:	4313      	orrs	r3, r2
 8010dec:	687a      	ldr	r2, [r7, #4]
 8010dee:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8010df2:	4313      	orrs	r3, r2
 8010df4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010df8:	4a05      	ldr	r2, [pc, #20]	; (8010e10 <check_fs+0xd0>)
 8010dfa:	4293      	cmp	r3, r2
 8010dfc:	d101      	bne.n	8010e02 <check_fs+0xc2>
		return 0;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	e000      	b.n	8010e04 <check_fs+0xc4>

	return 1;
 8010e02:	2301      	movs	r3, #1
}
 8010e04:	4618      	mov	r0, r3
 8010e06:	3708      	adds	r7, #8
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}
 8010e0c:	ffffaa55 	.word	0xffffaa55
 8010e10:	00544146 	.word	0x00544146

08010e14 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b096      	sub	sp, #88	; 0x58
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	60f8      	str	r0, [r7, #12]
 8010e1c:	60b9      	str	r1, [r7, #8]
 8010e1e:	4613      	mov	r3, r2
 8010e20:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	2200      	movs	r2, #0
 8010e26:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010e28:	68b8      	ldr	r0, [r7, #8]
 8010e2a:	f7ff ff45 	bl	8010cb8 <get_ldnumber>
 8010e2e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	da01      	bge.n	8010e3a <find_volume+0x26>
 8010e36:	230b      	movs	r3, #11
 8010e38:	e2b2      	b.n	80113a0 <find_volume+0x58c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010e3a:	4aa2      	ldr	r2, [pc, #648]	; (80110c4 <find_volume+0x2b0>)
 8010e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e42:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d101      	bne.n	8010e4e <find_volume+0x3a>
 8010e4a:	230c      	movs	r3, #12
 8010e4c:	e2a8      	b.n	80113a0 <find_volume+0x58c>

	ENTER_FF(fs);						/* Lock the volume */
 8010e4e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010e50:	f7fe fc6a 	bl	800f728 <lock_fs>
 8010e54:	4603      	mov	r3, r0
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d101      	bne.n	8010e5e <find_volume+0x4a>
 8010e5a:	230f      	movs	r3, #15
 8010e5c:	e2a0      	b.n	80113a0 <find_volume+0x58c>
	*rfs = fs;							/* Return pointer to the file system object */
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010e62:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8010e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e66:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d01b      	beq.n	8010ea6 <find_volume+0x92>
		stat = disk_status(fs->drv);
 8010e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e70:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8010e74:	4618      	mov	r0, r3
 8010e76:	f7fe fb41 	bl	800f4fc <disk_status>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010e80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e84:	f003 0301 	and.w	r3, r3, #1
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d10c      	bne.n	8010ea6 <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8010e8c:	79fb      	ldrb	r3, [r7, #7]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d007      	beq.n	8010ea2 <find_volume+0x8e>
 8010e92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e96:	f003 0304 	and.w	r3, r3, #4
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d001      	beq.n	8010ea2 <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 8010e9e:	230a      	movs	r3, #10
 8010ea0:	e27e      	b.n	80113a0 <find_volume+0x58c>
			return FR_OK;				/* The file system object is valid */
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	e27c      	b.n	80113a0 <find_volume+0x58c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010eb0:	b2da      	uxtb	r2, r3
 8010eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eb4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7fe fb36 	bl	800f530 <disk_initialize>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8010eca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ece:	f003 0301 	and.w	r3, r3, #1
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d001      	beq.n	8010eda <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010ed6:	2303      	movs	r3, #3
 8010ed8:	e262      	b.n	80113a0 <find_volume+0x58c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8010eda:	79fb      	ldrb	r3, [r7, #7]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d007      	beq.n	8010ef0 <find_volume+0xdc>
 8010ee0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ee4:	f003 0304 	and.w	r3, r3, #4
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d001      	beq.n	8010ef0 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8010eec:	230a      	movs	r3, #10
 8010eee:	e257      	b.n	80113a0 <find_volume+0x58c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8010ef4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010ef6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010ef8:	f7ff ff22 	bl	8010d40 <check_fs>
 8010efc:	4603      	mov	r3, r0
 8010efe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8010f02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010f06:	2b01      	cmp	r3, #1
 8010f08:	d155      	bne.n	8010fb6 <find_volume+0x1a2>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	643b      	str	r3, [r7, #64]	; 0x40
 8010f0e:	e029      	b.n	8010f64 <find_volume+0x150>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8010f10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f14:	011b      	lsls	r3, r3, #4
 8010f16:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010f1a:	4413      	add	r3, r2
 8010f1c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8010f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f20:	3304      	adds	r3, #4
 8010f22:	781b      	ldrb	r3, [r3, #0]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d012      	beq.n	8010f4e <find_volume+0x13a>
 8010f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f2a:	330b      	adds	r3, #11
 8010f2c:	781b      	ldrb	r3, [r3, #0]
 8010f2e:	061a      	lsls	r2, r3, #24
 8010f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f32:	330a      	adds	r3, #10
 8010f34:	781b      	ldrb	r3, [r3, #0]
 8010f36:	041b      	lsls	r3, r3, #16
 8010f38:	4313      	orrs	r3, r2
 8010f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f3c:	3209      	adds	r2, #9
 8010f3e:	7812      	ldrb	r2, [r2, #0]
 8010f40:	0212      	lsls	r2, r2, #8
 8010f42:	4313      	orrs	r3, r2
 8010f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f46:	3208      	adds	r2, #8
 8010f48:	7812      	ldrb	r2, [r2, #0]
 8010f4a:	431a      	orrs	r2, r3
 8010f4c:	e000      	b.n	8010f50 <find_volume+0x13c>
 8010f4e:	2200      	movs	r2, #0
 8010f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f52:	009b      	lsls	r3, r3, #2
 8010f54:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010f58:	440b      	add	r3, r1
 8010f5a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8010f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f60:	3301      	adds	r3, #1
 8010f62:	643b      	str	r3, [r7, #64]	; 0x40
 8010f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f66:	2b03      	cmp	r3, #3
 8010f68:	d9d2      	bls.n	8010f10 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d002      	beq.n	8010f7a <find_volume+0x166>
 8010f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f76:	3b01      	subs	r3, #1
 8010f78:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8010f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f7c:	009b      	lsls	r3, r3, #2
 8010f7e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010f82:	4413      	add	r3, r2
 8010f84:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010f88:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8010f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d005      	beq.n	8010f9c <find_volume+0x188>
 8010f90:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010f92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010f94:	f7ff fed4 	bl	8010d40 <check_fs>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	e000      	b.n	8010f9e <find_volume+0x18a>
 8010f9c:	2302      	movs	r3, #2
 8010f9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8010fa2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d005      	beq.n	8010fb6 <find_volume+0x1a2>
 8010faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fac:	3301      	adds	r3, #1
 8010fae:	643b      	str	r3, [r7, #64]	; 0x40
 8010fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fb2:	2b03      	cmp	r3, #3
 8010fb4:	d9e1      	bls.n	8010f7a <find_volume+0x166>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010fb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fba:	2b03      	cmp	r3, #3
 8010fbc:	d101      	bne.n	8010fc2 <find_volume+0x1ae>
 8010fbe:	2301      	movs	r3, #1
 8010fc0:	e1ee      	b.n	80113a0 <find_volume+0x58c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8010fc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d001      	beq.n	8010fce <find_volume+0x1ba>
 8010fca:	230d      	movs	r3, #13
 8010fcc:	e1e8      	b.n	80113a0 <find_volume+0x58c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fd0:	7b1b      	ldrb	r3, [r3, #12]
 8010fd2:	021b      	lsls	r3, r3, #8
 8010fd4:	b21a      	sxth	r2, r3
 8010fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fd8:	7adb      	ldrb	r3, [r3, #11]
 8010fda:	b21b      	sxth	r3, r3
 8010fdc:	4313      	orrs	r3, r2
 8010fde:	b21b      	sxth	r3, r3
 8010fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010fe4:	d001      	beq.n	8010fea <find_volume+0x1d6>
		return FR_NO_FILESYSTEM;
 8010fe6:	230d      	movs	r3, #13
 8010fe8:	e1da      	b.n	80113a0 <find_volume+0x58c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8010fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fec:	7ddb      	ldrb	r3, [r3, #23]
 8010fee:	021b      	lsls	r3, r3, #8
 8010ff0:	b21a      	sxth	r2, r3
 8010ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff4:	7d9b      	ldrb	r3, [r3, #22]
 8010ff6:	b21b      	sxth	r3, r3
 8010ff8:	4313      	orrs	r3, r2
 8010ffa:	b21b      	sxth	r3, r3
 8010ffc:	b29b      	uxth	r3, r3
 8010ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8011000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011002:	2b00      	cmp	r3, #0
 8011004:	d112      	bne.n	801102c <find_volume+0x218>
 8011006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011008:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801100c:	061a      	lsls	r2, r3, #24
 801100e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011010:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8011014:	041b      	lsls	r3, r3, #16
 8011016:	4313      	orrs	r3, r2
 8011018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801101a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 801101e:	0212      	lsls	r2, r2, #8
 8011020:	4313      	orrs	r3, r2
 8011022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011024:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8011028:	4313      	orrs	r3, r2
 801102a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 801102c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801102e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011030:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8011034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011036:	7c1a      	ldrb	r2, [r3, #16]
 8011038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801103a:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 801103e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011040:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8011044:	2b01      	cmp	r3, #1
 8011046:	d006      	beq.n	8011056 <find_volume+0x242>
 8011048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801104a:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 801104e:	2b02      	cmp	r3, #2
 8011050:	d001      	beq.n	8011056 <find_volume+0x242>
		return FR_NO_FILESYSTEM;
 8011052:	230d      	movs	r3, #13
 8011054:	e1a4      	b.n	80113a0 <find_volume+0x58c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8011056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011058:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 801105c:	461a      	mov	r2, r3
 801105e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011060:	fb02 f303 	mul.w	r3, r2, r3
 8011064:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8011066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011068:	7b5a      	ldrb	r2, [r3, #13]
 801106a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801106c:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8011070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011072:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011076:	2b00      	cmp	r3, #0
 8011078:	d00a      	beq.n	8011090 <find_volume+0x27c>
 801107a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801107c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011080:	461a      	mov	r2, r3
 8011082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011084:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011088:	3b01      	subs	r3, #1
 801108a:	4013      	ands	r3, r2
 801108c:	2b00      	cmp	r3, #0
 801108e:	d001      	beq.n	8011094 <find_volume+0x280>
		return FR_NO_FILESYSTEM;
 8011090:	230d      	movs	r3, #13
 8011092:	e185      	b.n	80113a0 <find_volume+0x58c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8011094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011096:	7c9b      	ldrb	r3, [r3, #18]
 8011098:	021b      	lsls	r3, r3, #8
 801109a:	b21a      	sxth	r2, r3
 801109c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801109e:	7c5b      	ldrb	r3, [r3, #17]
 80110a0:	b21b      	sxth	r3, r3
 80110a2:	4313      	orrs	r3, r2
 80110a4:	b21b      	sxth	r3, r3
 80110a6:	b29a      	uxth	r2, r3
 80110a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110aa:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80110ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110b0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80110b4:	f003 030f 	and.w	r3, r3, #15
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d004      	beq.n	80110c8 <find_volume+0x2b4>
		return FR_NO_FILESYSTEM;
 80110be:	230d      	movs	r3, #13
 80110c0:	e16e      	b.n	80113a0 <find_volume+0x58c>
 80110c2:	bf00      	nop
 80110c4:	2000571c 	.word	0x2000571c

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80110c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ca:	7d1b      	ldrb	r3, [r3, #20]
 80110cc:	021b      	lsls	r3, r3, #8
 80110ce:	b21a      	sxth	r2, r3
 80110d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110d2:	7cdb      	ldrb	r3, [r3, #19]
 80110d4:	b21b      	sxth	r3, r3
 80110d6:	4313      	orrs	r3, r2
 80110d8:	b21b      	sxth	r3, r3
 80110da:	b29b      	uxth	r3, r3
 80110dc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80110de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d112      	bne.n	801110a <find_volume+0x2f6>
 80110e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110e6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80110ea:	061a      	lsls	r2, r3, #24
 80110ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ee:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80110f2:	041b      	lsls	r3, r3, #16
 80110f4:	4313      	orrs	r3, r2
 80110f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110f8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80110fc:	0212      	lsls	r2, r2, #8
 80110fe:	4313      	orrs	r3, r2
 8011100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011102:	f892 2020 	ldrb.w	r2, [r2, #32]
 8011106:	4313      	orrs	r3, r2
 8011108:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 801110a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801110c:	7bdb      	ldrb	r3, [r3, #15]
 801110e:	021b      	lsls	r3, r3, #8
 8011110:	b21a      	sxth	r2, r3
 8011112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011114:	7b9b      	ldrb	r3, [r3, #14]
 8011116:	b21b      	sxth	r3, r3
 8011118:	4313      	orrs	r3, r2
 801111a:	b21b      	sxth	r3, r3
 801111c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 801111e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011120:	2b00      	cmp	r3, #0
 8011122:	d101      	bne.n	8011128 <find_volume+0x314>
 8011124:	230d      	movs	r3, #13
 8011126:	e13b      	b.n	80113a0 <find_volume+0x58c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8011128:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801112a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801112c:	4413      	add	r3, r2
 801112e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011130:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8011134:	0912      	lsrs	r2, r2, #4
 8011136:	b292      	uxth	r2, r2
 8011138:	4413      	add	r3, r2
 801113a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801113c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801113e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011140:	429a      	cmp	r2, r3
 8011142:	d201      	bcs.n	8011148 <find_volume+0x334>
 8011144:	230d      	movs	r3, #13
 8011146:	e12b      	b.n	80113a0 <find_volume+0x58c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8011148:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801114a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801114c:	1ad3      	subs	r3, r2, r3
 801114e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011150:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8011154:	fbb3 f3f2 	udiv	r3, r3, r2
 8011158:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 801115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801115c:	2b00      	cmp	r3, #0
 801115e:	d101      	bne.n	8011164 <find_volume+0x350>
 8011160:	230d      	movs	r3, #13
 8011162:	e11d      	b.n	80113a0 <find_volume+0x58c>
	fmt = FS_FAT12;
 8011164:	2301      	movs	r3, #1
 8011166:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 801116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801116c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011170:	4293      	cmp	r3, r2
 8011172:	d902      	bls.n	801117a <find_volume+0x366>
 8011174:	2302      	movs	r3, #2
 8011176:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 801117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801117c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011180:	4293      	cmp	r3, r2
 8011182:	d902      	bls.n	801118a <find_volume+0x376>
 8011184:	2303      	movs	r3, #3
 8011186:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 801118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801118c:	1c9a      	adds	r2, r3, #2
 801118e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011190:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 8011194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011196:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011198:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 801119c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801119e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111a0:	441a      	add	r2, r3
 80111a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a4:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 80111a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80111aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ac:	441a      	add	r2, r3
 80111ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 80111b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80111b8:	2b03      	cmp	r3, #3
 80111ba:	d121      	bne.n	8011200 <find_volume+0x3ec>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80111bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111be:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d001      	beq.n	80111ca <find_volume+0x3b6>
 80111c6:	230d      	movs	r3, #13
 80111c8:	e0ea      	b.n	80113a0 <find_volume+0x58c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80111ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80111d0:	061a      	lsls	r2, r3, #24
 80111d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80111d8:	041b      	lsls	r3, r3, #16
 80111da:	4313      	orrs	r3, r2
 80111dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80111de:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80111e2:	0212      	lsls	r2, r2, #8
 80111e4:	4313      	orrs	r3, r2
 80111e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80111e8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80111ec:	431a      	orrs	r2, r3
 80111ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f0:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80111f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80111fa:	009b      	lsls	r3, r3, #2
 80111fc:	647b      	str	r3, [r7, #68]	; 0x44
 80111fe:	e025      	b.n	801124c <find_volume+0x438>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8011200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011202:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8011206:	2b00      	cmp	r3, #0
 8011208:	d101      	bne.n	801120e <find_volume+0x3fa>
 801120a:	230d      	movs	r3, #13
 801120c:	e0c8      	b.n	80113a0 <find_volume+0x58c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 801120e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011210:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8011214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011216:	441a      	add	r2, r3
 8011218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801121a:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801121e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011222:	2b02      	cmp	r3, #2
 8011224:	d104      	bne.n	8011230 <find_volume+0x41c>
 8011226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011228:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801122c:	005b      	lsls	r3, r3, #1
 801122e:	e00c      	b.n	801124a <find_volume+0x436>
 8011230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011232:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011236:	4613      	mov	r3, r2
 8011238:	005b      	lsls	r3, r3, #1
 801123a:	4413      	add	r3, r2
 801123c:	085a      	lsrs	r2, r3, #1
 801123e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011240:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011244:	f003 0301 	and.w	r3, r3, #1
 8011248:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 801124a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 801124c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801124e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8011252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011254:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011258:	0a5b      	lsrs	r3, r3, #9
 801125a:	429a      	cmp	r2, r3
 801125c:	d201      	bcs.n	8011262 <find_volume+0x44e>
		return FR_NO_FILESYSTEM;
 801125e:	230d      	movs	r3, #13
 8011260:	e09e      	b.n	80113a0 <find_volume+0x58c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8011262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011264:	f04f 32ff 	mov.w	r2, #4294967295
 8011268:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 801126c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801126e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8011272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011274:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8011278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801127a:	2280      	movs	r2, #128	; 0x80
 801127c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8011280:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011284:	2b03      	cmp	r3, #3
 8011286:	d177      	bne.n	8011378 <find_volume+0x564>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8011288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801128a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801128e:	021b      	lsls	r3, r3, #8
 8011290:	b21a      	sxth	r2, r3
 8011292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011294:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011298:	b21b      	sxth	r3, r3
 801129a:	4313      	orrs	r3, r2
 801129c:	b21b      	sxth	r3, r3
 801129e:	2b01      	cmp	r3, #1
 80112a0:	d16a      	bne.n	8011378 <find_volume+0x564>
		&& move_window(fs, bsect + 1) == FR_OK)
 80112a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112a4:	3301      	adds	r3, #1
 80112a6:	4619      	mov	r1, r3
 80112a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80112aa:	f7fe fc68 	bl	800fb7e <move_window>
 80112ae:	4603      	mov	r3, r0
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d161      	bne.n	8011378 <find_volume+0x564>
	{
		fs->fsi_flag = 0;
 80112b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b6:	2200      	movs	r2, #0
 80112b8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80112bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112be:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80112c2:	021b      	lsls	r3, r3, #8
 80112c4:	b21a      	sxth	r2, r3
 80112c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c8:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80112cc:	b21b      	sxth	r3, r3
 80112ce:	4313      	orrs	r3, r2
 80112d0:	b21b      	sxth	r3, r3
 80112d2:	4a35      	ldr	r2, [pc, #212]	; (80113a8 <find_volume+0x594>)
 80112d4:	4293      	cmp	r3, r2
 80112d6:	d14f      	bne.n	8011378 <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80112d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112da:	78db      	ldrb	r3, [r3, #3]
 80112dc:	061a      	lsls	r2, r3, #24
 80112de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e0:	789b      	ldrb	r3, [r3, #2]
 80112e2:	041b      	lsls	r3, r3, #16
 80112e4:	4313      	orrs	r3, r2
 80112e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112e8:	7852      	ldrb	r2, [r2, #1]
 80112ea:	0212      	lsls	r2, r2, #8
 80112ec:	4313      	orrs	r3, r2
 80112ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112f0:	7812      	ldrb	r2, [r2, #0]
 80112f2:	4313      	orrs	r3, r2
 80112f4:	4a2d      	ldr	r2, [pc, #180]	; (80113ac <find_volume+0x598>)
 80112f6:	4293      	cmp	r3, r2
 80112f8:	d13e      	bne.n	8011378 <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80112fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112fc:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8011300:	061a      	lsls	r2, r3, #24
 8011302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011304:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8011308:	041b      	lsls	r3, r3, #16
 801130a:	4313      	orrs	r3, r2
 801130c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801130e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8011312:	0212      	lsls	r2, r2, #8
 8011314:	4313      	orrs	r3, r2
 8011316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011318:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 801131c:	4313      	orrs	r3, r2
 801131e:	4a24      	ldr	r2, [pc, #144]	; (80113b0 <find_volume+0x59c>)
 8011320:	4293      	cmp	r3, r2
 8011322:	d129      	bne.n	8011378 <find_volume+0x564>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8011324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011326:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 801132a:	061a      	lsls	r2, r3, #24
 801132c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801132e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8011332:	041b      	lsls	r3, r3, #16
 8011334:	4313      	orrs	r3, r2
 8011336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011338:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 801133c:	0212      	lsls	r2, r2, #8
 801133e:	4313      	orrs	r3, r2
 8011340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011342:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8011346:	431a      	orrs	r2, r3
 8011348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801134a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 801134e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011350:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8011354:	061a      	lsls	r2, r3, #24
 8011356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011358:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 801135c:	041b      	lsls	r3, r3, #16
 801135e:	4313      	orrs	r3, r2
 8011360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011362:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8011366:	0212      	lsls	r2, r2, #8
 8011368:	4313      	orrs	r3, r2
 801136a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801136c:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8011370:	431a      	orrs	r2, r3
 8011372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011374:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8011378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801137a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801137e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8011382:	4b0c      	ldr	r3, [pc, #48]	; (80113b4 <find_volume+0x5a0>)
 8011384:	881b      	ldrh	r3, [r3, #0]
 8011386:	3301      	adds	r3, #1
 8011388:	b29a      	uxth	r2, r3
 801138a:	4b0a      	ldr	r3, [pc, #40]	; (80113b4 <find_volume+0x5a0>)
 801138c:	801a      	strh	r2, [r3, #0]
 801138e:	4b09      	ldr	r3, [pc, #36]	; (80113b4 <find_volume+0x5a0>)
 8011390:	881a      	ldrh	r2, [r3, #0]
 8011392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011394:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8011398:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801139a:	f7fe fb7d 	bl	800fa98 <clear_lock>
#endif

	return FR_OK;
 801139e:	2300      	movs	r3, #0
}
 80113a0:	4618      	mov	r0, r3
 80113a2:	3758      	adds	r7, #88	; 0x58
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}
 80113a8:	ffffaa55 	.word	0xffffaa55
 80113ac:	41615252 	.word	0x41615252
 80113b0:	61417272 	.word	0x61417272
 80113b4:	20005720 	.word	0x20005720

080113b8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b084      	sub	sp, #16
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d022      	beq.n	8011410 <validate+0x58>
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d01d      	beq.n	8011410 <validate+0x58>
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80113da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d016      	beq.n	8011410 <validate+0x58>
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80113e8:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80113f2:	429a      	cmp	r2, r3
 80113f4:	d10c      	bne.n	8011410 <validate+0x58>
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80113fc:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8011400:	4618      	mov	r0, r3
 8011402:	f7fe f87b 	bl	800f4fc <disk_status>
 8011406:	4603      	mov	r3, r0
 8011408:	f003 0301 	and.w	r3, r3, #1
 801140c:	2b00      	cmp	r3, #0
 801140e:	d001      	beq.n	8011414 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8011410:	2309      	movs	r3, #9
 8011412:	e00b      	b.n	801142c <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801141a:	4618      	mov	r0, r3
 801141c:	f7fe f984 	bl	800f728 <lock_fs>
 8011420:	4603      	mov	r3, r0
 8011422:	2b00      	cmp	r3, #0
 8011424:	d101      	bne.n	801142a <validate+0x72>
 8011426:	230f      	movs	r3, #15
 8011428:	e000      	b.n	801142c <validate+0x74>

	return FR_OK;
 801142a:	2300      	movs	r3, #0
}
 801142c:	4618      	mov	r0, r3
 801142e:	3710      	adds	r7, #16
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}

08011434 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b088      	sub	sp, #32
 8011438:	af00      	add	r7, sp, #0
 801143a:	60f8      	str	r0, [r7, #12]
 801143c:	60b9      	str	r1, [r7, #8]
 801143e:	4613      	mov	r3, r2
 8011440:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8011446:	f107 0310 	add.w	r3, r7, #16
 801144a:	4618      	mov	r0, r3
 801144c:	f7ff fc34 	bl	8010cb8 <get_ldnumber>
 8011450:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011452:	69fb      	ldr	r3, [r7, #28]
 8011454:	2b00      	cmp	r3, #0
 8011456:	da01      	bge.n	801145c <f_mount+0x28>
 8011458:	230b      	movs	r3, #11
 801145a:	e04c      	b.n	80114f6 <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801145c:	4a28      	ldr	r2, [pc, #160]	; (8011500 <f_mount+0xcc>)
 801145e:	69fb      	ldr	r3, [r7, #28]
 8011460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011464:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011466:	69bb      	ldr	r3, [r7, #24]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d011      	beq.n	8011490 <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 801146c:	69b8      	ldr	r0, [r7, #24]
 801146e:	f7fe fb13 	bl	800fa98 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8011472:	69bb      	ldr	r3, [r7, #24]
 8011474:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8011478:	4618      	mov	r0, r3
 801147a:	f001 f917 	bl	80126ac <ff_del_syncobj>
 801147e:	4603      	mov	r3, r0
 8011480:	2b00      	cmp	r3, #0
 8011482:	d101      	bne.n	8011488 <f_mount+0x54>
 8011484:	2302      	movs	r3, #2
 8011486:	e036      	b.n	80114f6 <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011488:	69bb      	ldr	r3, [r7, #24]
 801148a:	2200      	movs	r2, #0
 801148c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d011      	beq.n	80114ba <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	2200      	movs	r2, #0
 801149a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 801149e:	69fb      	ldr	r3, [r7, #28]
 80114a0:	b2da      	uxtb	r2, r3
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80114a8:	4619      	mov	r1, r3
 80114aa:	4610      	mov	r0, r2
 80114ac:	f001 f8de 	bl	801266c <ff_cre_syncobj>
 80114b0:	4603      	mov	r3, r0
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d101      	bne.n	80114ba <f_mount+0x86>
 80114b6:	2302      	movs	r3, #2
 80114b8:	e01d      	b.n	80114f6 <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80114ba:	68fa      	ldr	r2, [r7, #12]
 80114bc:	4910      	ldr	r1, [pc, #64]	; (8011500 <f_mount+0xcc>)
 80114be:	69fb      	ldr	r3, [r7, #28]
 80114c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d002      	beq.n	80114d0 <f_mount+0x9c>
 80114ca:	79fb      	ldrb	r3, [r7, #7]
 80114cc:	2b01      	cmp	r3, #1
 80114ce:	d001      	beq.n	80114d4 <f_mount+0xa0>
 80114d0:	2300      	movs	r3, #0
 80114d2:	e010      	b.n	80114f6 <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80114d4:	f107 0108 	add.w	r1, r7, #8
 80114d8:	f107 030c 	add.w	r3, r7, #12
 80114dc:	2200      	movs	r2, #0
 80114de:	4618      	mov	r0, r3
 80114e0:	f7ff fc98 	bl	8010e14 <find_volume>
 80114e4:	4603      	mov	r3, r0
 80114e6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	7dfa      	ldrb	r2, [r7, #23]
 80114ec:	4611      	mov	r1, r2
 80114ee:	4618      	mov	r0, r3
 80114f0:	f7fe f929 	bl	800f746 <unlock_fs>
 80114f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80114f6:	4618      	mov	r0, r3
 80114f8:	3720      	adds	r7, #32
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	2000571c 	.word	0x2000571c

08011504 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 801150a:	af00      	add	r7, sp, #0
 801150c:	f107 030c 	add.w	r3, r7, #12
 8011510:	6018      	str	r0, [r3, #0]
 8011512:	f107 0308 	add.w	r3, r7, #8
 8011516:	6019      	str	r1, [r3, #0]
 8011518:	1dfb      	adds	r3, r7, #7
 801151a:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 801151c:	f107 030c 	add.w	r3, r7, #12
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d101      	bne.n	801152a <f_open+0x26>
 8011526:	2309      	movs	r3, #9
 8011528:	e1fc      	b.n	8011924 <f_open+0x420>
	fp->fs = 0;			/* Clear file object */
 801152a:	f107 030c 	add.w	r3, r7, #12
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	2200      	movs	r2, #0
 8011532:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8011536:	1dfb      	adds	r3, r7, #7
 8011538:	1dfa      	adds	r2, r7, #7
 801153a:	7812      	ldrb	r2, [r2, #0]
 801153c:	f002 021f 	and.w	r2, r2, #31
 8011540:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8011542:	1dfb      	adds	r3, r7, #7
 8011544:	781b      	ldrb	r3, [r3, #0]
 8011546:	f023 0301 	bic.w	r3, r3, #1
 801154a:	b2da      	uxtb	r2, r3
 801154c:	f107 0108 	add.w	r1, r7, #8
 8011550:	f107 0320 	add.w	r3, r7, #32
 8011554:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8011558:	4618      	mov	r0, r3
 801155a:	f7ff fc5b 	bl	8010e14 <find_volume>
 801155e:	4603      	mov	r3, r0
 8011560:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8011564:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011568:	2b00      	cmp	r3, #0
 801156a:	f040 81cf 	bne.w	801190c <f_open+0x408>
		INIT_BUF(dj);
 801156e:	f107 0320 	add.w	r3, r7, #32
 8011572:	f107 0214 	add.w	r2, r7, #20
 8011576:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 801157a:	f107 0308 	add.w	r3, r7, #8
 801157e:	681a      	ldr	r2, [r3, #0]
 8011580:	f107 0320 	add.w	r3, r7, #32
 8011584:	4611      	mov	r1, r2
 8011586:	4618      	mov	r0, r3
 8011588:	f7ff fb28 	bl	8010bdc <follow_path>
 801158c:	4603      	mov	r3, r0
 801158e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8011592:	f107 0320 	add.w	r3, r7, #32
 8011596:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801159a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801159e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d11a      	bne.n	80115dc <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 80115a6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d103      	bne.n	80115b6 <f_open+0xb2>
				res = FR_INVALID_NAME;
 80115ae:	2306      	movs	r3, #6
 80115b0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80115b4:	e012      	b.n	80115dc <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80115b6:	1dfb      	adds	r3, r7, #7
 80115b8:	781b      	ldrb	r3, [r3, #0]
 80115ba:	f023 0301 	bic.w	r3, r3, #1
 80115be:	2b00      	cmp	r3, #0
 80115c0:	bf14      	ite	ne
 80115c2:	2301      	movne	r3, #1
 80115c4:	2300      	moveq	r3, #0
 80115c6:	b2db      	uxtb	r3, r3
 80115c8:	461a      	mov	r2, r3
 80115ca:	f107 0320 	add.w	r3, r7, #32
 80115ce:	4611      	mov	r1, r2
 80115d0:	4618      	mov	r0, r3
 80115d2:	f7fe f8d7 	bl	800f784 <chk_lock>
 80115d6:	4603      	mov	r3, r0
 80115d8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80115dc:	1dfb      	adds	r3, r7, #7
 80115de:	781b      	ldrb	r3, [r3, #0]
 80115e0:	f003 031c 	and.w	r3, r3, #28
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	f000 80cc 	beq.w	8011782 <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 80115ea:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d01f      	beq.n	8011632 <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80115f2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80115f6:	2b04      	cmp	r3, #4
 80115f8:	d10e      	bne.n	8011618 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80115fa:	f7fe f92f 	bl	800f85c <enq_lock>
 80115fe:	4603      	mov	r3, r0
 8011600:	2b00      	cmp	r3, #0
 8011602:	d006      	beq.n	8011612 <f_open+0x10e>
 8011604:	f107 0320 	add.w	r3, r7, #32
 8011608:	4618      	mov	r0, r3
 801160a:	f7ff f97d 	bl	8010908 <dir_register>
 801160e:	4603      	mov	r3, r0
 8011610:	e000      	b.n	8011614 <f_open+0x110>
 8011612:	2312      	movs	r3, #18
 8011614:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011618:	1dfb      	adds	r3, r7, #7
 801161a:	1dfa      	adds	r2, r7, #7
 801161c:	7812      	ldrb	r2, [r2, #0]
 801161e:	f042 0208 	orr.w	r2, r2, #8
 8011622:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8011624:	f107 0320 	add.w	r3, r7, #32
 8011628:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801162c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8011630:	e014      	b.n	801165c <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011632:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011636:	330b      	adds	r3, #11
 8011638:	781b      	ldrb	r3, [r3, #0]
 801163a:	f003 0311 	and.w	r3, r3, #17
 801163e:	2b00      	cmp	r3, #0
 8011640:	d003      	beq.n	801164a <f_open+0x146>
					res = FR_DENIED;
 8011642:	2307      	movs	r3, #7
 8011644:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8011648:	e008      	b.n	801165c <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 801164a:	1dfb      	adds	r3, r7, #7
 801164c:	781b      	ldrb	r3, [r3, #0]
 801164e:	f003 0304 	and.w	r3, r3, #4
 8011652:	2b00      	cmp	r3, #0
 8011654:	d002      	beq.n	801165c <f_open+0x158>
						res = FR_EXIST;
 8011656:	2308      	movs	r3, #8
 8011658:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801165c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011660:	2b00      	cmp	r3, #0
 8011662:	f040 80af 	bne.w	80117c4 <f_open+0x2c0>
 8011666:	1dfb      	adds	r3, r7, #7
 8011668:	781b      	ldrb	r3, [r3, #0]
 801166a:	f003 0308 	and.w	r3, r3, #8
 801166e:	2b00      	cmp	r3, #0
 8011670:	f000 80a8 	beq.w	80117c4 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 8011674:	f7fa feaa 	bl	800c3cc <get_fattime>
 8011678:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 801167c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011680:	330e      	adds	r3, #14
 8011682:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8011686:	b2d2      	uxtb	r2, r2
 8011688:	701a      	strb	r2, [r3, #0]
 801168a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801168e:	b29b      	uxth	r3, r3
 8011690:	0a1b      	lsrs	r3, r3, #8
 8011692:	b29a      	uxth	r2, r3
 8011694:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011698:	330f      	adds	r3, #15
 801169a:	b2d2      	uxtb	r2, r2
 801169c:	701a      	strb	r2, [r3, #0]
 801169e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80116a2:	0c1a      	lsrs	r2, r3, #16
 80116a4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80116a8:	3310      	adds	r3, #16
 80116aa:	b2d2      	uxtb	r2, r2
 80116ac:	701a      	strb	r2, [r3, #0]
 80116ae:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80116b2:	0e1a      	lsrs	r2, r3, #24
 80116b4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80116b8:	3311      	adds	r3, #17
 80116ba:	b2d2      	uxtb	r2, r2
 80116bc:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80116be:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80116c2:	330b      	adds	r3, #11
 80116c4:	2200      	movs	r2, #0
 80116c6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80116c8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80116cc:	331c      	adds	r3, #28
 80116ce:	2200      	movs	r2, #0
 80116d0:	701a      	strb	r2, [r3, #0]
 80116d2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80116d6:	331d      	adds	r3, #29
 80116d8:	2200      	movs	r2, #0
 80116da:	701a      	strb	r2, [r3, #0]
 80116dc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80116e0:	331e      	adds	r3, #30
 80116e2:	2200      	movs	r2, #0
 80116e4:	701a      	strb	r2, [r3, #0]
 80116e6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80116ea:	331f      	adds	r3, #31
 80116ec:	2200      	movs	r2, #0
 80116ee:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80116f0:	f107 0320 	add.w	r3, r7, #32
 80116f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80116f8:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80116fc:	4618      	mov	r0, r3
 80116fe:	f7ff f802 	bl	8010706 <ld_clust>
 8011702:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8011706:	2100      	movs	r1, #0
 8011708:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 801170c:	f7ff f828 	bl	8010760 <st_clust>
				dj.fs->wflag = 1;
 8011710:	f107 0320 	add.w	r3, r7, #32
 8011714:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011718:	2201      	movs	r2, #1
 801171a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 801171e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8011722:	2b00      	cmp	r3, #0
 8011724:	d04e      	beq.n	80117c4 <f_open+0x2c0>
					dw = dj.fs->winsect;
 8011726:	f107 0320 	add.w	r3, r7, #32
 801172a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801172e:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8011732:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8011736:	f107 0320 	add.w	r3, r7, #32
 801173a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801173e:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8011742:	4618      	mov	r0, r3
 8011744:	f7fe fcdf 	bl	8010106 <remove_chain>
 8011748:	4603      	mov	r3, r0
 801174a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 801174e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011752:	2b00      	cmp	r3, #0
 8011754:	d136      	bne.n	80117c4 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8011756:	f107 0320 	add.w	r3, r7, #32
 801175a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801175e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8011762:	3a01      	subs	r2, #1
 8011764:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
						res = move_window(dj.fs, dw);
 8011768:	f107 0320 	add.w	r3, r7, #32
 801176c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011770:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8011774:	4618      	mov	r0, r3
 8011776:	f7fe fa02 	bl	800fb7e <move_window>
 801177a:	4603      	mov	r3, r0
 801177c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8011780:	e020      	b.n	80117c4 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8011782:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011786:	2b00      	cmp	r3, #0
 8011788:	d11c      	bne.n	80117c4 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 801178a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801178e:	330b      	adds	r3, #11
 8011790:	781b      	ldrb	r3, [r3, #0]
 8011792:	f003 0310 	and.w	r3, r3, #16
 8011796:	2b00      	cmp	r3, #0
 8011798:	d003      	beq.n	80117a2 <f_open+0x29e>
					res = FR_NO_FILE;
 801179a:	2304      	movs	r3, #4
 801179c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80117a0:	e010      	b.n	80117c4 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80117a2:	1dfb      	adds	r3, r7, #7
 80117a4:	781b      	ldrb	r3, [r3, #0]
 80117a6:	f003 0302 	and.w	r3, r3, #2
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d00a      	beq.n	80117c4 <f_open+0x2c0>
 80117ae:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80117b2:	330b      	adds	r3, #11
 80117b4:	781b      	ldrb	r3, [r3, #0]
 80117b6:	f003 0301 	and.w	r3, r3, #1
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d002      	beq.n	80117c4 <f_open+0x2c0>
						res = FR_DENIED;
 80117be:	2307      	movs	r3, #7
 80117c0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80117c4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d13d      	bne.n	8011848 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80117cc:	1dfb      	adds	r3, r7, #7
 80117ce:	781b      	ldrb	r3, [r3, #0]
 80117d0:	f003 0308 	and.w	r3, r3, #8
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d005      	beq.n	80117e4 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 80117d8:	1dfb      	adds	r3, r7, #7
 80117da:	1dfa      	adds	r2, r7, #7
 80117dc:	7812      	ldrb	r2, [r2, #0]
 80117de:	f042 0220 	orr.w	r2, r2, #32
 80117e2:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80117e4:	f107 0320 	add.w	r3, r7, #32
 80117e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80117ec:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 80117f0:	f107 030c 	add.w	r3, r7, #12
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 80117fa:	f107 030c 	add.w	r3, r7, #12
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8011804:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011808:	1dfb      	adds	r3, r7, #7
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	f023 0301 	bic.w	r3, r3, #1
 8011810:	2b00      	cmp	r3, #0
 8011812:	bf14      	ite	ne
 8011814:	2301      	movne	r3, #1
 8011816:	2300      	moveq	r3, #0
 8011818:	b2db      	uxtb	r3, r3
 801181a:	461a      	mov	r2, r3
 801181c:	f107 0320 	add.w	r3, r7, #32
 8011820:	4611      	mov	r1, r2
 8011822:	4618      	mov	r0, r3
 8011824:	f7fe f83e 	bl	800f8a4 <inc_lock>
 8011828:	4602      	mov	r2, r0
 801182a:	f107 030c 	add.w	r3, r7, #12
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8011834:	f107 030c 	add.w	r3, r7, #12
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 801183e:	2b00      	cmp	r3, #0
 8011840:	d102      	bne.n	8011848 <f_open+0x344>
 8011842:	2302      	movs	r3, #2
 8011844:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8011848:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 801184c:	2b00      	cmp	r3, #0
 801184e:	d15d      	bne.n	801190c <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 8011850:	f107 030c 	add.w	r3, r7, #12
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	1dfa      	adds	r2, r7, #7
 8011858:	7812      	ldrb	r2, [r2, #0]
 801185a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 801185e:	f107 030c 	add.w	r3, r7, #12
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	2200      	movs	r2, #0
 8011866:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 801186a:	f107 0320 	add.w	r3, r7, #32
 801186e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011872:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8011876:	4618      	mov	r0, r3
 8011878:	f7fe ff45 	bl	8010706 <ld_clust>
 801187c:	4602      	mov	r2, r0
 801187e:	f107 030c 	add.w	r3, r7, #12
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8011888:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801188c:	331f      	adds	r3, #31
 801188e:	781b      	ldrb	r3, [r3, #0]
 8011890:	061a      	lsls	r2, r3, #24
 8011892:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011896:	331e      	adds	r3, #30
 8011898:	781b      	ldrb	r3, [r3, #0]
 801189a:	041b      	lsls	r3, r3, #16
 801189c:	4313      	orrs	r3, r2
 801189e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80118a2:	321d      	adds	r2, #29
 80118a4:	7812      	ldrb	r2, [r2, #0]
 80118a6:	0212      	lsls	r2, r2, #8
 80118a8:	4313      	orrs	r3, r2
 80118aa:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80118ae:	321c      	adds	r2, #28
 80118b0:	7812      	ldrb	r2, [r2, #0]
 80118b2:	431a      	orrs	r2, r3
 80118b4:	f107 030c 	add.w	r3, r7, #12
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 80118be:	f107 030c 	add.w	r3, r7, #12
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	2200      	movs	r2, #0
 80118c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 80118ca:	f107 030c 	add.w	r3, r7, #12
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	2200      	movs	r2, #0
 80118d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80118d6:	f107 030c 	add.w	r3, r7, #12
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	2200      	movs	r2, #0
 80118de:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80118e2:	f107 0320 	add.w	r3, r7, #32
 80118e6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80118ea:	f107 030c 	add.w	r3, r7, #12
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 80118f4:	f107 030c 	add.w	r3, r7, #12
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80118fe:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8011902:	f107 030c 	add.w	r3, r7, #12
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 801190c:	f107 0320 	add.w	r3, r7, #32
 8011910:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011914:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 8011918:	4611      	mov	r1, r2
 801191a:	4618      	mov	r0, r3
 801191c:	f7fd ff13 	bl	800f746 <unlock_fs>
 8011920:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8011924:	4618      	mov	r0, r3
 8011926:	f507 7714 	add.w	r7, r7, #592	; 0x250
 801192a:	46bd      	mov	sp, r7
 801192c:	bd80      	pop	{r7, pc}

0801192e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801192e:	b580      	push	{r7, lr}
 8011930:	b08a      	sub	sp, #40	; 0x28
 8011932:	af00      	add	r7, sp, #0
 8011934:	60f8      	str	r0, [r7, #12]
 8011936:	60b9      	str	r1, [r7, #8]
 8011938:	607a      	str	r2, [r7, #4]
 801193a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 801193c:	68bb      	ldr	r3, [r7, #8]
 801193e:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8011940:	683b      	ldr	r3, [r7, #0]
 8011942:	2200      	movs	r2, #0
 8011944:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8011946:	68f8      	ldr	r0, [r7, #12]
 8011948:	f7ff fd36 	bl	80113b8 <validate>
 801194c:	4603      	mov	r3, r0
 801194e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8011950:	7dfb      	ldrb	r3, [r7, #23]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d009      	beq.n	801196a <f_write+0x3c>
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801195c:	7dfa      	ldrb	r2, [r7, #23]
 801195e:	4611      	mov	r1, r2
 8011960:	4618      	mov	r0, r3
 8011962:	f7fd fef0 	bl	800f746 <unlock_fs>
 8011966:	7dfb      	ldrb	r3, [r7, #23]
 8011968:	e1d4      	b.n	8011d14 <f_write+0x3e6>
	if (fp->err)							/* Check error */
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8011970:	2b00      	cmp	r3, #0
 8011972:	d00d      	beq.n	8011990 <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8011980:	4619      	mov	r1, r3
 8011982:	4610      	mov	r0, r2
 8011984:	f7fd fedf 	bl	800f746 <unlock_fs>
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 801198e:	e1c1      	b.n	8011d14 <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011996:	f003 0302 	and.w	r3, r3, #2
 801199a:	2b00      	cmp	r3, #0
 801199c:	d108      	bne.n	80119b0 <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80119a4:	2107      	movs	r1, #7
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7fd fecd 	bl	800f746 <unlock_fs>
 80119ac:	2307      	movs	r3, #7
 80119ae:	e1b1      	b.n	8011d14 <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	441a      	add	r2, r3
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80119c0:	429a      	cmp	r2, r3
 80119c2:	f080 8182 	bcs.w	8011cca <f_write+0x39c>
 80119c6:	2300      	movs	r3, #0
 80119c8:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80119ca:	e17e      	b.n	8011cca <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80119d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	f040 813e 	bne.w	8011c58 <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80119e2:	0a5b      	lsrs	r3, r3, #9
 80119e4:	b2da      	uxtb	r2, r3
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80119ec:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80119f0:	3b01      	subs	r3, #1
 80119f2:	b2db      	uxtb	r3, r3
 80119f4:	4013      	ands	r3, r2
 80119f6:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80119f8:	7dbb      	ldrb	r3, [r7, #22]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d15f      	bne.n	8011abe <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d10f      	bne.n	8011a28 <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011a0e:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8011a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d121      	bne.n	8011a5a <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011a1c:	2100      	movs	r1, #0
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f7fe fbcb 	bl	80101ba <create_chain>
 8011a24:	6278      	str	r0, [r7, #36]	; 0x24
 8011a26:	e018      	b.n	8011a5a <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d008      	beq.n	8011a44 <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011a38:	4619      	mov	r1, r3
 8011a3a:	68f8      	ldr	r0, [r7, #12]
 8011a3c:	f7fe fc5a 	bl	80102f4 <clmt_clust>
 8011a40:	6278      	str	r0, [r7, #36]	; 0x24
 8011a42:	e00a      	b.n	8011a5a <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011a50:	4619      	mov	r1, r3
 8011a52:	4610      	mov	r0, r2
 8011a54:	f7fe fbb1 	bl	80101ba <create_chain>
 8011a58:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	f000 8139 	beq.w	8011cd4 <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8011a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a64:	2b01      	cmp	r3, #1
 8011a66:	d10c      	bne.n	8011a82 <f_write+0x154>
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	2202      	movs	r2, #2
 8011a6c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011a76:	2102      	movs	r1, #2
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f7fd fe64 	bl	800f746 <unlock_fs>
 8011a7e:	2302      	movs	r3, #2
 8011a80:	e148      	b.n	8011d14 <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8011a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a88:	d10c      	bne.n	8011aa4 <f_write+0x176>
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	2201      	movs	r2, #1
 8011a8e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011a98:	2101      	movs	r1, #1
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f7fd fe53 	bl	800f746 <unlock_fs>
 8011aa0:	2301      	movs	r3, #1
 8011aa2:	e137      	b.n	8011d14 <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011aa8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d103      	bne.n	8011abe <f_write+0x190>
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011aba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d024      	beq.n	8011b16 <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011ad2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8011ad6:	68f9      	ldr	r1, [r7, #12]
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011ade:	2301      	movs	r3, #1
 8011ae0:	f7fd fd6c 	bl	800f5bc <disk_write>
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d00c      	beq.n	8011b04 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	2201      	movs	r2, #1
 8011aee:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011af8:	2101      	movs	r1, #1
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7fd fe23 	bl	800f746 <unlock_fs>
 8011b00:	2301      	movs	r3, #1
 8011b02:	e107      	b.n	8011d14 <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011b0e:	b2da      	uxtb	r2, r3
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011b22:	4619      	mov	r1, r3
 8011b24:	4610      	mov	r0, r2
 8011b26:	f7fe f905 	bl	800fd34 <clust2sect>
 8011b2a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8011b2c:	693b      	ldr	r3, [r7, #16]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d10c      	bne.n	8011b4c <f_write+0x21e>
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	2202      	movs	r2, #2
 8011b36:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011b40:	2102      	movs	r1, #2
 8011b42:	4618      	mov	r0, r3
 8011b44:	f7fd fdff 	bl	800f746 <unlock_fs>
 8011b48:	2302      	movs	r3, #2
 8011b4a:	e0e3      	b.n	8011d14 <f_write+0x3e6>
			sect += csect;
 8011b4c:	7dbb      	ldrb	r3, [r7, #22]
 8011b4e:	693a      	ldr	r2, [r7, #16]
 8011b50:	4413      	add	r3, r2
 8011b52:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	0a5b      	lsrs	r3, r3, #9
 8011b58:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011b5a:	69fb      	ldr	r3, [r7, #28]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d04f      	beq.n	8011c00 <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8011b60:	7dba      	ldrb	r2, [r7, #22]
 8011b62:	69fb      	ldr	r3, [r7, #28]
 8011b64:	4413      	add	r3, r2
 8011b66:	68fa      	ldr	r2, [r7, #12]
 8011b68:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8011b6c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8011b70:	4293      	cmp	r3, r2
 8011b72:	d908      	bls.n	8011b86 <f_write+0x258>
					cc = fp->fs->csize - csect;
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011b7a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011b7e:	461a      	mov	r2, r3
 8011b80:	7dbb      	ldrb	r3, [r7, #22]
 8011b82:	1ad3      	subs	r3, r2, r3
 8011b84:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011b8c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8011b90:	69fb      	ldr	r3, [r7, #28]
 8011b92:	693a      	ldr	r2, [r7, #16]
 8011b94:	69b9      	ldr	r1, [r7, #24]
 8011b96:	f7fd fd11 	bl	800f5bc <disk_write>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d00c      	beq.n	8011bba <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	2201      	movs	r2, #1
 8011ba4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011bae:	2101      	movs	r1, #1
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f7fd fdc8 	bl	800f746 <unlock_fs>
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	e0ac      	b.n	8011d14 <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011bc0:	693b      	ldr	r3, [r7, #16]
 8011bc2:	1ad3      	subs	r3, r2, r3
 8011bc4:	69fa      	ldr	r2, [r7, #28]
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d916      	bls.n	8011bf8 <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8011bca:	68f8      	ldr	r0, [r7, #12]
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011bd2:	693b      	ldr	r3, [r7, #16]
 8011bd4:	1ad3      	subs	r3, r2, r3
 8011bd6:	025b      	lsls	r3, r3, #9
 8011bd8:	69ba      	ldr	r2, [r7, #24]
 8011bda:	4413      	add	r3, r2
 8011bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011be0:	4619      	mov	r1, r3
 8011be2:	f7fd fd29 	bl	800f638 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011bf0:	b2da      	uxtb	r2, r3
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8011bf8:	69fb      	ldr	r3, [r7, #28]
 8011bfa:	025b      	lsls	r3, r3, #9
 8011bfc:	623b      	str	r3, [r7, #32]
				continue;
 8011bfe:	e04e      	b.n	8011c9e <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011c06:	693a      	ldr	r2, [r7, #16]
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	d021      	beq.n	8011c50 <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	d219      	bcs.n	8011c50 <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011c22:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8011c26:	68f9      	ldr	r1, [r7, #12]
 8011c28:	2301      	movs	r3, #1
 8011c2a:	693a      	ldr	r2, [r7, #16]
 8011c2c:	f7fd fca6 	bl	800f57c <disk_read>
 8011c30:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d00c      	beq.n	8011c50 <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	2201      	movs	r2, #1
 8011c3a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011c44:	2101      	movs	r1, #1
 8011c46:	4618      	mov	r0, r3
 8011c48:	f7fd fd7d 	bl	800f746 <unlock_fs>
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	e061      	b.n	8011d14 <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	693a      	ldr	r2, [r7, #16]
 8011c54:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c62:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8011c66:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8011c68:	6a3a      	ldr	r2, [r7, #32]
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	429a      	cmp	r2, r3
 8011c6e:	d901      	bls.n	8011c74 <f_write+0x346>
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c7e:	68fa      	ldr	r2, [r7, #12]
 8011c80:	4413      	add	r3, r2
 8011c82:	6a3a      	ldr	r2, [r7, #32]
 8011c84:	69b9      	ldr	r1, [r7, #24]
 8011c86:	4618      	mov	r0, r3
 8011c88:	f7fd fcd6 	bl	800f638 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c96:	b2da      	uxtb	r2, r3
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8011c9e:	69ba      	ldr	r2, [r7, #24]
 8011ca0:	6a3b      	ldr	r3, [r7, #32]
 8011ca2:	4413      	add	r3, r2
 8011ca4:	61bb      	str	r3, [r7, #24]
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011cac:	6a3b      	ldr	r3, [r7, #32]
 8011cae:	441a      	add	r2, r3
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	681a      	ldr	r2, [r3, #0]
 8011cba:	6a3b      	ldr	r3, [r7, #32]
 8011cbc:	441a      	add	r2, r3
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	601a      	str	r2, [r3, #0]
 8011cc2:	687a      	ldr	r2, [r7, #4]
 8011cc4:	6a3b      	ldr	r3, [r7, #32]
 8011cc6:	1ad3      	subs	r3, r2, r3
 8011cc8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	f47f ae7d 	bne.w	80119cc <f_write+0x9e>
 8011cd2:	e000      	b.n	8011cd6 <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011cd4:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8011ce2:	429a      	cmp	r2, r3
 8011ce4:	d905      	bls.n	8011cf2 <f_write+0x3c4>
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011cf8:	f043 0320 	orr.w	r3, r3, #32
 8011cfc:	b2da      	uxtb	r2, r3
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011d0a:	2100      	movs	r1, #0
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f7fd fd1a 	bl	800f746 <unlock_fs>
 8011d12:	2300      	movs	r3, #0
}
 8011d14:	4618      	mov	r0, r3
 8011d16:	3728      	adds	r7, #40	; 0x28
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}

08011d1c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b086      	sub	sp, #24
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8011d24:	6878      	ldr	r0, [r7, #4]
 8011d26:	f7ff fb47 	bl	80113b8 <validate>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011d2e:	7dfb      	ldrb	r3, [r7, #23]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	f040 80af 	bne.w	8011e94 <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011d3c:	f003 0320 	and.w	r3, r3, #32
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	f000 80a7 	beq.w	8011e94 <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d020      	beq.n	8011d96 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011d5a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8011d5e:	6879      	ldr	r1, [r7, #4]
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011d66:	2301      	movs	r3, #1
 8011d68:	f7fd fc28 	bl	800f5bc <disk_write>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d008      	beq.n	8011d84 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011d78:	2101      	movs	r1, #1
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f7fd fce3 	bl	800f746 <unlock_fs>
 8011d80:	2301      	movs	r3, #1
 8011d82:	e090      	b.n	8011ea6 <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011d8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011d8e:	b2da      	uxtb	r2, r3
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8011da2:	4619      	mov	r1, r3
 8011da4:	4610      	mov	r0, r2
 8011da6:	f7fd feea 	bl	800fb7e <move_window>
 8011daa:	4603      	mov	r3, r0
 8011dac:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8011dae:	7dfb      	ldrb	r3, [r7, #23]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d16f      	bne.n	8011e94 <f_sync+0x178>
				dir = fp->dir_ptr;
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8011dba:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8011dbc:	693b      	ldr	r3, [r7, #16]
 8011dbe:	330b      	adds	r3, #11
 8011dc0:	781a      	ldrb	r2, [r3, #0]
 8011dc2:	693b      	ldr	r3, [r7, #16]
 8011dc4:	330b      	adds	r3, #11
 8011dc6:	f042 0220 	orr.w	r2, r2, #32
 8011dca:	b2d2      	uxtb	r2, r2
 8011dcc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8011dd4:	693b      	ldr	r3, [r7, #16]
 8011dd6:	331c      	adds	r3, #28
 8011dd8:	b2d2      	uxtb	r2, r2
 8011dda:	701a      	strb	r2, [r3, #0]
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8011de2:	b29b      	uxth	r3, r3
 8011de4:	0a1b      	lsrs	r3, r3, #8
 8011de6:	b29a      	uxth	r2, r3
 8011de8:	693b      	ldr	r3, [r7, #16]
 8011dea:	331d      	adds	r3, #29
 8011dec:	b2d2      	uxtb	r2, r2
 8011dee:	701a      	strb	r2, [r3, #0]
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8011df6:	0c1a      	lsrs	r2, r3, #16
 8011df8:	693b      	ldr	r3, [r7, #16]
 8011dfa:	331e      	adds	r3, #30
 8011dfc:	b2d2      	uxtb	r2, r2
 8011dfe:	701a      	strb	r2, [r3, #0]
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8011e06:	0e1a      	lsrs	r2, r3, #24
 8011e08:	693b      	ldr	r3, [r7, #16]
 8011e0a:	331f      	adds	r3, #31
 8011e0c:	b2d2      	uxtb	r2, r2
 8011e0e:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011e16:	4619      	mov	r1, r3
 8011e18:	6938      	ldr	r0, [r7, #16]
 8011e1a:	f7fe fca1 	bl	8010760 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8011e1e:	f7fa fad5 	bl	800c3cc <get_fattime>
 8011e22:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8011e24:	693b      	ldr	r3, [r7, #16]
 8011e26:	3316      	adds	r3, #22
 8011e28:	68fa      	ldr	r2, [r7, #12]
 8011e2a:	b2d2      	uxtb	r2, r2
 8011e2c:	701a      	strb	r2, [r3, #0]
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	b29b      	uxth	r3, r3
 8011e32:	0a1b      	lsrs	r3, r3, #8
 8011e34:	b29a      	uxth	r2, r3
 8011e36:	693b      	ldr	r3, [r7, #16]
 8011e38:	3317      	adds	r3, #23
 8011e3a:	b2d2      	uxtb	r2, r2
 8011e3c:	701a      	strb	r2, [r3, #0]
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	0c1a      	lsrs	r2, r3, #16
 8011e42:	693b      	ldr	r3, [r7, #16]
 8011e44:	3318      	adds	r3, #24
 8011e46:	b2d2      	uxtb	r2, r2
 8011e48:	701a      	strb	r2, [r3, #0]
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	0e1a      	lsrs	r2, r3, #24
 8011e4e:	693b      	ldr	r3, [r7, #16]
 8011e50:	3319      	adds	r3, #25
 8011e52:	b2d2      	uxtb	r2, r2
 8011e54:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8011e56:	693b      	ldr	r3, [r7, #16]
 8011e58:	3312      	adds	r3, #18
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	701a      	strb	r2, [r3, #0]
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	3313      	adds	r3, #19
 8011e62:	2200      	movs	r2, #0
 8011e64:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011e6c:	f023 0320 	bic.w	r3, r3, #32
 8011e70:	b2da      	uxtb	r2, r3
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011e7e:	2201      	movs	r2, #1
 8011e80:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f7fd fea5 	bl	800fbda <sync_fs>
 8011e90:	4603      	mov	r3, r0
 8011e92:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011e9a:	7dfa      	ldrb	r2, [r7, #23]
 8011e9c:	4611      	mov	r1, r2
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f7fd fc51 	bl	800f746 <unlock_fs>
 8011ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	3718      	adds	r7, #24
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}

08011eae <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8011eae:	b580      	push	{r7, lr}
 8011eb0:	b084      	sub	sp, #16
 8011eb2:	af00      	add	r7, sp, #0
 8011eb4:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011eb6:	6878      	ldr	r0, [r7, #4]
 8011eb8:	f7ff ff30 	bl	8011d1c <f_sync>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011ec0:	7bfb      	ldrb	r3, [r7, #15]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d11e      	bne.n	8011f04 <f_close+0x56>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8011ec6:	6878      	ldr	r0, [r7, #4]
 8011ec8:	f7ff fa76 	bl	80113b8 <validate>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011ed0:	7bfb      	ldrb	r3, [r7, #15]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d116      	bne.n	8011f04 <f_close+0x56>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011edc:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f7fd fd93 	bl	800fa10 <dec_lock>
 8011eea:	4603      	mov	r3, r0
 8011eec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011eee:	7bfb      	ldrb	r3, [r7, #15]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d103      	bne.n	8011efc <f_close+0x4e>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8011efc:	2100      	movs	r1, #0
 8011efe:	68b8      	ldr	r0, [r7, #8]
 8011f00:	f7fd fc21 	bl	800f746 <unlock_fs>
#endif
		}
	}
	return res;
 8011f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f06:	4618      	mov	r0, r3
 8011f08:	3710      	adds	r7, #16
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}

08011f0e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011f0e:	b580      	push	{r7, lr}
 8011f10:	b088      	sub	sp, #32
 8011f12:	af00      	add	r7, sp, #0
 8011f14:	6078      	str	r0, [r7, #4]
 8011f16:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d101      	bne.n	8011f22 <f_opendir+0x14>
 8011f1e:	2309      	movs	r3, #9
 8011f20:	e079      	b.n	8012016 <f_opendir+0x108>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8011f22:	4639      	mov	r1, r7
 8011f24:	f107 0318 	add.w	r3, r7, #24
 8011f28:	2200      	movs	r2, #0
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f7fe ff72 	bl	8010e14 <find_volume>
 8011f30:	4603      	mov	r3, r0
 8011f32:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 8011f34:	7ffb      	ldrb	r3, [r7, #31]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d15f      	bne.n	8011ffa <f_opendir+0xec>
		dp->fs = fs;
 8011f3a:	69ba      	ldr	r2, [r7, #24]
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		INIT_BUF(*dp);
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	f107 020c 	add.w	r2, r7, #12
 8011f48:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	4619      	mov	r1, r3
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f7fe fe43 	bl	8010bdc <follow_path>
 8011f56:	4603      	mov	r3, r0
 8011f58:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 8011f5a:	7ffb      	ldrb	r3, [r7, #31]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d147      	bne.n	8011ff0 <f_opendir+0xe2>
			if (dp->dir) {						/* It is not the origin directory itself */
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d017      	beq.n	8011f9a <f_opendir+0x8c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011f70:	330b      	adds	r3, #11
 8011f72:	781b      	ldrb	r3, [r3, #0]
 8011f74:	f003 0310 	and.w	r3, r3, #16
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d00c      	beq.n	8011f96 <f_opendir+0x88>
					dp->sclust = ld_clust(fs, dp->dir);
 8011f7c:	69ba      	ldr	r2, [r7, #24]
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011f84:	4619      	mov	r1, r3
 8011f86:	4610      	mov	r0, r2
 8011f88:	f7fe fbbd 	bl	8010706 <ld_clust>
 8011f8c:	4602      	mov	r2, r0
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8011f94:	e001      	b.n	8011f9a <f_opendir+0x8c>
				else							/* The object is a file */
					res = FR_NO_PATH;
 8011f96:	2305      	movs	r3, #5
 8011f98:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 8011f9a:	7ffb      	ldrb	r3, [r7, #31]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d127      	bne.n	8011ff0 <f_opendir+0xe2>
				dp->id = fs->id;
 8011fa0:	69bb      	ldr	r3, [r7, #24]
 8011fa2:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8011fac:	2100      	movs	r1, #0
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f7fe f9d4 	bl	801035c <dir_sdi>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 8011fb8:	7ffb      	ldrb	r3, [r7, #31]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d118      	bne.n	8011ff0 <f_opendir+0xe2>
					if (dp->sclust) {
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d00f      	beq.n	8011fe8 <f_opendir+0xda>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8011fc8:	2100      	movs	r1, #0
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f7fd fc6a 	bl	800f8a4 <inc_lock>
 8011fd0:	4602      	mov	r2, r0
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
						if (!dp->lockid)
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d106      	bne.n	8011ff0 <f_opendir+0xe2>
							res = FR_TOO_MANY_OPEN_FILES;
 8011fe2:	2312      	movs	r3, #18
 8011fe4:	77fb      	strb	r3, [r7, #31]
 8011fe6:	e003      	b.n	8011ff0 <f_opendir+0xe2>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2200      	movs	r2, #0
 8011fec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011ff0:	7ffb      	ldrb	r3, [r7, #31]
 8011ff2:	2b04      	cmp	r3, #4
 8011ff4:	d101      	bne.n	8011ffa <f_opendir+0xec>
 8011ff6:	2305      	movs	r3, #5
 8011ff8:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8011ffa:	7ffb      	ldrb	r3, [r7, #31]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d003      	beq.n	8012008 <f_opendir+0xfa>
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2200      	movs	r2, #0
 8012004:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	LEAVE_FF(fs, res);
 8012008:	69bb      	ldr	r3, [r7, #24]
 801200a:	7ffa      	ldrb	r2, [r7, #31]
 801200c:	4611      	mov	r1, r2
 801200e:	4618      	mov	r0, r3
 8012010:	f7fd fb99 	bl	800f746 <unlock_fs>
 8012014:	7ffb      	ldrb	r3, [r7, #31]
}
 8012016:	4618      	mov	r0, r3
 8012018:	3720      	adds	r7, #32
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}

0801201e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801201e:	b580      	push	{r7, lr}
 8012020:	b084      	sub	sp, #16
 8012022:	af00      	add	r7, sp, #0
 8012024:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 8012026:	6878      	ldr	r0, [r7, #4]
 8012028:	f7ff f9c6 	bl	80113b8 <validate>
 801202c:	4603      	mov	r3, r0
 801202e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012030:	7bfb      	ldrb	r3, [r7, #15]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d11b      	bne.n	801206e <f_closedir+0x50>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801203c:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8012044:	2b00      	cmp	r3, #0
 8012046:	d007      	beq.n	8012058 <f_closedir+0x3a>
			res = dec_lock(dp->lockid);
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 801204e:	4618      	mov	r0, r3
 8012050:	f7fd fcde 	bl	800fa10 <dec_lock>
 8012054:	4603      	mov	r3, r0
 8012056:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK)
 8012058:	7bfb      	ldrb	r3, [r7, #15]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d103      	bne.n	8012066 <f_closedir+0x48>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2200      	movs	r2, #0
 8012062:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8012066:	2100      	movs	r1, #0
 8012068:	68b8      	ldr	r0, [r7, #8]
 801206a:	f7fd fb6c 	bl	800f746 <unlock_fs>
#endif
	}
	return res;
 801206e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012070:	4618      	mov	r0, r3
 8012072:	3710      	adds	r7, #16
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}

08012078 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b086      	sub	sp, #24
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8012082:	6878      	ldr	r0, [r7, #4]
 8012084:	f7ff f998 	bl	80113b8 <validate>
 8012088:	4603      	mov	r3, r0
 801208a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801208c:	7dfb      	ldrb	r3, [r7, #23]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d133      	bne.n	80120fa <f_readdir+0x82>
		if (!fno) {
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d106      	bne.n	80120a6 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8012098:	2100      	movs	r1, #0
 801209a:	6878      	ldr	r0, [r7, #4]
 801209c:	f7fe f95e 	bl	801035c <dir_sdi>
 80120a0:	4603      	mov	r3, r0
 80120a2:	75fb      	strb	r3, [r7, #23]
 80120a4:	e029      	b.n	80120fa <f_readdir+0x82>
		} else {
			INIT_BUF(*dp);
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	f107 0208 	add.w	r2, r7, #8
 80120ac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 80120b0:	2100      	movs	r1, #0
 80120b2:	6878      	ldr	r0, [r7, #4]
 80120b4:	f7fe fbc9 	bl	801084a <dir_read>
 80120b8:	4603      	mov	r3, r0
 80120ba:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 80120bc:	7dfb      	ldrb	r3, [r7, #23]
 80120be:	2b04      	cmp	r3, #4
 80120c0:	d105      	bne.n	80120ce <f_readdir+0x56>
				dp->sect = 0;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	2200      	movs	r2, #0
 80120c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				res = FR_OK;
 80120ca:	2300      	movs	r3, #0
 80120cc:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 80120ce:	7dfb      	ldrb	r3, [r7, #23]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d112      	bne.n	80120fa <f_readdir+0x82>
				get_fileinfo(dp, fno);		/* Get the object information */
 80120d4:	6839      	ldr	r1, [r7, #0]
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f7fe fc4f 	bl	801097a <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80120dc:	2100      	movs	r1, #0
 80120de:	6878      	ldr	r0, [r7, #4]
 80120e0:	f7fe f9d0 	bl	8010484 <dir_next>
 80120e4:	4603      	mov	r3, r0
 80120e6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 80120e8:	7dfb      	ldrb	r3, [r7, #23]
 80120ea:	2b04      	cmp	r3, #4
 80120ec:	d105      	bne.n	80120fa <f_readdir+0x82>
					dp->sect = 0;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	2200      	movs	r2, #0
 80120f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
					res = FR_OK;
 80120f6:	2300      	movs	r3, #0
 80120f8:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012100:	7dfa      	ldrb	r2, [r7, #23]
 8012102:	4611      	mov	r1, r2
 8012104:	4618      	mov	r0, r3
 8012106:	f7fd fb1e 	bl	800f746 <unlock_fs>
 801210a:	7dfb      	ldrb	r3, [r7, #23]
}
 801210c:	4618      	mov	r0, r3
 801210e:	3718      	adds	r7, #24
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}

08012114 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 801211a:	af00      	add	r7, sp, #0
 801211c:	1d3b      	adds	r3, r7, #4
 801211e:	6018      	str	r0, [r3, #0]
 8012120:	463b      	mov	r3, r7
 8012122:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
 8012124:	1d39      	adds	r1, r7, #4
 8012126:	f107 0314 	add.w	r3, r7, #20
 801212a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801212e:	2200      	movs	r2, #0
 8012130:	4618      	mov	r0, r3
 8012132:	f7fe fe6f 	bl	8010e14 <find_volume>
 8012136:	4603      	mov	r3, r0
 8012138:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	if (res == FR_OK) {
 801213c:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8012140:	2b00      	cmp	r3, #0
 8012142:	d129      	bne.n	8012198 <f_stat+0x84>
		INIT_BUF(dj);
 8012144:	f107 0314 	add.w	r3, r7, #20
 8012148:	f107 0208 	add.w	r2, r7, #8
 801214c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8012150:	1d3b      	adds	r3, r7, #4
 8012152:	681a      	ldr	r2, [r3, #0]
 8012154:	f107 0314 	add.w	r3, r7, #20
 8012158:	4611      	mov	r1, r2
 801215a:	4618      	mov	r0, r3
 801215c:	f7fe fd3e 	bl	8010bdc <follow_path>
 8012160:	4603      	mov	r3, r0
 8012162:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
		if (res == FR_OK) {				/* Follow completed */
 8012166:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 801216a:	2b00      	cmp	r3, #0
 801216c:	d114      	bne.n	8012198 <f_stat+0x84>
			if (dj.dir) {		/* Found an object */
 801216e:	f107 0314 	add.w	r3, r7, #20
 8012172:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012176:	2b00      	cmp	r3, #0
 8012178:	d00b      	beq.n	8012192 <f_stat+0x7e>
				if (fno) get_fileinfo(&dj, fno);
 801217a:	463b      	mov	r3, r7
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d00a      	beq.n	8012198 <f_stat+0x84>
 8012182:	463b      	mov	r3, r7
 8012184:	f107 0214 	add.w	r2, r7, #20
 8012188:	6819      	ldr	r1, [r3, #0]
 801218a:	4610      	mov	r0, r2
 801218c:	f7fe fbf5 	bl	801097a <get_fileinfo>
 8012190:	e002      	b.n	8012198 <f_stat+0x84>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
 8012192:	2306      	movs	r3, #6
 8012194:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 8012198:	f107 0314 	add.w	r3, r7, #20
 801219c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80121a0:	f897 2237 	ldrb.w	r2, [r7, #567]	; 0x237
 80121a4:	4611      	mov	r1, r2
 80121a6:	4618      	mov	r0, r3
 80121a8:	f7fd facd 	bl	800f746 <unlock_fs>
 80121ac:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
}
 80121b0:	4618      	mov	r0, r3
 80121b2:	f507 770e 	add.w	r7, r7, #568	; 0x238
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}

080121ba <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80121ba:	b580      	push	{r7, lr}
 80121bc:	b08e      	sub	sp, #56	; 0x38
 80121be:	af00      	add	r7, sp, #0
 80121c0:	60f8      	str	r0, [r7, #12]
 80121c2:	60b9      	str	r1, [r7, #8]
 80121c4:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 80121c6:	f107 030c 	add.w	r3, r7, #12
 80121ca:	2200      	movs	r2, #0
 80121cc:	4619      	mov	r1, r3
 80121ce:	6878      	ldr	r0, [r7, #4]
 80121d0:	f7fe fe20 	bl	8010e14 <find_volume>
 80121d4:	4603      	mov	r3, r0
 80121d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80121e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	f040 80af 	bne.w	8012348 <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 80121ea:	69fb      	ldr	r3, [r7, #28]
 80121ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80121f0:	69fb      	ldr	r3, [r7, #28]
 80121f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80121f6:	3b02      	subs	r3, #2
 80121f8:	429a      	cmp	r2, r3
 80121fa:	d805      	bhi.n	8012208 <f_getfree+0x4e>
			*nclst = fs->free_clust;
 80121fc:	69fb      	ldr	r3, [r7, #28]
 80121fe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	601a      	str	r2, [r3, #0]
 8012206:	e09f      	b.n	8012348 <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8012208:	69fb      	ldr	r3, [r7, #28]
 801220a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801220e:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8012210:	2300      	movs	r3, #0
 8012212:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 8012214:	7efb      	ldrb	r3, [r7, #27]
 8012216:	2b01      	cmp	r3, #1
 8012218:	d125      	bne.n	8012266 <f_getfree+0xac>
				clst = 2;
 801221a:	2302      	movs	r3, #2
 801221c:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 801221e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012220:	69f8      	ldr	r0, [r7, #28]
 8012222:	f7fd fda8 	bl	800fd76 <get_fat>
 8012226:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8012228:	697b      	ldr	r3, [r7, #20]
 801222a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801222e:	d103      	bne.n	8012238 <f_getfree+0x7e>
 8012230:	2301      	movs	r3, #1
 8012232:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012236:	e077      	b.n	8012328 <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8012238:	697b      	ldr	r3, [r7, #20]
 801223a:	2b01      	cmp	r3, #1
 801223c:	d103      	bne.n	8012246 <f_getfree+0x8c>
 801223e:	2302      	movs	r3, #2
 8012240:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012244:	e070      	b.n	8012328 <f_getfree+0x16e>
					if (stat == 0) n++;
 8012246:	697b      	ldr	r3, [r7, #20]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d102      	bne.n	8012252 <f_getfree+0x98>
 801224c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801224e:	3301      	adds	r3, #1
 8012250:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8012252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012254:	3301      	adds	r3, #1
 8012256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012258:	69fb      	ldr	r3, [r7, #28]
 801225a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801225e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012260:	429a      	cmp	r2, r3
 8012262:	d3dc      	bcc.n	801221e <f_getfree+0x64>
 8012264:	e060      	b.n	8012328 <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 8012266:	69fb      	ldr	r3, [r7, #28]
 8012268:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801226c:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 801226e:	69fb      	ldr	r3, [r7, #28]
 8012270:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8012274:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8012276:	2300      	movs	r3, #0
 8012278:	627b      	str	r3, [r7, #36]	; 0x24
 801227a:	2300      	movs	r3, #0
 801227c:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 801227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012280:	2b00      	cmp	r3, #0
 8012282:	d112      	bne.n	80122aa <f_getfree+0xf0>
						res = move_window(fs, sect++);
 8012284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012286:	1c5a      	adds	r2, r3, #1
 8012288:	62ba      	str	r2, [r7, #40]	; 0x28
 801228a:	4619      	mov	r1, r3
 801228c:	69f8      	ldr	r0, [r7, #28]
 801228e:	f7fd fc76 	bl	800fb7e <move_window>
 8012292:	4603      	mov	r3, r0
 8012294:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 8012298:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801229c:	2b00      	cmp	r3, #0
 801229e:	d142      	bne.n	8012326 <f_getfree+0x16c>
						p = fs->win.d8;
 80122a0:	69fb      	ldr	r3, [r7, #28]
 80122a2:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 80122a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80122a8:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 80122aa:	7efb      	ldrb	r3, [r7, #27]
 80122ac:	2b02      	cmp	r3, #2
 80122ae:	d115      	bne.n	80122dc <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 80122b0:	6a3b      	ldr	r3, [r7, #32]
 80122b2:	3301      	adds	r3, #1
 80122b4:	781b      	ldrb	r3, [r3, #0]
 80122b6:	021b      	lsls	r3, r3, #8
 80122b8:	b21a      	sxth	r2, r3
 80122ba:	6a3b      	ldr	r3, [r7, #32]
 80122bc:	781b      	ldrb	r3, [r3, #0]
 80122be:	b21b      	sxth	r3, r3
 80122c0:	4313      	orrs	r3, r2
 80122c2:	b21b      	sxth	r3, r3
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d102      	bne.n	80122ce <f_getfree+0x114>
 80122c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ca:	3301      	adds	r3, #1
 80122cc:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 80122ce:	6a3b      	ldr	r3, [r7, #32]
 80122d0:	3302      	adds	r3, #2
 80122d2:	623b      	str	r3, [r7, #32]
 80122d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d6:	3b02      	subs	r3, #2
 80122d8:	627b      	str	r3, [r7, #36]	; 0x24
 80122da:	e01d      	b.n	8012318 <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 80122dc:	6a3b      	ldr	r3, [r7, #32]
 80122de:	3303      	adds	r3, #3
 80122e0:	781b      	ldrb	r3, [r3, #0]
 80122e2:	061a      	lsls	r2, r3, #24
 80122e4:	6a3b      	ldr	r3, [r7, #32]
 80122e6:	3302      	adds	r3, #2
 80122e8:	781b      	ldrb	r3, [r3, #0]
 80122ea:	041b      	lsls	r3, r3, #16
 80122ec:	4313      	orrs	r3, r2
 80122ee:	6a3a      	ldr	r2, [r7, #32]
 80122f0:	3201      	adds	r2, #1
 80122f2:	7812      	ldrb	r2, [r2, #0]
 80122f4:	0212      	lsls	r2, r2, #8
 80122f6:	4313      	orrs	r3, r2
 80122f8:	6a3a      	ldr	r2, [r7, #32]
 80122fa:	7812      	ldrb	r2, [r2, #0]
 80122fc:	4313      	orrs	r3, r2
 80122fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012302:	2b00      	cmp	r3, #0
 8012304:	d102      	bne.n	801230c <f_getfree+0x152>
 8012306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012308:	3301      	adds	r3, #1
 801230a:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 801230c:	6a3b      	ldr	r3, [r7, #32]
 801230e:	3304      	adds	r3, #4
 8012310:	623b      	str	r3, [r7, #32]
 8012312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012314:	3b04      	subs	r3, #4
 8012316:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8012318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801231a:	3b01      	subs	r3, #1
 801231c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801231e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012320:	2b00      	cmp	r3, #0
 8012322:	d1ac      	bne.n	801227e <f_getfree+0xc4>
 8012324:	e000      	b.n	8012328 <f_getfree+0x16e>
						if (res != FR_OK) break;
 8012326:	bf00      	nop
			}
			fs->free_clust = n;
 8012328:	69fb      	ldr	r3, [r7, #28]
 801232a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801232c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 8012330:	69fb      	ldr	r3, [r7, #28]
 8012332:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8012336:	f043 0301 	orr.w	r3, r3, #1
 801233a:	b2da      	uxtb	r2, r3
 801233c:	69fb      	ldr	r3, [r7, #28]
 801233e:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012346:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8012348:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801234c:	4619      	mov	r1, r3
 801234e:	69f8      	ldr	r0, [r7, #28]
 8012350:	f7fd f9f9 	bl	800f746 <unlock_fs>
 8012354:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8012358:	4618      	mov	r0, r3
 801235a:	3738      	adds	r7, #56	; 0x38
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}

08012360 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012360:	b480      	push	{r7}
 8012362:	b087      	sub	sp, #28
 8012364:	af00      	add	r7, sp, #0
 8012366:	60f8      	str	r0, [r7, #12]
 8012368:	60b9      	str	r1, [r7, #8]
 801236a:	4613      	mov	r3, r2
 801236c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801236e:	2301      	movs	r3, #1
 8012370:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012372:	2300      	movs	r3, #0
 8012374:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8012376:	4b1e      	ldr	r3, [pc, #120]	; (80123f0 <FATFS_LinkDriverEx+0x90>)
 8012378:	7a5b      	ldrb	r3, [r3, #9]
 801237a:	b2db      	uxtb	r3, r3
 801237c:	2b01      	cmp	r3, #1
 801237e:	d831      	bhi.n	80123e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012380:	4b1b      	ldr	r3, [pc, #108]	; (80123f0 <FATFS_LinkDriverEx+0x90>)
 8012382:	7a5b      	ldrb	r3, [r3, #9]
 8012384:	b2db      	uxtb	r3, r3
 8012386:	461a      	mov	r2, r3
 8012388:	4b19      	ldr	r3, [pc, #100]	; (80123f0 <FATFS_LinkDriverEx+0x90>)
 801238a:	2100      	movs	r1, #0
 801238c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 801238e:	4b18      	ldr	r3, [pc, #96]	; (80123f0 <FATFS_LinkDriverEx+0x90>)
 8012390:	7a5b      	ldrb	r3, [r3, #9]
 8012392:	b2db      	uxtb	r3, r3
 8012394:	4a16      	ldr	r2, [pc, #88]	; (80123f0 <FATFS_LinkDriverEx+0x90>)
 8012396:	009b      	lsls	r3, r3, #2
 8012398:	4413      	add	r3, r2
 801239a:	68fa      	ldr	r2, [r7, #12]
 801239c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 801239e:	4b14      	ldr	r3, [pc, #80]	; (80123f0 <FATFS_LinkDriverEx+0x90>)
 80123a0:	7a5b      	ldrb	r3, [r3, #9]
 80123a2:	b2db      	uxtb	r3, r3
 80123a4:	461a      	mov	r2, r3
 80123a6:	4b12      	ldr	r3, [pc, #72]	; (80123f0 <FATFS_LinkDriverEx+0x90>)
 80123a8:	4413      	add	r3, r2
 80123aa:	79fa      	ldrb	r2, [r7, #7]
 80123ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80123ae:	4b10      	ldr	r3, [pc, #64]	; (80123f0 <FATFS_LinkDriverEx+0x90>)
 80123b0:	7a5b      	ldrb	r3, [r3, #9]
 80123b2:	b2db      	uxtb	r3, r3
 80123b4:	1c5a      	adds	r2, r3, #1
 80123b6:	b2d1      	uxtb	r1, r2
 80123b8:	4a0d      	ldr	r2, [pc, #52]	; (80123f0 <FATFS_LinkDriverEx+0x90>)
 80123ba:	7251      	strb	r1, [r2, #9]
 80123bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80123be:	7dbb      	ldrb	r3, [r7, #22]
 80123c0:	3330      	adds	r3, #48	; 0x30
 80123c2:	b2da      	uxtb	r2, r3
 80123c4:	68bb      	ldr	r3, [r7, #8]
 80123c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80123c8:	68bb      	ldr	r3, [r7, #8]
 80123ca:	3301      	adds	r3, #1
 80123cc:	223a      	movs	r2, #58	; 0x3a
 80123ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	3302      	adds	r3, #2
 80123d4:	222f      	movs	r2, #47	; 0x2f
 80123d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80123d8:	68bb      	ldr	r3, [r7, #8]
 80123da:	3303      	adds	r3, #3
 80123dc:	2200      	movs	r2, #0
 80123de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80123e0:	2300      	movs	r3, #0
 80123e2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80123e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80123e6:	4618      	mov	r0, r3
 80123e8:	371c      	adds	r7, #28
 80123ea:	46bd      	mov	sp, r7
 80123ec:	bc80      	pop	{r7}
 80123ee:	4770      	bx	lr
 80123f0:	2000573c 	.word	0x2000573c

080123f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b082      	sub	sp, #8
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
 80123fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80123fe:	2200      	movs	r2, #0
 8012400:	6839      	ldr	r1, [r7, #0]
 8012402:	6878      	ldr	r0, [r7, #4]
 8012404:	f7ff ffac 	bl	8012360 <FATFS_LinkDriverEx>
 8012408:	4603      	mov	r3, r0
}
 801240a:	4618      	mov	r0, r3
 801240c:	3708      	adds	r7, #8
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}

08012412 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8012412:	b480      	push	{r7}
 8012414:	b083      	sub	sp, #12
 8012416:	af00      	add	r7, sp, #0
 8012418:	4603      	mov	r3, r0
 801241a:	71fb      	strb	r3, [r7, #7]
  return RES_OK;
 801241c:	2300      	movs	r3, #0
}
 801241e:	4618      	mov	r0, r3
 8012420:	370c      	adds	r7, #12
 8012422:	46bd      	mov	sp, r7
 8012424:	bc80      	pop	{r7}
 8012426:	4770      	bx	lr

08012428 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b084      	sub	sp, #16
 801242c:	af00      	add	r7, sp, #0
 801242e:	4603      	mov	r3, r0
 8012430:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8012432:	2301      	movs	r3, #1
 8012434:	73fb      	strb	r3, [r7, #15]
  
  if(USBH_MSC_UnitIsReady(&HOST_HANDLE, lun))
 8012436:	79fb      	ldrb	r3, [r7, #7]
 8012438:	4619      	mov	r1, r3
 801243a:	4808      	ldr	r0, [pc, #32]	; (801245c <USBH_status+0x34>)
 801243c:	f7fa fd30 	bl	800cea0 <USBH_MSC_UnitIsReady>
 8012440:	4603      	mov	r3, r0
 8012442:	2b00      	cmp	r3, #0
 8012444:	d002      	beq.n	801244c <USBH_status+0x24>
  {
    res = RES_OK;
 8012446:	2300      	movs	r3, #0
 8012448:	73fb      	strb	r3, [r7, #15]
 801244a:	e001      	b.n	8012450 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 801244c:	2301      	movs	r3, #1
 801244e:	73fb      	strb	r3, [r7, #15]
  }
  
  return res;
 8012450:	7bfb      	ldrb	r3, [r7, #15]
}
 8012452:	4618      	mov	r0, r3
 8012454:	3710      	adds	r7, #16
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}
 801245a:	bf00      	nop
 801245c:	2000ddd0 	.word	0x2000ddd0

08012460 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b094      	sub	sp, #80	; 0x50
 8012464:	af02      	add	r7, sp, #8
 8012466:	60b9      	str	r1, [r7, #8]
 8012468:	607a      	str	r2, [r7, #4]
 801246a:	603b      	str	r3, [r7, #0]
 801246c:	4603      	mov	r3, r0
 801246e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012470:	2301      	movs	r3, #1
 8012472:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 8012476:	2300      	movs	r3, #0
 8012478:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	f003 0303 	and.w	r3, r3, #3
 8012482:	2b00      	cmp	r3, #0
 8012484:	d002      	beq.n	801248c <USBH_read+0x2c>
      {
        break;
      }
    }
#else
    return res;
 8012486:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801248a:	e02c      	b.n	80124e6 <USBH_read+0x86>
#endif
  }
  else
  {
    status = USBH_MSC_Read(&HOST_HANDLE, lun, sector, buff, count);
 801248c:	7bf9      	ldrb	r1, [r7, #15]
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	9300      	str	r3, [sp, #0]
 8012492:	68bb      	ldr	r3, [r7, #8]
 8012494:	687a      	ldr	r2, [r7, #4]
 8012496:	4816      	ldr	r0, [pc, #88]	; (80124f0 <USBH_read+0x90>)
 8012498:	f7fa fd4b 	bl	800cf32 <USBH_MSC_Read>
 801249c:	4603      	mov	r3, r0
 801249e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 80124a2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d103      	bne.n	80124b2 <USBH_read+0x52>
  {
    res = RES_OK;
 80124aa:	2300      	movs	r3, #0
 80124ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80124b0:	e017      	b.n	80124e2 <USBH_read+0x82>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 80124b2:	f107 0210 	add.w	r2, r7, #16
 80124b6:	7bfb      	ldrb	r3, [r7, #15]
 80124b8:	4619      	mov	r1, r3
 80124ba:	480d      	ldr	r0, [pc, #52]	; (80124f0 <USBH_read+0x90>)
 80124bc:	f7fa fd15 	bl	800ceea <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 80124c0:	7f7b      	ldrb	r3, [r7, #29]
 80124c2:	2b3a      	cmp	r3, #58	; 0x3a
 80124c4:	d005      	beq.n	80124d2 <USBH_read+0x72>
 80124c6:	2b3a      	cmp	r3, #58	; 0x3a
 80124c8:	dc07      	bgt.n	80124da <USBH_read+0x7a>
 80124ca:	2b04      	cmp	r3, #4
 80124cc:	d001      	beq.n	80124d2 <USBH_read+0x72>
 80124ce:	2b28      	cmp	r3, #40	; 0x28
 80124d0:	d103      	bne.n	80124da <USBH_read+0x7a>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE: 
      USBH_ErrLog ("USB Disk is not ready!");  
      res = RES_NOTRDY;
 80124d2:	2303      	movs	r3, #3
 80124d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 80124d8:	e003      	b.n	80124e2 <USBH_read+0x82>
      
    default:
      res = RES_ERROR;
 80124da:	2301      	movs	r3, #1
 80124dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80124e0:	bf00      	nop
    }
  }
  
  return res;
 80124e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	3748      	adds	r7, #72	; 0x48
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}
 80124ee:	bf00      	nop
 80124f0:	2000ddd0 	.word	0x2000ddd0

080124f4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b094      	sub	sp, #80	; 0x50
 80124f8:	af02      	add	r7, sp, #8
 80124fa:	60b9      	str	r1, [r7, #8]
 80124fc:	607a      	str	r2, [r7, #4]
 80124fe:	603b      	str	r3, [r7, #0]
 8012500:	4603      	mov	r3, r0
 8012502:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR; 
 8012504:	2301      	movs	r3, #1
 8012506:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;  
 801250a:	2300      	movs	r3, #0
 801250c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 8012510:	68bb      	ldr	r3, [r7, #8]
 8012512:	f003 0303 	and.w	r3, r3, #3
 8012516:	2b00      	cmp	r3, #0
 8012518:	d002      	beq.n	8012520 <USBH_write+0x2c>
      {
        break;
      }
    }
#else
    return res;
 801251a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801251e:	e034      	b.n	801258a <USBH_write+0x96>
#endif
  }
  else
  {
    status = USBH_MSC_Write(&HOST_HANDLE, lun, sector, (BYTE *)buff, count);
 8012520:	7bf9      	ldrb	r1, [r7, #15]
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	9300      	str	r3, [sp, #0]
 8012526:	68bb      	ldr	r3, [r7, #8]
 8012528:	687a      	ldr	r2, [r7, #4]
 801252a:	481a      	ldr	r0, [pc, #104]	; (8012594 <USBH_write+0xa0>)
 801252c:	f7fa fd6a 	bl	800d004 <USBH_MSC_Write>
 8012530:	4603      	mov	r3, r0
 8012532:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 8012536:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801253a:	2b00      	cmp	r3, #0
 801253c:	d103      	bne.n	8012546 <USBH_write+0x52>
  {
    res = RES_OK;
 801253e:	2300      	movs	r3, #0
 8012540:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8012544:	e01f      	b.n	8012586 <USBH_write+0x92>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 8012546:	f107 0210 	add.w	r2, r7, #16
 801254a:	7bfb      	ldrb	r3, [r7, #15]
 801254c:	4619      	mov	r1, r3
 801254e:	4811      	ldr	r0, [pc, #68]	; (8012594 <USBH_write+0xa0>)
 8012550:	f7fa fccb 	bl	800ceea <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 8012554:	7f7b      	ldrb	r3, [r7, #29]
 8012556:	2b3a      	cmp	r3, #58	; 0x3a
 8012558:	d00d      	beq.n	8012576 <USBH_write+0x82>
 801255a:	2b3a      	cmp	r3, #58	; 0x3a
 801255c:	dc0f      	bgt.n	801257e <USBH_write+0x8a>
 801255e:	2b28      	cmp	r3, #40	; 0x28
 8012560:	d009      	beq.n	8012576 <USBH_write+0x82>
 8012562:	2b28      	cmp	r3, #40	; 0x28
 8012564:	dc0b      	bgt.n	801257e <USBH_write+0x8a>
 8012566:	2b04      	cmp	r3, #4
 8012568:	d005      	beq.n	8012576 <USBH_write+0x82>
 801256a:	2b27      	cmp	r3, #39	; 0x27
 801256c:	d107      	bne.n	801257e <USBH_write+0x8a>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 801256e:	2302      	movs	r3, #2
 8012570:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8012574:	e007      	b.n	8012586 <USBH_write+0x92>
      
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");      
      res = RES_NOTRDY;
 8012576:	2303      	movs	r3, #3
 8012578:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 801257c:	e003      	b.n	8012586 <USBH_write+0x92>
      
    default:
      res = RES_ERROR;
 801257e:	2301      	movs	r3, #1
 8012580:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8012584:	bf00      	nop
    }
  }
  
  return res;   
 8012586:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801258a:	4618      	mov	r0, r3
 801258c:	3748      	adds	r7, #72	; 0x48
 801258e:	46bd      	mov	sp, r7
 8012590:	bd80      	pop	{r7, pc}
 8012592:	bf00      	nop
 8012594:	2000ddd0 	.word	0x2000ddd0

08012598 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b090      	sub	sp, #64	; 0x40
 801259c:	af00      	add	r7, sp, #0
 801259e:	4603      	mov	r3, r0
 80125a0:	603a      	str	r2, [r7, #0]
 80125a2:	71fb      	strb	r3, [r7, #7]
 80125a4:	460b      	mov	r3, r1
 80125a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80125a8:	2301      	movs	r3, #1
 80125aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;
  
  switch (cmd)
 80125ae:	79bb      	ldrb	r3, [r7, #6]
 80125b0:	2b03      	cmp	r3, #3
 80125b2:	d850      	bhi.n	8012656 <USBH_ioctl+0xbe>
 80125b4:	a201      	add	r2, pc, #4	; (adr r2, 80125bc <USBH_ioctl+0x24>)
 80125b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125ba:	bf00      	nop
 80125bc:	080125cd 	.word	0x080125cd
 80125c0:	080125d5 	.word	0x080125d5
 80125c4:	080125ff 	.word	0x080125ff
 80125c8:	0801262b 	.word	0x0801262b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC: 
    res = RES_OK;
 80125cc:	2300      	movs	r3, #0
 80125ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80125d2:	e043      	b.n	801265c <USBH_ioctl+0xc4>
    
  /* Get number of sectors on the disk (DWORD) */  
  case GET_SECTOR_COUNT : 
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 80125d4:	f107 0208 	add.w	r2, r7, #8
 80125d8:	79fb      	ldrb	r3, [r7, #7]
 80125da:	4619      	mov	r1, r3
 80125dc:	4822      	ldr	r0, [pc, #136]	; (8012668 <USBH_ioctl+0xd0>)
 80125de:	f7fa fc84 	bl	800ceea <USBH_MSC_GetLUNInfo>
 80125e2:	4603      	mov	r3, r0
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d106      	bne.n	80125f6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80125e8:	68fa      	ldr	r2, [r7, #12]
 80125ea:	683b      	ldr	r3, [r7, #0]
 80125ec:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80125ee:	2300      	movs	r3, #0
 80125f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80125f4:	e032      	b.n	801265c <USBH_ioctl+0xc4>
      res = RES_ERROR;
 80125f6:	2301      	movs	r3, #1
 80125f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80125fc:	e02e      	b.n	801265c <USBH_ioctl+0xc4>
    
  /* Get R/W sector size (WORD) */  
  case GET_SECTOR_SIZE :	
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 80125fe:	f107 0208 	add.w	r2, r7, #8
 8012602:	79fb      	ldrb	r3, [r7, #7]
 8012604:	4619      	mov	r1, r3
 8012606:	4818      	ldr	r0, [pc, #96]	; (8012668 <USBH_ioctl+0xd0>)
 8012608:	f7fa fc6f 	bl	800ceea <USBH_MSC_GetLUNInfo>
 801260c:	4603      	mov	r3, r0
 801260e:	2b00      	cmp	r3, #0
 8012610:	d107      	bne.n	8012622 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8012612:	8a3b      	ldrh	r3, [r7, #16]
 8012614:	461a      	mov	r2, r3
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 801261a:	2300      	movs	r3, #0
 801261c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8012620:	e01c      	b.n	801265c <USBH_ioctl+0xc4>
      res = RES_ERROR;
 8012622:	2301      	movs	r3, #1
 8012624:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8012628:	e018      	b.n	801265c <USBH_ioctl+0xc4>
    
    /* Get erase block size in unit of sector (DWORD) */ 
  case GET_BLOCK_SIZE : 
    
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 801262a:	f107 0208 	add.w	r2, r7, #8
 801262e:	79fb      	ldrb	r3, [r7, #7]
 8012630:	4619      	mov	r1, r3
 8012632:	480d      	ldr	r0, [pc, #52]	; (8012668 <USBH_ioctl+0xd0>)
 8012634:	f7fa fc59 	bl	800ceea <USBH_MSC_GetLUNInfo>
 8012638:	4603      	mov	r3, r0
 801263a:	2b00      	cmp	r3, #0
 801263c:	d107      	bne.n	801264e <USBH_ioctl+0xb6>
    {
      *(DWORD*)buff = info.capacity.block_size;
 801263e:	8a3b      	ldrh	r3, [r7, #16]
 8012640:	461a      	mov	r2, r3
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8012646:	2300      	movs	r3, #0
 8012648:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 801264c:	e006      	b.n	801265c <USBH_ioctl+0xc4>
      res = RES_ERROR;
 801264e:	2301      	movs	r3, #1
 8012650:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8012654:	e002      	b.n	801265c <USBH_ioctl+0xc4>
    
  default:
    res = RES_PARERR;
 8012656:	2304      	movs	r3, #4
 8012658:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
  
  return res;
 801265c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012660:	4618      	mov	r0, r3
 8012662:	3740      	adds	r7, #64	; 0x40
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}
 8012668:	2000ddd0 	.word	0x2000ddd0

0801266c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b086      	sub	sp, #24
 8012670:	af00      	add	r7, sp, #0
 8012672:	4603      	mov	r3, r0
 8012674:	6039      	str	r1, [r7, #0]
 8012676:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 8012678:	2300      	movs	r3, #0
 801267a:	60fb      	str	r3, [r7, #12]
 801267c:	2300      	movs	r3, #0
 801267e:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 8012680:	f107 030c 	add.w	r3, r7, #12
 8012684:	2101      	movs	r1, #1
 8012686:	4618      	mov	r0, r3
 8012688:	f000 f8cb 	bl	8012822 <osSemaphoreCreate>
 801268c:	4602      	mov	r2, r0
 801268e:	683b      	ldr	r3, [r7, #0]
 8012690:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	2b00      	cmp	r3, #0
 8012698:	bf14      	ite	ne
 801269a:	2301      	movne	r3, #1
 801269c:	2300      	moveq	r3, #0
 801269e:	b2db      	uxtb	r3, r3
 80126a0:	617b      	str	r3, [r7, #20]
  
  return ret;
 80126a2:	697b      	ldr	r3, [r7, #20]
}
 80126a4:	4618      	mov	r0, r3
 80126a6:	3718      	adds	r7, #24
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}

080126ac <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b082      	sub	sp, #8
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 80126b4:	6878      	ldr	r0, [r7, #4]
 80126b6:	f000 f96b 	bl	8012990 <osSemaphoreDelete>
  return 1;
 80126ba:	2301      	movs	r3, #1
}
 80126bc:	4618      	mov	r0, r3
 80126be:	3708      	adds	r7, #8
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}

080126c4 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b084      	sub	sp, #16
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80126cc:	2300      	movs	r3, #0
 80126ce:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80126d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	f000 f8d7 	bl	8012888 <osSemaphoreWait>
 80126da:	4603      	mov	r3, r0
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d101      	bne.n	80126e4 <ff_req_grant+0x20>
  {
    ret = 1;
 80126e0:	2301      	movs	r3, #1
 80126e2:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80126e4:	68fb      	ldr	r3, [r7, #12]
}
 80126e6:	4618      	mov	r0, r3
 80126e8:	3710      	adds	r7, #16
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bd80      	pop	{r7, pc}

080126ee <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80126ee:	b580      	push	{r7, lr}
 80126f0:	b082      	sub	sp, #8
 80126f2:	af00      	add	r7, sp, #0
 80126f4:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 80126f6:	6878      	ldr	r0, [r7, #4]
 80126f8:	f000 f914 	bl	8012924 <osSemaphoreRelease>
}
 80126fc:	bf00      	nop
 80126fe:	3708      	adds	r7, #8
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}

08012704 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012704:	b480      	push	{r7}
 8012706:	b085      	sub	sp, #20
 8012708:	af00      	add	r7, sp, #0
 801270a:	4603      	mov	r3, r0
 801270c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801270e:	2300      	movs	r3, #0
 8012710:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8012712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012716:	2b84      	cmp	r3, #132	; 0x84
 8012718:	d005      	beq.n	8012726 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801271a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	4413      	add	r3, r2
 8012722:	3303      	adds	r3, #3
 8012724:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012726:	68fb      	ldr	r3, [r7, #12]
}
 8012728:	4618      	mov	r0, r3
 801272a:	3714      	adds	r7, #20
 801272c:	46bd      	mov	sp, r7
 801272e:	bc80      	pop	{r7}
 8012730:	4770      	bx	lr

08012732 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8012732:	b480      	push	{r7}
 8012734:	b083      	sub	sp, #12
 8012736:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012738:	f3ef 8305 	mrs	r3, IPSR
 801273c:	607b      	str	r3, [r7, #4]
  return(result);
 801273e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8012740:	2b00      	cmp	r3, #0
 8012742:	bf14      	ite	ne
 8012744:	2301      	movne	r3, #1
 8012746:	2300      	moveq	r3, #0
 8012748:	b2db      	uxtb	r3, r3
}
 801274a:	4618      	mov	r0, r3
 801274c:	370c      	adds	r7, #12
 801274e:	46bd      	mov	sp, r7
 8012750:	bc80      	pop	{r7}
 8012752:	4770      	bx	lr

08012754 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012754:	b580      	push	{r7, lr}
 8012756:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012758:	f001 fbd0 	bl	8013efc <vTaskStartScheduler>
  
  return osOK;
 801275c:	2300      	movs	r3, #0
}
 801275e:	4618      	mov	r0, r3
 8012760:	bd80      	pop	{r7, pc}

08012762 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012762:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012764:	b089      	sub	sp, #36	; 0x24
 8012766:	af04      	add	r7, sp, #16
 8012768:	6078      	str	r0, [r7, #4]
 801276a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	695b      	ldr	r3, [r3, #20]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d020      	beq.n	80127b6 <osThreadCreate+0x54>
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	699b      	ldr	r3, [r3, #24]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d01c      	beq.n	80127b6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	685c      	ldr	r4, [r3, #4]
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	681d      	ldr	r5, [r3, #0]
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	691e      	ldr	r6, [r3, #16]
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801278e:	4618      	mov	r0, r3
 8012790:	f7ff ffb8 	bl	8012704 <makeFreeRtosPriority>
 8012794:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	695b      	ldr	r3, [r3, #20]
 801279a:	687a      	ldr	r2, [r7, #4]
 801279c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801279e:	9202      	str	r2, [sp, #8]
 80127a0:	9301      	str	r3, [sp, #4]
 80127a2:	9100      	str	r1, [sp, #0]
 80127a4:	683b      	ldr	r3, [r7, #0]
 80127a6:	4632      	mov	r2, r6
 80127a8:	4629      	mov	r1, r5
 80127aa:	4620      	mov	r0, r4
 80127ac:	f001 f9d0 	bl	8013b50 <xTaskCreateStatic>
 80127b0:	4603      	mov	r3, r0
 80127b2:	60fb      	str	r3, [r7, #12]
 80127b4:	e01c      	b.n	80127f0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	685c      	ldr	r4, [r3, #4]
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80127c2:	b29e      	uxth	r6, r3
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80127ca:	4618      	mov	r0, r3
 80127cc:	f7ff ff9a 	bl	8012704 <makeFreeRtosPriority>
 80127d0:	4602      	mov	r2, r0
 80127d2:	f107 030c 	add.w	r3, r7, #12
 80127d6:	9301      	str	r3, [sp, #4]
 80127d8:	9200      	str	r2, [sp, #0]
 80127da:	683b      	ldr	r3, [r7, #0]
 80127dc:	4632      	mov	r2, r6
 80127de:	4629      	mov	r1, r5
 80127e0:	4620      	mov	r0, r4
 80127e2:	f001 fa11 	bl	8013c08 <xTaskCreate>
 80127e6:	4603      	mov	r3, r0
 80127e8:	2b01      	cmp	r3, #1
 80127ea:	d001      	beq.n	80127f0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80127ec:	2300      	movs	r3, #0
 80127ee:	e000      	b.n	80127f2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80127f0:	68fb      	ldr	r3, [r7, #12]
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	3714      	adds	r7, #20
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080127fa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80127fa:	b580      	push	{r7, lr}
 80127fc:	b084      	sub	sp, #16
 80127fe:	af00      	add	r7, sp, #0
 8012800:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d001      	beq.n	8012810 <osDelay+0x16>
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	e000      	b.n	8012812 <osDelay+0x18>
 8012810:	2301      	movs	r3, #1
 8012812:	4618      	mov	r0, r3
 8012814:	f001 fb3e 	bl	8013e94 <vTaskDelay>
  
  return osOK;
 8012818:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801281a:	4618      	mov	r0, r3
 801281c:	3710      	adds	r7, #16
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}

08012822 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8012822:	b580      	push	{r7, lr}
 8012824:	b086      	sub	sp, #24
 8012826:	af02      	add	r7, sp, #8
 8012828:	6078      	str	r0, [r7, #4]
 801282a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	685b      	ldr	r3, [r3, #4]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d00f      	beq.n	8012854 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	2b01      	cmp	r3, #1
 8012838:	d10a      	bne.n	8012850 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	685b      	ldr	r3, [r3, #4]
 801283e:	2203      	movs	r2, #3
 8012840:	9200      	str	r2, [sp, #0]
 8012842:	2200      	movs	r2, #0
 8012844:	2100      	movs	r1, #0
 8012846:	2001      	movs	r0, #1
 8012848:	f000 faaa 	bl	8012da0 <xQueueGenericCreateStatic>
 801284c:	4603      	mov	r3, r0
 801284e:	e016      	b.n	801287e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8012850:	2300      	movs	r3, #0
 8012852:	e014      	b.n	801287e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8012854:	683b      	ldr	r3, [r7, #0]
 8012856:	2b01      	cmp	r3, #1
 8012858:	d110      	bne.n	801287c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 801285a:	2203      	movs	r2, #3
 801285c:	2100      	movs	r1, #0
 801285e:	2001      	movs	r0, #1
 8012860:	f000 fb15 	bl	8012e8e <xQueueGenericCreate>
 8012864:	60f8      	str	r0, [r7, #12]
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d005      	beq.n	8012878 <osSemaphoreCreate+0x56>
 801286c:	2300      	movs	r3, #0
 801286e:	2200      	movs	r2, #0
 8012870:	2100      	movs	r1, #0
 8012872:	68f8      	ldr	r0, [r7, #12]
 8012874:	f000 fb68 	bl	8012f48 <xQueueGenericSend>
      return sema;
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	e000      	b.n	801287e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 801287c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 801287e:	4618      	mov	r0, r3
 8012880:	3710      	adds	r7, #16
 8012882:	46bd      	mov	sp, r7
 8012884:	bd80      	pop	{r7, pc}
	...

08012888 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b084      	sub	sp, #16
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
 8012890:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012892:	2300      	movs	r3, #0
 8012894:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d101      	bne.n	80128a0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 801289c:	2380      	movs	r3, #128	; 0x80
 801289e:	e03a      	b.n	8012916 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80128a0:	2300      	movs	r3, #0
 80128a2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80128a4:	683b      	ldr	r3, [r7, #0]
 80128a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128aa:	d103      	bne.n	80128b4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80128ac:	f04f 33ff 	mov.w	r3, #4294967295
 80128b0:	60fb      	str	r3, [r7, #12]
 80128b2:	e009      	b.n	80128c8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d006      	beq.n	80128c8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d101      	bne.n	80128c8 <osSemaphoreWait+0x40>
      ticks = 1;
 80128c4:	2301      	movs	r3, #1
 80128c6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80128c8:	f7ff ff33 	bl	8012732 <inHandlerMode>
 80128cc:	4603      	mov	r3, r0
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d017      	beq.n	8012902 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80128d2:	f107 0308 	add.w	r3, r7, #8
 80128d6:	461a      	mov	r2, r3
 80128d8:	2100      	movs	r1, #0
 80128da:	6878      	ldr	r0, [r7, #4]
 80128dc:	f000 ff44 	bl	8013768 <xQueueReceiveFromISR>
 80128e0:	4603      	mov	r3, r0
 80128e2:	2b01      	cmp	r3, #1
 80128e4:	d001      	beq.n	80128ea <osSemaphoreWait+0x62>
      return osErrorOS;
 80128e6:	23ff      	movs	r3, #255	; 0xff
 80128e8:	e015      	b.n	8012916 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80128ea:	68bb      	ldr	r3, [r7, #8]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d011      	beq.n	8012914 <osSemaphoreWait+0x8c>
 80128f0:	4b0b      	ldr	r3, [pc, #44]	; (8012920 <osSemaphoreWait+0x98>)
 80128f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128f6:	601a      	str	r2, [r3, #0]
 80128f8:	f3bf 8f4f 	dsb	sy
 80128fc:	f3bf 8f6f 	isb	sy
 8012900:	e008      	b.n	8012914 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8012902:	68f9      	ldr	r1, [r7, #12]
 8012904:	6878      	ldr	r0, [r7, #4]
 8012906:	f000 fe23 	bl	8013550 <xQueueSemaphoreTake>
 801290a:	4603      	mov	r3, r0
 801290c:	2b01      	cmp	r3, #1
 801290e:	d001      	beq.n	8012914 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8012910:	23ff      	movs	r3, #255	; 0xff
 8012912:	e000      	b.n	8012916 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8012914:	2300      	movs	r3, #0
}
 8012916:	4618      	mov	r0, r3
 8012918:	3710      	adds	r7, #16
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
 801291e:	bf00      	nop
 8012920:	e000ed04 	.word	0xe000ed04

08012924 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b084      	sub	sp, #16
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801292c:	2300      	movs	r3, #0
 801292e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8012930:	2300      	movs	r3, #0
 8012932:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8012934:	f7ff fefd 	bl	8012732 <inHandlerMode>
 8012938:	4603      	mov	r3, r0
 801293a:	2b00      	cmp	r3, #0
 801293c:	d016      	beq.n	801296c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801293e:	f107 0308 	add.w	r3, r7, #8
 8012942:	4619      	mov	r1, r3
 8012944:	6878      	ldr	r0, [r7, #4]
 8012946:	f000 fc95 	bl	8013274 <xQueueGiveFromISR>
 801294a:	4603      	mov	r3, r0
 801294c:	2b01      	cmp	r3, #1
 801294e:	d001      	beq.n	8012954 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8012950:	23ff      	movs	r3, #255	; 0xff
 8012952:	e017      	b.n	8012984 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012954:	68bb      	ldr	r3, [r7, #8]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d013      	beq.n	8012982 <osSemaphoreRelease+0x5e>
 801295a:	4b0c      	ldr	r3, [pc, #48]	; (801298c <osSemaphoreRelease+0x68>)
 801295c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012960:	601a      	str	r2, [r3, #0]
 8012962:	f3bf 8f4f 	dsb	sy
 8012966:	f3bf 8f6f 	isb	sy
 801296a:	e00a      	b.n	8012982 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 801296c:	2300      	movs	r3, #0
 801296e:	2200      	movs	r2, #0
 8012970:	2100      	movs	r1, #0
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	f000 fae8 	bl	8012f48 <xQueueGenericSend>
 8012978:	4603      	mov	r3, r0
 801297a:	2b01      	cmp	r3, #1
 801297c:	d001      	beq.n	8012982 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801297e:	23ff      	movs	r3, #255	; 0xff
 8012980:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8012982:	68fb      	ldr	r3, [r7, #12]
}
 8012984:	4618      	mov	r0, r3
 8012986:	3710      	adds	r7, #16
 8012988:	46bd      	mov	sp, r7
 801298a:	bd80      	pop	{r7, pc}
 801298c:	e000ed04 	.word	0xe000ed04

08012990 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b082      	sub	sp, #8
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8012998:	f7ff fecb 	bl	8012732 <inHandlerMode>
 801299c:	4603      	mov	r3, r0
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d001      	beq.n	80129a6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80129a2:	2382      	movs	r3, #130	; 0x82
 80129a4:	e003      	b.n	80129ae <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80129a6:	6878      	ldr	r0, [r7, #4]
 80129a8:	f000 ff5e 	bl	8013868 <vQueueDelete>

  return osOK; 
 80129ac:	2300      	movs	r3, #0
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	3708      	adds	r7, #8
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd80      	pop	{r7, pc}

080129b6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80129b6:	b590      	push	{r4, r7, lr}
 80129b8:	b085      	sub	sp, #20
 80129ba:	af02      	add	r7, sp, #8
 80129bc:	6078      	str	r0, [r7, #4]
 80129be:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	689b      	ldr	r3, [r3, #8]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d011      	beq.n	80129ec <osMessageCreate+0x36>
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	68db      	ldr	r3, [r3, #12]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d00d      	beq.n	80129ec <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	6818      	ldr	r0, [r3, #0]
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	6859      	ldr	r1, [r3, #4]
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	689a      	ldr	r2, [r3, #8]
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	68db      	ldr	r3, [r3, #12]
 80129e0:	2400      	movs	r4, #0
 80129e2:	9400      	str	r4, [sp, #0]
 80129e4:	f000 f9dc 	bl	8012da0 <xQueueGenericCreateStatic>
 80129e8:	4603      	mov	r3, r0
 80129ea:	e008      	b.n	80129fe <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	6818      	ldr	r0, [r3, #0]
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	685b      	ldr	r3, [r3, #4]
 80129f4:	2200      	movs	r2, #0
 80129f6:	4619      	mov	r1, r3
 80129f8:	f000 fa49 	bl	8012e8e <xQueueGenericCreate>
 80129fc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80129fe:	4618      	mov	r0, r3
 8012a00:	370c      	adds	r7, #12
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd90      	pop	{r4, r7, pc}
	...

08012a08 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b086      	sub	sp, #24
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	60f8      	str	r0, [r7, #12]
 8012a10:	60b9      	str	r1, [r7, #8]
 8012a12:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012a14:	2300      	movs	r3, #0
 8012a16:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8012a1c:	697b      	ldr	r3, [r7, #20]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d101      	bne.n	8012a26 <osMessagePut+0x1e>
    ticks = 1;
 8012a22:	2301      	movs	r3, #1
 8012a24:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8012a26:	f7ff fe84 	bl	8012732 <inHandlerMode>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d018      	beq.n	8012a62 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8012a30:	f107 0210 	add.w	r2, r7, #16
 8012a34:	f107 0108 	add.w	r1, r7, #8
 8012a38:	2300      	movs	r3, #0
 8012a3a:	68f8      	ldr	r0, [r7, #12]
 8012a3c:	f000 fb82 	bl	8013144 <xQueueGenericSendFromISR>
 8012a40:	4603      	mov	r3, r0
 8012a42:	2b01      	cmp	r3, #1
 8012a44:	d001      	beq.n	8012a4a <osMessagePut+0x42>
      return osErrorOS;
 8012a46:	23ff      	movs	r3, #255	; 0xff
 8012a48:	e018      	b.n	8012a7c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012a4a:	693b      	ldr	r3, [r7, #16]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d014      	beq.n	8012a7a <osMessagePut+0x72>
 8012a50:	4b0c      	ldr	r3, [pc, #48]	; (8012a84 <osMessagePut+0x7c>)
 8012a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a56:	601a      	str	r2, [r3, #0]
 8012a58:	f3bf 8f4f 	dsb	sy
 8012a5c:	f3bf 8f6f 	isb	sy
 8012a60:	e00b      	b.n	8012a7a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8012a62:	f107 0108 	add.w	r1, r7, #8
 8012a66:	2300      	movs	r3, #0
 8012a68:	697a      	ldr	r2, [r7, #20]
 8012a6a:	68f8      	ldr	r0, [r7, #12]
 8012a6c:	f000 fa6c 	bl	8012f48 <xQueueGenericSend>
 8012a70:	4603      	mov	r3, r0
 8012a72:	2b01      	cmp	r3, #1
 8012a74:	d001      	beq.n	8012a7a <osMessagePut+0x72>
      return osErrorOS;
 8012a76:	23ff      	movs	r3, #255	; 0xff
 8012a78:	e000      	b.n	8012a7c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8012a7a:	2300      	movs	r3, #0
}
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	3718      	adds	r7, #24
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bd80      	pop	{r7, pc}
 8012a84:	e000ed04 	.word	0xe000ed04

08012a88 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8012a88:	b590      	push	{r4, r7, lr}
 8012a8a:	b08b      	sub	sp, #44	; 0x2c
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	60f8      	str	r0, [r7, #12]
 8012a90:	60b9      	str	r1, [r7, #8]
 8012a92:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8012a94:	68bb      	ldr	r3, [r7, #8]
 8012a96:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8012a98:	2300      	movs	r3, #0
 8012a9a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8012a9c:	68bb      	ldr	r3, [r7, #8]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d10a      	bne.n	8012ab8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8012aa2:	2380      	movs	r3, #128	; 0x80
 8012aa4:	617b      	str	r3, [r7, #20]
    return event;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	461c      	mov	r4, r3
 8012aaa:	f107 0314 	add.w	r3, r7, #20
 8012aae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012ab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012ab6:	e054      	b.n	8012b62 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012ab8:	2300      	movs	r3, #0
 8012aba:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012abc:	2300      	movs	r3, #0
 8012abe:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ac6:	d103      	bne.n	8012ad0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8012ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8012acc:	627b      	str	r3, [r7, #36]	; 0x24
 8012ace:	e009      	b.n	8012ae4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d006      	beq.n	8012ae4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8012ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d101      	bne.n	8012ae4 <osMessageGet+0x5c>
      ticks = 1;
 8012ae0:	2301      	movs	r3, #1
 8012ae2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012ae4:	f7ff fe25 	bl	8012732 <inHandlerMode>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d01c      	beq.n	8012b28 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8012aee:	f107 0220 	add.w	r2, r7, #32
 8012af2:	f107 0314 	add.w	r3, r7, #20
 8012af6:	3304      	adds	r3, #4
 8012af8:	4619      	mov	r1, r3
 8012afa:	68b8      	ldr	r0, [r7, #8]
 8012afc:	f000 fe34 	bl	8013768 <xQueueReceiveFromISR>
 8012b00:	4603      	mov	r3, r0
 8012b02:	2b01      	cmp	r3, #1
 8012b04:	d102      	bne.n	8012b0c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8012b06:	2310      	movs	r3, #16
 8012b08:	617b      	str	r3, [r7, #20]
 8012b0a:	e001      	b.n	8012b10 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012b10:	6a3b      	ldr	r3, [r7, #32]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d01d      	beq.n	8012b52 <osMessageGet+0xca>
 8012b16:	4b15      	ldr	r3, [pc, #84]	; (8012b6c <osMessageGet+0xe4>)
 8012b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b1c:	601a      	str	r2, [r3, #0]
 8012b1e:	f3bf 8f4f 	dsb	sy
 8012b22:	f3bf 8f6f 	isb	sy
 8012b26:	e014      	b.n	8012b52 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8012b28:	f107 0314 	add.w	r3, r7, #20
 8012b2c:	3304      	adds	r3, #4
 8012b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b30:	4619      	mov	r1, r3
 8012b32:	68b8      	ldr	r0, [r7, #8]
 8012b34:	f000 fc2c 	bl	8013390 <xQueueReceive>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	2b01      	cmp	r3, #1
 8012b3c:	d102      	bne.n	8012b44 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8012b3e:	2310      	movs	r3, #16
 8012b40:	617b      	str	r3, [r7, #20]
 8012b42:	e006      	b.n	8012b52 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d101      	bne.n	8012b4e <osMessageGet+0xc6>
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	e000      	b.n	8012b50 <osMessageGet+0xc8>
 8012b4e:	2340      	movs	r3, #64	; 0x40
 8012b50:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	461c      	mov	r4, r3
 8012b56:	f107 0314 	add.w	r3, r7, #20
 8012b5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012b5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012b62:	68f8      	ldr	r0, [r7, #12]
 8012b64:	372c      	adds	r7, #44	; 0x2c
 8012b66:	46bd      	mov	sp, r7
 8012b68:	bd90      	pop	{r4, r7, pc}
 8012b6a:	bf00      	nop
 8012b6c:	e000ed04 	.word	0xe000ed04

08012b70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012b70:	b480      	push	{r7}
 8012b72:	b083      	sub	sp, #12
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f103 0208 	add.w	r2, r3, #8
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	f04f 32ff 	mov.w	r2, #4294967295
 8012b88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f103 0208 	add.w	r2, r3, #8
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f103 0208 	add.w	r2, r3, #8
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012ba4:	bf00      	nop
 8012ba6:	370c      	adds	r7, #12
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	bc80      	pop	{r7}
 8012bac:	4770      	bx	lr

08012bae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012bae:	b480      	push	{r7}
 8012bb0:	b083      	sub	sp, #12
 8012bb2:	af00      	add	r7, sp, #0
 8012bb4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	2200      	movs	r2, #0
 8012bba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012bbc:	bf00      	nop
 8012bbe:	370c      	adds	r7, #12
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	bc80      	pop	{r7}
 8012bc4:	4770      	bx	lr

08012bc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012bc6:	b480      	push	{r7}
 8012bc8:	b085      	sub	sp, #20
 8012bca:	af00      	add	r7, sp, #0
 8012bcc:	6078      	str	r0, [r7, #4]
 8012bce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	685b      	ldr	r3, [r3, #4]
 8012bd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012bd6:	683b      	ldr	r3, [r7, #0]
 8012bd8:	68fa      	ldr	r2, [r7, #12]
 8012bda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	689a      	ldr	r2, [r3, #8]
 8012be0:	683b      	ldr	r3, [r7, #0]
 8012be2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	689b      	ldr	r3, [r3, #8]
 8012be8:	683a      	ldr	r2, [r7, #0]
 8012bea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	683a      	ldr	r2, [r7, #0]
 8012bf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012bf2:	683b      	ldr	r3, [r7, #0]
 8012bf4:	687a      	ldr	r2, [r7, #4]
 8012bf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	1c5a      	adds	r2, r3, #1
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	601a      	str	r2, [r3, #0]
}
 8012c02:	bf00      	nop
 8012c04:	3714      	adds	r7, #20
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bc80      	pop	{r7}
 8012c0a:	4770      	bx	lr

08012c0c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012c0c:	b480      	push	{r7}
 8012c0e:	b085      	sub	sp, #20
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
 8012c14:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c22:	d103      	bne.n	8012c2c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	691b      	ldr	r3, [r3, #16]
 8012c28:	60fb      	str	r3, [r7, #12]
 8012c2a:	e00c      	b.n	8012c46 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	3308      	adds	r3, #8
 8012c30:	60fb      	str	r3, [r7, #12]
 8012c32:	e002      	b.n	8012c3a <vListInsert+0x2e>
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	685b      	ldr	r3, [r3, #4]
 8012c38:	60fb      	str	r3, [r7, #12]
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	685b      	ldr	r3, [r3, #4]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	68ba      	ldr	r2, [r7, #8]
 8012c42:	429a      	cmp	r2, r3
 8012c44:	d2f6      	bcs.n	8012c34 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	685a      	ldr	r2, [r3, #4]
 8012c4a:	683b      	ldr	r3, [r7, #0]
 8012c4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012c4e:	683b      	ldr	r3, [r7, #0]
 8012c50:	685b      	ldr	r3, [r3, #4]
 8012c52:	683a      	ldr	r2, [r7, #0]
 8012c54:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012c56:	683b      	ldr	r3, [r7, #0]
 8012c58:	68fa      	ldr	r2, [r7, #12]
 8012c5a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	683a      	ldr	r2, [r7, #0]
 8012c60:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012c62:	683b      	ldr	r3, [r7, #0]
 8012c64:	687a      	ldr	r2, [r7, #4]
 8012c66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	1c5a      	adds	r2, r3, #1
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	601a      	str	r2, [r3, #0]
}
 8012c72:	bf00      	nop
 8012c74:	3714      	adds	r7, #20
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bc80      	pop	{r7}
 8012c7a:	4770      	bx	lr

08012c7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012c7c:	b480      	push	{r7}
 8012c7e:	b085      	sub	sp, #20
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	691b      	ldr	r3, [r3, #16]
 8012c88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	685b      	ldr	r3, [r3, #4]
 8012c8e:	687a      	ldr	r2, [r7, #4]
 8012c90:	6892      	ldr	r2, [r2, #8]
 8012c92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	689b      	ldr	r3, [r3, #8]
 8012c98:	687a      	ldr	r2, [r7, #4]
 8012c9a:	6852      	ldr	r2, [r2, #4]
 8012c9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	685b      	ldr	r3, [r3, #4]
 8012ca2:	687a      	ldr	r2, [r7, #4]
 8012ca4:	429a      	cmp	r2, r3
 8012ca6:	d103      	bne.n	8012cb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	689a      	ldr	r2, [r3, #8]
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	1e5a      	subs	r2, r3, #1
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	681b      	ldr	r3, [r3, #0]
}
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	3714      	adds	r7, #20
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bc80      	pop	{r7}
 8012ccc:	4770      	bx	lr
	...

08012cd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b084      	sub	sp, #16
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]
 8012cd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d10a      	bne.n	8012cfa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ce8:	f383 8811 	msr	BASEPRI, r3
 8012cec:	f3bf 8f6f 	isb	sy
 8012cf0:	f3bf 8f4f 	dsb	sy
 8012cf4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012cf6:	bf00      	nop
 8012cf8:	e7fe      	b.n	8012cf8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012cfa:	f002 f84f 	bl	8014d9c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	681a      	ldr	r2, [r3, #0]
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d06:	68f9      	ldr	r1, [r7, #12]
 8012d08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012d0a:	fb01 f303 	mul.w	r3, r1, r3
 8012d0e:	441a      	add	r2, r3
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	2200      	movs	r2, #0
 8012d18:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	681a      	ldr	r2, [r3, #0]
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	681a      	ldr	r2, [r3, #0]
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d2a:	3b01      	subs	r3, #1
 8012d2c:	68f9      	ldr	r1, [r7, #12]
 8012d2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012d30:	fb01 f303 	mul.w	r3, r1, r3
 8012d34:	441a      	add	r2, r3
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	22ff      	movs	r2, #255	; 0xff
 8012d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	22ff      	movs	r2, #255	; 0xff
 8012d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012d4a:	683b      	ldr	r3, [r7, #0]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d114      	bne.n	8012d7a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	691b      	ldr	r3, [r3, #16]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d01a      	beq.n	8012d8e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	3310      	adds	r3, #16
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f001 fb25 	bl	80143ac <xTaskRemoveFromEventList>
 8012d62:	4603      	mov	r3, r0
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d012      	beq.n	8012d8e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012d68:	4b0c      	ldr	r3, [pc, #48]	; (8012d9c <xQueueGenericReset+0xcc>)
 8012d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d6e:	601a      	str	r2, [r3, #0]
 8012d70:	f3bf 8f4f 	dsb	sy
 8012d74:	f3bf 8f6f 	isb	sy
 8012d78:	e009      	b.n	8012d8e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	3310      	adds	r3, #16
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f7ff fef6 	bl	8012b70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	3324      	adds	r3, #36	; 0x24
 8012d88:	4618      	mov	r0, r3
 8012d8a:	f7ff fef1 	bl	8012b70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012d8e:	f002 f835 	bl	8014dfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012d92:	2301      	movs	r3, #1
}
 8012d94:	4618      	mov	r0, r3
 8012d96:	3710      	adds	r7, #16
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}
 8012d9c:	e000ed04 	.word	0xe000ed04

08012da0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b08e      	sub	sp, #56	; 0x38
 8012da4:	af02      	add	r7, sp, #8
 8012da6:	60f8      	str	r0, [r7, #12]
 8012da8:	60b9      	str	r1, [r7, #8]
 8012daa:	607a      	str	r2, [r7, #4]
 8012dac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d10a      	bne.n	8012dca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012db8:	f383 8811 	msr	BASEPRI, r3
 8012dbc:	f3bf 8f6f 	isb	sy
 8012dc0:	f3bf 8f4f 	dsb	sy
 8012dc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012dc6:	bf00      	nop
 8012dc8:	e7fe      	b.n	8012dc8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012dca:	683b      	ldr	r3, [r7, #0]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d10a      	bne.n	8012de6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dd4:	f383 8811 	msr	BASEPRI, r3
 8012dd8:	f3bf 8f6f 	isb	sy
 8012ddc:	f3bf 8f4f 	dsb	sy
 8012de0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012de2:	bf00      	nop
 8012de4:	e7fe      	b.n	8012de4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d002      	beq.n	8012df2 <xQueueGenericCreateStatic+0x52>
 8012dec:	68bb      	ldr	r3, [r7, #8]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d001      	beq.n	8012df6 <xQueueGenericCreateStatic+0x56>
 8012df2:	2301      	movs	r3, #1
 8012df4:	e000      	b.n	8012df8 <xQueueGenericCreateStatic+0x58>
 8012df6:	2300      	movs	r3, #0
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d10a      	bne.n	8012e12 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e00:	f383 8811 	msr	BASEPRI, r3
 8012e04:	f3bf 8f6f 	isb	sy
 8012e08:	f3bf 8f4f 	dsb	sy
 8012e0c:	623b      	str	r3, [r7, #32]
}
 8012e0e:	bf00      	nop
 8012e10:	e7fe      	b.n	8012e10 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d102      	bne.n	8012e1e <xQueueGenericCreateStatic+0x7e>
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d101      	bne.n	8012e22 <xQueueGenericCreateStatic+0x82>
 8012e1e:	2301      	movs	r3, #1
 8012e20:	e000      	b.n	8012e24 <xQueueGenericCreateStatic+0x84>
 8012e22:	2300      	movs	r3, #0
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d10a      	bne.n	8012e3e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e2c:	f383 8811 	msr	BASEPRI, r3
 8012e30:	f3bf 8f6f 	isb	sy
 8012e34:	f3bf 8f4f 	dsb	sy
 8012e38:	61fb      	str	r3, [r7, #28]
}
 8012e3a:	bf00      	nop
 8012e3c:	e7fe      	b.n	8012e3c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012e3e:	2348      	movs	r3, #72	; 0x48
 8012e40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012e42:	697b      	ldr	r3, [r7, #20]
 8012e44:	2b48      	cmp	r3, #72	; 0x48
 8012e46:	d00a      	beq.n	8012e5e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e4c:	f383 8811 	msr	BASEPRI, r3
 8012e50:	f3bf 8f6f 	isb	sy
 8012e54:	f3bf 8f4f 	dsb	sy
 8012e58:	61bb      	str	r3, [r7, #24]
}
 8012e5a:	bf00      	nop
 8012e5c:	e7fe      	b.n	8012e5c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012e5e:	683b      	ldr	r3, [r7, #0]
 8012e60:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d00d      	beq.n	8012e84 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e6a:	2201      	movs	r2, #1
 8012e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012e70:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e76:	9300      	str	r3, [sp, #0]
 8012e78:	4613      	mov	r3, r2
 8012e7a:	687a      	ldr	r2, [r7, #4]
 8012e7c:	68b9      	ldr	r1, [r7, #8]
 8012e7e:	68f8      	ldr	r0, [r7, #12]
 8012e80:	f000 f843 	bl	8012f0a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8012e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012e86:	4618      	mov	r0, r3
 8012e88:	3730      	adds	r7, #48	; 0x30
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}

08012e8e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012e8e:	b580      	push	{r7, lr}
 8012e90:	b08a      	sub	sp, #40	; 0x28
 8012e92:	af02      	add	r7, sp, #8
 8012e94:	60f8      	str	r0, [r7, #12]
 8012e96:	60b9      	str	r1, [r7, #8]
 8012e98:	4613      	mov	r3, r2
 8012e9a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d10a      	bne.n	8012eb8 <xQueueGenericCreate+0x2a>
	__asm volatile
 8012ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ea6:	f383 8811 	msr	BASEPRI, r3
 8012eaa:	f3bf 8f6f 	isb	sy
 8012eae:	f3bf 8f4f 	dsb	sy
 8012eb2:	613b      	str	r3, [r7, #16]
}
 8012eb4:	bf00      	nop
 8012eb6:	e7fe      	b.n	8012eb6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012eb8:	68bb      	ldr	r3, [r7, #8]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d102      	bne.n	8012ec4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	61fb      	str	r3, [r7, #28]
 8012ec2:	e004      	b.n	8012ece <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	68ba      	ldr	r2, [r7, #8]
 8012ec8:	fb02 f303 	mul.w	r3, r2, r3
 8012ecc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8012ece:	69fb      	ldr	r3, [r7, #28]
 8012ed0:	3348      	adds	r3, #72	; 0x48
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f002 f862 	bl	8014f9c <pvPortMalloc>
 8012ed8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012eda:	69bb      	ldr	r3, [r7, #24]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d00f      	beq.n	8012f00 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8012ee0:	69bb      	ldr	r3, [r7, #24]
 8012ee2:	3348      	adds	r3, #72	; 0x48
 8012ee4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012ee6:	69bb      	ldr	r3, [r7, #24]
 8012ee8:	2200      	movs	r2, #0
 8012eea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012eee:	79fa      	ldrb	r2, [r7, #7]
 8012ef0:	69bb      	ldr	r3, [r7, #24]
 8012ef2:	9300      	str	r3, [sp, #0]
 8012ef4:	4613      	mov	r3, r2
 8012ef6:	697a      	ldr	r2, [r7, #20]
 8012ef8:	68b9      	ldr	r1, [r7, #8]
 8012efa:	68f8      	ldr	r0, [r7, #12]
 8012efc:	f000 f805 	bl	8012f0a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8012f00:	69bb      	ldr	r3, [r7, #24]
	}
 8012f02:	4618      	mov	r0, r3
 8012f04:	3720      	adds	r7, #32
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}

08012f0a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012f0a:	b580      	push	{r7, lr}
 8012f0c:	b084      	sub	sp, #16
 8012f0e:	af00      	add	r7, sp, #0
 8012f10:	60f8      	str	r0, [r7, #12]
 8012f12:	60b9      	str	r1, [r7, #8]
 8012f14:	607a      	str	r2, [r7, #4]
 8012f16:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012f18:	68bb      	ldr	r3, [r7, #8]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d103      	bne.n	8012f26 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012f1e:	69bb      	ldr	r3, [r7, #24]
 8012f20:	69ba      	ldr	r2, [r7, #24]
 8012f22:	601a      	str	r2, [r3, #0]
 8012f24:	e002      	b.n	8012f2c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012f26:	69bb      	ldr	r3, [r7, #24]
 8012f28:	687a      	ldr	r2, [r7, #4]
 8012f2a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012f2c:	69bb      	ldr	r3, [r7, #24]
 8012f2e:	68fa      	ldr	r2, [r7, #12]
 8012f30:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012f32:	69bb      	ldr	r3, [r7, #24]
 8012f34:	68ba      	ldr	r2, [r7, #8]
 8012f36:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012f38:	2101      	movs	r1, #1
 8012f3a:	69b8      	ldr	r0, [r7, #24]
 8012f3c:	f7ff fec8 	bl	8012cd0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012f40:	bf00      	nop
 8012f42:	3710      	adds	r7, #16
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}

08012f48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b08e      	sub	sp, #56	; 0x38
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	60f8      	str	r0, [r7, #12]
 8012f50:	60b9      	str	r1, [r7, #8]
 8012f52:	607a      	str	r2, [r7, #4]
 8012f54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012f56:	2300      	movs	r3, #0
 8012f58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d10a      	bne.n	8012f7a <xQueueGenericSend+0x32>
	__asm volatile
 8012f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f68:	f383 8811 	msr	BASEPRI, r3
 8012f6c:	f3bf 8f6f 	isb	sy
 8012f70:	f3bf 8f4f 	dsb	sy
 8012f74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012f76:	bf00      	nop
 8012f78:	e7fe      	b.n	8012f78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d103      	bne.n	8012f88 <xQueueGenericSend+0x40>
 8012f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d101      	bne.n	8012f8c <xQueueGenericSend+0x44>
 8012f88:	2301      	movs	r3, #1
 8012f8a:	e000      	b.n	8012f8e <xQueueGenericSend+0x46>
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d10a      	bne.n	8012fa8 <xQueueGenericSend+0x60>
	__asm volatile
 8012f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f96:	f383 8811 	msr	BASEPRI, r3
 8012f9a:	f3bf 8f6f 	isb	sy
 8012f9e:	f3bf 8f4f 	dsb	sy
 8012fa2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012fa4:	bf00      	nop
 8012fa6:	e7fe      	b.n	8012fa6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	2b02      	cmp	r3, #2
 8012fac:	d103      	bne.n	8012fb6 <xQueueGenericSend+0x6e>
 8012fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fb2:	2b01      	cmp	r3, #1
 8012fb4:	d101      	bne.n	8012fba <xQueueGenericSend+0x72>
 8012fb6:	2301      	movs	r3, #1
 8012fb8:	e000      	b.n	8012fbc <xQueueGenericSend+0x74>
 8012fba:	2300      	movs	r3, #0
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d10a      	bne.n	8012fd6 <xQueueGenericSend+0x8e>
	__asm volatile
 8012fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fc4:	f383 8811 	msr	BASEPRI, r3
 8012fc8:	f3bf 8f6f 	isb	sy
 8012fcc:	f3bf 8f4f 	dsb	sy
 8012fd0:	623b      	str	r3, [r7, #32]
}
 8012fd2:	bf00      	nop
 8012fd4:	e7fe      	b.n	8012fd4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012fd6:	f001 fbad 	bl	8014734 <xTaskGetSchedulerState>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d102      	bne.n	8012fe6 <xQueueGenericSend+0x9e>
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d101      	bne.n	8012fea <xQueueGenericSend+0xa2>
 8012fe6:	2301      	movs	r3, #1
 8012fe8:	e000      	b.n	8012fec <xQueueGenericSend+0xa4>
 8012fea:	2300      	movs	r3, #0
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d10a      	bne.n	8013006 <xQueueGenericSend+0xbe>
	__asm volatile
 8012ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ff4:	f383 8811 	msr	BASEPRI, r3
 8012ff8:	f3bf 8f6f 	isb	sy
 8012ffc:	f3bf 8f4f 	dsb	sy
 8013000:	61fb      	str	r3, [r7, #28]
}
 8013002:	bf00      	nop
 8013004:	e7fe      	b.n	8013004 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013006:	f001 fec9 	bl	8014d9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801300c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013012:	429a      	cmp	r2, r3
 8013014:	d302      	bcc.n	801301c <xQueueGenericSend+0xd4>
 8013016:	683b      	ldr	r3, [r7, #0]
 8013018:	2b02      	cmp	r3, #2
 801301a:	d129      	bne.n	8013070 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801301c:	683a      	ldr	r2, [r7, #0]
 801301e:	68b9      	ldr	r1, [r7, #8]
 8013020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013022:	f000 fc5b 	bl	80138dc <prvCopyDataToQueue>
 8013026:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801302c:	2b00      	cmp	r3, #0
 801302e:	d010      	beq.n	8013052 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013032:	3324      	adds	r3, #36	; 0x24
 8013034:	4618      	mov	r0, r3
 8013036:	f001 f9b9 	bl	80143ac <xTaskRemoveFromEventList>
 801303a:	4603      	mov	r3, r0
 801303c:	2b00      	cmp	r3, #0
 801303e:	d013      	beq.n	8013068 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013040:	4b3f      	ldr	r3, [pc, #252]	; (8013140 <xQueueGenericSend+0x1f8>)
 8013042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013046:	601a      	str	r2, [r3, #0]
 8013048:	f3bf 8f4f 	dsb	sy
 801304c:	f3bf 8f6f 	isb	sy
 8013050:	e00a      	b.n	8013068 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013054:	2b00      	cmp	r3, #0
 8013056:	d007      	beq.n	8013068 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013058:	4b39      	ldr	r3, [pc, #228]	; (8013140 <xQueueGenericSend+0x1f8>)
 801305a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801305e:	601a      	str	r2, [r3, #0]
 8013060:	f3bf 8f4f 	dsb	sy
 8013064:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013068:	f001 fec8 	bl	8014dfc <vPortExitCritical>
				return pdPASS;
 801306c:	2301      	movs	r3, #1
 801306e:	e063      	b.n	8013138 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d103      	bne.n	801307e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013076:	f001 fec1 	bl	8014dfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801307a:	2300      	movs	r3, #0
 801307c:	e05c      	b.n	8013138 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801307e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013080:	2b00      	cmp	r3, #0
 8013082:	d106      	bne.n	8013092 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013084:	f107 0314 	add.w	r3, r7, #20
 8013088:	4618      	mov	r0, r3
 801308a:	f001 f9f1 	bl	8014470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801308e:	2301      	movs	r3, #1
 8013090:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013092:	f001 feb3 	bl	8014dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013096:	f000 ff9b 	bl	8013fd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801309a:	f001 fe7f 	bl	8014d9c <vPortEnterCritical>
 801309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80130a4:	b25b      	sxtb	r3, r3
 80130a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130aa:	d103      	bne.n	80130b4 <xQueueGenericSend+0x16c>
 80130ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ae:	2200      	movs	r2, #0
 80130b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80130b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80130ba:	b25b      	sxtb	r3, r3
 80130bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130c0:	d103      	bne.n	80130ca <xQueueGenericSend+0x182>
 80130c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130c4:	2200      	movs	r2, #0
 80130c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80130ca:	f001 fe97 	bl	8014dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80130ce:	1d3a      	adds	r2, r7, #4
 80130d0:	f107 0314 	add.w	r3, r7, #20
 80130d4:	4611      	mov	r1, r2
 80130d6:	4618      	mov	r0, r3
 80130d8:	f001 f9e0 	bl	801449c <xTaskCheckForTimeOut>
 80130dc:	4603      	mov	r3, r0
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d124      	bne.n	801312c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80130e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130e4:	f000 fcf2 	bl	8013acc <prvIsQueueFull>
 80130e8:	4603      	mov	r3, r0
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d018      	beq.n	8013120 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80130ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130f0:	3310      	adds	r3, #16
 80130f2:	687a      	ldr	r2, [r7, #4]
 80130f4:	4611      	mov	r1, r2
 80130f6:	4618      	mov	r0, r3
 80130f8:	f001 f934 	bl	8014364 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80130fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130fe:	f000 fc7d 	bl	80139fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013102:	f000 ff73 	bl	8013fec <xTaskResumeAll>
 8013106:	4603      	mov	r3, r0
 8013108:	2b00      	cmp	r3, #0
 801310a:	f47f af7c 	bne.w	8013006 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801310e:	4b0c      	ldr	r3, [pc, #48]	; (8013140 <xQueueGenericSend+0x1f8>)
 8013110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013114:	601a      	str	r2, [r3, #0]
 8013116:	f3bf 8f4f 	dsb	sy
 801311a:	f3bf 8f6f 	isb	sy
 801311e:	e772      	b.n	8013006 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013122:	f000 fc6b 	bl	80139fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013126:	f000 ff61 	bl	8013fec <xTaskResumeAll>
 801312a:	e76c      	b.n	8013006 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801312c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801312e:	f000 fc65 	bl	80139fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013132:	f000 ff5b 	bl	8013fec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013136:	2300      	movs	r3, #0
		}
	}
}
 8013138:	4618      	mov	r0, r3
 801313a:	3738      	adds	r7, #56	; 0x38
 801313c:	46bd      	mov	sp, r7
 801313e:	bd80      	pop	{r7, pc}
 8013140:	e000ed04 	.word	0xe000ed04

08013144 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b08e      	sub	sp, #56	; 0x38
 8013148:	af00      	add	r7, sp, #0
 801314a:	60f8      	str	r0, [r7, #12]
 801314c:	60b9      	str	r1, [r7, #8]
 801314e:	607a      	str	r2, [r7, #4]
 8013150:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013158:	2b00      	cmp	r3, #0
 801315a:	d10a      	bne.n	8013172 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801315c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013160:	f383 8811 	msr	BASEPRI, r3
 8013164:	f3bf 8f6f 	isb	sy
 8013168:	f3bf 8f4f 	dsb	sy
 801316c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801316e:	bf00      	nop
 8013170:	e7fe      	b.n	8013170 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013172:	68bb      	ldr	r3, [r7, #8]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d103      	bne.n	8013180 <xQueueGenericSendFromISR+0x3c>
 8013178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801317c:	2b00      	cmp	r3, #0
 801317e:	d101      	bne.n	8013184 <xQueueGenericSendFromISR+0x40>
 8013180:	2301      	movs	r3, #1
 8013182:	e000      	b.n	8013186 <xQueueGenericSendFromISR+0x42>
 8013184:	2300      	movs	r3, #0
 8013186:	2b00      	cmp	r3, #0
 8013188:	d10a      	bne.n	80131a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801318a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801318e:	f383 8811 	msr	BASEPRI, r3
 8013192:	f3bf 8f6f 	isb	sy
 8013196:	f3bf 8f4f 	dsb	sy
 801319a:	623b      	str	r3, [r7, #32]
}
 801319c:	bf00      	nop
 801319e:	e7fe      	b.n	801319e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80131a0:	683b      	ldr	r3, [r7, #0]
 80131a2:	2b02      	cmp	r3, #2
 80131a4:	d103      	bne.n	80131ae <xQueueGenericSendFromISR+0x6a>
 80131a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131aa:	2b01      	cmp	r3, #1
 80131ac:	d101      	bne.n	80131b2 <xQueueGenericSendFromISR+0x6e>
 80131ae:	2301      	movs	r3, #1
 80131b0:	e000      	b.n	80131b4 <xQueueGenericSendFromISR+0x70>
 80131b2:	2300      	movs	r3, #0
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d10a      	bne.n	80131ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80131b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131bc:	f383 8811 	msr	BASEPRI, r3
 80131c0:	f3bf 8f6f 	isb	sy
 80131c4:	f3bf 8f4f 	dsb	sy
 80131c8:	61fb      	str	r3, [r7, #28]
}
 80131ca:	bf00      	nop
 80131cc:	e7fe      	b.n	80131cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80131ce:	f001 fea7 	bl	8014f20 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80131d2:	f3ef 8211 	mrs	r2, BASEPRI
 80131d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131da:	f383 8811 	msr	BASEPRI, r3
 80131de:	f3bf 8f6f 	isb	sy
 80131e2:	f3bf 8f4f 	dsb	sy
 80131e6:	61ba      	str	r2, [r7, #24]
 80131e8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80131ea:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80131ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80131ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80131f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131f6:	429a      	cmp	r2, r3
 80131f8:	d302      	bcc.n	8013200 <xQueueGenericSendFromISR+0xbc>
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	2b02      	cmp	r3, #2
 80131fe:	d12c      	bne.n	801325a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013202:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801320a:	683a      	ldr	r2, [r7, #0]
 801320c:	68b9      	ldr	r1, [r7, #8]
 801320e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013210:	f000 fb64 	bl	80138dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013214:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013218:	f1b3 3fff 	cmp.w	r3, #4294967295
 801321c:	d112      	bne.n	8013244 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013222:	2b00      	cmp	r3, #0
 8013224:	d016      	beq.n	8013254 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013228:	3324      	adds	r3, #36	; 0x24
 801322a:	4618      	mov	r0, r3
 801322c:	f001 f8be 	bl	80143ac <xTaskRemoveFromEventList>
 8013230:	4603      	mov	r3, r0
 8013232:	2b00      	cmp	r3, #0
 8013234:	d00e      	beq.n	8013254 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d00b      	beq.n	8013254 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2201      	movs	r2, #1
 8013240:	601a      	str	r2, [r3, #0]
 8013242:	e007      	b.n	8013254 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013244:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013248:	3301      	adds	r3, #1
 801324a:	b2db      	uxtb	r3, r3
 801324c:	b25a      	sxtb	r2, r3
 801324e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013254:	2301      	movs	r3, #1
 8013256:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8013258:	e001      	b.n	801325e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801325a:	2300      	movs	r3, #0
 801325c:	637b      	str	r3, [r7, #52]	; 0x34
 801325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013260:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013262:	693b      	ldr	r3, [r7, #16]
 8013264:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013268:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801326a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801326c:	4618      	mov	r0, r3
 801326e:	3738      	adds	r7, #56	; 0x38
 8013270:	46bd      	mov	sp, r7
 8013272:	bd80      	pop	{r7, pc}

08013274 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b08e      	sub	sp, #56	; 0x38
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
 801327c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013284:	2b00      	cmp	r3, #0
 8013286:	d10a      	bne.n	801329e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8013288:	f04f 0350 	mov.w	r3, #80	; 0x50
 801328c:	f383 8811 	msr	BASEPRI, r3
 8013290:	f3bf 8f6f 	isb	sy
 8013294:	f3bf 8f4f 	dsb	sy
 8013298:	623b      	str	r3, [r7, #32]
}
 801329a:	bf00      	nop
 801329c:	e7fe      	b.n	801329c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d00a      	beq.n	80132bc <xQueueGiveFromISR+0x48>
	__asm volatile
 80132a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132aa:	f383 8811 	msr	BASEPRI, r3
 80132ae:	f3bf 8f6f 	isb	sy
 80132b2:	f3bf 8f4f 	dsb	sy
 80132b6:	61fb      	str	r3, [r7, #28]
}
 80132b8:	bf00      	nop
 80132ba:	e7fe      	b.n	80132ba <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80132bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d103      	bne.n	80132cc <xQueueGiveFromISR+0x58>
 80132c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132c6:	685b      	ldr	r3, [r3, #4]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d101      	bne.n	80132d0 <xQueueGiveFromISR+0x5c>
 80132cc:	2301      	movs	r3, #1
 80132ce:	e000      	b.n	80132d2 <xQueueGiveFromISR+0x5e>
 80132d0:	2300      	movs	r3, #0
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d10a      	bne.n	80132ec <xQueueGiveFromISR+0x78>
	__asm volatile
 80132d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132da:	f383 8811 	msr	BASEPRI, r3
 80132de:	f3bf 8f6f 	isb	sy
 80132e2:	f3bf 8f4f 	dsb	sy
 80132e6:	61bb      	str	r3, [r7, #24]
}
 80132e8:	bf00      	nop
 80132ea:	e7fe      	b.n	80132ea <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80132ec:	f001 fe18 	bl	8014f20 <vPortValidateInterruptPriority>
	__asm volatile
 80132f0:	f3ef 8211 	mrs	r2, BASEPRI
 80132f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132f8:	f383 8811 	msr	BASEPRI, r3
 80132fc:	f3bf 8f6f 	isb	sy
 8013300:	f3bf 8f4f 	dsb	sy
 8013304:	617a      	str	r2, [r7, #20]
 8013306:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013308:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801330a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013310:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013318:	429a      	cmp	r2, r3
 801331a:	d22b      	bcs.n	8013374 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801331c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801331e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013328:	1c5a      	adds	r2, r3, #1
 801332a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801332c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801332e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013336:	d112      	bne.n	801335e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801333c:	2b00      	cmp	r3, #0
 801333e:	d016      	beq.n	801336e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013342:	3324      	adds	r3, #36	; 0x24
 8013344:	4618      	mov	r0, r3
 8013346:	f001 f831 	bl	80143ac <xTaskRemoveFromEventList>
 801334a:	4603      	mov	r3, r0
 801334c:	2b00      	cmp	r3, #0
 801334e:	d00e      	beq.n	801336e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013350:	683b      	ldr	r3, [r7, #0]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d00b      	beq.n	801336e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013356:	683b      	ldr	r3, [r7, #0]
 8013358:	2201      	movs	r2, #1
 801335a:	601a      	str	r2, [r3, #0]
 801335c:	e007      	b.n	801336e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801335e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013362:	3301      	adds	r3, #1
 8013364:	b2db      	uxtb	r3, r3
 8013366:	b25a      	sxtb	r2, r3
 8013368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801336a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801336e:	2301      	movs	r3, #1
 8013370:	637b      	str	r3, [r7, #52]	; 0x34
 8013372:	e001      	b.n	8013378 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013374:	2300      	movs	r3, #0
 8013376:	637b      	str	r3, [r7, #52]	; 0x34
 8013378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801337a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	f383 8811 	msr	BASEPRI, r3
}
 8013382:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013386:	4618      	mov	r0, r3
 8013388:	3738      	adds	r7, #56	; 0x38
 801338a:	46bd      	mov	sp, r7
 801338c:	bd80      	pop	{r7, pc}
	...

08013390 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b08c      	sub	sp, #48	; 0x30
 8013394:	af00      	add	r7, sp, #0
 8013396:	60f8      	str	r0, [r7, #12]
 8013398:	60b9      	str	r1, [r7, #8]
 801339a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801339c:	2300      	movs	r3, #0
 801339e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80133a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d10a      	bne.n	80133c0 <xQueueReceive+0x30>
	__asm volatile
 80133aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133ae:	f383 8811 	msr	BASEPRI, r3
 80133b2:	f3bf 8f6f 	isb	sy
 80133b6:	f3bf 8f4f 	dsb	sy
 80133ba:	623b      	str	r3, [r7, #32]
}
 80133bc:	bf00      	nop
 80133be:	e7fe      	b.n	80133be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80133c0:	68bb      	ldr	r3, [r7, #8]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d103      	bne.n	80133ce <xQueueReceive+0x3e>
 80133c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d101      	bne.n	80133d2 <xQueueReceive+0x42>
 80133ce:	2301      	movs	r3, #1
 80133d0:	e000      	b.n	80133d4 <xQueueReceive+0x44>
 80133d2:	2300      	movs	r3, #0
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d10a      	bne.n	80133ee <xQueueReceive+0x5e>
	__asm volatile
 80133d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133dc:	f383 8811 	msr	BASEPRI, r3
 80133e0:	f3bf 8f6f 	isb	sy
 80133e4:	f3bf 8f4f 	dsb	sy
 80133e8:	61fb      	str	r3, [r7, #28]
}
 80133ea:	bf00      	nop
 80133ec:	e7fe      	b.n	80133ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80133ee:	f001 f9a1 	bl	8014734 <xTaskGetSchedulerState>
 80133f2:	4603      	mov	r3, r0
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d102      	bne.n	80133fe <xQueueReceive+0x6e>
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d101      	bne.n	8013402 <xQueueReceive+0x72>
 80133fe:	2301      	movs	r3, #1
 8013400:	e000      	b.n	8013404 <xQueueReceive+0x74>
 8013402:	2300      	movs	r3, #0
 8013404:	2b00      	cmp	r3, #0
 8013406:	d10a      	bne.n	801341e <xQueueReceive+0x8e>
	__asm volatile
 8013408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801340c:	f383 8811 	msr	BASEPRI, r3
 8013410:	f3bf 8f6f 	isb	sy
 8013414:	f3bf 8f4f 	dsb	sy
 8013418:	61bb      	str	r3, [r7, #24]
}
 801341a:	bf00      	nop
 801341c:	e7fe      	b.n	801341c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 801341e:	f001 fcbd 	bl	8014d9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013426:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801342a:	2b00      	cmp	r3, #0
 801342c:	d01f      	beq.n	801346e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801342e:	68b9      	ldr	r1, [r7, #8]
 8013430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013432:	f000 fabd 	bl	80139b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013438:	1e5a      	subs	r2, r3, #1
 801343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801343c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013440:	691b      	ldr	r3, [r3, #16]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d00f      	beq.n	8013466 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013448:	3310      	adds	r3, #16
 801344a:	4618      	mov	r0, r3
 801344c:	f000 ffae 	bl	80143ac <xTaskRemoveFromEventList>
 8013450:	4603      	mov	r3, r0
 8013452:	2b00      	cmp	r3, #0
 8013454:	d007      	beq.n	8013466 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013456:	4b3d      	ldr	r3, [pc, #244]	; (801354c <xQueueReceive+0x1bc>)
 8013458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801345c:	601a      	str	r2, [r3, #0]
 801345e:	f3bf 8f4f 	dsb	sy
 8013462:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013466:	f001 fcc9 	bl	8014dfc <vPortExitCritical>
				return pdPASS;
 801346a:	2301      	movs	r3, #1
 801346c:	e069      	b.n	8013542 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d103      	bne.n	801347c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013474:	f001 fcc2 	bl	8014dfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013478:	2300      	movs	r3, #0
 801347a:	e062      	b.n	8013542 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801347c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801347e:	2b00      	cmp	r3, #0
 8013480:	d106      	bne.n	8013490 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013482:	f107 0310 	add.w	r3, r7, #16
 8013486:	4618      	mov	r0, r3
 8013488:	f000 fff2 	bl	8014470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801348c:	2301      	movs	r3, #1
 801348e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013490:	f001 fcb4 	bl	8014dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013494:	f000 fd9c 	bl	8013fd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013498:	f001 fc80 	bl	8014d9c <vPortEnterCritical>
 801349c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801349e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80134a2:	b25b      	sxtb	r3, r3
 80134a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134a8:	d103      	bne.n	80134b2 <xQueueReceive+0x122>
 80134aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ac:	2200      	movs	r2, #0
 80134ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80134b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80134b8:	b25b      	sxtb	r3, r3
 80134ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134be:	d103      	bne.n	80134c8 <xQueueReceive+0x138>
 80134c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134c2:	2200      	movs	r2, #0
 80134c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80134c8:	f001 fc98 	bl	8014dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80134cc:	1d3a      	adds	r2, r7, #4
 80134ce:	f107 0310 	add.w	r3, r7, #16
 80134d2:	4611      	mov	r1, r2
 80134d4:	4618      	mov	r0, r3
 80134d6:	f000 ffe1 	bl	801449c <xTaskCheckForTimeOut>
 80134da:	4603      	mov	r3, r0
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d123      	bne.n	8013528 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80134e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134e2:	f000 fadd 	bl	8013aa0 <prvIsQueueEmpty>
 80134e6:	4603      	mov	r3, r0
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d017      	beq.n	801351c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80134ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ee:	3324      	adds	r3, #36	; 0x24
 80134f0:	687a      	ldr	r2, [r7, #4]
 80134f2:	4611      	mov	r1, r2
 80134f4:	4618      	mov	r0, r3
 80134f6:	f000 ff35 	bl	8014364 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80134fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134fc:	f000 fa7e 	bl	80139fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013500:	f000 fd74 	bl	8013fec <xTaskResumeAll>
 8013504:	4603      	mov	r3, r0
 8013506:	2b00      	cmp	r3, #0
 8013508:	d189      	bne.n	801341e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801350a:	4b10      	ldr	r3, [pc, #64]	; (801354c <xQueueReceive+0x1bc>)
 801350c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013510:	601a      	str	r2, [r3, #0]
 8013512:	f3bf 8f4f 	dsb	sy
 8013516:	f3bf 8f6f 	isb	sy
 801351a:	e780      	b.n	801341e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801351c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801351e:	f000 fa6d 	bl	80139fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013522:	f000 fd63 	bl	8013fec <xTaskResumeAll>
 8013526:	e77a      	b.n	801341e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801352a:	f000 fa67 	bl	80139fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801352e:	f000 fd5d 	bl	8013fec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013534:	f000 fab4 	bl	8013aa0 <prvIsQueueEmpty>
 8013538:	4603      	mov	r3, r0
 801353a:	2b00      	cmp	r3, #0
 801353c:	f43f af6f 	beq.w	801341e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013540:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8013542:	4618      	mov	r0, r3
 8013544:	3730      	adds	r7, #48	; 0x30
 8013546:	46bd      	mov	sp, r7
 8013548:	bd80      	pop	{r7, pc}
 801354a:	bf00      	nop
 801354c:	e000ed04 	.word	0xe000ed04

08013550 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013550:	b580      	push	{r7, lr}
 8013552:	b08e      	sub	sp, #56	; 0x38
 8013554:	af00      	add	r7, sp, #0
 8013556:	6078      	str	r0, [r7, #4]
 8013558:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801355a:	2300      	movs	r3, #0
 801355c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013562:	2300      	movs	r3, #0
 8013564:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013568:	2b00      	cmp	r3, #0
 801356a:	d10a      	bne.n	8013582 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801356c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013570:	f383 8811 	msr	BASEPRI, r3
 8013574:	f3bf 8f6f 	isb	sy
 8013578:	f3bf 8f4f 	dsb	sy
 801357c:	623b      	str	r3, [r7, #32]
}
 801357e:	bf00      	nop
 8013580:	e7fe      	b.n	8013580 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013586:	2b00      	cmp	r3, #0
 8013588:	d00a      	beq.n	80135a0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801358a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801358e:	f383 8811 	msr	BASEPRI, r3
 8013592:	f3bf 8f6f 	isb	sy
 8013596:	f3bf 8f4f 	dsb	sy
 801359a:	61fb      	str	r3, [r7, #28]
}
 801359c:	bf00      	nop
 801359e:	e7fe      	b.n	801359e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80135a0:	f001 f8c8 	bl	8014734 <xTaskGetSchedulerState>
 80135a4:	4603      	mov	r3, r0
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d102      	bne.n	80135b0 <xQueueSemaphoreTake+0x60>
 80135aa:	683b      	ldr	r3, [r7, #0]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d101      	bne.n	80135b4 <xQueueSemaphoreTake+0x64>
 80135b0:	2301      	movs	r3, #1
 80135b2:	e000      	b.n	80135b6 <xQueueSemaphoreTake+0x66>
 80135b4:	2300      	movs	r3, #0
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d10a      	bne.n	80135d0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80135ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135be:	f383 8811 	msr	BASEPRI, r3
 80135c2:	f3bf 8f6f 	isb	sy
 80135c6:	f3bf 8f4f 	dsb	sy
 80135ca:	61bb      	str	r3, [r7, #24]
}
 80135cc:	bf00      	nop
 80135ce:	e7fe      	b.n	80135ce <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80135d0:	f001 fbe4 	bl	8014d9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80135d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135d8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80135da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d024      	beq.n	801362a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80135e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135e2:	1e5a      	subs	r2, r3, #1
 80135e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135e6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80135e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d104      	bne.n	80135fa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80135f0:	f001 fa6a 	bl	8014ac8 <pvTaskIncrementMutexHeldCount>
 80135f4:	4602      	mov	r2, r0
 80135f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135f8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80135fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135fc:	691b      	ldr	r3, [r3, #16]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d00f      	beq.n	8013622 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013604:	3310      	adds	r3, #16
 8013606:	4618      	mov	r0, r3
 8013608:	f000 fed0 	bl	80143ac <xTaskRemoveFromEventList>
 801360c:	4603      	mov	r3, r0
 801360e:	2b00      	cmp	r3, #0
 8013610:	d007      	beq.n	8013622 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013612:	4b54      	ldr	r3, [pc, #336]	; (8013764 <xQueueSemaphoreTake+0x214>)
 8013614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013618:	601a      	str	r2, [r3, #0]
 801361a:	f3bf 8f4f 	dsb	sy
 801361e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013622:	f001 fbeb 	bl	8014dfc <vPortExitCritical>
				return pdPASS;
 8013626:	2301      	movs	r3, #1
 8013628:	e097      	b.n	801375a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801362a:	683b      	ldr	r3, [r7, #0]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d111      	bne.n	8013654 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013632:	2b00      	cmp	r3, #0
 8013634:	d00a      	beq.n	801364c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8013636:	f04f 0350 	mov.w	r3, #80	; 0x50
 801363a:	f383 8811 	msr	BASEPRI, r3
 801363e:	f3bf 8f6f 	isb	sy
 8013642:	f3bf 8f4f 	dsb	sy
 8013646:	617b      	str	r3, [r7, #20]
}
 8013648:	bf00      	nop
 801364a:	e7fe      	b.n	801364a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801364c:	f001 fbd6 	bl	8014dfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013650:	2300      	movs	r3, #0
 8013652:	e082      	b.n	801375a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013656:	2b00      	cmp	r3, #0
 8013658:	d106      	bne.n	8013668 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801365a:	f107 030c 	add.w	r3, r7, #12
 801365e:	4618      	mov	r0, r3
 8013660:	f000 ff06 	bl	8014470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013664:	2301      	movs	r3, #1
 8013666:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013668:	f001 fbc8 	bl	8014dfc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801366c:	f000 fcb0 	bl	8013fd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013670:	f001 fb94 	bl	8014d9c <vPortEnterCritical>
 8013674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013676:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801367a:	b25b      	sxtb	r3, r3
 801367c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013680:	d103      	bne.n	801368a <xQueueSemaphoreTake+0x13a>
 8013682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013684:	2200      	movs	r2, #0
 8013686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801368c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013690:	b25b      	sxtb	r3, r3
 8013692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013696:	d103      	bne.n	80136a0 <xQueueSemaphoreTake+0x150>
 8013698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801369a:	2200      	movs	r2, #0
 801369c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80136a0:	f001 fbac 	bl	8014dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80136a4:	463a      	mov	r2, r7
 80136a6:	f107 030c 	add.w	r3, r7, #12
 80136aa:	4611      	mov	r1, r2
 80136ac:	4618      	mov	r0, r3
 80136ae:	f000 fef5 	bl	801449c <xTaskCheckForTimeOut>
 80136b2:	4603      	mov	r3, r0
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d132      	bne.n	801371e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80136b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80136ba:	f000 f9f1 	bl	8013aa0 <prvIsQueueEmpty>
 80136be:	4603      	mov	r3, r0
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d026      	beq.n	8013712 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80136c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d109      	bne.n	80136e0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80136cc:	f001 fb66 	bl	8014d9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80136d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d2:	685b      	ldr	r3, [r3, #4]
 80136d4:	4618      	mov	r0, r3
 80136d6:	f001 f84b 	bl	8014770 <xTaskPriorityInherit>
 80136da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80136dc:	f001 fb8e 	bl	8014dfc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80136e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e2:	3324      	adds	r3, #36	; 0x24
 80136e4:	683a      	ldr	r2, [r7, #0]
 80136e6:	4611      	mov	r1, r2
 80136e8:	4618      	mov	r0, r3
 80136ea:	f000 fe3b 	bl	8014364 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80136ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80136f0:	f000 f984 	bl	80139fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80136f4:	f000 fc7a 	bl	8013fec <xTaskResumeAll>
 80136f8:	4603      	mov	r3, r0
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	f47f af68 	bne.w	80135d0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8013700:	4b18      	ldr	r3, [pc, #96]	; (8013764 <xQueueSemaphoreTake+0x214>)
 8013702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013706:	601a      	str	r2, [r3, #0]
 8013708:	f3bf 8f4f 	dsb	sy
 801370c:	f3bf 8f6f 	isb	sy
 8013710:	e75e      	b.n	80135d0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013712:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013714:	f000 f972 	bl	80139fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013718:	f000 fc68 	bl	8013fec <xTaskResumeAll>
 801371c:	e758      	b.n	80135d0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801371e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013720:	f000 f96c 	bl	80139fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013724:	f000 fc62 	bl	8013fec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013728:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801372a:	f000 f9b9 	bl	8013aa0 <prvIsQueueEmpty>
 801372e:	4603      	mov	r3, r0
 8013730:	2b00      	cmp	r3, #0
 8013732:	f43f af4d 	beq.w	80135d0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013738:	2b00      	cmp	r3, #0
 801373a:	d00d      	beq.n	8013758 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801373c:	f001 fb2e 	bl	8014d9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013740:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013742:	f000 f8b4 	bl	80138ae <prvGetDisinheritPriorityAfterTimeout>
 8013746:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8013748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801374a:	685b      	ldr	r3, [r3, #4]
 801374c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801374e:	4618      	mov	r0, r3
 8013750:	f001 f91a 	bl	8014988 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013754:	f001 fb52 	bl	8014dfc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013758:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801375a:	4618      	mov	r0, r3
 801375c:	3738      	adds	r7, #56	; 0x38
 801375e:	46bd      	mov	sp, r7
 8013760:	bd80      	pop	{r7, pc}
 8013762:	bf00      	nop
 8013764:	e000ed04 	.word	0xe000ed04

08013768 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b08e      	sub	sp, #56	; 0x38
 801376c:	af00      	add	r7, sp, #0
 801376e:	60f8      	str	r0, [r7, #12]
 8013770:	60b9      	str	r1, [r7, #8]
 8013772:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801377a:	2b00      	cmp	r3, #0
 801377c:	d10a      	bne.n	8013794 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801377e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013782:	f383 8811 	msr	BASEPRI, r3
 8013786:	f3bf 8f6f 	isb	sy
 801378a:	f3bf 8f4f 	dsb	sy
 801378e:	623b      	str	r3, [r7, #32]
}
 8013790:	bf00      	nop
 8013792:	e7fe      	b.n	8013792 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d103      	bne.n	80137a2 <xQueueReceiveFromISR+0x3a>
 801379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d101      	bne.n	80137a6 <xQueueReceiveFromISR+0x3e>
 80137a2:	2301      	movs	r3, #1
 80137a4:	e000      	b.n	80137a8 <xQueueReceiveFromISR+0x40>
 80137a6:	2300      	movs	r3, #0
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d10a      	bne.n	80137c2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80137ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137b0:	f383 8811 	msr	BASEPRI, r3
 80137b4:	f3bf 8f6f 	isb	sy
 80137b8:	f3bf 8f4f 	dsb	sy
 80137bc:	61fb      	str	r3, [r7, #28]
}
 80137be:	bf00      	nop
 80137c0:	e7fe      	b.n	80137c0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80137c2:	f001 fbad 	bl	8014f20 <vPortValidateInterruptPriority>
	__asm volatile
 80137c6:	f3ef 8211 	mrs	r2, BASEPRI
 80137ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ce:	f383 8811 	msr	BASEPRI, r3
 80137d2:	f3bf 8f6f 	isb	sy
 80137d6:	f3bf 8f4f 	dsb	sy
 80137da:	61ba      	str	r2, [r7, #24]
 80137dc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80137de:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80137e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80137e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80137e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d02f      	beq.n	801384e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80137ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80137f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80137f8:	68b9      	ldr	r1, [r7, #8]
 80137fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137fc:	f000 f8d8 	bl	80139b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013802:	1e5a      	subs	r2, r3, #1
 8013804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013806:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013808:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801380c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013810:	d112      	bne.n	8013838 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013814:	691b      	ldr	r3, [r3, #16]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d016      	beq.n	8013848 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801381c:	3310      	adds	r3, #16
 801381e:	4618      	mov	r0, r3
 8013820:	f000 fdc4 	bl	80143ac <xTaskRemoveFromEventList>
 8013824:	4603      	mov	r3, r0
 8013826:	2b00      	cmp	r3, #0
 8013828:	d00e      	beq.n	8013848 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d00b      	beq.n	8013848 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	2201      	movs	r2, #1
 8013834:	601a      	str	r2, [r3, #0]
 8013836:	e007      	b.n	8013848 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801383c:	3301      	adds	r3, #1
 801383e:	b2db      	uxtb	r3, r3
 8013840:	b25a      	sxtb	r2, r3
 8013842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013848:	2301      	movs	r3, #1
 801384a:	637b      	str	r3, [r7, #52]	; 0x34
 801384c:	e001      	b.n	8013852 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801384e:	2300      	movs	r3, #0
 8013850:	637b      	str	r3, [r7, #52]	; 0x34
 8013852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013854:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013856:	693b      	ldr	r3, [r7, #16]
 8013858:	f383 8811 	msr	BASEPRI, r3
}
 801385c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801385e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013860:	4618      	mov	r0, r3
 8013862:	3738      	adds	r7, #56	; 0x38
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}

08013868 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b084      	sub	sp, #16
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d10a      	bne.n	8013890 <vQueueDelete+0x28>
	__asm volatile
 801387a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801387e:	f383 8811 	msr	BASEPRI, r3
 8013882:	f3bf 8f6f 	isb	sy
 8013886:	f3bf 8f4f 	dsb	sy
 801388a:	60bb      	str	r3, [r7, #8]
}
 801388c:	bf00      	nop
 801388e:	e7fe      	b.n	801388e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013890:	68f8      	ldr	r0, [r7, #12]
 8013892:	f000 f933 	bl	8013afc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801389c:	2b00      	cmp	r3, #0
 801389e:	d102      	bne.n	80138a6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80138a0:	68f8      	ldr	r0, [r7, #12]
 80138a2:	f001 fc3f 	bl	8015124 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80138a6:	bf00      	nop
 80138a8:	3710      	adds	r7, #16
 80138aa:	46bd      	mov	sp, r7
 80138ac:	bd80      	pop	{r7, pc}

080138ae <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80138ae:	b480      	push	{r7}
 80138b0:	b085      	sub	sp, #20
 80138b2:	af00      	add	r7, sp, #0
 80138b4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d006      	beq.n	80138cc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	f1c3 0307 	rsb	r3, r3, #7
 80138c8:	60fb      	str	r3, [r7, #12]
 80138ca:	e001      	b.n	80138d0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80138cc:	2300      	movs	r3, #0
 80138ce:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80138d0:	68fb      	ldr	r3, [r7, #12]
	}
 80138d2:	4618      	mov	r0, r3
 80138d4:	3714      	adds	r7, #20
 80138d6:	46bd      	mov	sp, r7
 80138d8:	bc80      	pop	{r7}
 80138da:	4770      	bx	lr

080138dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b086      	sub	sp, #24
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	60f8      	str	r0, [r7, #12]
 80138e4:	60b9      	str	r1, [r7, #8]
 80138e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80138e8:	2300      	movs	r3, #0
 80138ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d10d      	bne.n	8013916 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d14d      	bne.n	801399e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	685b      	ldr	r3, [r3, #4]
 8013906:	4618      	mov	r0, r3
 8013908:	f000 ffb8 	bl	801487c <xTaskPriorityDisinherit>
 801390c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	2200      	movs	r2, #0
 8013912:	605a      	str	r2, [r3, #4]
 8013914:	e043      	b.n	801399e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d119      	bne.n	8013950 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	6898      	ldr	r0, [r3, #8]
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013924:	461a      	mov	r2, r3
 8013926:	68b9      	ldr	r1, [r7, #8]
 8013928:	f002 f984 	bl	8015c34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	689a      	ldr	r2, [r3, #8]
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013934:	441a      	add	r2, r3
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	689a      	ldr	r2, [r3, #8]
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	685b      	ldr	r3, [r3, #4]
 8013942:	429a      	cmp	r2, r3
 8013944:	d32b      	bcc.n	801399e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	681a      	ldr	r2, [r3, #0]
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	609a      	str	r2, [r3, #8]
 801394e:	e026      	b.n	801399e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	68d8      	ldr	r0, [r3, #12]
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013958:	461a      	mov	r2, r3
 801395a:	68b9      	ldr	r1, [r7, #8]
 801395c:	f002 f96a 	bl	8015c34 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	68da      	ldr	r2, [r3, #12]
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013968:	425b      	negs	r3, r3
 801396a:	441a      	add	r2, r3
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	68da      	ldr	r2, [r3, #12]
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	429a      	cmp	r2, r3
 801397a:	d207      	bcs.n	801398c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	685a      	ldr	r2, [r3, #4]
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013984:	425b      	negs	r3, r3
 8013986:	441a      	add	r2, r3
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	2b02      	cmp	r3, #2
 8013990:	d105      	bne.n	801399e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013992:	693b      	ldr	r3, [r7, #16]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d002      	beq.n	801399e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013998:	693b      	ldr	r3, [r7, #16]
 801399a:	3b01      	subs	r3, #1
 801399c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801399e:	693b      	ldr	r3, [r7, #16]
 80139a0:	1c5a      	adds	r2, r3, #1
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80139a6:	697b      	ldr	r3, [r7, #20]
}
 80139a8:	4618      	mov	r0, r3
 80139aa:	3718      	adds	r7, #24
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bd80      	pop	{r7, pc}

080139b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b082      	sub	sp, #8
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
 80139b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d018      	beq.n	80139f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	68da      	ldr	r2, [r3, #12]
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139ca:	441a      	add	r2, r3
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	68da      	ldr	r2, [r3, #12]
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	685b      	ldr	r3, [r3, #4]
 80139d8:	429a      	cmp	r2, r3
 80139da:	d303      	bcc.n	80139e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	681a      	ldr	r2, [r3, #0]
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	68d9      	ldr	r1, [r3, #12]
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139ec:	461a      	mov	r2, r3
 80139ee:	6838      	ldr	r0, [r7, #0]
 80139f0:	f002 f920 	bl	8015c34 <memcpy>
	}
}
 80139f4:	bf00      	nop
 80139f6:	3708      	adds	r7, #8
 80139f8:	46bd      	mov	sp, r7
 80139fa:	bd80      	pop	{r7, pc}

080139fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b084      	sub	sp, #16
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013a04:	f001 f9ca 	bl	8014d9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013a0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013a10:	e011      	b.n	8013a36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d012      	beq.n	8013a40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	3324      	adds	r3, #36	; 0x24
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f000 fcc4 	bl	80143ac <xTaskRemoveFromEventList>
 8013a24:	4603      	mov	r3, r0
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d001      	beq.n	8013a2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013a2a:	f000 fd99 	bl	8014560 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013a2e:	7bfb      	ldrb	r3, [r7, #15]
 8013a30:	3b01      	subs	r3, #1
 8013a32:	b2db      	uxtb	r3, r3
 8013a34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	dce9      	bgt.n	8013a12 <prvUnlockQueue+0x16>
 8013a3e:	e000      	b.n	8013a42 <prvUnlockQueue+0x46>
					break;
 8013a40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	22ff      	movs	r2, #255	; 0xff
 8013a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013a4a:	f001 f9d7 	bl	8014dfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013a4e:	f001 f9a5 	bl	8014d9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013a58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013a5a:	e011      	b.n	8013a80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	691b      	ldr	r3, [r3, #16]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d012      	beq.n	8013a8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	3310      	adds	r3, #16
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f000 fc9f 	bl	80143ac <xTaskRemoveFromEventList>
 8013a6e:	4603      	mov	r3, r0
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d001      	beq.n	8013a78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013a74:	f000 fd74 	bl	8014560 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013a78:	7bbb      	ldrb	r3, [r7, #14]
 8013a7a:	3b01      	subs	r3, #1
 8013a7c:	b2db      	uxtb	r3, r3
 8013a7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	dce9      	bgt.n	8013a5c <prvUnlockQueue+0x60>
 8013a88:	e000      	b.n	8013a8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013a8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	22ff      	movs	r2, #255	; 0xff
 8013a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013a94:	f001 f9b2 	bl	8014dfc <vPortExitCritical>
}
 8013a98:	bf00      	nop
 8013a9a:	3710      	adds	r7, #16
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	bd80      	pop	{r7, pc}

08013aa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b084      	sub	sp, #16
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013aa8:	f001 f978 	bl	8014d9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d102      	bne.n	8013aba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013ab4:	2301      	movs	r3, #1
 8013ab6:	60fb      	str	r3, [r7, #12]
 8013ab8:	e001      	b.n	8013abe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013aba:	2300      	movs	r3, #0
 8013abc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013abe:	f001 f99d 	bl	8014dfc <vPortExitCritical>

	return xReturn;
 8013ac2:	68fb      	ldr	r3, [r7, #12]
}
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	3710      	adds	r7, #16
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd80      	pop	{r7, pc}

08013acc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b084      	sub	sp, #16
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013ad4:	f001 f962 	bl	8014d9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ae0:	429a      	cmp	r2, r3
 8013ae2:	d102      	bne.n	8013aea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	60fb      	str	r3, [r7, #12]
 8013ae8:	e001      	b.n	8013aee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013aea:	2300      	movs	r3, #0
 8013aec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013aee:	f001 f985 	bl	8014dfc <vPortExitCritical>

	return xReturn;
 8013af2:	68fb      	ldr	r3, [r7, #12]
}
 8013af4:	4618      	mov	r0, r3
 8013af6:	3710      	adds	r7, #16
 8013af8:	46bd      	mov	sp, r7
 8013afa:	bd80      	pop	{r7, pc}

08013afc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013afc:	b480      	push	{r7}
 8013afe:	b085      	sub	sp, #20
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013b04:	2300      	movs	r3, #0
 8013b06:	60fb      	str	r3, [r7, #12]
 8013b08:	e016      	b.n	8013b38 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013b0a:	4a10      	ldr	r2, [pc, #64]	; (8013b4c <vQueueUnregisterQueue+0x50>)
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	00db      	lsls	r3, r3, #3
 8013b10:	4413      	add	r3, r2
 8013b12:	685b      	ldr	r3, [r3, #4]
 8013b14:	687a      	ldr	r2, [r7, #4]
 8013b16:	429a      	cmp	r2, r3
 8013b18:	d10b      	bne.n	8013b32 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013b1a:	4a0c      	ldr	r2, [pc, #48]	; (8013b4c <vQueueUnregisterQueue+0x50>)
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	2100      	movs	r1, #0
 8013b20:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013b24:	4a09      	ldr	r2, [pc, #36]	; (8013b4c <vQueueUnregisterQueue+0x50>)
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	00db      	lsls	r3, r3, #3
 8013b2a:	4413      	add	r3, r2
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	605a      	str	r2, [r3, #4]
				break;
 8013b30:	e006      	b.n	8013b40 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	3301      	adds	r3, #1
 8013b36:	60fb      	str	r3, [r7, #12]
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	2b07      	cmp	r3, #7
 8013b3c:	d9e5      	bls.n	8013b0a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013b3e:	bf00      	nop
 8013b40:	bf00      	nop
 8013b42:	3714      	adds	r7, #20
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bc80      	pop	{r7}
 8013b48:	4770      	bx	lr
 8013b4a:	bf00      	nop
 8013b4c:	2000dd90 	.word	0x2000dd90

08013b50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b08e      	sub	sp, #56	; 0x38
 8013b54:	af04      	add	r7, sp, #16
 8013b56:	60f8      	str	r0, [r7, #12]
 8013b58:	60b9      	str	r1, [r7, #8]
 8013b5a:	607a      	str	r2, [r7, #4]
 8013b5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d10a      	bne.n	8013b7a <xTaskCreateStatic+0x2a>
	__asm volatile
 8013b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b68:	f383 8811 	msr	BASEPRI, r3
 8013b6c:	f3bf 8f6f 	isb	sy
 8013b70:	f3bf 8f4f 	dsb	sy
 8013b74:	623b      	str	r3, [r7, #32]
}
 8013b76:	bf00      	nop
 8013b78:	e7fe      	b.n	8013b78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d10a      	bne.n	8013b96 <xTaskCreateStatic+0x46>
	__asm volatile
 8013b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b84:	f383 8811 	msr	BASEPRI, r3
 8013b88:	f3bf 8f6f 	isb	sy
 8013b8c:	f3bf 8f4f 	dsb	sy
 8013b90:	61fb      	str	r3, [r7, #28]
}
 8013b92:	bf00      	nop
 8013b94:	e7fe      	b.n	8013b94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013b96:	23b4      	movs	r3, #180	; 0xb4
 8013b98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013b9a:	693b      	ldr	r3, [r7, #16]
 8013b9c:	2bb4      	cmp	r3, #180	; 0xb4
 8013b9e:	d00a      	beq.n	8013bb6 <xTaskCreateStatic+0x66>
	__asm volatile
 8013ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ba4:	f383 8811 	msr	BASEPRI, r3
 8013ba8:	f3bf 8f6f 	isb	sy
 8013bac:	f3bf 8f4f 	dsb	sy
 8013bb0:	61bb      	str	r3, [r7, #24]
}
 8013bb2:	bf00      	nop
 8013bb4:	e7fe      	b.n	8013bb4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d01e      	beq.n	8013bfa <xTaskCreateStatic+0xaa>
 8013bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d01b      	beq.n	8013bfa <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bc4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013bca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bce:	2202      	movs	r2, #2
 8013bd0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	9303      	str	r3, [sp, #12]
 8013bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bda:	9302      	str	r3, [sp, #8]
 8013bdc:	f107 0314 	add.w	r3, r7, #20
 8013be0:	9301      	str	r3, [sp, #4]
 8013be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013be4:	9300      	str	r3, [sp, #0]
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	687a      	ldr	r2, [r7, #4]
 8013bea:	68b9      	ldr	r1, [r7, #8]
 8013bec:	68f8      	ldr	r0, [r7, #12]
 8013bee:	f000 f851 	bl	8013c94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013bf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013bf4:	f000 f8e4 	bl	8013dc0 <prvAddNewTaskToReadyList>
 8013bf8:	e001      	b.n	8013bfe <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013bfe:	697b      	ldr	r3, [r7, #20]
	}
 8013c00:	4618      	mov	r0, r3
 8013c02:	3728      	adds	r7, #40	; 0x28
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}

08013c08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b08c      	sub	sp, #48	; 0x30
 8013c0c:	af04      	add	r7, sp, #16
 8013c0e:	60f8      	str	r0, [r7, #12]
 8013c10:	60b9      	str	r1, [r7, #8]
 8013c12:	603b      	str	r3, [r7, #0]
 8013c14:	4613      	mov	r3, r2
 8013c16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c18:	88fb      	ldrh	r3, [r7, #6]
 8013c1a:	009b      	lsls	r3, r3, #2
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f001 f9bd 	bl	8014f9c <pvPortMalloc>
 8013c22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013c24:	697b      	ldr	r3, [r7, #20]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d00e      	beq.n	8013c48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8013c2a:	20b4      	movs	r0, #180	; 0xb4
 8013c2c:	f001 f9b6 	bl	8014f9c <pvPortMalloc>
 8013c30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013c32:	69fb      	ldr	r3, [r7, #28]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d003      	beq.n	8013c40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013c38:	69fb      	ldr	r3, [r7, #28]
 8013c3a:	697a      	ldr	r2, [r7, #20]
 8013c3c:	631a      	str	r2, [r3, #48]	; 0x30
 8013c3e:	e005      	b.n	8013c4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013c40:	6978      	ldr	r0, [r7, #20]
 8013c42:	f001 fa6f 	bl	8015124 <vPortFree>
 8013c46:	e001      	b.n	8013c4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013c48:	2300      	movs	r3, #0
 8013c4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013c4c:	69fb      	ldr	r3, [r7, #28]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d017      	beq.n	8013c82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013c52:	69fb      	ldr	r3, [r7, #28]
 8013c54:	2200      	movs	r2, #0
 8013c56:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013c5a:	88fa      	ldrh	r2, [r7, #6]
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	9303      	str	r3, [sp, #12]
 8013c60:	69fb      	ldr	r3, [r7, #28]
 8013c62:	9302      	str	r3, [sp, #8]
 8013c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c66:	9301      	str	r3, [sp, #4]
 8013c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c6a:	9300      	str	r3, [sp, #0]
 8013c6c:	683b      	ldr	r3, [r7, #0]
 8013c6e:	68b9      	ldr	r1, [r7, #8]
 8013c70:	68f8      	ldr	r0, [r7, #12]
 8013c72:	f000 f80f 	bl	8013c94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013c76:	69f8      	ldr	r0, [r7, #28]
 8013c78:	f000 f8a2 	bl	8013dc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013c7c:	2301      	movs	r3, #1
 8013c7e:	61bb      	str	r3, [r7, #24]
 8013c80:	e002      	b.n	8013c88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013c82:	f04f 33ff 	mov.w	r3, #4294967295
 8013c86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013c88:	69bb      	ldr	r3, [r7, #24]
	}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	3720      	adds	r7, #32
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}
	...

08013c94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b088      	sub	sp, #32
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	60f8      	str	r0, [r7, #12]
 8013c9c:	60b9      	str	r1, [r7, #8]
 8013c9e:	607a      	str	r2, [r7, #4]
 8013ca0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8013ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013cac:	3b01      	subs	r3, #1
 8013cae:	009b      	lsls	r3, r3, #2
 8013cb0:	4413      	add	r3, r2
 8013cb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8013cb4:	69bb      	ldr	r3, [r7, #24]
 8013cb6:	f023 0307 	bic.w	r3, r3, #7
 8013cba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013cbc:	69bb      	ldr	r3, [r7, #24]
 8013cbe:	f003 0307 	and.w	r3, r3, #7
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d00a      	beq.n	8013cdc <prvInitialiseNewTask+0x48>
	__asm volatile
 8013cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cca:	f383 8811 	msr	BASEPRI, r3
 8013cce:	f3bf 8f6f 	isb	sy
 8013cd2:	f3bf 8f4f 	dsb	sy
 8013cd6:	617b      	str	r3, [r7, #20]
}
 8013cd8:	bf00      	nop
 8013cda:	e7fe      	b.n	8013cda <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013cdc:	2300      	movs	r3, #0
 8013cde:	61fb      	str	r3, [r7, #28]
 8013ce0:	e012      	b.n	8013d08 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013ce2:	68ba      	ldr	r2, [r7, #8]
 8013ce4:	69fb      	ldr	r3, [r7, #28]
 8013ce6:	4413      	add	r3, r2
 8013ce8:	7819      	ldrb	r1, [r3, #0]
 8013cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cec:	69fb      	ldr	r3, [r7, #28]
 8013cee:	4413      	add	r3, r2
 8013cf0:	3334      	adds	r3, #52	; 0x34
 8013cf2:	460a      	mov	r2, r1
 8013cf4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8013cf6:	68ba      	ldr	r2, [r7, #8]
 8013cf8:	69fb      	ldr	r3, [r7, #28]
 8013cfa:	4413      	add	r3, r2
 8013cfc:	781b      	ldrb	r3, [r3, #0]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d006      	beq.n	8013d10 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013d02:	69fb      	ldr	r3, [r7, #28]
 8013d04:	3301      	adds	r3, #1
 8013d06:	61fb      	str	r3, [r7, #28]
 8013d08:	69fb      	ldr	r3, [r7, #28]
 8013d0a:	2b0f      	cmp	r3, #15
 8013d0c:	d9e9      	bls.n	8013ce2 <prvInitialiseNewTask+0x4e>
 8013d0e:	e000      	b.n	8013d12 <prvInitialiseNewTask+0x7e>
		{
			break;
 8013d10:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d14:	2200      	movs	r2, #0
 8013d16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d1c:	2b06      	cmp	r3, #6
 8013d1e:	d901      	bls.n	8013d24 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013d20:	2306      	movs	r3, #6
 8013d22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d2e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d32:	2200      	movs	r2, #0
 8013d34:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d38:	3304      	adds	r3, #4
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f7fe ff37 	bl	8012bae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d42:	3318      	adds	r3, #24
 8013d44:	4618      	mov	r0, r3
 8013d46:	f7fe ff32 	bl	8012bae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d52:	f1c3 0207 	rsb	r2, r3, #7
 8013d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d62:	2200      	movs	r2, #0
 8013d64:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8013d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d72:	334c      	adds	r3, #76	; 0x4c
 8013d74:	2260      	movs	r2, #96	; 0x60
 8013d76:	2100      	movs	r1, #0
 8013d78:	4618      	mov	r0, r3
 8013d7a:	f001 ff69 	bl	8015c50 <memset>
 8013d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d80:	4a0c      	ldr	r2, [pc, #48]	; (8013db4 <prvInitialiseNewTask+0x120>)
 8013d82:	651a      	str	r2, [r3, #80]	; 0x50
 8013d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d86:	4a0c      	ldr	r2, [pc, #48]	; (8013db8 <prvInitialiseNewTask+0x124>)
 8013d88:	655a      	str	r2, [r3, #84]	; 0x54
 8013d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d8c:	4a0b      	ldr	r2, [pc, #44]	; (8013dbc <prvInitialiseNewTask+0x128>)
 8013d8e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013d90:	683a      	ldr	r2, [r7, #0]
 8013d92:	68f9      	ldr	r1, [r7, #12]
 8013d94:	69b8      	ldr	r0, [r7, #24]
 8013d96:	f000 ff11 	bl	8014bbc <pxPortInitialiseStack>
 8013d9a:	4602      	mov	r2, r0
 8013d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d9e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8013da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d002      	beq.n	8013dac <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013daa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013dac:	bf00      	nop
 8013dae:	3720      	adds	r7, #32
 8013db0:	46bd      	mov	sp, r7
 8013db2:	bd80      	pop	{r7, pc}
 8013db4:	0801a520 	.word	0x0801a520
 8013db8:	0801a540 	.word	0x0801a540
 8013dbc:	0801a500 	.word	0x0801a500

08013dc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b082      	sub	sp, #8
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013dc8:	f000 ffe8 	bl	8014d9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013dcc:	4b2a      	ldr	r3, [pc, #168]	; (8013e78 <prvAddNewTaskToReadyList+0xb8>)
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	3301      	adds	r3, #1
 8013dd2:	4a29      	ldr	r2, [pc, #164]	; (8013e78 <prvAddNewTaskToReadyList+0xb8>)
 8013dd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013dd6:	4b29      	ldr	r3, [pc, #164]	; (8013e7c <prvAddNewTaskToReadyList+0xbc>)
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d109      	bne.n	8013df2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013dde:	4a27      	ldr	r2, [pc, #156]	; (8013e7c <prvAddNewTaskToReadyList+0xbc>)
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013de4:	4b24      	ldr	r3, [pc, #144]	; (8013e78 <prvAddNewTaskToReadyList+0xb8>)
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	2b01      	cmp	r3, #1
 8013dea:	d110      	bne.n	8013e0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013dec:	f000 fbdc 	bl	80145a8 <prvInitialiseTaskLists>
 8013df0:	e00d      	b.n	8013e0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013df2:	4b23      	ldr	r3, [pc, #140]	; (8013e80 <prvAddNewTaskToReadyList+0xc0>)
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d109      	bne.n	8013e0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013dfa:	4b20      	ldr	r3, [pc, #128]	; (8013e7c <prvAddNewTaskToReadyList+0xbc>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e04:	429a      	cmp	r2, r3
 8013e06:	d802      	bhi.n	8013e0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013e08:	4a1c      	ldr	r2, [pc, #112]	; (8013e7c <prvAddNewTaskToReadyList+0xbc>)
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013e0e:	4b1d      	ldr	r3, [pc, #116]	; (8013e84 <prvAddNewTaskToReadyList+0xc4>)
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	3301      	adds	r3, #1
 8013e14:	4a1b      	ldr	r2, [pc, #108]	; (8013e84 <prvAddNewTaskToReadyList+0xc4>)
 8013e16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e1c:	2201      	movs	r2, #1
 8013e1e:	409a      	lsls	r2, r3
 8013e20:	4b19      	ldr	r3, [pc, #100]	; (8013e88 <prvAddNewTaskToReadyList+0xc8>)
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	4313      	orrs	r3, r2
 8013e26:	4a18      	ldr	r2, [pc, #96]	; (8013e88 <prvAddNewTaskToReadyList+0xc8>)
 8013e28:	6013      	str	r3, [r2, #0]
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e2e:	4613      	mov	r3, r2
 8013e30:	009b      	lsls	r3, r3, #2
 8013e32:	4413      	add	r3, r2
 8013e34:	009b      	lsls	r3, r3, #2
 8013e36:	4a15      	ldr	r2, [pc, #84]	; (8013e8c <prvAddNewTaskToReadyList+0xcc>)
 8013e38:	441a      	add	r2, r3
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	3304      	adds	r3, #4
 8013e3e:	4619      	mov	r1, r3
 8013e40:	4610      	mov	r0, r2
 8013e42:	f7fe fec0 	bl	8012bc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013e46:	f000 ffd9 	bl	8014dfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013e4a:	4b0d      	ldr	r3, [pc, #52]	; (8013e80 <prvAddNewTaskToReadyList+0xc0>)
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d00e      	beq.n	8013e70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013e52:	4b0a      	ldr	r3, [pc, #40]	; (8013e7c <prvAddNewTaskToReadyList+0xbc>)
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	d207      	bcs.n	8013e70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013e60:	4b0b      	ldr	r3, [pc, #44]	; (8013e90 <prvAddNewTaskToReadyList+0xd0>)
 8013e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e66:	601a      	str	r2, [r3, #0]
 8013e68:	f3bf 8f4f 	dsb	sy
 8013e6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013e70:	bf00      	nop
 8013e72:	3708      	adds	r7, #8
 8013e74:	46bd      	mov	sp, r7
 8013e76:	bd80      	pop	{r7, pc}
 8013e78:	20005848 	.word	0x20005848
 8013e7c:	20005748 	.word	0x20005748
 8013e80:	20005854 	.word	0x20005854
 8013e84:	20005864 	.word	0x20005864
 8013e88:	20005850 	.word	0x20005850
 8013e8c:	2000574c 	.word	0x2000574c
 8013e90:	e000ed04 	.word	0xe000ed04

08013e94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b084      	sub	sp, #16
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d017      	beq.n	8013ed6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013ea6:	4b13      	ldr	r3, [pc, #76]	; (8013ef4 <vTaskDelay+0x60>)
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d00a      	beq.n	8013ec4 <vTaskDelay+0x30>
	__asm volatile
 8013eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eb2:	f383 8811 	msr	BASEPRI, r3
 8013eb6:	f3bf 8f6f 	isb	sy
 8013eba:	f3bf 8f4f 	dsb	sy
 8013ebe:	60bb      	str	r3, [r7, #8]
}
 8013ec0:	bf00      	nop
 8013ec2:	e7fe      	b.n	8013ec2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013ec4:	f000 f884 	bl	8013fd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013ec8:	2100      	movs	r1, #0
 8013eca:	6878      	ldr	r0, [r7, #4]
 8013ecc:	f000 fe10 	bl	8014af0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013ed0:	f000 f88c 	bl	8013fec <xTaskResumeAll>
 8013ed4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d107      	bne.n	8013eec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013edc:	4b06      	ldr	r3, [pc, #24]	; (8013ef8 <vTaskDelay+0x64>)
 8013ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ee2:	601a      	str	r2, [r3, #0]
 8013ee4:	f3bf 8f4f 	dsb	sy
 8013ee8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013eec:	bf00      	nop
 8013eee:	3710      	adds	r7, #16
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	bd80      	pop	{r7, pc}
 8013ef4:	20005870 	.word	0x20005870
 8013ef8:	e000ed04 	.word	0xe000ed04

08013efc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b08a      	sub	sp, #40	; 0x28
 8013f00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013f02:	2300      	movs	r3, #0
 8013f04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013f06:	2300      	movs	r3, #0
 8013f08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013f0a:	463a      	mov	r2, r7
 8013f0c:	1d39      	adds	r1, r7, #4
 8013f0e:	f107 0308 	add.w	r3, r7, #8
 8013f12:	4618      	mov	r0, r3
 8013f14:	f7ed fb54 	bl	80015c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013f18:	6839      	ldr	r1, [r7, #0]
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	68ba      	ldr	r2, [r7, #8]
 8013f1e:	9202      	str	r2, [sp, #8]
 8013f20:	9301      	str	r3, [sp, #4]
 8013f22:	2300      	movs	r3, #0
 8013f24:	9300      	str	r3, [sp, #0]
 8013f26:	2300      	movs	r3, #0
 8013f28:	460a      	mov	r2, r1
 8013f2a:	4921      	ldr	r1, [pc, #132]	; (8013fb0 <vTaskStartScheduler+0xb4>)
 8013f2c:	4821      	ldr	r0, [pc, #132]	; (8013fb4 <vTaskStartScheduler+0xb8>)
 8013f2e:	f7ff fe0f 	bl	8013b50 <xTaskCreateStatic>
 8013f32:	4603      	mov	r3, r0
 8013f34:	4a20      	ldr	r2, [pc, #128]	; (8013fb8 <vTaskStartScheduler+0xbc>)
 8013f36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013f38:	4b1f      	ldr	r3, [pc, #124]	; (8013fb8 <vTaskStartScheduler+0xbc>)
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d002      	beq.n	8013f46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013f40:	2301      	movs	r3, #1
 8013f42:	617b      	str	r3, [r7, #20]
 8013f44:	e001      	b.n	8013f4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013f46:	2300      	movs	r3, #0
 8013f48:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013f4a:	697b      	ldr	r3, [r7, #20]
 8013f4c:	2b01      	cmp	r3, #1
 8013f4e:	d11b      	bne.n	8013f88 <vTaskStartScheduler+0x8c>
	__asm volatile
 8013f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f54:	f383 8811 	msr	BASEPRI, r3
 8013f58:	f3bf 8f6f 	isb	sy
 8013f5c:	f3bf 8f4f 	dsb	sy
 8013f60:	613b      	str	r3, [r7, #16]
}
 8013f62:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013f64:	4b15      	ldr	r3, [pc, #84]	; (8013fbc <vTaskStartScheduler+0xc0>)
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	334c      	adds	r3, #76	; 0x4c
 8013f6a:	4a15      	ldr	r2, [pc, #84]	; (8013fc0 <vTaskStartScheduler+0xc4>)
 8013f6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013f6e:	4b15      	ldr	r3, [pc, #84]	; (8013fc4 <vTaskStartScheduler+0xc8>)
 8013f70:	f04f 32ff 	mov.w	r2, #4294967295
 8013f74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013f76:	4b14      	ldr	r3, [pc, #80]	; (8013fc8 <vTaskStartScheduler+0xcc>)
 8013f78:	2201      	movs	r2, #1
 8013f7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8013f7c:	4b13      	ldr	r3, [pc, #76]	; (8013fcc <vTaskStartScheduler+0xd0>)
 8013f7e:	2200      	movs	r2, #0
 8013f80:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013f82:	f000 fe99 	bl	8014cb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013f86:	e00e      	b.n	8013fa6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013f88:	697b      	ldr	r3, [r7, #20]
 8013f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f8e:	d10a      	bne.n	8013fa6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8013f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f94:	f383 8811 	msr	BASEPRI, r3
 8013f98:	f3bf 8f6f 	isb	sy
 8013f9c:	f3bf 8f4f 	dsb	sy
 8013fa0:	60fb      	str	r3, [r7, #12]
}
 8013fa2:	bf00      	nop
 8013fa4:	e7fe      	b.n	8013fa4 <vTaskStartScheduler+0xa8>
}
 8013fa6:	bf00      	nop
 8013fa8:	3718      	adds	r7, #24
 8013faa:	46bd      	mov	sp, r7
 8013fac:	bd80      	pop	{r7, pc}
 8013fae:	bf00      	nop
 8013fb0:	0801a440 	.word	0x0801a440
 8013fb4:	08014579 	.word	0x08014579
 8013fb8:	2000586c 	.word	0x2000586c
 8013fbc:	20005748 	.word	0x20005748
 8013fc0:	20000250 	.word	0x20000250
 8013fc4:	20005868 	.word	0x20005868
 8013fc8:	20005854 	.word	0x20005854
 8013fcc:	2000584c 	.word	0x2000584c

08013fd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013fd0:	b480      	push	{r7}
 8013fd2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013fd4:	4b04      	ldr	r3, [pc, #16]	; (8013fe8 <vTaskSuspendAll+0x18>)
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	3301      	adds	r3, #1
 8013fda:	4a03      	ldr	r2, [pc, #12]	; (8013fe8 <vTaskSuspendAll+0x18>)
 8013fdc:	6013      	str	r3, [r2, #0]
}
 8013fde:	bf00      	nop
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bc80      	pop	{r7}
 8013fe4:	4770      	bx	lr
 8013fe6:	bf00      	nop
 8013fe8:	20005870 	.word	0x20005870

08013fec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013fec:	b580      	push	{r7, lr}
 8013fee:	b084      	sub	sp, #16
 8013ff0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013ffa:	4b41      	ldr	r3, [pc, #260]	; (8014100 <xTaskResumeAll+0x114>)
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d10a      	bne.n	8014018 <xTaskResumeAll+0x2c>
	__asm volatile
 8014002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014006:	f383 8811 	msr	BASEPRI, r3
 801400a:	f3bf 8f6f 	isb	sy
 801400e:	f3bf 8f4f 	dsb	sy
 8014012:	603b      	str	r3, [r7, #0]
}
 8014014:	bf00      	nop
 8014016:	e7fe      	b.n	8014016 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014018:	f000 fec0 	bl	8014d9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801401c:	4b38      	ldr	r3, [pc, #224]	; (8014100 <xTaskResumeAll+0x114>)
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	3b01      	subs	r3, #1
 8014022:	4a37      	ldr	r2, [pc, #220]	; (8014100 <xTaskResumeAll+0x114>)
 8014024:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014026:	4b36      	ldr	r3, [pc, #216]	; (8014100 <xTaskResumeAll+0x114>)
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d161      	bne.n	80140f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801402e:	4b35      	ldr	r3, [pc, #212]	; (8014104 <xTaskResumeAll+0x118>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d05d      	beq.n	80140f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014036:	e02e      	b.n	8014096 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8014038:	4b33      	ldr	r3, [pc, #204]	; (8014108 <xTaskResumeAll+0x11c>)
 801403a:	68db      	ldr	r3, [r3, #12]
 801403c:	68db      	ldr	r3, [r3, #12]
 801403e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	3318      	adds	r3, #24
 8014044:	4618      	mov	r0, r3
 8014046:	f7fe fe19 	bl	8012c7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	3304      	adds	r3, #4
 801404e:	4618      	mov	r0, r3
 8014050:	f7fe fe14 	bl	8012c7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014058:	2201      	movs	r2, #1
 801405a:	409a      	lsls	r2, r3
 801405c:	4b2b      	ldr	r3, [pc, #172]	; (801410c <xTaskResumeAll+0x120>)
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	4313      	orrs	r3, r2
 8014062:	4a2a      	ldr	r2, [pc, #168]	; (801410c <xTaskResumeAll+0x120>)
 8014064:	6013      	str	r3, [r2, #0]
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801406a:	4613      	mov	r3, r2
 801406c:	009b      	lsls	r3, r3, #2
 801406e:	4413      	add	r3, r2
 8014070:	009b      	lsls	r3, r3, #2
 8014072:	4a27      	ldr	r2, [pc, #156]	; (8014110 <xTaskResumeAll+0x124>)
 8014074:	441a      	add	r2, r3
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	3304      	adds	r3, #4
 801407a:	4619      	mov	r1, r3
 801407c:	4610      	mov	r0, r2
 801407e:	f7fe fda2 	bl	8012bc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014086:	4b23      	ldr	r3, [pc, #140]	; (8014114 <xTaskResumeAll+0x128>)
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801408c:	429a      	cmp	r2, r3
 801408e:	d302      	bcc.n	8014096 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8014090:	4b21      	ldr	r3, [pc, #132]	; (8014118 <xTaskResumeAll+0x12c>)
 8014092:	2201      	movs	r2, #1
 8014094:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014096:	4b1c      	ldr	r3, [pc, #112]	; (8014108 <xTaskResumeAll+0x11c>)
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d1cc      	bne.n	8014038 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d001      	beq.n	80140a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80140a4:	f000 fb22 	bl	80146ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80140a8:	4b1c      	ldr	r3, [pc, #112]	; (801411c <xTaskResumeAll+0x130>)
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d010      	beq.n	80140d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80140b4:	f000 f836 	bl	8014124 <xTaskIncrementTick>
 80140b8:	4603      	mov	r3, r0
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d002      	beq.n	80140c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80140be:	4b16      	ldr	r3, [pc, #88]	; (8014118 <xTaskResumeAll+0x12c>)
 80140c0:	2201      	movs	r2, #1
 80140c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	3b01      	subs	r3, #1
 80140c8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d1f1      	bne.n	80140b4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80140d0:	4b12      	ldr	r3, [pc, #72]	; (801411c <xTaskResumeAll+0x130>)
 80140d2:	2200      	movs	r2, #0
 80140d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80140d6:	4b10      	ldr	r3, [pc, #64]	; (8014118 <xTaskResumeAll+0x12c>)
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d009      	beq.n	80140f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80140de:	2301      	movs	r3, #1
 80140e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80140e2:	4b0f      	ldr	r3, [pc, #60]	; (8014120 <xTaskResumeAll+0x134>)
 80140e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140e8:	601a      	str	r2, [r3, #0]
 80140ea:	f3bf 8f4f 	dsb	sy
 80140ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80140f2:	f000 fe83 	bl	8014dfc <vPortExitCritical>

	return xAlreadyYielded;
 80140f6:	68bb      	ldr	r3, [r7, #8]
}
 80140f8:	4618      	mov	r0, r3
 80140fa:	3710      	adds	r7, #16
 80140fc:	46bd      	mov	sp, r7
 80140fe:	bd80      	pop	{r7, pc}
 8014100:	20005870 	.word	0x20005870
 8014104:	20005848 	.word	0x20005848
 8014108:	20005808 	.word	0x20005808
 801410c:	20005850 	.word	0x20005850
 8014110:	2000574c 	.word	0x2000574c
 8014114:	20005748 	.word	0x20005748
 8014118:	2000585c 	.word	0x2000585c
 801411c:	20005858 	.word	0x20005858
 8014120:	e000ed04 	.word	0xe000ed04

08014124 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b086      	sub	sp, #24
 8014128:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801412a:	2300      	movs	r3, #0
 801412c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801412e:	4b51      	ldr	r3, [pc, #324]	; (8014274 <xTaskIncrementTick+0x150>)
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	2b00      	cmp	r3, #0
 8014134:	f040 808d 	bne.w	8014252 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014138:	4b4f      	ldr	r3, [pc, #316]	; (8014278 <xTaskIncrementTick+0x154>)
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	3301      	adds	r3, #1
 801413e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014140:	4a4d      	ldr	r2, [pc, #308]	; (8014278 <xTaskIncrementTick+0x154>)
 8014142:	693b      	ldr	r3, [r7, #16]
 8014144:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014146:	693b      	ldr	r3, [r7, #16]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d120      	bne.n	801418e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801414c:	4b4b      	ldr	r3, [pc, #300]	; (801427c <xTaskIncrementTick+0x158>)
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d00a      	beq.n	801416c <xTaskIncrementTick+0x48>
	__asm volatile
 8014156:	f04f 0350 	mov.w	r3, #80	; 0x50
 801415a:	f383 8811 	msr	BASEPRI, r3
 801415e:	f3bf 8f6f 	isb	sy
 8014162:	f3bf 8f4f 	dsb	sy
 8014166:	603b      	str	r3, [r7, #0]
}
 8014168:	bf00      	nop
 801416a:	e7fe      	b.n	801416a <xTaskIncrementTick+0x46>
 801416c:	4b43      	ldr	r3, [pc, #268]	; (801427c <xTaskIncrementTick+0x158>)
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	60fb      	str	r3, [r7, #12]
 8014172:	4b43      	ldr	r3, [pc, #268]	; (8014280 <xTaskIncrementTick+0x15c>)
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	4a41      	ldr	r2, [pc, #260]	; (801427c <xTaskIncrementTick+0x158>)
 8014178:	6013      	str	r3, [r2, #0]
 801417a:	4a41      	ldr	r2, [pc, #260]	; (8014280 <xTaskIncrementTick+0x15c>)
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	6013      	str	r3, [r2, #0]
 8014180:	4b40      	ldr	r3, [pc, #256]	; (8014284 <xTaskIncrementTick+0x160>)
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	3301      	adds	r3, #1
 8014186:	4a3f      	ldr	r2, [pc, #252]	; (8014284 <xTaskIncrementTick+0x160>)
 8014188:	6013      	str	r3, [r2, #0]
 801418a:	f000 faaf 	bl	80146ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801418e:	4b3e      	ldr	r3, [pc, #248]	; (8014288 <xTaskIncrementTick+0x164>)
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	693a      	ldr	r2, [r7, #16]
 8014194:	429a      	cmp	r2, r3
 8014196:	d34d      	bcc.n	8014234 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014198:	4b38      	ldr	r3, [pc, #224]	; (801427c <xTaskIncrementTick+0x158>)
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d101      	bne.n	80141a6 <xTaskIncrementTick+0x82>
 80141a2:	2301      	movs	r3, #1
 80141a4:	e000      	b.n	80141a8 <xTaskIncrementTick+0x84>
 80141a6:	2300      	movs	r3, #0
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d004      	beq.n	80141b6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80141ac:	4b36      	ldr	r3, [pc, #216]	; (8014288 <xTaskIncrementTick+0x164>)
 80141ae:	f04f 32ff 	mov.w	r2, #4294967295
 80141b2:	601a      	str	r2, [r3, #0]
					break;
 80141b4:	e03e      	b.n	8014234 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80141b6:	4b31      	ldr	r3, [pc, #196]	; (801427c <xTaskIncrementTick+0x158>)
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	68db      	ldr	r3, [r3, #12]
 80141bc:	68db      	ldr	r3, [r3, #12]
 80141be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	685b      	ldr	r3, [r3, #4]
 80141c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80141c6:	693a      	ldr	r2, [r7, #16]
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	429a      	cmp	r2, r3
 80141cc:	d203      	bcs.n	80141d6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80141ce:	4a2e      	ldr	r2, [pc, #184]	; (8014288 <xTaskIncrementTick+0x164>)
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	6013      	str	r3, [r2, #0]
						break;
 80141d4:	e02e      	b.n	8014234 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80141d6:	68bb      	ldr	r3, [r7, #8]
 80141d8:	3304      	adds	r3, #4
 80141da:	4618      	mov	r0, r3
 80141dc:	f7fe fd4e 	bl	8012c7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80141e0:	68bb      	ldr	r3, [r7, #8]
 80141e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d004      	beq.n	80141f2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	3318      	adds	r3, #24
 80141ec:	4618      	mov	r0, r3
 80141ee:	f7fe fd45 	bl	8012c7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80141f2:	68bb      	ldr	r3, [r7, #8]
 80141f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141f6:	2201      	movs	r2, #1
 80141f8:	409a      	lsls	r2, r3
 80141fa:	4b24      	ldr	r3, [pc, #144]	; (801428c <xTaskIncrementTick+0x168>)
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	4313      	orrs	r3, r2
 8014200:	4a22      	ldr	r2, [pc, #136]	; (801428c <xTaskIncrementTick+0x168>)
 8014202:	6013      	str	r3, [r2, #0]
 8014204:	68bb      	ldr	r3, [r7, #8]
 8014206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014208:	4613      	mov	r3, r2
 801420a:	009b      	lsls	r3, r3, #2
 801420c:	4413      	add	r3, r2
 801420e:	009b      	lsls	r3, r3, #2
 8014210:	4a1f      	ldr	r2, [pc, #124]	; (8014290 <xTaskIncrementTick+0x16c>)
 8014212:	441a      	add	r2, r3
 8014214:	68bb      	ldr	r3, [r7, #8]
 8014216:	3304      	adds	r3, #4
 8014218:	4619      	mov	r1, r3
 801421a:	4610      	mov	r0, r2
 801421c:	f7fe fcd3 	bl	8012bc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014224:	4b1b      	ldr	r3, [pc, #108]	; (8014294 <xTaskIncrementTick+0x170>)
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801422a:	429a      	cmp	r2, r3
 801422c:	d3b4      	bcc.n	8014198 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801422e:	2301      	movs	r3, #1
 8014230:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014232:	e7b1      	b.n	8014198 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014234:	4b17      	ldr	r3, [pc, #92]	; (8014294 <xTaskIncrementTick+0x170>)
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801423a:	4915      	ldr	r1, [pc, #84]	; (8014290 <xTaskIncrementTick+0x16c>)
 801423c:	4613      	mov	r3, r2
 801423e:	009b      	lsls	r3, r3, #2
 8014240:	4413      	add	r3, r2
 8014242:	009b      	lsls	r3, r3, #2
 8014244:	440b      	add	r3, r1
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	2b01      	cmp	r3, #1
 801424a:	d907      	bls.n	801425c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 801424c:	2301      	movs	r3, #1
 801424e:	617b      	str	r3, [r7, #20]
 8014250:	e004      	b.n	801425c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014252:	4b11      	ldr	r3, [pc, #68]	; (8014298 <xTaskIncrementTick+0x174>)
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	3301      	adds	r3, #1
 8014258:	4a0f      	ldr	r2, [pc, #60]	; (8014298 <xTaskIncrementTick+0x174>)
 801425a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801425c:	4b0f      	ldr	r3, [pc, #60]	; (801429c <xTaskIncrementTick+0x178>)
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d001      	beq.n	8014268 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8014264:	2301      	movs	r3, #1
 8014266:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014268:	697b      	ldr	r3, [r7, #20]
}
 801426a:	4618      	mov	r0, r3
 801426c:	3718      	adds	r7, #24
 801426e:	46bd      	mov	sp, r7
 8014270:	bd80      	pop	{r7, pc}
 8014272:	bf00      	nop
 8014274:	20005870 	.word	0x20005870
 8014278:	2000584c 	.word	0x2000584c
 801427c:	20005800 	.word	0x20005800
 8014280:	20005804 	.word	0x20005804
 8014284:	20005860 	.word	0x20005860
 8014288:	20005868 	.word	0x20005868
 801428c:	20005850 	.word	0x20005850
 8014290:	2000574c 	.word	0x2000574c
 8014294:	20005748 	.word	0x20005748
 8014298:	20005858 	.word	0x20005858
 801429c:	2000585c 	.word	0x2000585c

080142a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80142a0:	b480      	push	{r7}
 80142a2:	b087      	sub	sp, #28
 80142a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80142a6:	4b29      	ldr	r3, [pc, #164]	; (801434c <vTaskSwitchContext+0xac>)
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d003      	beq.n	80142b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80142ae:	4b28      	ldr	r3, [pc, #160]	; (8014350 <vTaskSwitchContext+0xb0>)
 80142b0:	2201      	movs	r2, #1
 80142b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80142b4:	e044      	b.n	8014340 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80142b6:	4b26      	ldr	r3, [pc, #152]	; (8014350 <vTaskSwitchContext+0xb0>)
 80142b8:	2200      	movs	r2, #0
 80142ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80142bc:	4b25      	ldr	r3, [pc, #148]	; (8014354 <vTaskSwitchContext+0xb4>)
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	fab3 f383 	clz	r3, r3
 80142c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80142ca:	7afb      	ldrb	r3, [r7, #11]
 80142cc:	f1c3 031f 	rsb	r3, r3, #31
 80142d0:	617b      	str	r3, [r7, #20]
 80142d2:	4921      	ldr	r1, [pc, #132]	; (8014358 <vTaskSwitchContext+0xb8>)
 80142d4:	697a      	ldr	r2, [r7, #20]
 80142d6:	4613      	mov	r3, r2
 80142d8:	009b      	lsls	r3, r3, #2
 80142da:	4413      	add	r3, r2
 80142dc:	009b      	lsls	r3, r3, #2
 80142de:	440b      	add	r3, r1
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d10a      	bne.n	80142fc <vTaskSwitchContext+0x5c>
	__asm volatile
 80142e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142ea:	f383 8811 	msr	BASEPRI, r3
 80142ee:	f3bf 8f6f 	isb	sy
 80142f2:	f3bf 8f4f 	dsb	sy
 80142f6:	607b      	str	r3, [r7, #4]
}
 80142f8:	bf00      	nop
 80142fa:	e7fe      	b.n	80142fa <vTaskSwitchContext+0x5a>
 80142fc:	697a      	ldr	r2, [r7, #20]
 80142fe:	4613      	mov	r3, r2
 8014300:	009b      	lsls	r3, r3, #2
 8014302:	4413      	add	r3, r2
 8014304:	009b      	lsls	r3, r3, #2
 8014306:	4a14      	ldr	r2, [pc, #80]	; (8014358 <vTaskSwitchContext+0xb8>)
 8014308:	4413      	add	r3, r2
 801430a:	613b      	str	r3, [r7, #16]
 801430c:	693b      	ldr	r3, [r7, #16]
 801430e:	685b      	ldr	r3, [r3, #4]
 8014310:	685a      	ldr	r2, [r3, #4]
 8014312:	693b      	ldr	r3, [r7, #16]
 8014314:	605a      	str	r2, [r3, #4]
 8014316:	693b      	ldr	r3, [r7, #16]
 8014318:	685a      	ldr	r2, [r3, #4]
 801431a:	693b      	ldr	r3, [r7, #16]
 801431c:	3308      	adds	r3, #8
 801431e:	429a      	cmp	r2, r3
 8014320:	d104      	bne.n	801432c <vTaskSwitchContext+0x8c>
 8014322:	693b      	ldr	r3, [r7, #16]
 8014324:	685b      	ldr	r3, [r3, #4]
 8014326:	685a      	ldr	r2, [r3, #4]
 8014328:	693b      	ldr	r3, [r7, #16]
 801432a:	605a      	str	r2, [r3, #4]
 801432c:	693b      	ldr	r3, [r7, #16]
 801432e:	685b      	ldr	r3, [r3, #4]
 8014330:	68db      	ldr	r3, [r3, #12]
 8014332:	4a0a      	ldr	r2, [pc, #40]	; (801435c <vTaskSwitchContext+0xbc>)
 8014334:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014336:	4b09      	ldr	r3, [pc, #36]	; (801435c <vTaskSwitchContext+0xbc>)
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	334c      	adds	r3, #76	; 0x4c
 801433c:	4a08      	ldr	r2, [pc, #32]	; (8014360 <vTaskSwitchContext+0xc0>)
 801433e:	6013      	str	r3, [r2, #0]
}
 8014340:	bf00      	nop
 8014342:	371c      	adds	r7, #28
 8014344:	46bd      	mov	sp, r7
 8014346:	bc80      	pop	{r7}
 8014348:	4770      	bx	lr
 801434a:	bf00      	nop
 801434c:	20005870 	.word	0x20005870
 8014350:	2000585c 	.word	0x2000585c
 8014354:	20005850 	.word	0x20005850
 8014358:	2000574c 	.word	0x2000574c
 801435c:	20005748 	.word	0x20005748
 8014360:	20000250 	.word	0x20000250

08014364 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014364:	b580      	push	{r7, lr}
 8014366:	b084      	sub	sp, #16
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
 801436c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d10a      	bne.n	801438a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014378:	f383 8811 	msr	BASEPRI, r3
 801437c:	f3bf 8f6f 	isb	sy
 8014380:	f3bf 8f4f 	dsb	sy
 8014384:	60fb      	str	r3, [r7, #12]
}
 8014386:	bf00      	nop
 8014388:	e7fe      	b.n	8014388 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801438a:	4b07      	ldr	r3, [pc, #28]	; (80143a8 <vTaskPlaceOnEventList+0x44>)
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	3318      	adds	r3, #24
 8014390:	4619      	mov	r1, r3
 8014392:	6878      	ldr	r0, [r7, #4]
 8014394:	f7fe fc3a 	bl	8012c0c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014398:	2101      	movs	r1, #1
 801439a:	6838      	ldr	r0, [r7, #0]
 801439c:	f000 fba8 	bl	8014af0 <prvAddCurrentTaskToDelayedList>
}
 80143a0:	bf00      	nop
 80143a2:	3710      	adds	r7, #16
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd80      	pop	{r7, pc}
 80143a8:	20005748 	.word	0x20005748

080143ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b086      	sub	sp, #24
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	68db      	ldr	r3, [r3, #12]
 80143b8:	68db      	ldr	r3, [r3, #12]
 80143ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80143bc:	693b      	ldr	r3, [r7, #16]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d10a      	bne.n	80143d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80143c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143c6:	f383 8811 	msr	BASEPRI, r3
 80143ca:	f3bf 8f6f 	isb	sy
 80143ce:	f3bf 8f4f 	dsb	sy
 80143d2:	60fb      	str	r3, [r7, #12]
}
 80143d4:	bf00      	nop
 80143d6:	e7fe      	b.n	80143d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80143d8:	693b      	ldr	r3, [r7, #16]
 80143da:	3318      	adds	r3, #24
 80143dc:	4618      	mov	r0, r3
 80143de:	f7fe fc4d 	bl	8012c7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80143e2:	4b1d      	ldr	r3, [pc, #116]	; (8014458 <xTaskRemoveFromEventList+0xac>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d11c      	bne.n	8014424 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80143ea:	693b      	ldr	r3, [r7, #16]
 80143ec:	3304      	adds	r3, #4
 80143ee:	4618      	mov	r0, r3
 80143f0:	f7fe fc44 	bl	8012c7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80143f4:	693b      	ldr	r3, [r7, #16]
 80143f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143f8:	2201      	movs	r2, #1
 80143fa:	409a      	lsls	r2, r3
 80143fc:	4b17      	ldr	r3, [pc, #92]	; (801445c <xTaskRemoveFromEventList+0xb0>)
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	4313      	orrs	r3, r2
 8014402:	4a16      	ldr	r2, [pc, #88]	; (801445c <xTaskRemoveFromEventList+0xb0>)
 8014404:	6013      	str	r3, [r2, #0]
 8014406:	693b      	ldr	r3, [r7, #16]
 8014408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801440a:	4613      	mov	r3, r2
 801440c:	009b      	lsls	r3, r3, #2
 801440e:	4413      	add	r3, r2
 8014410:	009b      	lsls	r3, r3, #2
 8014412:	4a13      	ldr	r2, [pc, #76]	; (8014460 <xTaskRemoveFromEventList+0xb4>)
 8014414:	441a      	add	r2, r3
 8014416:	693b      	ldr	r3, [r7, #16]
 8014418:	3304      	adds	r3, #4
 801441a:	4619      	mov	r1, r3
 801441c:	4610      	mov	r0, r2
 801441e:	f7fe fbd2 	bl	8012bc6 <vListInsertEnd>
 8014422:	e005      	b.n	8014430 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014424:	693b      	ldr	r3, [r7, #16]
 8014426:	3318      	adds	r3, #24
 8014428:	4619      	mov	r1, r3
 801442a:	480e      	ldr	r0, [pc, #56]	; (8014464 <xTaskRemoveFromEventList+0xb8>)
 801442c:	f7fe fbcb 	bl	8012bc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014430:	693b      	ldr	r3, [r7, #16]
 8014432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014434:	4b0c      	ldr	r3, [pc, #48]	; (8014468 <xTaskRemoveFromEventList+0xbc>)
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801443a:	429a      	cmp	r2, r3
 801443c:	d905      	bls.n	801444a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801443e:	2301      	movs	r3, #1
 8014440:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014442:	4b0a      	ldr	r3, [pc, #40]	; (801446c <xTaskRemoveFromEventList+0xc0>)
 8014444:	2201      	movs	r2, #1
 8014446:	601a      	str	r2, [r3, #0]
 8014448:	e001      	b.n	801444e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801444a:	2300      	movs	r3, #0
 801444c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 801444e:	697b      	ldr	r3, [r7, #20]
}
 8014450:	4618      	mov	r0, r3
 8014452:	3718      	adds	r7, #24
 8014454:	46bd      	mov	sp, r7
 8014456:	bd80      	pop	{r7, pc}
 8014458:	20005870 	.word	0x20005870
 801445c:	20005850 	.word	0x20005850
 8014460:	2000574c 	.word	0x2000574c
 8014464:	20005808 	.word	0x20005808
 8014468:	20005748 	.word	0x20005748
 801446c:	2000585c 	.word	0x2000585c

08014470 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014470:	b480      	push	{r7}
 8014472:	b083      	sub	sp, #12
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014478:	4b06      	ldr	r3, [pc, #24]	; (8014494 <vTaskInternalSetTimeOutState+0x24>)
 801447a:	681a      	ldr	r2, [r3, #0]
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014480:	4b05      	ldr	r3, [pc, #20]	; (8014498 <vTaskInternalSetTimeOutState+0x28>)
 8014482:	681a      	ldr	r2, [r3, #0]
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	605a      	str	r2, [r3, #4]
}
 8014488:	bf00      	nop
 801448a:	370c      	adds	r7, #12
 801448c:	46bd      	mov	sp, r7
 801448e:	bc80      	pop	{r7}
 8014490:	4770      	bx	lr
 8014492:	bf00      	nop
 8014494:	20005860 	.word	0x20005860
 8014498:	2000584c 	.word	0x2000584c

0801449c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801449c:	b580      	push	{r7, lr}
 801449e:	b088      	sub	sp, #32
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	6078      	str	r0, [r7, #4]
 80144a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d10a      	bne.n	80144c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80144ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144b0:	f383 8811 	msr	BASEPRI, r3
 80144b4:	f3bf 8f6f 	isb	sy
 80144b8:	f3bf 8f4f 	dsb	sy
 80144bc:	613b      	str	r3, [r7, #16]
}
 80144be:	bf00      	nop
 80144c0:	e7fe      	b.n	80144c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80144c2:	683b      	ldr	r3, [r7, #0]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d10a      	bne.n	80144de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80144c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144cc:	f383 8811 	msr	BASEPRI, r3
 80144d0:	f3bf 8f6f 	isb	sy
 80144d4:	f3bf 8f4f 	dsb	sy
 80144d8:	60fb      	str	r3, [r7, #12]
}
 80144da:	bf00      	nop
 80144dc:	e7fe      	b.n	80144dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80144de:	f000 fc5d 	bl	8014d9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80144e2:	4b1d      	ldr	r3, [pc, #116]	; (8014558 <xTaskCheckForTimeOut+0xbc>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	685b      	ldr	r3, [r3, #4]
 80144ec:	69ba      	ldr	r2, [r7, #24]
 80144ee:	1ad3      	subs	r3, r2, r3
 80144f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80144f2:	683b      	ldr	r3, [r7, #0]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144fa:	d102      	bne.n	8014502 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80144fc:	2300      	movs	r3, #0
 80144fe:	61fb      	str	r3, [r7, #28]
 8014500:	e023      	b.n	801454a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	681a      	ldr	r2, [r3, #0]
 8014506:	4b15      	ldr	r3, [pc, #84]	; (801455c <xTaskCheckForTimeOut+0xc0>)
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	429a      	cmp	r2, r3
 801450c:	d007      	beq.n	801451e <xTaskCheckForTimeOut+0x82>
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	685b      	ldr	r3, [r3, #4]
 8014512:	69ba      	ldr	r2, [r7, #24]
 8014514:	429a      	cmp	r2, r3
 8014516:	d302      	bcc.n	801451e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014518:	2301      	movs	r3, #1
 801451a:	61fb      	str	r3, [r7, #28]
 801451c:	e015      	b.n	801454a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	697a      	ldr	r2, [r7, #20]
 8014524:	429a      	cmp	r2, r3
 8014526:	d20b      	bcs.n	8014540 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	681a      	ldr	r2, [r3, #0]
 801452c:	697b      	ldr	r3, [r7, #20]
 801452e:	1ad2      	subs	r2, r2, r3
 8014530:	683b      	ldr	r3, [r7, #0]
 8014532:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014534:	6878      	ldr	r0, [r7, #4]
 8014536:	f7ff ff9b 	bl	8014470 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801453a:	2300      	movs	r3, #0
 801453c:	61fb      	str	r3, [r7, #28]
 801453e:	e004      	b.n	801454a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	2200      	movs	r2, #0
 8014544:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014546:	2301      	movs	r3, #1
 8014548:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801454a:	f000 fc57 	bl	8014dfc <vPortExitCritical>

	return xReturn;
 801454e:	69fb      	ldr	r3, [r7, #28]
}
 8014550:	4618      	mov	r0, r3
 8014552:	3720      	adds	r7, #32
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}
 8014558:	2000584c 	.word	0x2000584c
 801455c:	20005860 	.word	0x20005860

08014560 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014560:	b480      	push	{r7}
 8014562:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014564:	4b03      	ldr	r3, [pc, #12]	; (8014574 <vTaskMissedYield+0x14>)
 8014566:	2201      	movs	r2, #1
 8014568:	601a      	str	r2, [r3, #0]
}
 801456a:	bf00      	nop
 801456c:	46bd      	mov	sp, r7
 801456e:	bc80      	pop	{r7}
 8014570:	4770      	bx	lr
 8014572:	bf00      	nop
 8014574:	2000585c 	.word	0x2000585c

08014578 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b082      	sub	sp, #8
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014580:	f000 f852 	bl	8014628 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014584:	4b06      	ldr	r3, [pc, #24]	; (80145a0 <prvIdleTask+0x28>)
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	2b01      	cmp	r3, #1
 801458a:	d9f9      	bls.n	8014580 <prvIdleTask+0x8>
			{
				taskYIELD();
 801458c:	4b05      	ldr	r3, [pc, #20]	; (80145a4 <prvIdleTask+0x2c>)
 801458e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014592:	601a      	str	r2, [r3, #0]
 8014594:	f3bf 8f4f 	dsb	sy
 8014598:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801459c:	e7f0      	b.n	8014580 <prvIdleTask+0x8>
 801459e:	bf00      	nop
 80145a0:	2000574c 	.word	0x2000574c
 80145a4:	e000ed04 	.word	0xe000ed04

080145a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b082      	sub	sp, #8
 80145ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80145ae:	2300      	movs	r3, #0
 80145b0:	607b      	str	r3, [r7, #4]
 80145b2:	e00c      	b.n	80145ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80145b4:	687a      	ldr	r2, [r7, #4]
 80145b6:	4613      	mov	r3, r2
 80145b8:	009b      	lsls	r3, r3, #2
 80145ba:	4413      	add	r3, r2
 80145bc:	009b      	lsls	r3, r3, #2
 80145be:	4a12      	ldr	r2, [pc, #72]	; (8014608 <prvInitialiseTaskLists+0x60>)
 80145c0:	4413      	add	r3, r2
 80145c2:	4618      	mov	r0, r3
 80145c4:	f7fe fad4 	bl	8012b70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	3301      	adds	r3, #1
 80145cc:	607b      	str	r3, [r7, #4]
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	2b06      	cmp	r3, #6
 80145d2:	d9ef      	bls.n	80145b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80145d4:	480d      	ldr	r0, [pc, #52]	; (801460c <prvInitialiseTaskLists+0x64>)
 80145d6:	f7fe facb 	bl	8012b70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80145da:	480d      	ldr	r0, [pc, #52]	; (8014610 <prvInitialiseTaskLists+0x68>)
 80145dc:	f7fe fac8 	bl	8012b70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80145e0:	480c      	ldr	r0, [pc, #48]	; (8014614 <prvInitialiseTaskLists+0x6c>)
 80145e2:	f7fe fac5 	bl	8012b70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80145e6:	480c      	ldr	r0, [pc, #48]	; (8014618 <prvInitialiseTaskLists+0x70>)
 80145e8:	f7fe fac2 	bl	8012b70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80145ec:	480b      	ldr	r0, [pc, #44]	; (801461c <prvInitialiseTaskLists+0x74>)
 80145ee:	f7fe fabf 	bl	8012b70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80145f2:	4b0b      	ldr	r3, [pc, #44]	; (8014620 <prvInitialiseTaskLists+0x78>)
 80145f4:	4a05      	ldr	r2, [pc, #20]	; (801460c <prvInitialiseTaskLists+0x64>)
 80145f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80145f8:	4b0a      	ldr	r3, [pc, #40]	; (8014624 <prvInitialiseTaskLists+0x7c>)
 80145fa:	4a05      	ldr	r2, [pc, #20]	; (8014610 <prvInitialiseTaskLists+0x68>)
 80145fc:	601a      	str	r2, [r3, #0]
}
 80145fe:	bf00      	nop
 8014600:	3708      	adds	r7, #8
 8014602:	46bd      	mov	sp, r7
 8014604:	bd80      	pop	{r7, pc}
 8014606:	bf00      	nop
 8014608:	2000574c 	.word	0x2000574c
 801460c:	200057d8 	.word	0x200057d8
 8014610:	200057ec 	.word	0x200057ec
 8014614:	20005808 	.word	0x20005808
 8014618:	2000581c 	.word	0x2000581c
 801461c:	20005834 	.word	0x20005834
 8014620:	20005800 	.word	0x20005800
 8014624:	20005804 	.word	0x20005804

08014628 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b082      	sub	sp, #8
 801462c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801462e:	e019      	b.n	8014664 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014630:	f000 fbb4 	bl	8014d9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8014634:	4b10      	ldr	r3, [pc, #64]	; (8014678 <prvCheckTasksWaitingTermination+0x50>)
 8014636:	68db      	ldr	r3, [r3, #12]
 8014638:	68db      	ldr	r3, [r3, #12]
 801463a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	3304      	adds	r3, #4
 8014640:	4618      	mov	r0, r3
 8014642:	f7fe fb1b 	bl	8012c7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014646:	4b0d      	ldr	r3, [pc, #52]	; (801467c <prvCheckTasksWaitingTermination+0x54>)
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	3b01      	subs	r3, #1
 801464c:	4a0b      	ldr	r2, [pc, #44]	; (801467c <prvCheckTasksWaitingTermination+0x54>)
 801464e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014650:	4b0b      	ldr	r3, [pc, #44]	; (8014680 <prvCheckTasksWaitingTermination+0x58>)
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	3b01      	subs	r3, #1
 8014656:	4a0a      	ldr	r2, [pc, #40]	; (8014680 <prvCheckTasksWaitingTermination+0x58>)
 8014658:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801465a:	f000 fbcf 	bl	8014dfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801465e:	6878      	ldr	r0, [r7, #4]
 8014660:	f000 f810 	bl	8014684 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014664:	4b06      	ldr	r3, [pc, #24]	; (8014680 <prvCheckTasksWaitingTermination+0x58>)
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d1e1      	bne.n	8014630 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
 }
 801466c:	bf00      	nop
 801466e:	bf00      	nop
 8014670:	3708      	adds	r7, #8
 8014672:	46bd      	mov	sp, r7
 8014674:	bd80      	pop	{r7, pc}
 8014676:	bf00      	nop
 8014678:	2000581c 	.word	0x2000581c
 801467c:	20005848 	.word	0x20005848
 8014680:	20005830 	.word	0x20005830

08014684 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014684:	b580      	push	{r7, lr}
 8014686:	b084      	sub	sp, #16
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	334c      	adds	r3, #76	; 0x4c
 8014690:	4618      	mov	r0, r3
 8014692:	f002 fa0b 	bl	8016aac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801469c:	2b00      	cmp	r3, #0
 801469e:	d108      	bne.n	80146b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146a4:	4618      	mov	r0, r3
 80146a6:	f000 fd3d 	bl	8015124 <vPortFree>
				vPortFree( pxTCB );
 80146aa:	6878      	ldr	r0, [r7, #4]
 80146ac:	f000 fd3a 	bl	8015124 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80146b0:	e018      	b.n	80146e4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80146b8:	2b01      	cmp	r3, #1
 80146ba:	d103      	bne.n	80146c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80146bc:	6878      	ldr	r0, [r7, #4]
 80146be:	f000 fd31 	bl	8015124 <vPortFree>
	}
 80146c2:	e00f      	b.n	80146e4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80146ca:	2b02      	cmp	r3, #2
 80146cc:	d00a      	beq.n	80146e4 <prvDeleteTCB+0x60>
	__asm volatile
 80146ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146d2:	f383 8811 	msr	BASEPRI, r3
 80146d6:	f3bf 8f6f 	isb	sy
 80146da:	f3bf 8f4f 	dsb	sy
 80146de:	60fb      	str	r3, [r7, #12]
}
 80146e0:	bf00      	nop
 80146e2:	e7fe      	b.n	80146e2 <prvDeleteTCB+0x5e>
	}
 80146e4:	bf00      	nop
 80146e6:	3710      	adds	r7, #16
 80146e8:	46bd      	mov	sp, r7
 80146ea:	bd80      	pop	{r7, pc}

080146ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80146ec:	b480      	push	{r7}
 80146ee:	b083      	sub	sp, #12
 80146f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80146f2:	4b0e      	ldr	r3, [pc, #56]	; (801472c <prvResetNextTaskUnblockTime+0x40>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d101      	bne.n	8014700 <prvResetNextTaskUnblockTime+0x14>
 80146fc:	2301      	movs	r3, #1
 80146fe:	e000      	b.n	8014702 <prvResetNextTaskUnblockTime+0x16>
 8014700:	2300      	movs	r3, #0
 8014702:	2b00      	cmp	r3, #0
 8014704:	d004      	beq.n	8014710 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014706:	4b0a      	ldr	r3, [pc, #40]	; (8014730 <prvResetNextTaskUnblockTime+0x44>)
 8014708:	f04f 32ff 	mov.w	r2, #4294967295
 801470c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801470e:	e008      	b.n	8014722 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8014710:	4b06      	ldr	r3, [pc, #24]	; (801472c <prvResetNextTaskUnblockTime+0x40>)
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	68db      	ldr	r3, [r3, #12]
 8014716:	68db      	ldr	r3, [r3, #12]
 8014718:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	685b      	ldr	r3, [r3, #4]
 801471e:	4a04      	ldr	r2, [pc, #16]	; (8014730 <prvResetNextTaskUnblockTime+0x44>)
 8014720:	6013      	str	r3, [r2, #0]
}
 8014722:	bf00      	nop
 8014724:	370c      	adds	r7, #12
 8014726:	46bd      	mov	sp, r7
 8014728:	bc80      	pop	{r7}
 801472a:	4770      	bx	lr
 801472c:	20005800 	.word	0x20005800
 8014730:	20005868 	.word	0x20005868

08014734 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014734:	b480      	push	{r7}
 8014736:	b083      	sub	sp, #12
 8014738:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801473a:	4b0b      	ldr	r3, [pc, #44]	; (8014768 <xTaskGetSchedulerState+0x34>)
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d102      	bne.n	8014748 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014742:	2301      	movs	r3, #1
 8014744:	607b      	str	r3, [r7, #4]
 8014746:	e008      	b.n	801475a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014748:	4b08      	ldr	r3, [pc, #32]	; (801476c <xTaskGetSchedulerState+0x38>)
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d102      	bne.n	8014756 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014750:	2302      	movs	r3, #2
 8014752:	607b      	str	r3, [r7, #4]
 8014754:	e001      	b.n	801475a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014756:	2300      	movs	r3, #0
 8014758:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801475a:	687b      	ldr	r3, [r7, #4]
	}
 801475c:	4618      	mov	r0, r3
 801475e:	370c      	adds	r7, #12
 8014760:	46bd      	mov	sp, r7
 8014762:	bc80      	pop	{r7}
 8014764:	4770      	bx	lr
 8014766:	bf00      	nop
 8014768:	20005854 	.word	0x20005854
 801476c:	20005870 	.word	0x20005870

08014770 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014770:	b580      	push	{r7, lr}
 8014772:	b084      	sub	sp, #16
 8014774:	af00      	add	r7, sp, #0
 8014776:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801477c:	2300      	movs	r3, #0
 801477e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d06e      	beq.n	8014864 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014786:	68bb      	ldr	r3, [r7, #8]
 8014788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801478a:	4b39      	ldr	r3, [pc, #228]	; (8014870 <xTaskPriorityInherit+0x100>)
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014790:	429a      	cmp	r2, r3
 8014792:	d25e      	bcs.n	8014852 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014794:	68bb      	ldr	r3, [r7, #8]
 8014796:	699b      	ldr	r3, [r3, #24]
 8014798:	2b00      	cmp	r3, #0
 801479a:	db06      	blt.n	80147aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801479c:	4b34      	ldr	r3, [pc, #208]	; (8014870 <xTaskPriorityInherit+0x100>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147a2:	f1c3 0207 	rsb	r2, r3, #7
 80147a6:	68bb      	ldr	r3, [r7, #8]
 80147a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80147aa:	68bb      	ldr	r3, [r7, #8]
 80147ac:	6959      	ldr	r1, [r3, #20]
 80147ae:	68bb      	ldr	r3, [r7, #8]
 80147b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147b2:	4613      	mov	r3, r2
 80147b4:	009b      	lsls	r3, r3, #2
 80147b6:	4413      	add	r3, r2
 80147b8:	009b      	lsls	r3, r3, #2
 80147ba:	4a2e      	ldr	r2, [pc, #184]	; (8014874 <xTaskPriorityInherit+0x104>)
 80147bc:	4413      	add	r3, r2
 80147be:	4299      	cmp	r1, r3
 80147c0:	d101      	bne.n	80147c6 <xTaskPriorityInherit+0x56>
 80147c2:	2301      	movs	r3, #1
 80147c4:	e000      	b.n	80147c8 <xTaskPriorityInherit+0x58>
 80147c6:	2300      	movs	r3, #0
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d03a      	beq.n	8014842 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80147cc:	68bb      	ldr	r3, [r7, #8]
 80147ce:	3304      	adds	r3, #4
 80147d0:	4618      	mov	r0, r3
 80147d2:	f7fe fa53 	bl	8012c7c <uxListRemove>
 80147d6:	4603      	mov	r3, r0
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d115      	bne.n	8014808 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80147dc:	68bb      	ldr	r3, [r7, #8]
 80147de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147e0:	4924      	ldr	r1, [pc, #144]	; (8014874 <xTaskPriorityInherit+0x104>)
 80147e2:	4613      	mov	r3, r2
 80147e4:	009b      	lsls	r3, r3, #2
 80147e6:	4413      	add	r3, r2
 80147e8:	009b      	lsls	r3, r3, #2
 80147ea:	440b      	add	r3, r1
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d10a      	bne.n	8014808 <xTaskPriorityInherit+0x98>
 80147f2:	68bb      	ldr	r3, [r7, #8]
 80147f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147f6:	2201      	movs	r2, #1
 80147f8:	fa02 f303 	lsl.w	r3, r2, r3
 80147fc:	43da      	mvns	r2, r3
 80147fe:	4b1e      	ldr	r3, [pc, #120]	; (8014878 <xTaskPriorityInherit+0x108>)
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	4013      	ands	r3, r2
 8014804:	4a1c      	ldr	r2, [pc, #112]	; (8014878 <xTaskPriorityInherit+0x108>)
 8014806:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014808:	4b19      	ldr	r3, [pc, #100]	; (8014870 <xTaskPriorityInherit+0x100>)
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801480e:	68bb      	ldr	r3, [r7, #8]
 8014810:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014812:	68bb      	ldr	r3, [r7, #8]
 8014814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014816:	2201      	movs	r2, #1
 8014818:	409a      	lsls	r2, r3
 801481a:	4b17      	ldr	r3, [pc, #92]	; (8014878 <xTaskPriorityInherit+0x108>)
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	4313      	orrs	r3, r2
 8014820:	4a15      	ldr	r2, [pc, #84]	; (8014878 <xTaskPriorityInherit+0x108>)
 8014822:	6013      	str	r3, [r2, #0]
 8014824:	68bb      	ldr	r3, [r7, #8]
 8014826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014828:	4613      	mov	r3, r2
 801482a:	009b      	lsls	r3, r3, #2
 801482c:	4413      	add	r3, r2
 801482e:	009b      	lsls	r3, r3, #2
 8014830:	4a10      	ldr	r2, [pc, #64]	; (8014874 <xTaskPriorityInherit+0x104>)
 8014832:	441a      	add	r2, r3
 8014834:	68bb      	ldr	r3, [r7, #8]
 8014836:	3304      	adds	r3, #4
 8014838:	4619      	mov	r1, r3
 801483a:	4610      	mov	r0, r2
 801483c:	f7fe f9c3 	bl	8012bc6 <vListInsertEnd>
 8014840:	e004      	b.n	801484c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014842:	4b0b      	ldr	r3, [pc, #44]	; (8014870 <xTaskPriorityInherit+0x100>)
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014848:	68bb      	ldr	r3, [r7, #8]
 801484a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801484c:	2301      	movs	r3, #1
 801484e:	60fb      	str	r3, [r7, #12]
 8014850:	e008      	b.n	8014864 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014852:	68bb      	ldr	r3, [r7, #8]
 8014854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014856:	4b06      	ldr	r3, [pc, #24]	; (8014870 <xTaskPriorityInherit+0x100>)
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801485c:	429a      	cmp	r2, r3
 801485e:	d201      	bcs.n	8014864 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014860:	2301      	movs	r3, #1
 8014862:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014864:	68fb      	ldr	r3, [r7, #12]
	}
 8014866:	4618      	mov	r0, r3
 8014868:	3710      	adds	r7, #16
 801486a:	46bd      	mov	sp, r7
 801486c:	bd80      	pop	{r7, pc}
 801486e:	bf00      	nop
 8014870:	20005748 	.word	0x20005748
 8014874:	2000574c 	.word	0x2000574c
 8014878:	20005850 	.word	0x20005850

0801487c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801487c:	b580      	push	{r7, lr}
 801487e:	b086      	sub	sp, #24
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014888:	2300      	movs	r3, #0
 801488a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d06e      	beq.n	8014970 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014892:	4b3a      	ldr	r3, [pc, #232]	; (801497c <xTaskPriorityDisinherit+0x100>)
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	693a      	ldr	r2, [r7, #16]
 8014898:	429a      	cmp	r2, r3
 801489a:	d00a      	beq.n	80148b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801489c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148a0:	f383 8811 	msr	BASEPRI, r3
 80148a4:	f3bf 8f6f 	isb	sy
 80148a8:	f3bf 8f4f 	dsb	sy
 80148ac:	60fb      	str	r3, [r7, #12]
}
 80148ae:	bf00      	nop
 80148b0:	e7fe      	b.n	80148b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80148b2:	693b      	ldr	r3, [r7, #16]
 80148b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d10a      	bne.n	80148d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80148ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148be:	f383 8811 	msr	BASEPRI, r3
 80148c2:	f3bf 8f6f 	isb	sy
 80148c6:	f3bf 8f4f 	dsb	sy
 80148ca:	60bb      	str	r3, [r7, #8]
}
 80148cc:	bf00      	nop
 80148ce:	e7fe      	b.n	80148ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80148d0:	693b      	ldr	r3, [r7, #16]
 80148d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80148d4:	1e5a      	subs	r2, r3, #1
 80148d6:	693b      	ldr	r3, [r7, #16]
 80148d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80148da:	693b      	ldr	r3, [r7, #16]
 80148dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148de:	693b      	ldr	r3, [r7, #16]
 80148e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80148e2:	429a      	cmp	r2, r3
 80148e4:	d044      	beq.n	8014970 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80148e6:	693b      	ldr	r3, [r7, #16]
 80148e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d140      	bne.n	8014970 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80148ee:	693b      	ldr	r3, [r7, #16]
 80148f0:	3304      	adds	r3, #4
 80148f2:	4618      	mov	r0, r3
 80148f4:	f7fe f9c2 	bl	8012c7c <uxListRemove>
 80148f8:	4603      	mov	r3, r0
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d115      	bne.n	801492a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80148fe:	693b      	ldr	r3, [r7, #16]
 8014900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014902:	491f      	ldr	r1, [pc, #124]	; (8014980 <xTaskPriorityDisinherit+0x104>)
 8014904:	4613      	mov	r3, r2
 8014906:	009b      	lsls	r3, r3, #2
 8014908:	4413      	add	r3, r2
 801490a:	009b      	lsls	r3, r3, #2
 801490c:	440b      	add	r3, r1
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d10a      	bne.n	801492a <xTaskPriorityDisinherit+0xae>
 8014914:	693b      	ldr	r3, [r7, #16]
 8014916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014918:	2201      	movs	r2, #1
 801491a:	fa02 f303 	lsl.w	r3, r2, r3
 801491e:	43da      	mvns	r2, r3
 8014920:	4b18      	ldr	r3, [pc, #96]	; (8014984 <xTaskPriorityDisinherit+0x108>)
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	4013      	ands	r3, r2
 8014926:	4a17      	ldr	r2, [pc, #92]	; (8014984 <xTaskPriorityDisinherit+0x108>)
 8014928:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801492a:	693b      	ldr	r3, [r7, #16]
 801492c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801492e:	693b      	ldr	r3, [r7, #16]
 8014930:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014932:	693b      	ldr	r3, [r7, #16]
 8014934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014936:	f1c3 0207 	rsb	r2, r3, #7
 801493a:	693b      	ldr	r3, [r7, #16]
 801493c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801493e:	693b      	ldr	r3, [r7, #16]
 8014940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014942:	2201      	movs	r2, #1
 8014944:	409a      	lsls	r2, r3
 8014946:	4b0f      	ldr	r3, [pc, #60]	; (8014984 <xTaskPriorityDisinherit+0x108>)
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	4313      	orrs	r3, r2
 801494c:	4a0d      	ldr	r2, [pc, #52]	; (8014984 <xTaskPriorityDisinherit+0x108>)
 801494e:	6013      	str	r3, [r2, #0]
 8014950:	693b      	ldr	r3, [r7, #16]
 8014952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014954:	4613      	mov	r3, r2
 8014956:	009b      	lsls	r3, r3, #2
 8014958:	4413      	add	r3, r2
 801495a:	009b      	lsls	r3, r3, #2
 801495c:	4a08      	ldr	r2, [pc, #32]	; (8014980 <xTaskPriorityDisinherit+0x104>)
 801495e:	441a      	add	r2, r3
 8014960:	693b      	ldr	r3, [r7, #16]
 8014962:	3304      	adds	r3, #4
 8014964:	4619      	mov	r1, r3
 8014966:	4610      	mov	r0, r2
 8014968:	f7fe f92d 	bl	8012bc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801496c:	2301      	movs	r3, #1
 801496e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014970:	697b      	ldr	r3, [r7, #20]
	}
 8014972:	4618      	mov	r0, r3
 8014974:	3718      	adds	r7, #24
 8014976:	46bd      	mov	sp, r7
 8014978:	bd80      	pop	{r7, pc}
 801497a:	bf00      	nop
 801497c:	20005748 	.word	0x20005748
 8014980:	2000574c 	.word	0x2000574c
 8014984:	20005850 	.word	0x20005850

08014988 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014988:	b580      	push	{r7, lr}
 801498a:	b088      	sub	sp, #32
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
 8014990:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014996:	2301      	movs	r3, #1
 8014998:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	2b00      	cmp	r3, #0
 801499e:	f000 8088 	beq.w	8014ab2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80149a2:	69bb      	ldr	r3, [r7, #24]
 80149a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d10a      	bne.n	80149c0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80149aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149ae:	f383 8811 	msr	BASEPRI, r3
 80149b2:	f3bf 8f6f 	isb	sy
 80149b6:	f3bf 8f4f 	dsb	sy
 80149ba:	60fb      	str	r3, [r7, #12]
}
 80149bc:	bf00      	nop
 80149be:	e7fe      	b.n	80149be <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80149c0:	69bb      	ldr	r3, [r7, #24]
 80149c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80149c4:	683a      	ldr	r2, [r7, #0]
 80149c6:	429a      	cmp	r2, r3
 80149c8:	d902      	bls.n	80149d0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80149ca:	683b      	ldr	r3, [r7, #0]
 80149cc:	61fb      	str	r3, [r7, #28]
 80149ce:	e002      	b.n	80149d6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80149d0:	69bb      	ldr	r3, [r7, #24]
 80149d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80149d4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80149d6:	69bb      	ldr	r3, [r7, #24]
 80149d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149da:	69fa      	ldr	r2, [r7, #28]
 80149dc:	429a      	cmp	r2, r3
 80149de:	d068      	beq.n	8014ab2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80149e0:	69bb      	ldr	r3, [r7, #24]
 80149e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80149e4:	697a      	ldr	r2, [r7, #20]
 80149e6:	429a      	cmp	r2, r3
 80149e8:	d163      	bne.n	8014ab2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80149ea:	4b34      	ldr	r3, [pc, #208]	; (8014abc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	69ba      	ldr	r2, [r7, #24]
 80149f0:	429a      	cmp	r2, r3
 80149f2:	d10a      	bne.n	8014a0a <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80149f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149f8:	f383 8811 	msr	BASEPRI, r3
 80149fc:	f3bf 8f6f 	isb	sy
 8014a00:	f3bf 8f4f 	dsb	sy
 8014a04:	60bb      	str	r3, [r7, #8]
}
 8014a06:	bf00      	nop
 8014a08:	e7fe      	b.n	8014a08 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014a0a:	69bb      	ldr	r3, [r7, #24]
 8014a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a0e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014a10:	69bb      	ldr	r3, [r7, #24]
 8014a12:	69fa      	ldr	r2, [r7, #28]
 8014a14:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014a16:	69bb      	ldr	r3, [r7, #24]
 8014a18:	699b      	ldr	r3, [r3, #24]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	db04      	blt.n	8014a28 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a1e:	69fb      	ldr	r3, [r7, #28]
 8014a20:	f1c3 0207 	rsb	r2, r3, #7
 8014a24:	69bb      	ldr	r3, [r7, #24]
 8014a26:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014a28:	69bb      	ldr	r3, [r7, #24]
 8014a2a:	6959      	ldr	r1, [r3, #20]
 8014a2c:	693a      	ldr	r2, [r7, #16]
 8014a2e:	4613      	mov	r3, r2
 8014a30:	009b      	lsls	r3, r3, #2
 8014a32:	4413      	add	r3, r2
 8014a34:	009b      	lsls	r3, r3, #2
 8014a36:	4a22      	ldr	r2, [pc, #136]	; (8014ac0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014a38:	4413      	add	r3, r2
 8014a3a:	4299      	cmp	r1, r3
 8014a3c:	d101      	bne.n	8014a42 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8014a3e:	2301      	movs	r3, #1
 8014a40:	e000      	b.n	8014a44 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8014a42:	2300      	movs	r3, #0
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d034      	beq.n	8014ab2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014a48:	69bb      	ldr	r3, [r7, #24]
 8014a4a:	3304      	adds	r3, #4
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f7fe f915 	bl	8012c7c <uxListRemove>
 8014a52:	4603      	mov	r3, r0
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d115      	bne.n	8014a84 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014a58:	69bb      	ldr	r3, [r7, #24]
 8014a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a5c:	4918      	ldr	r1, [pc, #96]	; (8014ac0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014a5e:	4613      	mov	r3, r2
 8014a60:	009b      	lsls	r3, r3, #2
 8014a62:	4413      	add	r3, r2
 8014a64:	009b      	lsls	r3, r3, #2
 8014a66:	440b      	add	r3, r1
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d10a      	bne.n	8014a84 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8014a6e:	69bb      	ldr	r3, [r7, #24]
 8014a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a72:	2201      	movs	r2, #1
 8014a74:	fa02 f303 	lsl.w	r3, r2, r3
 8014a78:	43da      	mvns	r2, r3
 8014a7a:	4b12      	ldr	r3, [pc, #72]	; (8014ac4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	4013      	ands	r3, r2
 8014a80:	4a10      	ldr	r2, [pc, #64]	; (8014ac4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014a82:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014a84:	69bb      	ldr	r3, [r7, #24]
 8014a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a88:	2201      	movs	r2, #1
 8014a8a:	409a      	lsls	r2, r3
 8014a8c:	4b0d      	ldr	r3, [pc, #52]	; (8014ac4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	4313      	orrs	r3, r2
 8014a92:	4a0c      	ldr	r2, [pc, #48]	; (8014ac4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014a94:	6013      	str	r3, [r2, #0]
 8014a96:	69bb      	ldr	r3, [r7, #24]
 8014a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a9a:	4613      	mov	r3, r2
 8014a9c:	009b      	lsls	r3, r3, #2
 8014a9e:	4413      	add	r3, r2
 8014aa0:	009b      	lsls	r3, r3, #2
 8014aa2:	4a07      	ldr	r2, [pc, #28]	; (8014ac0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014aa4:	441a      	add	r2, r3
 8014aa6:	69bb      	ldr	r3, [r7, #24]
 8014aa8:	3304      	adds	r3, #4
 8014aaa:	4619      	mov	r1, r3
 8014aac:	4610      	mov	r0, r2
 8014aae:	f7fe f88a 	bl	8012bc6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014ab2:	bf00      	nop
 8014ab4:	3720      	adds	r7, #32
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bd80      	pop	{r7, pc}
 8014aba:	bf00      	nop
 8014abc:	20005748 	.word	0x20005748
 8014ac0:	2000574c 	.word	0x2000574c
 8014ac4:	20005850 	.word	0x20005850

08014ac8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8014ac8:	b480      	push	{r7}
 8014aca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014acc:	4b07      	ldr	r3, [pc, #28]	; (8014aec <pvTaskIncrementMutexHeldCount+0x24>)
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d004      	beq.n	8014ade <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014ad4:	4b05      	ldr	r3, [pc, #20]	; (8014aec <pvTaskIncrementMutexHeldCount+0x24>)
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014ada:	3201      	adds	r2, #1
 8014adc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8014ade:	4b03      	ldr	r3, [pc, #12]	; (8014aec <pvTaskIncrementMutexHeldCount+0x24>)
 8014ae0:	681b      	ldr	r3, [r3, #0]
	}
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	bc80      	pop	{r7}
 8014ae8:	4770      	bx	lr
 8014aea:	bf00      	nop
 8014aec:	20005748 	.word	0x20005748

08014af0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b084      	sub	sp, #16
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
 8014af8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014afa:	4b29      	ldr	r3, [pc, #164]	; (8014ba0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014b00:	4b28      	ldr	r3, [pc, #160]	; (8014ba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	3304      	adds	r3, #4
 8014b06:	4618      	mov	r0, r3
 8014b08:	f7fe f8b8 	bl	8012c7c <uxListRemove>
 8014b0c:	4603      	mov	r3, r0
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d10b      	bne.n	8014b2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8014b12:	4b24      	ldr	r3, [pc, #144]	; (8014ba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b18:	2201      	movs	r2, #1
 8014b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8014b1e:	43da      	mvns	r2, r3
 8014b20:	4b21      	ldr	r3, [pc, #132]	; (8014ba8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	4013      	ands	r3, r2
 8014b26:	4a20      	ldr	r2, [pc, #128]	; (8014ba8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014b28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b30:	d10a      	bne.n	8014b48 <prvAddCurrentTaskToDelayedList+0x58>
 8014b32:	683b      	ldr	r3, [r7, #0]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d007      	beq.n	8014b48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014b38:	4b1a      	ldr	r3, [pc, #104]	; (8014ba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	3304      	adds	r3, #4
 8014b3e:	4619      	mov	r1, r3
 8014b40:	481a      	ldr	r0, [pc, #104]	; (8014bac <prvAddCurrentTaskToDelayedList+0xbc>)
 8014b42:	f7fe f840 	bl	8012bc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014b46:	e026      	b.n	8014b96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014b48:	68fa      	ldr	r2, [r7, #12]
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	4413      	add	r3, r2
 8014b4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014b50:	4b14      	ldr	r3, [pc, #80]	; (8014ba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	68ba      	ldr	r2, [r7, #8]
 8014b56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014b58:	68ba      	ldr	r2, [r7, #8]
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	429a      	cmp	r2, r3
 8014b5e:	d209      	bcs.n	8014b74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014b60:	4b13      	ldr	r3, [pc, #76]	; (8014bb0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014b62:	681a      	ldr	r2, [r3, #0]
 8014b64:	4b0f      	ldr	r3, [pc, #60]	; (8014ba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	3304      	adds	r3, #4
 8014b6a:	4619      	mov	r1, r3
 8014b6c:	4610      	mov	r0, r2
 8014b6e:	f7fe f84d 	bl	8012c0c <vListInsert>
}
 8014b72:	e010      	b.n	8014b96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014b74:	4b0f      	ldr	r3, [pc, #60]	; (8014bb4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014b76:	681a      	ldr	r2, [r3, #0]
 8014b78:	4b0a      	ldr	r3, [pc, #40]	; (8014ba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	3304      	adds	r3, #4
 8014b7e:	4619      	mov	r1, r3
 8014b80:	4610      	mov	r0, r2
 8014b82:	f7fe f843 	bl	8012c0c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014b86:	4b0c      	ldr	r3, [pc, #48]	; (8014bb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	68ba      	ldr	r2, [r7, #8]
 8014b8c:	429a      	cmp	r2, r3
 8014b8e:	d202      	bcs.n	8014b96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014b90:	4a09      	ldr	r2, [pc, #36]	; (8014bb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014b92:	68bb      	ldr	r3, [r7, #8]
 8014b94:	6013      	str	r3, [r2, #0]
}
 8014b96:	bf00      	nop
 8014b98:	3710      	adds	r7, #16
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bd80      	pop	{r7, pc}
 8014b9e:	bf00      	nop
 8014ba0:	2000584c 	.word	0x2000584c
 8014ba4:	20005748 	.word	0x20005748
 8014ba8:	20005850 	.word	0x20005850
 8014bac:	20005834 	.word	0x20005834
 8014bb0:	20005804 	.word	0x20005804
 8014bb4:	20005800 	.word	0x20005800
 8014bb8:	20005868 	.word	0x20005868

08014bbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014bbc:	b480      	push	{r7}
 8014bbe:	b085      	sub	sp, #20
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	60f8      	str	r0, [r7, #12]
 8014bc4:	60b9      	str	r1, [r7, #8]
 8014bc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	3b04      	subs	r3, #4
 8014bcc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014bd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	3b04      	subs	r3, #4
 8014bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014bdc:	68bb      	ldr	r3, [r7, #8]
 8014bde:	f023 0201 	bic.w	r2, r3, #1
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	3b04      	subs	r3, #4
 8014bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014bec:	4a08      	ldr	r2, [pc, #32]	; (8014c10 <pxPortInitialiseStack+0x54>)
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	3b14      	subs	r3, #20
 8014bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014bf8:	687a      	ldr	r2, [r7, #4]
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	3b20      	subs	r3, #32
 8014c02:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014c04:	68fb      	ldr	r3, [r7, #12]
}
 8014c06:	4618      	mov	r0, r3
 8014c08:	3714      	adds	r7, #20
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	bc80      	pop	{r7}
 8014c0e:	4770      	bx	lr
 8014c10:	08014c15 	.word	0x08014c15

08014c14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014c14:	b480      	push	{r7}
 8014c16:	b085      	sub	sp, #20
 8014c18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014c1e:	4b12      	ldr	r3, [pc, #72]	; (8014c68 <prvTaskExitError+0x54>)
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c26:	d00a      	beq.n	8014c3e <prvTaskExitError+0x2a>
	__asm volatile
 8014c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c2c:	f383 8811 	msr	BASEPRI, r3
 8014c30:	f3bf 8f6f 	isb	sy
 8014c34:	f3bf 8f4f 	dsb	sy
 8014c38:	60fb      	str	r3, [r7, #12]
}
 8014c3a:	bf00      	nop
 8014c3c:	e7fe      	b.n	8014c3c <prvTaskExitError+0x28>
	__asm volatile
 8014c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c42:	f383 8811 	msr	BASEPRI, r3
 8014c46:	f3bf 8f6f 	isb	sy
 8014c4a:	f3bf 8f4f 	dsb	sy
 8014c4e:	60bb      	str	r3, [r7, #8]
}
 8014c50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014c52:	bf00      	nop
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d0fc      	beq.n	8014c54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014c5a:	bf00      	nop
 8014c5c:	bf00      	nop
 8014c5e:	3714      	adds	r7, #20
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bc80      	pop	{r7}
 8014c64:	4770      	bx	lr
 8014c66:	bf00      	nop
 8014c68:	2000024c 	.word	0x2000024c
 8014c6c:	00000000 	.word	0x00000000

08014c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014c70:	4b07      	ldr	r3, [pc, #28]	; (8014c90 <pxCurrentTCBConst2>)
 8014c72:	6819      	ldr	r1, [r3, #0]
 8014c74:	6808      	ldr	r0, [r1, #0]
 8014c76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014c7a:	f380 8809 	msr	PSP, r0
 8014c7e:	f3bf 8f6f 	isb	sy
 8014c82:	f04f 0000 	mov.w	r0, #0
 8014c86:	f380 8811 	msr	BASEPRI, r0
 8014c8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8014c8e:	4770      	bx	lr

08014c90 <pxCurrentTCBConst2>:
 8014c90:	20005748 	.word	0x20005748
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014c94:	bf00      	nop
 8014c96:	bf00      	nop

08014c98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8014c98:	4806      	ldr	r0, [pc, #24]	; (8014cb4 <prvPortStartFirstTask+0x1c>)
 8014c9a:	6800      	ldr	r0, [r0, #0]
 8014c9c:	6800      	ldr	r0, [r0, #0]
 8014c9e:	f380 8808 	msr	MSP, r0
 8014ca2:	b662      	cpsie	i
 8014ca4:	b661      	cpsie	f
 8014ca6:	f3bf 8f4f 	dsb	sy
 8014caa:	f3bf 8f6f 	isb	sy
 8014cae:	df00      	svc	0
 8014cb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014cb2:	bf00      	nop
 8014cb4:	e000ed08 	.word	0xe000ed08

08014cb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b084      	sub	sp, #16
 8014cbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014cbe:	4b32      	ldr	r3, [pc, #200]	; (8014d88 <xPortStartScheduler+0xd0>)
 8014cc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	781b      	ldrb	r3, [r3, #0]
 8014cc6:	b2db      	uxtb	r3, r3
 8014cc8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	22ff      	movs	r2, #255	; 0xff
 8014cce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	781b      	ldrb	r3, [r3, #0]
 8014cd4:	b2db      	uxtb	r3, r3
 8014cd6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014cd8:	78fb      	ldrb	r3, [r7, #3]
 8014cda:	b2db      	uxtb	r3, r3
 8014cdc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014ce0:	b2da      	uxtb	r2, r3
 8014ce2:	4b2a      	ldr	r3, [pc, #168]	; (8014d8c <xPortStartScheduler+0xd4>)
 8014ce4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014ce6:	4b2a      	ldr	r3, [pc, #168]	; (8014d90 <xPortStartScheduler+0xd8>)
 8014ce8:	2207      	movs	r2, #7
 8014cea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014cec:	e009      	b.n	8014d02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8014cee:	4b28      	ldr	r3, [pc, #160]	; (8014d90 <xPortStartScheduler+0xd8>)
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	3b01      	subs	r3, #1
 8014cf4:	4a26      	ldr	r2, [pc, #152]	; (8014d90 <xPortStartScheduler+0xd8>)
 8014cf6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014cf8:	78fb      	ldrb	r3, [r7, #3]
 8014cfa:	b2db      	uxtb	r3, r3
 8014cfc:	005b      	lsls	r3, r3, #1
 8014cfe:	b2db      	uxtb	r3, r3
 8014d00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014d02:	78fb      	ldrb	r3, [r7, #3]
 8014d04:	b2db      	uxtb	r3, r3
 8014d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014d0a:	2b80      	cmp	r3, #128	; 0x80
 8014d0c:	d0ef      	beq.n	8014cee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014d0e:	4b20      	ldr	r3, [pc, #128]	; (8014d90 <xPortStartScheduler+0xd8>)
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	f1c3 0307 	rsb	r3, r3, #7
 8014d16:	2b04      	cmp	r3, #4
 8014d18:	d00a      	beq.n	8014d30 <xPortStartScheduler+0x78>
	__asm volatile
 8014d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d1e:	f383 8811 	msr	BASEPRI, r3
 8014d22:	f3bf 8f6f 	isb	sy
 8014d26:	f3bf 8f4f 	dsb	sy
 8014d2a:	60bb      	str	r3, [r7, #8]
}
 8014d2c:	bf00      	nop
 8014d2e:	e7fe      	b.n	8014d2e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014d30:	4b17      	ldr	r3, [pc, #92]	; (8014d90 <xPortStartScheduler+0xd8>)
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	021b      	lsls	r3, r3, #8
 8014d36:	4a16      	ldr	r2, [pc, #88]	; (8014d90 <xPortStartScheduler+0xd8>)
 8014d38:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014d3a:	4b15      	ldr	r3, [pc, #84]	; (8014d90 <xPortStartScheduler+0xd8>)
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014d42:	4a13      	ldr	r2, [pc, #76]	; (8014d90 <xPortStartScheduler+0xd8>)
 8014d44:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	b2da      	uxtb	r2, r3
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014d4e:	4b11      	ldr	r3, [pc, #68]	; (8014d94 <xPortStartScheduler+0xdc>)
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	4a10      	ldr	r2, [pc, #64]	; (8014d94 <xPortStartScheduler+0xdc>)
 8014d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014d58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014d5a:	4b0e      	ldr	r3, [pc, #56]	; (8014d94 <xPortStartScheduler+0xdc>)
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	4a0d      	ldr	r2, [pc, #52]	; (8014d94 <xPortStartScheduler+0xdc>)
 8014d60:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014d64:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014d66:	f000 f8b9 	bl	8014edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014d6a:	4b0b      	ldr	r3, [pc, #44]	; (8014d98 <xPortStartScheduler+0xe0>)
 8014d6c:	2200      	movs	r2, #0
 8014d6e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014d70:	f7ff ff92 	bl	8014c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014d74:	f7ff fa94 	bl	80142a0 <vTaskSwitchContext>
	prvTaskExitError();
 8014d78:	f7ff ff4c 	bl	8014c14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014d7c:	2300      	movs	r3, #0
}
 8014d7e:	4618      	mov	r0, r3
 8014d80:	3710      	adds	r7, #16
 8014d82:	46bd      	mov	sp, r7
 8014d84:	bd80      	pop	{r7, pc}
 8014d86:	bf00      	nop
 8014d88:	e000e400 	.word	0xe000e400
 8014d8c:	20005874 	.word	0x20005874
 8014d90:	20005878 	.word	0x20005878
 8014d94:	e000ed20 	.word	0xe000ed20
 8014d98:	2000024c 	.word	0x2000024c

08014d9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014d9c:	b480      	push	{r7}
 8014d9e:	b083      	sub	sp, #12
 8014da0:	af00      	add	r7, sp, #0
	__asm volatile
 8014da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014da6:	f383 8811 	msr	BASEPRI, r3
 8014daa:	f3bf 8f6f 	isb	sy
 8014dae:	f3bf 8f4f 	dsb	sy
 8014db2:	607b      	str	r3, [r7, #4]
}
 8014db4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014db6:	4b0f      	ldr	r3, [pc, #60]	; (8014df4 <vPortEnterCritical+0x58>)
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	3301      	adds	r3, #1
 8014dbc:	4a0d      	ldr	r2, [pc, #52]	; (8014df4 <vPortEnterCritical+0x58>)
 8014dbe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014dc0:	4b0c      	ldr	r3, [pc, #48]	; (8014df4 <vPortEnterCritical+0x58>)
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	2b01      	cmp	r3, #1
 8014dc6:	d10f      	bne.n	8014de8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014dc8:	4b0b      	ldr	r3, [pc, #44]	; (8014df8 <vPortEnterCritical+0x5c>)
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	b2db      	uxtb	r3, r3
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d00a      	beq.n	8014de8 <vPortEnterCritical+0x4c>
	__asm volatile
 8014dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dd6:	f383 8811 	msr	BASEPRI, r3
 8014dda:	f3bf 8f6f 	isb	sy
 8014dde:	f3bf 8f4f 	dsb	sy
 8014de2:	603b      	str	r3, [r7, #0]
}
 8014de4:	bf00      	nop
 8014de6:	e7fe      	b.n	8014de6 <vPortEnterCritical+0x4a>
	}
}
 8014de8:	bf00      	nop
 8014dea:	370c      	adds	r7, #12
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bc80      	pop	{r7}
 8014df0:	4770      	bx	lr
 8014df2:	bf00      	nop
 8014df4:	2000024c 	.word	0x2000024c
 8014df8:	e000ed04 	.word	0xe000ed04

08014dfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014dfc:	b480      	push	{r7}
 8014dfe:	b083      	sub	sp, #12
 8014e00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014e02:	4b11      	ldr	r3, [pc, #68]	; (8014e48 <vPortExitCritical+0x4c>)
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d10a      	bne.n	8014e20 <vPortExitCritical+0x24>
	__asm volatile
 8014e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e0e:	f383 8811 	msr	BASEPRI, r3
 8014e12:	f3bf 8f6f 	isb	sy
 8014e16:	f3bf 8f4f 	dsb	sy
 8014e1a:	607b      	str	r3, [r7, #4]
}
 8014e1c:	bf00      	nop
 8014e1e:	e7fe      	b.n	8014e1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014e20:	4b09      	ldr	r3, [pc, #36]	; (8014e48 <vPortExitCritical+0x4c>)
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	3b01      	subs	r3, #1
 8014e26:	4a08      	ldr	r2, [pc, #32]	; (8014e48 <vPortExitCritical+0x4c>)
 8014e28:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014e2a:	4b07      	ldr	r3, [pc, #28]	; (8014e48 <vPortExitCritical+0x4c>)
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d105      	bne.n	8014e3e <vPortExitCritical+0x42>
 8014e32:	2300      	movs	r3, #0
 8014e34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014e36:	683b      	ldr	r3, [r7, #0]
 8014e38:	f383 8811 	msr	BASEPRI, r3
}
 8014e3c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014e3e:	bf00      	nop
 8014e40:	370c      	adds	r7, #12
 8014e42:	46bd      	mov	sp, r7
 8014e44:	bc80      	pop	{r7}
 8014e46:	4770      	bx	lr
 8014e48:	2000024c 	.word	0x2000024c
 8014e4c:	00000000 	.word	0x00000000

08014e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014e50:	f3ef 8009 	mrs	r0, PSP
 8014e54:	f3bf 8f6f 	isb	sy
 8014e58:	4b0d      	ldr	r3, [pc, #52]	; (8014e90 <pxCurrentTCBConst>)
 8014e5a:	681a      	ldr	r2, [r3, #0]
 8014e5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014e60:	6010      	str	r0, [r2, #0]
 8014e62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8014e66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014e6a:	f380 8811 	msr	BASEPRI, r0
 8014e6e:	f7ff fa17 	bl	80142a0 <vTaskSwitchContext>
 8014e72:	f04f 0000 	mov.w	r0, #0
 8014e76:	f380 8811 	msr	BASEPRI, r0
 8014e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014e7e:	6819      	ldr	r1, [r3, #0]
 8014e80:	6808      	ldr	r0, [r1, #0]
 8014e82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014e86:	f380 8809 	msr	PSP, r0
 8014e8a:	f3bf 8f6f 	isb	sy
 8014e8e:	4770      	bx	lr

08014e90 <pxCurrentTCBConst>:
 8014e90:	20005748 	.word	0x20005748
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014e94:	bf00      	nop
 8014e96:	bf00      	nop

08014e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b082      	sub	sp, #8
 8014e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8014e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ea2:	f383 8811 	msr	BASEPRI, r3
 8014ea6:	f3bf 8f6f 	isb	sy
 8014eaa:	f3bf 8f4f 	dsb	sy
 8014eae:	607b      	str	r3, [r7, #4]
}
 8014eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014eb2:	f7ff f937 	bl	8014124 <xTaskIncrementTick>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d003      	beq.n	8014ec4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014ebc:	4b06      	ldr	r3, [pc, #24]	; (8014ed8 <SysTick_Handler+0x40>)
 8014ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ec2:	601a      	str	r2, [r3, #0]
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014ec8:	683b      	ldr	r3, [r7, #0]
 8014eca:	f383 8811 	msr	BASEPRI, r3
}
 8014ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014ed0:	bf00      	nop
 8014ed2:	3708      	adds	r7, #8
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	bd80      	pop	{r7, pc}
 8014ed8:	e000ed04 	.word	0xe000ed04

08014edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014edc:	b480      	push	{r7}
 8014ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014ee0:	4b0a      	ldr	r3, [pc, #40]	; (8014f0c <vPortSetupTimerInterrupt+0x30>)
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014ee6:	4b0a      	ldr	r3, [pc, #40]	; (8014f10 <vPortSetupTimerInterrupt+0x34>)
 8014ee8:	2200      	movs	r2, #0
 8014eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014eec:	4b09      	ldr	r3, [pc, #36]	; (8014f14 <vPortSetupTimerInterrupt+0x38>)
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	4a09      	ldr	r2, [pc, #36]	; (8014f18 <vPortSetupTimerInterrupt+0x3c>)
 8014ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8014ef6:	099b      	lsrs	r3, r3, #6
 8014ef8:	4a08      	ldr	r2, [pc, #32]	; (8014f1c <vPortSetupTimerInterrupt+0x40>)
 8014efa:	3b01      	subs	r3, #1
 8014efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014efe:	4b03      	ldr	r3, [pc, #12]	; (8014f0c <vPortSetupTimerInterrupt+0x30>)
 8014f00:	2207      	movs	r2, #7
 8014f02:	601a      	str	r2, [r3, #0]
}
 8014f04:	bf00      	nop
 8014f06:	46bd      	mov	sp, r7
 8014f08:	bc80      	pop	{r7}
 8014f0a:	4770      	bx	lr
 8014f0c:	e000e010 	.word	0xe000e010
 8014f10:	e000e018 	.word	0xe000e018
 8014f14:	20000220 	.word	0x20000220
 8014f18:	10624dd3 	.word	0x10624dd3
 8014f1c:	e000e014 	.word	0xe000e014

08014f20 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014f20:	b480      	push	{r7}
 8014f22:	b085      	sub	sp, #20
 8014f24:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014f26:	f3ef 8305 	mrs	r3, IPSR
 8014f2a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	2b0f      	cmp	r3, #15
 8014f30:	d914      	bls.n	8014f5c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014f32:	4a16      	ldr	r2, [pc, #88]	; (8014f8c <vPortValidateInterruptPriority+0x6c>)
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	4413      	add	r3, r2
 8014f38:	781b      	ldrb	r3, [r3, #0]
 8014f3a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014f3c:	4b14      	ldr	r3, [pc, #80]	; (8014f90 <vPortValidateInterruptPriority+0x70>)
 8014f3e:	781b      	ldrb	r3, [r3, #0]
 8014f40:	7afa      	ldrb	r2, [r7, #11]
 8014f42:	429a      	cmp	r2, r3
 8014f44:	d20a      	bcs.n	8014f5c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8014f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f4a:	f383 8811 	msr	BASEPRI, r3
 8014f4e:	f3bf 8f6f 	isb	sy
 8014f52:	f3bf 8f4f 	dsb	sy
 8014f56:	607b      	str	r3, [r7, #4]
}
 8014f58:	bf00      	nop
 8014f5a:	e7fe      	b.n	8014f5a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014f5c:	4b0d      	ldr	r3, [pc, #52]	; (8014f94 <vPortValidateInterruptPriority+0x74>)
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014f64:	4b0c      	ldr	r3, [pc, #48]	; (8014f98 <vPortValidateInterruptPriority+0x78>)
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	429a      	cmp	r2, r3
 8014f6a:	d90a      	bls.n	8014f82 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f70:	f383 8811 	msr	BASEPRI, r3
 8014f74:	f3bf 8f6f 	isb	sy
 8014f78:	f3bf 8f4f 	dsb	sy
 8014f7c:	603b      	str	r3, [r7, #0]
}
 8014f7e:	bf00      	nop
 8014f80:	e7fe      	b.n	8014f80 <vPortValidateInterruptPriority+0x60>
	}
 8014f82:	bf00      	nop
 8014f84:	3714      	adds	r7, #20
 8014f86:	46bd      	mov	sp, r7
 8014f88:	bc80      	pop	{r7}
 8014f8a:	4770      	bx	lr
 8014f8c:	e000e3f0 	.word	0xe000e3f0
 8014f90:	20005874 	.word	0x20005874
 8014f94:	e000ed0c 	.word	0xe000ed0c
 8014f98:	20005878 	.word	0x20005878

08014f9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	b08a      	sub	sp, #40	; 0x28
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014fa8:	f7ff f812 	bl	8013fd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014fac:	4b58      	ldr	r3, [pc, #352]	; (8015110 <pvPortMalloc+0x174>)
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d101      	bne.n	8014fb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014fb4:	f000 f910 	bl	80151d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014fb8:	4b56      	ldr	r3, [pc, #344]	; (8015114 <pvPortMalloc+0x178>)
 8014fba:	681a      	ldr	r2, [r3, #0]
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	4013      	ands	r3, r2
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	f040 808e 	bne.w	80150e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d01d      	beq.n	8015008 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014fcc:	2208      	movs	r2, #8
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	4413      	add	r3, r2
 8014fd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	f003 0307 	and.w	r3, r3, #7
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d014      	beq.n	8015008 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	f023 0307 	bic.w	r3, r3, #7
 8014fe4:	3308      	adds	r3, #8
 8014fe6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	f003 0307 	and.w	r3, r3, #7
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d00a      	beq.n	8015008 <pvPortMalloc+0x6c>
	__asm volatile
 8014ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ff6:	f383 8811 	msr	BASEPRI, r3
 8014ffa:	f3bf 8f6f 	isb	sy
 8014ffe:	f3bf 8f4f 	dsb	sy
 8015002:	617b      	str	r3, [r7, #20]
}
 8015004:	bf00      	nop
 8015006:	e7fe      	b.n	8015006 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d069      	beq.n	80150e2 <pvPortMalloc+0x146>
 801500e:	4b42      	ldr	r3, [pc, #264]	; (8015118 <pvPortMalloc+0x17c>)
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	687a      	ldr	r2, [r7, #4]
 8015014:	429a      	cmp	r2, r3
 8015016:	d864      	bhi.n	80150e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015018:	4b40      	ldr	r3, [pc, #256]	; (801511c <pvPortMalloc+0x180>)
 801501a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801501c:	4b3f      	ldr	r3, [pc, #252]	; (801511c <pvPortMalloc+0x180>)
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015022:	e004      	b.n	801502e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015026:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015030:	685b      	ldr	r3, [r3, #4]
 8015032:	687a      	ldr	r2, [r7, #4]
 8015034:	429a      	cmp	r2, r3
 8015036:	d903      	bls.n	8015040 <pvPortMalloc+0xa4>
 8015038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d1f1      	bne.n	8015024 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015040:	4b33      	ldr	r3, [pc, #204]	; (8015110 <pvPortMalloc+0x174>)
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015046:	429a      	cmp	r2, r3
 8015048:	d04b      	beq.n	80150e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801504a:	6a3b      	ldr	r3, [r7, #32]
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	2208      	movs	r2, #8
 8015050:	4413      	add	r3, r2
 8015052:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015056:	681a      	ldr	r2, [r3, #0]
 8015058:	6a3b      	ldr	r3, [r7, #32]
 801505a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801505e:	685a      	ldr	r2, [r3, #4]
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	1ad2      	subs	r2, r2, r3
 8015064:	2308      	movs	r3, #8
 8015066:	005b      	lsls	r3, r3, #1
 8015068:	429a      	cmp	r2, r3
 801506a:	d91f      	bls.n	80150ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801506c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	4413      	add	r3, r2
 8015072:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015074:	69bb      	ldr	r3, [r7, #24]
 8015076:	f003 0307 	and.w	r3, r3, #7
 801507a:	2b00      	cmp	r3, #0
 801507c:	d00a      	beq.n	8015094 <pvPortMalloc+0xf8>
	__asm volatile
 801507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015082:	f383 8811 	msr	BASEPRI, r3
 8015086:	f3bf 8f6f 	isb	sy
 801508a:	f3bf 8f4f 	dsb	sy
 801508e:	613b      	str	r3, [r7, #16]
}
 8015090:	bf00      	nop
 8015092:	e7fe      	b.n	8015092 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015096:	685a      	ldr	r2, [r3, #4]
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	1ad2      	subs	r2, r2, r3
 801509c:	69bb      	ldr	r3, [r7, #24]
 801509e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80150a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150a2:	687a      	ldr	r2, [r7, #4]
 80150a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80150a6:	69b8      	ldr	r0, [r7, #24]
 80150a8:	f000 f8f8 	bl	801529c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80150ac:	4b1a      	ldr	r3, [pc, #104]	; (8015118 <pvPortMalloc+0x17c>)
 80150ae:	681a      	ldr	r2, [r3, #0]
 80150b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150b2:	685b      	ldr	r3, [r3, #4]
 80150b4:	1ad3      	subs	r3, r2, r3
 80150b6:	4a18      	ldr	r2, [pc, #96]	; (8015118 <pvPortMalloc+0x17c>)
 80150b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80150ba:	4b17      	ldr	r3, [pc, #92]	; (8015118 <pvPortMalloc+0x17c>)
 80150bc:	681a      	ldr	r2, [r3, #0]
 80150be:	4b18      	ldr	r3, [pc, #96]	; (8015120 <pvPortMalloc+0x184>)
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	429a      	cmp	r2, r3
 80150c4:	d203      	bcs.n	80150ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80150c6:	4b14      	ldr	r3, [pc, #80]	; (8015118 <pvPortMalloc+0x17c>)
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	4a15      	ldr	r2, [pc, #84]	; (8015120 <pvPortMalloc+0x184>)
 80150cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80150ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150d0:	685a      	ldr	r2, [r3, #4]
 80150d2:	4b10      	ldr	r3, [pc, #64]	; (8015114 <pvPortMalloc+0x178>)
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	431a      	orrs	r2, r3
 80150d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80150dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150de:	2200      	movs	r2, #0
 80150e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80150e2:	f7fe ff83 	bl	8013fec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80150e6:	69fb      	ldr	r3, [r7, #28]
 80150e8:	f003 0307 	and.w	r3, r3, #7
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d00a      	beq.n	8015106 <pvPortMalloc+0x16a>
	__asm volatile
 80150f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150f4:	f383 8811 	msr	BASEPRI, r3
 80150f8:	f3bf 8f6f 	isb	sy
 80150fc:	f3bf 8f4f 	dsb	sy
 8015100:	60fb      	str	r3, [r7, #12]
}
 8015102:	bf00      	nop
 8015104:	e7fe      	b.n	8015104 <pvPortMalloc+0x168>
	return pvReturn;
 8015106:	69fb      	ldr	r3, [r7, #28]
}
 8015108:	4618      	mov	r0, r3
 801510a:	3728      	adds	r7, #40	; 0x28
 801510c:	46bd      	mov	sp, r7
 801510e:	bd80      	pop	{r7, pc}
 8015110:	20009484 	.word	0x20009484
 8015114:	20009490 	.word	0x20009490
 8015118:	20009488 	.word	0x20009488
 801511c:	2000947c 	.word	0x2000947c
 8015120:	2000948c 	.word	0x2000948c

08015124 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b086      	sub	sp, #24
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d048      	beq.n	80151c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015136:	2308      	movs	r3, #8
 8015138:	425b      	negs	r3, r3
 801513a:	697a      	ldr	r2, [r7, #20]
 801513c:	4413      	add	r3, r2
 801513e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015140:	697b      	ldr	r3, [r7, #20]
 8015142:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015144:	693b      	ldr	r3, [r7, #16]
 8015146:	685a      	ldr	r2, [r3, #4]
 8015148:	4b21      	ldr	r3, [pc, #132]	; (80151d0 <vPortFree+0xac>)
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	4013      	ands	r3, r2
 801514e:	2b00      	cmp	r3, #0
 8015150:	d10a      	bne.n	8015168 <vPortFree+0x44>
	__asm volatile
 8015152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015156:	f383 8811 	msr	BASEPRI, r3
 801515a:	f3bf 8f6f 	isb	sy
 801515e:	f3bf 8f4f 	dsb	sy
 8015162:	60fb      	str	r3, [r7, #12]
}
 8015164:	bf00      	nop
 8015166:	e7fe      	b.n	8015166 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015168:	693b      	ldr	r3, [r7, #16]
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d00a      	beq.n	8015186 <vPortFree+0x62>
	__asm volatile
 8015170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015174:	f383 8811 	msr	BASEPRI, r3
 8015178:	f3bf 8f6f 	isb	sy
 801517c:	f3bf 8f4f 	dsb	sy
 8015180:	60bb      	str	r3, [r7, #8]
}
 8015182:	bf00      	nop
 8015184:	e7fe      	b.n	8015184 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015186:	693b      	ldr	r3, [r7, #16]
 8015188:	685a      	ldr	r2, [r3, #4]
 801518a:	4b11      	ldr	r3, [pc, #68]	; (80151d0 <vPortFree+0xac>)
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	4013      	ands	r3, r2
 8015190:	2b00      	cmp	r3, #0
 8015192:	d019      	beq.n	80151c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015194:	693b      	ldr	r3, [r7, #16]
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d115      	bne.n	80151c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801519c:	693b      	ldr	r3, [r7, #16]
 801519e:	685a      	ldr	r2, [r3, #4]
 80151a0:	4b0b      	ldr	r3, [pc, #44]	; (80151d0 <vPortFree+0xac>)
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	43db      	mvns	r3, r3
 80151a6:	401a      	ands	r2, r3
 80151a8:	693b      	ldr	r3, [r7, #16]
 80151aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80151ac:	f7fe ff10 	bl	8013fd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80151b0:	693b      	ldr	r3, [r7, #16]
 80151b2:	685a      	ldr	r2, [r3, #4]
 80151b4:	4b07      	ldr	r3, [pc, #28]	; (80151d4 <vPortFree+0xb0>)
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	4413      	add	r3, r2
 80151ba:	4a06      	ldr	r2, [pc, #24]	; (80151d4 <vPortFree+0xb0>)
 80151bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80151be:	6938      	ldr	r0, [r7, #16]
 80151c0:	f000 f86c 	bl	801529c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80151c4:	f7fe ff12 	bl	8013fec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80151c8:	bf00      	nop
 80151ca:	3718      	adds	r7, #24
 80151cc:	46bd      	mov	sp, r7
 80151ce:	bd80      	pop	{r7, pc}
 80151d0:	20009490 	.word	0x20009490
 80151d4:	20009488 	.word	0x20009488

080151d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80151d8:	b480      	push	{r7}
 80151da:	b085      	sub	sp, #20
 80151dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80151de:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80151e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80151e4:	4b27      	ldr	r3, [pc, #156]	; (8015284 <prvHeapInit+0xac>)
 80151e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	f003 0307 	and.w	r3, r3, #7
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d00c      	beq.n	801520c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	3307      	adds	r3, #7
 80151f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	f023 0307 	bic.w	r3, r3, #7
 80151fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015200:	68ba      	ldr	r2, [r7, #8]
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	1ad3      	subs	r3, r2, r3
 8015206:	4a1f      	ldr	r2, [pc, #124]	; (8015284 <prvHeapInit+0xac>)
 8015208:	4413      	add	r3, r2
 801520a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015210:	4a1d      	ldr	r2, [pc, #116]	; (8015288 <prvHeapInit+0xb0>)
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015216:	4b1c      	ldr	r3, [pc, #112]	; (8015288 <prvHeapInit+0xb0>)
 8015218:	2200      	movs	r2, #0
 801521a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	68ba      	ldr	r2, [r7, #8]
 8015220:	4413      	add	r3, r2
 8015222:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015224:	2208      	movs	r2, #8
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	1a9b      	subs	r3, r3, r2
 801522a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	f023 0307 	bic.w	r3, r3, #7
 8015232:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	4a15      	ldr	r2, [pc, #84]	; (801528c <prvHeapInit+0xb4>)
 8015238:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801523a:	4b14      	ldr	r3, [pc, #80]	; (801528c <prvHeapInit+0xb4>)
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	2200      	movs	r2, #0
 8015240:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015242:	4b12      	ldr	r3, [pc, #72]	; (801528c <prvHeapInit+0xb4>)
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	2200      	movs	r2, #0
 8015248:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801524e:	683b      	ldr	r3, [r7, #0]
 8015250:	68fa      	ldr	r2, [r7, #12]
 8015252:	1ad2      	subs	r2, r2, r3
 8015254:	683b      	ldr	r3, [r7, #0]
 8015256:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015258:	4b0c      	ldr	r3, [pc, #48]	; (801528c <prvHeapInit+0xb4>)
 801525a:	681a      	ldr	r2, [r3, #0]
 801525c:	683b      	ldr	r3, [r7, #0]
 801525e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015260:	683b      	ldr	r3, [r7, #0]
 8015262:	685b      	ldr	r3, [r3, #4]
 8015264:	4a0a      	ldr	r2, [pc, #40]	; (8015290 <prvHeapInit+0xb8>)
 8015266:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015268:	683b      	ldr	r3, [r7, #0]
 801526a:	685b      	ldr	r3, [r3, #4]
 801526c:	4a09      	ldr	r2, [pc, #36]	; (8015294 <prvHeapInit+0xbc>)
 801526e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015270:	4b09      	ldr	r3, [pc, #36]	; (8015298 <prvHeapInit+0xc0>)
 8015272:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015276:	601a      	str	r2, [r3, #0]
}
 8015278:	bf00      	nop
 801527a:	3714      	adds	r7, #20
 801527c:	46bd      	mov	sp, r7
 801527e:	bc80      	pop	{r7}
 8015280:	4770      	bx	lr
 8015282:	bf00      	nop
 8015284:	2000587c 	.word	0x2000587c
 8015288:	2000947c 	.word	0x2000947c
 801528c:	20009484 	.word	0x20009484
 8015290:	2000948c 	.word	0x2000948c
 8015294:	20009488 	.word	0x20009488
 8015298:	20009490 	.word	0x20009490

0801529c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801529c:	b480      	push	{r7}
 801529e:	b085      	sub	sp, #20
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80152a4:	4b27      	ldr	r3, [pc, #156]	; (8015344 <prvInsertBlockIntoFreeList+0xa8>)
 80152a6:	60fb      	str	r3, [r7, #12]
 80152a8:	e002      	b.n	80152b0 <prvInsertBlockIntoFreeList+0x14>
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	60fb      	str	r3, [r7, #12]
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	687a      	ldr	r2, [r7, #4]
 80152b6:	429a      	cmp	r2, r3
 80152b8:	d8f7      	bhi.n	80152aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	685b      	ldr	r3, [r3, #4]
 80152c2:	68ba      	ldr	r2, [r7, #8]
 80152c4:	4413      	add	r3, r2
 80152c6:	687a      	ldr	r2, [r7, #4]
 80152c8:	429a      	cmp	r2, r3
 80152ca:	d108      	bne.n	80152de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	685a      	ldr	r2, [r3, #4]
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	685b      	ldr	r3, [r3, #4]
 80152d4:	441a      	add	r2, r3
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	685b      	ldr	r3, [r3, #4]
 80152e6:	68ba      	ldr	r2, [r7, #8]
 80152e8:	441a      	add	r2, r3
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	429a      	cmp	r2, r3
 80152f0:	d118      	bne.n	8015324 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	681a      	ldr	r2, [r3, #0]
 80152f6:	4b14      	ldr	r3, [pc, #80]	; (8015348 <prvInsertBlockIntoFreeList+0xac>)
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	429a      	cmp	r2, r3
 80152fc:	d00d      	beq.n	801531a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	685a      	ldr	r2, [r3, #4]
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	685b      	ldr	r3, [r3, #4]
 8015308:	441a      	add	r2, r3
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	681a      	ldr	r2, [r3, #0]
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	601a      	str	r2, [r3, #0]
 8015318:	e008      	b.n	801532c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801531a:	4b0b      	ldr	r3, [pc, #44]	; (8015348 <prvInsertBlockIntoFreeList+0xac>)
 801531c:	681a      	ldr	r2, [r3, #0]
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	601a      	str	r2, [r3, #0]
 8015322:	e003      	b.n	801532c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	681a      	ldr	r2, [r3, #0]
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801532c:	68fa      	ldr	r2, [r7, #12]
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	429a      	cmp	r2, r3
 8015332:	d002      	beq.n	801533a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	687a      	ldr	r2, [r7, #4]
 8015338:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801533a:	bf00      	nop
 801533c:	3714      	adds	r7, #20
 801533e:	46bd      	mov	sp, r7
 8015340:	bc80      	pop	{r7}
 8015342:	4770      	bx	lr
 8015344:	2000947c 	.word	0x2000947c
 8015348:	20009484 	.word	0x20009484

0801534c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8015350:	2201      	movs	r2, #1
 8015352:	490e      	ldr	r1, [pc, #56]	; (801538c <MX_USB_HOST_Init+0x40>)
 8015354:	480e      	ldr	r0, [pc, #56]	; (8015390 <MX_USB_HOST_Init+0x44>)
 8015356:	f7f8 fc97 	bl	800dc88 <USBH_Init>
 801535a:	4603      	mov	r3, r0
 801535c:	2b00      	cmp	r3, #0
 801535e:	d001      	beq.n	8015364 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8015360:	f7ef f94e 	bl	8004600 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8015364:	490b      	ldr	r1, [pc, #44]	; (8015394 <MX_USB_HOST_Init+0x48>)
 8015366:	480a      	ldr	r0, [pc, #40]	; (8015390 <MX_USB_HOST_Init+0x44>)
 8015368:	f7f8 fd3a 	bl	800dde0 <USBH_RegisterClass>
 801536c:	4603      	mov	r3, r0
 801536e:	2b00      	cmp	r3, #0
 8015370:	d001      	beq.n	8015376 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8015372:	f7ef f945 	bl	8004600 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8015376:	4806      	ldr	r0, [pc, #24]	; (8015390 <MX_USB_HOST_Init+0x44>)
 8015378:	f7f8 fdbc 	bl	800def4 <USBH_Start>
 801537c:	4603      	mov	r3, r0
 801537e:	2b00      	cmp	r3, #0
 8015380:	d001      	beq.n	8015386 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8015382:	f7ef f93d 	bl	8004600 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8015386:	bf00      	nop
 8015388:	bd80      	pop	{r7, pc}
 801538a:	bf00      	nop
 801538c:	08015399 	.word	0x08015399
 8015390:	2000ddd0 	.word	0x2000ddd0
 8015394:	2000022c 	.word	0x2000022c

08015398 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b082      	sub	sp, #8
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
 80153a0:	460b      	mov	r3, r1
 80153a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80153a4:	78fb      	ldrb	r3, [r7, #3]
 80153a6:	3b01      	subs	r3, #1
 80153a8:	2b04      	cmp	r3, #4
 80153aa:	d828      	bhi.n	80153fe <USBH_UserProcess+0x66>
 80153ac:	a201      	add	r2, pc, #4	; (adr r2, 80153b4 <USBH_UserProcess+0x1c>)
 80153ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153b2:	bf00      	nop
 80153b4:	080153ff 	.word	0x080153ff
 80153b8:	080153db 	.word	0x080153db
 80153bc:	080153ff 	.word	0x080153ff
 80153c0:	080153f7 	.word	0x080153f7
 80153c4:	080153c9 	.word	0x080153c9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80153c8:	4b0f      	ldr	r3, [pc, #60]	; (8015408 <USBH_UserProcess+0x70>)
 80153ca:	2203      	movs	r2, #3
 80153cc:	701a      	strb	r2, [r3, #0]
  usb_good = 0;
 80153ce:	4b0f      	ldr	r3, [pc, #60]	; (801540c <USBH_UserProcess+0x74>)
 80153d0:	2200      	movs	r2, #0
 80153d2:	601a      	str	r2, [r3, #0]
  Unmount_USB();
 80153d4:	f7eb fdda 	bl	8000f8c <Unmount_USB>
  break;
 80153d8:	e012      	b.n	8015400 <USBH_UserProcess+0x68>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80153da:	4b0b      	ldr	r3, [pc, #44]	; (8015408 <USBH_UserProcess+0x70>)
 80153dc:	2202      	movs	r2, #2
 80153de:	701a      	strb	r2, [r3, #0]
	Mount_USB();
 80153e0:	f7eb fdc0 	bl	8000f64 <Mount_USB>
	Check_USB_Details();
 80153e4:	f7eb fed6 	bl	8001194 <Check_USB_Details>
	Scan_USB("/");
 80153e8:	4809      	ldr	r0, [pc, #36]	; (8015410 <USBH_UserProcess+0x78>)
 80153ea:	f7eb fde1 	bl	8000fb0 <Scan_USB>

  usb_good = 1;
 80153ee:	4b07      	ldr	r3, [pc, #28]	; (801540c <USBH_UserProcess+0x74>)
 80153f0:	2201      	movs	r2, #1
 80153f2:	601a      	str	r2, [r3, #0]

  break;
 80153f4:	e004      	b.n	8015400 <USBH_UserProcess+0x68>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80153f6:	4b04      	ldr	r3, [pc, #16]	; (8015408 <USBH_UserProcess+0x70>)
 80153f8:	2201      	movs	r2, #1
 80153fa:	701a      	strb	r2, [r3, #0]
  break;
 80153fc:	e000      	b.n	8015400 <USBH_UserProcess+0x68>

  default:
  break;
 80153fe:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8015400:	bf00      	nop
 8015402:	3708      	adds	r7, #8
 8015404:	46bd      	mov	sp, r7
 8015406:	bd80      	pop	{r7, pc}
 8015408:	20009494 	.word	0x20009494
 801540c:	20009498 	.word	0x20009498
 8015410:	0801a448 	.word	0x0801a448

08015414 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b08a      	sub	sp, #40	; 0x28
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801541c:	f107 0314 	add.w	r3, r7, #20
 8015420:	2200      	movs	r2, #0
 8015422:	601a      	str	r2, [r3, #0]
 8015424:	605a      	str	r2, [r3, #4]
 8015426:	609a      	str	r2, [r3, #8]
 8015428:	60da      	str	r2, [r3, #12]
 801542a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015434:	d147      	bne.n	80154c6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015436:	2300      	movs	r3, #0
 8015438:	613b      	str	r3, [r7, #16]
 801543a:	4b25      	ldr	r3, [pc, #148]	; (80154d0 <HAL_HCD_MspInit+0xbc>)
 801543c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801543e:	4a24      	ldr	r2, [pc, #144]	; (80154d0 <HAL_HCD_MspInit+0xbc>)
 8015440:	f043 0301 	orr.w	r3, r3, #1
 8015444:	6313      	str	r3, [r2, #48]	; 0x30
 8015446:	4b22      	ldr	r3, [pc, #136]	; (80154d0 <HAL_HCD_MspInit+0xbc>)
 8015448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801544a:	f003 0301 	and.w	r3, r3, #1
 801544e:	613b      	str	r3, [r7, #16]
 8015450:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8015452:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015458:	2300      	movs	r3, #0
 801545a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801545c:	2300      	movs	r3, #0
 801545e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015460:	f107 0314 	add.w	r3, r7, #20
 8015464:	4619      	mov	r1, r3
 8015466:	481b      	ldr	r0, [pc, #108]	; (80154d4 <HAL_HCD_MspInit+0xc0>)
 8015468:	f7f1 fe5c 	bl	8007124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801546c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015472:	2302      	movs	r3, #2
 8015474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015476:	2300      	movs	r3, #0
 8015478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801547a:	2303      	movs	r3, #3
 801547c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801547e:	230a      	movs	r3, #10
 8015480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015482:	f107 0314 	add.w	r3, r7, #20
 8015486:	4619      	mov	r1, r3
 8015488:	4812      	ldr	r0, [pc, #72]	; (80154d4 <HAL_HCD_MspInit+0xc0>)
 801548a:	f7f1 fe4b 	bl	8007124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801548e:	4b10      	ldr	r3, [pc, #64]	; (80154d0 <HAL_HCD_MspInit+0xbc>)
 8015490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015492:	4a0f      	ldr	r2, [pc, #60]	; (80154d0 <HAL_HCD_MspInit+0xbc>)
 8015494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015498:	6353      	str	r3, [r2, #52]	; 0x34
 801549a:	2300      	movs	r3, #0
 801549c:	60fb      	str	r3, [r7, #12]
 801549e:	4b0c      	ldr	r3, [pc, #48]	; (80154d0 <HAL_HCD_MspInit+0xbc>)
 80154a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80154a2:	4a0b      	ldr	r2, [pc, #44]	; (80154d0 <HAL_HCD_MspInit+0xbc>)
 80154a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80154a8:	6453      	str	r3, [r2, #68]	; 0x44
 80154aa:	4b09      	ldr	r3, [pc, #36]	; (80154d0 <HAL_HCD_MspInit+0xbc>)
 80154ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80154ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80154b2:	60fb      	str	r3, [r7, #12]
 80154b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80154b6:	2200      	movs	r2, #0
 80154b8:	2105      	movs	r1, #5
 80154ba:	2043      	movs	r0, #67	; 0x43
 80154bc:	f7f1 fa9b 	bl	80069f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80154c0:	2043      	movs	r0, #67	; 0x43
 80154c2:	f7f1 fab4 	bl	8006a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80154c6:	bf00      	nop
 80154c8:	3728      	adds	r7, #40	; 0x28
 80154ca:	46bd      	mov	sp, r7
 80154cc:	bd80      	pop	{r7, pc}
 80154ce:	bf00      	nop
 80154d0:	40023800 	.word	0x40023800
 80154d4:	40020000 	.word	0x40020000

080154d8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b082      	sub	sp, #8
 80154dc:	af00      	add	r7, sp, #0
 80154de:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80154e6:	4618      	mov	r0, r3
 80154e8:	f7f9 f884 	bl	800e5f4 <USBH_LL_IncTimer>
}
 80154ec:	bf00      	nop
 80154ee:	3708      	adds	r7, #8
 80154f0:	46bd      	mov	sp, r7
 80154f2:	bd80      	pop	{r7, pc}

080154f4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b082      	sub	sp, #8
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015502:	4618      	mov	r0, r3
 8015504:	f7f9 f8c7 	bl	800e696 <USBH_LL_Connect>
}
 8015508:	bf00      	nop
 801550a:	3708      	adds	r7, #8
 801550c:	46bd      	mov	sp, r7
 801550e:	bd80      	pop	{r7, pc}

08015510 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b082      	sub	sp, #8
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801551e:	4618      	mov	r0, r3
 8015520:	f7f9 f8dc 	bl	800e6dc <USBH_LL_Disconnect>
}
 8015524:	bf00      	nop
 8015526:	3708      	adds	r7, #8
 8015528:	46bd      	mov	sp, r7
 801552a:	bd80      	pop	{r7, pc}

0801552c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b082      	sub	sp, #8
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
 8015534:	460b      	mov	r3, r1
 8015536:	70fb      	strb	r3, [r7, #3]
 8015538:	4613      	mov	r3, r2
 801553a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015542:	4618      	mov	r0, r3
 8015544:	f7f9 f911 	bl	800e76a <USBH_LL_NotifyURBChange>
#endif
}
 8015548:	bf00      	nop
 801554a:	3708      	adds	r7, #8
 801554c:	46bd      	mov	sp, r7
 801554e:	bd80      	pop	{r7, pc}

08015550 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015550:	b580      	push	{r7, lr}
 8015552:	b082      	sub	sp, #8
 8015554:	af00      	add	r7, sp, #0
 8015556:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801555e:	4618      	mov	r0, r3
 8015560:	f7f9 f872 	bl	800e648 <USBH_LL_PortEnabled>
}
 8015564:	bf00      	nop
 8015566:	3708      	adds	r7, #8
 8015568:	46bd      	mov	sp, r7
 801556a:	bd80      	pop	{r7, pc}

0801556c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801556c:	b580      	push	{r7, lr}
 801556e:	b082      	sub	sp, #8
 8015570:	af00      	add	r7, sp, #0
 8015572:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801557a:	4618      	mov	r0, r3
 801557c:	f7f9 f87e 	bl	800e67c <USBH_LL_PortDisabled>
}
 8015580:	bf00      	nop
 8015582:	3708      	adds	r7, #8
 8015584:	46bd      	mov	sp, r7
 8015586:	bd80      	pop	{r7, pc}

08015588 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8015588:	b580      	push	{r7, lr}
 801558a:	b082      	sub	sp, #8
 801558c:	af00      	add	r7, sp, #0
 801558e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8015596:	2b01      	cmp	r3, #1
 8015598:	d12a      	bne.n	80155f0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801559a:	4a18      	ldr	r2, [pc, #96]	; (80155fc <USBH_LL_Init+0x74>)
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	4a15      	ldr	r2, [pc, #84]	; (80155fc <USBH_LL_Init+0x74>)
 80155a6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80155aa:	4b14      	ldr	r3, [pc, #80]	; (80155fc <USBH_LL_Init+0x74>)
 80155ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80155b0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80155b2:	4b12      	ldr	r3, [pc, #72]	; (80155fc <USBH_LL_Init+0x74>)
 80155b4:	2208      	movs	r2, #8
 80155b6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80155b8:	4b10      	ldr	r3, [pc, #64]	; (80155fc <USBH_LL_Init+0x74>)
 80155ba:	2201      	movs	r2, #1
 80155bc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80155be:	4b0f      	ldr	r3, [pc, #60]	; (80155fc <USBH_LL_Init+0x74>)
 80155c0:	2200      	movs	r2, #0
 80155c2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80155c4:	4b0d      	ldr	r3, [pc, #52]	; (80155fc <USBH_LL_Init+0x74>)
 80155c6:	2202      	movs	r2, #2
 80155c8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80155ca:	4b0c      	ldr	r3, [pc, #48]	; (80155fc <USBH_LL_Init+0x74>)
 80155cc:	2200      	movs	r2, #0
 80155ce:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80155d0:	480a      	ldr	r0, [pc, #40]	; (80155fc <USBH_LL_Init+0x74>)
 80155d2:	f7f1 ff8d 	bl	80074f0 <HAL_HCD_Init>
 80155d6:	4603      	mov	r3, r0
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d001      	beq.n	80155e0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80155dc:	f7ef f810 	bl	8004600 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80155e0:	4806      	ldr	r0, [pc, #24]	; (80155fc <USBH_LL_Init+0x74>)
 80155e2:	f7f2 fb67 	bl	8007cb4 <HAL_HCD_GetCurrentFrame>
 80155e6:	4603      	mov	r3, r0
 80155e8:	4619      	mov	r1, r3
 80155ea:	6878      	ldr	r0, [r7, #4]
 80155ec:	f7f8 fff4 	bl	800e5d8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80155f0:	2300      	movs	r3, #0
}
 80155f2:	4618      	mov	r0, r3
 80155f4:	3708      	adds	r7, #8
 80155f6:	46bd      	mov	sp, r7
 80155f8:	bd80      	pop	{r7, pc}
 80155fa:	bf00      	nop
 80155fc:	2000e1ac 	.word	0x2000e1ac

08015600 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8015600:	b580      	push	{r7, lr}
 8015602:	b084      	sub	sp, #16
 8015604:	af00      	add	r7, sp, #0
 8015606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015608:	2300      	movs	r3, #0
 801560a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801560c:	2300      	movs	r3, #0
 801560e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8015616:	4618      	mov	r0, r3
 8015618:	f7f2 fad8 	bl	8007bcc <HAL_HCD_Start>
 801561c:	4603      	mov	r3, r0
 801561e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015620:	7bfb      	ldrb	r3, [r7, #15]
 8015622:	4618      	mov	r0, r3
 8015624:	f000 f98a 	bl	801593c <USBH_Get_USB_Status>
 8015628:	4603      	mov	r3, r0
 801562a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801562c:	7bbb      	ldrb	r3, [r7, #14]
}
 801562e:	4618      	mov	r0, r3
 8015630:	3710      	adds	r7, #16
 8015632:	46bd      	mov	sp, r7
 8015634:	bd80      	pop	{r7, pc}

08015636 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8015636:	b580      	push	{r7, lr}
 8015638:	b084      	sub	sp, #16
 801563a:	af00      	add	r7, sp, #0
 801563c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801563e:	2300      	movs	r3, #0
 8015640:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015642:	2300      	movs	r3, #0
 8015644:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801564c:	4618      	mov	r0, r3
 801564e:	f7f2 fae0 	bl	8007c12 <HAL_HCD_Stop>
 8015652:	4603      	mov	r3, r0
 8015654:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015656:	7bfb      	ldrb	r3, [r7, #15]
 8015658:	4618      	mov	r0, r3
 801565a:	f000 f96f 	bl	801593c <USBH_Get_USB_Status>
 801565e:	4603      	mov	r3, r0
 8015660:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015662:	7bbb      	ldrb	r3, [r7, #14]
}
 8015664:	4618      	mov	r0, r3
 8015666:	3710      	adds	r7, #16
 8015668:	46bd      	mov	sp, r7
 801566a:	bd80      	pop	{r7, pc}

0801566c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801566c:	b580      	push	{r7, lr}
 801566e:	b084      	sub	sp, #16
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8015674:	2301      	movs	r3, #1
 8015676:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801567e:	4618      	mov	r0, r3
 8015680:	f7f2 fb26 	bl	8007cd0 <HAL_HCD_GetCurrentSpeed>
 8015684:	4603      	mov	r3, r0
 8015686:	2b02      	cmp	r3, #2
 8015688:	d00c      	beq.n	80156a4 <USBH_LL_GetSpeed+0x38>
 801568a:	2b02      	cmp	r3, #2
 801568c:	d80d      	bhi.n	80156aa <USBH_LL_GetSpeed+0x3e>
 801568e:	2b00      	cmp	r3, #0
 8015690:	d002      	beq.n	8015698 <USBH_LL_GetSpeed+0x2c>
 8015692:	2b01      	cmp	r3, #1
 8015694:	d003      	beq.n	801569e <USBH_LL_GetSpeed+0x32>
 8015696:	e008      	b.n	80156aa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8015698:	2300      	movs	r3, #0
 801569a:	73fb      	strb	r3, [r7, #15]
    break;
 801569c:	e008      	b.n	80156b0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801569e:	2301      	movs	r3, #1
 80156a0:	73fb      	strb	r3, [r7, #15]
    break;
 80156a2:	e005      	b.n	80156b0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80156a4:	2302      	movs	r3, #2
 80156a6:	73fb      	strb	r3, [r7, #15]
    break;
 80156a8:	e002      	b.n	80156b0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80156aa:	2301      	movs	r3, #1
 80156ac:	73fb      	strb	r3, [r7, #15]
    break;
 80156ae:	bf00      	nop
  }
  return  speed;
 80156b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80156b2:	4618      	mov	r0, r3
 80156b4:	3710      	adds	r7, #16
 80156b6:	46bd      	mov	sp, r7
 80156b8:	bd80      	pop	{r7, pc}

080156ba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80156ba:	b580      	push	{r7, lr}
 80156bc:	b084      	sub	sp, #16
 80156be:	af00      	add	r7, sp, #0
 80156c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80156c2:	2300      	movs	r3, #0
 80156c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80156c6:	2300      	movs	r3, #0
 80156c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80156d0:	4618      	mov	r0, r3
 80156d2:	f7f2 fabb 	bl	8007c4c <HAL_HCD_ResetPort>
 80156d6:	4603      	mov	r3, r0
 80156d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80156da:	7bfb      	ldrb	r3, [r7, #15]
 80156dc:	4618      	mov	r0, r3
 80156de:	f000 f92d 	bl	801593c <USBH_Get_USB_Status>
 80156e2:	4603      	mov	r3, r0
 80156e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80156e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80156e8:	4618      	mov	r0, r3
 80156ea:	3710      	adds	r7, #16
 80156ec:	46bd      	mov	sp, r7
 80156ee:	bd80      	pop	{r7, pc}

080156f0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b082      	sub	sp, #8
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	6078      	str	r0, [r7, #4]
 80156f8:	460b      	mov	r3, r1
 80156fa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8015702:	78fa      	ldrb	r2, [r7, #3]
 8015704:	4611      	mov	r1, r2
 8015706:	4618      	mov	r0, r3
 8015708:	f7f2 fac1 	bl	8007c8e <HAL_HCD_HC_GetXferCount>
 801570c:	4603      	mov	r3, r0
}
 801570e:	4618      	mov	r0, r3
 8015710:	3708      	adds	r7, #8
 8015712:	46bd      	mov	sp, r7
 8015714:	bd80      	pop	{r7, pc}

08015716 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8015716:	b590      	push	{r4, r7, lr}
 8015718:	b089      	sub	sp, #36	; 0x24
 801571a:	af04      	add	r7, sp, #16
 801571c:	6078      	str	r0, [r7, #4]
 801571e:	4608      	mov	r0, r1
 8015720:	4611      	mov	r1, r2
 8015722:	461a      	mov	r2, r3
 8015724:	4603      	mov	r3, r0
 8015726:	70fb      	strb	r3, [r7, #3]
 8015728:	460b      	mov	r3, r1
 801572a:	70bb      	strb	r3, [r7, #2]
 801572c:	4613      	mov	r3, r2
 801572e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015730:	2300      	movs	r3, #0
 8015732:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015734:	2300      	movs	r3, #0
 8015736:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 801573e:	787c      	ldrb	r4, [r7, #1]
 8015740:	78ba      	ldrb	r2, [r7, #2]
 8015742:	78f9      	ldrb	r1, [r7, #3]
 8015744:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015746:	9302      	str	r3, [sp, #8]
 8015748:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801574c:	9301      	str	r3, [sp, #4]
 801574e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015752:	9300      	str	r3, [sp, #0]
 8015754:	4623      	mov	r3, r4
 8015756:	f7f1 ff2d 	bl	80075b4 <HAL_HCD_HC_Init>
 801575a:	4603      	mov	r3, r0
 801575c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801575e:	7bfb      	ldrb	r3, [r7, #15]
 8015760:	4618      	mov	r0, r3
 8015762:	f000 f8eb 	bl	801593c <USBH_Get_USB_Status>
 8015766:	4603      	mov	r3, r0
 8015768:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801576a:	7bbb      	ldrb	r3, [r7, #14]
}
 801576c:	4618      	mov	r0, r3
 801576e:	3714      	adds	r7, #20
 8015770:	46bd      	mov	sp, r7
 8015772:	bd90      	pop	{r4, r7, pc}

08015774 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b084      	sub	sp, #16
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
 801577c:	460b      	mov	r3, r1
 801577e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015780:	2300      	movs	r3, #0
 8015782:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015784:	2300      	movs	r3, #0
 8015786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801578e:	78fa      	ldrb	r2, [r7, #3]
 8015790:	4611      	mov	r1, r2
 8015792:	4618      	mov	r0, r3
 8015794:	f7f1 ff9d 	bl	80076d2 <HAL_HCD_HC_Halt>
 8015798:	4603      	mov	r3, r0
 801579a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801579c:	7bfb      	ldrb	r3, [r7, #15]
 801579e:	4618      	mov	r0, r3
 80157a0:	f000 f8cc 	bl	801593c <USBH_Get_USB_Status>
 80157a4:	4603      	mov	r3, r0
 80157a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80157a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80157aa:	4618      	mov	r0, r3
 80157ac:	3710      	adds	r7, #16
 80157ae:	46bd      	mov	sp, r7
 80157b0:	bd80      	pop	{r7, pc}

080157b2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80157b2:	b590      	push	{r4, r7, lr}
 80157b4:	b089      	sub	sp, #36	; 0x24
 80157b6:	af04      	add	r7, sp, #16
 80157b8:	6078      	str	r0, [r7, #4]
 80157ba:	4608      	mov	r0, r1
 80157bc:	4611      	mov	r1, r2
 80157be:	461a      	mov	r2, r3
 80157c0:	4603      	mov	r3, r0
 80157c2:	70fb      	strb	r3, [r7, #3]
 80157c4:	460b      	mov	r3, r1
 80157c6:	70bb      	strb	r3, [r7, #2]
 80157c8:	4613      	mov	r3, r2
 80157ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157cc:	2300      	movs	r3, #0
 80157ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80157d0:	2300      	movs	r3, #0
 80157d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 80157da:	787c      	ldrb	r4, [r7, #1]
 80157dc:	78ba      	ldrb	r2, [r7, #2]
 80157de:	78f9      	ldrb	r1, [r7, #3]
 80157e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80157e4:	9303      	str	r3, [sp, #12]
 80157e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80157e8:	9302      	str	r3, [sp, #8]
 80157ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157ec:	9301      	str	r3, [sp, #4]
 80157ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80157f2:	9300      	str	r3, [sp, #0]
 80157f4:	4623      	mov	r3, r4
 80157f6:	f7f1 ff8f 	bl	8007718 <HAL_HCD_HC_SubmitRequest>
 80157fa:	4603      	mov	r3, r0
 80157fc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80157fe:	7bfb      	ldrb	r3, [r7, #15]
 8015800:	4618      	mov	r0, r3
 8015802:	f000 f89b 	bl	801593c <USBH_Get_USB_Status>
 8015806:	4603      	mov	r3, r0
 8015808:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801580a:	7bbb      	ldrb	r3, [r7, #14]
}
 801580c:	4618      	mov	r0, r3
 801580e:	3714      	adds	r7, #20
 8015810:	46bd      	mov	sp, r7
 8015812:	bd90      	pop	{r4, r7, pc}

08015814 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015814:	b580      	push	{r7, lr}
 8015816:	b082      	sub	sp, #8
 8015818:	af00      	add	r7, sp, #0
 801581a:	6078      	str	r0, [r7, #4]
 801581c:	460b      	mov	r3, r1
 801581e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8015826:	78fa      	ldrb	r2, [r7, #3]
 8015828:	4611      	mov	r1, r2
 801582a:	4618      	mov	r0, r3
 801582c:	f7f2 fa1c 	bl	8007c68 <HAL_HCD_HC_GetURBState>
 8015830:	4603      	mov	r3, r0
}
 8015832:	4618      	mov	r0, r3
 8015834:	3708      	adds	r7, #8
 8015836:	46bd      	mov	sp, r7
 8015838:	bd80      	pop	{r7, pc}

0801583a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801583a:	b580      	push	{r7, lr}
 801583c:	b082      	sub	sp, #8
 801583e:	af00      	add	r7, sp, #0
 8015840:	6078      	str	r0, [r7, #4]
 8015842:	460b      	mov	r3, r1
 8015844:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 801584c:	2b01      	cmp	r3, #1
 801584e:	d103      	bne.n	8015858 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8015850:	78fb      	ldrb	r3, [r7, #3]
 8015852:	4618      	mov	r0, r3
 8015854:	f000 f89e 	bl	8015994 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8015858:	20c8      	movs	r0, #200	; 0xc8
 801585a:	f7f0 fac3 	bl	8005de4 <HAL_Delay>
  return USBH_OK;
 801585e:	2300      	movs	r3, #0
}
 8015860:	4618      	mov	r0, r3
 8015862:	3708      	adds	r7, #8
 8015864:	46bd      	mov	sp, r7
 8015866:	bd80      	pop	{r7, pc}

08015868 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8015868:	b480      	push	{r7}
 801586a:	b085      	sub	sp, #20
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
 8015870:	460b      	mov	r3, r1
 8015872:	70fb      	strb	r3, [r7, #3]
 8015874:	4613      	mov	r3, r2
 8015876:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801587e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8015880:	78fb      	ldrb	r3, [r7, #3]
 8015882:	68fa      	ldr	r2, [r7, #12]
 8015884:	212c      	movs	r1, #44	; 0x2c
 8015886:	fb01 f303 	mul.w	r3, r1, r3
 801588a:	4413      	add	r3, r2
 801588c:	333b      	adds	r3, #59	; 0x3b
 801588e:	781b      	ldrb	r3, [r3, #0]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d009      	beq.n	80158a8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8015894:	78fb      	ldrb	r3, [r7, #3]
 8015896:	68fa      	ldr	r2, [r7, #12]
 8015898:	212c      	movs	r1, #44	; 0x2c
 801589a:	fb01 f303 	mul.w	r3, r1, r3
 801589e:	4413      	add	r3, r2
 80158a0:	3354      	adds	r3, #84	; 0x54
 80158a2:	78ba      	ldrb	r2, [r7, #2]
 80158a4:	701a      	strb	r2, [r3, #0]
 80158a6:	e008      	b.n	80158ba <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80158a8:	78fb      	ldrb	r3, [r7, #3]
 80158aa:	68fa      	ldr	r2, [r7, #12]
 80158ac:	212c      	movs	r1, #44	; 0x2c
 80158ae:	fb01 f303 	mul.w	r3, r1, r3
 80158b2:	4413      	add	r3, r2
 80158b4:	3355      	adds	r3, #85	; 0x55
 80158b6:	78ba      	ldrb	r2, [r7, #2]
 80158b8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80158ba:	2300      	movs	r3, #0
}
 80158bc:	4618      	mov	r0, r3
 80158be:	3714      	adds	r7, #20
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bc80      	pop	{r7}
 80158c4:	4770      	bx	lr

080158c6 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80158c6:	b480      	push	{r7}
 80158c8:	b085      	sub	sp, #20
 80158ca:	af00      	add	r7, sp, #0
 80158cc:	6078      	str	r0, [r7, #4]
 80158ce:	460b      	mov	r3, r1
 80158d0:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 80158d2:	2300      	movs	r3, #0
 80158d4:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80158dc:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 80158de:	78fb      	ldrb	r3, [r7, #3]
 80158e0:	68ba      	ldr	r2, [r7, #8]
 80158e2:	212c      	movs	r1, #44	; 0x2c
 80158e4:	fb01 f303 	mul.w	r3, r1, r3
 80158e8:	4413      	add	r3, r2
 80158ea:	333b      	adds	r3, #59	; 0x3b
 80158ec:	781b      	ldrb	r3, [r3, #0]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d009      	beq.n	8015906 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 80158f2:	78fb      	ldrb	r3, [r7, #3]
 80158f4:	68ba      	ldr	r2, [r7, #8]
 80158f6:	212c      	movs	r1, #44	; 0x2c
 80158f8:	fb01 f303 	mul.w	r3, r1, r3
 80158fc:	4413      	add	r3, r2
 80158fe:	3354      	adds	r3, #84	; 0x54
 8015900:	781b      	ldrb	r3, [r3, #0]
 8015902:	73fb      	strb	r3, [r7, #15]
 8015904:	e008      	b.n	8015918 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8015906:	78fb      	ldrb	r3, [r7, #3]
 8015908:	68ba      	ldr	r2, [r7, #8]
 801590a:	212c      	movs	r1, #44	; 0x2c
 801590c:	fb01 f303 	mul.w	r3, r1, r3
 8015910:	4413      	add	r3, r2
 8015912:	3355      	adds	r3, #85	; 0x55
 8015914:	781b      	ldrb	r3, [r3, #0]
 8015916:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8015918:	7bfb      	ldrb	r3, [r7, #15]
}
 801591a:	4618      	mov	r0, r3
 801591c:	3714      	adds	r7, #20
 801591e:	46bd      	mov	sp, r7
 8015920:	bc80      	pop	{r7}
 8015922:	4770      	bx	lr

08015924 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b082      	sub	sp, #8
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801592c:	6878      	ldr	r0, [r7, #4]
 801592e:	f7f0 fa59 	bl	8005de4 <HAL_Delay>
}
 8015932:	bf00      	nop
 8015934:	3708      	adds	r7, #8
 8015936:	46bd      	mov	sp, r7
 8015938:	bd80      	pop	{r7, pc}
	...

0801593c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801593c:	b480      	push	{r7}
 801593e:	b085      	sub	sp, #20
 8015940:	af00      	add	r7, sp, #0
 8015942:	4603      	mov	r3, r0
 8015944:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015946:	2300      	movs	r3, #0
 8015948:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801594a:	79fb      	ldrb	r3, [r7, #7]
 801594c:	2b03      	cmp	r3, #3
 801594e:	d817      	bhi.n	8015980 <USBH_Get_USB_Status+0x44>
 8015950:	a201      	add	r2, pc, #4	; (adr r2, 8015958 <USBH_Get_USB_Status+0x1c>)
 8015952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015956:	bf00      	nop
 8015958:	08015969 	.word	0x08015969
 801595c:	0801596f 	.word	0x0801596f
 8015960:	08015975 	.word	0x08015975
 8015964:	0801597b 	.word	0x0801597b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8015968:	2300      	movs	r3, #0
 801596a:	73fb      	strb	r3, [r7, #15]
    break;
 801596c:	e00b      	b.n	8015986 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801596e:	2302      	movs	r3, #2
 8015970:	73fb      	strb	r3, [r7, #15]
    break;
 8015972:	e008      	b.n	8015986 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8015974:	2301      	movs	r3, #1
 8015976:	73fb      	strb	r3, [r7, #15]
    break;
 8015978:	e005      	b.n	8015986 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801597a:	2302      	movs	r3, #2
 801597c:	73fb      	strb	r3, [r7, #15]
    break;
 801597e:	e002      	b.n	8015986 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8015980:	2302      	movs	r3, #2
 8015982:	73fb      	strb	r3, [r7, #15]
    break;
 8015984:	bf00      	nop
  }
  return usb_status;
 8015986:	7bfb      	ldrb	r3, [r7, #15]
}
 8015988:	4618      	mov	r0, r3
 801598a:	3714      	adds	r7, #20
 801598c:	46bd      	mov	sp, r7
 801598e:	bc80      	pop	{r7}
 8015990:	4770      	bx	lr
 8015992:	bf00      	nop

08015994 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8015994:	b580      	push	{r7, lr}
 8015996:	b084      	sub	sp, #16
 8015998:	af00      	add	r7, sp, #0
 801599a:	4603      	mov	r3, r0
 801599c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801599e:	79fb      	ldrb	r3, [r7, #7]
 80159a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80159a2:	79fb      	ldrb	r3, [r7, #7]
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d102      	bne.n	80159ae <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80159a8:	2300      	movs	r3, #0
 80159aa:	73fb      	strb	r3, [r7, #15]
 80159ac:	e001      	b.n	80159b2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80159ae:	2301      	movs	r3, #1
 80159b0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,(GPIO_PinState)data);
 80159b2:	7bfb      	ldrb	r3, [r7, #15]
 80159b4:	461a      	mov	r2, r3
 80159b6:	2104      	movs	r1, #4
 80159b8:	4803      	ldr	r0, [pc, #12]	; (80159c8 <MX_DriverVbusFS+0x34>)
 80159ba:	f7f1 fd68 	bl	800748e <HAL_GPIO_WritePin>
}
 80159be:	bf00      	nop
 80159c0:	3710      	adds	r7, #16
 80159c2:	46bd      	mov	sp, r7
 80159c4:	bd80      	pop	{r7, pc}
 80159c6:	bf00      	nop
 80159c8:	40020800 	.word	0x40020800

080159cc <__errno>:
 80159cc:	4b01      	ldr	r3, [pc, #4]	; (80159d4 <__errno+0x8>)
 80159ce:	6818      	ldr	r0, [r3, #0]
 80159d0:	4770      	bx	lr
 80159d2:	bf00      	nop
 80159d4:	20000250 	.word	0x20000250

080159d8 <std>:
 80159d8:	2300      	movs	r3, #0
 80159da:	b510      	push	{r4, lr}
 80159dc:	4604      	mov	r4, r0
 80159de:	e9c0 3300 	strd	r3, r3, [r0]
 80159e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80159e6:	6083      	str	r3, [r0, #8]
 80159e8:	8181      	strh	r1, [r0, #12]
 80159ea:	6643      	str	r3, [r0, #100]	; 0x64
 80159ec:	81c2      	strh	r2, [r0, #14]
 80159ee:	6183      	str	r3, [r0, #24]
 80159f0:	4619      	mov	r1, r3
 80159f2:	2208      	movs	r2, #8
 80159f4:	305c      	adds	r0, #92	; 0x5c
 80159f6:	f000 f92b 	bl	8015c50 <memset>
 80159fa:	4b05      	ldr	r3, [pc, #20]	; (8015a10 <std+0x38>)
 80159fc:	6224      	str	r4, [r4, #32]
 80159fe:	6263      	str	r3, [r4, #36]	; 0x24
 8015a00:	4b04      	ldr	r3, [pc, #16]	; (8015a14 <std+0x3c>)
 8015a02:	62a3      	str	r3, [r4, #40]	; 0x28
 8015a04:	4b04      	ldr	r3, [pc, #16]	; (8015a18 <std+0x40>)
 8015a06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015a08:	4b04      	ldr	r3, [pc, #16]	; (8015a1c <std+0x44>)
 8015a0a:	6323      	str	r3, [r4, #48]	; 0x30
 8015a0c:	bd10      	pop	{r4, pc}
 8015a0e:	bf00      	nop
 8015a10:	08016bcd 	.word	0x08016bcd
 8015a14:	08016bef 	.word	0x08016bef
 8015a18:	08016c27 	.word	0x08016c27
 8015a1c:	08016c4b 	.word	0x08016c4b

08015a20 <_cleanup_r>:
 8015a20:	4901      	ldr	r1, [pc, #4]	; (8015a28 <_cleanup_r+0x8>)
 8015a22:	f000 b8af 	b.w	8015b84 <_fwalk_reent>
 8015a26:	bf00      	nop
 8015a28:	080187e9 	.word	0x080187e9

08015a2c <__sfmoreglue>:
 8015a2c:	b570      	push	{r4, r5, r6, lr}
 8015a2e:	2568      	movs	r5, #104	; 0x68
 8015a30:	1e4a      	subs	r2, r1, #1
 8015a32:	4355      	muls	r5, r2
 8015a34:	460e      	mov	r6, r1
 8015a36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015a3a:	f000 f95d 	bl	8015cf8 <_malloc_r>
 8015a3e:	4604      	mov	r4, r0
 8015a40:	b140      	cbz	r0, 8015a54 <__sfmoreglue+0x28>
 8015a42:	2100      	movs	r1, #0
 8015a44:	e9c0 1600 	strd	r1, r6, [r0]
 8015a48:	300c      	adds	r0, #12
 8015a4a:	60a0      	str	r0, [r4, #8]
 8015a4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015a50:	f000 f8fe 	bl	8015c50 <memset>
 8015a54:	4620      	mov	r0, r4
 8015a56:	bd70      	pop	{r4, r5, r6, pc}

08015a58 <__sfp_lock_acquire>:
 8015a58:	4801      	ldr	r0, [pc, #4]	; (8015a60 <__sfp_lock_acquire+0x8>)
 8015a5a:	f000 b8d8 	b.w	8015c0e <__retarget_lock_acquire_recursive>
 8015a5e:	bf00      	nop
 8015a60:	2000e4b8 	.word	0x2000e4b8

08015a64 <__sfp_lock_release>:
 8015a64:	4801      	ldr	r0, [pc, #4]	; (8015a6c <__sfp_lock_release+0x8>)
 8015a66:	f000 b8d3 	b.w	8015c10 <__retarget_lock_release_recursive>
 8015a6a:	bf00      	nop
 8015a6c:	2000e4b8 	.word	0x2000e4b8

08015a70 <__sinit_lock_acquire>:
 8015a70:	4801      	ldr	r0, [pc, #4]	; (8015a78 <__sinit_lock_acquire+0x8>)
 8015a72:	f000 b8cc 	b.w	8015c0e <__retarget_lock_acquire_recursive>
 8015a76:	bf00      	nop
 8015a78:	2000e4b3 	.word	0x2000e4b3

08015a7c <__sinit_lock_release>:
 8015a7c:	4801      	ldr	r0, [pc, #4]	; (8015a84 <__sinit_lock_release+0x8>)
 8015a7e:	f000 b8c7 	b.w	8015c10 <__retarget_lock_release_recursive>
 8015a82:	bf00      	nop
 8015a84:	2000e4b3 	.word	0x2000e4b3

08015a88 <__sinit>:
 8015a88:	b510      	push	{r4, lr}
 8015a8a:	4604      	mov	r4, r0
 8015a8c:	f7ff fff0 	bl	8015a70 <__sinit_lock_acquire>
 8015a90:	69a3      	ldr	r3, [r4, #24]
 8015a92:	b11b      	cbz	r3, 8015a9c <__sinit+0x14>
 8015a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a98:	f7ff bff0 	b.w	8015a7c <__sinit_lock_release>
 8015a9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015aa0:	6523      	str	r3, [r4, #80]	; 0x50
 8015aa2:	4b13      	ldr	r3, [pc, #76]	; (8015af0 <__sinit+0x68>)
 8015aa4:	4a13      	ldr	r2, [pc, #76]	; (8015af4 <__sinit+0x6c>)
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	62a2      	str	r2, [r4, #40]	; 0x28
 8015aaa:	42a3      	cmp	r3, r4
 8015aac:	bf08      	it	eq
 8015aae:	2301      	moveq	r3, #1
 8015ab0:	4620      	mov	r0, r4
 8015ab2:	bf08      	it	eq
 8015ab4:	61a3      	streq	r3, [r4, #24]
 8015ab6:	f000 f81f 	bl	8015af8 <__sfp>
 8015aba:	6060      	str	r0, [r4, #4]
 8015abc:	4620      	mov	r0, r4
 8015abe:	f000 f81b 	bl	8015af8 <__sfp>
 8015ac2:	60a0      	str	r0, [r4, #8]
 8015ac4:	4620      	mov	r0, r4
 8015ac6:	f000 f817 	bl	8015af8 <__sfp>
 8015aca:	2200      	movs	r2, #0
 8015acc:	2104      	movs	r1, #4
 8015ace:	60e0      	str	r0, [r4, #12]
 8015ad0:	6860      	ldr	r0, [r4, #4]
 8015ad2:	f7ff ff81 	bl	80159d8 <std>
 8015ad6:	2201      	movs	r2, #1
 8015ad8:	2109      	movs	r1, #9
 8015ada:	68a0      	ldr	r0, [r4, #8]
 8015adc:	f7ff ff7c 	bl	80159d8 <std>
 8015ae0:	2202      	movs	r2, #2
 8015ae2:	2112      	movs	r1, #18
 8015ae4:	68e0      	ldr	r0, [r4, #12]
 8015ae6:	f7ff ff77 	bl	80159d8 <std>
 8015aea:	2301      	movs	r3, #1
 8015aec:	61a3      	str	r3, [r4, #24]
 8015aee:	e7d1      	b.n	8015a94 <__sinit+0xc>
 8015af0:	0801a560 	.word	0x0801a560
 8015af4:	08015a21 	.word	0x08015a21

08015af8 <__sfp>:
 8015af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015afa:	4607      	mov	r7, r0
 8015afc:	f7ff ffac 	bl	8015a58 <__sfp_lock_acquire>
 8015b00:	4b1e      	ldr	r3, [pc, #120]	; (8015b7c <__sfp+0x84>)
 8015b02:	681e      	ldr	r6, [r3, #0]
 8015b04:	69b3      	ldr	r3, [r6, #24]
 8015b06:	b913      	cbnz	r3, 8015b0e <__sfp+0x16>
 8015b08:	4630      	mov	r0, r6
 8015b0a:	f7ff ffbd 	bl	8015a88 <__sinit>
 8015b0e:	3648      	adds	r6, #72	; 0x48
 8015b10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015b14:	3b01      	subs	r3, #1
 8015b16:	d503      	bpl.n	8015b20 <__sfp+0x28>
 8015b18:	6833      	ldr	r3, [r6, #0]
 8015b1a:	b30b      	cbz	r3, 8015b60 <__sfp+0x68>
 8015b1c:	6836      	ldr	r6, [r6, #0]
 8015b1e:	e7f7      	b.n	8015b10 <__sfp+0x18>
 8015b20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015b24:	b9d5      	cbnz	r5, 8015b5c <__sfp+0x64>
 8015b26:	4b16      	ldr	r3, [pc, #88]	; (8015b80 <__sfp+0x88>)
 8015b28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015b2c:	60e3      	str	r3, [r4, #12]
 8015b2e:	6665      	str	r5, [r4, #100]	; 0x64
 8015b30:	f000 f86c 	bl	8015c0c <__retarget_lock_init_recursive>
 8015b34:	f7ff ff96 	bl	8015a64 <__sfp_lock_release>
 8015b38:	2208      	movs	r2, #8
 8015b3a:	4629      	mov	r1, r5
 8015b3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015b40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015b44:	6025      	str	r5, [r4, #0]
 8015b46:	61a5      	str	r5, [r4, #24]
 8015b48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015b4c:	f000 f880 	bl	8015c50 <memset>
 8015b50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015b54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015b58:	4620      	mov	r0, r4
 8015b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b5c:	3468      	adds	r4, #104	; 0x68
 8015b5e:	e7d9      	b.n	8015b14 <__sfp+0x1c>
 8015b60:	2104      	movs	r1, #4
 8015b62:	4638      	mov	r0, r7
 8015b64:	f7ff ff62 	bl	8015a2c <__sfmoreglue>
 8015b68:	4604      	mov	r4, r0
 8015b6a:	6030      	str	r0, [r6, #0]
 8015b6c:	2800      	cmp	r0, #0
 8015b6e:	d1d5      	bne.n	8015b1c <__sfp+0x24>
 8015b70:	f7ff ff78 	bl	8015a64 <__sfp_lock_release>
 8015b74:	230c      	movs	r3, #12
 8015b76:	603b      	str	r3, [r7, #0]
 8015b78:	e7ee      	b.n	8015b58 <__sfp+0x60>
 8015b7a:	bf00      	nop
 8015b7c:	0801a560 	.word	0x0801a560
 8015b80:	ffff0001 	.word	0xffff0001

08015b84 <_fwalk_reent>:
 8015b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b88:	4606      	mov	r6, r0
 8015b8a:	4688      	mov	r8, r1
 8015b8c:	2700      	movs	r7, #0
 8015b8e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015b92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015b96:	f1b9 0901 	subs.w	r9, r9, #1
 8015b9a:	d505      	bpl.n	8015ba8 <_fwalk_reent+0x24>
 8015b9c:	6824      	ldr	r4, [r4, #0]
 8015b9e:	2c00      	cmp	r4, #0
 8015ba0:	d1f7      	bne.n	8015b92 <_fwalk_reent+0xe>
 8015ba2:	4638      	mov	r0, r7
 8015ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ba8:	89ab      	ldrh	r3, [r5, #12]
 8015baa:	2b01      	cmp	r3, #1
 8015bac:	d907      	bls.n	8015bbe <_fwalk_reent+0x3a>
 8015bae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015bb2:	3301      	adds	r3, #1
 8015bb4:	d003      	beq.n	8015bbe <_fwalk_reent+0x3a>
 8015bb6:	4629      	mov	r1, r5
 8015bb8:	4630      	mov	r0, r6
 8015bba:	47c0      	blx	r8
 8015bbc:	4307      	orrs	r7, r0
 8015bbe:	3568      	adds	r5, #104	; 0x68
 8015bc0:	e7e9      	b.n	8015b96 <_fwalk_reent+0x12>
	...

08015bc4 <__libc_init_array>:
 8015bc4:	b570      	push	{r4, r5, r6, lr}
 8015bc6:	2600      	movs	r6, #0
 8015bc8:	4d0c      	ldr	r5, [pc, #48]	; (8015bfc <__libc_init_array+0x38>)
 8015bca:	4c0d      	ldr	r4, [pc, #52]	; (8015c00 <__libc_init_array+0x3c>)
 8015bcc:	1b64      	subs	r4, r4, r5
 8015bce:	10a4      	asrs	r4, r4, #2
 8015bd0:	42a6      	cmp	r6, r4
 8015bd2:	d109      	bne.n	8015be8 <__libc_init_array+0x24>
 8015bd4:	f004 fba8 	bl	801a328 <_init>
 8015bd8:	2600      	movs	r6, #0
 8015bda:	4d0a      	ldr	r5, [pc, #40]	; (8015c04 <__libc_init_array+0x40>)
 8015bdc:	4c0a      	ldr	r4, [pc, #40]	; (8015c08 <__libc_init_array+0x44>)
 8015bde:	1b64      	subs	r4, r4, r5
 8015be0:	10a4      	asrs	r4, r4, #2
 8015be2:	42a6      	cmp	r6, r4
 8015be4:	d105      	bne.n	8015bf2 <__libc_init_array+0x2e>
 8015be6:	bd70      	pop	{r4, r5, r6, pc}
 8015be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8015bec:	4798      	blx	r3
 8015bee:	3601      	adds	r6, #1
 8015bf0:	e7ee      	b.n	8015bd0 <__libc_init_array+0xc>
 8015bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8015bf6:	4798      	blx	r3
 8015bf8:	3601      	adds	r6, #1
 8015bfa:	e7f2      	b.n	8015be2 <__libc_init_array+0x1e>
 8015bfc:	0801a9bc 	.word	0x0801a9bc
 8015c00:	0801a9bc 	.word	0x0801a9bc
 8015c04:	0801a9bc 	.word	0x0801a9bc
 8015c08:	0801a9c0 	.word	0x0801a9c0

08015c0c <__retarget_lock_init_recursive>:
 8015c0c:	4770      	bx	lr

08015c0e <__retarget_lock_acquire_recursive>:
 8015c0e:	4770      	bx	lr

08015c10 <__retarget_lock_release_recursive>:
 8015c10:	4770      	bx	lr
	...

08015c14 <malloc>:
 8015c14:	4b02      	ldr	r3, [pc, #8]	; (8015c20 <malloc+0xc>)
 8015c16:	4601      	mov	r1, r0
 8015c18:	6818      	ldr	r0, [r3, #0]
 8015c1a:	f000 b86d 	b.w	8015cf8 <_malloc_r>
 8015c1e:	bf00      	nop
 8015c20:	20000250 	.word	0x20000250

08015c24 <free>:
 8015c24:	4b02      	ldr	r3, [pc, #8]	; (8015c30 <free+0xc>)
 8015c26:	4601      	mov	r1, r0
 8015c28:	6818      	ldr	r0, [r3, #0]
 8015c2a:	f000 b819 	b.w	8015c60 <_free_r>
 8015c2e:	bf00      	nop
 8015c30:	20000250 	.word	0x20000250

08015c34 <memcpy>:
 8015c34:	440a      	add	r2, r1
 8015c36:	4291      	cmp	r1, r2
 8015c38:	f100 33ff 	add.w	r3, r0, #4294967295
 8015c3c:	d100      	bne.n	8015c40 <memcpy+0xc>
 8015c3e:	4770      	bx	lr
 8015c40:	b510      	push	{r4, lr}
 8015c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015c46:	4291      	cmp	r1, r2
 8015c48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015c4c:	d1f9      	bne.n	8015c42 <memcpy+0xe>
 8015c4e:	bd10      	pop	{r4, pc}

08015c50 <memset>:
 8015c50:	4603      	mov	r3, r0
 8015c52:	4402      	add	r2, r0
 8015c54:	4293      	cmp	r3, r2
 8015c56:	d100      	bne.n	8015c5a <memset+0xa>
 8015c58:	4770      	bx	lr
 8015c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8015c5e:	e7f9      	b.n	8015c54 <memset+0x4>

08015c60 <_free_r>:
 8015c60:	b538      	push	{r3, r4, r5, lr}
 8015c62:	4605      	mov	r5, r0
 8015c64:	2900      	cmp	r1, #0
 8015c66:	d043      	beq.n	8015cf0 <_free_r+0x90>
 8015c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015c6c:	1f0c      	subs	r4, r1, #4
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	bfb8      	it	lt
 8015c72:	18e4      	addlt	r4, r4, r3
 8015c74:	f003 f990 	bl	8018f98 <__malloc_lock>
 8015c78:	4a1e      	ldr	r2, [pc, #120]	; (8015cf4 <_free_r+0x94>)
 8015c7a:	6813      	ldr	r3, [r2, #0]
 8015c7c:	4610      	mov	r0, r2
 8015c7e:	b933      	cbnz	r3, 8015c8e <_free_r+0x2e>
 8015c80:	6063      	str	r3, [r4, #4]
 8015c82:	6014      	str	r4, [r2, #0]
 8015c84:	4628      	mov	r0, r5
 8015c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015c8a:	f003 b98b 	b.w	8018fa4 <__malloc_unlock>
 8015c8e:	42a3      	cmp	r3, r4
 8015c90:	d90a      	bls.n	8015ca8 <_free_r+0x48>
 8015c92:	6821      	ldr	r1, [r4, #0]
 8015c94:	1862      	adds	r2, r4, r1
 8015c96:	4293      	cmp	r3, r2
 8015c98:	bf01      	itttt	eq
 8015c9a:	681a      	ldreq	r2, [r3, #0]
 8015c9c:	685b      	ldreq	r3, [r3, #4]
 8015c9e:	1852      	addeq	r2, r2, r1
 8015ca0:	6022      	streq	r2, [r4, #0]
 8015ca2:	6063      	str	r3, [r4, #4]
 8015ca4:	6004      	str	r4, [r0, #0]
 8015ca6:	e7ed      	b.n	8015c84 <_free_r+0x24>
 8015ca8:	461a      	mov	r2, r3
 8015caa:	685b      	ldr	r3, [r3, #4]
 8015cac:	b10b      	cbz	r3, 8015cb2 <_free_r+0x52>
 8015cae:	42a3      	cmp	r3, r4
 8015cb0:	d9fa      	bls.n	8015ca8 <_free_r+0x48>
 8015cb2:	6811      	ldr	r1, [r2, #0]
 8015cb4:	1850      	adds	r0, r2, r1
 8015cb6:	42a0      	cmp	r0, r4
 8015cb8:	d10b      	bne.n	8015cd2 <_free_r+0x72>
 8015cba:	6820      	ldr	r0, [r4, #0]
 8015cbc:	4401      	add	r1, r0
 8015cbe:	1850      	adds	r0, r2, r1
 8015cc0:	4283      	cmp	r3, r0
 8015cc2:	6011      	str	r1, [r2, #0]
 8015cc4:	d1de      	bne.n	8015c84 <_free_r+0x24>
 8015cc6:	6818      	ldr	r0, [r3, #0]
 8015cc8:	685b      	ldr	r3, [r3, #4]
 8015cca:	4401      	add	r1, r0
 8015ccc:	6011      	str	r1, [r2, #0]
 8015cce:	6053      	str	r3, [r2, #4]
 8015cd0:	e7d8      	b.n	8015c84 <_free_r+0x24>
 8015cd2:	d902      	bls.n	8015cda <_free_r+0x7a>
 8015cd4:	230c      	movs	r3, #12
 8015cd6:	602b      	str	r3, [r5, #0]
 8015cd8:	e7d4      	b.n	8015c84 <_free_r+0x24>
 8015cda:	6820      	ldr	r0, [r4, #0]
 8015cdc:	1821      	adds	r1, r4, r0
 8015cde:	428b      	cmp	r3, r1
 8015ce0:	bf01      	itttt	eq
 8015ce2:	6819      	ldreq	r1, [r3, #0]
 8015ce4:	685b      	ldreq	r3, [r3, #4]
 8015ce6:	1809      	addeq	r1, r1, r0
 8015ce8:	6021      	streq	r1, [r4, #0]
 8015cea:	6063      	str	r3, [r4, #4]
 8015cec:	6054      	str	r4, [r2, #4]
 8015cee:	e7c9      	b.n	8015c84 <_free_r+0x24>
 8015cf0:	bd38      	pop	{r3, r4, r5, pc}
 8015cf2:	bf00      	nop
 8015cf4:	2000949c 	.word	0x2000949c

08015cf8 <_malloc_r>:
 8015cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cfa:	1ccd      	adds	r5, r1, #3
 8015cfc:	f025 0503 	bic.w	r5, r5, #3
 8015d00:	3508      	adds	r5, #8
 8015d02:	2d0c      	cmp	r5, #12
 8015d04:	bf38      	it	cc
 8015d06:	250c      	movcc	r5, #12
 8015d08:	2d00      	cmp	r5, #0
 8015d0a:	4606      	mov	r6, r0
 8015d0c:	db01      	blt.n	8015d12 <_malloc_r+0x1a>
 8015d0e:	42a9      	cmp	r1, r5
 8015d10:	d903      	bls.n	8015d1a <_malloc_r+0x22>
 8015d12:	230c      	movs	r3, #12
 8015d14:	6033      	str	r3, [r6, #0]
 8015d16:	2000      	movs	r0, #0
 8015d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d1a:	f003 f93d 	bl	8018f98 <__malloc_lock>
 8015d1e:	4921      	ldr	r1, [pc, #132]	; (8015da4 <_malloc_r+0xac>)
 8015d20:	680a      	ldr	r2, [r1, #0]
 8015d22:	4614      	mov	r4, r2
 8015d24:	b99c      	cbnz	r4, 8015d4e <_malloc_r+0x56>
 8015d26:	4f20      	ldr	r7, [pc, #128]	; (8015da8 <_malloc_r+0xb0>)
 8015d28:	683b      	ldr	r3, [r7, #0]
 8015d2a:	b923      	cbnz	r3, 8015d36 <_malloc_r+0x3e>
 8015d2c:	4621      	mov	r1, r4
 8015d2e:	4630      	mov	r0, r6
 8015d30:	f000 ff18 	bl	8016b64 <_sbrk_r>
 8015d34:	6038      	str	r0, [r7, #0]
 8015d36:	4629      	mov	r1, r5
 8015d38:	4630      	mov	r0, r6
 8015d3a:	f000 ff13 	bl	8016b64 <_sbrk_r>
 8015d3e:	1c43      	adds	r3, r0, #1
 8015d40:	d123      	bne.n	8015d8a <_malloc_r+0x92>
 8015d42:	230c      	movs	r3, #12
 8015d44:	4630      	mov	r0, r6
 8015d46:	6033      	str	r3, [r6, #0]
 8015d48:	f003 f92c 	bl	8018fa4 <__malloc_unlock>
 8015d4c:	e7e3      	b.n	8015d16 <_malloc_r+0x1e>
 8015d4e:	6823      	ldr	r3, [r4, #0]
 8015d50:	1b5b      	subs	r3, r3, r5
 8015d52:	d417      	bmi.n	8015d84 <_malloc_r+0x8c>
 8015d54:	2b0b      	cmp	r3, #11
 8015d56:	d903      	bls.n	8015d60 <_malloc_r+0x68>
 8015d58:	6023      	str	r3, [r4, #0]
 8015d5a:	441c      	add	r4, r3
 8015d5c:	6025      	str	r5, [r4, #0]
 8015d5e:	e004      	b.n	8015d6a <_malloc_r+0x72>
 8015d60:	6863      	ldr	r3, [r4, #4]
 8015d62:	42a2      	cmp	r2, r4
 8015d64:	bf0c      	ite	eq
 8015d66:	600b      	streq	r3, [r1, #0]
 8015d68:	6053      	strne	r3, [r2, #4]
 8015d6a:	4630      	mov	r0, r6
 8015d6c:	f003 f91a 	bl	8018fa4 <__malloc_unlock>
 8015d70:	f104 000b 	add.w	r0, r4, #11
 8015d74:	1d23      	adds	r3, r4, #4
 8015d76:	f020 0007 	bic.w	r0, r0, #7
 8015d7a:	1ac2      	subs	r2, r0, r3
 8015d7c:	d0cc      	beq.n	8015d18 <_malloc_r+0x20>
 8015d7e:	1a1b      	subs	r3, r3, r0
 8015d80:	50a3      	str	r3, [r4, r2]
 8015d82:	e7c9      	b.n	8015d18 <_malloc_r+0x20>
 8015d84:	4622      	mov	r2, r4
 8015d86:	6864      	ldr	r4, [r4, #4]
 8015d88:	e7cc      	b.n	8015d24 <_malloc_r+0x2c>
 8015d8a:	1cc4      	adds	r4, r0, #3
 8015d8c:	f024 0403 	bic.w	r4, r4, #3
 8015d90:	42a0      	cmp	r0, r4
 8015d92:	d0e3      	beq.n	8015d5c <_malloc_r+0x64>
 8015d94:	1a21      	subs	r1, r4, r0
 8015d96:	4630      	mov	r0, r6
 8015d98:	f000 fee4 	bl	8016b64 <_sbrk_r>
 8015d9c:	3001      	adds	r0, #1
 8015d9e:	d1dd      	bne.n	8015d5c <_malloc_r+0x64>
 8015da0:	e7cf      	b.n	8015d42 <_malloc_r+0x4a>
 8015da2:	bf00      	nop
 8015da4:	2000949c 	.word	0x2000949c
 8015da8:	200094a0 	.word	0x200094a0

08015dac <__cvt>:
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015db2:	461f      	mov	r7, r3
 8015db4:	bfbb      	ittet	lt
 8015db6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8015dba:	461f      	movlt	r7, r3
 8015dbc:	2300      	movge	r3, #0
 8015dbe:	232d      	movlt	r3, #45	; 0x2d
 8015dc0:	b088      	sub	sp, #32
 8015dc2:	4614      	mov	r4, r2
 8015dc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015dc6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8015dc8:	7013      	strb	r3, [r2, #0]
 8015dca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015dcc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8015dd0:	f023 0820 	bic.w	r8, r3, #32
 8015dd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015dd8:	d005      	beq.n	8015de6 <__cvt+0x3a>
 8015dda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015dde:	d100      	bne.n	8015de2 <__cvt+0x36>
 8015de0:	3501      	adds	r5, #1
 8015de2:	2302      	movs	r3, #2
 8015de4:	e000      	b.n	8015de8 <__cvt+0x3c>
 8015de6:	2303      	movs	r3, #3
 8015de8:	aa07      	add	r2, sp, #28
 8015dea:	9204      	str	r2, [sp, #16]
 8015dec:	aa06      	add	r2, sp, #24
 8015dee:	e9cd a202 	strd	sl, r2, [sp, #8]
 8015df2:	e9cd 3500 	strd	r3, r5, [sp]
 8015df6:	4622      	mov	r2, r4
 8015df8:	463b      	mov	r3, r7
 8015dfa:	f001 fe81 	bl	8017b00 <_dtoa_r>
 8015dfe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015e02:	4606      	mov	r6, r0
 8015e04:	d102      	bne.n	8015e0c <__cvt+0x60>
 8015e06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e08:	07db      	lsls	r3, r3, #31
 8015e0a:	d522      	bpl.n	8015e52 <__cvt+0xa6>
 8015e0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015e10:	eb06 0905 	add.w	r9, r6, r5
 8015e14:	d110      	bne.n	8015e38 <__cvt+0x8c>
 8015e16:	7833      	ldrb	r3, [r6, #0]
 8015e18:	2b30      	cmp	r3, #48	; 0x30
 8015e1a:	d10a      	bne.n	8015e32 <__cvt+0x86>
 8015e1c:	2200      	movs	r2, #0
 8015e1e:	2300      	movs	r3, #0
 8015e20:	4620      	mov	r0, r4
 8015e22:	4639      	mov	r1, r7
 8015e24:	f7ea fe0a 	bl	8000a3c <__aeabi_dcmpeq>
 8015e28:	b918      	cbnz	r0, 8015e32 <__cvt+0x86>
 8015e2a:	f1c5 0501 	rsb	r5, r5, #1
 8015e2e:	f8ca 5000 	str.w	r5, [sl]
 8015e32:	f8da 3000 	ldr.w	r3, [sl]
 8015e36:	4499      	add	r9, r3
 8015e38:	2200      	movs	r2, #0
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	4620      	mov	r0, r4
 8015e3e:	4639      	mov	r1, r7
 8015e40:	f7ea fdfc 	bl	8000a3c <__aeabi_dcmpeq>
 8015e44:	b108      	cbz	r0, 8015e4a <__cvt+0x9e>
 8015e46:	f8cd 901c 	str.w	r9, [sp, #28]
 8015e4a:	2230      	movs	r2, #48	; 0x30
 8015e4c:	9b07      	ldr	r3, [sp, #28]
 8015e4e:	454b      	cmp	r3, r9
 8015e50:	d307      	bcc.n	8015e62 <__cvt+0xb6>
 8015e52:	4630      	mov	r0, r6
 8015e54:	9b07      	ldr	r3, [sp, #28]
 8015e56:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015e58:	1b9b      	subs	r3, r3, r6
 8015e5a:	6013      	str	r3, [r2, #0]
 8015e5c:	b008      	add	sp, #32
 8015e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e62:	1c59      	adds	r1, r3, #1
 8015e64:	9107      	str	r1, [sp, #28]
 8015e66:	701a      	strb	r2, [r3, #0]
 8015e68:	e7f0      	b.n	8015e4c <__cvt+0xa0>

08015e6a <__exponent>:
 8015e6a:	4603      	mov	r3, r0
 8015e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015e6e:	2900      	cmp	r1, #0
 8015e70:	f803 2b02 	strb.w	r2, [r3], #2
 8015e74:	bfb6      	itet	lt
 8015e76:	222d      	movlt	r2, #45	; 0x2d
 8015e78:	222b      	movge	r2, #43	; 0x2b
 8015e7a:	4249      	neglt	r1, r1
 8015e7c:	2909      	cmp	r1, #9
 8015e7e:	7042      	strb	r2, [r0, #1]
 8015e80:	dd2b      	ble.n	8015eda <__exponent+0x70>
 8015e82:	f10d 0407 	add.w	r4, sp, #7
 8015e86:	46a4      	mov	ip, r4
 8015e88:	270a      	movs	r7, #10
 8015e8a:	fb91 f6f7 	sdiv	r6, r1, r7
 8015e8e:	460a      	mov	r2, r1
 8015e90:	46a6      	mov	lr, r4
 8015e92:	fb07 1516 	mls	r5, r7, r6, r1
 8015e96:	2a63      	cmp	r2, #99	; 0x63
 8015e98:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8015e9c:	4631      	mov	r1, r6
 8015e9e:	f104 34ff 	add.w	r4, r4, #4294967295
 8015ea2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015ea6:	dcf0      	bgt.n	8015e8a <__exponent+0x20>
 8015ea8:	3130      	adds	r1, #48	; 0x30
 8015eaa:	f1ae 0502 	sub.w	r5, lr, #2
 8015eae:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015eb2:	4629      	mov	r1, r5
 8015eb4:	1c44      	adds	r4, r0, #1
 8015eb6:	4561      	cmp	r1, ip
 8015eb8:	d30a      	bcc.n	8015ed0 <__exponent+0x66>
 8015eba:	f10d 0209 	add.w	r2, sp, #9
 8015ebe:	eba2 020e 	sub.w	r2, r2, lr
 8015ec2:	4565      	cmp	r5, ip
 8015ec4:	bf88      	it	hi
 8015ec6:	2200      	movhi	r2, #0
 8015ec8:	4413      	add	r3, r2
 8015eca:	1a18      	subs	r0, r3, r0
 8015ecc:	b003      	add	sp, #12
 8015ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ed0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015ed4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8015ed8:	e7ed      	b.n	8015eb6 <__exponent+0x4c>
 8015eda:	2330      	movs	r3, #48	; 0x30
 8015edc:	3130      	adds	r1, #48	; 0x30
 8015ede:	7083      	strb	r3, [r0, #2]
 8015ee0:	70c1      	strb	r1, [r0, #3]
 8015ee2:	1d03      	adds	r3, r0, #4
 8015ee4:	e7f1      	b.n	8015eca <__exponent+0x60>
	...

08015ee8 <_printf_float>:
 8015ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eec:	b091      	sub	sp, #68	; 0x44
 8015eee:	460c      	mov	r4, r1
 8015ef0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8015ef4:	4616      	mov	r6, r2
 8015ef6:	461f      	mov	r7, r3
 8015ef8:	4605      	mov	r5, r0
 8015efa:	f003 f817 	bl	8018f2c <_localeconv_r>
 8015efe:	6803      	ldr	r3, [r0, #0]
 8015f00:	4618      	mov	r0, r3
 8015f02:	9309      	str	r3, [sp, #36]	; 0x24
 8015f04:	f7ea f96e 	bl	80001e4 <strlen>
 8015f08:	2300      	movs	r3, #0
 8015f0a:	930e      	str	r3, [sp, #56]	; 0x38
 8015f0c:	f8d8 3000 	ldr.w	r3, [r8]
 8015f10:	900a      	str	r0, [sp, #40]	; 0x28
 8015f12:	3307      	adds	r3, #7
 8015f14:	f023 0307 	bic.w	r3, r3, #7
 8015f18:	f103 0208 	add.w	r2, r3, #8
 8015f1c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8015f20:	f8d4 b000 	ldr.w	fp, [r4]
 8015f24:	f8c8 2000 	str.w	r2, [r8]
 8015f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f2c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015f30:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8015f34:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8015f38:	930b      	str	r3, [sp, #44]	; 0x2c
 8015f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8015f3e:	4640      	mov	r0, r8
 8015f40:	4b9c      	ldr	r3, [pc, #624]	; (80161b4 <_printf_float+0x2cc>)
 8015f42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015f44:	f7ea fdac 	bl	8000aa0 <__aeabi_dcmpun>
 8015f48:	bb70      	cbnz	r0, 8015fa8 <_printf_float+0xc0>
 8015f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8015f4e:	4640      	mov	r0, r8
 8015f50:	4b98      	ldr	r3, [pc, #608]	; (80161b4 <_printf_float+0x2cc>)
 8015f52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015f54:	f7ea fd86 	bl	8000a64 <__aeabi_dcmple>
 8015f58:	bb30      	cbnz	r0, 8015fa8 <_printf_float+0xc0>
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	4640      	mov	r0, r8
 8015f60:	4651      	mov	r1, sl
 8015f62:	f7ea fd75 	bl	8000a50 <__aeabi_dcmplt>
 8015f66:	b110      	cbz	r0, 8015f6e <_printf_float+0x86>
 8015f68:	232d      	movs	r3, #45	; 0x2d
 8015f6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015f6e:	4b92      	ldr	r3, [pc, #584]	; (80161b8 <_printf_float+0x2d0>)
 8015f70:	4892      	ldr	r0, [pc, #584]	; (80161bc <_printf_float+0x2d4>)
 8015f72:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8015f76:	bf94      	ite	ls
 8015f78:	4698      	movls	r8, r3
 8015f7a:	4680      	movhi	r8, r0
 8015f7c:	2303      	movs	r3, #3
 8015f7e:	f04f 0a00 	mov.w	sl, #0
 8015f82:	6123      	str	r3, [r4, #16]
 8015f84:	f02b 0304 	bic.w	r3, fp, #4
 8015f88:	6023      	str	r3, [r4, #0]
 8015f8a:	4633      	mov	r3, r6
 8015f8c:	4621      	mov	r1, r4
 8015f8e:	4628      	mov	r0, r5
 8015f90:	9700      	str	r7, [sp, #0]
 8015f92:	aa0f      	add	r2, sp, #60	; 0x3c
 8015f94:	f000 f9d4 	bl	8016340 <_printf_common>
 8015f98:	3001      	adds	r0, #1
 8015f9a:	f040 8090 	bne.w	80160be <_printf_float+0x1d6>
 8015f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8015fa2:	b011      	add	sp, #68	; 0x44
 8015fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fa8:	4642      	mov	r2, r8
 8015faa:	4653      	mov	r3, sl
 8015fac:	4640      	mov	r0, r8
 8015fae:	4651      	mov	r1, sl
 8015fb0:	f7ea fd76 	bl	8000aa0 <__aeabi_dcmpun>
 8015fb4:	b148      	cbz	r0, 8015fca <_printf_float+0xe2>
 8015fb6:	f1ba 0f00 	cmp.w	sl, #0
 8015fba:	bfb8      	it	lt
 8015fbc:	232d      	movlt	r3, #45	; 0x2d
 8015fbe:	4880      	ldr	r0, [pc, #512]	; (80161c0 <_printf_float+0x2d8>)
 8015fc0:	bfb8      	it	lt
 8015fc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015fc6:	4b7f      	ldr	r3, [pc, #508]	; (80161c4 <_printf_float+0x2dc>)
 8015fc8:	e7d3      	b.n	8015f72 <_printf_float+0x8a>
 8015fca:	6863      	ldr	r3, [r4, #4]
 8015fcc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8015fd0:	1c5a      	adds	r2, r3, #1
 8015fd2:	d142      	bne.n	801605a <_printf_float+0x172>
 8015fd4:	2306      	movs	r3, #6
 8015fd6:	6063      	str	r3, [r4, #4]
 8015fd8:	2200      	movs	r2, #0
 8015fda:	9206      	str	r2, [sp, #24]
 8015fdc:	aa0e      	add	r2, sp, #56	; 0x38
 8015fde:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8015fe2:	aa0d      	add	r2, sp, #52	; 0x34
 8015fe4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8015fe8:	9203      	str	r2, [sp, #12]
 8015fea:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8015fee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8015ff2:	6023      	str	r3, [r4, #0]
 8015ff4:	6863      	ldr	r3, [r4, #4]
 8015ff6:	4642      	mov	r2, r8
 8015ff8:	9300      	str	r3, [sp, #0]
 8015ffa:	4628      	mov	r0, r5
 8015ffc:	4653      	mov	r3, sl
 8015ffe:	910b      	str	r1, [sp, #44]	; 0x2c
 8016000:	f7ff fed4 	bl	8015dac <__cvt>
 8016004:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016006:	4680      	mov	r8, r0
 8016008:	2947      	cmp	r1, #71	; 0x47
 801600a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801600c:	d108      	bne.n	8016020 <_printf_float+0x138>
 801600e:	1cc8      	adds	r0, r1, #3
 8016010:	db02      	blt.n	8016018 <_printf_float+0x130>
 8016012:	6863      	ldr	r3, [r4, #4]
 8016014:	4299      	cmp	r1, r3
 8016016:	dd40      	ble.n	801609a <_printf_float+0x1b2>
 8016018:	f1a9 0902 	sub.w	r9, r9, #2
 801601c:	fa5f f989 	uxtb.w	r9, r9
 8016020:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8016024:	d81f      	bhi.n	8016066 <_printf_float+0x17e>
 8016026:	464a      	mov	r2, r9
 8016028:	3901      	subs	r1, #1
 801602a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801602e:	910d      	str	r1, [sp, #52]	; 0x34
 8016030:	f7ff ff1b 	bl	8015e6a <__exponent>
 8016034:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016036:	4682      	mov	sl, r0
 8016038:	1813      	adds	r3, r2, r0
 801603a:	2a01      	cmp	r2, #1
 801603c:	6123      	str	r3, [r4, #16]
 801603e:	dc02      	bgt.n	8016046 <_printf_float+0x15e>
 8016040:	6822      	ldr	r2, [r4, #0]
 8016042:	07d2      	lsls	r2, r2, #31
 8016044:	d501      	bpl.n	801604a <_printf_float+0x162>
 8016046:	3301      	adds	r3, #1
 8016048:	6123      	str	r3, [r4, #16]
 801604a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801604e:	2b00      	cmp	r3, #0
 8016050:	d09b      	beq.n	8015f8a <_printf_float+0xa2>
 8016052:	232d      	movs	r3, #45	; 0x2d
 8016054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016058:	e797      	b.n	8015f8a <_printf_float+0xa2>
 801605a:	2947      	cmp	r1, #71	; 0x47
 801605c:	d1bc      	bne.n	8015fd8 <_printf_float+0xf0>
 801605e:	2b00      	cmp	r3, #0
 8016060:	d1ba      	bne.n	8015fd8 <_printf_float+0xf0>
 8016062:	2301      	movs	r3, #1
 8016064:	e7b7      	b.n	8015fd6 <_printf_float+0xee>
 8016066:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801606a:	d118      	bne.n	801609e <_printf_float+0x1b6>
 801606c:	2900      	cmp	r1, #0
 801606e:	6863      	ldr	r3, [r4, #4]
 8016070:	dd0b      	ble.n	801608a <_printf_float+0x1a2>
 8016072:	6121      	str	r1, [r4, #16]
 8016074:	b913      	cbnz	r3, 801607c <_printf_float+0x194>
 8016076:	6822      	ldr	r2, [r4, #0]
 8016078:	07d0      	lsls	r0, r2, #31
 801607a:	d502      	bpl.n	8016082 <_printf_float+0x19a>
 801607c:	3301      	adds	r3, #1
 801607e:	440b      	add	r3, r1
 8016080:	6123      	str	r3, [r4, #16]
 8016082:	f04f 0a00 	mov.w	sl, #0
 8016086:	65a1      	str	r1, [r4, #88]	; 0x58
 8016088:	e7df      	b.n	801604a <_printf_float+0x162>
 801608a:	b913      	cbnz	r3, 8016092 <_printf_float+0x1aa>
 801608c:	6822      	ldr	r2, [r4, #0]
 801608e:	07d2      	lsls	r2, r2, #31
 8016090:	d501      	bpl.n	8016096 <_printf_float+0x1ae>
 8016092:	3302      	adds	r3, #2
 8016094:	e7f4      	b.n	8016080 <_printf_float+0x198>
 8016096:	2301      	movs	r3, #1
 8016098:	e7f2      	b.n	8016080 <_printf_float+0x198>
 801609a:	f04f 0967 	mov.w	r9, #103	; 0x67
 801609e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80160a0:	4299      	cmp	r1, r3
 80160a2:	db05      	blt.n	80160b0 <_printf_float+0x1c8>
 80160a4:	6823      	ldr	r3, [r4, #0]
 80160a6:	6121      	str	r1, [r4, #16]
 80160a8:	07d8      	lsls	r0, r3, #31
 80160aa:	d5ea      	bpl.n	8016082 <_printf_float+0x19a>
 80160ac:	1c4b      	adds	r3, r1, #1
 80160ae:	e7e7      	b.n	8016080 <_printf_float+0x198>
 80160b0:	2900      	cmp	r1, #0
 80160b2:	bfcc      	ite	gt
 80160b4:	2201      	movgt	r2, #1
 80160b6:	f1c1 0202 	rsble	r2, r1, #2
 80160ba:	4413      	add	r3, r2
 80160bc:	e7e0      	b.n	8016080 <_printf_float+0x198>
 80160be:	6823      	ldr	r3, [r4, #0]
 80160c0:	055a      	lsls	r2, r3, #21
 80160c2:	d407      	bmi.n	80160d4 <_printf_float+0x1ec>
 80160c4:	6923      	ldr	r3, [r4, #16]
 80160c6:	4642      	mov	r2, r8
 80160c8:	4631      	mov	r1, r6
 80160ca:	4628      	mov	r0, r5
 80160cc:	47b8      	blx	r7
 80160ce:	3001      	adds	r0, #1
 80160d0:	d12b      	bne.n	801612a <_printf_float+0x242>
 80160d2:	e764      	b.n	8015f9e <_printf_float+0xb6>
 80160d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80160d8:	f240 80dd 	bls.w	8016296 <_printf_float+0x3ae>
 80160dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80160e0:	2200      	movs	r2, #0
 80160e2:	2300      	movs	r3, #0
 80160e4:	f7ea fcaa 	bl	8000a3c <__aeabi_dcmpeq>
 80160e8:	2800      	cmp	r0, #0
 80160ea:	d033      	beq.n	8016154 <_printf_float+0x26c>
 80160ec:	2301      	movs	r3, #1
 80160ee:	4631      	mov	r1, r6
 80160f0:	4628      	mov	r0, r5
 80160f2:	4a35      	ldr	r2, [pc, #212]	; (80161c8 <_printf_float+0x2e0>)
 80160f4:	47b8      	blx	r7
 80160f6:	3001      	adds	r0, #1
 80160f8:	f43f af51 	beq.w	8015f9e <_printf_float+0xb6>
 80160fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8016100:	429a      	cmp	r2, r3
 8016102:	db02      	blt.n	801610a <_printf_float+0x222>
 8016104:	6823      	ldr	r3, [r4, #0]
 8016106:	07d8      	lsls	r0, r3, #31
 8016108:	d50f      	bpl.n	801612a <_printf_float+0x242>
 801610a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801610e:	4631      	mov	r1, r6
 8016110:	4628      	mov	r0, r5
 8016112:	47b8      	blx	r7
 8016114:	3001      	adds	r0, #1
 8016116:	f43f af42 	beq.w	8015f9e <_printf_float+0xb6>
 801611a:	f04f 0800 	mov.w	r8, #0
 801611e:	f104 091a 	add.w	r9, r4, #26
 8016122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016124:	3b01      	subs	r3, #1
 8016126:	4543      	cmp	r3, r8
 8016128:	dc09      	bgt.n	801613e <_printf_float+0x256>
 801612a:	6823      	ldr	r3, [r4, #0]
 801612c:	079b      	lsls	r3, r3, #30
 801612e:	f100 8102 	bmi.w	8016336 <_printf_float+0x44e>
 8016132:	68e0      	ldr	r0, [r4, #12]
 8016134:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016136:	4298      	cmp	r0, r3
 8016138:	bfb8      	it	lt
 801613a:	4618      	movlt	r0, r3
 801613c:	e731      	b.n	8015fa2 <_printf_float+0xba>
 801613e:	2301      	movs	r3, #1
 8016140:	464a      	mov	r2, r9
 8016142:	4631      	mov	r1, r6
 8016144:	4628      	mov	r0, r5
 8016146:	47b8      	blx	r7
 8016148:	3001      	adds	r0, #1
 801614a:	f43f af28 	beq.w	8015f9e <_printf_float+0xb6>
 801614e:	f108 0801 	add.w	r8, r8, #1
 8016152:	e7e6      	b.n	8016122 <_printf_float+0x23a>
 8016154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016156:	2b00      	cmp	r3, #0
 8016158:	dc38      	bgt.n	80161cc <_printf_float+0x2e4>
 801615a:	2301      	movs	r3, #1
 801615c:	4631      	mov	r1, r6
 801615e:	4628      	mov	r0, r5
 8016160:	4a19      	ldr	r2, [pc, #100]	; (80161c8 <_printf_float+0x2e0>)
 8016162:	47b8      	blx	r7
 8016164:	3001      	adds	r0, #1
 8016166:	f43f af1a 	beq.w	8015f9e <_printf_float+0xb6>
 801616a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801616e:	4313      	orrs	r3, r2
 8016170:	d102      	bne.n	8016178 <_printf_float+0x290>
 8016172:	6823      	ldr	r3, [r4, #0]
 8016174:	07d9      	lsls	r1, r3, #31
 8016176:	d5d8      	bpl.n	801612a <_printf_float+0x242>
 8016178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801617c:	4631      	mov	r1, r6
 801617e:	4628      	mov	r0, r5
 8016180:	47b8      	blx	r7
 8016182:	3001      	adds	r0, #1
 8016184:	f43f af0b 	beq.w	8015f9e <_printf_float+0xb6>
 8016188:	f04f 0900 	mov.w	r9, #0
 801618c:	f104 0a1a 	add.w	sl, r4, #26
 8016190:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016192:	425b      	negs	r3, r3
 8016194:	454b      	cmp	r3, r9
 8016196:	dc01      	bgt.n	801619c <_printf_float+0x2b4>
 8016198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801619a:	e794      	b.n	80160c6 <_printf_float+0x1de>
 801619c:	2301      	movs	r3, #1
 801619e:	4652      	mov	r2, sl
 80161a0:	4631      	mov	r1, r6
 80161a2:	4628      	mov	r0, r5
 80161a4:	47b8      	blx	r7
 80161a6:	3001      	adds	r0, #1
 80161a8:	f43f aef9 	beq.w	8015f9e <_printf_float+0xb6>
 80161ac:	f109 0901 	add.w	r9, r9, #1
 80161b0:	e7ee      	b.n	8016190 <_printf_float+0x2a8>
 80161b2:	bf00      	nop
 80161b4:	7fefffff 	.word	0x7fefffff
 80161b8:	0801a564 	.word	0x0801a564
 80161bc:	0801a568 	.word	0x0801a568
 80161c0:	0801a570 	.word	0x0801a570
 80161c4:	0801a56c 	.word	0x0801a56c
 80161c8:	0801a574 	.word	0x0801a574
 80161cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80161ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80161d0:	429a      	cmp	r2, r3
 80161d2:	bfa8      	it	ge
 80161d4:	461a      	movge	r2, r3
 80161d6:	2a00      	cmp	r2, #0
 80161d8:	4691      	mov	r9, r2
 80161da:	dc37      	bgt.n	801624c <_printf_float+0x364>
 80161dc:	f04f 0b00 	mov.w	fp, #0
 80161e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80161e4:	f104 021a 	add.w	r2, r4, #26
 80161e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80161ec:	ebaa 0309 	sub.w	r3, sl, r9
 80161f0:	455b      	cmp	r3, fp
 80161f2:	dc33      	bgt.n	801625c <_printf_float+0x374>
 80161f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80161f8:	429a      	cmp	r2, r3
 80161fa:	db3b      	blt.n	8016274 <_printf_float+0x38c>
 80161fc:	6823      	ldr	r3, [r4, #0]
 80161fe:	07da      	lsls	r2, r3, #31
 8016200:	d438      	bmi.n	8016274 <_printf_float+0x38c>
 8016202:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016204:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016206:	eba2 030a 	sub.w	r3, r2, sl
 801620a:	eba2 0901 	sub.w	r9, r2, r1
 801620e:	4599      	cmp	r9, r3
 8016210:	bfa8      	it	ge
 8016212:	4699      	movge	r9, r3
 8016214:	f1b9 0f00 	cmp.w	r9, #0
 8016218:	dc34      	bgt.n	8016284 <_printf_float+0x39c>
 801621a:	f04f 0800 	mov.w	r8, #0
 801621e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016222:	f104 0a1a 	add.w	sl, r4, #26
 8016226:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801622a:	1a9b      	subs	r3, r3, r2
 801622c:	eba3 0309 	sub.w	r3, r3, r9
 8016230:	4543      	cmp	r3, r8
 8016232:	f77f af7a 	ble.w	801612a <_printf_float+0x242>
 8016236:	2301      	movs	r3, #1
 8016238:	4652      	mov	r2, sl
 801623a:	4631      	mov	r1, r6
 801623c:	4628      	mov	r0, r5
 801623e:	47b8      	blx	r7
 8016240:	3001      	adds	r0, #1
 8016242:	f43f aeac 	beq.w	8015f9e <_printf_float+0xb6>
 8016246:	f108 0801 	add.w	r8, r8, #1
 801624a:	e7ec      	b.n	8016226 <_printf_float+0x33e>
 801624c:	4613      	mov	r3, r2
 801624e:	4631      	mov	r1, r6
 8016250:	4642      	mov	r2, r8
 8016252:	4628      	mov	r0, r5
 8016254:	47b8      	blx	r7
 8016256:	3001      	adds	r0, #1
 8016258:	d1c0      	bne.n	80161dc <_printf_float+0x2f4>
 801625a:	e6a0      	b.n	8015f9e <_printf_float+0xb6>
 801625c:	2301      	movs	r3, #1
 801625e:	4631      	mov	r1, r6
 8016260:	4628      	mov	r0, r5
 8016262:	920b      	str	r2, [sp, #44]	; 0x2c
 8016264:	47b8      	blx	r7
 8016266:	3001      	adds	r0, #1
 8016268:	f43f ae99 	beq.w	8015f9e <_printf_float+0xb6>
 801626c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801626e:	f10b 0b01 	add.w	fp, fp, #1
 8016272:	e7b9      	b.n	80161e8 <_printf_float+0x300>
 8016274:	4631      	mov	r1, r6
 8016276:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801627a:	4628      	mov	r0, r5
 801627c:	47b8      	blx	r7
 801627e:	3001      	adds	r0, #1
 8016280:	d1bf      	bne.n	8016202 <_printf_float+0x31a>
 8016282:	e68c      	b.n	8015f9e <_printf_float+0xb6>
 8016284:	464b      	mov	r3, r9
 8016286:	4631      	mov	r1, r6
 8016288:	4628      	mov	r0, r5
 801628a:	eb08 020a 	add.w	r2, r8, sl
 801628e:	47b8      	blx	r7
 8016290:	3001      	adds	r0, #1
 8016292:	d1c2      	bne.n	801621a <_printf_float+0x332>
 8016294:	e683      	b.n	8015f9e <_printf_float+0xb6>
 8016296:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016298:	2a01      	cmp	r2, #1
 801629a:	dc01      	bgt.n	80162a0 <_printf_float+0x3b8>
 801629c:	07db      	lsls	r3, r3, #31
 801629e:	d537      	bpl.n	8016310 <_printf_float+0x428>
 80162a0:	2301      	movs	r3, #1
 80162a2:	4642      	mov	r2, r8
 80162a4:	4631      	mov	r1, r6
 80162a6:	4628      	mov	r0, r5
 80162a8:	47b8      	blx	r7
 80162aa:	3001      	adds	r0, #1
 80162ac:	f43f ae77 	beq.w	8015f9e <_printf_float+0xb6>
 80162b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80162b4:	4631      	mov	r1, r6
 80162b6:	4628      	mov	r0, r5
 80162b8:	47b8      	blx	r7
 80162ba:	3001      	adds	r0, #1
 80162bc:	f43f ae6f 	beq.w	8015f9e <_printf_float+0xb6>
 80162c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80162c4:	2200      	movs	r2, #0
 80162c6:	2300      	movs	r3, #0
 80162c8:	f7ea fbb8 	bl	8000a3c <__aeabi_dcmpeq>
 80162cc:	b9d8      	cbnz	r0, 8016306 <_printf_float+0x41e>
 80162ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80162d0:	f108 0201 	add.w	r2, r8, #1
 80162d4:	3b01      	subs	r3, #1
 80162d6:	4631      	mov	r1, r6
 80162d8:	4628      	mov	r0, r5
 80162da:	47b8      	blx	r7
 80162dc:	3001      	adds	r0, #1
 80162de:	d10e      	bne.n	80162fe <_printf_float+0x416>
 80162e0:	e65d      	b.n	8015f9e <_printf_float+0xb6>
 80162e2:	2301      	movs	r3, #1
 80162e4:	464a      	mov	r2, r9
 80162e6:	4631      	mov	r1, r6
 80162e8:	4628      	mov	r0, r5
 80162ea:	47b8      	blx	r7
 80162ec:	3001      	adds	r0, #1
 80162ee:	f43f ae56 	beq.w	8015f9e <_printf_float+0xb6>
 80162f2:	f108 0801 	add.w	r8, r8, #1
 80162f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80162f8:	3b01      	subs	r3, #1
 80162fa:	4543      	cmp	r3, r8
 80162fc:	dcf1      	bgt.n	80162e2 <_printf_float+0x3fa>
 80162fe:	4653      	mov	r3, sl
 8016300:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016304:	e6e0      	b.n	80160c8 <_printf_float+0x1e0>
 8016306:	f04f 0800 	mov.w	r8, #0
 801630a:	f104 091a 	add.w	r9, r4, #26
 801630e:	e7f2      	b.n	80162f6 <_printf_float+0x40e>
 8016310:	2301      	movs	r3, #1
 8016312:	4642      	mov	r2, r8
 8016314:	e7df      	b.n	80162d6 <_printf_float+0x3ee>
 8016316:	2301      	movs	r3, #1
 8016318:	464a      	mov	r2, r9
 801631a:	4631      	mov	r1, r6
 801631c:	4628      	mov	r0, r5
 801631e:	47b8      	blx	r7
 8016320:	3001      	adds	r0, #1
 8016322:	f43f ae3c 	beq.w	8015f9e <_printf_float+0xb6>
 8016326:	f108 0801 	add.w	r8, r8, #1
 801632a:	68e3      	ldr	r3, [r4, #12]
 801632c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801632e:	1a5b      	subs	r3, r3, r1
 8016330:	4543      	cmp	r3, r8
 8016332:	dcf0      	bgt.n	8016316 <_printf_float+0x42e>
 8016334:	e6fd      	b.n	8016132 <_printf_float+0x24a>
 8016336:	f04f 0800 	mov.w	r8, #0
 801633a:	f104 0919 	add.w	r9, r4, #25
 801633e:	e7f4      	b.n	801632a <_printf_float+0x442>

08016340 <_printf_common>:
 8016340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016344:	4616      	mov	r6, r2
 8016346:	4699      	mov	r9, r3
 8016348:	688a      	ldr	r2, [r1, #8]
 801634a:	690b      	ldr	r3, [r1, #16]
 801634c:	4607      	mov	r7, r0
 801634e:	4293      	cmp	r3, r2
 8016350:	bfb8      	it	lt
 8016352:	4613      	movlt	r3, r2
 8016354:	6033      	str	r3, [r6, #0]
 8016356:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801635a:	460c      	mov	r4, r1
 801635c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016360:	b10a      	cbz	r2, 8016366 <_printf_common+0x26>
 8016362:	3301      	adds	r3, #1
 8016364:	6033      	str	r3, [r6, #0]
 8016366:	6823      	ldr	r3, [r4, #0]
 8016368:	0699      	lsls	r1, r3, #26
 801636a:	bf42      	ittt	mi
 801636c:	6833      	ldrmi	r3, [r6, #0]
 801636e:	3302      	addmi	r3, #2
 8016370:	6033      	strmi	r3, [r6, #0]
 8016372:	6825      	ldr	r5, [r4, #0]
 8016374:	f015 0506 	ands.w	r5, r5, #6
 8016378:	d106      	bne.n	8016388 <_printf_common+0x48>
 801637a:	f104 0a19 	add.w	sl, r4, #25
 801637e:	68e3      	ldr	r3, [r4, #12]
 8016380:	6832      	ldr	r2, [r6, #0]
 8016382:	1a9b      	subs	r3, r3, r2
 8016384:	42ab      	cmp	r3, r5
 8016386:	dc28      	bgt.n	80163da <_printf_common+0x9a>
 8016388:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801638c:	1e13      	subs	r3, r2, #0
 801638e:	6822      	ldr	r2, [r4, #0]
 8016390:	bf18      	it	ne
 8016392:	2301      	movne	r3, #1
 8016394:	0692      	lsls	r2, r2, #26
 8016396:	d42d      	bmi.n	80163f4 <_printf_common+0xb4>
 8016398:	4649      	mov	r1, r9
 801639a:	4638      	mov	r0, r7
 801639c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80163a0:	47c0      	blx	r8
 80163a2:	3001      	adds	r0, #1
 80163a4:	d020      	beq.n	80163e8 <_printf_common+0xa8>
 80163a6:	6823      	ldr	r3, [r4, #0]
 80163a8:	68e5      	ldr	r5, [r4, #12]
 80163aa:	f003 0306 	and.w	r3, r3, #6
 80163ae:	2b04      	cmp	r3, #4
 80163b0:	bf18      	it	ne
 80163b2:	2500      	movne	r5, #0
 80163b4:	6832      	ldr	r2, [r6, #0]
 80163b6:	f04f 0600 	mov.w	r6, #0
 80163ba:	68a3      	ldr	r3, [r4, #8]
 80163bc:	bf08      	it	eq
 80163be:	1aad      	subeq	r5, r5, r2
 80163c0:	6922      	ldr	r2, [r4, #16]
 80163c2:	bf08      	it	eq
 80163c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80163c8:	4293      	cmp	r3, r2
 80163ca:	bfc4      	itt	gt
 80163cc:	1a9b      	subgt	r3, r3, r2
 80163ce:	18ed      	addgt	r5, r5, r3
 80163d0:	341a      	adds	r4, #26
 80163d2:	42b5      	cmp	r5, r6
 80163d4:	d11a      	bne.n	801640c <_printf_common+0xcc>
 80163d6:	2000      	movs	r0, #0
 80163d8:	e008      	b.n	80163ec <_printf_common+0xac>
 80163da:	2301      	movs	r3, #1
 80163dc:	4652      	mov	r2, sl
 80163de:	4649      	mov	r1, r9
 80163e0:	4638      	mov	r0, r7
 80163e2:	47c0      	blx	r8
 80163e4:	3001      	adds	r0, #1
 80163e6:	d103      	bne.n	80163f0 <_printf_common+0xb0>
 80163e8:	f04f 30ff 	mov.w	r0, #4294967295
 80163ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163f0:	3501      	adds	r5, #1
 80163f2:	e7c4      	b.n	801637e <_printf_common+0x3e>
 80163f4:	2030      	movs	r0, #48	; 0x30
 80163f6:	18e1      	adds	r1, r4, r3
 80163f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80163fc:	1c5a      	adds	r2, r3, #1
 80163fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016402:	4422      	add	r2, r4
 8016404:	3302      	adds	r3, #2
 8016406:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801640a:	e7c5      	b.n	8016398 <_printf_common+0x58>
 801640c:	2301      	movs	r3, #1
 801640e:	4622      	mov	r2, r4
 8016410:	4649      	mov	r1, r9
 8016412:	4638      	mov	r0, r7
 8016414:	47c0      	blx	r8
 8016416:	3001      	adds	r0, #1
 8016418:	d0e6      	beq.n	80163e8 <_printf_common+0xa8>
 801641a:	3601      	adds	r6, #1
 801641c:	e7d9      	b.n	80163d2 <_printf_common+0x92>
	...

08016420 <_printf_i>:
 8016420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016424:	460c      	mov	r4, r1
 8016426:	7e27      	ldrb	r7, [r4, #24]
 8016428:	4691      	mov	r9, r2
 801642a:	2f78      	cmp	r7, #120	; 0x78
 801642c:	4680      	mov	r8, r0
 801642e:	469a      	mov	sl, r3
 8016430:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016432:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016436:	d807      	bhi.n	8016448 <_printf_i+0x28>
 8016438:	2f62      	cmp	r7, #98	; 0x62
 801643a:	d80a      	bhi.n	8016452 <_printf_i+0x32>
 801643c:	2f00      	cmp	r7, #0
 801643e:	f000 80d9 	beq.w	80165f4 <_printf_i+0x1d4>
 8016442:	2f58      	cmp	r7, #88	; 0x58
 8016444:	f000 80a4 	beq.w	8016590 <_printf_i+0x170>
 8016448:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801644c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016450:	e03a      	b.n	80164c8 <_printf_i+0xa8>
 8016452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016456:	2b15      	cmp	r3, #21
 8016458:	d8f6      	bhi.n	8016448 <_printf_i+0x28>
 801645a:	a001      	add	r0, pc, #4	; (adr r0, 8016460 <_printf_i+0x40>)
 801645c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016460:	080164b9 	.word	0x080164b9
 8016464:	080164cd 	.word	0x080164cd
 8016468:	08016449 	.word	0x08016449
 801646c:	08016449 	.word	0x08016449
 8016470:	08016449 	.word	0x08016449
 8016474:	08016449 	.word	0x08016449
 8016478:	080164cd 	.word	0x080164cd
 801647c:	08016449 	.word	0x08016449
 8016480:	08016449 	.word	0x08016449
 8016484:	08016449 	.word	0x08016449
 8016488:	08016449 	.word	0x08016449
 801648c:	080165db 	.word	0x080165db
 8016490:	080164fd 	.word	0x080164fd
 8016494:	080165bd 	.word	0x080165bd
 8016498:	08016449 	.word	0x08016449
 801649c:	08016449 	.word	0x08016449
 80164a0:	080165fd 	.word	0x080165fd
 80164a4:	08016449 	.word	0x08016449
 80164a8:	080164fd 	.word	0x080164fd
 80164ac:	08016449 	.word	0x08016449
 80164b0:	08016449 	.word	0x08016449
 80164b4:	080165c5 	.word	0x080165c5
 80164b8:	680b      	ldr	r3, [r1, #0]
 80164ba:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80164be:	1d1a      	adds	r2, r3, #4
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	600a      	str	r2, [r1, #0]
 80164c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80164c8:	2301      	movs	r3, #1
 80164ca:	e0a4      	b.n	8016616 <_printf_i+0x1f6>
 80164cc:	6825      	ldr	r5, [r4, #0]
 80164ce:	6808      	ldr	r0, [r1, #0]
 80164d0:	062e      	lsls	r6, r5, #24
 80164d2:	f100 0304 	add.w	r3, r0, #4
 80164d6:	d50a      	bpl.n	80164ee <_printf_i+0xce>
 80164d8:	6805      	ldr	r5, [r0, #0]
 80164da:	600b      	str	r3, [r1, #0]
 80164dc:	2d00      	cmp	r5, #0
 80164de:	da03      	bge.n	80164e8 <_printf_i+0xc8>
 80164e0:	232d      	movs	r3, #45	; 0x2d
 80164e2:	426d      	negs	r5, r5
 80164e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80164e8:	230a      	movs	r3, #10
 80164ea:	485e      	ldr	r0, [pc, #376]	; (8016664 <_printf_i+0x244>)
 80164ec:	e019      	b.n	8016522 <_printf_i+0x102>
 80164ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80164f2:	6805      	ldr	r5, [r0, #0]
 80164f4:	600b      	str	r3, [r1, #0]
 80164f6:	bf18      	it	ne
 80164f8:	b22d      	sxthne	r5, r5
 80164fa:	e7ef      	b.n	80164dc <_printf_i+0xbc>
 80164fc:	680b      	ldr	r3, [r1, #0]
 80164fe:	6825      	ldr	r5, [r4, #0]
 8016500:	1d18      	adds	r0, r3, #4
 8016502:	6008      	str	r0, [r1, #0]
 8016504:	0628      	lsls	r0, r5, #24
 8016506:	d501      	bpl.n	801650c <_printf_i+0xec>
 8016508:	681d      	ldr	r5, [r3, #0]
 801650a:	e002      	b.n	8016512 <_printf_i+0xf2>
 801650c:	0669      	lsls	r1, r5, #25
 801650e:	d5fb      	bpl.n	8016508 <_printf_i+0xe8>
 8016510:	881d      	ldrh	r5, [r3, #0]
 8016512:	2f6f      	cmp	r7, #111	; 0x6f
 8016514:	bf0c      	ite	eq
 8016516:	2308      	moveq	r3, #8
 8016518:	230a      	movne	r3, #10
 801651a:	4852      	ldr	r0, [pc, #328]	; (8016664 <_printf_i+0x244>)
 801651c:	2100      	movs	r1, #0
 801651e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016522:	6866      	ldr	r6, [r4, #4]
 8016524:	2e00      	cmp	r6, #0
 8016526:	bfa8      	it	ge
 8016528:	6821      	ldrge	r1, [r4, #0]
 801652a:	60a6      	str	r6, [r4, #8]
 801652c:	bfa4      	itt	ge
 801652e:	f021 0104 	bicge.w	r1, r1, #4
 8016532:	6021      	strge	r1, [r4, #0]
 8016534:	b90d      	cbnz	r5, 801653a <_printf_i+0x11a>
 8016536:	2e00      	cmp	r6, #0
 8016538:	d04d      	beq.n	80165d6 <_printf_i+0x1b6>
 801653a:	4616      	mov	r6, r2
 801653c:	fbb5 f1f3 	udiv	r1, r5, r3
 8016540:	fb03 5711 	mls	r7, r3, r1, r5
 8016544:	5dc7      	ldrb	r7, [r0, r7]
 8016546:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801654a:	462f      	mov	r7, r5
 801654c:	42bb      	cmp	r3, r7
 801654e:	460d      	mov	r5, r1
 8016550:	d9f4      	bls.n	801653c <_printf_i+0x11c>
 8016552:	2b08      	cmp	r3, #8
 8016554:	d10b      	bne.n	801656e <_printf_i+0x14e>
 8016556:	6823      	ldr	r3, [r4, #0]
 8016558:	07df      	lsls	r7, r3, #31
 801655a:	d508      	bpl.n	801656e <_printf_i+0x14e>
 801655c:	6923      	ldr	r3, [r4, #16]
 801655e:	6861      	ldr	r1, [r4, #4]
 8016560:	4299      	cmp	r1, r3
 8016562:	bfde      	ittt	le
 8016564:	2330      	movle	r3, #48	; 0x30
 8016566:	f806 3c01 	strble.w	r3, [r6, #-1]
 801656a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801656e:	1b92      	subs	r2, r2, r6
 8016570:	6122      	str	r2, [r4, #16]
 8016572:	464b      	mov	r3, r9
 8016574:	4621      	mov	r1, r4
 8016576:	4640      	mov	r0, r8
 8016578:	f8cd a000 	str.w	sl, [sp]
 801657c:	aa03      	add	r2, sp, #12
 801657e:	f7ff fedf 	bl	8016340 <_printf_common>
 8016582:	3001      	adds	r0, #1
 8016584:	d14c      	bne.n	8016620 <_printf_i+0x200>
 8016586:	f04f 30ff 	mov.w	r0, #4294967295
 801658a:	b004      	add	sp, #16
 801658c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016590:	4834      	ldr	r0, [pc, #208]	; (8016664 <_printf_i+0x244>)
 8016592:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016596:	680e      	ldr	r6, [r1, #0]
 8016598:	6823      	ldr	r3, [r4, #0]
 801659a:	f856 5b04 	ldr.w	r5, [r6], #4
 801659e:	061f      	lsls	r7, r3, #24
 80165a0:	600e      	str	r6, [r1, #0]
 80165a2:	d514      	bpl.n	80165ce <_printf_i+0x1ae>
 80165a4:	07d9      	lsls	r1, r3, #31
 80165a6:	bf44      	itt	mi
 80165a8:	f043 0320 	orrmi.w	r3, r3, #32
 80165ac:	6023      	strmi	r3, [r4, #0]
 80165ae:	b91d      	cbnz	r5, 80165b8 <_printf_i+0x198>
 80165b0:	6823      	ldr	r3, [r4, #0]
 80165b2:	f023 0320 	bic.w	r3, r3, #32
 80165b6:	6023      	str	r3, [r4, #0]
 80165b8:	2310      	movs	r3, #16
 80165ba:	e7af      	b.n	801651c <_printf_i+0xfc>
 80165bc:	6823      	ldr	r3, [r4, #0]
 80165be:	f043 0320 	orr.w	r3, r3, #32
 80165c2:	6023      	str	r3, [r4, #0]
 80165c4:	2378      	movs	r3, #120	; 0x78
 80165c6:	4828      	ldr	r0, [pc, #160]	; (8016668 <_printf_i+0x248>)
 80165c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80165cc:	e7e3      	b.n	8016596 <_printf_i+0x176>
 80165ce:	065e      	lsls	r6, r3, #25
 80165d0:	bf48      	it	mi
 80165d2:	b2ad      	uxthmi	r5, r5
 80165d4:	e7e6      	b.n	80165a4 <_printf_i+0x184>
 80165d6:	4616      	mov	r6, r2
 80165d8:	e7bb      	b.n	8016552 <_printf_i+0x132>
 80165da:	680b      	ldr	r3, [r1, #0]
 80165dc:	6826      	ldr	r6, [r4, #0]
 80165de:	1d1d      	adds	r5, r3, #4
 80165e0:	6960      	ldr	r0, [r4, #20]
 80165e2:	600d      	str	r5, [r1, #0]
 80165e4:	0635      	lsls	r5, r6, #24
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	d501      	bpl.n	80165ee <_printf_i+0x1ce>
 80165ea:	6018      	str	r0, [r3, #0]
 80165ec:	e002      	b.n	80165f4 <_printf_i+0x1d4>
 80165ee:	0671      	lsls	r1, r6, #25
 80165f0:	d5fb      	bpl.n	80165ea <_printf_i+0x1ca>
 80165f2:	8018      	strh	r0, [r3, #0]
 80165f4:	2300      	movs	r3, #0
 80165f6:	4616      	mov	r6, r2
 80165f8:	6123      	str	r3, [r4, #16]
 80165fa:	e7ba      	b.n	8016572 <_printf_i+0x152>
 80165fc:	680b      	ldr	r3, [r1, #0]
 80165fe:	1d1a      	adds	r2, r3, #4
 8016600:	600a      	str	r2, [r1, #0]
 8016602:	681e      	ldr	r6, [r3, #0]
 8016604:	2100      	movs	r1, #0
 8016606:	4630      	mov	r0, r6
 8016608:	6862      	ldr	r2, [r4, #4]
 801660a:	f002 fcb7 	bl	8018f7c <memchr>
 801660e:	b108      	cbz	r0, 8016614 <_printf_i+0x1f4>
 8016610:	1b80      	subs	r0, r0, r6
 8016612:	6060      	str	r0, [r4, #4]
 8016614:	6863      	ldr	r3, [r4, #4]
 8016616:	6123      	str	r3, [r4, #16]
 8016618:	2300      	movs	r3, #0
 801661a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801661e:	e7a8      	b.n	8016572 <_printf_i+0x152>
 8016620:	4632      	mov	r2, r6
 8016622:	4649      	mov	r1, r9
 8016624:	4640      	mov	r0, r8
 8016626:	6923      	ldr	r3, [r4, #16]
 8016628:	47d0      	blx	sl
 801662a:	3001      	adds	r0, #1
 801662c:	d0ab      	beq.n	8016586 <_printf_i+0x166>
 801662e:	6823      	ldr	r3, [r4, #0]
 8016630:	079b      	lsls	r3, r3, #30
 8016632:	d413      	bmi.n	801665c <_printf_i+0x23c>
 8016634:	68e0      	ldr	r0, [r4, #12]
 8016636:	9b03      	ldr	r3, [sp, #12]
 8016638:	4298      	cmp	r0, r3
 801663a:	bfb8      	it	lt
 801663c:	4618      	movlt	r0, r3
 801663e:	e7a4      	b.n	801658a <_printf_i+0x16a>
 8016640:	2301      	movs	r3, #1
 8016642:	4632      	mov	r2, r6
 8016644:	4649      	mov	r1, r9
 8016646:	4640      	mov	r0, r8
 8016648:	47d0      	blx	sl
 801664a:	3001      	adds	r0, #1
 801664c:	d09b      	beq.n	8016586 <_printf_i+0x166>
 801664e:	3501      	adds	r5, #1
 8016650:	68e3      	ldr	r3, [r4, #12]
 8016652:	9903      	ldr	r1, [sp, #12]
 8016654:	1a5b      	subs	r3, r3, r1
 8016656:	42ab      	cmp	r3, r5
 8016658:	dcf2      	bgt.n	8016640 <_printf_i+0x220>
 801665a:	e7eb      	b.n	8016634 <_printf_i+0x214>
 801665c:	2500      	movs	r5, #0
 801665e:	f104 0619 	add.w	r6, r4, #25
 8016662:	e7f5      	b.n	8016650 <_printf_i+0x230>
 8016664:	0801a576 	.word	0x0801a576
 8016668:	0801a587 	.word	0x0801a587

0801666c <_scanf_float>:
 801666c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016670:	b087      	sub	sp, #28
 8016672:	9303      	str	r3, [sp, #12]
 8016674:	688b      	ldr	r3, [r1, #8]
 8016676:	4617      	mov	r7, r2
 8016678:	1e5a      	subs	r2, r3, #1
 801667a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801667e:	bf85      	ittet	hi
 8016680:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016684:	195b      	addhi	r3, r3, r5
 8016686:	2300      	movls	r3, #0
 8016688:	9302      	strhi	r3, [sp, #8]
 801668a:	bf88      	it	hi
 801668c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016690:	468b      	mov	fp, r1
 8016692:	f04f 0500 	mov.w	r5, #0
 8016696:	bf8c      	ite	hi
 8016698:	608b      	strhi	r3, [r1, #8]
 801669a:	9302      	strls	r3, [sp, #8]
 801669c:	680b      	ldr	r3, [r1, #0]
 801669e:	4680      	mov	r8, r0
 80166a0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80166a4:	f84b 3b1c 	str.w	r3, [fp], #28
 80166a8:	460c      	mov	r4, r1
 80166aa:	465e      	mov	r6, fp
 80166ac:	46aa      	mov	sl, r5
 80166ae:	46a9      	mov	r9, r5
 80166b0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80166b4:	9501      	str	r5, [sp, #4]
 80166b6:	68a2      	ldr	r2, [r4, #8]
 80166b8:	b152      	cbz	r2, 80166d0 <_scanf_float+0x64>
 80166ba:	683b      	ldr	r3, [r7, #0]
 80166bc:	781b      	ldrb	r3, [r3, #0]
 80166be:	2b4e      	cmp	r3, #78	; 0x4e
 80166c0:	d864      	bhi.n	801678c <_scanf_float+0x120>
 80166c2:	2b40      	cmp	r3, #64	; 0x40
 80166c4:	d83c      	bhi.n	8016740 <_scanf_float+0xd4>
 80166c6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80166ca:	b2c8      	uxtb	r0, r1
 80166cc:	280e      	cmp	r0, #14
 80166ce:	d93a      	bls.n	8016746 <_scanf_float+0xda>
 80166d0:	f1b9 0f00 	cmp.w	r9, #0
 80166d4:	d003      	beq.n	80166de <_scanf_float+0x72>
 80166d6:	6823      	ldr	r3, [r4, #0]
 80166d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80166dc:	6023      	str	r3, [r4, #0]
 80166de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80166e2:	f1ba 0f01 	cmp.w	sl, #1
 80166e6:	f200 8113 	bhi.w	8016910 <_scanf_float+0x2a4>
 80166ea:	455e      	cmp	r6, fp
 80166ec:	f200 8105 	bhi.w	80168fa <_scanf_float+0x28e>
 80166f0:	2501      	movs	r5, #1
 80166f2:	4628      	mov	r0, r5
 80166f4:	b007      	add	sp, #28
 80166f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166fa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80166fe:	2a0d      	cmp	r2, #13
 8016700:	d8e6      	bhi.n	80166d0 <_scanf_float+0x64>
 8016702:	a101      	add	r1, pc, #4	; (adr r1, 8016708 <_scanf_float+0x9c>)
 8016704:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016708:	08016847 	.word	0x08016847
 801670c:	080166d1 	.word	0x080166d1
 8016710:	080166d1 	.word	0x080166d1
 8016714:	080166d1 	.word	0x080166d1
 8016718:	080168a7 	.word	0x080168a7
 801671c:	0801687f 	.word	0x0801687f
 8016720:	080166d1 	.word	0x080166d1
 8016724:	080166d1 	.word	0x080166d1
 8016728:	08016855 	.word	0x08016855
 801672c:	080166d1 	.word	0x080166d1
 8016730:	080166d1 	.word	0x080166d1
 8016734:	080166d1 	.word	0x080166d1
 8016738:	080166d1 	.word	0x080166d1
 801673c:	0801680d 	.word	0x0801680d
 8016740:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016744:	e7db      	b.n	80166fe <_scanf_float+0x92>
 8016746:	290e      	cmp	r1, #14
 8016748:	d8c2      	bhi.n	80166d0 <_scanf_float+0x64>
 801674a:	a001      	add	r0, pc, #4	; (adr r0, 8016750 <_scanf_float+0xe4>)
 801674c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016750:	080167ff 	.word	0x080167ff
 8016754:	080166d1 	.word	0x080166d1
 8016758:	080167ff 	.word	0x080167ff
 801675c:	08016893 	.word	0x08016893
 8016760:	080166d1 	.word	0x080166d1
 8016764:	080167ad 	.word	0x080167ad
 8016768:	080167e9 	.word	0x080167e9
 801676c:	080167e9 	.word	0x080167e9
 8016770:	080167e9 	.word	0x080167e9
 8016774:	080167e9 	.word	0x080167e9
 8016778:	080167e9 	.word	0x080167e9
 801677c:	080167e9 	.word	0x080167e9
 8016780:	080167e9 	.word	0x080167e9
 8016784:	080167e9 	.word	0x080167e9
 8016788:	080167e9 	.word	0x080167e9
 801678c:	2b6e      	cmp	r3, #110	; 0x6e
 801678e:	d809      	bhi.n	80167a4 <_scanf_float+0x138>
 8016790:	2b60      	cmp	r3, #96	; 0x60
 8016792:	d8b2      	bhi.n	80166fa <_scanf_float+0x8e>
 8016794:	2b54      	cmp	r3, #84	; 0x54
 8016796:	d077      	beq.n	8016888 <_scanf_float+0x21c>
 8016798:	2b59      	cmp	r3, #89	; 0x59
 801679a:	d199      	bne.n	80166d0 <_scanf_float+0x64>
 801679c:	2d07      	cmp	r5, #7
 801679e:	d197      	bne.n	80166d0 <_scanf_float+0x64>
 80167a0:	2508      	movs	r5, #8
 80167a2:	e029      	b.n	80167f8 <_scanf_float+0x18c>
 80167a4:	2b74      	cmp	r3, #116	; 0x74
 80167a6:	d06f      	beq.n	8016888 <_scanf_float+0x21c>
 80167a8:	2b79      	cmp	r3, #121	; 0x79
 80167aa:	e7f6      	b.n	801679a <_scanf_float+0x12e>
 80167ac:	6821      	ldr	r1, [r4, #0]
 80167ae:	05c8      	lsls	r0, r1, #23
 80167b0:	d51a      	bpl.n	80167e8 <_scanf_float+0x17c>
 80167b2:	9b02      	ldr	r3, [sp, #8]
 80167b4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80167b8:	6021      	str	r1, [r4, #0]
 80167ba:	f109 0901 	add.w	r9, r9, #1
 80167be:	b11b      	cbz	r3, 80167c8 <_scanf_float+0x15c>
 80167c0:	3b01      	subs	r3, #1
 80167c2:	3201      	adds	r2, #1
 80167c4:	9302      	str	r3, [sp, #8]
 80167c6:	60a2      	str	r2, [r4, #8]
 80167c8:	68a3      	ldr	r3, [r4, #8]
 80167ca:	3b01      	subs	r3, #1
 80167cc:	60a3      	str	r3, [r4, #8]
 80167ce:	6923      	ldr	r3, [r4, #16]
 80167d0:	3301      	adds	r3, #1
 80167d2:	6123      	str	r3, [r4, #16]
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	3b01      	subs	r3, #1
 80167d8:	2b00      	cmp	r3, #0
 80167da:	607b      	str	r3, [r7, #4]
 80167dc:	f340 8084 	ble.w	80168e8 <_scanf_float+0x27c>
 80167e0:	683b      	ldr	r3, [r7, #0]
 80167e2:	3301      	adds	r3, #1
 80167e4:	603b      	str	r3, [r7, #0]
 80167e6:	e766      	b.n	80166b6 <_scanf_float+0x4a>
 80167e8:	eb1a 0f05 	cmn.w	sl, r5
 80167ec:	f47f af70 	bne.w	80166d0 <_scanf_float+0x64>
 80167f0:	6822      	ldr	r2, [r4, #0]
 80167f2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80167f6:	6022      	str	r2, [r4, #0]
 80167f8:	f806 3b01 	strb.w	r3, [r6], #1
 80167fc:	e7e4      	b.n	80167c8 <_scanf_float+0x15c>
 80167fe:	6822      	ldr	r2, [r4, #0]
 8016800:	0610      	lsls	r0, r2, #24
 8016802:	f57f af65 	bpl.w	80166d0 <_scanf_float+0x64>
 8016806:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801680a:	e7f4      	b.n	80167f6 <_scanf_float+0x18a>
 801680c:	f1ba 0f00 	cmp.w	sl, #0
 8016810:	d10e      	bne.n	8016830 <_scanf_float+0x1c4>
 8016812:	f1b9 0f00 	cmp.w	r9, #0
 8016816:	d10e      	bne.n	8016836 <_scanf_float+0x1ca>
 8016818:	6822      	ldr	r2, [r4, #0]
 801681a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801681e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016822:	d108      	bne.n	8016836 <_scanf_float+0x1ca>
 8016824:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016828:	f04f 0a01 	mov.w	sl, #1
 801682c:	6022      	str	r2, [r4, #0]
 801682e:	e7e3      	b.n	80167f8 <_scanf_float+0x18c>
 8016830:	f1ba 0f02 	cmp.w	sl, #2
 8016834:	d055      	beq.n	80168e2 <_scanf_float+0x276>
 8016836:	2d01      	cmp	r5, #1
 8016838:	d002      	beq.n	8016840 <_scanf_float+0x1d4>
 801683a:	2d04      	cmp	r5, #4
 801683c:	f47f af48 	bne.w	80166d0 <_scanf_float+0x64>
 8016840:	3501      	adds	r5, #1
 8016842:	b2ed      	uxtb	r5, r5
 8016844:	e7d8      	b.n	80167f8 <_scanf_float+0x18c>
 8016846:	f1ba 0f01 	cmp.w	sl, #1
 801684a:	f47f af41 	bne.w	80166d0 <_scanf_float+0x64>
 801684e:	f04f 0a02 	mov.w	sl, #2
 8016852:	e7d1      	b.n	80167f8 <_scanf_float+0x18c>
 8016854:	b97d      	cbnz	r5, 8016876 <_scanf_float+0x20a>
 8016856:	f1b9 0f00 	cmp.w	r9, #0
 801685a:	f47f af3c 	bne.w	80166d6 <_scanf_float+0x6a>
 801685e:	6822      	ldr	r2, [r4, #0]
 8016860:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016864:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016868:	f47f af39 	bne.w	80166de <_scanf_float+0x72>
 801686c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016870:	2501      	movs	r5, #1
 8016872:	6022      	str	r2, [r4, #0]
 8016874:	e7c0      	b.n	80167f8 <_scanf_float+0x18c>
 8016876:	2d03      	cmp	r5, #3
 8016878:	d0e2      	beq.n	8016840 <_scanf_float+0x1d4>
 801687a:	2d05      	cmp	r5, #5
 801687c:	e7de      	b.n	801683c <_scanf_float+0x1d0>
 801687e:	2d02      	cmp	r5, #2
 8016880:	f47f af26 	bne.w	80166d0 <_scanf_float+0x64>
 8016884:	2503      	movs	r5, #3
 8016886:	e7b7      	b.n	80167f8 <_scanf_float+0x18c>
 8016888:	2d06      	cmp	r5, #6
 801688a:	f47f af21 	bne.w	80166d0 <_scanf_float+0x64>
 801688e:	2507      	movs	r5, #7
 8016890:	e7b2      	b.n	80167f8 <_scanf_float+0x18c>
 8016892:	6822      	ldr	r2, [r4, #0]
 8016894:	0591      	lsls	r1, r2, #22
 8016896:	f57f af1b 	bpl.w	80166d0 <_scanf_float+0x64>
 801689a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801689e:	6022      	str	r2, [r4, #0]
 80168a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80168a4:	e7a8      	b.n	80167f8 <_scanf_float+0x18c>
 80168a6:	6822      	ldr	r2, [r4, #0]
 80168a8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80168ac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80168b0:	d006      	beq.n	80168c0 <_scanf_float+0x254>
 80168b2:	0550      	lsls	r0, r2, #21
 80168b4:	f57f af0c 	bpl.w	80166d0 <_scanf_float+0x64>
 80168b8:	f1b9 0f00 	cmp.w	r9, #0
 80168bc:	f43f af0f 	beq.w	80166de <_scanf_float+0x72>
 80168c0:	0591      	lsls	r1, r2, #22
 80168c2:	bf58      	it	pl
 80168c4:	9901      	ldrpl	r1, [sp, #4]
 80168c6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80168ca:	bf58      	it	pl
 80168cc:	eba9 0101 	subpl.w	r1, r9, r1
 80168d0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80168d4:	f04f 0900 	mov.w	r9, #0
 80168d8:	bf58      	it	pl
 80168da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80168de:	6022      	str	r2, [r4, #0]
 80168e0:	e78a      	b.n	80167f8 <_scanf_float+0x18c>
 80168e2:	f04f 0a03 	mov.w	sl, #3
 80168e6:	e787      	b.n	80167f8 <_scanf_float+0x18c>
 80168e8:	4639      	mov	r1, r7
 80168ea:	4640      	mov	r0, r8
 80168ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80168f0:	4798      	blx	r3
 80168f2:	2800      	cmp	r0, #0
 80168f4:	f43f aedf 	beq.w	80166b6 <_scanf_float+0x4a>
 80168f8:	e6ea      	b.n	80166d0 <_scanf_float+0x64>
 80168fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80168fe:	463a      	mov	r2, r7
 8016900:	4640      	mov	r0, r8
 8016902:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016906:	4798      	blx	r3
 8016908:	6923      	ldr	r3, [r4, #16]
 801690a:	3b01      	subs	r3, #1
 801690c:	6123      	str	r3, [r4, #16]
 801690e:	e6ec      	b.n	80166ea <_scanf_float+0x7e>
 8016910:	1e6b      	subs	r3, r5, #1
 8016912:	2b06      	cmp	r3, #6
 8016914:	d825      	bhi.n	8016962 <_scanf_float+0x2f6>
 8016916:	2d02      	cmp	r5, #2
 8016918:	d836      	bhi.n	8016988 <_scanf_float+0x31c>
 801691a:	455e      	cmp	r6, fp
 801691c:	f67f aee8 	bls.w	80166f0 <_scanf_float+0x84>
 8016920:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016924:	463a      	mov	r2, r7
 8016926:	4640      	mov	r0, r8
 8016928:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801692c:	4798      	blx	r3
 801692e:	6923      	ldr	r3, [r4, #16]
 8016930:	3b01      	subs	r3, #1
 8016932:	6123      	str	r3, [r4, #16]
 8016934:	e7f1      	b.n	801691a <_scanf_float+0x2ae>
 8016936:	9802      	ldr	r0, [sp, #8]
 8016938:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801693c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016940:	463a      	mov	r2, r7
 8016942:	9002      	str	r0, [sp, #8]
 8016944:	4640      	mov	r0, r8
 8016946:	4798      	blx	r3
 8016948:	6923      	ldr	r3, [r4, #16]
 801694a:	3b01      	subs	r3, #1
 801694c:	6123      	str	r3, [r4, #16]
 801694e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016952:	fa5f fa8a 	uxtb.w	sl, sl
 8016956:	f1ba 0f02 	cmp.w	sl, #2
 801695a:	d1ec      	bne.n	8016936 <_scanf_float+0x2ca>
 801695c:	3d03      	subs	r5, #3
 801695e:	b2ed      	uxtb	r5, r5
 8016960:	1b76      	subs	r6, r6, r5
 8016962:	6823      	ldr	r3, [r4, #0]
 8016964:	05da      	lsls	r2, r3, #23
 8016966:	d52f      	bpl.n	80169c8 <_scanf_float+0x35c>
 8016968:	055b      	lsls	r3, r3, #21
 801696a:	d510      	bpl.n	801698e <_scanf_float+0x322>
 801696c:	455e      	cmp	r6, fp
 801696e:	f67f aebf 	bls.w	80166f0 <_scanf_float+0x84>
 8016972:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016976:	463a      	mov	r2, r7
 8016978:	4640      	mov	r0, r8
 801697a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801697e:	4798      	blx	r3
 8016980:	6923      	ldr	r3, [r4, #16]
 8016982:	3b01      	subs	r3, #1
 8016984:	6123      	str	r3, [r4, #16]
 8016986:	e7f1      	b.n	801696c <_scanf_float+0x300>
 8016988:	46aa      	mov	sl, r5
 801698a:	9602      	str	r6, [sp, #8]
 801698c:	e7df      	b.n	801694e <_scanf_float+0x2e2>
 801698e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016992:	6923      	ldr	r3, [r4, #16]
 8016994:	2965      	cmp	r1, #101	; 0x65
 8016996:	f103 33ff 	add.w	r3, r3, #4294967295
 801699a:	f106 35ff 	add.w	r5, r6, #4294967295
 801699e:	6123      	str	r3, [r4, #16]
 80169a0:	d00c      	beq.n	80169bc <_scanf_float+0x350>
 80169a2:	2945      	cmp	r1, #69	; 0x45
 80169a4:	d00a      	beq.n	80169bc <_scanf_float+0x350>
 80169a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80169aa:	463a      	mov	r2, r7
 80169ac:	4640      	mov	r0, r8
 80169ae:	4798      	blx	r3
 80169b0:	6923      	ldr	r3, [r4, #16]
 80169b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80169b6:	3b01      	subs	r3, #1
 80169b8:	1eb5      	subs	r5, r6, #2
 80169ba:	6123      	str	r3, [r4, #16]
 80169bc:	463a      	mov	r2, r7
 80169be:	4640      	mov	r0, r8
 80169c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80169c4:	4798      	blx	r3
 80169c6:	462e      	mov	r6, r5
 80169c8:	6825      	ldr	r5, [r4, #0]
 80169ca:	f015 0510 	ands.w	r5, r5, #16
 80169ce:	d159      	bne.n	8016a84 <_scanf_float+0x418>
 80169d0:	7035      	strb	r5, [r6, #0]
 80169d2:	6823      	ldr	r3, [r4, #0]
 80169d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80169d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80169dc:	d11c      	bne.n	8016a18 <_scanf_float+0x3ac>
 80169de:	9b01      	ldr	r3, [sp, #4]
 80169e0:	454b      	cmp	r3, r9
 80169e2:	eba3 0209 	sub.w	r2, r3, r9
 80169e6:	d124      	bne.n	8016a32 <_scanf_float+0x3c6>
 80169e8:	2200      	movs	r2, #0
 80169ea:	4659      	mov	r1, fp
 80169ec:	4640      	mov	r0, r8
 80169ee:	f000 ff47 	bl	8017880 <_strtod_r>
 80169f2:	f8d4 c000 	ldr.w	ip, [r4]
 80169f6:	9b03      	ldr	r3, [sp, #12]
 80169f8:	f01c 0f02 	tst.w	ip, #2
 80169fc:	4606      	mov	r6, r0
 80169fe:	460f      	mov	r7, r1
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	d021      	beq.n	8016a48 <_scanf_float+0x3dc>
 8016a04:	9903      	ldr	r1, [sp, #12]
 8016a06:	1d1a      	adds	r2, r3, #4
 8016a08:	600a      	str	r2, [r1, #0]
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	e9c3 6700 	strd	r6, r7, [r3]
 8016a10:	68e3      	ldr	r3, [r4, #12]
 8016a12:	3301      	adds	r3, #1
 8016a14:	60e3      	str	r3, [r4, #12]
 8016a16:	e66c      	b.n	80166f2 <_scanf_float+0x86>
 8016a18:	9b04      	ldr	r3, [sp, #16]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d0e4      	beq.n	80169e8 <_scanf_float+0x37c>
 8016a1e:	9905      	ldr	r1, [sp, #20]
 8016a20:	230a      	movs	r3, #10
 8016a22:	462a      	mov	r2, r5
 8016a24:	4640      	mov	r0, r8
 8016a26:	3101      	adds	r1, #1
 8016a28:	f000 ffb6 	bl	8017998 <_strtol_r>
 8016a2c:	9b04      	ldr	r3, [sp, #16]
 8016a2e:	9e05      	ldr	r6, [sp, #20]
 8016a30:	1ac2      	subs	r2, r0, r3
 8016a32:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016a36:	429e      	cmp	r6, r3
 8016a38:	bf28      	it	cs
 8016a3a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016a3e:	4630      	mov	r0, r6
 8016a40:	4911      	ldr	r1, [pc, #68]	; (8016a88 <_scanf_float+0x41c>)
 8016a42:	f000 f8a3 	bl	8016b8c <siprintf>
 8016a46:	e7cf      	b.n	80169e8 <_scanf_float+0x37c>
 8016a48:	f01c 0f04 	tst.w	ip, #4
 8016a4c:	f103 0e04 	add.w	lr, r3, #4
 8016a50:	d003      	beq.n	8016a5a <_scanf_float+0x3ee>
 8016a52:	9903      	ldr	r1, [sp, #12]
 8016a54:	f8c1 e000 	str.w	lr, [r1]
 8016a58:	e7d7      	b.n	8016a0a <_scanf_float+0x39e>
 8016a5a:	9a03      	ldr	r2, [sp, #12]
 8016a5c:	f8c2 e000 	str.w	lr, [r2]
 8016a60:	f8d3 8000 	ldr.w	r8, [r3]
 8016a64:	4602      	mov	r2, r0
 8016a66:	460b      	mov	r3, r1
 8016a68:	f7ea f81a 	bl	8000aa0 <__aeabi_dcmpun>
 8016a6c:	b128      	cbz	r0, 8016a7a <_scanf_float+0x40e>
 8016a6e:	4807      	ldr	r0, [pc, #28]	; (8016a8c <_scanf_float+0x420>)
 8016a70:	f000 f888 	bl	8016b84 <nanf>
 8016a74:	f8c8 0000 	str.w	r0, [r8]
 8016a78:	e7ca      	b.n	8016a10 <_scanf_float+0x3a4>
 8016a7a:	4630      	mov	r0, r6
 8016a7c:	4639      	mov	r1, r7
 8016a7e:	f7ea f86d 	bl	8000b5c <__aeabi_d2f>
 8016a82:	e7f7      	b.n	8016a74 <_scanf_float+0x408>
 8016a84:	2500      	movs	r5, #0
 8016a86:	e634      	b.n	80166f2 <_scanf_float+0x86>
 8016a88:	0801a598 	.word	0x0801a598
 8016a8c:	0801a9b0 	.word	0x0801a9b0

08016a90 <cleanup_glue>:
 8016a90:	b538      	push	{r3, r4, r5, lr}
 8016a92:	460c      	mov	r4, r1
 8016a94:	6809      	ldr	r1, [r1, #0]
 8016a96:	4605      	mov	r5, r0
 8016a98:	b109      	cbz	r1, 8016a9e <cleanup_glue+0xe>
 8016a9a:	f7ff fff9 	bl	8016a90 <cleanup_glue>
 8016a9e:	4621      	mov	r1, r4
 8016aa0:	4628      	mov	r0, r5
 8016aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016aa6:	f7ff b8db 	b.w	8015c60 <_free_r>
	...

08016aac <_reclaim_reent>:
 8016aac:	4b2c      	ldr	r3, [pc, #176]	; (8016b60 <_reclaim_reent+0xb4>)
 8016aae:	b570      	push	{r4, r5, r6, lr}
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	4604      	mov	r4, r0
 8016ab4:	4283      	cmp	r3, r0
 8016ab6:	d051      	beq.n	8016b5c <_reclaim_reent+0xb0>
 8016ab8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016aba:	b143      	cbz	r3, 8016ace <_reclaim_reent+0x22>
 8016abc:	68db      	ldr	r3, [r3, #12]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d14a      	bne.n	8016b58 <_reclaim_reent+0xac>
 8016ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ac4:	6819      	ldr	r1, [r3, #0]
 8016ac6:	b111      	cbz	r1, 8016ace <_reclaim_reent+0x22>
 8016ac8:	4620      	mov	r0, r4
 8016aca:	f7ff f8c9 	bl	8015c60 <_free_r>
 8016ace:	6961      	ldr	r1, [r4, #20]
 8016ad0:	b111      	cbz	r1, 8016ad8 <_reclaim_reent+0x2c>
 8016ad2:	4620      	mov	r0, r4
 8016ad4:	f7ff f8c4 	bl	8015c60 <_free_r>
 8016ad8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016ada:	b111      	cbz	r1, 8016ae2 <_reclaim_reent+0x36>
 8016adc:	4620      	mov	r0, r4
 8016ade:	f7ff f8bf 	bl	8015c60 <_free_r>
 8016ae2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016ae4:	b111      	cbz	r1, 8016aec <_reclaim_reent+0x40>
 8016ae6:	4620      	mov	r0, r4
 8016ae8:	f7ff f8ba 	bl	8015c60 <_free_r>
 8016aec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016aee:	b111      	cbz	r1, 8016af6 <_reclaim_reent+0x4a>
 8016af0:	4620      	mov	r0, r4
 8016af2:	f7ff f8b5 	bl	8015c60 <_free_r>
 8016af6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016af8:	b111      	cbz	r1, 8016b00 <_reclaim_reent+0x54>
 8016afa:	4620      	mov	r0, r4
 8016afc:	f7ff f8b0 	bl	8015c60 <_free_r>
 8016b00:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016b02:	b111      	cbz	r1, 8016b0a <_reclaim_reent+0x5e>
 8016b04:	4620      	mov	r0, r4
 8016b06:	f7ff f8ab 	bl	8015c60 <_free_r>
 8016b0a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016b0c:	b111      	cbz	r1, 8016b14 <_reclaim_reent+0x68>
 8016b0e:	4620      	mov	r0, r4
 8016b10:	f7ff f8a6 	bl	8015c60 <_free_r>
 8016b14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016b16:	b111      	cbz	r1, 8016b1e <_reclaim_reent+0x72>
 8016b18:	4620      	mov	r0, r4
 8016b1a:	f7ff f8a1 	bl	8015c60 <_free_r>
 8016b1e:	69a3      	ldr	r3, [r4, #24]
 8016b20:	b1e3      	cbz	r3, 8016b5c <_reclaim_reent+0xb0>
 8016b22:	4620      	mov	r0, r4
 8016b24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016b26:	4798      	blx	r3
 8016b28:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016b2a:	b1b9      	cbz	r1, 8016b5c <_reclaim_reent+0xb0>
 8016b2c:	4620      	mov	r0, r4
 8016b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b32:	f7ff bfad 	b.w	8016a90 <cleanup_glue>
 8016b36:	5949      	ldr	r1, [r1, r5]
 8016b38:	b941      	cbnz	r1, 8016b4c <_reclaim_reent+0xa0>
 8016b3a:	3504      	adds	r5, #4
 8016b3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016b3e:	2d80      	cmp	r5, #128	; 0x80
 8016b40:	68d9      	ldr	r1, [r3, #12]
 8016b42:	d1f8      	bne.n	8016b36 <_reclaim_reent+0x8a>
 8016b44:	4620      	mov	r0, r4
 8016b46:	f7ff f88b 	bl	8015c60 <_free_r>
 8016b4a:	e7ba      	b.n	8016ac2 <_reclaim_reent+0x16>
 8016b4c:	680e      	ldr	r6, [r1, #0]
 8016b4e:	4620      	mov	r0, r4
 8016b50:	f7ff f886 	bl	8015c60 <_free_r>
 8016b54:	4631      	mov	r1, r6
 8016b56:	e7ef      	b.n	8016b38 <_reclaim_reent+0x8c>
 8016b58:	2500      	movs	r5, #0
 8016b5a:	e7ef      	b.n	8016b3c <_reclaim_reent+0x90>
 8016b5c:	bd70      	pop	{r4, r5, r6, pc}
 8016b5e:	bf00      	nop
 8016b60:	20000250 	.word	0x20000250

08016b64 <_sbrk_r>:
 8016b64:	b538      	push	{r3, r4, r5, lr}
 8016b66:	2300      	movs	r3, #0
 8016b68:	4d05      	ldr	r5, [pc, #20]	; (8016b80 <_sbrk_r+0x1c>)
 8016b6a:	4604      	mov	r4, r0
 8016b6c:	4608      	mov	r0, r1
 8016b6e:	602b      	str	r3, [r5, #0]
 8016b70:	f7ee ff4c 	bl	8005a0c <_sbrk>
 8016b74:	1c43      	adds	r3, r0, #1
 8016b76:	d102      	bne.n	8016b7e <_sbrk_r+0x1a>
 8016b78:	682b      	ldr	r3, [r5, #0]
 8016b7a:	b103      	cbz	r3, 8016b7e <_sbrk_r+0x1a>
 8016b7c:	6023      	str	r3, [r4, #0]
 8016b7e:	bd38      	pop	{r3, r4, r5, pc}
 8016b80:	2000e4bc 	.word	0x2000e4bc

08016b84 <nanf>:
 8016b84:	4800      	ldr	r0, [pc, #0]	; (8016b88 <nanf+0x4>)
 8016b86:	4770      	bx	lr
 8016b88:	7fc00000 	.word	0x7fc00000

08016b8c <siprintf>:
 8016b8c:	b40e      	push	{r1, r2, r3}
 8016b8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016b92:	b500      	push	{lr}
 8016b94:	b09c      	sub	sp, #112	; 0x70
 8016b96:	ab1d      	add	r3, sp, #116	; 0x74
 8016b98:	9002      	str	r0, [sp, #8]
 8016b9a:	9006      	str	r0, [sp, #24]
 8016b9c:	9107      	str	r1, [sp, #28]
 8016b9e:	9104      	str	r1, [sp, #16]
 8016ba0:	4808      	ldr	r0, [pc, #32]	; (8016bc4 <siprintf+0x38>)
 8016ba2:	4909      	ldr	r1, [pc, #36]	; (8016bc8 <siprintf+0x3c>)
 8016ba4:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ba8:	9105      	str	r1, [sp, #20]
 8016baa:	6800      	ldr	r0, [r0, #0]
 8016bac:	a902      	add	r1, sp, #8
 8016bae:	9301      	str	r3, [sp, #4]
 8016bb0:	f002 ff20 	bl	80199f4 <_svfiprintf_r>
 8016bb4:	2200      	movs	r2, #0
 8016bb6:	9b02      	ldr	r3, [sp, #8]
 8016bb8:	701a      	strb	r2, [r3, #0]
 8016bba:	b01c      	add	sp, #112	; 0x70
 8016bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8016bc0:	b003      	add	sp, #12
 8016bc2:	4770      	bx	lr
 8016bc4:	20000250 	.word	0x20000250
 8016bc8:	ffff0208 	.word	0xffff0208

08016bcc <__sread>:
 8016bcc:	b510      	push	{r4, lr}
 8016bce:	460c      	mov	r4, r1
 8016bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bd4:	f003 f80e 	bl	8019bf4 <_read_r>
 8016bd8:	2800      	cmp	r0, #0
 8016bda:	bfab      	itete	ge
 8016bdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016bde:	89a3      	ldrhlt	r3, [r4, #12]
 8016be0:	181b      	addge	r3, r3, r0
 8016be2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016be6:	bfac      	ite	ge
 8016be8:	6563      	strge	r3, [r4, #84]	; 0x54
 8016bea:	81a3      	strhlt	r3, [r4, #12]
 8016bec:	bd10      	pop	{r4, pc}

08016bee <__swrite>:
 8016bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bf2:	461f      	mov	r7, r3
 8016bf4:	898b      	ldrh	r3, [r1, #12]
 8016bf6:	4605      	mov	r5, r0
 8016bf8:	05db      	lsls	r3, r3, #23
 8016bfa:	460c      	mov	r4, r1
 8016bfc:	4616      	mov	r6, r2
 8016bfe:	d505      	bpl.n	8016c0c <__swrite+0x1e>
 8016c00:	2302      	movs	r3, #2
 8016c02:	2200      	movs	r2, #0
 8016c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c08:	f002 f994 	bl	8018f34 <_lseek_r>
 8016c0c:	89a3      	ldrh	r3, [r4, #12]
 8016c0e:	4632      	mov	r2, r6
 8016c10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016c14:	81a3      	strh	r3, [r4, #12]
 8016c16:	4628      	mov	r0, r5
 8016c18:	463b      	mov	r3, r7
 8016c1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c22:	f000 bebb 	b.w	801799c <_write_r>

08016c26 <__sseek>:
 8016c26:	b510      	push	{r4, lr}
 8016c28:	460c      	mov	r4, r1
 8016c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c2e:	f002 f981 	bl	8018f34 <_lseek_r>
 8016c32:	1c43      	adds	r3, r0, #1
 8016c34:	89a3      	ldrh	r3, [r4, #12]
 8016c36:	bf15      	itete	ne
 8016c38:	6560      	strne	r0, [r4, #84]	; 0x54
 8016c3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016c3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016c42:	81a3      	strheq	r3, [r4, #12]
 8016c44:	bf18      	it	ne
 8016c46:	81a3      	strhne	r3, [r4, #12]
 8016c48:	bd10      	pop	{r4, pc}

08016c4a <__sclose>:
 8016c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c4e:	f000 beb7 	b.w	80179c0 <_close_r>

08016c52 <sulp>:
 8016c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c56:	460f      	mov	r7, r1
 8016c58:	4690      	mov	r8, r2
 8016c5a:	f002 fd19 	bl	8019690 <__ulp>
 8016c5e:	4604      	mov	r4, r0
 8016c60:	460d      	mov	r5, r1
 8016c62:	f1b8 0f00 	cmp.w	r8, #0
 8016c66:	d011      	beq.n	8016c8c <sulp+0x3a>
 8016c68:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8016c6c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	dd0b      	ble.n	8016c8c <sulp+0x3a>
 8016c74:	2400      	movs	r4, #0
 8016c76:	051b      	lsls	r3, r3, #20
 8016c78:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016c7c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016c80:	4622      	mov	r2, r4
 8016c82:	462b      	mov	r3, r5
 8016c84:	f7e9 fc72 	bl	800056c <__aeabi_dmul>
 8016c88:	4604      	mov	r4, r0
 8016c8a:	460d      	mov	r5, r1
 8016c8c:	4620      	mov	r0, r4
 8016c8e:	4629      	mov	r1, r5
 8016c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c94:	0000      	movs	r0, r0
	...

08016c98 <_strtod_l>:
 8016c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c9c:	469b      	mov	fp, r3
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	b0a1      	sub	sp, #132	; 0x84
 8016ca2:	931c      	str	r3, [sp, #112]	; 0x70
 8016ca4:	4ba1      	ldr	r3, [pc, #644]	; (8016f2c <_strtod_l+0x294>)
 8016ca6:	4682      	mov	sl, r0
 8016ca8:	681f      	ldr	r7, [r3, #0]
 8016caa:	460e      	mov	r6, r1
 8016cac:	4638      	mov	r0, r7
 8016cae:	9217      	str	r2, [sp, #92]	; 0x5c
 8016cb0:	f7e9 fa98 	bl	80001e4 <strlen>
 8016cb4:	f04f 0800 	mov.w	r8, #0
 8016cb8:	4604      	mov	r4, r0
 8016cba:	f04f 0900 	mov.w	r9, #0
 8016cbe:	961b      	str	r6, [sp, #108]	; 0x6c
 8016cc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016cc2:	781a      	ldrb	r2, [r3, #0]
 8016cc4:	2a2b      	cmp	r2, #43	; 0x2b
 8016cc6:	d04c      	beq.n	8016d62 <_strtod_l+0xca>
 8016cc8:	d83a      	bhi.n	8016d40 <_strtod_l+0xa8>
 8016cca:	2a0d      	cmp	r2, #13
 8016ccc:	d833      	bhi.n	8016d36 <_strtod_l+0x9e>
 8016cce:	2a08      	cmp	r2, #8
 8016cd0:	d833      	bhi.n	8016d3a <_strtod_l+0xa2>
 8016cd2:	2a00      	cmp	r2, #0
 8016cd4:	d03d      	beq.n	8016d52 <_strtod_l+0xba>
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	930c      	str	r3, [sp, #48]	; 0x30
 8016cda:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016cdc:	782b      	ldrb	r3, [r5, #0]
 8016cde:	2b30      	cmp	r3, #48	; 0x30
 8016ce0:	f040 80af 	bne.w	8016e42 <_strtod_l+0x1aa>
 8016ce4:	786b      	ldrb	r3, [r5, #1]
 8016ce6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016cea:	2b58      	cmp	r3, #88	; 0x58
 8016cec:	d16c      	bne.n	8016dc8 <_strtod_l+0x130>
 8016cee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016cf0:	4650      	mov	r0, sl
 8016cf2:	9301      	str	r3, [sp, #4]
 8016cf4:	ab1c      	add	r3, sp, #112	; 0x70
 8016cf6:	9300      	str	r3, [sp, #0]
 8016cf8:	4a8d      	ldr	r2, [pc, #564]	; (8016f30 <_strtod_l+0x298>)
 8016cfa:	f8cd b008 	str.w	fp, [sp, #8]
 8016cfe:	ab1d      	add	r3, sp, #116	; 0x74
 8016d00:	a91b      	add	r1, sp, #108	; 0x6c
 8016d02:	f001 fe15 	bl	8018930 <__gethex>
 8016d06:	f010 0607 	ands.w	r6, r0, #7
 8016d0a:	4604      	mov	r4, r0
 8016d0c:	d005      	beq.n	8016d1a <_strtod_l+0x82>
 8016d0e:	2e06      	cmp	r6, #6
 8016d10:	d129      	bne.n	8016d66 <_strtod_l+0xce>
 8016d12:	2300      	movs	r3, #0
 8016d14:	3501      	adds	r5, #1
 8016d16:	951b      	str	r5, [sp, #108]	; 0x6c
 8016d18:	930c      	str	r3, [sp, #48]	; 0x30
 8016d1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	f040 8596 	bne.w	801784e <_strtod_l+0xbb6>
 8016d22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d24:	b1d3      	cbz	r3, 8016d5c <_strtod_l+0xc4>
 8016d26:	4642      	mov	r2, r8
 8016d28:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016d2c:	4610      	mov	r0, r2
 8016d2e:	4619      	mov	r1, r3
 8016d30:	b021      	add	sp, #132	; 0x84
 8016d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d36:	2a20      	cmp	r2, #32
 8016d38:	d1cd      	bne.n	8016cd6 <_strtod_l+0x3e>
 8016d3a:	3301      	adds	r3, #1
 8016d3c:	931b      	str	r3, [sp, #108]	; 0x6c
 8016d3e:	e7bf      	b.n	8016cc0 <_strtod_l+0x28>
 8016d40:	2a2d      	cmp	r2, #45	; 0x2d
 8016d42:	d1c8      	bne.n	8016cd6 <_strtod_l+0x3e>
 8016d44:	2201      	movs	r2, #1
 8016d46:	920c      	str	r2, [sp, #48]	; 0x30
 8016d48:	1c5a      	adds	r2, r3, #1
 8016d4a:	921b      	str	r2, [sp, #108]	; 0x6c
 8016d4c:	785b      	ldrb	r3, [r3, #1]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d1c3      	bne.n	8016cda <_strtod_l+0x42>
 8016d52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d54:	961b      	str	r6, [sp, #108]	; 0x6c
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	f040 8577 	bne.w	801784a <_strtod_l+0xbb2>
 8016d5c:	4642      	mov	r2, r8
 8016d5e:	464b      	mov	r3, r9
 8016d60:	e7e4      	b.n	8016d2c <_strtod_l+0x94>
 8016d62:	2200      	movs	r2, #0
 8016d64:	e7ef      	b.n	8016d46 <_strtod_l+0xae>
 8016d66:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016d68:	b13a      	cbz	r2, 8016d7a <_strtod_l+0xe2>
 8016d6a:	2135      	movs	r1, #53	; 0x35
 8016d6c:	a81e      	add	r0, sp, #120	; 0x78
 8016d6e:	f002 fd93 	bl	8019898 <__copybits>
 8016d72:	4650      	mov	r0, sl
 8016d74:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016d76:	f002 f95b 	bl	8019030 <_Bfree>
 8016d7a:	3e01      	subs	r6, #1
 8016d7c:	2e05      	cmp	r6, #5
 8016d7e:	d807      	bhi.n	8016d90 <_strtod_l+0xf8>
 8016d80:	e8df f006 	tbb	[pc, r6]
 8016d84:	1d180b0e 	.word	0x1d180b0e
 8016d88:	030e      	.short	0x030e
 8016d8a:	f04f 0900 	mov.w	r9, #0
 8016d8e:	46c8      	mov	r8, r9
 8016d90:	0721      	lsls	r1, r4, #28
 8016d92:	d5c2      	bpl.n	8016d1a <_strtod_l+0x82>
 8016d94:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8016d98:	e7bf      	b.n	8016d1a <_strtod_l+0x82>
 8016d9a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8016d9e:	e7f7      	b.n	8016d90 <_strtod_l+0xf8>
 8016da0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016da2:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8016da6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016daa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016dae:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8016db2:	e7ed      	b.n	8016d90 <_strtod_l+0xf8>
 8016db4:	f04f 0800 	mov.w	r8, #0
 8016db8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8016f34 <_strtod_l+0x29c>
 8016dbc:	e7e8      	b.n	8016d90 <_strtod_l+0xf8>
 8016dbe:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8016dc2:	f04f 38ff 	mov.w	r8, #4294967295
 8016dc6:	e7e3      	b.n	8016d90 <_strtod_l+0xf8>
 8016dc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016dca:	1c5a      	adds	r2, r3, #1
 8016dcc:	921b      	str	r2, [sp, #108]	; 0x6c
 8016dce:	785b      	ldrb	r3, [r3, #1]
 8016dd0:	2b30      	cmp	r3, #48	; 0x30
 8016dd2:	d0f9      	beq.n	8016dc8 <_strtod_l+0x130>
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d0a0      	beq.n	8016d1a <_strtod_l+0x82>
 8016dd8:	2301      	movs	r3, #1
 8016dda:	9307      	str	r3, [sp, #28]
 8016ddc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016dde:	220a      	movs	r2, #10
 8016de0:	9308      	str	r3, [sp, #32]
 8016de2:	2300      	movs	r3, #0
 8016de4:	469b      	mov	fp, r3
 8016de6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8016dea:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016dec:	7805      	ldrb	r5, [r0, #0]
 8016dee:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8016df2:	b2d9      	uxtb	r1, r3
 8016df4:	2909      	cmp	r1, #9
 8016df6:	d926      	bls.n	8016e46 <_strtod_l+0x1ae>
 8016df8:	4622      	mov	r2, r4
 8016dfa:	4639      	mov	r1, r7
 8016dfc:	f002 ff12 	bl	8019c24 <strncmp>
 8016e00:	2800      	cmp	r0, #0
 8016e02:	d032      	beq.n	8016e6a <_strtod_l+0x1d2>
 8016e04:	2000      	movs	r0, #0
 8016e06:	462b      	mov	r3, r5
 8016e08:	465c      	mov	r4, fp
 8016e0a:	4602      	mov	r2, r0
 8016e0c:	9004      	str	r0, [sp, #16]
 8016e0e:	2b65      	cmp	r3, #101	; 0x65
 8016e10:	d001      	beq.n	8016e16 <_strtod_l+0x17e>
 8016e12:	2b45      	cmp	r3, #69	; 0x45
 8016e14:	d113      	bne.n	8016e3e <_strtod_l+0x1a6>
 8016e16:	b91c      	cbnz	r4, 8016e20 <_strtod_l+0x188>
 8016e18:	9b07      	ldr	r3, [sp, #28]
 8016e1a:	4303      	orrs	r3, r0
 8016e1c:	d099      	beq.n	8016d52 <_strtod_l+0xba>
 8016e1e:	2400      	movs	r4, #0
 8016e20:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016e22:	1c73      	adds	r3, r6, #1
 8016e24:	931b      	str	r3, [sp, #108]	; 0x6c
 8016e26:	7873      	ldrb	r3, [r6, #1]
 8016e28:	2b2b      	cmp	r3, #43	; 0x2b
 8016e2a:	d078      	beq.n	8016f1e <_strtod_l+0x286>
 8016e2c:	2b2d      	cmp	r3, #45	; 0x2d
 8016e2e:	d07b      	beq.n	8016f28 <_strtod_l+0x290>
 8016e30:	2700      	movs	r7, #0
 8016e32:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016e36:	2909      	cmp	r1, #9
 8016e38:	f240 8082 	bls.w	8016f40 <_strtod_l+0x2a8>
 8016e3c:	961b      	str	r6, [sp, #108]	; 0x6c
 8016e3e:	2500      	movs	r5, #0
 8016e40:	e09e      	b.n	8016f80 <_strtod_l+0x2e8>
 8016e42:	2300      	movs	r3, #0
 8016e44:	e7c9      	b.n	8016dda <_strtod_l+0x142>
 8016e46:	f1bb 0f08 	cmp.w	fp, #8
 8016e4a:	bfd5      	itete	le
 8016e4c:	9906      	ldrle	r1, [sp, #24]
 8016e4e:	9905      	ldrgt	r1, [sp, #20]
 8016e50:	fb02 3301 	mlale	r3, r2, r1, r3
 8016e54:	fb02 3301 	mlagt	r3, r2, r1, r3
 8016e58:	f100 0001 	add.w	r0, r0, #1
 8016e5c:	bfd4      	ite	le
 8016e5e:	9306      	strle	r3, [sp, #24]
 8016e60:	9305      	strgt	r3, [sp, #20]
 8016e62:	f10b 0b01 	add.w	fp, fp, #1
 8016e66:	901b      	str	r0, [sp, #108]	; 0x6c
 8016e68:	e7bf      	b.n	8016dea <_strtod_l+0x152>
 8016e6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e6c:	191a      	adds	r2, r3, r4
 8016e6e:	921b      	str	r2, [sp, #108]	; 0x6c
 8016e70:	5d1b      	ldrb	r3, [r3, r4]
 8016e72:	f1bb 0f00 	cmp.w	fp, #0
 8016e76:	d036      	beq.n	8016ee6 <_strtod_l+0x24e>
 8016e78:	465c      	mov	r4, fp
 8016e7a:	9004      	str	r0, [sp, #16]
 8016e7c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016e80:	2a09      	cmp	r2, #9
 8016e82:	d912      	bls.n	8016eaa <_strtod_l+0x212>
 8016e84:	2201      	movs	r2, #1
 8016e86:	e7c2      	b.n	8016e0e <_strtod_l+0x176>
 8016e88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e8a:	3001      	adds	r0, #1
 8016e8c:	1c5a      	adds	r2, r3, #1
 8016e8e:	921b      	str	r2, [sp, #108]	; 0x6c
 8016e90:	785b      	ldrb	r3, [r3, #1]
 8016e92:	2b30      	cmp	r3, #48	; 0x30
 8016e94:	d0f8      	beq.n	8016e88 <_strtod_l+0x1f0>
 8016e96:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016e9a:	2a08      	cmp	r2, #8
 8016e9c:	f200 84dc 	bhi.w	8017858 <_strtod_l+0xbc0>
 8016ea0:	9004      	str	r0, [sp, #16]
 8016ea2:	2000      	movs	r0, #0
 8016ea4:	4604      	mov	r4, r0
 8016ea6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016ea8:	9208      	str	r2, [sp, #32]
 8016eaa:	3b30      	subs	r3, #48	; 0x30
 8016eac:	f100 0201 	add.w	r2, r0, #1
 8016eb0:	d013      	beq.n	8016eda <_strtod_l+0x242>
 8016eb2:	9904      	ldr	r1, [sp, #16]
 8016eb4:	1905      	adds	r5, r0, r4
 8016eb6:	4411      	add	r1, r2
 8016eb8:	9104      	str	r1, [sp, #16]
 8016eba:	4622      	mov	r2, r4
 8016ebc:	210a      	movs	r1, #10
 8016ebe:	42aa      	cmp	r2, r5
 8016ec0:	d113      	bne.n	8016eea <_strtod_l+0x252>
 8016ec2:	1822      	adds	r2, r4, r0
 8016ec4:	2a08      	cmp	r2, #8
 8016ec6:	f104 0401 	add.w	r4, r4, #1
 8016eca:	4404      	add	r4, r0
 8016ecc:	dc1b      	bgt.n	8016f06 <_strtod_l+0x26e>
 8016ece:	220a      	movs	r2, #10
 8016ed0:	9906      	ldr	r1, [sp, #24]
 8016ed2:	fb02 3301 	mla	r3, r2, r1, r3
 8016ed6:	9306      	str	r3, [sp, #24]
 8016ed8:	2200      	movs	r2, #0
 8016eda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016edc:	4610      	mov	r0, r2
 8016ede:	1c59      	adds	r1, r3, #1
 8016ee0:	911b      	str	r1, [sp, #108]	; 0x6c
 8016ee2:	785b      	ldrb	r3, [r3, #1]
 8016ee4:	e7ca      	b.n	8016e7c <_strtod_l+0x1e4>
 8016ee6:	4658      	mov	r0, fp
 8016ee8:	e7d3      	b.n	8016e92 <_strtod_l+0x1fa>
 8016eea:	2a08      	cmp	r2, #8
 8016eec:	dc04      	bgt.n	8016ef8 <_strtod_l+0x260>
 8016eee:	9f06      	ldr	r7, [sp, #24]
 8016ef0:	434f      	muls	r7, r1
 8016ef2:	9706      	str	r7, [sp, #24]
 8016ef4:	3201      	adds	r2, #1
 8016ef6:	e7e2      	b.n	8016ebe <_strtod_l+0x226>
 8016ef8:	1c57      	adds	r7, r2, #1
 8016efa:	2f10      	cmp	r7, #16
 8016efc:	bfde      	ittt	le
 8016efe:	9f05      	ldrle	r7, [sp, #20]
 8016f00:	434f      	mulle	r7, r1
 8016f02:	9705      	strle	r7, [sp, #20]
 8016f04:	e7f6      	b.n	8016ef4 <_strtod_l+0x25c>
 8016f06:	2c10      	cmp	r4, #16
 8016f08:	bfdf      	itttt	le
 8016f0a:	220a      	movle	r2, #10
 8016f0c:	9905      	ldrle	r1, [sp, #20]
 8016f0e:	fb02 3301 	mlale	r3, r2, r1, r3
 8016f12:	9305      	strle	r3, [sp, #20]
 8016f14:	e7e0      	b.n	8016ed8 <_strtod_l+0x240>
 8016f16:	2300      	movs	r3, #0
 8016f18:	2201      	movs	r2, #1
 8016f1a:	9304      	str	r3, [sp, #16]
 8016f1c:	e77c      	b.n	8016e18 <_strtod_l+0x180>
 8016f1e:	2700      	movs	r7, #0
 8016f20:	1cb3      	adds	r3, r6, #2
 8016f22:	931b      	str	r3, [sp, #108]	; 0x6c
 8016f24:	78b3      	ldrb	r3, [r6, #2]
 8016f26:	e784      	b.n	8016e32 <_strtod_l+0x19a>
 8016f28:	2701      	movs	r7, #1
 8016f2a:	e7f9      	b.n	8016f20 <_strtod_l+0x288>
 8016f2c:	0801a7f0 	.word	0x0801a7f0
 8016f30:	0801a5a0 	.word	0x0801a5a0
 8016f34:	7ff00000 	.word	0x7ff00000
 8016f38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f3a:	1c59      	adds	r1, r3, #1
 8016f3c:	911b      	str	r1, [sp, #108]	; 0x6c
 8016f3e:	785b      	ldrb	r3, [r3, #1]
 8016f40:	2b30      	cmp	r3, #48	; 0x30
 8016f42:	d0f9      	beq.n	8016f38 <_strtod_l+0x2a0>
 8016f44:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8016f48:	2908      	cmp	r1, #8
 8016f4a:	f63f af78 	bhi.w	8016e3e <_strtod_l+0x1a6>
 8016f4e:	f04f 0e0a 	mov.w	lr, #10
 8016f52:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8016f56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f58:	9309      	str	r3, [sp, #36]	; 0x24
 8016f5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f5c:	1c59      	adds	r1, r3, #1
 8016f5e:	911b      	str	r1, [sp, #108]	; 0x6c
 8016f60:	785b      	ldrb	r3, [r3, #1]
 8016f62:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8016f66:	2d09      	cmp	r5, #9
 8016f68:	d935      	bls.n	8016fd6 <_strtod_l+0x33e>
 8016f6a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8016f6c:	1b49      	subs	r1, r1, r5
 8016f6e:	2908      	cmp	r1, #8
 8016f70:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8016f74:	dc02      	bgt.n	8016f7c <_strtod_l+0x2e4>
 8016f76:	4565      	cmp	r5, ip
 8016f78:	bfa8      	it	ge
 8016f7a:	4665      	movge	r5, ip
 8016f7c:	b107      	cbz	r7, 8016f80 <_strtod_l+0x2e8>
 8016f7e:	426d      	negs	r5, r5
 8016f80:	2c00      	cmp	r4, #0
 8016f82:	d14c      	bne.n	801701e <_strtod_l+0x386>
 8016f84:	9907      	ldr	r1, [sp, #28]
 8016f86:	4301      	orrs	r1, r0
 8016f88:	f47f aec7 	bne.w	8016d1a <_strtod_l+0x82>
 8016f8c:	2a00      	cmp	r2, #0
 8016f8e:	f47f aee0 	bne.w	8016d52 <_strtod_l+0xba>
 8016f92:	2b69      	cmp	r3, #105	; 0x69
 8016f94:	d026      	beq.n	8016fe4 <_strtod_l+0x34c>
 8016f96:	dc23      	bgt.n	8016fe0 <_strtod_l+0x348>
 8016f98:	2b49      	cmp	r3, #73	; 0x49
 8016f9a:	d023      	beq.n	8016fe4 <_strtod_l+0x34c>
 8016f9c:	2b4e      	cmp	r3, #78	; 0x4e
 8016f9e:	f47f aed8 	bne.w	8016d52 <_strtod_l+0xba>
 8016fa2:	499c      	ldr	r1, [pc, #624]	; (8017214 <_strtod_l+0x57c>)
 8016fa4:	a81b      	add	r0, sp, #108	; 0x6c
 8016fa6:	f001 ff11 	bl	8018dcc <__match>
 8016faa:	2800      	cmp	r0, #0
 8016fac:	f43f aed1 	beq.w	8016d52 <_strtod_l+0xba>
 8016fb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016fb2:	781b      	ldrb	r3, [r3, #0]
 8016fb4:	2b28      	cmp	r3, #40	; 0x28
 8016fb6:	d12c      	bne.n	8017012 <_strtod_l+0x37a>
 8016fb8:	4997      	ldr	r1, [pc, #604]	; (8017218 <_strtod_l+0x580>)
 8016fba:	aa1e      	add	r2, sp, #120	; 0x78
 8016fbc:	a81b      	add	r0, sp, #108	; 0x6c
 8016fbe:	f001 ff19 	bl	8018df4 <__hexnan>
 8016fc2:	2805      	cmp	r0, #5
 8016fc4:	d125      	bne.n	8017012 <_strtod_l+0x37a>
 8016fc6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016fc8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8016fcc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8016fd0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8016fd4:	e6a1      	b.n	8016d1a <_strtod_l+0x82>
 8016fd6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8016fda:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8016fde:	e7bc      	b.n	8016f5a <_strtod_l+0x2c2>
 8016fe0:	2b6e      	cmp	r3, #110	; 0x6e
 8016fe2:	e7dc      	b.n	8016f9e <_strtod_l+0x306>
 8016fe4:	498d      	ldr	r1, [pc, #564]	; (801721c <_strtod_l+0x584>)
 8016fe6:	a81b      	add	r0, sp, #108	; 0x6c
 8016fe8:	f001 fef0 	bl	8018dcc <__match>
 8016fec:	2800      	cmp	r0, #0
 8016fee:	f43f aeb0 	beq.w	8016d52 <_strtod_l+0xba>
 8016ff2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ff4:	498a      	ldr	r1, [pc, #552]	; (8017220 <_strtod_l+0x588>)
 8016ff6:	3b01      	subs	r3, #1
 8016ff8:	a81b      	add	r0, sp, #108	; 0x6c
 8016ffa:	931b      	str	r3, [sp, #108]	; 0x6c
 8016ffc:	f001 fee6 	bl	8018dcc <__match>
 8017000:	b910      	cbnz	r0, 8017008 <_strtod_l+0x370>
 8017002:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017004:	3301      	adds	r3, #1
 8017006:	931b      	str	r3, [sp, #108]	; 0x6c
 8017008:	f04f 0800 	mov.w	r8, #0
 801700c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8017230 <_strtod_l+0x598>
 8017010:	e683      	b.n	8016d1a <_strtod_l+0x82>
 8017012:	4884      	ldr	r0, [pc, #528]	; (8017224 <_strtod_l+0x58c>)
 8017014:	f002 fe00 	bl	8019c18 <nan>
 8017018:	4680      	mov	r8, r0
 801701a:	4689      	mov	r9, r1
 801701c:	e67d      	b.n	8016d1a <_strtod_l+0x82>
 801701e:	9b04      	ldr	r3, [sp, #16]
 8017020:	f1bb 0f00 	cmp.w	fp, #0
 8017024:	bf08      	it	eq
 8017026:	46a3      	moveq	fp, r4
 8017028:	1aeb      	subs	r3, r5, r3
 801702a:	2c10      	cmp	r4, #16
 801702c:	9806      	ldr	r0, [sp, #24]
 801702e:	4626      	mov	r6, r4
 8017030:	9307      	str	r3, [sp, #28]
 8017032:	bfa8      	it	ge
 8017034:	2610      	movge	r6, #16
 8017036:	f7e9 fa1f 	bl	8000478 <__aeabi_ui2d>
 801703a:	2c09      	cmp	r4, #9
 801703c:	4680      	mov	r8, r0
 801703e:	4689      	mov	r9, r1
 8017040:	dd13      	ble.n	801706a <_strtod_l+0x3d2>
 8017042:	4b79      	ldr	r3, [pc, #484]	; (8017228 <_strtod_l+0x590>)
 8017044:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017048:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801704c:	f7e9 fa8e 	bl	800056c <__aeabi_dmul>
 8017050:	4680      	mov	r8, r0
 8017052:	9805      	ldr	r0, [sp, #20]
 8017054:	4689      	mov	r9, r1
 8017056:	f7e9 fa0f 	bl	8000478 <__aeabi_ui2d>
 801705a:	4602      	mov	r2, r0
 801705c:	460b      	mov	r3, r1
 801705e:	4640      	mov	r0, r8
 8017060:	4649      	mov	r1, r9
 8017062:	f7e9 f8cd 	bl	8000200 <__adddf3>
 8017066:	4680      	mov	r8, r0
 8017068:	4689      	mov	r9, r1
 801706a:	2c0f      	cmp	r4, #15
 801706c:	dc36      	bgt.n	80170dc <_strtod_l+0x444>
 801706e:	9b07      	ldr	r3, [sp, #28]
 8017070:	2b00      	cmp	r3, #0
 8017072:	f43f ae52 	beq.w	8016d1a <_strtod_l+0x82>
 8017076:	dd22      	ble.n	80170be <_strtod_l+0x426>
 8017078:	2b16      	cmp	r3, #22
 801707a:	dc09      	bgt.n	8017090 <_strtod_l+0x3f8>
 801707c:	4c6a      	ldr	r4, [pc, #424]	; (8017228 <_strtod_l+0x590>)
 801707e:	4642      	mov	r2, r8
 8017080:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8017084:	464b      	mov	r3, r9
 8017086:	e9d4 0100 	ldrd	r0, r1, [r4]
 801708a:	f7e9 fa6f 	bl	800056c <__aeabi_dmul>
 801708e:	e7c3      	b.n	8017018 <_strtod_l+0x380>
 8017090:	9a07      	ldr	r2, [sp, #28]
 8017092:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8017096:	4293      	cmp	r3, r2
 8017098:	db20      	blt.n	80170dc <_strtod_l+0x444>
 801709a:	4d63      	ldr	r5, [pc, #396]	; (8017228 <_strtod_l+0x590>)
 801709c:	f1c4 040f 	rsb	r4, r4, #15
 80170a0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80170a4:	4642      	mov	r2, r8
 80170a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80170aa:	464b      	mov	r3, r9
 80170ac:	f7e9 fa5e 	bl	800056c <__aeabi_dmul>
 80170b0:	9b07      	ldr	r3, [sp, #28]
 80170b2:	1b1c      	subs	r4, r3, r4
 80170b4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80170b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80170bc:	e7e5      	b.n	801708a <_strtod_l+0x3f2>
 80170be:	9b07      	ldr	r3, [sp, #28]
 80170c0:	3316      	adds	r3, #22
 80170c2:	db0b      	blt.n	80170dc <_strtod_l+0x444>
 80170c4:	9b04      	ldr	r3, [sp, #16]
 80170c6:	4a58      	ldr	r2, [pc, #352]	; (8017228 <_strtod_l+0x590>)
 80170c8:	1b5d      	subs	r5, r3, r5
 80170ca:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80170ce:	4640      	mov	r0, r8
 80170d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80170d4:	4649      	mov	r1, r9
 80170d6:	f7e9 fb73 	bl	80007c0 <__aeabi_ddiv>
 80170da:	e79d      	b.n	8017018 <_strtod_l+0x380>
 80170dc:	9b07      	ldr	r3, [sp, #28]
 80170de:	1ba6      	subs	r6, r4, r6
 80170e0:	441e      	add	r6, r3
 80170e2:	2e00      	cmp	r6, #0
 80170e4:	dd71      	ble.n	80171ca <_strtod_l+0x532>
 80170e6:	f016 030f 	ands.w	r3, r6, #15
 80170ea:	d00a      	beq.n	8017102 <_strtod_l+0x46a>
 80170ec:	494e      	ldr	r1, [pc, #312]	; (8017228 <_strtod_l+0x590>)
 80170ee:	4642      	mov	r2, r8
 80170f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80170f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80170f8:	464b      	mov	r3, r9
 80170fa:	f7e9 fa37 	bl	800056c <__aeabi_dmul>
 80170fe:	4680      	mov	r8, r0
 8017100:	4689      	mov	r9, r1
 8017102:	f036 060f 	bics.w	r6, r6, #15
 8017106:	d050      	beq.n	80171aa <_strtod_l+0x512>
 8017108:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 801710c:	dd27      	ble.n	801715e <_strtod_l+0x4c6>
 801710e:	f04f 0b00 	mov.w	fp, #0
 8017112:	f8cd b010 	str.w	fp, [sp, #16]
 8017116:	f8cd b020 	str.w	fp, [sp, #32]
 801711a:	f8cd b018 	str.w	fp, [sp, #24]
 801711e:	2322      	movs	r3, #34	; 0x22
 8017120:	f04f 0800 	mov.w	r8, #0
 8017124:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8017230 <_strtod_l+0x598>
 8017128:	f8ca 3000 	str.w	r3, [sl]
 801712c:	9b08      	ldr	r3, [sp, #32]
 801712e:	2b00      	cmp	r3, #0
 8017130:	f43f adf3 	beq.w	8016d1a <_strtod_l+0x82>
 8017134:	4650      	mov	r0, sl
 8017136:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017138:	f001 ff7a 	bl	8019030 <_Bfree>
 801713c:	4650      	mov	r0, sl
 801713e:	9906      	ldr	r1, [sp, #24]
 8017140:	f001 ff76 	bl	8019030 <_Bfree>
 8017144:	4650      	mov	r0, sl
 8017146:	9904      	ldr	r1, [sp, #16]
 8017148:	f001 ff72 	bl	8019030 <_Bfree>
 801714c:	4650      	mov	r0, sl
 801714e:	9908      	ldr	r1, [sp, #32]
 8017150:	f001 ff6e 	bl	8019030 <_Bfree>
 8017154:	4659      	mov	r1, fp
 8017156:	4650      	mov	r0, sl
 8017158:	f001 ff6a 	bl	8019030 <_Bfree>
 801715c:	e5dd      	b.n	8016d1a <_strtod_l+0x82>
 801715e:	2300      	movs	r3, #0
 8017160:	4640      	mov	r0, r8
 8017162:	4649      	mov	r1, r9
 8017164:	461f      	mov	r7, r3
 8017166:	1136      	asrs	r6, r6, #4
 8017168:	2e01      	cmp	r6, #1
 801716a:	dc21      	bgt.n	80171b0 <_strtod_l+0x518>
 801716c:	b10b      	cbz	r3, 8017172 <_strtod_l+0x4da>
 801716e:	4680      	mov	r8, r0
 8017170:	4689      	mov	r9, r1
 8017172:	4b2e      	ldr	r3, [pc, #184]	; (801722c <_strtod_l+0x594>)
 8017174:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8017178:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801717c:	4642      	mov	r2, r8
 801717e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017182:	464b      	mov	r3, r9
 8017184:	f7e9 f9f2 	bl	800056c <__aeabi_dmul>
 8017188:	4b29      	ldr	r3, [pc, #164]	; (8017230 <_strtod_l+0x598>)
 801718a:	460a      	mov	r2, r1
 801718c:	400b      	ands	r3, r1
 801718e:	4929      	ldr	r1, [pc, #164]	; (8017234 <_strtod_l+0x59c>)
 8017190:	4680      	mov	r8, r0
 8017192:	428b      	cmp	r3, r1
 8017194:	d8bb      	bhi.n	801710e <_strtod_l+0x476>
 8017196:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801719a:	428b      	cmp	r3, r1
 801719c:	bf86      	itte	hi
 801719e:	f04f 38ff 	movhi.w	r8, #4294967295
 80171a2:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8017238 <_strtod_l+0x5a0>
 80171a6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80171aa:	2300      	movs	r3, #0
 80171ac:	9305      	str	r3, [sp, #20]
 80171ae:	e07e      	b.n	80172ae <_strtod_l+0x616>
 80171b0:	07f2      	lsls	r2, r6, #31
 80171b2:	d507      	bpl.n	80171c4 <_strtod_l+0x52c>
 80171b4:	4b1d      	ldr	r3, [pc, #116]	; (801722c <_strtod_l+0x594>)
 80171b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80171ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171be:	f7e9 f9d5 	bl	800056c <__aeabi_dmul>
 80171c2:	2301      	movs	r3, #1
 80171c4:	3701      	adds	r7, #1
 80171c6:	1076      	asrs	r6, r6, #1
 80171c8:	e7ce      	b.n	8017168 <_strtod_l+0x4d0>
 80171ca:	d0ee      	beq.n	80171aa <_strtod_l+0x512>
 80171cc:	4276      	negs	r6, r6
 80171ce:	f016 020f 	ands.w	r2, r6, #15
 80171d2:	d00a      	beq.n	80171ea <_strtod_l+0x552>
 80171d4:	4b14      	ldr	r3, [pc, #80]	; (8017228 <_strtod_l+0x590>)
 80171d6:	4640      	mov	r0, r8
 80171d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80171dc:	4649      	mov	r1, r9
 80171de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171e2:	f7e9 faed 	bl	80007c0 <__aeabi_ddiv>
 80171e6:	4680      	mov	r8, r0
 80171e8:	4689      	mov	r9, r1
 80171ea:	1136      	asrs	r6, r6, #4
 80171ec:	d0dd      	beq.n	80171aa <_strtod_l+0x512>
 80171ee:	2e1f      	cmp	r6, #31
 80171f0:	dd24      	ble.n	801723c <_strtod_l+0x5a4>
 80171f2:	f04f 0b00 	mov.w	fp, #0
 80171f6:	f8cd b010 	str.w	fp, [sp, #16]
 80171fa:	f8cd b020 	str.w	fp, [sp, #32]
 80171fe:	f8cd b018 	str.w	fp, [sp, #24]
 8017202:	2322      	movs	r3, #34	; 0x22
 8017204:	f04f 0800 	mov.w	r8, #0
 8017208:	f04f 0900 	mov.w	r9, #0
 801720c:	f8ca 3000 	str.w	r3, [sl]
 8017210:	e78c      	b.n	801712c <_strtod_l+0x494>
 8017212:	bf00      	nop
 8017214:	0801a571 	.word	0x0801a571
 8017218:	0801a5b4 	.word	0x0801a5b4
 801721c:	0801a569 	.word	0x0801a569
 8017220:	0801a6f4 	.word	0x0801a6f4
 8017224:	0801a9b0 	.word	0x0801a9b0
 8017228:	0801a890 	.word	0x0801a890
 801722c:	0801a868 	.word	0x0801a868
 8017230:	7ff00000 	.word	0x7ff00000
 8017234:	7ca00000 	.word	0x7ca00000
 8017238:	7fefffff 	.word	0x7fefffff
 801723c:	f016 0310 	ands.w	r3, r6, #16
 8017240:	bf18      	it	ne
 8017242:	236a      	movne	r3, #106	; 0x6a
 8017244:	4640      	mov	r0, r8
 8017246:	9305      	str	r3, [sp, #20]
 8017248:	4649      	mov	r1, r9
 801724a:	2300      	movs	r3, #0
 801724c:	4fb2      	ldr	r7, [pc, #712]	; (8017518 <_strtod_l+0x880>)
 801724e:	07f2      	lsls	r2, r6, #31
 8017250:	d504      	bpl.n	801725c <_strtod_l+0x5c4>
 8017252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017256:	f7e9 f989 	bl	800056c <__aeabi_dmul>
 801725a:	2301      	movs	r3, #1
 801725c:	1076      	asrs	r6, r6, #1
 801725e:	f107 0708 	add.w	r7, r7, #8
 8017262:	d1f4      	bne.n	801724e <_strtod_l+0x5b6>
 8017264:	b10b      	cbz	r3, 801726a <_strtod_l+0x5d2>
 8017266:	4680      	mov	r8, r0
 8017268:	4689      	mov	r9, r1
 801726a:	9b05      	ldr	r3, [sp, #20]
 801726c:	b1bb      	cbz	r3, 801729e <_strtod_l+0x606>
 801726e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8017272:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017276:	2b00      	cmp	r3, #0
 8017278:	4649      	mov	r1, r9
 801727a:	dd10      	ble.n	801729e <_strtod_l+0x606>
 801727c:	2b1f      	cmp	r3, #31
 801727e:	f340 812b 	ble.w	80174d8 <_strtod_l+0x840>
 8017282:	2b34      	cmp	r3, #52	; 0x34
 8017284:	bfd8      	it	le
 8017286:	f04f 32ff 	movle.w	r2, #4294967295
 801728a:	f04f 0800 	mov.w	r8, #0
 801728e:	bfcf      	iteee	gt
 8017290:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8017294:	3b20      	suble	r3, #32
 8017296:	fa02 f303 	lslle.w	r3, r2, r3
 801729a:	ea03 0901 	andle.w	r9, r3, r1
 801729e:	2200      	movs	r2, #0
 80172a0:	2300      	movs	r3, #0
 80172a2:	4640      	mov	r0, r8
 80172a4:	4649      	mov	r1, r9
 80172a6:	f7e9 fbc9 	bl	8000a3c <__aeabi_dcmpeq>
 80172aa:	2800      	cmp	r0, #0
 80172ac:	d1a1      	bne.n	80171f2 <_strtod_l+0x55a>
 80172ae:	9b06      	ldr	r3, [sp, #24]
 80172b0:	465a      	mov	r2, fp
 80172b2:	9300      	str	r3, [sp, #0]
 80172b4:	4650      	mov	r0, sl
 80172b6:	4623      	mov	r3, r4
 80172b8:	9908      	ldr	r1, [sp, #32]
 80172ba:	f001 ff25 	bl	8019108 <__s2b>
 80172be:	9008      	str	r0, [sp, #32]
 80172c0:	2800      	cmp	r0, #0
 80172c2:	f43f af24 	beq.w	801710e <_strtod_l+0x476>
 80172c6:	9b04      	ldr	r3, [sp, #16]
 80172c8:	f04f 0b00 	mov.w	fp, #0
 80172cc:	1b5d      	subs	r5, r3, r5
 80172ce:	9b07      	ldr	r3, [sp, #28]
 80172d0:	f8cd b010 	str.w	fp, [sp, #16]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	bfb4      	ite	lt
 80172d8:	462b      	movlt	r3, r5
 80172da:	2300      	movge	r3, #0
 80172dc:	930e      	str	r3, [sp, #56]	; 0x38
 80172de:	9b07      	ldr	r3, [sp, #28]
 80172e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80172e4:	9316      	str	r3, [sp, #88]	; 0x58
 80172e6:	9b08      	ldr	r3, [sp, #32]
 80172e8:	4650      	mov	r0, sl
 80172ea:	6859      	ldr	r1, [r3, #4]
 80172ec:	f001 fe60 	bl	8018fb0 <_Balloc>
 80172f0:	9006      	str	r0, [sp, #24]
 80172f2:	2800      	cmp	r0, #0
 80172f4:	f43f af13 	beq.w	801711e <_strtod_l+0x486>
 80172f8:	9b08      	ldr	r3, [sp, #32]
 80172fa:	300c      	adds	r0, #12
 80172fc:	691a      	ldr	r2, [r3, #16]
 80172fe:	f103 010c 	add.w	r1, r3, #12
 8017302:	3202      	adds	r2, #2
 8017304:	0092      	lsls	r2, r2, #2
 8017306:	f7fe fc95 	bl	8015c34 <memcpy>
 801730a:	ab1e      	add	r3, sp, #120	; 0x78
 801730c:	9301      	str	r3, [sp, #4]
 801730e:	ab1d      	add	r3, sp, #116	; 0x74
 8017310:	9300      	str	r3, [sp, #0]
 8017312:	4642      	mov	r2, r8
 8017314:	464b      	mov	r3, r9
 8017316:	4650      	mov	r0, sl
 8017318:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 801731c:	f002 fa32 	bl	8019784 <__d2b>
 8017320:	901c      	str	r0, [sp, #112]	; 0x70
 8017322:	2800      	cmp	r0, #0
 8017324:	f43f aefb 	beq.w	801711e <_strtod_l+0x486>
 8017328:	2101      	movs	r1, #1
 801732a:	4650      	mov	r0, sl
 801732c:	f001 ff84 	bl	8019238 <__i2b>
 8017330:	4603      	mov	r3, r0
 8017332:	9004      	str	r0, [sp, #16]
 8017334:	2800      	cmp	r0, #0
 8017336:	f43f aef2 	beq.w	801711e <_strtod_l+0x486>
 801733a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801733c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801733e:	2d00      	cmp	r5, #0
 8017340:	bfab      	itete	ge
 8017342:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8017344:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8017346:	18ee      	addge	r6, r5, r3
 8017348:	1b5c      	sublt	r4, r3, r5
 801734a:	9b05      	ldr	r3, [sp, #20]
 801734c:	bfa8      	it	ge
 801734e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8017350:	eba5 0503 	sub.w	r5, r5, r3
 8017354:	4415      	add	r5, r2
 8017356:	4b71      	ldr	r3, [pc, #452]	; (801751c <_strtod_l+0x884>)
 8017358:	f105 35ff 	add.w	r5, r5, #4294967295
 801735c:	bfb8      	it	lt
 801735e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8017360:	429d      	cmp	r5, r3
 8017362:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017366:	f280 80c9 	bge.w	80174fc <_strtod_l+0x864>
 801736a:	1b5b      	subs	r3, r3, r5
 801736c:	2b1f      	cmp	r3, #31
 801736e:	f04f 0701 	mov.w	r7, #1
 8017372:	eba2 0203 	sub.w	r2, r2, r3
 8017376:	f300 80b6 	bgt.w	80174e6 <_strtod_l+0x84e>
 801737a:	2500      	movs	r5, #0
 801737c:	fa07 f303 	lsl.w	r3, r7, r3
 8017380:	930f      	str	r3, [sp, #60]	; 0x3c
 8017382:	18b7      	adds	r7, r6, r2
 8017384:	9b05      	ldr	r3, [sp, #20]
 8017386:	42be      	cmp	r6, r7
 8017388:	4414      	add	r4, r2
 801738a:	441c      	add	r4, r3
 801738c:	4633      	mov	r3, r6
 801738e:	bfa8      	it	ge
 8017390:	463b      	movge	r3, r7
 8017392:	42a3      	cmp	r3, r4
 8017394:	bfa8      	it	ge
 8017396:	4623      	movge	r3, r4
 8017398:	2b00      	cmp	r3, #0
 801739a:	bfc2      	ittt	gt
 801739c:	1aff      	subgt	r7, r7, r3
 801739e:	1ae4      	subgt	r4, r4, r3
 80173a0:	1af6      	subgt	r6, r6, r3
 80173a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	dd17      	ble.n	80173d8 <_strtod_l+0x740>
 80173a8:	461a      	mov	r2, r3
 80173aa:	4650      	mov	r0, sl
 80173ac:	9904      	ldr	r1, [sp, #16]
 80173ae:	f001 fffd 	bl	80193ac <__pow5mult>
 80173b2:	9004      	str	r0, [sp, #16]
 80173b4:	2800      	cmp	r0, #0
 80173b6:	f43f aeb2 	beq.w	801711e <_strtod_l+0x486>
 80173ba:	4601      	mov	r1, r0
 80173bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80173be:	4650      	mov	r0, sl
 80173c0:	f001 ff50 	bl	8019264 <__multiply>
 80173c4:	9009      	str	r0, [sp, #36]	; 0x24
 80173c6:	2800      	cmp	r0, #0
 80173c8:	f43f aea9 	beq.w	801711e <_strtod_l+0x486>
 80173cc:	4650      	mov	r0, sl
 80173ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80173d0:	f001 fe2e 	bl	8019030 <_Bfree>
 80173d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173d6:	931c      	str	r3, [sp, #112]	; 0x70
 80173d8:	2f00      	cmp	r7, #0
 80173da:	f300 8093 	bgt.w	8017504 <_strtod_l+0x86c>
 80173de:	9b07      	ldr	r3, [sp, #28]
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	dd08      	ble.n	80173f6 <_strtod_l+0x75e>
 80173e4:	4650      	mov	r0, sl
 80173e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80173e8:	9906      	ldr	r1, [sp, #24]
 80173ea:	f001 ffdf 	bl	80193ac <__pow5mult>
 80173ee:	9006      	str	r0, [sp, #24]
 80173f0:	2800      	cmp	r0, #0
 80173f2:	f43f ae94 	beq.w	801711e <_strtod_l+0x486>
 80173f6:	2c00      	cmp	r4, #0
 80173f8:	dd08      	ble.n	801740c <_strtod_l+0x774>
 80173fa:	4622      	mov	r2, r4
 80173fc:	4650      	mov	r0, sl
 80173fe:	9906      	ldr	r1, [sp, #24]
 8017400:	f002 f82e 	bl	8019460 <__lshift>
 8017404:	9006      	str	r0, [sp, #24]
 8017406:	2800      	cmp	r0, #0
 8017408:	f43f ae89 	beq.w	801711e <_strtod_l+0x486>
 801740c:	2e00      	cmp	r6, #0
 801740e:	dd08      	ble.n	8017422 <_strtod_l+0x78a>
 8017410:	4632      	mov	r2, r6
 8017412:	4650      	mov	r0, sl
 8017414:	9904      	ldr	r1, [sp, #16]
 8017416:	f002 f823 	bl	8019460 <__lshift>
 801741a:	9004      	str	r0, [sp, #16]
 801741c:	2800      	cmp	r0, #0
 801741e:	f43f ae7e 	beq.w	801711e <_strtod_l+0x486>
 8017422:	4650      	mov	r0, sl
 8017424:	9a06      	ldr	r2, [sp, #24]
 8017426:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017428:	f002 f8a2 	bl	8019570 <__mdiff>
 801742c:	4683      	mov	fp, r0
 801742e:	2800      	cmp	r0, #0
 8017430:	f43f ae75 	beq.w	801711e <_strtod_l+0x486>
 8017434:	2400      	movs	r4, #0
 8017436:	68c3      	ldr	r3, [r0, #12]
 8017438:	9904      	ldr	r1, [sp, #16]
 801743a:	60c4      	str	r4, [r0, #12]
 801743c:	930d      	str	r3, [sp, #52]	; 0x34
 801743e:	f002 f87b 	bl	8019538 <__mcmp>
 8017442:	42a0      	cmp	r0, r4
 8017444:	da70      	bge.n	8017528 <_strtod_l+0x890>
 8017446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017448:	ea53 0308 	orrs.w	r3, r3, r8
 801744c:	f040 8096 	bne.w	801757c <_strtod_l+0x8e4>
 8017450:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017454:	2b00      	cmp	r3, #0
 8017456:	f040 8091 	bne.w	801757c <_strtod_l+0x8e4>
 801745a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801745e:	0d1b      	lsrs	r3, r3, #20
 8017460:	051b      	lsls	r3, r3, #20
 8017462:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017466:	f240 8089 	bls.w	801757c <_strtod_l+0x8e4>
 801746a:	f8db 3014 	ldr.w	r3, [fp, #20]
 801746e:	b923      	cbnz	r3, 801747a <_strtod_l+0x7e2>
 8017470:	f8db 3010 	ldr.w	r3, [fp, #16]
 8017474:	2b01      	cmp	r3, #1
 8017476:	f340 8081 	ble.w	801757c <_strtod_l+0x8e4>
 801747a:	4659      	mov	r1, fp
 801747c:	2201      	movs	r2, #1
 801747e:	4650      	mov	r0, sl
 8017480:	f001 ffee 	bl	8019460 <__lshift>
 8017484:	9904      	ldr	r1, [sp, #16]
 8017486:	4683      	mov	fp, r0
 8017488:	f002 f856 	bl	8019538 <__mcmp>
 801748c:	2800      	cmp	r0, #0
 801748e:	dd75      	ble.n	801757c <_strtod_l+0x8e4>
 8017490:	9905      	ldr	r1, [sp, #20]
 8017492:	464b      	mov	r3, r9
 8017494:	4a22      	ldr	r2, [pc, #136]	; (8017520 <_strtod_l+0x888>)
 8017496:	2900      	cmp	r1, #0
 8017498:	f000 8091 	beq.w	80175be <_strtod_l+0x926>
 801749c:	ea02 0109 	and.w	r1, r2, r9
 80174a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80174a4:	f300 808b 	bgt.w	80175be <_strtod_l+0x926>
 80174a8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80174ac:	f77f aea9 	ble.w	8017202 <_strtod_l+0x56a>
 80174b0:	2300      	movs	r3, #0
 80174b2:	4a1c      	ldr	r2, [pc, #112]	; (8017524 <_strtod_l+0x88c>)
 80174b4:	4640      	mov	r0, r8
 80174b6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80174ba:	4649      	mov	r1, r9
 80174bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80174c0:	f7e9 f854 	bl	800056c <__aeabi_dmul>
 80174c4:	460b      	mov	r3, r1
 80174c6:	4303      	orrs	r3, r0
 80174c8:	bf08      	it	eq
 80174ca:	2322      	moveq	r3, #34	; 0x22
 80174cc:	4680      	mov	r8, r0
 80174ce:	4689      	mov	r9, r1
 80174d0:	bf08      	it	eq
 80174d2:	f8ca 3000 	streq.w	r3, [sl]
 80174d6:	e62d      	b.n	8017134 <_strtod_l+0x49c>
 80174d8:	f04f 32ff 	mov.w	r2, #4294967295
 80174dc:	fa02 f303 	lsl.w	r3, r2, r3
 80174e0:	ea03 0808 	and.w	r8, r3, r8
 80174e4:	e6db      	b.n	801729e <_strtod_l+0x606>
 80174e6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80174ea:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80174ee:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80174f2:	35e2      	adds	r5, #226	; 0xe2
 80174f4:	fa07 f505 	lsl.w	r5, r7, r5
 80174f8:	970f      	str	r7, [sp, #60]	; 0x3c
 80174fa:	e742      	b.n	8017382 <_strtod_l+0x6ea>
 80174fc:	2301      	movs	r3, #1
 80174fe:	2500      	movs	r5, #0
 8017500:	930f      	str	r3, [sp, #60]	; 0x3c
 8017502:	e73e      	b.n	8017382 <_strtod_l+0x6ea>
 8017504:	463a      	mov	r2, r7
 8017506:	4650      	mov	r0, sl
 8017508:	991c      	ldr	r1, [sp, #112]	; 0x70
 801750a:	f001 ffa9 	bl	8019460 <__lshift>
 801750e:	901c      	str	r0, [sp, #112]	; 0x70
 8017510:	2800      	cmp	r0, #0
 8017512:	f47f af64 	bne.w	80173de <_strtod_l+0x746>
 8017516:	e602      	b.n	801711e <_strtod_l+0x486>
 8017518:	0801a5c8 	.word	0x0801a5c8
 801751c:	fffffc02 	.word	0xfffffc02
 8017520:	7ff00000 	.word	0x7ff00000
 8017524:	39500000 	.word	0x39500000
 8017528:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801752c:	d166      	bne.n	80175fc <_strtod_l+0x964>
 801752e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017530:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017534:	b35a      	cbz	r2, 801758e <_strtod_l+0x8f6>
 8017536:	4a9c      	ldr	r2, [pc, #624]	; (80177a8 <_strtod_l+0xb10>)
 8017538:	4293      	cmp	r3, r2
 801753a:	d12c      	bne.n	8017596 <_strtod_l+0x8fe>
 801753c:	9b05      	ldr	r3, [sp, #20]
 801753e:	4640      	mov	r0, r8
 8017540:	b303      	cbz	r3, 8017584 <_strtod_l+0x8ec>
 8017542:	464b      	mov	r3, r9
 8017544:	4a99      	ldr	r2, [pc, #612]	; (80177ac <_strtod_l+0xb14>)
 8017546:	f04f 31ff 	mov.w	r1, #4294967295
 801754a:	401a      	ands	r2, r3
 801754c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017550:	d81b      	bhi.n	801758a <_strtod_l+0x8f2>
 8017552:	0d12      	lsrs	r2, r2, #20
 8017554:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017558:	fa01 f303 	lsl.w	r3, r1, r3
 801755c:	4298      	cmp	r0, r3
 801755e:	d11a      	bne.n	8017596 <_strtod_l+0x8fe>
 8017560:	4b93      	ldr	r3, [pc, #588]	; (80177b0 <_strtod_l+0xb18>)
 8017562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017564:	429a      	cmp	r2, r3
 8017566:	d102      	bne.n	801756e <_strtod_l+0x8d6>
 8017568:	3001      	adds	r0, #1
 801756a:	f43f add8 	beq.w	801711e <_strtod_l+0x486>
 801756e:	f04f 0800 	mov.w	r8, #0
 8017572:	4b8e      	ldr	r3, [pc, #568]	; (80177ac <_strtod_l+0xb14>)
 8017574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017576:	401a      	ands	r2, r3
 8017578:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 801757c:	9b05      	ldr	r3, [sp, #20]
 801757e:	2b00      	cmp	r3, #0
 8017580:	d196      	bne.n	80174b0 <_strtod_l+0x818>
 8017582:	e5d7      	b.n	8017134 <_strtod_l+0x49c>
 8017584:	f04f 33ff 	mov.w	r3, #4294967295
 8017588:	e7e8      	b.n	801755c <_strtod_l+0x8c4>
 801758a:	460b      	mov	r3, r1
 801758c:	e7e6      	b.n	801755c <_strtod_l+0x8c4>
 801758e:	ea53 0308 	orrs.w	r3, r3, r8
 8017592:	f43f af7d 	beq.w	8017490 <_strtod_l+0x7f8>
 8017596:	b1e5      	cbz	r5, 80175d2 <_strtod_l+0x93a>
 8017598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801759a:	421d      	tst	r5, r3
 801759c:	d0ee      	beq.n	801757c <_strtod_l+0x8e4>
 801759e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80175a0:	4640      	mov	r0, r8
 80175a2:	4649      	mov	r1, r9
 80175a4:	9a05      	ldr	r2, [sp, #20]
 80175a6:	b1c3      	cbz	r3, 80175da <_strtod_l+0x942>
 80175a8:	f7ff fb53 	bl	8016c52 <sulp>
 80175ac:	4602      	mov	r2, r0
 80175ae:	460b      	mov	r3, r1
 80175b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80175b4:	f7e8 fe24 	bl	8000200 <__adddf3>
 80175b8:	4680      	mov	r8, r0
 80175ba:	4689      	mov	r9, r1
 80175bc:	e7de      	b.n	801757c <_strtod_l+0x8e4>
 80175be:	4013      	ands	r3, r2
 80175c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80175c4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80175c8:	f04f 38ff 	mov.w	r8, #4294967295
 80175cc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80175d0:	e7d4      	b.n	801757c <_strtod_l+0x8e4>
 80175d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80175d4:	ea13 0f08 	tst.w	r3, r8
 80175d8:	e7e0      	b.n	801759c <_strtod_l+0x904>
 80175da:	f7ff fb3a 	bl	8016c52 <sulp>
 80175de:	4602      	mov	r2, r0
 80175e0:	460b      	mov	r3, r1
 80175e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80175e6:	f7e8 fe09 	bl	80001fc <__aeabi_dsub>
 80175ea:	2200      	movs	r2, #0
 80175ec:	2300      	movs	r3, #0
 80175ee:	4680      	mov	r8, r0
 80175f0:	4689      	mov	r9, r1
 80175f2:	f7e9 fa23 	bl	8000a3c <__aeabi_dcmpeq>
 80175f6:	2800      	cmp	r0, #0
 80175f8:	d0c0      	beq.n	801757c <_strtod_l+0x8e4>
 80175fa:	e602      	b.n	8017202 <_strtod_l+0x56a>
 80175fc:	4658      	mov	r0, fp
 80175fe:	9904      	ldr	r1, [sp, #16]
 8017600:	f002 f91c 	bl	801983c <__ratio>
 8017604:	2200      	movs	r2, #0
 8017606:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801760a:	4606      	mov	r6, r0
 801760c:	460f      	mov	r7, r1
 801760e:	f7e9 fa29 	bl	8000a64 <__aeabi_dcmple>
 8017612:	2800      	cmp	r0, #0
 8017614:	d075      	beq.n	8017702 <_strtod_l+0xa6a>
 8017616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017618:	2b00      	cmp	r3, #0
 801761a:	d047      	beq.n	80176ac <_strtod_l+0xa14>
 801761c:	2600      	movs	r6, #0
 801761e:	4f65      	ldr	r7, [pc, #404]	; (80177b4 <_strtod_l+0xb1c>)
 8017620:	4d64      	ldr	r5, [pc, #400]	; (80177b4 <_strtod_l+0xb1c>)
 8017622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017624:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017628:	0d1b      	lsrs	r3, r3, #20
 801762a:	051b      	lsls	r3, r3, #20
 801762c:	930f      	str	r3, [sp, #60]	; 0x3c
 801762e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017630:	4b61      	ldr	r3, [pc, #388]	; (80177b8 <_strtod_l+0xb20>)
 8017632:	429a      	cmp	r2, r3
 8017634:	f040 80c8 	bne.w	80177c8 <_strtod_l+0xb30>
 8017638:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801763c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8017640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017642:	4640      	mov	r0, r8
 8017644:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8017648:	4649      	mov	r1, r9
 801764a:	f002 f821 	bl	8019690 <__ulp>
 801764e:	4602      	mov	r2, r0
 8017650:	460b      	mov	r3, r1
 8017652:	4630      	mov	r0, r6
 8017654:	4639      	mov	r1, r7
 8017656:	f7e8 ff89 	bl	800056c <__aeabi_dmul>
 801765a:	4642      	mov	r2, r8
 801765c:	464b      	mov	r3, r9
 801765e:	f7e8 fdcf 	bl	8000200 <__adddf3>
 8017662:	460b      	mov	r3, r1
 8017664:	4951      	ldr	r1, [pc, #324]	; (80177ac <_strtod_l+0xb14>)
 8017666:	4a55      	ldr	r2, [pc, #340]	; (80177bc <_strtod_l+0xb24>)
 8017668:	4019      	ands	r1, r3
 801766a:	4291      	cmp	r1, r2
 801766c:	4680      	mov	r8, r0
 801766e:	d95e      	bls.n	801772e <_strtod_l+0xa96>
 8017670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017672:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017676:	4293      	cmp	r3, r2
 8017678:	d103      	bne.n	8017682 <_strtod_l+0x9ea>
 801767a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801767c:	3301      	adds	r3, #1
 801767e:	f43f ad4e 	beq.w	801711e <_strtod_l+0x486>
 8017682:	f04f 38ff 	mov.w	r8, #4294967295
 8017686:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80177b0 <_strtod_l+0xb18>
 801768a:	4650      	mov	r0, sl
 801768c:	991c      	ldr	r1, [sp, #112]	; 0x70
 801768e:	f001 fccf 	bl	8019030 <_Bfree>
 8017692:	4650      	mov	r0, sl
 8017694:	9906      	ldr	r1, [sp, #24]
 8017696:	f001 fccb 	bl	8019030 <_Bfree>
 801769a:	4650      	mov	r0, sl
 801769c:	9904      	ldr	r1, [sp, #16]
 801769e:	f001 fcc7 	bl	8019030 <_Bfree>
 80176a2:	4659      	mov	r1, fp
 80176a4:	4650      	mov	r0, sl
 80176a6:	f001 fcc3 	bl	8019030 <_Bfree>
 80176aa:	e61c      	b.n	80172e6 <_strtod_l+0x64e>
 80176ac:	f1b8 0f00 	cmp.w	r8, #0
 80176b0:	d119      	bne.n	80176e6 <_strtod_l+0xa4e>
 80176b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80176b8:	b9e3      	cbnz	r3, 80176f4 <_strtod_l+0xa5c>
 80176ba:	2200      	movs	r2, #0
 80176bc:	4630      	mov	r0, r6
 80176be:	4639      	mov	r1, r7
 80176c0:	4b3c      	ldr	r3, [pc, #240]	; (80177b4 <_strtod_l+0xb1c>)
 80176c2:	f7e9 f9c5 	bl	8000a50 <__aeabi_dcmplt>
 80176c6:	b9c8      	cbnz	r0, 80176fc <_strtod_l+0xa64>
 80176c8:	2200      	movs	r2, #0
 80176ca:	4630      	mov	r0, r6
 80176cc:	4639      	mov	r1, r7
 80176ce:	4b3c      	ldr	r3, [pc, #240]	; (80177c0 <_strtod_l+0xb28>)
 80176d0:	f7e8 ff4c 	bl	800056c <__aeabi_dmul>
 80176d4:	4604      	mov	r4, r0
 80176d6:	460d      	mov	r5, r1
 80176d8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80176dc:	9418      	str	r4, [sp, #96]	; 0x60
 80176de:	9319      	str	r3, [sp, #100]	; 0x64
 80176e0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80176e4:	e79d      	b.n	8017622 <_strtod_l+0x98a>
 80176e6:	f1b8 0f01 	cmp.w	r8, #1
 80176ea:	d103      	bne.n	80176f4 <_strtod_l+0xa5c>
 80176ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	f43f ad87 	beq.w	8017202 <_strtod_l+0x56a>
 80176f4:	2600      	movs	r6, #0
 80176f6:	2400      	movs	r4, #0
 80176f8:	4f32      	ldr	r7, [pc, #200]	; (80177c4 <_strtod_l+0xb2c>)
 80176fa:	e791      	b.n	8017620 <_strtod_l+0x988>
 80176fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80176fe:	4d30      	ldr	r5, [pc, #192]	; (80177c0 <_strtod_l+0xb28>)
 8017700:	e7ea      	b.n	80176d8 <_strtod_l+0xa40>
 8017702:	4b2f      	ldr	r3, [pc, #188]	; (80177c0 <_strtod_l+0xb28>)
 8017704:	2200      	movs	r2, #0
 8017706:	4630      	mov	r0, r6
 8017708:	4639      	mov	r1, r7
 801770a:	f7e8 ff2f 	bl	800056c <__aeabi_dmul>
 801770e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017710:	4604      	mov	r4, r0
 8017712:	460d      	mov	r5, r1
 8017714:	b933      	cbnz	r3, 8017724 <_strtod_l+0xa8c>
 8017716:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801771a:	9010      	str	r0, [sp, #64]	; 0x40
 801771c:	9311      	str	r3, [sp, #68]	; 0x44
 801771e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8017722:	e77e      	b.n	8017622 <_strtod_l+0x98a>
 8017724:	4602      	mov	r2, r0
 8017726:	460b      	mov	r3, r1
 8017728:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801772c:	e7f7      	b.n	801771e <_strtod_l+0xa86>
 801772e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8017732:	9b05      	ldr	r3, [sp, #20]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d1a8      	bne.n	801768a <_strtod_l+0x9f2>
 8017738:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801773c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801773e:	0d1b      	lsrs	r3, r3, #20
 8017740:	051b      	lsls	r3, r3, #20
 8017742:	429a      	cmp	r2, r3
 8017744:	d1a1      	bne.n	801768a <_strtod_l+0x9f2>
 8017746:	4620      	mov	r0, r4
 8017748:	4629      	mov	r1, r5
 801774a:	f7e9 fa6f 	bl	8000c2c <__aeabi_d2lz>
 801774e:	f7e8 fedf 	bl	8000510 <__aeabi_l2d>
 8017752:	4602      	mov	r2, r0
 8017754:	460b      	mov	r3, r1
 8017756:	4620      	mov	r0, r4
 8017758:	4629      	mov	r1, r5
 801775a:	f7e8 fd4f 	bl	80001fc <__aeabi_dsub>
 801775e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017764:	ea43 0308 	orr.w	r3, r3, r8
 8017768:	4313      	orrs	r3, r2
 801776a:	4604      	mov	r4, r0
 801776c:	460d      	mov	r5, r1
 801776e:	d066      	beq.n	801783e <_strtod_l+0xba6>
 8017770:	a309      	add	r3, pc, #36	; (adr r3, 8017798 <_strtod_l+0xb00>)
 8017772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017776:	f7e9 f96b 	bl	8000a50 <__aeabi_dcmplt>
 801777a:	2800      	cmp	r0, #0
 801777c:	f47f acda 	bne.w	8017134 <_strtod_l+0x49c>
 8017780:	a307      	add	r3, pc, #28	; (adr r3, 80177a0 <_strtod_l+0xb08>)
 8017782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017786:	4620      	mov	r0, r4
 8017788:	4629      	mov	r1, r5
 801778a:	f7e9 f97f 	bl	8000a8c <__aeabi_dcmpgt>
 801778e:	2800      	cmp	r0, #0
 8017790:	f43f af7b 	beq.w	801768a <_strtod_l+0x9f2>
 8017794:	e4ce      	b.n	8017134 <_strtod_l+0x49c>
 8017796:	bf00      	nop
 8017798:	94a03595 	.word	0x94a03595
 801779c:	3fdfffff 	.word	0x3fdfffff
 80177a0:	35afe535 	.word	0x35afe535
 80177a4:	3fe00000 	.word	0x3fe00000
 80177a8:	000fffff 	.word	0x000fffff
 80177ac:	7ff00000 	.word	0x7ff00000
 80177b0:	7fefffff 	.word	0x7fefffff
 80177b4:	3ff00000 	.word	0x3ff00000
 80177b8:	7fe00000 	.word	0x7fe00000
 80177bc:	7c9fffff 	.word	0x7c9fffff
 80177c0:	3fe00000 	.word	0x3fe00000
 80177c4:	bff00000 	.word	0xbff00000
 80177c8:	9b05      	ldr	r3, [sp, #20]
 80177ca:	b313      	cbz	r3, 8017812 <_strtod_l+0xb7a>
 80177cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80177ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80177d2:	d81e      	bhi.n	8017812 <_strtod_l+0xb7a>
 80177d4:	a326      	add	r3, pc, #152	; (adr r3, 8017870 <_strtod_l+0xbd8>)
 80177d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177da:	4620      	mov	r0, r4
 80177dc:	4629      	mov	r1, r5
 80177de:	f7e9 f941 	bl	8000a64 <__aeabi_dcmple>
 80177e2:	b190      	cbz	r0, 801780a <_strtod_l+0xb72>
 80177e4:	4629      	mov	r1, r5
 80177e6:	4620      	mov	r0, r4
 80177e8:	f7e9 f998 	bl	8000b1c <__aeabi_d2uiz>
 80177ec:	2801      	cmp	r0, #1
 80177ee:	bf38      	it	cc
 80177f0:	2001      	movcc	r0, #1
 80177f2:	f7e8 fe41 	bl	8000478 <__aeabi_ui2d>
 80177f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80177f8:	4604      	mov	r4, r0
 80177fa:	460d      	mov	r5, r1
 80177fc:	b9d3      	cbnz	r3, 8017834 <_strtod_l+0xb9c>
 80177fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017802:	9012      	str	r0, [sp, #72]	; 0x48
 8017804:	9313      	str	r3, [sp, #76]	; 0x4c
 8017806:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 801780a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801780c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8017810:	1a9f      	subs	r7, r3, r2
 8017812:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017816:	f001 ff3b 	bl	8019690 <__ulp>
 801781a:	4602      	mov	r2, r0
 801781c:	460b      	mov	r3, r1
 801781e:	4630      	mov	r0, r6
 8017820:	4639      	mov	r1, r7
 8017822:	f7e8 fea3 	bl	800056c <__aeabi_dmul>
 8017826:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801782a:	f7e8 fce9 	bl	8000200 <__adddf3>
 801782e:	4680      	mov	r8, r0
 8017830:	4689      	mov	r9, r1
 8017832:	e77e      	b.n	8017732 <_strtod_l+0xa9a>
 8017834:	4602      	mov	r2, r0
 8017836:	460b      	mov	r3, r1
 8017838:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 801783c:	e7e3      	b.n	8017806 <_strtod_l+0xb6e>
 801783e:	a30e      	add	r3, pc, #56	; (adr r3, 8017878 <_strtod_l+0xbe0>)
 8017840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017844:	f7e9 f904 	bl	8000a50 <__aeabi_dcmplt>
 8017848:	e7a1      	b.n	801778e <_strtod_l+0xaf6>
 801784a:	2300      	movs	r3, #0
 801784c:	930c      	str	r3, [sp, #48]	; 0x30
 801784e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017850:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017852:	6013      	str	r3, [r2, #0]
 8017854:	f7ff ba65 	b.w	8016d22 <_strtod_l+0x8a>
 8017858:	2b65      	cmp	r3, #101	; 0x65
 801785a:	f43f ab5c 	beq.w	8016f16 <_strtod_l+0x27e>
 801785e:	2b45      	cmp	r3, #69	; 0x45
 8017860:	f43f ab59 	beq.w	8016f16 <_strtod_l+0x27e>
 8017864:	2201      	movs	r2, #1
 8017866:	f7ff bb8d 	b.w	8016f84 <_strtod_l+0x2ec>
 801786a:	bf00      	nop
 801786c:	f3af 8000 	nop.w
 8017870:	ffc00000 	.word	0xffc00000
 8017874:	41dfffff 	.word	0x41dfffff
 8017878:	94a03595 	.word	0x94a03595
 801787c:	3fcfffff 	.word	0x3fcfffff

08017880 <_strtod_r>:
 8017880:	4b01      	ldr	r3, [pc, #4]	; (8017888 <_strtod_r+0x8>)
 8017882:	f7ff ba09 	b.w	8016c98 <_strtod_l>
 8017886:	bf00      	nop
 8017888:	200002b8 	.word	0x200002b8

0801788c <_strtol_l.isra.0>:
 801788c:	2b01      	cmp	r3, #1
 801788e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017892:	4686      	mov	lr, r0
 8017894:	d001      	beq.n	801789a <_strtol_l.isra.0+0xe>
 8017896:	2b24      	cmp	r3, #36	; 0x24
 8017898:	d906      	bls.n	80178a8 <_strtol_l.isra.0+0x1c>
 801789a:	f7fe f897 	bl	80159cc <__errno>
 801789e:	2316      	movs	r3, #22
 80178a0:	6003      	str	r3, [r0, #0]
 80178a2:	2000      	movs	r0, #0
 80178a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178a8:	468c      	mov	ip, r1
 80178aa:	4e3a      	ldr	r6, [pc, #232]	; (8017994 <_strtol_l.isra.0+0x108>)
 80178ac:	4660      	mov	r0, ip
 80178ae:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80178b2:	5da5      	ldrb	r5, [r4, r6]
 80178b4:	f015 0508 	ands.w	r5, r5, #8
 80178b8:	d1f8      	bne.n	80178ac <_strtol_l.isra.0+0x20>
 80178ba:	2c2d      	cmp	r4, #45	; 0x2d
 80178bc:	d133      	bne.n	8017926 <_strtol_l.isra.0+0x9a>
 80178be:	f04f 0801 	mov.w	r8, #1
 80178c2:	f89c 4000 	ldrb.w	r4, [ip]
 80178c6:	f100 0c02 	add.w	ip, r0, #2
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d05d      	beq.n	801798a <_strtol_l.isra.0+0xfe>
 80178ce:	2b10      	cmp	r3, #16
 80178d0:	d10c      	bne.n	80178ec <_strtol_l.isra.0+0x60>
 80178d2:	2c30      	cmp	r4, #48	; 0x30
 80178d4:	d10a      	bne.n	80178ec <_strtol_l.isra.0+0x60>
 80178d6:	f89c 0000 	ldrb.w	r0, [ip]
 80178da:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80178de:	2858      	cmp	r0, #88	; 0x58
 80178e0:	d14e      	bne.n	8017980 <_strtol_l.isra.0+0xf4>
 80178e2:	2310      	movs	r3, #16
 80178e4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80178e8:	f10c 0c02 	add.w	ip, ip, #2
 80178ec:	2500      	movs	r5, #0
 80178ee:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80178f2:	3f01      	subs	r7, #1
 80178f4:	fbb7 f9f3 	udiv	r9, r7, r3
 80178f8:	4628      	mov	r0, r5
 80178fa:	fb03 7a19 	mls	sl, r3, r9, r7
 80178fe:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8017902:	2e09      	cmp	r6, #9
 8017904:	d818      	bhi.n	8017938 <_strtol_l.isra.0+0xac>
 8017906:	4634      	mov	r4, r6
 8017908:	42a3      	cmp	r3, r4
 801790a:	dd24      	ble.n	8017956 <_strtol_l.isra.0+0xca>
 801790c:	2d00      	cmp	r5, #0
 801790e:	db1f      	blt.n	8017950 <_strtol_l.isra.0+0xc4>
 8017910:	4581      	cmp	r9, r0
 8017912:	d31d      	bcc.n	8017950 <_strtol_l.isra.0+0xc4>
 8017914:	d101      	bne.n	801791a <_strtol_l.isra.0+0x8e>
 8017916:	45a2      	cmp	sl, r4
 8017918:	db1a      	blt.n	8017950 <_strtol_l.isra.0+0xc4>
 801791a:	2501      	movs	r5, #1
 801791c:	fb00 4003 	mla	r0, r0, r3, r4
 8017920:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8017924:	e7eb      	b.n	80178fe <_strtol_l.isra.0+0x72>
 8017926:	2c2b      	cmp	r4, #43	; 0x2b
 8017928:	bf08      	it	eq
 801792a:	f89c 4000 	ldrbeq.w	r4, [ip]
 801792e:	46a8      	mov	r8, r5
 8017930:	bf08      	it	eq
 8017932:	f100 0c02 	addeq.w	ip, r0, #2
 8017936:	e7c8      	b.n	80178ca <_strtol_l.isra.0+0x3e>
 8017938:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801793c:	2e19      	cmp	r6, #25
 801793e:	d801      	bhi.n	8017944 <_strtol_l.isra.0+0xb8>
 8017940:	3c37      	subs	r4, #55	; 0x37
 8017942:	e7e1      	b.n	8017908 <_strtol_l.isra.0+0x7c>
 8017944:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8017948:	2e19      	cmp	r6, #25
 801794a:	d804      	bhi.n	8017956 <_strtol_l.isra.0+0xca>
 801794c:	3c57      	subs	r4, #87	; 0x57
 801794e:	e7db      	b.n	8017908 <_strtol_l.isra.0+0x7c>
 8017950:	f04f 35ff 	mov.w	r5, #4294967295
 8017954:	e7e4      	b.n	8017920 <_strtol_l.isra.0+0x94>
 8017956:	2d00      	cmp	r5, #0
 8017958:	da08      	bge.n	801796c <_strtol_l.isra.0+0xe0>
 801795a:	2322      	movs	r3, #34	; 0x22
 801795c:	4638      	mov	r0, r7
 801795e:	f8ce 3000 	str.w	r3, [lr]
 8017962:	2a00      	cmp	r2, #0
 8017964:	d09e      	beq.n	80178a4 <_strtol_l.isra.0+0x18>
 8017966:	f10c 31ff 	add.w	r1, ip, #4294967295
 801796a:	e007      	b.n	801797c <_strtol_l.isra.0+0xf0>
 801796c:	f1b8 0f00 	cmp.w	r8, #0
 8017970:	d000      	beq.n	8017974 <_strtol_l.isra.0+0xe8>
 8017972:	4240      	negs	r0, r0
 8017974:	2a00      	cmp	r2, #0
 8017976:	d095      	beq.n	80178a4 <_strtol_l.isra.0+0x18>
 8017978:	2d00      	cmp	r5, #0
 801797a:	d1f4      	bne.n	8017966 <_strtol_l.isra.0+0xda>
 801797c:	6011      	str	r1, [r2, #0]
 801797e:	e791      	b.n	80178a4 <_strtol_l.isra.0+0x18>
 8017980:	2430      	movs	r4, #48	; 0x30
 8017982:	2b00      	cmp	r3, #0
 8017984:	d1b2      	bne.n	80178ec <_strtol_l.isra.0+0x60>
 8017986:	2308      	movs	r3, #8
 8017988:	e7b0      	b.n	80178ec <_strtol_l.isra.0+0x60>
 801798a:	2c30      	cmp	r4, #48	; 0x30
 801798c:	d0a3      	beq.n	80178d6 <_strtol_l.isra.0+0x4a>
 801798e:	230a      	movs	r3, #10
 8017990:	e7ac      	b.n	80178ec <_strtol_l.isra.0+0x60>
 8017992:	bf00      	nop
 8017994:	0801a5f1 	.word	0x0801a5f1

08017998 <_strtol_r>:
 8017998:	f7ff bf78 	b.w	801788c <_strtol_l.isra.0>

0801799c <_write_r>:
 801799c:	b538      	push	{r3, r4, r5, lr}
 801799e:	4604      	mov	r4, r0
 80179a0:	4608      	mov	r0, r1
 80179a2:	4611      	mov	r1, r2
 80179a4:	2200      	movs	r2, #0
 80179a6:	4d05      	ldr	r5, [pc, #20]	; (80179bc <_write_r+0x20>)
 80179a8:	602a      	str	r2, [r5, #0]
 80179aa:	461a      	mov	r2, r3
 80179ac:	f7ed ffe2 	bl	8005974 <_write>
 80179b0:	1c43      	adds	r3, r0, #1
 80179b2:	d102      	bne.n	80179ba <_write_r+0x1e>
 80179b4:	682b      	ldr	r3, [r5, #0]
 80179b6:	b103      	cbz	r3, 80179ba <_write_r+0x1e>
 80179b8:	6023      	str	r3, [r4, #0]
 80179ba:	bd38      	pop	{r3, r4, r5, pc}
 80179bc:	2000e4bc 	.word	0x2000e4bc

080179c0 <_close_r>:
 80179c0:	b538      	push	{r3, r4, r5, lr}
 80179c2:	2300      	movs	r3, #0
 80179c4:	4d05      	ldr	r5, [pc, #20]	; (80179dc <_close_r+0x1c>)
 80179c6:	4604      	mov	r4, r0
 80179c8:	4608      	mov	r0, r1
 80179ca:	602b      	str	r3, [r5, #0]
 80179cc:	f7ed ffee 	bl	80059ac <_close>
 80179d0:	1c43      	adds	r3, r0, #1
 80179d2:	d102      	bne.n	80179da <_close_r+0x1a>
 80179d4:	682b      	ldr	r3, [r5, #0]
 80179d6:	b103      	cbz	r3, 80179da <_close_r+0x1a>
 80179d8:	6023      	str	r3, [r4, #0]
 80179da:	bd38      	pop	{r3, r4, r5, pc}
 80179dc:	2000e4bc 	.word	0x2000e4bc

080179e0 <quorem>:
 80179e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179e4:	6903      	ldr	r3, [r0, #16]
 80179e6:	690c      	ldr	r4, [r1, #16]
 80179e8:	4607      	mov	r7, r0
 80179ea:	42a3      	cmp	r3, r4
 80179ec:	f2c0 8083 	blt.w	8017af6 <quorem+0x116>
 80179f0:	3c01      	subs	r4, #1
 80179f2:	f100 0514 	add.w	r5, r0, #20
 80179f6:	f101 0814 	add.w	r8, r1, #20
 80179fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80179fe:	9301      	str	r3, [sp, #4]
 8017a00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017a04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017a08:	3301      	adds	r3, #1
 8017a0a:	429a      	cmp	r2, r3
 8017a0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8017a10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017a14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017a18:	d332      	bcc.n	8017a80 <quorem+0xa0>
 8017a1a:	f04f 0e00 	mov.w	lr, #0
 8017a1e:	4640      	mov	r0, r8
 8017a20:	46ac      	mov	ip, r5
 8017a22:	46f2      	mov	sl, lr
 8017a24:	f850 2b04 	ldr.w	r2, [r0], #4
 8017a28:	b293      	uxth	r3, r2
 8017a2a:	fb06 e303 	mla	r3, r6, r3, lr
 8017a2e:	0c12      	lsrs	r2, r2, #16
 8017a30:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017a34:	fb06 e202 	mla	r2, r6, r2, lr
 8017a38:	b29b      	uxth	r3, r3
 8017a3a:	ebaa 0303 	sub.w	r3, sl, r3
 8017a3e:	f8dc a000 	ldr.w	sl, [ip]
 8017a42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017a46:	fa1f fa8a 	uxth.w	sl, sl
 8017a4a:	4453      	add	r3, sl
 8017a4c:	fa1f fa82 	uxth.w	sl, r2
 8017a50:	f8dc 2000 	ldr.w	r2, [ip]
 8017a54:	4581      	cmp	r9, r0
 8017a56:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8017a5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017a5e:	b29b      	uxth	r3, r3
 8017a60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017a64:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017a68:	f84c 3b04 	str.w	r3, [ip], #4
 8017a6c:	d2da      	bcs.n	8017a24 <quorem+0x44>
 8017a6e:	f855 300b 	ldr.w	r3, [r5, fp]
 8017a72:	b92b      	cbnz	r3, 8017a80 <quorem+0xa0>
 8017a74:	9b01      	ldr	r3, [sp, #4]
 8017a76:	3b04      	subs	r3, #4
 8017a78:	429d      	cmp	r5, r3
 8017a7a:	461a      	mov	r2, r3
 8017a7c:	d32f      	bcc.n	8017ade <quorem+0xfe>
 8017a7e:	613c      	str	r4, [r7, #16]
 8017a80:	4638      	mov	r0, r7
 8017a82:	f001 fd59 	bl	8019538 <__mcmp>
 8017a86:	2800      	cmp	r0, #0
 8017a88:	db25      	blt.n	8017ad6 <quorem+0xf6>
 8017a8a:	4628      	mov	r0, r5
 8017a8c:	f04f 0c00 	mov.w	ip, #0
 8017a90:	3601      	adds	r6, #1
 8017a92:	f858 1b04 	ldr.w	r1, [r8], #4
 8017a96:	f8d0 e000 	ldr.w	lr, [r0]
 8017a9a:	b28b      	uxth	r3, r1
 8017a9c:	ebac 0303 	sub.w	r3, ip, r3
 8017aa0:	fa1f f28e 	uxth.w	r2, lr
 8017aa4:	4413      	add	r3, r2
 8017aa6:	0c0a      	lsrs	r2, r1, #16
 8017aa8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017aac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017ab0:	b29b      	uxth	r3, r3
 8017ab2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017ab6:	45c1      	cmp	r9, r8
 8017ab8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017abc:	f840 3b04 	str.w	r3, [r0], #4
 8017ac0:	d2e7      	bcs.n	8017a92 <quorem+0xb2>
 8017ac2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017ac6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017aca:	b922      	cbnz	r2, 8017ad6 <quorem+0xf6>
 8017acc:	3b04      	subs	r3, #4
 8017ace:	429d      	cmp	r5, r3
 8017ad0:	461a      	mov	r2, r3
 8017ad2:	d30a      	bcc.n	8017aea <quorem+0x10a>
 8017ad4:	613c      	str	r4, [r7, #16]
 8017ad6:	4630      	mov	r0, r6
 8017ad8:	b003      	add	sp, #12
 8017ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ade:	6812      	ldr	r2, [r2, #0]
 8017ae0:	3b04      	subs	r3, #4
 8017ae2:	2a00      	cmp	r2, #0
 8017ae4:	d1cb      	bne.n	8017a7e <quorem+0x9e>
 8017ae6:	3c01      	subs	r4, #1
 8017ae8:	e7c6      	b.n	8017a78 <quorem+0x98>
 8017aea:	6812      	ldr	r2, [r2, #0]
 8017aec:	3b04      	subs	r3, #4
 8017aee:	2a00      	cmp	r2, #0
 8017af0:	d1f0      	bne.n	8017ad4 <quorem+0xf4>
 8017af2:	3c01      	subs	r4, #1
 8017af4:	e7eb      	b.n	8017ace <quorem+0xee>
 8017af6:	2000      	movs	r0, #0
 8017af8:	e7ee      	b.n	8017ad8 <quorem+0xf8>
 8017afa:	0000      	movs	r0, r0
 8017afc:	0000      	movs	r0, r0
	...

08017b00 <_dtoa_r>:
 8017b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b04:	4616      	mov	r6, r2
 8017b06:	461f      	mov	r7, r3
 8017b08:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017b0a:	b099      	sub	sp, #100	; 0x64
 8017b0c:	4605      	mov	r5, r0
 8017b0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017b12:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8017b16:	b974      	cbnz	r4, 8017b36 <_dtoa_r+0x36>
 8017b18:	2010      	movs	r0, #16
 8017b1a:	f7fe f87b 	bl	8015c14 <malloc>
 8017b1e:	4602      	mov	r2, r0
 8017b20:	6268      	str	r0, [r5, #36]	; 0x24
 8017b22:	b920      	cbnz	r0, 8017b2e <_dtoa_r+0x2e>
 8017b24:	21ea      	movs	r1, #234	; 0xea
 8017b26:	4bae      	ldr	r3, [pc, #696]	; (8017de0 <_dtoa_r+0x2e0>)
 8017b28:	48ae      	ldr	r0, [pc, #696]	; (8017de4 <_dtoa_r+0x2e4>)
 8017b2a:	f002 f89b 	bl	8019c64 <__assert_func>
 8017b2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017b32:	6004      	str	r4, [r0, #0]
 8017b34:	60c4      	str	r4, [r0, #12]
 8017b36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017b38:	6819      	ldr	r1, [r3, #0]
 8017b3a:	b151      	cbz	r1, 8017b52 <_dtoa_r+0x52>
 8017b3c:	685a      	ldr	r2, [r3, #4]
 8017b3e:	2301      	movs	r3, #1
 8017b40:	4093      	lsls	r3, r2
 8017b42:	604a      	str	r2, [r1, #4]
 8017b44:	608b      	str	r3, [r1, #8]
 8017b46:	4628      	mov	r0, r5
 8017b48:	f001 fa72 	bl	8019030 <_Bfree>
 8017b4c:	2200      	movs	r2, #0
 8017b4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017b50:	601a      	str	r2, [r3, #0]
 8017b52:	1e3b      	subs	r3, r7, #0
 8017b54:	bfaf      	iteee	ge
 8017b56:	2300      	movge	r3, #0
 8017b58:	2201      	movlt	r2, #1
 8017b5a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017b5e:	9305      	strlt	r3, [sp, #20]
 8017b60:	bfa8      	it	ge
 8017b62:	f8c8 3000 	strge.w	r3, [r8]
 8017b66:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8017b6a:	4b9f      	ldr	r3, [pc, #636]	; (8017de8 <_dtoa_r+0x2e8>)
 8017b6c:	bfb8      	it	lt
 8017b6e:	f8c8 2000 	strlt.w	r2, [r8]
 8017b72:	ea33 0309 	bics.w	r3, r3, r9
 8017b76:	d119      	bne.n	8017bac <_dtoa_r+0xac>
 8017b78:	f242 730f 	movw	r3, #9999	; 0x270f
 8017b7c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017b7e:	6013      	str	r3, [r2, #0]
 8017b80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017b84:	4333      	orrs	r3, r6
 8017b86:	f000 8580 	beq.w	801868a <_dtoa_r+0xb8a>
 8017b8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017b8c:	b953      	cbnz	r3, 8017ba4 <_dtoa_r+0xa4>
 8017b8e:	4b97      	ldr	r3, [pc, #604]	; (8017dec <_dtoa_r+0x2ec>)
 8017b90:	e022      	b.n	8017bd8 <_dtoa_r+0xd8>
 8017b92:	4b97      	ldr	r3, [pc, #604]	; (8017df0 <_dtoa_r+0x2f0>)
 8017b94:	9308      	str	r3, [sp, #32]
 8017b96:	3308      	adds	r3, #8
 8017b98:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8017b9a:	6013      	str	r3, [r2, #0]
 8017b9c:	9808      	ldr	r0, [sp, #32]
 8017b9e:	b019      	add	sp, #100	; 0x64
 8017ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ba4:	4b91      	ldr	r3, [pc, #580]	; (8017dec <_dtoa_r+0x2ec>)
 8017ba6:	9308      	str	r3, [sp, #32]
 8017ba8:	3303      	adds	r3, #3
 8017baa:	e7f5      	b.n	8017b98 <_dtoa_r+0x98>
 8017bac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8017bb0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8017bb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017bb8:	2200      	movs	r2, #0
 8017bba:	2300      	movs	r3, #0
 8017bbc:	f7e8 ff3e 	bl	8000a3c <__aeabi_dcmpeq>
 8017bc0:	4680      	mov	r8, r0
 8017bc2:	b158      	cbz	r0, 8017bdc <_dtoa_r+0xdc>
 8017bc4:	2301      	movs	r3, #1
 8017bc6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017bc8:	6013      	str	r3, [r2, #0]
 8017bca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	f000 8559 	beq.w	8018684 <_dtoa_r+0xb84>
 8017bd2:	4888      	ldr	r0, [pc, #544]	; (8017df4 <_dtoa_r+0x2f4>)
 8017bd4:	6018      	str	r0, [r3, #0]
 8017bd6:	1e43      	subs	r3, r0, #1
 8017bd8:	9308      	str	r3, [sp, #32]
 8017bda:	e7df      	b.n	8017b9c <_dtoa_r+0x9c>
 8017bdc:	ab16      	add	r3, sp, #88	; 0x58
 8017bde:	9301      	str	r3, [sp, #4]
 8017be0:	ab17      	add	r3, sp, #92	; 0x5c
 8017be2:	9300      	str	r3, [sp, #0]
 8017be4:	4628      	mov	r0, r5
 8017be6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017bea:	f001 fdcb 	bl	8019784 <__d2b>
 8017bee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8017bf2:	4682      	mov	sl, r0
 8017bf4:	2c00      	cmp	r4, #0
 8017bf6:	d07e      	beq.n	8017cf6 <_dtoa_r+0x1f6>
 8017bf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017bfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017bfe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8017c02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017c06:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8017c0a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8017c0e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8017c12:	2200      	movs	r2, #0
 8017c14:	4b78      	ldr	r3, [pc, #480]	; (8017df8 <_dtoa_r+0x2f8>)
 8017c16:	f7e8 faf1 	bl	80001fc <__aeabi_dsub>
 8017c1a:	a36b      	add	r3, pc, #428	; (adr r3, 8017dc8 <_dtoa_r+0x2c8>)
 8017c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c20:	f7e8 fca4 	bl	800056c <__aeabi_dmul>
 8017c24:	a36a      	add	r3, pc, #424	; (adr r3, 8017dd0 <_dtoa_r+0x2d0>)
 8017c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c2a:	f7e8 fae9 	bl	8000200 <__adddf3>
 8017c2e:	4606      	mov	r6, r0
 8017c30:	4620      	mov	r0, r4
 8017c32:	460f      	mov	r7, r1
 8017c34:	f7e8 fc30 	bl	8000498 <__aeabi_i2d>
 8017c38:	a367      	add	r3, pc, #412	; (adr r3, 8017dd8 <_dtoa_r+0x2d8>)
 8017c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c3e:	f7e8 fc95 	bl	800056c <__aeabi_dmul>
 8017c42:	4602      	mov	r2, r0
 8017c44:	460b      	mov	r3, r1
 8017c46:	4630      	mov	r0, r6
 8017c48:	4639      	mov	r1, r7
 8017c4a:	f7e8 fad9 	bl	8000200 <__adddf3>
 8017c4e:	4606      	mov	r6, r0
 8017c50:	460f      	mov	r7, r1
 8017c52:	f7e8 ff3b 	bl	8000acc <__aeabi_d2iz>
 8017c56:	2200      	movs	r2, #0
 8017c58:	4681      	mov	r9, r0
 8017c5a:	2300      	movs	r3, #0
 8017c5c:	4630      	mov	r0, r6
 8017c5e:	4639      	mov	r1, r7
 8017c60:	f7e8 fef6 	bl	8000a50 <__aeabi_dcmplt>
 8017c64:	b148      	cbz	r0, 8017c7a <_dtoa_r+0x17a>
 8017c66:	4648      	mov	r0, r9
 8017c68:	f7e8 fc16 	bl	8000498 <__aeabi_i2d>
 8017c6c:	4632      	mov	r2, r6
 8017c6e:	463b      	mov	r3, r7
 8017c70:	f7e8 fee4 	bl	8000a3c <__aeabi_dcmpeq>
 8017c74:	b908      	cbnz	r0, 8017c7a <_dtoa_r+0x17a>
 8017c76:	f109 39ff 	add.w	r9, r9, #4294967295
 8017c7a:	f1b9 0f16 	cmp.w	r9, #22
 8017c7e:	d857      	bhi.n	8017d30 <_dtoa_r+0x230>
 8017c80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017c84:	4b5d      	ldr	r3, [pc, #372]	; (8017dfc <_dtoa_r+0x2fc>)
 8017c86:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8017c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c8e:	f7e8 fedf 	bl	8000a50 <__aeabi_dcmplt>
 8017c92:	2800      	cmp	r0, #0
 8017c94:	d04e      	beq.n	8017d34 <_dtoa_r+0x234>
 8017c96:	2300      	movs	r3, #0
 8017c98:	f109 39ff 	add.w	r9, r9, #4294967295
 8017c9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8017c9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017ca0:	1b1c      	subs	r4, r3, r4
 8017ca2:	1e63      	subs	r3, r4, #1
 8017ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8017ca6:	bf49      	itett	mi
 8017ca8:	f1c4 0301 	rsbmi	r3, r4, #1
 8017cac:	2300      	movpl	r3, #0
 8017cae:	9306      	strmi	r3, [sp, #24]
 8017cb0:	2300      	movmi	r3, #0
 8017cb2:	bf54      	ite	pl
 8017cb4:	9306      	strpl	r3, [sp, #24]
 8017cb6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8017cb8:	f1b9 0f00 	cmp.w	r9, #0
 8017cbc:	db3c      	blt.n	8017d38 <_dtoa_r+0x238>
 8017cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cc0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8017cc4:	444b      	add	r3, r9
 8017cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8017cc8:	2300      	movs	r3, #0
 8017cca:	930a      	str	r3, [sp, #40]	; 0x28
 8017ccc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017cce:	2b09      	cmp	r3, #9
 8017cd0:	d86c      	bhi.n	8017dac <_dtoa_r+0x2ac>
 8017cd2:	2b05      	cmp	r3, #5
 8017cd4:	bfc4      	itt	gt
 8017cd6:	3b04      	subgt	r3, #4
 8017cd8:	9322      	strgt	r3, [sp, #136]	; 0x88
 8017cda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017cdc:	bfc8      	it	gt
 8017cde:	2400      	movgt	r4, #0
 8017ce0:	f1a3 0302 	sub.w	r3, r3, #2
 8017ce4:	bfd8      	it	le
 8017ce6:	2401      	movle	r4, #1
 8017ce8:	2b03      	cmp	r3, #3
 8017cea:	f200 808b 	bhi.w	8017e04 <_dtoa_r+0x304>
 8017cee:	e8df f003 	tbb	[pc, r3]
 8017cf2:	4f2d      	.short	0x4f2d
 8017cf4:	5b4d      	.short	0x5b4d
 8017cf6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8017cfa:	441c      	add	r4, r3
 8017cfc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8017d00:	2b20      	cmp	r3, #32
 8017d02:	bfc3      	ittte	gt
 8017d04:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017d08:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8017d0c:	fa09 f303 	lslgt.w	r3, r9, r3
 8017d10:	f1c3 0320 	rsble	r3, r3, #32
 8017d14:	bfc6      	itte	gt
 8017d16:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017d1a:	4318      	orrgt	r0, r3
 8017d1c:	fa06 f003 	lslle.w	r0, r6, r3
 8017d20:	f7e8 fbaa 	bl	8000478 <__aeabi_ui2d>
 8017d24:	2301      	movs	r3, #1
 8017d26:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8017d2a:	3c01      	subs	r4, #1
 8017d2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8017d2e:	e770      	b.n	8017c12 <_dtoa_r+0x112>
 8017d30:	2301      	movs	r3, #1
 8017d32:	e7b3      	b.n	8017c9c <_dtoa_r+0x19c>
 8017d34:	900f      	str	r0, [sp, #60]	; 0x3c
 8017d36:	e7b2      	b.n	8017c9e <_dtoa_r+0x19e>
 8017d38:	9b06      	ldr	r3, [sp, #24]
 8017d3a:	eba3 0309 	sub.w	r3, r3, r9
 8017d3e:	9306      	str	r3, [sp, #24]
 8017d40:	f1c9 0300 	rsb	r3, r9, #0
 8017d44:	930a      	str	r3, [sp, #40]	; 0x28
 8017d46:	2300      	movs	r3, #0
 8017d48:	930e      	str	r3, [sp, #56]	; 0x38
 8017d4a:	e7bf      	b.n	8017ccc <_dtoa_r+0x1cc>
 8017d4c:	2300      	movs	r3, #0
 8017d4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017d50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	dc59      	bgt.n	8017e0a <_dtoa_r+0x30a>
 8017d56:	f04f 0b01 	mov.w	fp, #1
 8017d5a:	465b      	mov	r3, fp
 8017d5c:	f8cd b008 	str.w	fp, [sp, #8]
 8017d60:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8017d64:	2200      	movs	r2, #0
 8017d66:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8017d68:	6042      	str	r2, [r0, #4]
 8017d6a:	2204      	movs	r2, #4
 8017d6c:	f102 0614 	add.w	r6, r2, #20
 8017d70:	429e      	cmp	r6, r3
 8017d72:	6841      	ldr	r1, [r0, #4]
 8017d74:	d94f      	bls.n	8017e16 <_dtoa_r+0x316>
 8017d76:	4628      	mov	r0, r5
 8017d78:	f001 f91a 	bl	8018fb0 <_Balloc>
 8017d7c:	9008      	str	r0, [sp, #32]
 8017d7e:	2800      	cmp	r0, #0
 8017d80:	d14d      	bne.n	8017e1e <_dtoa_r+0x31e>
 8017d82:	4602      	mov	r2, r0
 8017d84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017d88:	4b1d      	ldr	r3, [pc, #116]	; (8017e00 <_dtoa_r+0x300>)
 8017d8a:	e6cd      	b.n	8017b28 <_dtoa_r+0x28>
 8017d8c:	2301      	movs	r3, #1
 8017d8e:	e7de      	b.n	8017d4e <_dtoa_r+0x24e>
 8017d90:	2300      	movs	r3, #0
 8017d92:	930b      	str	r3, [sp, #44]	; 0x2c
 8017d94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017d96:	eb09 0b03 	add.w	fp, r9, r3
 8017d9a:	f10b 0301 	add.w	r3, fp, #1
 8017d9e:	2b01      	cmp	r3, #1
 8017da0:	9302      	str	r3, [sp, #8]
 8017da2:	bfb8      	it	lt
 8017da4:	2301      	movlt	r3, #1
 8017da6:	e7dd      	b.n	8017d64 <_dtoa_r+0x264>
 8017da8:	2301      	movs	r3, #1
 8017daa:	e7f2      	b.n	8017d92 <_dtoa_r+0x292>
 8017dac:	2401      	movs	r4, #1
 8017dae:	2300      	movs	r3, #0
 8017db0:	940b      	str	r4, [sp, #44]	; 0x2c
 8017db2:	9322      	str	r3, [sp, #136]	; 0x88
 8017db4:	f04f 3bff 	mov.w	fp, #4294967295
 8017db8:	2200      	movs	r2, #0
 8017dba:	2312      	movs	r3, #18
 8017dbc:	f8cd b008 	str.w	fp, [sp, #8]
 8017dc0:	9223      	str	r2, [sp, #140]	; 0x8c
 8017dc2:	e7cf      	b.n	8017d64 <_dtoa_r+0x264>
 8017dc4:	f3af 8000 	nop.w
 8017dc8:	636f4361 	.word	0x636f4361
 8017dcc:	3fd287a7 	.word	0x3fd287a7
 8017dd0:	8b60c8b3 	.word	0x8b60c8b3
 8017dd4:	3fc68a28 	.word	0x3fc68a28
 8017dd8:	509f79fb 	.word	0x509f79fb
 8017ddc:	3fd34413 	.word	0x3fd34413
 8017de0:	0801a6fe 	.word	0x0801a6fe
 8017de4:	0801a715 	.word	0x0801a715
 8017de8:	7ff00000 	.word	0x7ff00000
 8017dec:	0801a6fa 	.word	0x0801a6fa
 8017df0:	0801a6f1 	.word	0x0801a6f1
 8017df4:	0801a575 	.word	0x0801a575
 8017df8:	3ff80000 	.word	0x3ff80000
 8017dfc:	0801a890 	.word	0x0801a890
 8017e00:	0801a774 	.word	0x0801a774
 8017e04:	2301      	movs	r3, #1
 8017e06:	930b      	str	r3, [sp, #44]	; 0x2c
 8017e08:	e7d4      	b.n	8017db4 <_dtoa_r+0x2b4>
 8017e0a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8017e0e:	465b      	mov	r3, fp
 8017e10:	f8cd b008 	str.w	fp, [sp, #8]
 8017e14:	e7a6      	b.n	8017d64 <_dtoa_r+0x264>
 8017e16:	3101      	adds	r1, #1
 8017e18:	6041      	str	r1, [r0, #4]
 8017e1a:	0052      	lsls	r2, r2, #1
 8017e1c:	e7a6      	b.n	8017d6c <_dtoa_r+0x26c>
 8017e1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017e20:	9a08      	ldr	r2, [sp, #32]
 8017e22:	601a      	str	r2, [r3, #0]
 8017e24:	9b02      	ldr	r3, [sp, #8]
 8017e26:	2b0e      	cmp	r3, #14
 8017e28:	f200 80a8 	bhi.w	8017f7c <_dtoa_r+0x47c>
 8017e2c:	2c00      	cmp	r4, #0
 8017e2e:	f000 80a5 	beq.w	8017f7c <_dtoa_r+0x47c>
 8017e32:	f1b9 0f00 	cmp.w	r9, #0
 8017e36:	dd34      	ble.n	8017ea2 <_dtoa_r+0x3a2>
 8017e38:	4a9a      	ldr	r2, [pc, #616]	; (80180a4 <_dtoa_r+0x5a4>)
 8017e3a:	f009 030f 	and.w	r3, r9, #15
 8017e3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017e42:	f419 7f80 	tst.w	r9, #256	; 0x100
 8017e46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8017e4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8017e4e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8017e52:	d016      	beq.n	8017e82 <_dtoa_r+0x382>
 8017e54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017e58:	4b93      	ldr	r3, [pc, #588]	; (80180a8 <_dtoa_r+0x5a8>)
 8017e5a:	2703      	movs	r7, #3
 8017e5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017e60:	f7e8 fcae 	bl	80007c0 <__aeabi_ddiv>
 8017e64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017e68:	f004 040f 	and.w	r4, r4, #15
 8017e6c:	4e8e      	ldr	r6, [pc, #568]	; (80180a8 <_dtoa_r+0x5a8>)
 8017e6e:	b954      	cbnz	r4, 8017e86 <_dtoa_r+0x386>
 8017e70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017e74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017e78:	f7e8 fca2 	bl	80007c0 <__aeabi_ddiv>
 8017e7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017e80:	e029      	b.n	8017ed6 <_dtoa_r+0x3d6>
 8017e82:	2702      	movs	r7, #2
 8017e84:	e7f2      	b.n	8017e6c <_dtoa_r+0x36c>
 8017e86:	07e1      	lsls	r1, r4, #31
 8017e88:	d508      	bpl.n	8017e9c <_dtoa_r+0x39c>
 8017e8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017e8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017e92:	f7e8 fb6b 	bl	800056c <__aeabi_dmul>
 8017e96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8017e9a:	3701      	adds	r7, #1
 8017e9c:	1064      	asrs	r4, r4, #1
 8017e9e:	3608      	adds	r6, #8
 8017ea0:	e7e5      	b.n	8017e6e <_dtoa_r+0x36e>
 8017ea2:	f000 80a5 	beq.w	8017ff0 <_dtoa_r+0x4f0>
 8017ea6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017eaa:	f1c9 0400 	rsb	r4, r9, #0
 8017eae:	4b7d      	ldr	r3, [pc, #500]	; (80180a4 <_dtoa_r+0x5a4>)
 8017eb0:	f004 020f 	and.w	r2, r4, #15
 8017eb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ebc:	f7e8 fb56 	bl	800056c <__aeabi_dmul>
 8017ec0:	2702      	movs	r7, #2
 8017ec2:	2300      	movs	r3, #0
 8017ec4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017ec8:	4e77      	ldr	r6, [pc, #476]	; (80180a8 <_dtoa_r+0x5a8>)
 8017eca:	1124      	asrs	r4, r4, #4
 8017ecc:	2c00      	cmp	r4, #0
 8017ece:	f040 8084 	bne.w	8017fda <_dtoa_r+0x4da>
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d1d2      	bne.n	8017e7c <_dtoa_r+0x37c>
 8017ed6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	f000 808b 	beq.w	8017ff4 <_dtoa_r+0x4f4>
 8017ede:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8017ee2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8017ee6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017eea:	2200      	movs	r2, #0
 8017eec:	4b6f      	ldr	r3, [pc, #444]	; (80180ac <_dtoa_r+0x5ac>)
 8017eee:	f7e8 fdaf 	bl	8000a50 <__aeabi_dcmplt>
 8017ef2:	2800      	cmp	r0, #0
 8017ef4:	d07e      	beq.n	8017ff4 <_dtoa_r+0x4f4>
 8017ef6:	9b02      	ldr	r3, [sp, #8]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d07b      	beq.n	8017ff4 <_dtoa_r+0x4f4>
 8017efc:	f1bb 0f00 	cmp.w	fp, #0
 8017f00:	dd38      	ble.n	8017f74 <_dtoa_r+0x474>
 8017f02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017f06:	2200      	movs	r2, #0
 8017f08:	4b69      	ldr	r3, [pc, #420]	; (80180b0 <_dtoa_r+0x5b0>)
 8017f0a:	f7e8 fb2f 	bl	800056c <__aeabi_dmul>
 8017f0e:	465c      	mov	r4, fp
 8017f10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017f14:	f109 38ff 	add.w	r8, r9, #4294967295
 8017f18:	3701      	adds	r7, #1
 8017f1a:	4638      	mov	r0, r7
 8017f1c:	f7e8 fabc 	bl	8000498 <__aeabi_i2d>
 8017f20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017f24:	f7e8 fb22 	bl	800056c <__aeabi_dmul>
 8017f28:	2200      	movs	r2, #0
 8017f2a:	4b62      	ldr	r3, [pc, #392]	; (80180b4 <_dtoa_r+0x5b4>)
 8017f2c:	f7e8 f968 	bl	8000200 <__adddf3>
 8017f30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017f34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8017f38:	9611      	str	r6, [sp, #68]	; 0x44
 8017f3a:	2c00      	cmp	r4, #0
 8017f3c:	d15d      	bne.n	8017ffa <_dtoa_r+0x4fa>
 8017f3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017f42:	2200      	movs	r2, #0
 8017f44:	4b5c      	ldr	r3, [pc, #368]	; (80180b8 <_dtoa_r+0x5b8>)
 8017f46:	f7e8 f959 	bl	80001fc <__aeabi_dsub>
 8017f4a:	4602      	mov	r2, r0
 8017f4c:	460b      	mov	r3, r1
 8017f4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017f52:	4633      	mov	r3, r6
 8017f54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017f56:	f7e8 fd99 	bl	8000a8c <__aeabi_dcmpgt>
 8017f5a:	2800      	cmp	r0, #0
 8017f5c:	f040 829e 	bne.w	801849c <_dtoa_r+0x99c>
 8017f60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017f64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017f66:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017f6a:	f7e8 fd71 	bl	8000a50 <__aeabi_dcmplt>
 8017f6e:	2800      	cmp	r0, #0
 8017f70:	f040 8292 	bne.w	8018498 <_dtoa_r+0x998>
 8017f74:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8017f78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8017f7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	f2c0 8153 	blt.w	801822a <_dtoa_r+0x72a>
 8017f84:	f1b9 0f0e 	cmp.w	r9, #14
 8017f88:	f300 814f 	bgt.w	801822a <_dtoa_r+0x72a>
 8017f8c:	4b45      	ldr	r3, [pc, #276]	; (80180a4 <_dtoa_r+0x5a4>)
 8017f8e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8017f92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8017f96:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8017f9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	f280 80db 	bge.w	8018158 <_dtoa_r+0x658>
 8017fa2:	9b02      	ldr	r3, [sp, #8]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	f300 80d7 	bgt.w	8018158 <_dtoa_r+0x658>
 8017faa:	f040 8274 	bne.w	8018496 <_dtoa_r+0x996>
 8017fae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017fb2:	2200      	movs	r2, #0
 8017fb4:	4b40      	ldr	r3, [pc, #256]	; (80180b8 <_dtoa_r+0x5b8>)
 8017fb6:	f7e8 fad9 	bl	800056c <__aeabi_dmul>
 8017fba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017fbe:	f7e8 fd5b 	bl	8000a78 <__aeabi_dcmpge>
 8017fc2:	9c02      	ldr	r4, [sp, #8]
 8017fc4:	4626      	mov	r6, r4
 8017fc6:	2800      	cmp	r0, #0
 8017fc8:	f040 824a 	bne.w	8018460 <_dtoa_r+0x960>
 8017fcc:	2331      	movs	r3, #49	; 0x31
 8017fce:	9f08      	ldr	r7, [sp, #32]
 8017fd0:	f109 0901 	add.w	r9, r9, #1
 8017fd4:	f807 3b01 	strb.w	r3, [r7], #1
 8017fd8:	e246      	b.n	8018468 <_dtoa_r+0x968>
 8017fda:	07e2      	lsls	r2, r4, #31
 8017fdc:	d505      	bpl.n	8017fea <_dtoa_r+0x4ea>
 8017fde:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017fe2:	f7e8 fac3 	bl	800056c <__aeabi_dmul>
 8017fe6:	2301      	movs	r3, #1
 8017fe8:	3701      	adds	r7, #1
 8017fea:	1064      	asrs	r4, r4, #1
 8017fec:	3608      	adds	r6, #8
 8017fee:	e76d      	b.n	8017ecc <_dtoa_r+0x3cc>
 8017ff0:	2702      	movs	r7, #2
 8017ff2:	e770      	b.n	8017ed6 <_dtoa_r+0x3d6>
 8017ff4:	46c8      	mov	r8, r9
 8017ff6:	9c02      	ldr	r4, [sp, #8]
 8017ff8:	e78f      	b.n	8017f1a <_dtoa_r+0x41a>
 8017ffa:	9908      	ldr	r1, [sp, #32]
 8017ffc:	4b29      	ldr	r3, [pc, #164]	; (80180a4 <_dtoa_r+0x5a4>)
 8017ffe:	4421      	add	r1, r4
 8018000:	9112      	str	r1, [sp, #72]	; 0x48
 8018002:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018004:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018008:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 801800c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018010:	2900      	cmp	r1, #0
 8018012:	d055      	beq.n	80180c0 <_dtoa_r+0x5c0>
 8018014:	2000      	movs	r0, #0
 8018016:	4929      	ldr	r1, [pc, #164]	; (80180bc <_dtoa_r+0x5bc>)
 8018018:	f7e8 fbd2 	bl	80007c0 <__aeabi_ddiv>
 801801c:	463b      	mov	r3, r7
 801801e:	4632      	mov	r2, r6
 8018020:	f7e8 f8ec 	bl	80001fc <__aeabi_dsub>
 8018024:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8018028:	9f08      	ldr	r7, [sp, #32]
 801802a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801802e:	f7e8 fd4d 	bl	8000acc <__aeabi_d2iz>
 8018032:	4604      	mov	r4, r0
 8018034:	f7e8 fa30 	bl	8000498 <__aeabi_i2d>
 8018038:	4602      	mov	r2, r0
 801803a:	460b      	mov	r3, r1
 801803c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018040:	f7e8 f8dc 	bl	80001fc <__aeabi_dsub>
 8018044:	4602      	mov	r2, r0
 8018046:	460b      	mov	r3, r1
 8018048:	3430      	adds	r4, #48	; 0x30
 801804a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801804e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018052:	f807 4b01 	strb.w	r4, [r7], #1
 8018056:	f7e8 fcfb 	bl	8000a50 <__aeabi_dcmplt>
 801805a:	2800      	cmp	r0, #0
 801805c:	d174      	bne.n	8018148 <_dtoa_r+0x648>
 801805e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018062:	2000      	movs	r0, #0
 8018064:	4911      	ldr	r1, [pc, #68]	; (80180ac <_dtoa_r+0x5ac>)
 8018066:	f7e8 f8c9 	bl	80001fc <__aeabi_dsub>
 801806a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801806e:	f7e8 fcef 	bl	8000a50 <__aeabi_dcmplt>
 8018072:	2800      	cmp	r0, #0
 8018074:	f040 80b6 	bne.w	80181e4 <_dtoa_r+0x6e4>
 8018078:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801807a:	429f      	cmp	r7, r3
 801807c:	f43f af7a 	beq.w	8017f74 <_dtoa_r+0x474>
 8018080:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018084:	2200      	movs	r2, #0
 8018086:	4b0a      	ldr	r3, [pc, #40]	; (80180b0 <_dtoa_r+0x5b0>)
 8018088:	f7e8 fa70 	bl	800056c <__aeabi_dmul>
 801808c:	2200      	movs	r2, #0
 801808e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8018092:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018096:	4b06      	ldr	r3, [pc, #24]	; (80180b0 <_dtoa_r+0x5b0>)
 8018098:	f7e8 fa68 	bl	800056c <__aeabi_dmul>
 801809c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80180a0:	e7c3      	b.n	801802a <_dtoa_r+0x52a>
 80180a2:	bf00      	nop
 80180a4:	0801a890 	.word	0x0801a890
 80180a8:	0801a868 	.word	0x0801a868
 80180ac:	3ff00000 	.word	0x3ff00000
 80180b0:	40240000 	.word	0x40240000
 80180b4:	401c0000 	.word	0x401c0000
 80180b8:	40140000 	.word	0x40140000
 80180bc:	3fe00000 	.word	0x3fe00000
 80180c0:	4630      	mov	r0, r6
 80180c2:	4639      	mov	r1, r7
 80180c4:	f7e8 fa52 	bl	800056c <__aeabi_dmul>
 80180c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80180ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80180ce:	9c08      	ldr	r4, [sp, #32]
 80180d0:	9314      	str	r3, [sp, #80]	; 0x50
 80180d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80180d6:	f7e8 fcf9 	bl	8000acc <__aeabi_d2iz>
 80180da:	9015      	str	r0, [sp, #84]	; 0x54
 80180dc:	f7e8 f9dc 	bl	8000498 <__aeabi_i2d>
 80180e0:	4602      	mov	r2, r0
 80180e2:	460b      	mov	r3, r1
 80180e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80180e8:	f7e8 f888 	bl	80001fc <__aeabi_dsub>
 80180ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80180ee:	4606      	mov	r6, r0
 80180f0:	3330      	adds	r3, #48	; 0x30
 80180f2:	f804 3b01 	strb.w	r3, [r4], #1
 80180f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80180f8:	460f      	mov	r7, r1
 80180fa:	429c      	cmp	r4, r3
 80180fc:	f04f 0200 	mov.w	r2, #0
 8018100:	d124      	bne.n	801814c <_dtoa_r+0x64c>
 8018102:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018106:	4bb3      	ldr	r3, [pc, #716]	; (80183d4 <_dtoa_r+0x8d4>)
 8018108:	f7e8 f87a 	bl	8000200 <__adddf3>
 801810c:	4602      	mov	r2, r0
 801810e:	460b      	mov	r3, r1
 8018110:	4630      	mov	r0, r6
 8018112:	4639      	mov	r1, r7
 8018114:	f7e8 fcba 	bl	8000a8c <__aeabi_dcmpgt>
 8018118:	2800      	cmp	r0, #0
 801811a:	d162      	bne.n	80181e2 <_dtoa_r+0x6e2>
 801811c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018120:	2000      	movs	r0, #0
 8018122:	49ac      	ldr	r1, [pc, #688]	; (80183d4 <_dtoa_r+0x8d4>)
 8018124:	f7e8 f86a 	bl	80001fc <__aeabi_dsub>
 8018128:	4602      	mov	r2, r0
 801812a:	460b      	mov	r3, r1
 801812c:	4630      	mov	r0, r6
 801812e:	4639      	mov	r1, r7
 8018130:	f7e8 fc8e 	bl	8000a50 <__aeabi_dcmplt>
 8018134:	2800      	cmp	r0, #0
 8018136:	f43f af1d 	beq.w	8017f74 <_dtoa_r+0x474>
 801813a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801813c:	1e7b      	subs	r3, r7, #1
 801813e:	9314      	str	r3, [sp, #80]	; 0x50
 8018140:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8018144:	2b30      	cmp	r3, #48	; 0x30
 8018146:	d0f8      	beq.n	801813a <_dtoa_r+0x63a>
 8018148:	46c1      	mov	r9, r8
 801814a:	e03a      	b.n	80181c2 <_dtoa_r+0x6c2>
 801814c:	4ba2      	ldr	r3, [pc, #648]	; (80183d8 <_dtoa_r+0x8d8>)
 801814e:	f7e8 fa0d 	bl	800056c <__aeabi_dmul>
 8018152:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018156:	e7bc      	b.n	80180d2 <_dtoa_r+0x5d2>
 8018158:	9f08      	ldr	r7, [sp, #32]
 801815a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801815e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018162:	f7e8 fb2d 	bl	80007c0 <__aeabi_ddiv>
 8018166:	f7e8 fcb1 	bl	8000acc <__aeabi_d2iz>
 801816a:	4604      	mov	r4, r0
 801816c:	f7e8 f994 	bl	8000498 <__aeabi_i2d>
 8018170:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018174:	f7e8 f9fa 	bl	800056c <__aeabi_dmul>
 8018178:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801817c:	460b      	mov	r3, r1
 801817e:	4602      	mov	r2, r0
 8018180:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018184:	f7e8 f83a 	bl	80001fc <__aeabi_dsub>
 8018188:	f807 6b01 	strb.w	r6, [r7], #1
 801818c:	9e08      	ldr	r6, [sp, #32]
 801818e:	9b02      	ldr	r3, [sp, #8]
 8018190:	1bbe      	subs	r6, r7, r6
 8018192:	42b3      	cmp	r3, r6
 8018194:	d13a      	bne.n	801820c <_dtoa_r+0x70c>
 8018196:	4602      	mov	r2, r0
 8018198:	460b      	mov	r3, r1
 801819a:	f7e8 f831 	bl	8000200 <__adddf3>
 801819e:	4602      	mov	r2, r0
 80181a0:	460b      	mov	r3, r1
 80181a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80181a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80181aa:	f7e8 fc6f 	bl	8000a8c <__aeabi_dcmpgt>
 80181ae:	bb58      	cbnz	r0, 8018208 <_dtoa_r+0x708>
 80181b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80181b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80181b8:	f7e8 fc40 	bl	8000a3c <__aeabi_dcmpeq>
 80181bc:	b108      	cbz	r0, 80181c2 <_dtoa_r+0x6c2>
 80181be:	07e1      	lsls	r1, r4, #31
 80181c0:	d422      	bmi.n	8018208 <_dtoa_r+0x708>
 80181c2:	4628      	mov	r0, r5
 80181c4:	4651      	mov	r1, sl
 80181c6:	f000 ff33 	bl	8019030 <_Bfree>
 80181ca:	2300      	movs	r3, #0
 80181cc:	703b      	strb	r3, [r7, #0]
 80181ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80181d0:	f109 0001 	add.w	r0, r9, #1
 80181d4:	6018      	str	r0, [r3, #0]
 80181d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80181d8:	2b00      	cmp	r3, #0
 80181da:	f43f acdf 	beq.w	8017b9c <_dtoa_r+0x9c>
 80181de:	601f      	str	r7, [r3, #0]
 80181e0:	e4dc      	b.n	8017b9c <_dtoa_r+0x9c>
 80181e2:	4627      	mov	r7, r4
 80181e4:	463b      	mov	r3, r7
 80181e6:	461f      	mov	r7, r3
 80181e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80181ec:	2a39      	cmp	r2, #57	; 0x39
 80181ee:	d107      	bne.n	8018200 <_dtoa_r+0x700>
 80181f0:	9a08      	ldr	r2, [sp, #32]
 80181f2:	429a      	cmp	r2, r3
 80181f4:	d1f7      	bne.n	80181e6 <_dtoa_r+0x6e6>
 80181f6:	2230      	movs	r2, #48	; 0x30
 80181f8:	9908      	ldr	r1, [sp, #32]
 80181fa:	f108 0801 	add.w	r8, r8, #1
 80181fe:	700a      	strb	r2, [r1, #0]
 8018200:	781a      	ldrb	r2, [r3, #0]
 8018202:	3201      	adds	r2, #1
 8018204:	701a      	strb	r2, [r3, #0]
 8018206:	e79f      	b.n	8018148 <_dtoa_r+0x648>
 8018208:	46c8      	mov	r8, r9
 801820a:	e7eb      	b.n	80181e4 <_dtoa_r+0x6e4>
 801820c:	2200      	movs	r2, #0
 801820e:	4b72      	ldr	r3, [pc, #456]	; (80183d8 <_dtoa_r+0x8d8>)
 8018210:	f7e8 f9ac 	bl	800056c <__aeabi_dmul>
 8018214:	4602      	mov	r2, r0
 8018216:	460b      	mov	r3, r1
 8018218:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801821c:	2200      	movs	r2, #0
 801821e:	2300      	movs	r3, #0
 8018220:	f7e8 fc0c 	bl	8000a3c <__aeabi_dcmpeq>
 8018224:	2800      	cmp	r0, #0
 8018226:	d098      	beq.n	801815a <_dtoa_r+0x65a>
 8018228:	e7cb      	b.n	80181c2 <_dtoa_r+0x6c2>
 801822a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801822c:	2a00      	cmp	r2, #0
 801822e:	f000 80cd 	beq.w	80183cc <_dtoa_r+0x8cc>
 8018232:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8018234:	2a01      	cmp	r2, #1
 8018236:	f300 80af 	bgt.w	8018398 <_dtoa_r+0x898>
 801823a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801823c:	2a00      	cmp	r2, #0
 801823e:	f000 80a7 	beq.w	8018390 <_dtoa_r+0x890>
 8018242:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018246:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018248:	9f06      	ldr	r7, [sp, #24]
 801824a:	9a06      	ldr	r2, [sp, #24]
 801824c:	2101      	movs	r1, #1
 801824e:	441a      	add	r2, r3
 8018250:	9206      	str	r2, [sp, #24]
 8018252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018254:	4628      	mov	r0, r5
 8018256:	441a      	add	r2, r3
 8018258:	9209      	str	r2, [sp, #36]	; 0x24
 801825a:	f000 ffed 	bl	8019238 <__i2b>
 801825e:	4606      	mov	r6, r0
 8018260:	2f00      	cmp	r7, #0
 8018262:	dd0c      	ble.n	801827e <_dtoa_r+0x77e>
 8018264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018266:	2b00      	cmp	r3, #0
 8018268:	dd09      	ble.n	801827e <_dtoa_r+0x77e>
 801826a:	42bb      	cmp	r3, r7
 801826c:	bfa8      	it	ge
 801826e:	463b      	movge	r3, r7
 8018270:	9a06      	ldr	r2, [sp, #24]
 8018272:	1aff      	subs	r7, r7, r3
 8018274:	1ad2      	subs	r2, r2, r3
 8018276:	9206      	str	r2, [sp, #24]
 8018278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801827a:	1ad3      	subs	r3, r2, r3
 801827c:	9309      	str	r3, [sp, #36]	; 0x24
 801827e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018280:	b1f3      	cbz	r3, 80182c0 <_dtoa_r+0x7c0>
 8018282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018284:	2b00      	cmp	r3, #0
 8018286:	f000 80a9 	beq.w	80183dc <_dtoa_r+0x8dc>
 801828a:	2c00      	cmp	r4, #0
 801828c:	dd10      	ble.n	80182b0 <_dtoa_r+0x7b0>
 801828e:	4631      	mov	r1, r6
 8018290:	4622      	mov	r2, r4
 8018292:	4628      	mov	r0, r5
 8018294:	f001 f88a 	bl	80193ac <__pow5mult>
 8018298:	4652      	mov	r2, sl
 801829a:	4601      	mov	r1, r0
 801829c:	4606      	mov	r6, r0
 801829e:	4628      	mov	r0, r5
 80182a0:	f000 ffe0 	bl	8019264 <__multiply>
 80182a4:	4680      	mov	r8, r0
 80182a6:	4651      	mov	r1, sl
 80182a8:	4628      	mov	r0, r5
 80182aa:	f000 fec1 	bl	8019030 <_Bfree>
 80182ae:	46c2      	mov	sl, r8
 80182b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182b2:	1b1a      	subs	r2, r3, r4
 80182b4:	d004      	beq.n	80182c0 <_dtoa_r+0x7c0>
 80182b6:	4651      	mov	r1, sl
 80182b8:	4628      	mov	r0, r5
 80182ba:	f001 f877 	bl	80193ac <__pow5mult>
 80182be:	4682      	mov	sl, r0
 80182c0:	2101      	movs	r1, #1
 80182c2:	4628      	mov	r0, r5
 80182c4:	f000 ffb8 	bl	8019238 <__i2b>
 80182c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80182ca:	4604      	mov	r4, r0
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	f340 8087 	ble.w	80183e0 <_dtoa_r+0x8e0>
 80182d2:	461a      	mov	r2, r3
 80182d4:	4601      	mov	r1, r0
 80182d6:	4628      	mov	r0, r5
 80182d8:	f001 f868 	bl	80193ac <__pow5mult>
 80182dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80182de:	4604      	mov	r4, r0
 80182e0:	2b01      	cmp	r3, #1
 80182e2:	f340 8080 	ble.w	80183e6 <_dtoa_r+0x8e6>
 80182e6:	f04f 0800 	mov.w	r8, #0
 80182ea:	6923      	ldr	r3, [r4, #16]
 80182ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80182f0:	6918      	ldr	r0, [r3, #16]
 80182f2:	f000 ff53 	bl	801919c <__hi0bits>
 80182f6:	f1c0 0020 	rsb	r0, r0, #32
 80182fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182fc:	4418      	add	r0, r3
 80182fe:	f010 001f 	ands.w	r0, r0, #31
 8018302:	f000 8092 	beq.w	801842a <_dtoa_r+0x92a>
 8018306:	f1c0 0320 	rsb	r3, r0, #32
 801830a:	2b04      	cmp	r3, #4
 801830c:	f340 808a 	ble.w	8018424 <_dtoa_r+0x924>
 8018310:	f1c0 001c 	rsb	r0, r0, #28
 8018314:	9b06      	ldr	r3, [sp, #24]
 8018316:	4407      	add	r7, r0
 8018318:	4403      	add	r3, r0
 801831a:	9306      	str	r3, [sp, #24]
 801831c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801831e:	4403      	add	r3, r0
 8018320:	9309      	str	r3, [sp, #36]	; 0x24
 8018322:	9b06      	ldr	r3, [sp, #24]
 8018324:	2b00      	cmp	r3, #0
 8018326:	dd05      	ble.n	8018334 <_dtoa_r+0x834>
 8018328:	4651      	mov	r1, sl
 801832a:	461a      	mov	r2, r3
 801832c:	4628      	mov	r0, r5
 801832e:	f001 f897 	bl	8019460 <__lshift>
 8018332:	4682      	mov	sl, r0
 8018334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018336:	2b00      	cmp	r3, #0
 8018338:	dd05      	ble.n	8018346 <_dtoa_r+0x846>
 801833a:	4621      	mov	r1, r4
 801833c:	461a      	mov	r2, r3
 801833e:	4628      	mov	r0, r5
 8018340:	f001 f88e 	bl	8019460 <__lshift>
 8018344:	4604      	mov	r4, r0
 8018346:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018348:	2b00      	cmp	r3, #0
 801834a:	d070      	beq.n	801842e <_dtoa_r+0x92e>
 801834c:	4621      	mov	r1, r4
 801834e:	4650      	mov	r0, sl
 8018350:	f001 f8f2 	bl	8019538 <__mcmp>
 8018354:	2800      	cmp	r0, #0
 8018356:	da6a      	bge.n	801842e <_dtoa_r+0x92e>
 8018358:	2300      	movs	r3, #0
 801835a:	4651      	mov	r1, sl
 801835c:	220a      	movs	r2, #10
 801835e:	4628      	mov	r0, r5
 8018360:	f000 fe88 	bl	8019074 <__multadd>
 8018364:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018366:	4682      	mov	sl, r0
 8018368:	f109 39ff 	add.w	r9, r9, #4294967295
 801836c:	2b00      	cmp	r3, #0
 801836e:	f000 8193 	beq.w	8018698 <_dtoa_r+0xb98>
 8018372:	4631      	mov	r1, r6
 8018374:	2300      	movs	r3, #0
 8018376:	220a      	movs	r2, #10
 8018378:	4628      	mov	r0, r5
 801837a:	f000 fe7b 	bl	8019074 <__multadd>
 801837e:	f1bb 0f00 	cmp.w	fp, #0
 8018382:	4606      	mov	r6, r0
 8018384:	f300 8093 	bgt.w	80184ae <_dtoa_r+0x9ae>
 8018388:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801838a:	2b02      	cmp	r3, #2
 801838c:	dc57      	bgt.n	801843e <_dtoa_r+0x93e>
 801838e:	e08e      	b.n	80184ae <_dtoa_r+0x9ae>
 8018390:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018392:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018396:	e756      	b.n	8018246 <_dtoa_r+0x746>
 8018398:	9b02      	ldr	r3, [sp, #8]
 801839a:	1e5c      	subs	r4, r3, #1
 801839c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801839e:	42a3      	cmp	r3, r4
 80183a0:	bfb7      	itett	lt
 80183a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80183a4:	1b1c      	subge	r4, r3, r4
 80183a6:	1ae2      	sublt	r2, r4, r3
 80183a8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80183aa:	bfbe      	ittt	lt
 80183ac:	940a      	strlt	r4, [sp, #40]	; 0x28
 80183ae:	189b      	addlt	r3, r3, r2
 80183b0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80183b2:	9b02      	ldr	r3, [sp, #8]
 80183b4:	bfb8      	it	lt
 80183b6:	2400      	movlt	r4, #0
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	bfbb      	ittet	lt
 80183bc:	9b06      	ldrlt	r3, [sp, #24]
 80183be:	9a02      	ldrlt	r2, [sp, #8]
 80183c0:	9f06      	ldrge	r7, [sp, #24]
 80183c2:	1a9f      	sublt	r7, r3, r2
 80183c4:	bfac      	ite	ge
 80183c6:	9b02      	ldrge	r3, [sp, #8]
 80183c8:	2300      	movlt	r3, #0
 80183ca:	e73e      	b.n	801824a <_dtoa_r+0x74a>
 80183cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80183ce:	9f06      	ldr	r7, [sp, #24]
 80183d0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80183d2:	e745      	b.n	8018260 <_dtoa_r+0x760>
 80183d4:	3fe00000 	.word	0x3fe00000
 80183d8:	40240000 	.word	0x40240000
 80183dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80183de:	e76a      	b.n	80182b6 <_dtoa_r+0x7b6>
 80183e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80183e2:	2b01      	cmp	r3, #1
 80183e4:	dc19      	bgt.n	801841a <_dtoa_r+0x91a>
 80183e6:	9b04      	ldr	r3, [sp, #16]
 80183e8:	b9bb      	cbnz	r3, 801841a <_dtoa_r+0x91a>
 80183ea:	9b05      	ldr	r3, [sp, #20]
 80183ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80183f0:	b99b      	cbnz	r3, 801841a <_dtoa_r+0x91a>
 80183f2:	9b05      	ldr	r3, [sp, #20]
 80183f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80183f8:	0d1b      	lsrs	r3, r3, #20
 80183fa:	051b      	lsls	r3, r3, #20
 80183fc:	b183      	cbz	r3, 8018420 <_dtoa_r+0x920>
 80183fe:	f04f 0801 	mov.w	r8, #1
 8018402:	9b06      	ldr	r3, [sp, #24]
 8018404:	3301      	adds	r3, #1
 8018406:	9306      	str	r3, [sp, #24]
 8018408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801840a:	3301      	adds	r3, #1
 801840c:	9309      	str	r3, [sp, #36]	; 0x24
 801840e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018410:	2b00      	cmp	r3, #0
 8018412:	f47f af6a 	bne.w	80182ea <_dtoa_r+0x7ea>
 8018416:	2001      	movs	r0, #1
 8018418:	e76f      	b.n	80182fa <_dtoa_r+0x7fa>
 801841a:	f04f 0800 	mov.w	r8, #0
 801841e:	e7f6      	b.n	801840e <_dtoa_r+0x90e>
 8018420:	4698      	mov	r8, r3
 8018422:	e7f4      	b.n	801840e <_dtoa_r+0x90e>
 8018424:	f43f af7d 	beq.w	8018322 <_dtoa_r+0x822>
 8018428:	4618      	mov	r0, r3
 801842a:	301c      	adds	r0, #28
 801842c:	e772      	b.n	8018314 <_dtoa_r+0x814>
 801842e:	9b02      	ldr	r3, [sp, #8]
 8018430:	2b00      	cmp	r3, #0
 8018432:	dc36      	bgt.n	80184a2 <_dtoa_r+0x9a2>
 8018434:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018436:	2b02      	cmp	r3, #2
 8018438:	dd33      	ble.n	80184a2 <_dtoa_r+0x9a2>
 801843a:	f8dd b008 	ldr.w	fp, [sp, #8]
 801843e:	f1bb 0f00 	cmp.w	fp, #0
 8018442:	d10d      	bne.n	8018460 <_dtoa_r+0x960>
 8018444:	4621      	mov	r1, r4
 8018446:	465b      	mov	r3, fp
 8018448:	2205      	movs	r2, #5
 801844a:	4628      	mov	r0, r5
 801844c:	f000 fe12 	bl	8019074 <__multadd>
 8018450:	4601      	mov	r1, r0
 8018452:	4604      	mov	r4, r0
 8018454:	4650      	mov	r0, sl
 8018456:	f001 f86f 	bl	8019538 <__mcmp>
 801845a:	2800      	cmp	r0, #0
 801845c:	f73f adb6 	bgt.w	8017fcc <_dtoa_r+0x4cc>
 8018460:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018462:	9f08      	ldr	r7, [sp, #32]
 8018464:	ea6f 0903 	mvn.w	r9, r3
 8018468:	f04f 0800 	mov.w	r8, #0
 801846c:	4621      	mov	r1, r4
 801846e:	4628      	mov	r0, r5
 8018470:	f000 fdde 	bl	8019030 <_Bfree>
 8018474:	2e00      	cmp	r6, #0
 8018476:	f43f aea4 	beq.w	80181c2 <_dtoa_r+0x6c2>
 801847a:	f1b8 0f00 	cmp.w	r8, #0
 801847e:	d005      	beq.n	801848c <_dtoa_r+0x98c>
 8018480:	45b0      	cmp	r8, r6
 8018482:	d003      	beq.n	801848c <_dtoa_r+0x98c>
 8018484:	4641      	mov	r1, r8
 8018486:	4628      	mov	r0, r5
 8018488:	f000 fdd2 	bl	8019030 <_Bfree>
 801848c:	4631      	mov	r1, r6
 801848e:	4628      	mov	r0, r5
 8018490:	f000 fdce 	bl	8019030 <_Bfree>
 8018494:	e695      	b.n	80181c2 <_dtoa_r+0x6c2>
 8018496:	2400      	movs	r4, #0
 8018498:	4626      	mov	r6, r4
 801849a:	e7e1      	b.n	8018460 <_dtoa_r+0x960>
 801849c:	46c1      	mov	r9, r8
 801849e:	4626      	mov	r6, r4
 80184a0:	e594      	b.n	8017fcc <_dtoa_r+0x4cc>
 80184a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80184a4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	f000 80fc 	beq.w	80186a6 <_dtoa_r+0xba6>
 80184ae:	2f00      	cmp	r7, #0
 80184b0:	dd05      	ble.n	80184be <_dtoa_r+0x9be>
 80184b2:	4631      	mov	r1, r6
 80184b4:	463a      	mov	r2, r7
 80184b6:	4628      	mov	r0, r5
 80184b8:	f000 ffd2 	bl	8019460 <__lshift>
 80184bc:	4606      	mov	r6, r0
 80184be:	f1b8 0f00 	cmp.w	r8, #0
 80184c2:	d05c      	beq.n	801857e <_dtoa_r+0xa7e>
 80184c4:	4628      	mov	r0, r5
 80184c6:	6871      	ldr	r1, [r6, #4]
 80184c8:	f000 fd72 	bl	8018fb0 <_Balloc>
 80184cc:	4607      	mov	r7, r0
 80184ce:	b928      	cbnz	r0, 80184dc <_dtoa_r+0x9dc>
 80184d0:	4602      	mov	r2, r0
 80184d2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80184d6:	4b7e      	ldr	r3, [pc, #504]	; (80186d0 <_dtoa_r+0xbd0>)
 80184d8:	f7ff bb26 	b.w	8017b28 <_dtoa_r+0x28>
 80184dc:	6932      	ldr	r2, [r6, #16]
 80184de:	f106 010c 	add.w	r1, r6, #12
 80184e2:	3202      	adds	r2, #2
 80184e4:	0092      	lsls	r2, r2, #2
 80184e6:	300c      	adds	r0, #12
 80184e8:	f7fd fba4 	bl	8015c34 <memcpy>
 80184ec:	2201      	movs	r2, #1
 80184ee:	4639      	mov	r1, r7
 80184f0:	4628      	mov	r0, r5
 80184f2:	f000 ffb5 	bl	8019460 <__lshift>
 80184f6:	46b0      	mov	r8, r6
 80184f8:	4606      	mov	r6, r0
 80184fa:	9b08      	ldr	r3, [sp, #32]
 80184fc:	3301      	adds	r3, #1
 80184fe:	9302      	str	r3, [sp, #8]
 8018500:	9b08      	ldr	r3, [sp, #32]
 8018502:	445b      	add	r3, fp
 8018504:	930a      	str	r3, [sp, #40]	; 0x28
 8018506:	9b04      	ldr	r3, [sp, #16]
 8018508:	f003 0301 	and.w	r3, r3, #1
 801850c:	9309      	str	r3, [sp, #36]	; 0x24
 801850e:	9b02      	ldr	r3, [sp, #8]
 8018510:	4621      	mov	r1, r4
 8018512:	4650      	mov	r0, sl
 8018514:	f103 3bff 	add.w	fp, r3, #4294967295
 8018518:	f7ff fa62 	bl	80179e0 <quorem>
 801851c:	4603      	mov	r3, r0
 801851e:	4641      	mov	r1, r8
 8018520:	3330      	adds	r3, #48	; 0x30
 8018522:	9004      	str	r0, [sp, #16]
 8018524:	4650      	mov	r0, sl
 8018526:	930b      	str	r3, [sp, #44]	; 0x2c
 8018528:	f001 f806 	bl	8019538 <__mcmp>
 801852c:	4632      	mov	r2, r6
 801852e:	9006      	str	r0, [sp, #24]
 8018530:	4621      	mov	r1, r4
 8018532:	4628      	mov	r0, r5
 8018534:	f001 f81c 	bl	8019570 <__mdiff>
 8018538:	68c2      	ldr	r2, [r0, #12]
 801853a:	4607      	mov	r7, r0
 801853c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801853e:	bb02      	cbnz	r2, 8018582 <_dtoa_r+0xa82>
 8018540:	4601      	mov	r1, r0
 8018542:	4650      	mov	r0, sl
 8018544:	f000 fff8 	bl	8019538 <__mcmp>
 8018548:	4602      	mov	r2, r0
 801854a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801854c:	4639      	mov	r1, r7
 801854e:	4628      	mov	r0, r5
 8018550:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8018554:	f000 fd6c 	bl	8019030 <_Bfree>
 8018558:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801855a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801855c:	9f02      	ldr	r7, [sp, #8]
 801855e:	ea43 0102 	orr.w	r1, r3, r2
 8018562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018564:	430b      	orrs	r3, r1
 8018566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018568:	d10d      	bne.n	8018586 <_dtoa_r+0xa86>
 801856a:	2b39      	cmp	r3, #57	; 0x39
 801856c:	d027      	beq.n	80185be <_dtoa_r+0xabe>
 801856e:	9a06      	ldr	r2, [sp, #24]
 8018570:	2a00      	cmp	r2, #0
 8018572:	dd01      	ble.n	8018578 <_dtoa_r+0xa78>
 8018574:	9b04      	ldr	r3, [sp, #16]
 8018576:	3331      	adds	r3, #49	; 0x31
 8018578:	f88b 3000 	strb.w	r3, [fp]
 801857c:	e776      	b.n	801846c <_dtoa_r+0x96c>
 801857e:	4630      	mov	r0, r6
 8018580:	e7b9      	b.n	80184f6 <_dtoa_r+0x9f6>
 8018582:	2201      	movs	r2, #1
 8018584:	e7e2      	b.n	801854c <_dtoa_r+0xa4c>
 8018586:	9906      	ldr	r1, [sp, #24]
 8018588:	2900      	cmp	r1, #0
 801858a:	db04      	blt.n	8018596 <_dtoa_r+0xa96>
 801858c:	9822      	ldr	r0, [sp, #136]	; 0x88
 801858e:	4301      	orrs	r1, r0
 8018590:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018592:	4301      	orrs	r1, r0
 8018594:	d120      	bne.n	80185d8 <_dtoa_r+0xad8>
 8018596:	2a00      	cmp	r2, #0
 8018598:	ddee      	ble.n	8018578 <_dtoa_r+0xa78>
 801859a:	4651      	mov	r1, sl
 801859c:	2201      	movs	r2, #1
 801859e:	4628      	mov	r0, r5
 80185a0:	9302      	str	r3, [sp, #8]
 80185a2:	f000 ff5d 	bl	8019460 <__lshift>
 80185a6:	4621      	mov	r1, r4
 80185a8:	4682      	mov	sl, r0
 80185aa:	f000 ffc5 	bl	8019538 <__mcmp>
 80185ae:	2800      	cmp	r0, #0
 80185b0:	9b02      	ldr	r3, [sp, #8]
 80185b2:	dc02      	bgt.n	80185ba <_dtoa_r+0xaba>
 80185b4:	d1e0      	bne.n	8018578 <_dtoa_r+0xa78>
 80185b6:	07da      	lsls	r2, r3, #31
 80185b8:	d5de      	bpl.n	8018578 <_dtoa_r+0xa78>
 80185ba:	2b39      	cmp	r3, #57	; 0x39
 80185bc:	d1da      	bne.n	8018574 <_dtoa_r+0xa74>
 80185be:	2339      	movs	r3, #57	; 0x39
 80185c0:	f88b 3000 	strb.w	r3, [fp]
 80185c4:	463b      	mov	r3, r7
 80185c6:	461f      	mov	r7, r3
 80185c8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80185cc:	3b01      	subs	r3, #1
 80185ce:	2a39      	cmp	r2, #57	; 0x39
 80185d0:	d050      	beq.n	8018674 <_dtoa_r+0xb74>
 80185d2:	3201      	adds	r2, #1
 80185d4:	701a      	strb	r2, [r3, #0]
 80185d6:	e749      	b.n	801846c <_dtoa_r+0x96c>
 80185d8:	2a00      	cmp	r2, #0
 80185da:	dd03      	ble.n	80185e4 <_dtoa_r+0xae4>
 80185dc:	2b39      	cmp	r3, #57	; 0x39
 80185de:	d0ee      	beq.n	80185be <_dtoa_r+0xabe>
 80185e0:	3301      	adds	r3, #1
 80185e2:	e7c9      	b.n	8018578 <_dtoa_r+0xa78>
 80185e4:	9a02      	ldr	r2, [sp, #8]
 80185e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80185e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80185ec:	428a      	cmp	r2, r1
 80185ee:	d02a      	beq.n	8018646 <_dtoa_r+0xb46>
 80185f0:	4651      	mov	r1, sl
 80185f2:	2300      	movs	r3, #0
 80185f4:	220a      	movs	r2, #10
 80185f6:	4628      	mov	r0, r5
 80185f8:	f000 fd3c 	bl	8019074 <__multadd>
 80185fc:	45b0      	cmp	r8, r6
 80185fe:	4682      	mov	sl, r0
 8018600:	f04f 0300 	mov.w	r3, #0
 8018604:	f04f 020a 	mov.w	r2, #10
 8018608:	4641      	mov	r1, r8
 801860a:	4628      	mov	r0, r5
 801860c:	d107      	bne.n	801861e <_dtoa_r+0xb1e>
 801860e:	f000 fd31 	bl	8019074 <__multadd>
 8018612:	4680      	mov	r8, r0
 8018614:	4606      	mov	r6, r0
 8018616:	9b02      	ldr	r3, [sp, #8]
 8018618:	3301      	adds	r3, #1
 801861a:	9302      	str	r3, [sp, #8]
 801861c:	e777      	b.n	801850e <_dtoa_r+0xa0e>
 801861e:	f000 fd29 	bl	8019074 <__multadd>
 8018622:	4631      	mov	r1, r6
 8018624:	4680      	mov	r8, r0
 8018626:	2300      	movs	r3, #0
 8018628:	220a      	movs	r2, #10
 801862a:	4628      	mov	r0, r5
 801862c:	f000 fd22 	bl	8019074 <__multadd>
 8018630:	4606      	mov	r6, r0
 8018632:	e7f0      	b.n	8018616 <_dtoa_r+0xb16>
 8018634:	f1bb 0f00 	cmp.w	fp, #0
 8018638:	bfcc      	ite	gt
 801863a:	465f      	movgt	r7, fp
 801863c:	2701      	movle	r7, #1
 801863e:	f04f 0800 	mov.w	r8, #0
 8018642:	9a08      	ldr	r2, [sp, #32]
 8018644:	4417      	add	r7, r2
 8018646:	4651      	mov	r1, sl
 8018648:	2201      	movs	r2, #1
 801864a:	4628      	mov	r0, r5
 801864c:	9302      	str	r3, [sp, #8]
 801864e:	f000 ff07 	bl	8019460 <__lshift>
 8018652:	4621      	mov	r1, r4
 8018654:	4682      	mov	sl, r0
 8018656:	f000 ff6f 	bl	8019538 <__mcmp>
 801865a:	2800      	cmp	r0, #0
 801865c:	dcb2      	bgt.n	80185c4 <_dtoa_r+0xac4>
 801865e:	d102      	bne.n	8018666 <_dtoa_r+0xb66>
 8018660:	9b02      	ldr	r3, [sp, #8]
 8018662:	07db      	lsls	r3, r3, #31
 8018664:	d4ae      	bmi.n	80185c4 <_dtoa_r+0xac4>
 8018666:	463b      	mov	r3, r7
 8018668:	461f      	mov	r7, r3
 801866a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801866e:	2a30      	cmp	r2, #48	; 0x30
 8018670:	d0fa      	beq.n	8018668 <_dtoa_r+0xb68>
 8018672:	e6fb      	b.n	801846c <_dtoa_r+0x96c>
 8018674:	9a08      	ldr	r2, [sp, #32]
 8018676:	429a      	cmp	r2, r3
 8018678:	d1a5      	bne.n	80185c6 <_dtoa_r+0xac6>
 801867a:	2331      	movs	r3, #49	; 0x31
 801867c:	f109 0901 	add.w	r9, r9, #1
 8018680:	7013      	strb	r3, [r2, #0]
 8018682:	e6f3      	b.n	801846c <_dtoa_r+0x96c>
 8018684:	4b13      	ldr	r3, [pc, #76]	; (80186d4 <_dtoa_r+0xbd4>)
 8018686:	f7ff baa7 	b.w	8017bd8 <_dtoa_r+0xd8>
 801868a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801868c:	2b00      	cmp	r3, #0
 801868e:	f47f aa80 	bne.w	8017b92 <_dtoa_r+0x92>
 8018692:	4b11      	ldr	r3, [pc, #68]	; (80186d8 <_dtoa_r+0xbd8>)
 8018694:	f7ff baa0 	b.w	8017bd8 <_dtoa_r+0xd8>
 8018698:	f1bb 0f00 	cmp.w	fp, #0
 801869c:	dc03      	bgt.n	80186a6 <_dtoa_r+0xba6>
 801869e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80186a0:	2b02      	cmp	r3, #2
 80186a2:	f73f aecc 	bgt.w	801843e <_dtoa_r+0x93e>
 80186a6:	9f08      	ldr	r7, [sp, #32]
 80186a8:	4621      	mov	r1, r4
 80186aa:	4650      	mov	r0, sl
 80186ac:	f7ff f998 	bl	80179e0 <quorem>
 80186b0:	9a08      	ldr	r2, [sp, #32]
 80186b2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80186b6:	f807 3b01 	strb.w	r3, [r7], #1
 80186ba:	1aba      	subs	r2, r7, r2
 80186bc:	4593      	cmp	fp, r2
 80186be:	ddb9      	ble.n	8018634 <_dtoa_r+0xb34>
 80186c0:	4651      	mov	r1, sl
 80186c2:	2300      	movs	r3, #0
 80186c4:	220a      	movs	r2, #10
 80186c6:	4628      	mov	r0, r5
 80186c8:	f000 fcd4 	bl	8019074 <__multadd>
 80186cc:	4682      	mov	sl, r0
 80186ce:	e7eb      	b.n	80186a8 <_dtoa_r+0xba8>
 80186d0:	0801a774 	.word	0x0801a774
 80186d4:	0801a574 	.word	0x0801a574
 80186d8:	0801a6f1 	.word	0x0801a6f1

080186dc <__sflush_r>:
 80186dc:	898a      	ldrh	r2, [r1, #12]
 80186de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186e2:	4605      	mov	r5, r0
 80186e4:	0710      	lsls	r0, r2, #28
 80186e6:	460c      	mov	r4, r1
 80186e8:	d458      	bmi.n	801879c <__sflush_r+0xc0>
 80186ea:	684b      	ldr	r3, [r1, #4]
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	dc05      	bgt.n	80186fc <__sflush_r+0x20>
 80186f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	dc02      	bgt.n	80186fc <__sflush_r+0x20>
 80186f6:	2000      	movs	r0, #0
 80186f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80186fe:	2e00      	cmp	r6, #0
 8018700:	d0f9      	beq.n	80186f6 <__sflush_r+0x1a>
 8018702:	2300      	movs	r3, #0
 8018704:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018708:	682f      	ldr	r7, [r5, #0]
 801870a:	602b      	str	r3, [r5, #0]
 801870c:	d032      	beq.n	8018774 <__sflush_r+0x98>
 801870e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018710:	89a3      	ldrh	r3, [r4, #12]
 8018712:	075a      	lsls	r2, r3, #29
 8018714:	d505      	bpl.n	8018722 <__sflush_r+0x46>
 8018716:	6863      	ldr	r3, [r4, #4]
 8018718:	1ac0      	subs	r0, r0, r3
 801871a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801871c:	b10b      	cbz	r3, 8018722 <__sflush_r+0x46>
 801871e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018720:	1ac0      	subs	r0, r0, r3
 8018722:	2300      	movs	r3, #0
 8018724:	4602      	mov	r2, r0
 8018726:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018728:	4628      	mov	r0, r5
 801872a:	6a21      	ldr	r1, [r4, #32]
 801872c:	47b0      	blx	r6
 801872e:	1c43      	adds	r3, r0, #1
 8018730:	89a3      	ldrh	r3, [r4, #12]
 8018732:	d106      	bne.n	8018742 <__sflush_r+0x66>
 8018734:	6829      	ldr	r1, [r5, #0]
 8018736:	291d      	cmp	r1, #29
 8018738:	d82c      	bhi.n	8018794 <__sflush_r+0xb8>
 801873a:	4a2a      	ldr	r2, [pc, #168]	; (80187e4 <__sflush_r+0x108>)
 801873c:	40ca      	lsrs	r2, r1
 801873e:	07d6      	lsls	r6, r2, #31
 8018740:	d528      	bpl.n	8018794 <__sflush_r+0xb8>
 8018742:	2200      	movs	r2, #0
 8018744:	6062      	str	r2, [r4, #4]
 8018746:	6922      	ldr	r2, [r4, #16]
 8018748:	04d9      	lsls	r1, r3, #19
 801874a:	6022      	str	r2, [r4, #0]
 801874c:	d504      	bpl.n	8018758 <__sflush_r+0x7c>
 801874e:	1c42      	adds	r2, r0, #1
 8018750:	d101      	bne.n	8018756 <__sflush_r+0x7a>
 8018752:	682b      	ldr	r3, [r5, #0]
 8018754:	b903      	cbnz	r3, 8018758 <__sflush_r+0x7c>
 8018756:	6560      	str	r0, [r4, #84]	; 0x54
 8018758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801875a:	602f      	str	r7, [r5, #0]
 801875c:	2900      	cmp	r1, #0
 801875e:	d0ca      	beq.n	80186f6 <__sflush_r+0x1a>
 8018760:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018764:	4299      	cmp	r1, r3
 8018766:	d002      	beq.n	801876e <__sflush_r+0x92>
 8018768:	4628      	mov	r0, r5
 801876a:	f7fd fa79 	bl	8015c60 <_free_r>
 801876e:	2000      	movs	r0, #0
 8018770:	6360      	str	r0, [r4, #52]	; 0x34
 8018772:	e7c1      	b.n	80186f8 <__sflush_r+0x1c>
 8018774:	6a21      	ldr	r1, [r4, #32]
 8018776:	2301      	movs	r3, #1
 8018778:	4628      	mov	r0, r5
 801877a:	47b0      	blx	r6
 801877c:	1c41      	adds	r1, r0, #1
 801877e:	d1c7      	bne.n	8018710 <__sflush_r+0x34>
 8018780:	682b      	ldr	r3, [r5, #0]
 8018782:	2b00      	cmp	r3, #0
 8018784:	d0c4      	beq.n	8018710 <__sflush_r+0x34>
 8018786:	2b1d      	cmp	r3, #29
 8018788:	d001      	beq.n	801878e <__sflush_r+0xb2>
 801878a:	2b16      	cmp	r3, #22
 801878c:	d101      	bne.n	8018792 <__sflush_r+0xb6>
 801878e:	602f      	str	r7, [r5, #0]
 8018790:	e7b1      	b.n	80186f6 <__sflush_r+0x1a>
 8018792:	89a3      	ldrh	r3, [r4, #12]
 8018794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018798:	81a3      	strh	r3, [r4, #12]
 801879a:	e7ad      	b.n	80186f8 <__sflush_r+0x1c>
 801879c:	690f      	ldr	r7, [r1, #16]
 801879e:	2f00      	cmp	r7, #0
 80187a0:	d0a9      	beq.n	80186f6 <__sflush_r+0x1a>
 80187a2:	0793      	lsls	r3, r2, #30
 80187a4:	bf18      	it	ne
 80187a6:	2300      	movne	r3, #0
 80187a8:	680e      	ldr	r6, [r1, #0]
 80187aa:	bf08      	it	eq
 80187ac:	694b      	ldreq	r3, [r1, #20]
 80187ae:	eba6 0807 	sub.w	r8, r6, r7
 80187b2:	600f      	str	r7, [r1, #0]
 80187b4:	608b      	str	r3, [r1, #8]
 80187b6:	f1b8 0f00 	cmp.w	r8, #0
 80187ba:	dd9c      	ble.n	80186f6 <__sflush_r+0x1a>
 80187bc:	4643      	mov	r3, r8
 80187be:	463a      	mov	r2, r7
 80187c0:	4628      	mov	r0, r5
 80187c2:	6a21      	ldr	r1, [r4, #32]
 80187c4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80187c6:	47b0      	blx	r6
 80187c8:	2800      	cmp	r0, #0
 80187ca:	dc06      	bgt.n	80187da <__sflush_r+0xfe>
 80187cc:	89a3      	ldrh	r3, [r4, #12]
 80187ce:	f04f 30ff 	mov.w	r0, #4294967295
 80187d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80187d6:	81a3      	strh	r3, [r4, #12]
 80187d8:	e78e      	b.n	80186f8 <__sflush_r+0x1c>
 80187da:	4407      	add	r7, r0
 80187dc:	eba8 0800 	sub.w	r8, r8, r0
 80187e0:	e7e9      	b.n	80187b6 <__sflush_r+0xda>
 80187e2:	bf00      	nop
 80187e4:	20400001 	.word	0x20400001

080187e8 <_fflush_r>:
 80187e8:	b538      	push	{r3, r4, r5, lr}
 80187ea:	690b      	ldr	r3, [r1, #16]
 80187ec:	4605      	mov	r5, r0
 80187ee:	460c      	mov	r4, r1
 80187f0:	b913      	cbnz	r3, 80187f8 <_fflush_r+0x10>
 80187f2:	2500      	movs	r5, #0
 80187f4:	4628      	mov	r0, r5
 80187f6:	bd38      	pop	{r3, r4, r5, pc}
 80187f8:	b118      	cbz	r0, 8018802 <_fflush_r+0x1a>
 80187fa:	6983      	ldr	r3, [r0, #24]
 80187fc:	b90b      	cbnz	r3, 8018802 <_fflush_r+0x1a>
 80187fe:	f7fd f943 	bl	8015a88 <__sinit>
 8018802:	4b14      	ldr	r3, [pc, #80]	; (8018854 <_fflush_r+0x6c>)
 8018804:	429c      	cmp	r4, r3
 8018806:	d11b      	bne.n	8018840 <_fflush_r+0x58>
 8018808:	686c      	ldr	r4, [r5, #4]
 801880a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801880e:	2b00      	cmp	r3, #0
 8018810:	d0ef      	beq.n	80187f2 <_fflush_r+0xa>
 8018812:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018814:	07d0      	lsls	r0, r2, #31
 8018816:	d404      	bmi.n	8018822 <_fflush_r+0x3a>
 8018818:	0599      	lsls	r1, r3, #22
 801881a:	d402      	bmi.n	8018822 <_fflush_r+0x3a>
 801881c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801881e:	f7fd f9f6 	bl	8015c0e <__retarget_lock_acquire_recursive>
 8018822:	4628      	mov	r0, r5
 8018824:	4621      	mov	r1, r4
 8018826:	f7ff ff59 	bl	80186dc <__sflush_r>
 801882a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801882c:	4605      	mov	r5, r0
 801882e:	07da      	lsls	r2, r3, #31
 8018830:	d4e0      	bmi.n	80187f4 <_fflush_r+0xc>
 8018832:	89a3      	ldrh	r3, [r4, #12]
 8018834:	059b      	lsls	r3, r3, #22
 8018836:	d4dd      	bmi.n	80187f4 <_fflush_r+0xc>
 8018838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801883a:	f7fd f9e9 	bl	8015c10 <__retarget_lock_release_recursive>
 801883e:	e7d9      	b.n	80187f4 <_fflush_r+0xc>
 8018840:	4b05      	ldr	r3, [pc, #20]	; (8018858 <_fflush_r+0x70>)
 8018842:	429c      	cmp	r4, r3
 8018844:	d101      	bne.n	801884a <_fflush_r+0x62>
 8018846:	68ac      	ldr	r4, [r5, #8]
 8018848:	e7df      	b.n	801880a <_fflush_r+0x22>
 801884a:	4b04      	ldr	r3, [pc, #16]	; (801885c <_fflush_r+0x74>)
 801884c:	429c      	cmp	r4, r3
 801884e:	bf08      	it	eq
 8018850:	68ec      	ldreq	r4, [r5, #12]
 8018852:	e7da      	b.n	801880a <_fflush_r+0x22>
 8018854:	0801a520 	.word	0x0801a520
 8018858:	0801a540 	.word	0x0801a540
 801885c:	0801a500 	.word	0x0801a500

08018860 <rshift>:
 8018860:	6903      	ldr	r3, [r0, #16]
 8018862:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018866:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801886a:	f100 0414 	add.w	r4, r0, #20
 801886e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018872:	dd46      	ble.n	8018902 <rshift+0xa2>
 8018874:	f011 011f 	ands.w	r1, r1, #31
 8018878:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801887c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018880:	d10c      	bne.n	801889c <rshift+0x3c>
 8018882:	4629      	mov	r1, r5
 8018884:	f100 0710 	add.w	r7, r0, #16
 8018888:	42b1      	cmp	r1, r6
 801888a:	d335      	bcc.n	80188f8 <rshift+0x98>
 801888c:	1a9b      	subs	r3, r3, r2
 801888e:	009b      	lsls	r3, r3, #2
 8018890:	1eea      	subs	r2, r5, #3
 8018892:	4296      	cmp	r6, r2
 8018894:	bf38      	it	cc
 8018896:	2300      	movcc	r3, #0
 8018898:	4423      	add	r3, r4
 801889a:	e015      	b.n	80188c8 <rshift+0x68>
 801889c:	46a1      	mov	r9, r4
 801889e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80188a2:	f1c1 0820 	rsb	r8, r1, #32
 80188a6:	40cf      	lsrs	r7, r1
 80188a8:	f105 0e04 	add.w	lr, r5, #4
 80188ac:	4576      	cmp	r6, lr
 80188ae:	46f4      	mov	ip, lr
 80188b0:	d816      	bhi.n	80188e0 <rshift+0x80>
 80188b2:	1a9b      	subs	r3, r3, r2
 80188b4:	009a      	lsls	r2, r3, #2
 80188b6:	3a04      	subs	r2, #4
 80188b8:	3501      	adds	r5, #1
 80188ba:	42ae      	cmp	r6, r5
 80188bc:	bf38      	it	cc
 80188be:	2200      	movcc	r2, #0
 80188c0:	18a3      	adds	r3, r4, r2
 80188c2:	50a7      	str	r7, [r4, r2]
 80188c4:	b107      	cbz	r7, 80188c8 <rshift+0x68>
 80188c6:	3304      	adds	r3, #4
 80188c8:	42a3      	cmp	r3, r4
 80188ca:	eba3 0204 	sub.w	r2, r3, r4
 80188ce:	bf08      	it	eq
 80188d0:	2300      	moveq	r3, #0
 80188d2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80188d6:	6102      	str	r2, [r0, #16]
 80188d8:	bf08      	it	eq
 80188da:	6143      	streq	r3, [r0, #20]
 80188dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80188e0:	f8dc c000 	ldr.w	ip, [ip]
 80188e4:	fa0c fc08 	lsl.w	ip, ip, r8
 80188e8:	ea4c 0707 	orr.w	r7, ip, r7
 80188ec:	f849 7b04 	str.w	r7, [r9], #4
 80188f0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80188f4:	40cf      	lsrs	r7, r1
 80188f6:	e7d9      	b.n	80188ac <rshift+0x4c>
 80188f8:	f851 cb04 	ldr.w	ip, [r1], #4
 80188fc:	f847 cf04 	str.w	ip, [r7, #4]!
 8018900:	e7c2      	b.n	8018888 <rshift+0x28>
 8018902:	4623      	mov	r3, r4
 8018904:	e7e0      	b.n	80188c8 <rshift+0x68>

08018906 <__hexdig_fun>:
 8018906:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801890a:	2b09      	cmp	r3, #9
 801890c:	d802      	bhi.n	8018914 <__hexdig_fun+0xe>
 801890e:	3820      	subs	r0, #32
 8018910:	b2c0      	uxtb	r0, r0
 8018912:	4770      	bx	lr
 8018914:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018918:	2b05      	cmp	r3, #5
 801891a:	d801      	bhi.n	8018920 <__hexdig_fun+0x1a>
 801891c:	3847      	subs	r0, #71	; 0x47
 801891e:	e7f7      	b.n	8018910 <__hexdig_fun+0xa>
 8018920:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018924:	2b05      	cmp	r3, #5
 8018926:	d801      	bhi.n	801892c <__hexdig_fun+0x26>
 8018928:	3827      	subs	r0, #39	; 0x27
 801892a:	e7f1      	b.n	8018910 <__hexdig_fun+0xa>
 801892c:	2000      	movs	r0, #0
 801892e:	4770      	bx	lr

08018930 <__gethex>:
 8018930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018934:	b08b      	sub	sp, #44	; 0x2c
 8018936:	9306      	str	r3, [sp, #24]
 8018938:	4bb9      	ldr	r3, [pc, #740]	; (8018c20 <__gethex+0x2f0>)
 801893a:	9002      	str	r0, [sp, #8]
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	468b      	mov	fp, r1
 8018940:	4618      	mov	r0, r3
 8018942:	4690      	mov	r8, r2
 8018944:	9303      	str	r3, [sp, #12]
 8018946:	f7e7 fc4d 	bl	80001e4 <strlen>
 801894a:	4682      	mov	sl, r0
 801894c:	9b03      	ldr	r3, [sp, #12]
 801894e:	f8db 2000 	ldr.w	r2, [fp]
 8018952:	4403      	add	r3, r0
 8018954:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018958:	9307      	str	r3, [sp, #28]
 801895a:	1c93      	adds	r3, r2, #2
 801895c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018960:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018964:	32fe      	adds	r2, #254	; 0xfe
 8018966:	18d1      	adds	r1, r2, r3
 8018968:	461f      	mov	r7, r3
 801896a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801896e:	9101      	str	r1, [sp, #4]
 8018970:	2830      	cmp	r0, #48	; 0x30
 8018972:	d0f8      	beq.n	8018966 <__gethex+0x36>
 8018974:	f7ff ffc7 	bl	8018906 <__hexdig_fun>
 8018978:	4604      	mov	r4, r0
 801897a:	2800      	cmp	r0, #0
 801897c:	d13a      	bne.n	80189f4 <__gethex+0xc4>
 801897e:	4652      	mov	r2, sl
 8018980:	4638      	mov	r0, r7
 8018982:	9903      	ldr	r1, [sp, #12]
 8018984:	f001 f94e 	bl	8019c24 <strncmp>
 8018988:	4605      	mov	r5, r0
 801898a:	2800      	cmp	r0, #0
 801898c:	d166      	bne.n	8018a5c <__gethex+0x12c>
 801898e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018992:	eb07 060a 	add.w	r6, r7, sl
 8018996:	f7ff ffb6 	bl	8018906 <__hexdig_fun>
 801899a:	2800      	cmp	r0, #0
 801899c:	d060      	beq.n	8018a60 <__gethex+0x130>
 801899e:	4633      	mov	r3, r6
 80189a0:	7818      	ldrb	r0, [r3, #0]
 80189a2:	461f      	mov	r7, r3
 80189a4:	2830      	cmp	r0, #48	; 0x30
 80189a6:	f103 0301 	add.w	r3, r3, #1
 80189aa:	d0f9      	beq.n	80189a0 <__gethex+0x70>
 80189ac:	f7ff ffab 	bl	8018906 <__hexdig_fun>
 80189b0:	2301      	movs	r3, #1
 80189b2:	fab0 f480 	clz	r4, r0
 80189b6:	4635      	mov	r5, r6
 80189b8:	0964      	lsrs	r4, r4, #5
 80189ba:	9301      	str	r3, [sp, #4]
 80189bc:	463a      	mov	r2, r7
 80189be:	4616      	mov	r6, r2
 80189c0:	7830      	ldrb	r0, [r6, #0]
 80189c2:	3201      	adds	r2, #1
 80189c4:	f7ff ff9f 	bl	8018906 <__hexdig_fun>
 80189c8:	2800      	cmp	r0, #0
 80189ca:	d1f8      	bne.n	80189be <__gethex+0x8e>
 80189cc:	4652      	mov	r2, sl
 80189ce:	4630      	mov	r0, r6
 80189d0:	9903      	ldr	r1, [sp, #12]
 80189d2:	f001 f927 	bl	8019c24 <strncmp>
 80189d6:	b980      	cbnz	r0, 80189fa <__gethex+0xca>
 80189d8:	b94d      	cbnz	r5, 80189ee <__gethex+0xbe>
 80189da:	eb06 050a 	add.w	r5, r6, sl
 80189de:	462a      	mov	r2, r5
 80189e0:	4616      	mov	r6, r2
 80189e2:	7830      	ldrb	r0, [r6, #0]
 80189e4:	3201      	adds	r2, #1
 80189e6:	f7ff ff8e 	bl	8018906 <__hexdig_fun>
 80189ea:	2800      	cmp	r0, #0
 80189ec:	d1f8      	bne.n	80189e0 <__gethex+0xb0>
 80189ee:	1bad      	subs	r5, r5, r6
 80189f0:	00ad      	lsls	r5, r5, #2
 80189f2:	e004      	b.n	80189fe <__gethex+0xce>
 80189f4:	2400      	movs	r4, #0
 80189f6:	4625      	mov	r5, r4
 80189f8:	e7e0      	b.n	80189bc <__gethex+0x8c>
 80189fa:	2d00      	cmp	r5, #0
 80189fc:	d1f7      	bne.n	80189ee <__gethex+0xbe>
 80189fe:	7833      	ldrb	r3, [r6, #0]
 8018a00:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018a04:	2b50      	cmp	r3, #80	; 0x50
 8018a06:	d139      	bne.n	8018a7c <__gethex+0x14c>
 8018a08:	7873      	ldrb	r3, [r6, #1]
 8018a0a:	2b2b      	cmp	r3, #43	; 0x2b
 8018a0c:	d02a      	beq.n	8018a64 <__gethex+0x134>
 8018a0e:	2b2d      	cmp	r3, #45	; 0x2d
 8018a10:	d02c      	beq.n	8018a6c <__gethex+0x13c>
 8018a12:	f04f 0900 	mov.w	r9, #0
 8018a16:	1c71      	adds	r1, r6, #1
 8018a18:	7808      	ldrb	r0, [r1, #0]
 8018a1a:	f7ff ff74 	bl	8018906 <__hexdig_fun>
 8018a1e:	1e43      	subs	r3, r0, #1
 8018a20:	b2db      	uxtb	r3, r3
 8018a22:	2b18      	cmp	r3, #24
 8018a24:	d82a      	bhi.n	8018a7c <__gethex+0x14c>
 8018a26:	f1a0 0210 	sub.w	r2, r0, #16
 8018a2a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018a2e:	f7ff ff6a 	bl	8018906 <__hexdig_fun>
 8018a32:	1e43      	subs	r3, r0, #1
 8018a34:	b2db      	uxtb	r3, r3
 8018a36:	2b18      	cmp	r3, #24
 8018a38:	d91b      	bls.n	8018a72 <__gethex+0x142>
 8018a3a:	f1b9 0f00 	cmp.w	r9, #0
 8018a3e:	d000      	beq.n	8018a42 <__gethex+0x112>
 8018a40:	4252      	negs	r2, r2
 8018a42:	4415      	add	r5, r2
 8018a44:	f8cb 1000 	str.w	r1, [fp]
 8018a48:	b1d4      	cbz	r4, 8018a80 <__gethex+0x150>
 8018a4a:	9b01      	ldr	r3, [sp, #4]
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	bf14      	ite	ne
 8018a50:	2700      	movne	r7, #0
 8018a52:	2706      	moveq	r7, #6
 8018a54:	4638      	mov	r0, r7
 8018a56:	b00b      	add	sp, #44	; 0x2c
 8018a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a5c:	463e      	mov	r6, r7
 8018a5e:	4625      	mov	r5, r4
 8018a60:	2401      	movs	r4, #1
 8018a62:	e7cc      	b.n	80189fe <__gethex+0xce>
 8018a64:	f04f 0900 	mov.w	r9, #0
 8018a68:	1cb1      	adds	r1, r6, #2
 8018a6a:	e7d5      	b.n	8018a18 <__gethex+0xe8>
 8018a6c:	f04f 0901 	mov.w	r9, #1
 8018a70:	e7fa      	b.n	8018a68 <__gethex+0x138>
 8018a72:	230a      	movs	r3, #10
 8018a74:	fb03 0202 	mla	r2, r3, r2, r0
 8018a78:	3a10      	subs	r2, #16
 8018a7a:	e7d6      	b.n	8018a2a <__gethex+0xfa>
 8018a7c:	4631      	mov	r1, r6
 8018a7e:	e7e1      	b.n	8018a44 <__gethex+0x114>
 8018a80:	4621      	mov	r1, r4
 8018a82:	1bf3      	subs	r3, r6, r7
 8018a84:	3b01      	subs	r3, #1
 8018a86:	2b07      	cmp	r3, #7
 8018a88:	dc0a      	bgt.n	8018aa0 <__gethex+0x170>
 8018a8a:	9802      	ldr	r0, [sp, #8]
 8018a8c:	f000 fa90 	bl	8018fb0 <_Balloc>
 8018a90:	4604      	mov	r4, r0
 8018a92:	b940      	cbnz	r0, 8018aa6 <__gethex+0x176>
 8018a94:	4602      	mov	r2, r0
 8018a96:	21de      	movs	r1, #222	; 0xde
 8018a98:	4b62      	ldr	r3, [pc, #392]	; (8018c24 <__gethex+0x2f4>)
 8018a9a:	4863      	ldr	r0, [pc, #396]	; (8018c28 <__gethex+0x2f8>)
 8018a9c:	f001 f8e2 	bl	8019c64 <__assert_func>
 8018aa0:	3101      	adds	r1, #1
 8018aa2:	105b      	asrs	r3, r3, #1
 8018aa4:	e7ef      	b.n	8018a86 <__gethex+0x156>
 8018aa6:	f04f 0b00 	mov.w	fp, #0
 8018aaa:	f100 0914 	add.w	r9, r0, #20
 8018aae:	f1ca 0301 	rsb	r3, sl, #1
 8018ab2:	f8cd 9010 	str.w	r9, [sp, #16]
 8018ab6:	f8cd b004 	str.w	fp, [sp, #4]
 8018aba:	9308      	str	r3, [sp, #32]
 8018abc:	42b7      	cmp	r7, r6
 8018abe:	d33f      	bcc.n	8018b40 <__gethex+0x210>
 8018ac0:	9f04      	ldr	r7, [sp, #16]
 8018ac2:	9b01      	ldr	r3, [sp, #4]
 8018ac4:	f847 3b04 	str.w	r3, [r7], #4
 8018ac8:	eba7 0709 	sub.w	r7, r7, r9
 8018acc:	10bf      	asrs	r7, r7, #2
 8018ace:	6127      	str	r7, [r4, #16]
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	f000 fb63 	bl	801919c <__hi0bits>
 8018ad6:	017f      	lsls	r7, r7, #5
 8018ad8:	f8d8 6000 	ldr.w	r6, [r8]
 8018adc:	1a3f      	subs	r7, r7, r0
 8018ade:	42b7      	cmp	r7, r6
 8018ae0:	dd62      	ble.n	8018ba8 <__gethex+0x278>
 8018ae2:	1bbf      	subs	r7, r7, r6
 8018ae4:	4639      	mov	r1, r7
 8018ae6:	4620      	mov	r0, r4
 8018ae8:	f000 fef9 	bl	80198de <__any_on>
 8018aec:	4682      	mov	sl, r0
 8018aee:	b1a8      	cbz	r0, 8018b1c <__gethex+0x1ec>
 8018af0:	f04f 0a01 	mov.w	sl, #1
 8018af4:	1e7b      	subs	r3, r7, #1
 8018af6:	1159      	asrs	r1, r3, #5
 8018af8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018afc:	f003 021f 	and.w	r2, r3, #31
 8018b00:	fa0a f202 	lsl.w	r2, sl, r2
 8018b04:	420a      	tst	r2, r1
 8018b06:	d009      	beq.n	8018b1c <__gethex+0x1ec>
 8018b08:	4553      	cmp	r3, sl
 8018b0a:	dd05      	ble.n	8018b18 <__gethex+0x1e8>
 8018b0c:	4620      	mov	r0, r4
 8018b0e:	1eb9      	subs	r1, r7, #2
 8018b10:	f000 fee5 	bl	80198de <__any_on>
 8018b14:	2800      	cmp	r0, #0
 8018b16:	d144      	bne.n	8018ba2 <__gethex+0x272>
 8018b18:	f04f 0a02 	mov.w	sl, #2
 8018b1c:	4639      	mov	r1, r7
 8018b1e:	4620      	mov	r0, r4
 8018b20:	f7ff fe9e 	bl	8018860 <rshift>
 8018b24:	443d      	add	r5, r7
 8018b26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018b2a:	42ab      	cmp	r3, r5
 8018b2c:	da4a      	bge.n	8018bc4 <__gethex+0x294>
 8018b2e:	4621      	mov	r1, r4
 8018b30:	9802      	ldr	r0, [sp, #8]
 8018b32:	f000 fa7d 	bl	8019030 <_Bfree>
 8018b36:	2300      	movs	r3, #0
 8018b38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018b3a:	27a3      	movs	r7, #163	; 0xa3
 8018b3c:	6013      	str	r3, [r2, #0]
 8018b3e:	e789      	b.n	8018a54 <__gethex+0x124>
 8018b40:	1e73      	subs	r3, r6, #1
 8018b42:	9a07      	ldr	r2, [sp, #28]
 8018b44:	9305      	str	r3, [sp, #20]
 8018b46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018b4a:	4293      	cmp	r3, r2
 8018b4c:	d019      	beq.n	8018b82 <__gethex+0x252>
 8018b4e:	f1bb 0f20 	cmp.w	fp, #32
 8018b52:	d107      	bne.n	8018b64 <__gethex+0x234>
 8018b54:	9b04      	ldr	r3, [sp, #16]
 8018b56:	9a01      	ldr	r2, [sp, #4]
 8018b58:	f843 2b04 	str.w	r2, [r3], #4
 8018b5c:	9304      	str	r3, [sp, #16]
 8018b5e:	2300      	movs	r3, #0
 8018b60:	469b      	mov	fp, r3
 8018b62:	9301      	str	r3, [sp, #4]
 8018b64:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018b68:	f7ff fecd 	bl	8018906 <__hexdig_fun>
 8018b6c:	9b01      	ldr	r3, [sp, #4]
 8018b6e:	f000 000f 	and.w	r0, r0, #15
 8018b72:	fa00 f00b 	lsl.w	r0, r0, fp
 8018b76:	4303      	orrs	r3, r0
 8018b78:	9301      	str	r3, [sp, #4]
 8018b7a:	f10b 0b04 	add.w	fp, fp, #4
 8018b7e:	9b05      	ldr	r3, [sp, #20]
 8018b80:	e00d      	b.n	8018b9e <__gethex+0x26e>
 8018b82:	9b05      	ldr	r3, [sp, #20]
 8018b84:	9a08      	ldr	r2, [sp, #32]
 8018b86:	4413      	add	r3, r2
 8018b88:	42bb      	cmp	r3, r7
 8018b8a:	d3e0      	bcc.n	8018b4e <__gethex+0x21e>
 8018b8c:	4618      	mov	r0, r3
 8018b8e:	4652      	mov	r2, sl
 8018b90:	9903      	ldr	r1, [sp, #12]
 8018b92:	9309      	str	r3, [sp, #36]	; 0x24
 8018b94:	f001 f846 	bl	8019c24 <strncmp>
 8018b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b9a:	2800      	cmp	r0, #0
 8018b9c:	d1d7      	bne.n	8018b4e <__gethex+0x21e>
 8018b9e:	461e      	mov	r6, r3
 8018ba0:	e78c      	b.n	8018abc <__gethex+0x18c>
 8018ba2:	f04f 0a03 	mov.w	sl, #3
 8018ba6:	e7b9      	b.n	8018b1c <__gethex+0x1ec>
 8018ba8:	da09      	bge.n	8018bbe <__gethex+0x28e>
 8018baa:	1bf7      	subs	r7, r6, r7
 8018bac:	4621      	mov	r1, r4
 8018bae:	463a      	mov	r2, r7
 8018bb0:	9802      	ldr	r0, [sp, #8]
 8018bb2:	f000 fc55 	bl	8019460 <__lshift>
 8018bb6:	4604      	mov	r4, r0
 8018bb8:	1bed      	subs	r5, r5, r7
 8018bba:	f100 0914 	add.w	r9, r0, #20
 8018bbe:	f04f 0a00 	mov.w	sl, #0
 8018bc2:	e7b0      	b.n	8018b26 <__gethex+0x1f6>
 8018bc4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018bc8:	42a8      	cmp	r0, r5
 8018bca:	dd71      	ble.n	8018cb0 <__gethex+0x380>
 8018bcc:	1b45      	subs	r5, r0, r5
 8018bce:	42ae      	cmp	r6, r5
 8018bd0:	dc34      	bgt.n	8018c3c <__gethex+0x30c>
 8018bd2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018bd6:	2b02      	cmp	r3, #2
 8018bd8:	d028      	beq.n	8018c2c <__gethex+0x2fc>
 8018bda:	2b03      	cmp	r3, #3
 8018bdc:	d02a      	beq.n	8018c34 <__gethex+0x304>
 8018bde:	2b01      	cmp	r3, #1
 8018be0:	d115      	bne.n	8018c0e <__gethex+0x2de>
 8018be2:	42ae      	cmp	r6, r5
 8018be4:	d113      	bne.n	8018c0e <__gethex+0x2de>
 8018be6:	2e01      	cmp	r6, #1
 8018be8:	d10b      	bne.n	8018c02 <__gethex+0x2d2>
 8018bea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018bee:	9a06      	ldr	r2, [sp, #24]
 8018bf0:	2762      	movs	r7, #98	; 0x62
 8018bf2:	6013      	str	r3, [r2, #0]
 8018bf4:	2301      	movs	r3, #1
 8018bf6:	6123      	str	r3, [r4, #16]
 8018bf8:	f8c9 3000 	str.w	r3, [r9]
 8018bfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018bfe:	601c      	str	r4, [r3, #0]
 8018c00:	e728      	b.n	8018a54 <__gethex+0x124>
 8018c02:	4620      	mov	r0, r4
 8018c04:	1e71      	subs	r1, r6, #1
 8018c06:	f000 fe6a 	bl	80198de <__any_on>
 8018c0a:	2800      	cmp	r0, #0
 8018c0c:	d1ed      	bne.n	8018bea <__gethex+0x2ba>
 8018c0e:	4621      	mov	r1, r4
 8018c10:	9802      	ldr	r0, [sp, #8]
 8018c12:	f000 fa0d 	bl	8019030 <_Bfree>
 8018c16:	2300      	movs	r3, #0
 8018c18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018c1a:	2750      	movs	r7, #80	; 0x50
 8018c1c:	6013      	str	r3, [r2, #0]
 8018c1e:	e719      	b.n	8018a54 <__gethex+0x124>
 8018c20:	0801a7f0 	.word	0x0801a7f0
 8018c24:	0801a774 	.word	0x0801a774
 8018c28:	0801a785 	.word	0x0801a785
 8018c2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d1ed      	bne.n	8018c0e <__gethex+0x2de>
 8018c32:	e7da      	b.n	8018bea <__gethex+0x2ba>
 8018c34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d1d7      	bne.n	8018bea <__gethex+0x2ba>
 8018c3a:	e7e8      	b.n	8018c0e <__gethex+0x2de>
 8018c3c:	1e6f      	subs	r7, r5, #1
 8018c3e:	f1ba 0f00 	cmp.w	sl, #0
 8018c42:	d132      	bne.n	8018caa <__gethex+0x37a>
 8018c44:	b127      	cbz	r7, 8018c50 <__gethex+0x320>
 8018c46:	4639      	mov	r1, r7
 8018c48:	4620      	mov	r0, r4
 8018c4a:	f000 fe48 	bl	80198de <__any_on>
 8018c4e:	4682      	mov	sl, r0
 8018c50:	2101      	movs	r1, #1
 8018c52:	117b      	asrs	r3, r7, #5
 8018c54:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018c58:	f007 071f 	and.w	r7, r7, #31
 8018c5c:	fa01 f707 	lsl.w	r7, r1, r7
 8018c60:	421f      	tst	r7, r3
 8018c62:	f04f 0702 	mov.w	r7, #2
 8018c66:	4629      	mov	r1, r5
 8018c68:	4620      	mov	r0, r4
 8018c6a:	bf18      	it	ne
 8018c6c:	f04a 0a02 	orrne.w	sl, sl, #2
 8018c70:	1b76      	subs	r6, r6, r5
 8018c72:	f7ff fdf5 	bl	8018860 <rshift>
 8018c76:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018c7a:	f1ba 0f00 	cmp.w	sl, #0
 8018c7e:	d048      	beq.n	8018d12 <__gethex+0x3e2>
 8018c80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018c84:	2b02      	cmp	r3, #2
 8018c86:	d015      	beq.n	8018cb4 <__gethex+0x384>
 8018c88:	2b03      	cmp	r3, #3
 8018c8a:	d017      	beq.n	8018cbc <__gethex+0x38c>
 8018c8c:	2b01      	cmp	r3, #1
 8018c8e:	d109      	bne.n	8018ca4 <__gethex+0x374>
 8018c90:	f01a 0f02 	tst.w	sl, #2
 8018c94:	d006      	beq.n	8018ca4 <__gethex+0x374>
 8018c96:	f8d9 0000 	ldr.w	r0, [r9]
 8018c9a:	ea4a 0a00 	orr.w	sl, sl, r0
 8018c9e:	f01a 0f01 	tst.w	sl, #1
 8018ca2:	d10e      	bne.n	8018cc2 <__gethex+0x392>
 8018ca4:	f047 0710 	orr.w	r7, r7, #16
 8018ca8:	e033      	b.n	8018d12 <__gethex+0x3e2>
 8018caa:	f04f 0a01 	mov.w	sl, #1
 8018cae:	e7cf      	b.n	8018c50 <__gethex+0x320>
 8018cb0:	2701      	movs	r7, #1
 8018cb2:	e7e2      	b.n	8018c7a <__gethex+0x34a>
 8018cb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018cb6:	f1c3 0301 	rsb	r3, r3, #1
 8018cba:	9315      	str	r3, [sp, #84]	; 0x54
 8018cbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d0f0      	beq.n	8018ca4 <__gethex+0x374>
 8018cc2:	f04f 0c00 	mov.w	ip, #0
 8018cc6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018cca:	f104 0314 	add.w	r3, r4, #20
 8018cce:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018cd2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8018cdc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018ce0:	d01c      	beq.n	8018d1c <__gethex+0x3ec>
 8018ce2:	3201      	adds	r2, #1
 8018ce4:	6002      	str	r2, [r0, #0]
 8018ce6:	2f02      	cmp	r7, #2
 8018ce8:	f104 0314 	add.w	r3, r4, #20
 8018cec:	d13d      	bne.n	8018d6a <__gethex+0x43a>
 8018cee:	f8d8 2000 	ldr.w	r2, [r8]
 8018cf2:	3a01      	subs	r2, #1
 8018cf4:	42b2      	cmp	r2, r6
 8018cf6:	d10a      	bne.n	8018d0e <__gethex+0x3de>
 8018cf8:	2201      	movs	r2, #1
 8018cfa:	1171      	asrs	r1, r6, #5
 8018cfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018d00:	f006 061f 	and.w	r6, r6, #31
 8018d04:	fa02 f606 	lsl.w	r6, r2, r6
 8018d08:	421e      	tst	r6, r3
 8018d0a:	bf18      	it	ne
 8018d0c:	4617      	movne	r7, r2
 8018d0e:	f047 0720 	orr.w	r7, r7, #32
 8018d12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018d14:	601c      	str	r4, [r3, #0]
 8018d16:	9b06      	ldr	r3, [sp, #24]
 8018d18:	601d      	str	r5, [r3, #0]
 8018d1a:	e69b      	b.n	8018a54 <__gethex+0x124>
 8018d1c:	4299      	cmp	r1, r3
 8018d1e:	f843 cc04 	str.w	ip, [r3, #-4]
 8018d22:	d8d8      	bhi.n	8018cd6 <__gethex+0x3a6>
 8018d24:	68a3      	ldr	r3, [r4, #8]
 8018d26:	459b      	cmp	fp, r3
 8018d28:	db17      	blt.n	8018d5a <__gethex+0x42a>
 8018d2a:	6861      	ldr	r1, [r4, #4]
 8018d2c:	9802      	ldr	r0, [sp, #8]
 8018d2e:	3101      	adds	r1, #1
 8018d30:	f000 f93e 	bl	8018fb0 <_Balloc>
 8018d34:	4681      	mov	r9, r0
 8018d36:	b918      	cbnz	r0, 8018d40 <__gethex+0x410>
 8018d38:	4602      	mov	r2, r0
 8018d3a:	2184      	movs	r1, #132	; 0x84
 8018d3c:	4b19      	ldr	r3, [pc, #100]	; (8018da4 <__gethex+0x474>)
 8018d3e:	e6ac      	b.n	8018a9a <__gethex+0x16a>
 8018d40:	6922      	ldr	r2, [r4, #16]
 8018d42:	f104 010c 	add.w	r1, r4, #12
 8018d46:	3202      	adds	r2, #2
 8018d48:	0092      	lsls	r2, r2, #2
 8018d4a:	300c      	adds	r0, #12
 8018d4c:	f7fc ff72 	bl	8015c34 <memcpy>
 8018d50:	4621      	mov	r1, r4
 8018d52:	9802      	ldr	r0, [sp, #8]
 8018d54:	f000 f96c 	bl	8019030 <_Bfree>
 8018d58:	464c      	mov	r4, r9
 8018d5a:	6923      	ldr	r3, [r4, #16]
 8018d5c:	1c5a      	adds	r2, r3, #1
 8018d5e:	6122      	str	r2, [r4, #16]
 8018d60:	2201      	movs	r2, #1
 8018d62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018d66:	615a      	str	r2, [r3, #20]
 8018d68:	e7bd      	b.n	8018ce6 <__gethex+0x3b6>
 8018d6a:	6922      	ldr	r2, [r4, #16]
 8018d6c:	455a      	cmp	r2, fp
 8018d6e:	dd0b      	ble.n	8018d88 <__gethex+0x458>
 8018d70:	2101      	movs	r1, #1
 8018d72:	4620      	mov	r0, r4
 8018d74:	f7ff fd74 	bl	8018860 <rshift>
 8018d78:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018d7c:	3501      	adds	r5, #1
 8018d7e:	42ab      	cmp	r3, r5
 8018d80:	f6ff aed5 	blt.w	8018b2e <__gethex+0x1fe>
 8018d84:	2701      	movs	r7, #1
 8018d86:	e7c2      	b.n	8018d0e <__gethex+0x3de>
 8018d88:	f016 061f 	ands.w	r6, r6, #31
 8018d8c:	d0fa      	beq.n	8018d84 <__gethex+0x454>
 8018d8e:	449a      	add	sl, r3
 8018d90:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018d94:	f000 fa02 	bl	801919c <__hi0bits>
 8018d98:	f1c6 0620 	rsb	r6, r6, #32
 8018d9c:	42b0      	cmp	r0, r6
 8018d9e:	dbe7      	blt.n	8018d70 <__gethex+0x440>
 8018da0:	e7f0      	b.n	8018d84 <__gethex+0x454>
 8018da2:	bf00      	nop
 8018da4:	0801a774 	.word	0x0801a774

08018da8 <L_shift>:
 8018da8:	f1c2 0208 	rsb	r2, r2, #8
 8018dac:	0092      	lsls	r2, r2, #2
 8018dae:	b570      	push	{r4, r5, r6, lr}
 8018db0:	f1c2 0620 	rsb	r6, r2, #32
 8018db4:	6843      	ldr	r3, [r0, #4]
 8018db6:	6804      	ldr	r4, [r0, #0]
 8018db8:	fa03 f506 	lsl.w	r5, r3, r6
 8018dbc:	432c      	orrs	r4, r5
 8018dbe:	40d3      	lsrs	r3, r2
 8018dc0:	6004      	str	r4, [r0, #0]
 8018dc2:	f840 3f04 	str.w	r3, [r0, #4]!
 8018dc6:	4288      	cmp	r0, r1
 8018dc8:	d3f4      	bcc.n	8018db4 <L_shift+0xc>
 8018dca:	bd70      	pop	{r4, r5, r6, pc}

08018dcc <__match>:
 8018dcc:	b530      	push	{r4, r5, lr}
 8018dce:	6803      	ldr	r3, [r0, #0]
 8018dd0:	3301      	adds	r3, #1
 8018dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018dd6:	b914      	cbnz	r4, 8018dde <__match+0x12>
 8018dd8:	6003      	str	r3, [r0, #0]
 8018dda:	2001      	movs	r0, #1
 8018ddc:	bd30      	pop	{r4, r5, pc}
 8018dde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018de2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018de6:	2d19      	cmp	r5, #25
 8018de8:	bf98      	it	ls
 8018dea:	3220      	addls	r2, #32
 8018dec:	42a2      	cmp	r2, r4
 8018dee:	d0f0      	beq.n	8018dd2 <__match+0x6>
 8018df0:	2000      	movs	r0, #0
 8018df2:	e7f3      	b.n	8018ddc <__match+0x10>

08018df4 <__hexnan>:
 8018df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018df8:	2500      	movs	r5, #0
 8018dfa:	680b      	ldr	r3, [r1, #0]
 8018dfc:	4682      	mov	sl, r0
 8018dfe:	115e      	asrs	r6, r3, #5
 8018e00:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018e04:	f013 031f 	ands.w	r3, r3, #31
 8018e08:	bf18      	it	ne
 8018e0a:	3604      	addne	r6, #4
 8018e0c:	1f37      	subs	r7, r6, #4
 8018e0e:	4690      	mov	r8, r2
 8018e10:	46b9      	mov	r9, r7
 8018e12:	463c      	mov	r4, r7
 8018e14:	46ab      	mov	fp, r5
 8018e16:	b087      	sub	sp, #28
 8018e18:	6801      	ldr	r1, [r0, #0]
 8018e1a:	9301      	str	r3, [sp, #4]
 8018e1c:	f846 5c04 	str.w	r5, [r6, #-4]
 8018e20:	9502      	str	r5, [sp, #8]
 8018e22:	784a      	ldrb	r2, [r1, #1]
 8018e24:	1c4b      	adds	r3, r1, #1
 8018e26:	9303      	str	r3, [sp, #12]
 8018e28:	b342      	cbz	r2, 8018e7c <__hexnan+0x88>
 8018e2a:	4610      	mov	r0, r2
 8018e2c:	9105      	str	r1, [sp, #20]
 8018e2e:	9204      	str	r2, [sp, #16]
 8018e30:	f7ff fd69 	bl	8018906 <__hexdig_fun>
 8018e34:	2800      	cmp	r0, #0
 8018e36:	d14f      	bne.n	8018ed8 <__hexnan+0xe4>
 8018e38:	9a04      	ldr	r2, [sp, #16]
 8018e3a:	9905      	ldr	r1, [sp, #20]
 8018e3c:	2a20      	cmp	r2, #32
 8018e3e:	d818      	bhi.n	8018e72 <__hexnan+0x7e>
 8018e40:	9b02      	ldr	r3, [sp, #8]
 8018e42:	459b      	cmp	fp, r3
 8018e44:	dd13      	ble.n	8018e6e <__hexnan+0x7a>
 8018e46:	454c      	cmp	r4, r9
 8018e48:	d206      	bcs.n	8018e58 <__hexnan+0x64>
 8018e4a:	2d07      	cmp	r5, #7
 8018e4c:	dc04      	bgt.n	8018e58 <__hexnan+0x64>
 8018e4e:	462a      	mov	r2, r5
 8018e50:	4649      	mov	r1, r9
 8018e52:	4620      	mov	r0, r4
 8018e54:	f7ff ffa8 	bl	8018da8 <L_shift>
 8018e58:	4544      	cmp	r4, r8
 8018e5a:	d950      	bls.n	8018efe <__hexnan+0x10a>
 8018e5c:	2300      	movs	r3, #0
 8018e5e:	f1a4 0904 	sub.w	r9, r4, #4
 8018e62:	f844 3c04 	str.w	r3, [r4, #-4]
 8018e66:	461d      	mov	r5, r3
 8018e68:	464c      	mov	r4, r9
 8018e6a:	f8cd b008 	str.w	fp, [sp, #8]
 8018e6e:	9903      	ldr	r1, [sp, #12]
 8018e70:	e7d7      	b.n	8018e22 <__hexnan+0x2e>
 8018e72:	2a29      	cmp	r2, #41	; 0x29
 8018e74:	d156      	bne.n	8018f24 <__hexnan+0x130>
 8018e76:	3102      	adds	r1, #2
 8018e78:	f8ca 1000 	str.w	r1, [sl]
 8018e7c:	f1bb 0f00 	cmp.w	fp, #0
 8018e80:	d050      	beq.n	8018f24 <__hexnan+0x130>
 8018e82:	454c      	cmp	r4, r9
 8018e84:	d206      	bcs.n	8018e94 <__hexnan+0xa0>
 8018e86:	2d07      	cmp	r5, #7
 8018e88:	dc04      	bgt.n	8018e94 <__hexnan+0xa0>
 8018e8a:	462a      	mov	r2, r5
 8018e8c:	4649      	mov	r1, r9
 8018e8e:	4620      	mov	r0, r4
 8018e90:	f7ff ff8a 	bl	8018da8 <L_shift>
 8018e94:	4544      	cmp	r4, r8
 8018e96:	d934      	bls.n	8018f02 <__hexnan+0x10e>
 8018e98:	4623      	mov	r3, r4
 8018e9a:	f1a8 0204 	sub.w	r2, r8, #4
 8018e9e:	f853 1b04 	ldr.w	r1, [r3], #4
 8018ea2:	429f      	cmp	r7, r3
 8018ea4:	f842 1f04 	str.w	r1, [r2, #4]!
 8018ea8:	d2f9      	bcs.n	8018e9e <__hexnan+0xaa>
 8018eaa:	1b3b      	subs	r3, r7, r4
 8018eac:	f023 0303 	bic.w	r3, r3, #3
 8018eb0:	3304      	adds	r3, #4
 8018eb2:	3401      	adds	r4, #1
 8018eb4:	3e03      	subs	r6, #3
 8018eb6:	42b4      	cmp	r4, r6
 8018eb8:	bf88      	it	hi
 8018eba:	2304      	movhi	r3, #4
 8018ebc:	2200      	movs	r2, #0
 8018ebe:	4443      	add	r3, r8
 8018ec0:	f843 2b04 	str.w	r2, [r3], #4
 8018ec4:	429f      	cmp	r7, r3
 8018ec6:	d2fb      	bcs.n	8018ec0 <__hexnan+0xcc>
 8018ec8:	683b      	ldr	r3, [r7, #0]
 8018eca:	b91b      	cbnz	r3, 8018ed4 <__hexnan+0xe0>
 8018ecc:	4547      	cmp	r7, r8
 8018ece:	d127      	bne.n	8018f20 <__hexnan+0x12c>
 8018ed0:	2301      	movs	r3, #1
 8018ed2:	603b      	str	r3, [r7, #0]
 8018ed4:	2005      	movs	r0, #5
 8018ed6:	e026      	b.n	8018f26 <__hexnan+0x132>
 8018ed8:	3501      	adds	r5, #1
 8018eda:	2d08      	cmp	r5, #8
 8018edc:	f10b 0b01 	add.w	fp, fp, #1
 8018ee0:	dd06      	ble.n	8018ef0 <__hexnan+0xfc>
 8018ee2:	4544      	cmp	r4, r8
 8018ee4:	d9c3      	bls.n	8018e6e <__hexnan+0x7a>
 8018ee6:	2300      	movs	r3, #0
 8018ee8:	2501      	movs	r5, #1
 8018eea:	f844 3c04 	str.w	r3, [r4, #-4]
 8018eee:	3c04      	subs	r4, #4
 8018ef0:	6822      	ldr	r2, [r4, #0]
 8018ef2:	f000 000f 	and.w	r0, r0, #15
 8018ef6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018efa:	6022      	str	r2, [r4, #0]
 8018efc:	e7b7      	b.n	8018e6e <__hexnan+0x7a>
 8018efe:	2508      	movs	r5, #8
 8018f00:	e7b5      	b.n	8018e6e <__hexnan+0x7a>
 8018f02:	9b01      	ldr	r3, [sp, #4]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d0df      	beq.n	8018ec8 <__hexnan+0xd4>
 8018f08:	f04f 32ff 	mov.w	r2, #4294967295
 8018f0c:	f1c3 0320 	rsb	r3, r3, #32
 8018f10:	fa22 f303 	lsr.w	r3, r2, r3
 8018f14:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018f18:	401a      	ands	r2, r3
 8018f1a:	f846 2c04 	str.w	r2, [r6, #-4]
 8018f1e:	e7d3      	b.n	8018ec8 <__hexnan+0xd4>
 8018f20:	3f04      	subs	r7, #4
 8018f22:	e7d1      	b.n	8018ec8 <__hexnan+0xd4>
 8018f24:	2004      	movs	r0, #4
 8018f26:	b007      	add	sp, #28
 8018f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018f2c <_localeconv_r>:
 8018f2c:	4800      	ldr	r0, [pc, #0]	; (8018f30 <_localeconv_r+0x4>)
 8018f2e:	4770      	bx	lr
 8018f30:	200003a8 	.word	0x200003a8

08018f34 <_lseek_r>:
 8018f34:	b538      	push	{r3, r4, r5, lr}
 8018f36:	4604      	mov	r4, r0
 8018f38:	4608      	mov	r0, r1
 8018f3a:	4611      	mov	r1, r2
 8018f3c:	2200      	movs	r2, #0
 8018f3e:	4d05      	ldr	r5, [pc, #20]	; (8018f54 <_lseek_r+0x20>)
 8018f40:	602a      	str	r2, [r5, #0]
 8018f42:	461a      	mov	r2, r3
 8018f44:	f7ec fd56 	bl	80059f4 <_lseek>
 8018f48:	1c43      	adds	r3, r0, #1
 8018f4a:	d102      	bne.n	8018f52 <_lseek_r+0x1e>
 8018f4c:	682b      	ldr	r3, [r5, #0]
 8018f4e:	b103      	cbz	r3, 8018f52 <_lseek_r+0x1e>
 8018f50:	6023      	str	r3, [r4, #0]
 8018f52:	bd38      	pop	{r3, r4, r5, pc}
 8018f54:	2000e4bc 	.word	0x2000e4bc

08018f58 <__ascii_mbtowc>:
 8018f58:	b082      	sub	sp, #8
 8018f5a:	b901      	cbnz	r1, 8018f5e <__ascii_mbtowc+0x6>
 8018f5c:	a901      	add	r1, sp, #4
 8018f5e:	b142      	cbz	r2, 8018f72 <__ascii_mbtowc+0x1a>
 8018f60:	b14b      	cbz	r3, 8018f76 <__ascii_mbtowc+0x1e>
 8018f62:	7813      	ldrb	r3, [r2, #0]
 8018f64:	600b      	str	r3, [r1, #0]
 8018f66:	7812      	ldrb	r2, [r2, #0]
 8018f68:	1e10      	subs	r0, r2, #0
 8018f6a:	bf18      	it	ne
 8018f6c:	2001      	movne	r0, #1
 8018f6e:	b002      	add	sp, #8
 8018f70:	4770      	bx	lr
 8018f72:	4610      	mov	r0, r2
 8018f74:	e7fb      	b.n	8018f6e <__ascii_mbtowc+0x16>
 8018f76:	f06f 0001 	mvn.w	r0, #1
 8018f7a:	e7f8      	b.n	8018f6e <__ascii_mbtowc+0x16>

08018f7c <memchr>:
 8018f7c:	4603      	mov	r3, r0
 8018f7e:	b510      	push	{r4, lr}
 8018f80:	b2c9      	uxtb	r1, r1
 8018f82:	4402      	add	r2, r0
 8018f84:	4293      	cmp	r3, r2
 8018f86:	4618      	mov	r0, r3
 8018f88:	d101      	bne.n	8018f8e <memchr+0x12>
 8018f8a:	2000      	movs	r0, #0
 8018f8c:	e003      	b.n	8018f96 <memchr+0x1a>
 8018f8e:	7804      	ldrb	r4, [r0, #0]
 8018f90:	3301      	adds	r3, #1
 8018f92:	428c      	cmp	r4, r1
 8018f94:	d1f6      	bne.n	8018f84 <memchr+0x8>
 8018f96:	bd10      	pop	{r4, pc}

08018f98 <__malloc_lock>:
 8018f98:	4801      	ldr	r0, [pc, #4]	; (8018fa0 <__malloc_lock+0x8>)
 8018f9a:	f7fc be38 	b.w	8015c0e <__retarget_lock_acquire_recursive>
 8018f9e:	bf00      	nop
 8018fa0:	2000e4b4 	.word	0x2000e4b4

08018fa4 <__malloc_unlock>:
 8018fa4:	4801      	ldr	r0, [pc, #4]	; (8018fac <__malloc_unlock+0x8>)
 8018fa6:	f7fc be33 	b.w	8015c10 <__retarget_lock_release_recursive>
 8018faa:	bf00      	nop
 8018fac:	2000e4b4 	.word	0x2000e4b4

08018fb0 <_Balloc>:
 8018fb0:	b570      	push	{r4, r5, r6, lr}
 8018fb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018fb4:	4604      	mov	r4, r0
 8018fb6:	460d      	mov	r5, r1
 8018fb8:	b976      	cbnz	r6, 8018fd8 <_Balloc+0x28>
 8018fba:	2010      	movs	r0, #16
 8018fbc:	f7fc fe2a 	bl	8015c14 <malloc>
 8018fc0:	4602      	mov	r2, r0
 8018fc2:	6260      	str	r0, [r4, #36]	; 0x24
 8018fc4:	b920      	cbnz	r0, 8018fd0 <_Balloc+0x20>
 8018fc6:	2166      	movs	r1, #102	; 0x66
 8018fc8:	4b17      	ldr	r3, [pc, #92]	; (8019028 <_Balloc+0x78>)
 8018fca:	4818      	ldr	r0, [pc, #96]	; (801902c <_Balloc+0x7c>)
 8018fcc:	f000 fe4a 	bl	8019c64 <__assert_func>
 8018fd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018fd4:	6006      	str	r6, [r0, #0]
 8018fd6:	60c6      	str	r6, [r0, #12]
 8018fd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018fda:	68f3      	ldr	r3, [r6, #12]
 8018fdc:	b183      	cbz	r3, 8019000 <_Balloc+0x50>
 8018fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018fe0:	68db      	ldr	r3, [r3, #12]
 8018fe2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018fe6:	b9b8      	cbnz	r0, 8019018 <_Balloc+0x68>
 8018fe8:	2101      	movs	r1, #1
 8018fea:	fa01 f605 	lsl.w	r6, r1, r5
 8018fee:	1d72      	adds	r2, r6, #5
 8018ff0:	4620      	mov	r0, r4
 8018ff2:	0092      	lsls	r2, r2, #2
 8018ff4:	f000 fc94 	bl	8019920 <_calloc_r>
 8018ff8:	b160      	cbz	r0, 8019014 <_Balloc+0x64>
 8018ffa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018ffe:	e00e      	b.n	801901e <_Balloc+0x6e>
 8019000:	2221      	movs	r2, #33	; 0x21
 8019002:	2104      	movs	r1, #4
 8019004:	4620      	mov	r0, r4
 8019006:	f000 fc8b 	bl	8019920 <_calloc_r>
 801900a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801900c:	60f0      	str	r0, [r6, #12]
 801900e:	68db      	ldr	r3, [r3, #12]
 8019010:	2b00      	cmp	r3, #0
 8019012:	d1e4      	bne.n	8018fde <_Balloc+0x2e>
 8019014:	2000      	movs	r0, #0
 8019016:	bd70      	pop	{r4, r5, r6, pc}
 8019018:	6802      	ldr	r2, [r0, #0]
 801901a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801901e:	2300      	movs	r3, #0
 8019020:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019024:	e7f7      	b.n	8019016 <_Balloc+0x66>
 8019026:	bf00      	nop
 8019028:	0801a6fe 	.word	0x0801a6fe
 801902c:	0801a804 	.word	0x0801a804

08019030 <_Bfree>:
 8019030:	b570      	push	{r4, r5, r6, lr}
 8019032:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019034:	4605      	mov	r5, r0
 8019036:	460c      	mov	r4, r1
 8019038:	b976      	cbnz	r6, 8019058 <_Bfree+0x28>
 801903a:	2010      	movs	r0, #16
 801903c:	f7fc fdea 	bl	8015c14 <malloc>
 8019040:	4602      	mov	r2, r0
 8019042:	6268      	str	r0, [r5, #36]	; 0x24
 8019044:	b920      	cbnz	r0, 8019050 <_Bfree+0x20>
 8019046:	218a      	movs	r1, #138	; 0x8a
 8019048:	4b08      	ldr	r3, [pc, #32]	; (801906c <_Bfree+0x3c>)
 801904a:	4809      	ldr	r0, [pc, #36]	; (8019070 <_Bfree+0x40>)
 801904c:	f000 fe0a 	bl	8019c64 <__assert_func>
 8019050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019054:	6006      	str	r6, [r0, #0]
 8019056:	60c6      	str	r6, [r0, #12]
 8019058:	b13c      	cbz	r4, 801906a <_Bfree+0x3a>
 801905a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801905c:	6862      	ldr	r2, [r4, #4]
 801905e:	68db      	ldr	r3, [r3, #12]
 8019060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019064:	6021      	str	r1, [r4, #0]
 8019066:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801906a:	bd70      	pop	{r4, r5, r6, pc}
 801906c:	0801a6fe 	.word	0x0801a6fe
 8019070:	0801a804 	.word	0x0801a804

08019074 <__multadd>:
 8019074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019078:	4698      	mov	r8, r3
 801907a:	460c      	mov	r4, r1
 801907c:	2300      	movs	r3, #0
 801907e:	690e      	ldr	r6, [r1, #16]
 8019080:	4607      	mov	r7, r0
 8019082:	f101 0014 	add.w	r0, r1, #20
 8019086:	6805      	ldr	r5, [r0, #0]
 8019088:	3301      	adds	r3, #1
 801908a:	b2a9      	uxth	r1, r5
 801908c:	fb02 8101 	mla	r1, r2, r1, r8
 8019090:	0c2d      	lsrs	r5, r5, #16
 8019092:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8019096:	fb02 c505 	mla	r5, r2, r5, ip
 801909a:	b289      	uxth	r1, r1
 801909c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80190a0:	429e      	cmp	r6, r3
 80190a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80190a6:	f840 1b04 	str.w	r1, [r0], #4
 80190aa:	dcec      	bgt.n	8019086 <__multadd+0x12>
 80190ac:	f1b8 0f00 	cmp.w	r8, #0
 80190b0:	d022      	beq.n	80190f8 <__multadd+0x84>
 80190b2:	68a3      	ldr	r3, [r4, #8]
 80190b4:	42b3      	cmp	r3, r6
 80190b6:	dc19      	bgt.n	80190ec <__multadd+0x78>
 80190b8:	6861      	ldr	r1, [r4, #4]
 80190ba:	4638      	mov	r0, r7
 80190bc:	3101      	adds	r1, #1
 80190be:	f7ff ff77 	bl	8018fb0 <_Balloc>
 80190c2:	4605      	mov	r5, r0
 80190c4:	b928      	cbnz	r0, 80190d2 <__multadd+0x5e>
 80190c6:	4602      	mov	r2, r0
 80190c8:	21b5      	movs	r1, #181	; 0xb5
 80190ca:	4b0d      	ldr	r3, [pc, #52]	; (8019100 <__multadd+0x8c>)
 80190cc:	480d      	ldr	r0, [pc, #52]	; (8019104 <__multadd+0x90>)
 80190ce:	f000 fdc9 	bl	8019c64 <__assert_func>
 80190d2:	6922      	ldr	r2, [r4, #16]
 80190d4:	f104 010c 	add.w	r1, r4, #12
 80190d8:	3202      	adds	r2, #2
 80190da:	0092      	lsls	r2, r2, #2
 80190dc:	300c      	adds	r0, #12
 80190de:	f7fc fda9 	bl	8015c34 <memcpy>
 80190e2:	4621      	mov	r1, r4
 80190e4:	4638      	mov	r0, r7
 80190e6:	f7ff ffa3 	bl	8019030 <_Bfree>
 80190ea:	462c      	mov	r4, r5
 80190ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80190f0:	3601      	adds	r6, #1
 80190f2:	f8c3 8014 	str.w	r8, [r3, #20]
 80190f6:	6126      	str	r6, [r4, #16]
 80190f8:	4620      	mov	r0, r4
 80190fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190fe:	bf00      	nop
 8019100:	0801a774 	.word	0x0801a774
 8019104:	0801a804 	.word	0x0801a804

08019108 <__s2b>:
 8019108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801910c:	4615      	mov	r5, r2
 801910e:	2209      	movs	r2, #9
 8019110:	461f      	mov	r7, r3
 8019112:	3308      	adds	r3, #8
 8019114:	460c      	mov	r4, r1
 8019116:	fb93 f3f2 	sdiv	r3, r3, r2
 801911a:	4606      	mov	r6, r0
 801911c:	2201      	movs	r2, #1
 801911e:	2100      	movs	r1, #0
 8019120:	429a      	cmp	r2, r3
 8019122:	db09      	blt.n	8019138 <__s2b+0x30>
 8019124:	4630      	mov	r0, r6
 8019126:	f7ff ff43 	bl	8018fb0 <_Balloc>
 801912a:	b940      	cbnz	r0, 801913e <__s2b+0x36>
 801912c:	4602      	mov	r2, r0
 801912e:	21ce      	movs	r1, #206	; 0xce
 8019130:	4b18      	ldr	r3, [pc, #96]	; (8019194 <__s2b+0x8c>)
 8019132:	4819      	ldr	r0, [pc, #100]	; (8019198 <__s2b+0x90>)
 8019134:	f000 fd96 	bl	8019c64 <__assert_func>
 8019138:	0052      	lsls	r2, r2, #1
 801913a:	3101      	adds	r1, #1
 801913c:	e7f0      	b.n	8019120 <__s2b+0x18>
 801913e:	9b08      	ldr	r3, [sp, #32]
 8019140:	2d09      	cmp	r5, #9
 8019142:	6143      	str	r3, [r0, #20]
 8019144:	f04f 0301 	mov.w	r3, #1
 8019148:	6103      	str	r3, [r0, #16]
 801914a:	dd16      	ble.n	801917a <__s2b+0x72>
 801914c:	f104 0909 	add.w	r9, r4, #9
 8019150:	46c8      	mov	r8, r9
 8019152:	442c      	add	r4, r5
 8019154:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019158:	4601      	mov	r1, r0
 801915a:	220a      	movs	r2, #10
 801915c:	4630      	mov	r0, r6
 801915e:	3b30      	subs	r3, #48	; 0x30
 8019160:	f7ff ff88 	bl	8019074 <__multadd>
 8019164:	45a0      	cmp	r8, r4
 8019166:	d1f5      	bne.n	8019154 <__s2b+0x4c>
 8019168:	f1a5 0408 	sub.w	r4, r5, #8
 801916c:	444c      	add	r4, r9
 801916e:	1b2d      	subs	r5, r5, r4
 8019170:	1963      	adds	r3, r4, r5
 8019172:	42bb      	cmp	r3, r7
 8019174:	db04      	blt.n	8019180 <__s2b+0x78>
 8019176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801917a:	2509      	movs	r5, #9
 801917c:	340a      	adds	r4, #10
 801917e:	e7f6      	b.n	801916e <__s2b+0x66>
 8019180:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019184:	4601      	mov	r1, r0
 8019186:	220a      	movs	r2, #10
 8019188:	4630      	mov	r0, r6
 801918a:	3b30      	subs	r3, #48	; 0x30
 801918c:	f7ff ff72 	bl	8019074 <__multadd>
 8019190:	e7ee      	b.n	8019170 <__s2b+0x68>
 8019192:	bf00      	nop
 8019194:	0801a774 	.word	0x0801a774
 8019198:	0801a804 	.word	0x0801a804

0801919c <__hi0bits>:
 801919c:	0c02      	lsrs	r2, r0, #16
 801919e:	0412      	lsls	r2, r2, #16
 80191a0:	4603      	mov	r3, r0
 80191a2:	b9ca      	cbnz	r2, 80191d8 <__hi0bits+0x3c>
 80191a4:	0403      	lsls	r3, r0, #16
 80191a6:	2010      	movs	r0, #16
 80191a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80191ac:	bf04      	itt	eq
 80191ae:	021b      	lsleq	r3, r3, #8
 80191b0:	3008      	addeq	r0, #8
 80191b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80191b6:	bf04      	itt	eq
 80191b8:	011b      	lsleq	r3, r3, #4
 80191ba:	3004      	addeq	r0, #4
 80191bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80191c0:	bf04      	itt	eq
 80191c2:	009b      	lsleq	r3, r3, #2
 80191c4:	3002      	addeq	r0, #2
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	db05      	blt.n	80191d6 <__hi0bits+0x3a>
 80191ca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80191ce:	f100 0001 	add.w	r0, r0, #1
 80191d2:	bf08      	it	eq
 80191d4:	2020      	moveq	r0, #32
 80191d6:	4770      	bx	lr
 80191d8:	2000      	movs	r0, #0
 80191da:	e7e5      	b.n	80191a8 <__hi0bits+0xc>

080191dc <__lo0bits>:
 80191dc:	6803      	ldr	r3, [r0, #0]
 80191de:	4602      	mov	r2, r0
 80191e0:	f013 0007 	ands.w	r0, r3, #7
 80191e4:	d00b      	beq.n	80191fe <__lo0bits+0x22>
 80191e6:	07d9      	lsls	r1, r3, #31
 80191e8:	d422      	bmi.n	8019230 <__lo0bits+0x54>
 80191ea:	0798      	lsls	r0, r3, #30
 80191ec:	bf49      	itett	mi
 80191ee:	085b      	lsrmi	r3, r3, #1
 80191f0:	089b      	lsrpl	r3, r3, #2
 80191f2:	2001      	movmi	r0, #1
 80191f4:	6013      	strmi	r3, [r2, #0]
 80191f6:	bf5c      	itt	pl
 80191f8:	2002      	movpl	r0, #2
 80191fa:	6013      	strpl	r3, [r2, #0]
 80191fc:	4770      	bx	lr
 80191fe:	b299      	uxth	r1, r3
 8019200:	b909      	cbnz	r1, 8019206 <__lo0bits+0x2a>
 8019202:	2010      	movs	r0, #16
 8019204:	0c1b      	lsrs	r3, r3, #16
 8019206:	f013 0fff 	tst.w	r3, #255	; 0xff
 801920a:	bf04      	itt	eq
 801920c:	0a1b      	lsreq	r3, r3, #8
 801920e:	3008      	addeq	r0, #8
 8019210:	0719      	lsls	r1, r3, #28
 8019212:	bf04      	itt	eq
 8019214:	091b      	lsreq	r3, r3, #4
 8019216:	3004      	addeq	r0, #4
 8019218:	0799      	lsls	r1, r3, #30
 801921a:	bf04      	itt	eq
 801921c:	089b      	lsreq	r3, r3, #2
 801921e:	3002      	addeq	r0, #2
 8019220:	07d9      	lsls	r1, r3, #31
 8019222:	d403      	bmi.n	801922c <__lo0bits+0x50>
 8019224:	085b      	lsrs	r3, r3, #1
 8019226:	f100 0001 	add.w	r0, r0, #1
 801922a:	d003      	beq.n	8019234 <__lo0bits+0x58>
 801922c:	6013      	str	r3, [r2, #0]
 801922e:	4770      	bx	lr
 8019230:	2000      	movs	r0, #0
 8019232:	4770      	bx	lr
 8019234:	2020      	movs	r0, #32
 8019236:	4770      	bx	lr

08019238 <__i2b>:
 8019238:	b510      	push	{r4, lr}
 801923a:	460c      	mov	r4, r1
 801923c:	2101      	movs	r1, #1
 801923e:	f7ff feb7 	bl	8018fb0 <_Balloc>
 8019242:	4602      	mov	r2, r0
 8019244:	b928      	cbnz	r0, 8019252 <__i2b+0x1a>
 8019246:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801924a:	4b04      	ldr	r3, [pc, #16]	; (801925c <__i2b+0x24>)
 801924c:	4804      	ldr	r0, [pc, #16]	; (8019260 <__i2b+0x28>)
 801924e:	f000 fd09 	bl	8019c64 <__assert_func>
 8019252:	2301      	movs	r3, #1
 8019254:	6144      	str	r4, [r0, #20]
 8019256:	6103      	str	r3, [r0, #16]
 8019258:	bd10      	pop	{r4, pc}
 801925a:	bf00      	nop
 801925c:	0801a774 	.word	0x0801a774
 8019260:	0801a804 	.word	0x0801a804

08019264 <__multiply>:
 8019264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019268:	4614      	mov	r4, r2
 801926a:	690a      	ldr	r2, [r1, #16]
 801926c:	6923      	ldr	r3, [r4, #16]
 801926e:	460d      	mov	r5, r1
 8019270:	429a      	cmp	r2, r3
 8019272:	bfbe      	ittt	lt
 8019274:	460b      	movlt	r3, r1
 8019276:	4625      	movlt	r5, r4
 8019278:	461c      	movlt	r4, r3
 801927a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801927e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019282:	68ab      	ldr	r3, [r5, #8]
 8019284:	6869      	ldr	r1, [r5, #4]
 8019286:	eb0a 0709 	add.w	r7, sl, r9
 801928a:	42bb      	cmp	r3, r7
 801928c:	b085      	sub	sp, #20
 801928e:	bfb8      	it	lt
 8019290:	3101      	addlt	r1, #1
 8019292:	f7ff fe8d 	bl	8018fb0 <_Balloc>
 8019296:	b930      	cbnz	r0, 80192a6 <__multiply+0x42>
 8019298:	4602      	mov	r2, r0
 801929a:	f240 115d 	movw	r1, #349	; 0x15d
 801929e:	4b41      	ldr	r3, [pc, #260]	; (80193a4 <__multiply+0x140>)
 80192a0:	4841      	ldr	r0, [pc, #260]	; (80193a8 <__multiply+0x144>)
 80192a2:	f000 fcdf 	bl	8019c64 <__assert_func>
 80192a6:	f100 0614 	add.w	r6, r0, #20
 80192aa:	4633      	mov	r3, r6
 80192ac:	2200      	movs	r2, #0
 80192ae:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80192b2:	4543      	cmp	r3, r8
 80192b4:	d31e      	bcc.n	80192f4 <__multiply+0x90>
 80192b6:	f105 0c14 	add.w	ip, r5, #20
 80192ba:	f104 0314 	add.w	r3, r4, #20
 80192be:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80192c2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80192c6:	9202      	str	r2, [sp, #8]
 80192c8:	ebac 0205 	sub.w	r2, ip, r5
 80192cc:	3a15      	subs	r2, #21
 80192ce:	f022 0203 	bic.w	r2, r2, #3
 80192d2:	3204      	adds	r2, #4
 80192d4:	f105 0115 	add.w	r1, r5, #21
 80192d8:	458c      	cmp	ip, r1
 80192da:	bf38      	it	cc
 80192dc:	2204      	movcc	r2, #4
 80192de:	9201      	str	r2, [sp, #4]
 80192e0:	9a02      	ldr	r2, [sp, #8]
 80192e2:	9303      	str	r3, [sp, #12]
 80192e4:	429a      	cmp	r2, r3
 80192e6:	d808      	bhi.n	80192fa <__multiply+0x96>
 80192e8:	2f00      	cmp	r7, #0
 80192ea:	dc55      	bgt.n	8019398 <__multiply+0x134>
 80192ec:	6107      	str	r7, [r0, #16]
 80192ee:	b005      	add	sp, #20
 80192f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192f4:	f843 2b04 	str.w	r2, [r3], #4
 80192f8:	e7db      	b.n	80192b2 <__multiply+0x4e>
 80192fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80192fe:	f1ba 0f00 	cmp.w	sl, #0
 8019302:	d020      	beq.n	8019346 <__multiply+0xe2>
 8019304:	46b1      	mov	r9, r6
 8019306:	2200      	movs	r2, #0
 8019308:	f105 0e14 	add.w	lr, r5, #20
 801930c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8019310:	f8d9 b000 	ldr.w	fp, [r9]
 8019314:	b2a1      	uxth	r1, r4
 8019316:	fa1f fb8b 	uxth.w	fp, fp
 801931a:	fb0a b101 	mla	r1, sl, r1, fp
 801931e:	4411      	add	r1, r2
 8019320:	f8d9 2000 	ldr.w	r2, [r9]
 8019324:	0c24      	lsrs	r4, r4, #16
 8019326:	0c12      	lsrs	r2, r2, #16
 8019328:	fb0a 2404 	mla	r4, sl, r4, r2
 801932c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8019330:	b289      	uxth	r1, r1
 8019332:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019336:	45f4      	cmp	ip, lr
 8019338:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801933c:	f849 1b04 	str.w	r1, [r9], #4
 8019340:	d8e4      	bhi.n	801930c <__multiply+0xa8>
 8019342:	9901      	ldr	r1, [sp, #4]
 8019344:	5072      	str	r2, [r6, r1]
 8019346:	9a03      	ldr	r2, [sp, #12]
 8019348:	3304      	adds	r3, #4
 801934a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801934e:	f1b9 0f00 	cmp.w	r9, #0
 8019352:	d01f      	beq.n	8019394 <__multiply+0x130>
 8019354:	46b6      	mov	lr, r6
 8019356:	f04f 0a00 	mov.w	sl, #0
 801935a:	6834      	ldr	r4, [r6, #0]
 801935c:	f105 0114 	add.w	r1, r5, #20
 8019360:	880a      	ldrh	r2, [r1, #0]
 8019362:	f8be b002 	ldrh.w	fp, [lr, #2]
 8019366:	b2a4      	uxth	r4, r4
 8019368:	fb09 b202 	mla	r2, r9, r2, fp
 801936c:	4492      	add	sl, r2
 801936e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019372:	f84e 4b04 	str.w	r4, [lr], #4
 8019376:	f851 4b04 	ldr.w	r4, [r1], #4
 801937a:	f8be 2000 	ldrh.w	r2, [lr]
 801937e:	0c24      	lsrs	r4, r4, #16
 8019380:	fb09 2404 	mla	r4, r9, r4, r2
 8019384:	458c      	cmp	ip, r1
 8019386:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801938a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801938e:	d8e7      	bhi.n	8019360 <__multiply+0xfc>
 8019390:	9a01      	ldr	r2, [sp, #4]
 8019392:	50b4      	str	r4, [r6, r2]
 8019394:	3604      	adds	r6, #4
 8019396:	e7a3      	b.n	80192e0 <__multiply+0x7c>
 8019398:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801939c:	2b00      	cmp	r3, #0
 801939e:	d1a5      	bne.n	80192ec <__multiply+0x88>
 80193a0:	3f01      	subs	r7, #1
 80193a2:	e7a1      	b.n	80192e8 <__multiply+0x84>
 80193a4:	0801a774 	.word	0x0801a774
 80193a8:	0801a804 	.word	0x0801a804

080193ac <__pow5mult>:
 80193ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80193b0:	4615      	mov	r5, r2
 80193b2:	f012 0203 	ands.w	r2, r2, #3
 80193b6:	4606      	mov	r6, r0
 80193b8:	460f      	mov	r7, r1
 80193ba:	d007      	beq.n	80193cc <__pow5mult+0x20>
 80193bc:	4c25      	ldr	r4, [pc, #148]	; (8019454 <__pow5mult+0xa8>)
 80193be:	3a01      	subs	r2, #1
 80193c0:	2300      	movs	r3, #0
 80193c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80193c6:	f7ff fe55 	bl	8019074 <__multadd>
 80193ca:	4607      	mov	r7, r0
 80193cc:	10ad      	asrs	r5, r5, #2
 80193ce:	d03d      	beq.n	801944c <__pow5mult+0xa0>
 80193d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80193d2:	b97c      	cbnz	r4, 80193f4 <__pow5mult+0x48>
 80193d4:	2010      	movs	r0, #16
 80193d6:	f7fc fc1d 	bl	8015c14 <malloc>
 80193da:	4602      	mov	r2, r0
 80193dc:	6270      	str	r0, [r6, #36]	; 0x24
 80193de:	b928      	cbnz	r0, 80193ec <__pow5mult+0x40>
 80193e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80193e4:	4b1c      	ldr	r3, [pc, #112]	; (8019458 <__pow5mult+0xac>)
 80193e6:	481d      	ldr	r0, [pc, #116]	; (801945c <__pow5mult+0xb0>)
 80193e8:	f000 fc3c 	bl	8019c64 <__assert_func>
 80193ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80193f0:	6004      	str	r4, [r0, #0]
 80193f2:	60c4      	str	r4, [r0, #12]
 80193f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80193f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80193fc:	b94c      	cbnz	r4, 8019412 <__pow5mult+0x66>
 80193fe:	f240 2171 	movw	r1, #625	; 0x271
 8019402:	4630      	mov	r0, r6
 8019404:	f7ff ff18 	bl	8019238 <__i2b>
 8019408:	2300      	movs	r3, #0
 801940a:	4604      	mov	r4, r0
 801940c:	f8c8 0008 	str.w	r0, [r8, #8]
 8019410:	6003      	str	r3, [r0, #0]
 8019412:	f04f 0900 	mov.w	r9, #0
 8019416:	07eb      	lsls	r3, r5, #31
 8019418:	d50a      	bpl.n	8019430 <__pow5mult+0x84>
 801941a:	4639      	mov	r1, r7
 801941c:	4622      	mov	r2, r4
 801941e:	4630      	mov	r0, r6
 8019420:	f7ff ff20 	bl	8019264 <__multiply>
 8019424:	4680      	mov	r8, r0
 8019426:	4639      	mov	r1, r7
 8019428:	4630      	mov	r0, r6
 801942a:	f7ff fe01 	bl	8019030 <_Bfree>
 801942e:	4647      	mov	r7, r8
 8019430:	106d      	asrs	r5, r5, #1
 8019432:	d00b      	beq.n	801944c <__pow5mult+0xa0>
 8019434:	6820      	ldr	r0, [r4, #0]
 8019436:	b938      	cbnz	r0, 8019448 <__pow5mult+0x9c>
 8019438:	4622      	mov	r2, r4
 801943a:	4621      	mov	r1, r4
 801943c:	4630      	mov	r0, r6
 801943e:	f7ff ff11 	bl	8019264 <__multiply>
 8019442:	6020      	str	r0, [r4, #0]
 8019444:	f8c0 9000 	str.w	r9, [r0]
 8019448:	4604      	mov	r4, r0
 801944a:	e7e4      	b.n	8019416 <__pow5mult+0x6a>
 801944c:	4638      	mov	r0, r7
 801944e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019452:	bf00      	nop
 8019454:	0801a958 	.word	0x0801a958
 8019458:	0801a6fe 	.word	0x0801a6fe
 801945c:	0801a804 	.word	0x0801a804

08019460 <__lshift>:
 8019460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019464:	460c      	mov	r4, r1
 8019466:	4607      	mov	r7, r0
 8019468:	4691      	mov	r9, r2
 801946a:	6923      	ldr	r3, [r4, #16]
 801946c:	6849      	ldr	r1, [r1, #4]
 801946e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019472:	68a3      	ldr	r3, [r4, #8]
 8019474:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019478:	f108 0601 	add.w	r6, r8, #1
 801947c:	42b3      	cmp	r3, r6
 801947e:	db0b      	blt.n	8019498 <__lshift+0x38>
 8019480:	4638      	mov	r0, r7
 8019482:	f7ff fd95 	bl	8018fb0 <_Balloc>
 8019486:	4605      	mov	r5, r0
 8019488:	b948      	cbnz	r0, 801949e <__lshift+0x3e>
 801948a:	4602      	mov	r2, r0
 801948c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019490:	4b27      	ldr	r3, [pc, #156]	; (8019530 <__lshift+0xd0>)
 8019492:	4828      	ldr	r0, [pc, #160]	; (8019534 <__lshift+0xd4>)
 8019494:	f000 fbe6 	bl	8019c64 <__assert_func>
 8019498:	3101      	adds	r1, #1
 801949a:	005b      	lsls	r3, r3, #1
 801949c:	e7ee      	b.n	801947c <__lshift+0x1c>
 801949e:	2300      	movs	r3, #0
 80194a0:	f100 0114 	add.w	r1, r0, #20
 80194a4:	f100 0210 	add.w	r2, r0, #16
 80194a8:	4618      	mov	r0, r3
 80194aa:	4553      	cmp	r3, sl
 80194ac:	db33      	blt.n	8019516 <__lshift+0xb6>
 80194ae:	6920      	ldr	r0, [r4, #16]
 80194b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80194b4:	f104 0314 	add.w	r3, r4, #20
 80194b8:	f019 091f 	ands.w	r9, r9, #31
 80194bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80194c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80194c4:	d02b      	beq.n	801951e <__lshift+0xbe>
 80194c6:	468a      	mov	sl, r1
 80194c8:	2200      	movs	r2, #0
 80194ca:	f1c9 0e20 	rsb	lr, r9, #32
 80194ce:	6818      	ldr	r0, [r3, #0]
 80194d0:	fa00 f009 	lsl.w	r0, r0, r9
 80194d4:	4302      	orrs	r2, r0
 80194d6:	f84a 2b04 	str.w	r2, [sl], #4
 80194da:	f853 2b04 	ldr.w	r2, [r3], #4
 80194de:	459c      	cmp	ip, r3
 80194e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80194e4:	d8f3      	bhi.n	80194ce <__lshift+0x6e>
 80194e6:	ebac 0304 	sub.w	r3, ip, r4
 80194ea:	3b15      	subs	r3, #21
 80194ec:	f023 0303 	bic.w	r3, r3, #3
 80194f0:	3304      	adds	r3, #4
 80194f2:	f104 0015 	add.w	r0, r4, #21
 80194f6:	4584      	cmp	ip, r0
 80194f8:	bf38      	it	cc
 80194fa:	2304      	movcc	r3, #4
 80194fc:	50ca      	str	r2, [r1, r3]
 80194fe:	b10a      	cbz	r2, 8019504 <__lshift+0xa4>
 8019500:	f108 0602 	add.w	r6, r8, #2
 8019504:	3e01      	subs	r6, #1
 8019506:	4638      	mov	r0, r7
 8019508:	4621      	mov	r1, r4
 801950a:	612e      	str	r6, [r5, #16]
 801950c:	f7ff fd90 	bl	8019030 <_Bfree>
 8019510:	4628      	mov	r0, r5
 8019512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019516:	f842 0f04 	str.w	r0, [r2, #4]!
 801951a:	3301      	adds	r3, #1
 801951c:	e7c5      	b.n	80194aa <__lshift+0x4a>
 801951e:	3904      	subs	r1, #4
 8019520:	f853 2b04 	ldr.w	r2, [r3], #4
 8019524:	459c      	cmp	ip, r3
 8019526:	f841 2f04 	str.w	r2, [r1, #4]!
 801952a:	d8f9      	bhi.n	8019520 <__lshift+0xc0>
 801952c:	e7ea      	b.n	8019504 <__lshift+0xa4>
 801952e:	bf00      	nop
 8019530:	0801a774 	.word	0x0801a774
 8019534:	0801a804 	.word	0x0801a804

08019538 <__mcmp>:
 8019538:	4603      	mov	r3, r0
 801953a:	690a      	ldr	r2, [r1, #16]
 801953c:	6900      	ldr	r0, [r0, #16]
 801953e:	b530      	push	{r4, r5, lr}
 8019540:	1a80      	subs	r0, r0, r2
 8019542:	d10d      	bne.n	8019560 <__mcmp+0x28>
 8019544:	3314      	adds	r3, #20
 8019546:	3114      	adds	r1, #20
 8019548:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801954c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8019550:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8019554:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019558:	4295      	cmp	r5, r2
 801955a:	d002      	beq.n	8019562 <__mcmp+0x2a>
 801955c:	d304      	bcc.n	8019568 <__mcmp+0x30>
 801955e:	2001      	movs	r0, #1
 8019560:	bd30      	pop	{r4, r5, pc}
 8019562:	42a3      	cmp	r3, r4
 8019564:	d3f4      	bcc.n	8019550 <__mcmp+0x18>
 8019566:	e7fb      	b.n	8019560 <__mcmp+0x28>
 8019568:	f04f 30ff 	mov.w	r0, #4294967295
 801956c:	e7f8      	b.n	8019560 <__mcmp+0x28>
	...

08019570 <__mdiff>:
 8019570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019574:	460c      	mov	r4, r1
 8019576:	4606      	mov	r6, r0
 8019578:	4611      	mov	r1, r2
 801957a:	4620      	mov	r0, r4
 801957c:	4692      	mov	sl, r2
 801957e:	f7ff ffdb 	bl	8019538 <__mcmp>
 8019582:	1e05      	subs	r5, r0, #0
 8019584:	d111      	bne.n	80195aa <__mdiff+0x3a>
 8019586:	4629      	mov	r1, r5
 8019588:	4630      	mov	r0, r6
 801958a:	f7ff fd11 	bl	8018fb0 <_Balloc>
 801958e:	4602      	mov	r2, r0
 8019590:	b928      	cbnz	r0, 801959e <__mdiff+0x2e>
 8019592:	f240 2132 	movw	r1, #562	; 0x232
 8019596:	4b3c      	ldr	r3, [pc, #240]	; (8019688 <__mdiff+0x118>)
 8019598:	483c      	ldr	r0, [pc, #240]	; (801968c <__mdiff+0x11c>)
 801959a:	f000 fb63 	bl	8019c64 <__assert_func>
 801959e:	2301      	movs	r3, #1
 80195a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80195a4:	4610      	mov	r0, r2
 80195a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195aa:	bfa4      	itt	ge
 80195ac:	4653      	movge	r3, sl
 80195ae:	46a2      	movge	sl, r4
 80195b0:	4630      	mov	r0, r6
 80195b2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80195b6:	bfa6      	itte	ge
 80195b8:	461c      	movge	r4, r3
 80195ba:	2500      	movge	r5, #0
 80195bc:	2501      	movlt	r5, #1
 80195be:	f7ff fcf7 	bl	8018fb0 <_Balloc>
 80195c2:	4602      	mov	r2, r0
 80195c4:	b918      	cbnz	r0, 80195ce <__mdiff+0x5e>
 80195c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80195ca:	4b2f      	ldr	r3, [pc, #188]	; (8019688 <__mdiff+0x118>)
 80195cc:	e7e4      	b.n	8019598 <__mdiff+0x28>
 80195ce:	f100 0814 	add.w	r8, r0, #20
 80195d2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80195d6:	60c5      	str	r5, [r0, #12]
 80195d8:	f04f 0c00 	mov.w	ip, #0
 80195dc:	f10a 0514 	add.w	r5, sl, #20
 80195e0:	f10a 0010 	add.w	r0, sl, #16
 80195e4:	46c2      	mov	sl, r8
 80195e6:	6926      	ldr	r6, [r4, #16]
 80195e8:	f104 0914 	add.w	r9, r4, #20
 80195ec:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80195f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80195f4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80195f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80195fc:	fa1f f18b 	uxth.w	r1, fp
 8019600:	4461      	add	r1, ip
 8019602:	fa1f fc83 	uxth.w	ip, r3
 8019606:	0c1b      	lsrs	r3, r3, #16
 8019608:	eba1 010c 	sub.w	r1, r1, ip
 801960c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019610:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8019614:	b289      	uxth	r1, r1
 8019616:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801961a:	454e      	cmp	r6, r9
 801961c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8019620:	f84a 3b04 	str.w	r3, [sl], #4
 8019624:	d8e6      	bhi.n	80195f4 <__mdiff+0x84>
 8019626:	1b33      	subs	r3, r6, r4
 8019628:	3b15      	subs	r3, #21
 801962a:	f023 0303 	bic.w	r3, r3, #3
 801962e:	3415      	adds	r4, #21
 8019630:	3304      	adds	r3, #4
 8019632:	42a6      	cmp	r6, r4
 8019634:	bf38      	it	cc
 8019636:	2304      	movcc	r3, #4
 8019638:	441d      	add	r5, r3
 801963a:	4443      	add	r3, r8
 801963c:	461e      	mov	r6, r3
 801963e:	462c      	mov	r4, r5
 8019640:	4574      	cmp	r4, lr
 8019642:	d30e      	bcc.n	8019662 <__mdiff+0xf2>
 8019644:	f10e 0103 	add.w	r1, lr, #3
 8019648:	1b49      	subs	r1, r1, r5
 801964a:	f021 0103 	bic.w	r1, r1, #3
 801964e:	3d03      	subs	r5, #3
 8019650:	45ae      	cmp	lr, r5
 8019652:	bf38      	it	cc
 8019654:	2100      	movcc	r1, #0
 8019656:	4419      	add	r1, r3
 8019658:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 801965c:	b18b      	cbz	r3, 8019682 <__mdiff+0x112>
 801965e:	6117      	str	r7, [r2, #16]
 8019660:	e7a0      	b.n	80195a4 <__mdiff+0x34>
 8019662:	f854 8b04 	ldr.w	r8, [r4], #4
 8019666:	fa1f f188 	uxth.w	r1, r8
 801966a:	4461      	add	r1, ip
 801966c:	1408      	asrs	r0, r1, #16
 801966e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8019672:	b289      	uxth	r1, r1
 8019674:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8019678:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801967c:	f846 1b04 	str.w	r1, [r6], #4
 8019680:	e7de      	b.n	8019640 <__mdiff+0xd0>
 8019682:	3f01      	subs	r7, #1
 8019684:	e7e8      	b.n	8019658 <__mdiff+0xe8>
 8019686:	bf00      	nop
 8019688:	0801a774 	.word	0x0801a774
 801968c:	0801a804 	.word	0x0801a804

08019690 <__ulp>:
 8019690:	4b11      	ldr	r3, [pc, #68]	; (80196d8 <__ulp+0x48>)
 8019692:	400b      	ands	r3, r1
 8019694:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8019698:	2b00      	cmp	r3, #0
 801969a:	dd02      	ble.n	80196a2 <__ulp+0x12>
 801969c:	2000      	movs	r0, #0
 801969e:	4619      	mov	r1, r3
 80196a0:	4770      	bx	lr
 80196a2:	425b      	negs	r3, r3
 80196a4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80196a8:	f04f 0000 	mov.w	r0, #0
 80196ac:	f04f 0100 	mov.w	r1, #0
 80196b0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80196b4:	da04      	bge.n	80196c0 <__ulp+0x30>
 80196b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80196ba:	fa43 f102 	asr.w	r1, r3, r2
 80196be:	4770      	bx	lr
 80196c0:	f1a2 0314 	sub.w	r3, r2, #20
 80196c4:	2b1e      	cmp	r3, #30
 80196c6:	bfd6      	itet	le
 80196c8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80196cc:	2301      	movgt	r3, #1
 80196ce:	fa22 f303 	lsrle.w	r3, r2, r3
 80196d2:	4618      	mov	r0, r3
 80196d4:	4770      	bx	lr
 80196d6:	bf00      	nop
 80196d8:	7ff00000 	.word	0x7ff00000

080196dc <__b2d>:
 80196dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80196e0:	6907      	ldr	r7, [r0, #16]
 80196e2:	f100 0914 	add.w	r9, r0, #20
 80196e6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80196ea:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80196ee:	f1a7 0804 	sub.w	r8, r7, #4
 80196f2:	4630      	mov	r0, r6
 80196f4:	f7ff fd52 	bl	801919c <__hi0bits>
 80196f8:	f1c0 0320 	rsb	r3, r0, #32
 80196fc:	280a      	cmp	r0, #10
 80196fe:	600b      	str	r3, [r1, #0]
 8019700:	491f      	ldr	r1, [pc, #124]	; (8019780 <__b2d+0xa4>)
 8019702:	dc17      	bgt.n	8019734 <__b2d+0x58>
 8019704:	45c1      	cmp	r9, r8
 8019706:	bf28      	it	cs
 8019708:	2200      	movcs	r2, #0
 801970a:	f1c0 0c0b 	rsb	ip, r0, #11
 801970e:	fa26 f30c 	lsr.w	r3, r6, ip
 8019712:	bf38      	it	cc
 8019714:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8019718:	ea43 0501 	orr.w	r5, r3, r1
 801971c:	f100 0315 	add.w	r3, r0, #21
 8019720:	fa06 f303 	lsl.w	r3, r6, r3
 8019724:	fa22 f20c 	lsr.w	r2, r2, ip
 8019728:	ea43 0402 	orr.w	r4, r3, r2
 801972c:	4620      	mov	r0, r4
 801972e:	4629      	mov	r1, r5
 8019730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019734:	45c1      	cmp	r9, r8
 8019736:	bf2e      	itee	cs
 8019738:	2200      	movcs	r2, #0
 801973a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801973e:	f1a7 0808 	subcc.w	r8, r7, #8
 8019742:	f1b0 030b 	subs.w	r3, r0, #11
 8019746:	d016      	beq.n	8019776 <__b2d+0x9a>
 8019748:	f1c3 0720 	rsb	r7, r3, #32
 801974c:	fa22 f107 	lsr.w	r1, r2, r7
 8019750:	45c8      	cmp	r8, r9
 8019752:	fa06 f603 	lsl.w	r6, r6, r3
 8019756:	ea46 0601 	orr.w	r6, r6, r1
 801975a:	bf94      	ite	ls
 801975c:	2100      	movls	r1, #0
 801975e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8019762:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8019766:	fa02 f003 	lsl.w	r0, r2, r3
 801976a:	40f9      	lsrs	r1, r7
 801976c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019770:	ea40 0401 	orr.w	r4, r0, r1
 8019774:	e7da      	b.n	801972c <__b2d+0x50>
 8019776:	4614      	mov	r4, r2
 8019778:	ea46 0501 	orr.w	r5, r6, r1
 801977c:	e7d6      	b.n	801972c <__b2d+0x50>
 801977e:	bf00      	nop
 8019780:	3ff00000 	.word	0x3ff00000

08019784 <__d2b>:
 8019784:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019788:	2101      	movs	r1, #1
 801978a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801978e:	4690      	mov	r8, r2
 8019790:	461d      	mov	r5, r3
 8019792:	f7ff fc0d 	bl	8018fb0 <_Balloc>
 8019796:	4604      	mov	r4, r0
 8019798:	b930      	cbnz	r0, 80197a8 <__d2b+0x24>
 801979a:	4602      	mov	r2, r0
 801979c:	f240 310a 	movw	r1, #778	; 0x30a
 80197a0:	4b24      	ldr	r3, [pc, #144]	; (8019834 <__d2b+0xb0>)
 80197a2:	4825      	ldr	r0, [pc, #148]	; (8019838 <__d2b+0xb4>)
 80197a4:	f000 fa5e 	bl	8019c64 <__assert_func>
 80197a8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80197ac:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80197b0:	bb2d      	cbnz	r5, 80197fe <__d2b+0x7a>
 80197b2:	9301      	str	r3, [sp, #4]
 80197b4:	f1b8 0300 	subs.w	r3, r8, #0
 80197b8:	d026      	beq.n	8019808 <__d2b+0x84>
 80197ba:	4668      	mov	r0, sp
 80197bc:	9300      	str	r3, [sp, #0]
 80197be:	f7ff fd0d 	bl	80191dc <__lo0bits>
 80197c2:	9900      	ldr	r1, [sp, #0]
 80197c4:	b1f0      	cbz	r0, 8019804 <__d2b+0x80>
 80197c6:	9a01      	ldr	r2, [sp, #4]
 80197c8:	f1c0 0320 	rsb	r3, r0, #32
 80197cc:	fa02 f303 	lsl.w	r3, r2, r3
 80197d0:	430b      	orrs	r3, r1
 80197d2:	40c2      	lsrs	r2, r0
 80197d4:	6163      	str	r3, [r4, #20]
 80197d6:	9201      	str	r2, [sp, #4]
 80197d8:	9b01      	ldr	r3, [sp, #4]
 80197da:	2b00      	cmp	r3, #0
 80197dc:	bf14      	ite	ne
 80197de:	2102      	movne	r1, #2
 80197e0:	2101      	moveq	r1, #1
 80197e2:	61a3      	str	r3, [r4, #24]
 80197e4:	6121      	str	r1, [r4, #16]
 80197e6:	b1c5      	cbz	r5, 801981a <__d2b+0x96>
 80197e8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80197ec:	4405      	add	r5, r0
 80197ee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80197f2:	603d      	str	r5, [r7, #0]
 80197f4:	6030      	str	r0, [r6, #0]
 80197f6:	4620      	mov	r0, r4
 80197f8:	b002      	add	sp, #8
 80197fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019802:	e7d6      	b.n	80197b2 <__d2b+0x2e>
 8019804:	6161      	str	r1, [r4, #20]
 8019806:	e7e7      	b.n	80197d8 <__d2b+0x54>
 8019808:	a801      	add	r0, sp, #4
 801980a:	f7ff fce7 	bl	80191dc <__lo0bits>
 801980e:	2101      	movs	r1, #1
 8019810:	9b01      	ldr	r3, [sp, #4]
 8019812:	6121      	str	r1, [r4, #16]
 8019814:	6163      	str	r3, [r4, #20]
 8019816:	3020      	adds	r0, #32
 8019818:	e7e5      	b.n	80197e6 <__d2b+0x62>
 801981a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801981e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019822:	6038      	str	r0, [r7, #0]
 8019824:	6918      	ldr	r0, [r3, #16]
 8019826:	f7ff fcb9 	bl	801919c <__hi0bits>
 801982a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 801982e:	6031      	str	r1, [r6, #0]
 8019830:	e7e1      	b.n	80197f6 <__d2b+0x72>
 8019832:	bf00      	nop
 8019834:	0801a774 	.word	0x0801a774
 8019838:	0801a804 	.word	0x0801a804

0801983c <__ratio>:
 801983c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019840:	4688      	mov	r8, r1
 8019842:	4669      	mov	r1, sp
 8019844:	4681      	mov	r9, r0
 8019846:	f7ff ff49 	bl	80196dc <__b2d>
 801984a:	460f      	mov	r7, r1
 801984c:	4604      	mov	r4, r0
 801984e:	460d      	mov	r5, r1
 8019850:	4640      	mov	r0, r8
 8019852:	a901      	add	r1, sp, #4
 8019854:	f7ff ff42 	bl	80196dc <__b2d>
 8019858:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801985c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019860:	468b      	mov	fp, r1
 8019862:	eba3 0c02 	sub.w	ip, r3, r2
 8019866:	e9dd 3200 	ldrd	r3, r2, [sp]
 801986a:	1a9b      	subs	r3, r3, r2
 801986c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019870:	2b00      	cmp	r3, #0
 8019872:	bfd5      	itete	le
 8019874:	460a      	movle	r2, r1
 8019876:	462a      	movgt	r2, r5
 8019878:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801987c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019880:	bfd8      	it	le
 8019882:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019886:	465b      	mov	r3, fp
 8019888:	4602      	mov	r2, r0
 801988a:	4639      	mov	r1, r7
 801988c:	4620      	mov	r0, r4
 801988e:	f7e6 ff97 	bl	80007c0 <__aeabi_ddiv>
 8019892:	b003      	add	sp, #12
 8019894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019898 <__copybits>:
 8019898:	3901      	subs	r1, #1
 801989a:	b570      	push	{r4, r5, r6, lr}
 801989c:	1149      	asrs	r1, r1, #5
 801989e:	6914      	ldr	r4, [r2, #16]
 80198a0:	3101      	adds	r1, #1
 80198a2:	f102 0314 	add.w	r3, r2, #20
 80198a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80198aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80198ae:	1f05      	subs	r5, r0, #4
 80198b0:	42a3      	cmp	r3, r4
 80198b2:	d30c      	bcc.n	80198ce <__copybits+0x36>
 80198b4:	1aa3      	subs	r3, r4, r2
 80198b6:	3b11      	subs	r3, #17
 80198b8:	f023 0303 	bic.w	r3, r3, #3
 80198bc:	3211      	adds	r2, #17
 80198be:	42a2      	cmp	r2, r4
 80198c0:	bf88      	it	hi
 80198c2:	2300      	movhi	r3, #0
 80198c4:	4418      	add	r0, r3
 80198c6:	2300      	movs	r3, #0
 80198c8:	4288      	cmp	r0, r1
 80198ca:	d305      	bcc.n	80198d8 <__copybits+0x40>
 80198cc:	bd70      	pop	{r4, r5, r6, pc}
 80198ce:	f853 6b04 	ldr.w	r6, [r3], #4
 80198d2:	f845 6f04 	str.w	r6, [r5, #4]!
 80198d6:	e7eb      	b.n	80198b0 <__copybits+0x18>
 80198d8:	f840 3b04 	str.w	r3, [r0], #4
 80198dc:	e7f4      	b.n	80198c8 <__copybits+0x30>

080198de <__any_on>:
 80198de:	f100 0214 	add.w	r2, r0, #20
 80198e2:	6900      	ldr	r0, [r0, #16]
 80198e4:	114b      	asrs	r3, r1, #5
 80198e6:	4298      	cmp	r0, r3
 80198e8:	b510      	push	{r4, lr}
 80198ea:	db11      	blt.n	8019910 <__any_on+0x32>
 80198ec:	dd0a      	ble.n	8019904 <__any_on+0x26>
 80198ee:	f011 011f 	ands.w	r1, r1, #31
 80198f2:	d007      	beq.n	8019904 <__any_on+0x26>
 80198f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80198f8:	fa24 f001 	lsr.w	r0, r4, r1
 80198fc:	fa00 f101 	lsl.w	r1, r0, r1
 8019900:	428c      	cmp	r4, r1
 8019902:	d10b      	bne.n	801991c <__any_on+0x3e>
 8019904:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019908:	4293      	cmp	r3, r2
 801990a:	d803      	bhi.n	8019914 <__any_on+0x36>
 801990c:	2000      	movs	r0, #0
 801990e:	bd10      	pop	{r4, pc}
 8019910:	4603      	mov	r3, r0
 8019912:	e7f7      	b.n	8019904 <__any_on+0x26>
 8019914:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019918:	2900      	cmp	r1, #0
 801991a:	d0f5      	beq.n	8019908 <__any_on+0x2a>
 801991c:	2001      	movs	r0, #1
 801991e:	e7f6      	b.n	801990e <__any_on+0x30>

08019920 <_calloc_r>:
 8019920:	b538      	push	{r3, r4, r5, lr}
 8019922:	fb02 f501 	mul.w	r5, r2, r1
 8019926:	4629      	mov	r1, r5
 8019928:	f7fc f9e6 	bl	8015cf8 <_malloc_r>
 801992c:	4604      	mov	r4, r0
 801992e:	b118      	cbz	r0, 8019938 <_calloc_r+0x18>
 8019930:	462a      	mov	r2, r5
 8019932:	2100      	movs	r1, #0
 8019934:	f7fc f98c 	bl	8015c50 <memset>
 8019938:	4620      	mov	r0, r4
 801993a:	bd38      	pop	{r3, r4, r5, pc}

0801993c <__ssputs_r>:
 801993c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019940:	688e      	ldr	r6, [r1, #8]
 8019942:	4682      	mov	sl, r0
 8019944:	429e      	cmp	r6, r3
 8019946:	460c      	mov	r4, r1
 8019948:	4690      	mov	r8, r2
 801994a:	461f      	mov	r7, r3
 801994c:	d838      	bhi.n	80199c0 <__ssputs_r+0x84>
 801994e:	898a      	ldrh	r2, [r1, #12]
 8019950:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019954:	d032      	beq.n	80199bc <__ssputs_r+0x80>
 8019956:	6825      	ldr	r5, [r4, #0]
 8019958:	6909      	ldr	r1, [r1, #16]
 801995a:	3301      	adds	r3, #1
 801995c:	eba5 0901 	sub.w	r9, r5, r1
 8019960:	6965      	ldr	r5, [r4, #20]
 8019962:	444b      	add	r3, r9
 8019964:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019968:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801996c:	106d      	asrs	r5, r5, #1
 801996e:	429d      	cmp	r5, r3
 8019970:	bf38      	it	cc
 8019972:	461d      	movcc	r5, r3
 8019974:	0553      	lsls	r3, r2, #21
 8019976:	d531      	bpl.n	80199dc <__ssputs_r+0xa0>
 8019978:	4629      	mov	r1, r5
 801997a:	f7fc f9bd 	bl	8015cf8 <_malloc_r>
 801997e:	4606      	mov	r6, r0
 8019980:	b950      	cbnz	r0, 8019998 <__ssputs_r+0x5c>
 8019982:	230c      	movs	r3, #12
 8019984:	f04f 30ff 	mov.w	r0, #4294967295
 8019988:	f8ca 3000 	str.w	r3, [sl]
 801998c:	89a3      	ldrh	r3, [r4, #12]
 801998e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019992:	81a3      	strh	r3, [r4, #12]
 8019994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019998:	464a      	mov	r2, r9
 801999a:	6921      	ldr	r1, [r4, #16]
 801999c:	f7fc f94a 	bl	8015c34 <memcpy>
 80199a0:	89a3      	ldrh	r3, [r4, #12]
 80199a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80199a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80199aa:	81a3      	strh	r3, [r4, #12]
 80199ac:	6126      	str	r6, [r4, #16]
 80199ae:	444e      	add	r6, r9
 80199b0:	6026      	str	r6, [r4, #0]
 80199b2:	463e      	mov	r6, r7
 80199b4:	6165      	str	r5, [r4, #20]
 80199b6:	eba5 0509 	sub.w	r5, r5, r9
 80199ba:	60a5      	str	r5, [r4, #8]
 80199bc:	42be      	cmp	r6, r7
 80199be:	d900      	bls.n	80199c2 <__ssputs_r+0x86>
 80199c0:	463e      	mov	r6, r7
 80199c2:	4632      	mov	r2, r6
 80199c4:	4641      	mov	r1, r8
 80199c6:	6820      	ldr	r0, [r4, #0]
 80199c8:	f000 f97c 	bl	8019cc4 <memmove>
 80199cc:	68a3      	ldr	r3, [r4, #8]
 80199ce:	6822      	ldr	r2, [r4, #0]
 80199d0:	1b9b      	subs	r3, r3, r6
 80199d2:	4432      	add	r2, r6
 80199d4:	2000      	movs	r0, #0
 80199d6:	60a3      	str	r3, [r4, #8]
 80199d8:	6022      	str	r2, [r4, #0]
 80199da:	e7db      	b.n	8019994 <__ssputs_r+0x58>
 80199dc:	462a      	mov	r2, r5
 80199de:	f000 f98b 	bl	8019cf8 <_realloc_r>
 80199e2:	4606      	mov	r6, r0
 80199e4:	2800      	cmp	r0, #0
 80199e6:	d1e1      	bne.n	80199ac <__ssputs_r+0x70>
 80199e8:	4650      	mov	r0, sl
 80199ea:	6921      	ldr	r1, [r4, #16]
 80199ec:	f7fc f938 	bl	8015c60 <_free_r>
 80199f0:	e7c7      	b.n	8019982 <__ssputs_r+0x46>
	...

080199f4 <_svfiprintf_r>:
 80199f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199f8:	4698      	mov	r8, r3
 80199fa:	898b      	ldrh	r3, [r1, #12]
 80199fc:	4607      	mov	r7, r0
 80199fe:	061b      	lsls	r3, r3, #24
 8019a00:	460d      	mov	r5, r1
 8019a02:	4614      	mov	r4, r2
 8019a04:	b09d      	sub	sp, #116	; 0x74
 8019a06:	d50e      	bpl.n	8019a26 <_svfiprintf_r+0x32>
 8019a08:	690b      	ldr	r3, [r1, #16]
 8019a0a:	b963      	cbnz	r3, 8019a26 <_svfiprintf_r+0x32>
 8019a0c:	2140      	movs	r1, #64	; 0x40
 8019a0e:	f7fc f973 	bl	8015cf8 <_malloc_r>
 8019a12:	6028      	str	r0, [r5, #0]
 8019a14:	6128      	str	r0, [r5, #16]
 8019a16:	b920      	cbnz	r0, 8019a22 <_svfiprintf_r+0x2e>
 8019a18:	230c      	movs	r3, #12
 8019a1a:	603b      	str	r3, [r7, #0]
 8019a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8019a20:	e0d1      	b.n	8019bc6 <_svfiprintf_r+0x1d2>
 8019a22:	2340      	movs	r3, #64	; 0x40
 8019a24:	616b      	str	r3, [r5, #20]
 8019a26:	2300      	movs	r3, #0
 8019a28:	9309      	str	r3, [sp, #36]	; 0x24
 8019a2a:	2320      	movs	r3, #32
 8019a2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019a30:	2330      	movs	r3, #48	; 0x30
 8019a32:	f04f 0901 	mov.w	r9, #1
 8019a36:	f8cd 800c 	str.w	r8, [sp, #12]
 8019a3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8019be0 <_svfiprintf_r+0x1ec>
 8019a3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019a42:	4623      	mov	r3, r4
 8019a44:	469a      	mov	sl, r3
 8019a46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019a4a:	b10a      	cbz	r2, 8019a50 <_svfiprintf_r+0x5c>
 8019a4c:	2a25      	cmp	r2, #37	; 0x25
 8019a4e:	d1f9      	bne.n	8019a44 <_svfiprintf_r+0x50>
 8019a50:	ebba 0b04 	subs.w	fp, sl, r4
 8019a54:	d00b      	beq.n	8019a6e <_svfiprintf_r+0x7a>
 8019a56:	465b      	mov	r3, fp
 8019a58:	4622      	mov	r2, r4
 8019a5a:	4629      	mov	r1, r5
 8019a5c:	4638      	mov	r0, r7
 8019a5e:	f7ff ff6d 	bl	801993c <__ssputs_r>
 8019a62:	3001      	adds	r0, #1
 8019a64:	f000 80aa 	beq.w	8019bbc <_svfiprintf_r+0x1c8>
 8019a68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019a6a:	445a      	add	r2, fp
 8019a6c:	9209      	str	r2, [sp, #36]	; 0x24
 8019a6e:	f89a 3000 	ldrb.w	r3, [sl]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	f000 80a2 	beq.w	8019bbc <_svfiprintf_r+0x1c8>
 8019a78:	2300      	movs	r3, #0
 8019a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8019a7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019a82:	f10a 0a01 	add.w	sl, sl, #1
 8019a86:	9304      	str	r3, [sp, #16]
 8019a88:	9307      	str	r3, [sp, #28]
 8019a8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019a8e:	931a      	str	r3, [sp, #104]	; 0x68
 8019a90:	4654      	mov	r4, sl
 8019a92:	2205      	movs	r2, #5
 8019a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a98:	4851      	ldr	r0, [pc, #324]	; (8019be0 <_svfiprintf_r+0x1ec>)
 8019a9a:	f7ff fa6f 	bl	8018f7c <memchr>
 8019a9e:	9a04      	ldr	r2, [sp, #16]
 8019aa0:	b9d8      	cbnz	r0, 8019ada <_svfiprintf_r+0xe6>
 8019aa2:	06d0      	lsls	r0, r2, #27
 8019aa4:	bf44      	itt	mi
 8019aa6:	2320      	movmi	r3, #32
 8019aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019aac:	0711      	lsls	r1, r2, #28
 8019aae:	bf44      	itt	mi
 8019ab0:	232b      	movmi	r3, #43	; 0x2b
 8019ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ab6:	f89a 3000 	ldrb.w	r3, [sl]
 8019aba:	2b2a      	cmp	r3, #42	; 0x2a
 8019abc:	d015      	beq.n	8019aea <_svfiprintf_r+0xf6>
 8019abe:	4654      	mov	r4, sl
 8019ac0:	2000      	movs	r0, #0
 8019ac2:	f04f 0c0a 	mov.w	ip, #10
 8019ac6:	9a07      	ldr	r2, [sp, #28]
 8019ac8:	4621      	mov	r1, r4
 8019aca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ace:	3b30      	subs	r3, #48	; 0x30
 8019ad0:	2b09      	cmp	r3, #9
 8019ad2:	d94e      	bls.n	8019b72 <_svfiprintf_r+0x17e>
 8019ad4:	b1b0      	cbz	r0, 8019b04 <_svfiprintf_r+0x110>
 8019ad6:	9207      	str	r2, [sp, #28]
 8019ad8:	e014      	b.n	8019b04 <_svfiprintf_r+0x110>
 8019ada:	eba0 0308 	sub.w	r3, r0, r8
 8019ade:	fa09 f303 	lsl.w	r3, r9, r3
 8019ae2:	4313      	orrs	r3, r2
 8019ae4:	46a2      	mov	sl, r4
 8019ae6:	9304      	str	r3, [sp, #16]
 8019ae8:	e7d2      	b.n	8019a90 <_svfiprintf_r+0x9c>
 8019aea:	9b03      	ldr	r3, [sp, #12]
 8019aec:	1d19      	adds	r1, r3, #4
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	9103      	str	r1, [sp, #12]
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	bfbb      	ittet	lt
 8019af6:	425b      	neglt	r3, r3
 8019af8:	f042 0202 	orrlt.w	r2, r2, #2
 8019afc:	9307      	strge	r3, [sp, #28]
 8019afe:	9307      	strlt	r3, [sp, #28]
 8019b00:	bfb8      	it	lt
 8019b02:	9204      	strlt	r2, [sp, #16]
 8019b04:	7823      	ldrb	r3, [r4, #0]
 8019b06:	2b2e      	cmp	r3, #46	; 0x2e
 8019b08:	d10c      	bne.n	8019b24 <_svfiprintf_r+0x130>
 8019b0a:	7863      	ldrb	r3, [r4, #1]
 8019b0c:	2b2a      	cmp	r3, #42	; 0x2a
 8019b0e:	d135      	bne.n	8019b7c <_svfiprintf_r+0x188>
 8019b10:	9b03      	ldr	r3, [sp, #12]
 8019b12:	3402      	adds	r4, #2
 8019b14:	1d1a      	adds	r2, r3, #4
 8019b16:	681b      	ldr	r3, [r3, #0]
 8019b18:	9203      	str	r2, [sp, #12]
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	bfb8      	it	lt
 8019b1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8019b22:	9305      	str	r3, [sp, #20]
 8019b24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019bf0 <_svfiprintf_r+0x1fc>
 8019b28:	2203      	movs	r2, #3
 8019b2a:	4650      	mov	r0, sl
 8019b2c:	7821      	ldrb	r1, [r4, #0]
 8019b2e:	f7ff fa25 	bl	8018f7c <memchr>
 8019b32:	b140      	cbz	r0, 8019b46 <_svfiprintf_r+0x152>
 8019b34:	2340      	movs	r3, #64	; 0x40
 8019b36:	eba0 000a 	sub.w	r0, r0, sl
 8019b3a:	fa03 f000 	lsl.w	r0, r3, r0
 8019b3e:	9b04      	ldr	r3, [sp, #16]
 8019b40:	3401      	adds	r4, #1
 8019b42:	4303      	orrs	r3, r0
 8019b44:	9304      	str	r3, [sp, #16]
 8019b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b4a:	2206      	movs	r2, #6
 8019b4c:	4825      	ldr	r0, [pc, #148]	; (8019be4 <_svfiprintf_r+0x1f0>)
 8019b4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019b52:	f7ff fa13 	bl	8018f7c <memchr>
 8019b56:	2800      	cmp	r0, #0
 8019b58:	d038      	beq.n	8019bcc <_svfiprintf_r+0x1d8>
 8019b5a:	4b23      	ldr	r3, [pc, #140]	; (8019be8 <_svfiprintf_r+0x1f4>)
 8019b5c:	bb1b      	cbnz	r3, 8019ba6 <_svfiprintf_r+0x1b2>
 8019b5e:	9b03      	ldr	r3, [sp, #12]
 8019b60:	3307      	adds	r3, #7
 8019b62:	f023 0307 	bic.w	r3, r3, #7
 8019b66:	3308      	adds	r3, #8
 8019b68:	9303      	str	r3, [sp, #12]
 8019b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b6c:	4433      	add	r3, r6
 8019b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8019b70:	e767      	b.n	8019a42 <_svfiprintf_r+0x4e>
 8019b72:	460c      	mov	r4, r1
 8019b74:	2001      	movs	r0, #1
 8019b76:	fb0c 3202 	mla	r2, ip, r2, r3
 8019b7a:	e7a5      	b.n	8019ac8 <_svfiprintf_r+0xd4>
 8019b7c:	2300      	movs	r3, #0
 8019b7e:	f04f 0c0a 	mov.w	ip, #10
 8019b82:	4619      	mov	r1, r3
 8019b84:	3401      	adds	r4, #1
 8019b86:	9305      	str	r3, [sp, #20]
 8019b88:	4620      	mov	r0, r4
 8019b8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019b8e:	3a30      	subs	r2, #48	; 0x30
 8019b90:	2a09      	cmp	r2, #9
 8019b92:	d903      	bls.n	8019b9c <_svfiprintf_r+0x1a8>
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d0c5      	beq.n	8019b24 <_svfiprintf_r+0x130>
 8019b98:	9105      	str	r1, [sp, #20]
 8019b9a:	e7c3      	b.n	8019b24 <_svfiprintf_r+0x130>
 8019b9c:	4604      	mov	r4, r0
 8019b9e:	2301      	movs	r3, #1
 8019ba0:	fb0c 2101 	mla	r1, ip, r1, r2
 8019ba4:	e7f0      	b.n	8019b88 <_svfiprintf_r+0x194>
 8019ba6:	ab03      	add	r3, sp, #12
 8019ba8:	9300      	str	r3, [sp, #0]
 8019baa:	462a      	mov	r2, r5
 8019bac:	4638      	mov	r0, r7
 8019bae:	4b0f      	ldr	r3, [pc, #60]	; (8019bec <_svfiprintf_r+0x1f8>)
 8019bb0:	a904      	add	r1, sp, #16
 8019bb2:	f7fc f999 	bl	8015ee8 <_printf_float>
 8019bb6:	1c42      	adds	r2, r0, #1
 8019bb8:	4606      	mov	r6, r0
 8019bba:	d1d6      	bne.n	8019b6a <_svfiprintf_r+0x176>
 8019bbc:	89ab      	ldrh	r3, [r5, #12]
 8019bbe:	065b      	lsls	r3, r3, #25
 8019bc0:	f53f af2c 	bmi.w	8019a1c <_svfiprintf_r+0x28>
 8019bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019bc6:	b01d      	add	sp, #116	; 0x74
 8019bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bcc:	ab03      	add	r3, sp, #12
 8019bce:	9300      	str	r3, [sp, #0]
 8019bd0:	462a      	mov	r2, r5
 8019bd2:	4638      	mov	r0, r7
 8019bd4:	4b05      	ldr	r3, [pc, #20]	; (8019bec <_svfiprintf_r+0x1f8>)
 8019bd6:	a904      	add	r1, sp, #16
 8019bd8:	f7fc fc22 	bl	8016420 <_printf_i>
 8019bdc:	e7eb      	b.n	8019bb6 <_svfiprintf_r+0x1c2>
 8019bde:	bf00      	nop
 8019be0:	0801a964 	.word	0x0801a964
 8019be4:	0801a96e 	.word	0x0801a96e
 8019be8:	08015ee9 	.word	0x08015ee9
 8019bec:	0801993d 	.word	0x0801993d
 8019bf0:	0801a96a 	.word	0x0801a96a

08019bf4 <_read_r>:
 8019bf4:	b538      	push	{r3, r4, r5, lr}
 8019bf6:	4604      	mov	r4, r0
 8019bf8:	4608      	mov	r0, r1
 8019bfa:	4611      	mov	r1, r2
 8019bfc:	2200      	movs	r2, #0
 8019bfe:	4d05      	ldr	r5, [pc, #20]	; (8019c14 <_read_r+0x20>)
 8019c00:	602a      	str	r2, [r5, #0]
 8019c02:	461a      	mov	r2, r3
 8019c04:	f7eb fe99 	bl	800593a <_read>
 8019c08:	1c43      	adds	r3, r0, #1
 8019c0a:	d102      	bne.n	8019c12 <_read_r+0x1e>
 8019c0c:	682b      	ldr	r3, [r5, #0]
 8019c0e:	b103      	cbz	r3, 8019c12 <_read_r+0x1e>
 8019c10:	6023      	str	r3, [r4, #0]
 8019c12:	bd38      	pop	{r3, r4, r5, pc}
 8019c14:	2000e4bc 	.word	0x2000e4bc

08019c18 <nan>:
 8019c18:	2000      	movs	r0, #0
 8019c1a:	4901      	ldr	r1, [pc, #4]	; (8019c20 <nan+0x8>)
 8019c1c:	4770      	bx	lr
 8019c1e:	bf00      	nop
 8019c20:	7ff80000 	.word	0x7ff80000

08019c24 <strncmp>:
 8019c24:	b510      	push	{r4, lr}
 8019c26:	b16a      	cbz	r2, 8019c44 <strncmp+0x20>
 8019c28:	3901      	subs	r1, #1
 8019c2a:	1884      	adds	r4, r0, r2
 8019c2c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019c30:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019c34:	4293      	cmp	r3, r2
 8019c36:	d103      	bne.n	8019c40 <strncmp+0x1c>
 8019c38:	42a0      	cmp	r0, r4
 8019c3a:	d001      	beq.n	8019c40 <strncmp+0x1c>
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d1f5      	bne.n	8019c2c <strncmp+0x8>
 8019c40:	1a98      	subs	r0, r3, r2
 8019c42:	bd10      	pop	{r4, pc}
 8019c44:	4610      	mov	r0, r2
 8019c46:	e7fc      	b.n	8019c42 <strncmp+0x1e>

08019c48 <__ascii_wctomb>:
 8019c48:	4603      	mov	r3, r0
 8019c4a:	4608      	mov	r0, r1
 8019c4c:	b141      	cbz	r1, 8019c60 <__ascii_wctomb+0x18>
 8019c4e:	2aff      	cmp	r2, #255	; 0xff
 8019c50:	d904      	bls.n	8019c5c <__ascii_wctomb+0x14>
 8019c52:	228a      	movs	r2, #138	; 0x8a
 8019c54:	f04f 30ff 	mov.w	r0, #4294967295
 8019c58:	601a      	str	r2, [r3, #0]
 8019c5a:	4770      	bx	lr
 8019c5c:	2001      	movs	r0, #1
 8019c5e:	700a      	strb	r2, [r1, #0]
 8019c60:	4770      	bx	lr
	...

08019c64 <__assert_func>:
 8019c64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019c66:	4614      	mov	r4, r2
 8019c68:	461a      	mov	r2, r3
 8019c6a:	4b09      	ldr	r3, [pc, #36]	; (8019c90 <__assert_func+0x2c>)
 8019c6c:	4605      	mov	r5, r0
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	68d8      	ldr	r0, [r3, #12]
 8019c72:	b14c      	cbz	r4, 8019c88 <__assert_func+0x24>
 8019c74:	4b07      	ldr	r3, [pc, #28]	; (8019c94 <__assert_func+0x30>)
 8019c76:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019c7a:	9100      	str	r1, [sp, #0]
 8019c7c:	462b      	mov	r3, r5
 8019c7e:	4906      	ldr	r1, [pc, #24]	; (8019c98 <__assert_func+0x34>)
 8019c80:	f000 f80e 	bl	8019ca0 <fiprintf>
 8019c84:	f000 fa76 	bl	801a174 <abort>
 8019c88:	4b04      	ldr	r3, [pc, #16]	; (8019c9c <__assert_func+0x38>)
 8019c8a:	461c      	mov	r4, r3
 8019c8c:	e7f3      	b.n	8019c76 <__assert_func+0x12>
 8019c8e:	bf00      	nop
 8019c90:	20000250 	.word	0x20000250
 8019c94:	0801a975 	.word	0x0801a975
 8019c98:	0801a982 	.word	0x0801a982
 8019c9c:	0801a9b0 	.word	0x0801a9b0

08019ca0 <fiprintf>:
 8019ca0:	b40e      	push	{r1, r2, r3}
 8019ca2:	b503      	push	{r0, r1, lr}
 8019ca4:	4601      	mov	r1, r0
 8019ca6:	ab03      	add	r3, sp, #12
 8019ca8:	4805      	ldr	r0, [pc, #20]	; (8019cc0 <fiprintf+0x20>)
 8019caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8019cae:	6800      	ldr	r0, [r0, #0]
 8019cb0:	9301      	str	r3, [sp, #4]
 8019cb2:	f000 f86f 	bl	8019d94 <_vfiprintf_r>
 8019cb6:	b002      	add	sp, #8
 8019cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8019cbc:	b003      	add	sp, #12
 8019cbe:	4770      	bx	lr
 8019cc0:	20000250 	.word	0x20000250

08019cc4 <memmove>:
 8019cc4:	4288      	cmp	r0, r1
 8019cc6:	b510      	push	{r4, lr}
 8019cc8:	eb01 0402 	add.w	r4, r1, r2
 8019ccc:	d902      	bls.n	8019cd4 <memmove+0x10>
 8019cce:	4284      	cmp	r4, r0
 8019cd0:	4623      	mov	r3, r4
 8019cd2:	d807      	bhi.n	8019ce4 <memmove+0x20>
 8019cd4:	1e43      	subs	r3, r0, #1
 8019cd6:	42a1      	cmp	r1, r4
 8019cd8:	d008      	beq.n	8019cec <memmove+0x28>
 8019cda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019cde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019ce2:	e7f8      	b.n	8019cd6 <memmove+0x12>
 8019ce4:	4601      	mov	r1, r0
 8019ce6:	4402      	add	r2, r0
 8019ce8:	428a      	cmp	r2, r1
 8019cea:	d100      	bne.n	8019cee <memmove+0x2a>
 8019cec:	bd10      	pop	{r4, pc}
 8019cee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019cf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019cf6:	e7f7      	b.n	8019ce8 <memmove+0x24>

08019cf8 <_realloc_r>:
 8019cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cfa:	4607      	mov	r7, r0
 8019cfc:	4614      	mov	r4, r2
 8019cfe:	460e      	mov	r6, r1
 8019d00:	b921      	cbnz	r1, 8019d0c <_realloc_r+0x14>
 8019d02:	4611      	mov	r1, r2
 8019d04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019d08:	f7fb bff6 	b.w	8015cf8 <_malloc_r>
 8019d0c:	b922      	cbnz	r2, 8019d18 <_realloc_r+0x20>
 8019d0e:	f7fb ffa7 	bl	8015c60 <_free_r>
 8019d12:	4625      	mov	r5, r4
 8019d14:	4628      	mov	r0, r5
 8019d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d18:	f000 fa98 	bl	801a24c <_malloc_usable_size_r>
 8019d1c:	42a0      	cmp	r0, r4
 8019d1e:	d20f      	bcs.n	8019d40 <_realloc_r+0x48>
 8019d20:	4621      	mov	r1, r4
 8019d22:	4638      	mov	r0, r7
 8019d24:	f7fb ffe8 	bl	8015cf8 <_malloc_r>
 8019d28:	4605      	mov	r5, r0
 8019d2a:	2800      	cmp	r0, #0
 8019d2c:	d0f2      	beq.n	8019d14 <_realloc_r+0x1c>
 8019d2e:	4631      	mov	r1, r6
 8019d30:	4622      	mov	r2, r4
 8019d32:	f7fb ff7f 	bl	8015c34 <memcpy>
 8019d36:	4631      	mov	r1, r6
 8019d38:	4638      	mov	r0, r7
 8019d3a:	f7fb ff91 	bl	8015c60 <_free_r>
 8019d3e:	e7e9      	b.n	8019d14 <_realloc_r+0x1c>
 8019d40:	4635      	mov	r5, r6
 8019d42:	e7e7      	b.n	8019d14 <_realloc_r+0x1c>

08019d44 <__sfputc_r>:
 8019d44:	6893      	ldr	r3, [r2, #8]
 8019d46:	b410      	push	{r4}
 8019d48:	3b01      	subs	r3, #1
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	6093      	str	r3, [r2, #8]
 8019d4e:	da07      	bge.n	8019d60 <__sfputc_r+0x1c>
 8019d50:	6994      	ldr	r4, [r2, #24]
 8019d52:	42a3      	cmp	r3, r4
 8019d54:	db01      	blt.n	8019d5a <__sfputc_r+0x16>
 8019d56:	290a      	cmp	r1, #10
 8019d58:	d102      	bne.n	8019d60 <__sfputc_r+0x1c>
 8019d5a:	bc10      	pop	{r4}
 8019d5c:	f000 b94a 	b.w	8019ff4 <__swbuf_r>
 8019d60:	6813      	ldr	r3, [r2, #0]
 8019d62:	1c58      	adds	r0, r3, #1
 8019d64:	6010      	str	r0, [r2, #0]
 8019d66:	7019      	strb	r1, [r3, #0]
 8019d68:	4608      	mov	r0, r1
 8019d6a:	bc10      	pop	{r4}
 8019d6c:	4770      	bx	lr

08019d6e <__sfputs_r>:
 8019d6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d70:	4606      	mov	r6, r0
 8019d72:	460f      	mov	r7, r1
 8019d74:	4614      	mov	r4, r2
 8019d76:	18d5      	adds	r5, r2, r3
 8019d78:	42ac      	cmp	r4, r5
 8019d7a:	d101      	bne.n	8019d80 <__sfputs_r+0x12>
 8019d7c:	2000      	movs	r0, #0
 8019d7e:	e007      	b.n	8019d90 <__sfputs_r+0x22>
 8019d80:	463a      	mov	r2, r7
 8019d82:	4630      	mov	r0, r6
 8019d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d88:	f7ff ffdc 	bl	8019d44 <__sfputc_r>
 8019d8c:	1c43      	adds	r3, r0, #1
 8019d8e:	d1f3      	bne.n	8019d78 <__sfputs_r+0xa>
 8019d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019d94 <_vfiprintf_r>:
 8019d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d98:	460d      	mov	r5, r1
 8019d9a:	4614      	mov	r4, r2
 8019d9c:	4698      	mov	r8, r3
 8019d9e:	4606      	mov	r6, r0
 8019da0:	b09d      	sub	sp, #116	; 0x74
 8019da2:	b118      	cbz	r0, 8019dac <_vfiprintf_r+0x18>
 8019da4:	6983      	ldr	r3, [r0, #24]
 8019da6:	b90b      	cbnz	r3, 8019dac <_vfiprintf_r+0x18>
 8019da8:	f7fb fe6e 	bl	8015a88 <__sinit>
 8019dac:	4b89      	ldr	r3, [pc, #548]	; (8019fd4 <_vfiprintf_r+0x240>)
 8019dae:	429d      	cmp	r5, r3
 8019db0:	d11b      	bne.n	8019dea <_vfiprintf_r+0x56>
 8019db2:	6875      	ldr	r5, [r6, #4]
 8019db4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019db6:	07d9      	lsls	r1, r3, #31
 8019db8:	d405      	bmi.n	8019dc6 <_vfiprintf_r+0x32>
 8019dba:	89ab      	ldrh	r3, [r5, #12]
 8019dbc:	059a      	lsls	r2, r3, #22
 8019dbe:	d402      	bmi.n	8019dc6 <_vfiprintf_r+0x32>
 8019dc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019dc2:	f7fb ff24 	bl	8015c0e <__retarget_lock_acquire_recursive>
 8019dc6:	89ab      	ldrh	r3, [r5, #12]
 8019dc8:	071b      	lsls	r3, r3, #28
 8019dca:	d501      	bpl.n	8019dd0 <_vfiprintf_r+0x3c>
 8019dcc:	692b      	ldr	r3, [r5, #16]
 8019dce:	b9eb      	cbnz	r3, 8019e0c <_vfiprintf_r+0x78>
 8019dd0:	4629      	mov	r1, r5
 8019dd2:	4630      	mov	r0, r6
 8019dd4:	f000 f960 	bl	801a098 <__swsetup_r>
 8019dd8:	b1c0      	cbz	r0, 8019e0c <_vfiprintf_r+0x78>
 8019dda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019ddc:	07dc      	lsls	r4, r3, #31
 8019dde:	d50e      	bpl.n	8019dfe <_vfiprintf_r+0x6a>
 8019de0:	f04f 30ff 	mov.w	r0, #4294967295
 8019de4:	b01d      	add	sp, #116	; 0x74
 8019de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dea:	4b7b      	ldr	r3, [pc, #492]	; (8019fd8 <_vfiprintf_r+0x244>)
 8019dec:	429d      	cmp	r5, r3
 8019dee:	d101      	bne.n	8019df4 <_vfiprintf_r+0x60>
 8019df0:	68b5      	ldr	r5, [r6, #8]
 8019df2:	e7df      	b.n	8019db4 <_vfiprintf_r+0x20>
 8019df4:	4b79      	ldr	r3, [pc, #484]	; (8019fdc <_vfiprintf_r+0x248>)
 8019df6:	429d      	cmp	r5, r3
 8019df8:	bf08      	it	eq
 8019dfa:	68f5      	ldreq	r5, [r6, #12]
 8019dfc:	e7da      	b.n	8019db4 <_vfiprintf_r+0x20>
 8019dfe:	89ab      	ldrh	r3, [r5, #12]
 8019e00:	0598      	lsls	r0, r3, #22
 8019e02:	d4ed      	bmi.n	8019de0 <_vfiprintf_r+0x4c>
 8019e04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019e06:	f7fb ff03 	bl	8015c10 <__retarget_lock_release_recursive>
 8019e0a:	e7e9      	b.n	8019de0 <_vfiprintf_r+0x4c>
 8019e0c:	2300      	movs	r3, #0
 8019e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8019e10:	2320      	movs	r3, #32
 8019e12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019e16:	2330      	movs	r3, #48	; 0x30
 8019e18:	f04f 0901 	mov.w	r9, #1
 8019e1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8019e20:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8019fe0 <_vfiprintf_r+0x24c>
 8019e24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019e28:	4623      	mov	r3, r4
 8019e2a:	469a      	mov	sl, r3
 8019e2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e30:	b10a      	cbz	r2, 8019e36 <_vfiprintf_r+0xa2>
 8019e32:	2a25      	cmp	r2, #37	; 0x25
 8019e34:	d1f9      	bne.n	8019e2a <_vfiprintf_r+0x96>
 8019e36:	ebba 0b04 	subs.w	fp, sl, r4
 8019e3a:	d00b      	beq.n	8019e54 <_vfiprintf_r+0xc0>
 8019e3c:	465b      	mov	r3, fp
 8019e3e:	4622      	mov	r2, r4
 8019e40:	4629      	mov	r1, r5
 8019e42:	4630      	mov	r0, r6
 8019e44:	f7ff ff93 	bl	8019d6e <__sfputs_r>
 8019e48:	3001      	adds	r0, #1
 8019e4a:	f000 80aa 	beq.w	8019fa2 <_vfiprintf_r+0x20e>
 8019e4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e50:	445a      	add	r2, fp
 8019e52:	9209      	str	r2, [sp, #36]	; 0x24
 8019e54:	f89a 3000 	ldrb.w	r3, [sl]
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	f000 80a2 	beq.w	8019fa2 <_vfiprintf_r+0x20e>
 8019e5e:	2300      	movs	r3, #0
 8019e60:	f04f 32ff 	mov.w	r2, #4294967295
 8019e64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019e68:	f10a 0a01 	add.w	sl, sl, #1
 8019e6c:	9304      	str	r3, [sp, #16]
 8019e6e:	9307      	str	r3, [sp, #28]
 8019e70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019e74:	931a      	str	r3, [sp, #104]	; 0x68
 8019e76:	4654      	mov	r4, sl
 8019e78:	2205      	movs	r2, #5
 8019e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e7e:	4858      	ldr	r0, [pc, #352]	; (8019fe0 <_vfiprintf_r+0x24c>)
 8019e80:	f7ff f87c 	bl	8018f7c <memchr>
 8019e84:	9a04      	ldr	r2, [sp, #16]
 8019e86:	b9d8      	cbnz	r0, 8019ec0 <_vfiprintf_r+0x12c>
 8019e88:	06d1      	lsls	r1, r2, #27
 8019e8a:	bf44      	itt	mi
 8019e8c:	2320      	movmi	r3, #32
 8019e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019e92:	0713      	lsls	r3, r2, #28
 8019e94:	bf44      	itt	mi
 8019e96:	232b      	movmi	r3, #43	; 0x2b
 8019e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8019ea0:	2b2a      	cmp	r3, #42	; 0x2a
 8019ea2:	d015      	beq.n	8019ed0 <_vfiprintf_r+0x13c>
 8019ea4:	4654      	mov	r4, sl
 8019ea6:	2000      	movs	r0, #0
 8019ea8:	f04f 0c0a 	mov.w	ip, #10
 8019eac:	9a07      	ldr	r2, [sp, #28]
 8019eae:	4621      	mov	r1, r4
 8019eb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019eb4:	3b30      	subs	r3, #48	; 0x30
 8019eb6:	2b09      	cmp	r3, #9
 8019eb8:	d94e      	bls.n	8019f58 <_vfiprintf_r+0x1c4>
 8019eba:	b1b0      	cbz	r0, 8019eea <_vfiprintf_r+0x156>
 8019ebc:	9207      	str	r2, [sp, #28]
 8019ebe:	e014      	b.n	8019eea <_vfiprintf_r+0x156>
 8019ec0:	eba0 0308 	sub.w	r3, r0, r8
 8019ec4:	fa09 f303 	lsl.w	r3, r9, r3
 8019ec8:	4313      	orrs	r3, r2
 8019eca:	46a2      	mov	sl, r4
 8019ecc:	9304      	str	r3, [sp, #16]
 8019ece:	e7d2      	b.n	8019e76 <_vfiprintf_r+0xe2>
 8019ed0:	9b03      	ldr	r3, [sp, #12]
 8019ed2:	1d19      	adds	r1, r3, #4
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	9103      	str	r1, [sp, #12]
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	bfbb      	ittet	lt
 8019edc:	425b      	neglt	r3, r3
 8019ede:	f042 0202 	orrlt.w	r2, r2, #2
 8019ee2:	9307      	strge	r3, [sp, #28]
 8019ee4:	9307      	strlt	r3, [sp, #28]
 8019ee6:	bfb8      	it	lt
 8019ee8:	9204      	strlt	r2, [sp, #16]
 8019eea:	7823      	ldrb	r3, [r4, #0]
 8019eec:	2b2e      	cmp	r3, #46	; 0x2e
 8019eee:	d10c      	bne.n	8019f0a <_vfiprintf_r+0x176>
 8019ef0:	7863      	ldrb	r3, [r4, #1]
 8019ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8019ef4:	d135      	bne.n	8019f62 <_vfiprintf_r+0x1ce>
 8019ef6:	9b03      	ldr	r3, [sp, #12]
 8019ef8:	3402      	adds	r4, #2
 8019efa:	1d1a      	adds	r2, r3, #4
 8019efc:	681b      	ldr	r3, [r3, #0]
 8019efe:	9203      	str	r2, [sp, #12]
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	bfb8      	it	lt
 8019f04:	f04f 33ff 	movlt.w	r3, #4294967295
 8019f08:	9305      	str	r3, [sp, #20]
 8019f0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019ff0 <_vfiprintf_r+0x25c>
 8019f0e:	2203      	movs	r2, #3
 8019f10:	4650      	mov	r0, sl
 8019f12:	7821      	ldrb	r1, [r4, #0]
 8019f14:	f7ff f832 	bl	8018f7c <memchr>
 8019f18:	b140      	cbz	r0, 8019f2c <_vfiprintf_r+0x198>
 8019f1a:	2340      	movs	r3, #64	; 0x40
 8019f1c:	eba0 000a 	sub.w	r0, r0, sl
 8019f20:	fa03 f000 	lsl.w	r0, r3, r0
 8019f24:	9b04      	ldr	r3, [sp, #16]
 8019f26:	3401      	adds	r4, #1
 8019f28:	4303      	orrs	r3, r0
 8019f2a:	9304      	str	r3, [sp, #16]
 8019f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f30:	2206      	movs	r2, #6
 8019f32:	482c      	ldr	r0, [pc, #176]	; (8019fe4 <_vfiprintf_r+0x250>)
 8019f34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019f38:	f7ff f820 	bl	8018f7c <memchr>
 8019f3c:	2800      	cmp	r0, #0
 8019f3e:	d03f      	beq.n	8019fc0 <_vfiprintf_r+0x22c>
 8019f40:	4b29      	ldr	r3, [pc, #164]	; (8019fe8 <_vfiprintf_r+0x254>)
 8019f42:	bb1b      	cbnz	r3, 8019f8c <_vfiprintf_r+0x1f8>
 8019f44:	9b03      	ldr	r3, [sp, #12]
 8019f46:	3307      	adds	r3, #7
 8019f48:	f023 0307 	bic.w	r3, r3, #7
 8019f4c:	3308      	adds	r3, #8
 8019f4e:	9303      	str	r3, [sp, #12]
 8019f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f52:	443b      	add	r3, r7
 8019f54:	9309      	str	r3, [sp, #36]	; 0x24
 8019f56:	e767      	b.n	8019e28 <_vfiprintf_r+0x94>
 8019f58:	460c      	mov	r4, r1
 8019f5a:	2001      	movs	r0, #1
 8019f5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019f60:	e7a5      	b.n	8019eae <_vfiprintf_r+0x11a>
 8019f62:	2300      	movs	r3, #0
 8019f64:	f04f 0c0a 	mov.w	ip, #10
 8019f68:	4619      	mov	r1, r3
 8019f6a:	3401      	adds	r4, #1
 8019f6c:	9305      	str	r3, [sp, #20]
 8019f6e:	4620      	mov	r0, r4
 8019f70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019f74:	3a30      	subs	r2, #48	; 0x30
 8019f76:	2a09      	cmp	r2, #9
 8019f78:	d903      	bls.n	8019f82 <_vfiprintf_r+0x1ee>
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d0c5      	beq.n	8019f0a <_vfiprintf_r+0x176>
 8019f7e:	9105      	str	r1, [sp, #20]
 8019f80:	e7c3      	b.n	8019f0a <_vfiprintf_r+0x176>
 8019f82:	4604      	mov	r4, r0
 8019f84:	2301      	movs	r3, #1
 8019f86:	fb0c 2101 	mla	r1, ip, r1, r2
 8019f8a:	e7f0      	b.n	8019f6e <_vfiprintf_r+0x1da>
 8019f8c:	ab03      	add	r3, sp, #12
 8019f8e:	9300      	str	r3, [sp, #0]
 8019f90:	462a      	mov	r2, r5
 8019f92:	4630      	mov	r0, r6
 8019f94:	4b15      	ldr	r3, [pc, #84]	; (8019fec <_vfiprintf_r+0x258>)
 8019f96:	a904      	add	r1, sp, #16
 8019f98:	f7fb ffa6 	bl	8015ee8 <_printf_float>
 8019f9c:	4607      	mov	r7, r0
 8019f9e:	1c78      	adds	r0, r7, #1
 8019fa0:	d1d6      	bne.n	8019f50 <_vfiprintf_r+0x1bc>
 8019fa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019fa4:	07d9      	lsls	r1, r3, #31
 8019fa6:	d405      	bmi.n	8019fb4 <_vfiprintf_r+0x220>
 8019fa8:	89ab      	ldrh	r3, [r5, #12]
 8019faa:	059a      	lsls	r2, r3, #22
 8019fac:	d402      	bmi.n	8019fb4 <_vfiprintf_r+0x220>
 8019fae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019fb0:	f7fb fe2e 	bl	8015c10 <__retarget_lock_release_recursive>
 8019fb4:	89ab      	ldrh	r3, [r5, #12]
 8019fb6:	065b      	lsls	r3, r3, #25
 8019fb8:	f53f af12 	bmi.w	8019de0 <_vfiprintf_r+0x4c>
 8019fbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019fbe:	e711      	b.n	8019de4 <_vfiprintf_r+0x50>
 8019fc0:	ab03      	add	r3, sp, #12
 8019fc2:	9300      	str	r3, [sp, #0]
 8019fc4:	462a      	mov	r2, r5
 8019fc6:	4630      	mov	r0, r6
 8019fc8:	4b08      	ldr	r3, [pc, #32]	; (8019fec <_vfiprintf_r+0x258>)
 8019fca:	a904      	add	r1, sp, #16
 8019fcc:	f7fc fa28 	bl	8016420 <_printf_i>
 8019fd0:	e7e4      	b.n	8019f9c <_vfiprintf_r+0x208>
 8019fd2:	bf00      	nop
 8019fd4:	0801a520 	.word	0x0801a520
 8019fd8:	0801a540 	.word	0x0801a540
 8019fdc:	0801a500 	.word	0x0801a500
 8019fe0:	0801a964 	.word	0x0801a964
 8019fe4:	0801a96e 	.word	0x0801a96e
 8019fe8:	08015ee9 	.word	0x08015ee9
 8019fec:	08019d6f 	.word	0x08019d6f
 8019ff0:	0801a96a 	.word	0x0801a96a

08019ff4 <__swbuf_r>:
 8019ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ff6:	460e      	mov	r6, r1
 8019ff8:	4614      	mov	r4, r2
 8019ffa:	4605      	mov	r5, r0
 8019ffc:	b118      	cbz	r0, 801a006 <__swbuf_r+0x12>
 8019ffe:	6983      	ldr	r3, [r0, #24]
 801a000:	b90b      	cbnz	r3, 801a006 <__swbuf_r+0x12>
 801a002:	f7fb fd41 	bl	8015a88 <__sinit>
 801a006:	4b21      	ldr	r3, [pc, #132]	; (801a08c <__swbuf_r+0x98>)
 801a008:	429c      	cmp	r4, r3
 801a00a:	d12b      	bne.n	801a064 <__swbuf_r+0x70>
 801a00c:	686c      	ldr	r4, [r5, #4]
 801a00e:	69a3      	ldr	r3, [r4, #24]
 801a010:	60a3      	str	r3, [r4, #8]
 801a012:	89a3      	ldrh	r3, [r4, #12]
 801a014:	071a      	lsls	r2, r3, #28
 801a016:	d52f      	bpl.n	801a078 <__swbuf_r+0x84>
 801a018:	6923      	ldr	r3, [r4, #16]
 801a01a:	b36b      	cbz	r3, 801a078 <__swbuf_r+0x84>
 801a01c:	6923      	ldr	r3, [r4, #16]
 801a01e:	6820      	ldr	r0, [r4, #0]
 801a020:	b2f6      	uxtb	r6, r6
 801a022:	1ac0      	subs	r0, r0, r3
 801a024:	6963      	ldr	r3, [r4, #20]
 801a026:	4637      	mov	r7, r6
 801a028:	4283      	cmp	r3, r0
 801a02a:	dc04      	bgt.n	801a036 <__swbuf_r+0x42>
 801a02c:	4621      	mov	r1, r4
 801a02e:	4628      	mov	r0, r5
 801a030:	f7fe fbda 	bl	80187e8 <_fflush_r>
 801a034:	bb30      	cbnz	r0, 801a084 <__swbuf_r+0x90>
 801a036:	68a3      	ldr	r3, [r4, #8]
 801a038:	3001      	adds	r0, #1
 801a03a:	3b01      	subs	r3, #1
 801a03c:	60a3      	str	r3, [r4, #8]
 801a03e:	6823      	ldr	r3, [r4, #0]
 801a040:	1c5a      	adds	r2, r3, #1
 801a042:	6022      	str	r2, [r4, #0]
 801a044:	701e      	strb	r6, [r3, #0]
 801a046:	6963      	ldr	r3, [r4, #20]
 801a048:	4283      	cmp	r3, r0
 801a04a:	d004      	beq.n	801a056 <__swbuf_r+0x62>
 801a04c:	89a3      	ldrh	r3, [r4, #12]
 801a04e:	07db      	lsls	r3, r3, #31
 801a050:	d506      	bpl.n	801a060 <__swbuf_r+0x6c>
 801a052:	2e0a      	cmp	r6, #10
 801a054:	d104      	bne.n	801a060 <__swbuf_r+0x6c>
 801a056:	4621      	mov	r1, r4
 801a058:	4628      	mov	r0, r5
 801a05a:	f7fe fbc5 	bl	80187e8 <_fflush_r>
 801a05e:	b988      	cbnz	r0, 801a084 <__swbuf_r+0x90>
 801a060:	4638      	mov	r0, r7
 801a062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a064:	4b0a      	ldr	r3, [pc, #40]	; (801a090 <__swbuf_r+0x9c>)
 801a066:	429c      	cmp	r4, r3
 801a068:	d101      	bne.n	801a06e <__swbuf_r+0x7a>
 801a06a:	68ac      	ldr	r4, [r5, #8]
 801a06c:	e7cf      	b.n	801a00e <__swbuf_r+0x1a>
 801a06e:	4b09      	ldr	r3, [pc, #36]	; (801a094 <__swbuf_r+0xa0>)
 801a070:	429c      	cmp	r4, r3
 801a072:	bf08      	it	eq
 801a074:	68ec      	ldreq	r4, [r5, #12]
 801a076:	e7ca      	b.n	801a00e <__swbuf_r+0x1a>
 801a078:	4621      	mov	r1, r4
 801a07a:	4628      	mov	r0, r5
 801a07c:	f000 f80c 	bl	801a098 <__swsetup_r>
 801a080:	2800      	cmp	r0, #0
 801a082:	d0cb      	beq.n	801a01c <__swbuf_r+0x28>
 801a084:	f04f 37ff 	mov.w	r7, #4294967295
 801a088:	e7ea      	b.n	801a060 <__swbuf_r+0x6c>
 801a08a:	bf00      	nop
 801a08c:	0801a520 	.word	0x0801a520
 801a090:	0801a540 	.word	0x0801a540
 801a094:	0801a500 	.word	0x0801a500

0801a098 <__swsetup_r>:
 801a098:	4b32      	ldr	r3, [pc, #200]	; (801a164 <__swsetup_r+0xcc>)
 801a09a:	b570      	push	{r4, r5, r6, lr}
 801a09c:	681d      	ldr	r5, [r3, #0]
 801a09e:	4606      	mov	r6, r0
 801a0a0:	460c      	mov	r4, r1
 801a0a2:	b125      	cbz	r5, 801a0ae <__swsetup_r+0x16>
 801a0a4:	69ab      	ldr	r3, [r5, #24]
 801a0a6:	b913      	cbnz	r3, 801a0ae <__swsetup_r+0x16>
 801a0a8:	4628      	mov	r0, r5
 801a0aa:	f7fb fced 	bl	8015a88 <__sinit>
 801a0ae:	4b2e      	ldr	r3, [pc, #184]	; (801a168 <__swsetup_r+0xd0>)
 801a0b0:	429c      	cmp	r4, r3
 801a0b2:	d10f      	bne.n	801a0d4 <__swsetup_r+0x3c>
 801a0b4:	686c      	ldr	r4, [r5, #4]
 801a0b6:	89a3      	ldrh	r3, [r4, #12]
 801a0b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a0bc:	0719      	lsls	r1, r3, #28
 801a0be:	d42c      	bmi.n	801a11a <__swsetup_r+0x82>
 801a0c0:	06dd      	lsls	r5, r3, #27
 801a0c2:	d411      	bmi.n	801a0e8 <__swsetup_r+0x50>
 801a0c4:	2309      	movs	r3, #9
 801a0c6:	6033      	str	r3, [r6, #0]
 801a0c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a0cc:	f04f 30ff 	mov.w	r0, #4294967295
 801a0d0:	81a3      	strh	r3, [r4, #12]
 801a0d2:	e03e      	b.n	801a152 <__swsetup_r+0xba>
 801a0d4:	4b25      	ldr	r3, [pc, #148]	; (801a16c <__swsetup_r+0xd4>)
 801a0d6:	429c      	cmp	r4, r3
 801a0d8:	d101      	bne.n	801a0de <__swsetup_r+0x46>
 801a0da:	68ac      	ldr	r4, [r5, #8]
 801a0dc:	e7eb      	b.n	801a0b6 <__swsetup_r+0x1e>
 801a0de:	4b24      	ldr	r3, [pc, #144]	; (801a170 <__swsetup_r+0xd8>)
 801a0e0:	429c      	cmp	r4, r3
 801a0e2:	bf08      	it	eq
 801a0e4:	68ec      	ldreq	r4, [r5, #12]
 801a0e6:	e7e6      	b.n	801a0b6 <__swsetup_r+0x1e>
 801a0e8:	0758      	lsls	r0, r3, #29
 801a0ea:	d512      	bpl.n	801a112 <__swsetup_r+0x7a>
 801a0ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a0ee:	b141      	cbz	r1, 801a102 <__swsetup_r+0x6a>
 801a0f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a0f4:	4299      	cmp	r1, r3
 801a0f6:	d002      	beq.n	801a0fe <__swsetup_r+0x66>
 801a0f8:	4630      	mov	r0, r6
 801a0fa:	f7fb fdb1 	bl	8015c60 <_free_r>
 801a0fe:	2300      	movs	r3, #0
 801a100:	6363      	str	r3, [r4, #52]	; 0x34
 801a102:	89a3      	ldrh	r3, [r4, #12]
 801a104:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a108:	81a3      	strh	r3, [r4, #12]
 801a10a:	2300      	movs	r3, #0
 801a10c:	6063      	str	r3, [r4, #4]
 801a10e:	6923      	ldr	r3, [r4, #16]
 801a110:	6023      	str	r3, [r4, #0]
 801a112:	89a3      	ldrh	r3, [r4, #12]
 801a114:	f043 0308 	orr.w	r3, r3, #8
 801a118:	81a3      	strh	r3, [r4, #12]
 801a11a:	6923      	ldr	r3, [r4, #16]
 801a11c:	b94b      	cbnz	r3, 801a132 <__swsetup_r+0x9a>
 801a11e:	89a3      	ldrh	r3, [r4, #12]
 801a120:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a128:	d003      	beq.n	801a132 <__swsetup_r+0x9a>
 801a12a:	4621      	mov	r1, r4
 801a12c:	4630      	mov	r0, r6
 801a12e:	f000 f84d 	bl	801a1cc <__smakebuf_r>
 801a132:	89a0      	ldrh	r0, [r4, #12]
 801a134:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a138:	f010 0301 	ands.w	r3, r0, #1
 801a13c:	d00a      	beq.n	801a154 <__swsetup_r+0xbc>
 801a13e:	2300      	movs	r3, #0
 801a140:	60a3      	str	r3, [r4, #8]
 801a142:	6963      	ldr	r3, [r4, #20]
 801a144:	425b      	negs	r3, r3
 801a146:	61a3      	str	r3, [r4, #24]
 801a148:	6923      	ldr	r3, [r4, #16]
 801a14a:	b943      	cbnz	r3, 801a15e <__swsetup_r+0xc6>
 801a14c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a150:	d1ba      	bne.n	801a0c8 <__swsetup_r+0x30>
 801a152:	bd70      	pop	{r4, r5, r6, pc}
 801a154:	0781      	lsls	r1, r0, #30
 801a156:	bf58      	it	pl
 801a158:	6963      	ldrpl	r3, [r4, #20]
 801a15a:	60a3      	str	r3, [r4, #8]
 801a15c:	e7f4      	b.n	801a148 <__swsetup_r+0xb0>
 801a15e:	2000      	movs	r0, #0
 801a160:	e7f7      	b.n	801a152 <__swsetup_r+0xba>
 801a162:	bf00      	nop
 801a164:	20000250 	.word	0x20000250
 801a168:	0801a520 	.word	0x0801a520
 801a16c:	0801a540 	.word	0x0801a540
 801a170:	0801a500 	.word	0x0801a500

0801a174 <abort>:
 801a174:	2006      	movs	r0, #6
 801a176:	b508      	push	{r3, lr}
 801a178:	f000 f898 	bl	801a2ac <raise>
 801a17c:	2001      	movs	r0, #1
 801a17e:	f7eb fbd2 	bl	8005926 <_exit>

0801a182 <__swhatbuf_r>:
 801a182:	b570      	push	{r4, r5, r6, lr}
 801a184:	460e      	mov	r6, r1
 801a186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a18a:	4614      	mov	r4, r2
 801a18c:	2900      	cmp	r1, #0
 801a18e:	461d      	mov	r5, r3
 801a190:	b096      	sub	sp, #88	; 0x58
 801a192:	da07      	bge.n	801a1a4 <__swhatbuf_r+0x22>
 801a194:	2300      	movs	r3, #0
 801a196:	602b      	str	r3, [r5, #0]
 801a198:	89b3      	ldrh	r3, [r6, #12]
 801a19a:	061a      	lsls	r2, r3, #24
 801a19c:	d410      	bmi.n	801a1c0 <__swhatbuf_r+0x3e>
 801a19e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a1a2:	e00e      	b.n	801a1c2 <__swhatbuf_r+0x40>
 801a1a4:	466a      	mov	r2, sp
 801a1a6:	f000 f89d 	bl	801a2e4 <_fstat_r>
 801a1aa:	2800      	cmp	r0, #0
 801a1ac:	dbf2      	blt.n	801a194 <__swhatbuf_r+0x12>
 801a1ae:	9a01      	ldr	r2, [sp, #4]
 801a1b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a1b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a1b8:	425a      	negs	r2, r3
 801a1ba:	415a      	adcs	r2, r3
 801a1bc:	602a      	str	r2, [r5, #0]
 801a1be:	e7ee      	b.n	801a19e <__swhatbuf_r+0x1c>
 801a1c0:	2340      	movs	r3, #64	; 0x40
 801a1c2:	2000      	movs	r0, #0
 801a1c4:	6023      	str	r3, [r4, #0]
 801a1c6:	b016      	add	sp, #88	; 0x58
 801a1c8:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a1cc <__smakebuf_r>:
 801a1cc:	898b      	ldrh	r3, [r1, #12]
 801a1ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a1d0:	079d      	lsls	r5, r3, #30
 801a1d2:	4606      	mov	r6, r0
 801a1d4:	460c      	mov	r4, r1
 801a1d6:	d507      	bpl.n	801a1e8 <__smakebuf_r+0x1c>
 801a1d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a1dc:	6023      	str	r3, [r4, #0]
 801a1de:	6123      	str	r3, [r4, #16]
 801a1e0:	2301      	movs	r3, #1
 801a1e2:	6163      	str	r3, [r4, #20]
 801a1e4:	b002      	add	sp, #8
 801a1e6:	bd70      	pop	{r4, r5, r6, pc}
 801a1e8:	466a      	mov	r2, sp
 801a1ea:	ab01      	add	r3, sp, #4
 801a1ec:	f7ff ffc9 	bl	801a182 <__swhatbuf_r>
 801a1f0:	9900      	ldr	r1, [sp, #0]
 801a1f2:	4605      	mov	r5, r0
 801a1f4:	4630      	mov	r0, r6
 801a1f6:	f7fb fd7f 	bl	8015cf8 <_malloc_r>
 801a1fa:	b948      	cbnz	r0, 801a210 <__smakebuf_r+0x44>
 801a1fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a200:	059a      	lsls	r2, r3, #22
 801a202:	d4ef      	bmi.n	801a1e4 <__smakebuf_r+0x18>
 801a204:	f023 0303 	bic.w	r3, r3, #3
 801a208:	f043 0302 	orr.w	r3, r3, #2
 801a20c:	81a3      	strh	r3, [r4, #12]
 801a20e:	e7e3      	b.n	801a1d8 <__smakebuf_r+0xc>
 801a210:	4b0d      	ldr	r3, [pc, #52]	; (801a248 <__smakebuf_r+0x7c>)
 801a212:	62b3      	str	r3, [r6, #40]	; 0x28
 801a214:	89a3      	ldrh	r3, [r4, #12]
 801a216:	6020      	str	r0, [r4, #0]
 801a218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a21c:	81a3      	strh	r3, [r4, #12]
 801a21e:	9b00      	ldr	r3, [sp, #0]
 801a220:	6120      	str	r0, [r4, #16]
 801a222:	6163      	str	r3, [r4, #20]
 801a224:	9b01      	ldr	r3, [sp, #4]
 801a226:	b15b      	cbz	r3, 801a240 <__smakebuf_r+0x74>
 801a228:	4630      	mov	r0, r6
 801a22a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a22e:	f000 f86b 	bl	801a308 <_isatty_r>
 801a232:	b128      	cbz	r0, 801a240 <__smakebuf_r+0x74>
 801a234:	89a3      	ldrh	r3, [r4, #12]
 801a236:	f023 0303 	bic.w	r3, r3, #3
 801a23a:	f043 0301 	orr.w	r3, r3, #1
 801a23e:	81a3      	strh	r3, [r4, #12]
 801a240:	89a0      	ldrh	r0, [r4, #12]
 801a242:	4305      	orrs	r5, r0
 801a244:	81a5      	strh	r5, [r4, #12]
 801a246:	e7cd      	b.n	801a1e4 <__smakebuf_r+0x18>
 801a248:	08015a21 	.word	0x08015a21

0801a24c <_malloc_usable_size_r>:
 801a24c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a250:	1f18      	subs	r0, r3, #4
 801a252:	2b00      	cmp	r3, #0
 801a254:	bfbc      	itt	lt
 801a256:	580b      	ldrlt	r3, [r1, r0]
 801a258:	18c0      	addlt	r0, r0, r3
 801a25a:	4770      	bx	lr

0801a25c <_raise_r>:
 801a25c:	291f      	cmp	r1, #31
 801a25e:	b538      	push	{r3, r4, r5, lr}
 801a260:	4604      	mov	r4, r0
 801a262:	460d      	mov	r5, r1
 801a264:	d904      	bls.n	801a270 <_raise_r+0x14>
 801a266:	2316      	movs	r3, #22
 801a268:	6003      	str	r3, [r0, #0]
 801a26a:	f04f 30ff 	mov.w	r0, #4294967295
 801a26e:	bd38      	pop	{r3, r4, r5, pc}
 801a270:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a272:	b112      	cbz	r2, 801a27a <_raise_r+0x1e>
 801a274:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a278:	b94b      	cbnz	r3, 801a28e <_raise_r+0x32>
 801a27a:	4620      	mov	r0, r4
 801a27c:	f000 f830 	bl	801a2e0 <_getpid_r>
 801a280:	462a      	mov	r2, r5
 801a282:	4601      	mov	r1, r0
 801a284:	4620      	mov	r0, r4
 801a286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a28a:	f000 b817 	b.w	801a2bc <_kill_r>
 801a28e:	2b01      	cmp	r3, #1
 801a290:	d00a      	beq.n	801a2a8 <_raise_r+0x4c>
 801a292:	1c59      	adds	r1, r3, #1
 801a294:	d103      	bne.n	801a29e <_raise_r+0x42>
 801a296:	2316      	movs	r3, #22
 801a298:	6003      	str	r3, [r0, #0]
 801a29a:	2001      	movs	r0, #1
 801a29c:	e7e7      	b.n	801a26e <_raise_r+0x12>
 801a29e:	2400      	movs	r4, #0
 801a2a0:	4628      	mov	r0, r5
 801a2a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a2a6:	4798      	blx	r3
 801a2a8:	2000      	movs	r0, #0
 801a2aa:	e7e0      	b.n	801a26e <_raise_r+0x12>

0801a2ac <raise>:
 801a2ac:	4b02      	ldr	r3, [pc, #8]	; (801a2b8 <raise+0xc>)
 801a2ae:	4601      	mov	r1, r0
 801a2b0:	6818      	ldr	r0, [r3, #0]
 801a2b2:	f7ff bfd3 	b.w	801a25c <_raise_r>
 801a2b6:	bf00      	nop
 801a2b8:	20000250 	.word	0x20000250

0801a2bc <_kill_r>:
 801a2bc:	b538      	push	{r3, r4, r5, lr}
 801a2be:	2300      	movs	r3, #0
 801a2c0:	4d06      	ldr	r5, [pc, #24]	; (801a2dc <_kill_r+0x20>)
 801a2c2:	4604      	mov	r4, r0
 801a2c4:	4608      	mov	r0, r1
 801a2c6:	4611      	mov	r1, r2
 801a2c8:	602b      	str	r3, [r5, #0]
 801a2ca:	f7eb fb1c 	bl	8005906 <_kill>
 801a2ce:	1c43      	adds	r3, r0, #1
 801a2d0:	d102      	bne.n	801a2d8 <_kill_r+0x1c>
 801a2d2:	682b      	ldr	r3, [r5, #0]
 801a2d4:	b103      	cbz	r3, 801a2d8 <_kill_r+0x1c>
 801a2d6:	6023      	str	r3, [r4, #0]
 801a2d8:	bd38      	pop	{r3, r4, r5, pc}
 801a2da:	bf00      	nop
 801a2dc:	2000e4bc 	.word	0x2000e4bc

0801a2e0 <_getpid_r>:
 801a2e0:	f7eb bb0a 	b.w	80058f8 <_getpid>

0801a2e4 <_fstat_r>:
 801a2e4:	b538      	push	{r3, r4, r5, lr}
 801a2e6:	2300      	movs	r3, #0
 801a2e8:	4d06      	ldr	r5, [pc, #24]	; (801a304 <_fstat_r+0x20>)
 801a2ea:	4604      	mov	r4, r0
 801a2ec:	4608      	mov	r0, r1
 801a2ee:	4611      	mov	r1, r2
 801a2f0:	602b      	str	r3, [r5, #0]
 801a2f2:	f7eb fb66 	bl	80059c2 <_fstat>
 801a2f6:	1c43      	adds	r3, r0, #1
 801a2f8:	d102      	bne.n	801a300 <_fstat_r+0x1c>
 801a2fa:	682b      	ldr	r3, [r5, #0]
 801a2fc:	b103      	cbz	r3, 801a300 <_fstat_r+0x1c>
 801a2fe:	6023      	str	r3, [r4, #0]
 801a300:	bd38      	pop	{r3, r4, r5, pc}
 801a302:	bf00      	nop
 801a304:	2000e4bc 	.word	0x2000e4bc

0801a308 <_isatty_r>:
 801a308:	b538      	push	{r3, r4, r5, lr}
 801a30a:	2300      	movs	r3, #0
 801a30c:	4d05      	ldr	r5, [pc, #20]	; (801a324 <_isatty_r+0x1c>)
 801a30e:	4604      	mov	r4, r0
 801a310:	4608      	mov	r0, r1
 801a312:	602b      	str	r3, [r5, #0]
 801a314:	f7eb fb64 	bl	80059e0 <_isatty>
 801a318:	1c43      	adds	r3, r0, #1
 801a31a:	d102      	bne.n	801a322 <_isatty_r+0x1a>
 801a31c:	682b      	ldr	r3, [r5, #0]
 801a31e:	b103      	cbz	r3, 801a322 <_isatty_r+0x1a>
 801a320:	6023      	str	r3, [r4, #0]
 801a322:	bd38      	pop	{r3, r4, r5, pc}
 801a324:	2000e4bc 	.word	0x2000e4bc

0801a328 <_init>:
 801a328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a32a:	bf00      	nop
 801a32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a32e:	bc08      	pop	{r3}
 801a330:	469e      	mov	lr, r3
 801a332:	4770      	bx	lr

0801a334 <_fini>:
 801a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a336:	bf00      	nop
 801a338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a33a:	bc08      	pop	{r3}
 801a33c:	469e      	mov	lr, r3
 801a33e:	4770      	bx	lr
