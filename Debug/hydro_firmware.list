
hydro_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062e0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08006468  08006468  00016468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006478  08006478  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006478  08006478  00016478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006480  08006480  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006480  08006480  00016480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006484  08006484  00016484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  20000028  080064ac  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  080064ac  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001992b  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000330a  00000000  00000000  00039978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  0003cc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  0003db68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e88  00000000  00000000  0003e8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139fb  00000000  00000000  00060738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c92ad  00000000  00000000  00074133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013d3e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed8  00000000  00000000  0013d434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006450 	.word	0x08006450

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08006450 	.word	0x08006450

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_frsub>:
 8000b64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b68:	e002      	b.n	8000b70 <__addsf3>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fsub>:
 8000b6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b70 <__addsf3>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	bf1f      	itttt	ne
 8000b74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b78:	ea92 0f03 	teqne	r2, r3
 8000b7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b84:	d06a      	beq.n	8000c5c <__addsf3+0xec>
 8000b86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8e:	bfc1      	itttt	gt
 8000b90:	18d2      	addgt	r2, r2, r3
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	4048      	eorgt	r0, r1
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b19      	cmp	r3, #25
 8000b9e:	bf88      	it	hi
 8000ba0:	4770      	bxhi	lr
 8000ba2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000baa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4249      	negne	r1, r1
 8000bc2:	ea92 0f03 	teq	r2, r3
 8000bc6:	d03f      	beq.n	8000c48 <__addsf3+0xd8>
 8000bc8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bcc:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd0:	eb10 000c 	adds.w	r0, r0, ip
 8000bd4:	f1c3 0320 	rsb	r3, r3, #32
 8000bd8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bdc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__addsf3+0x78>
 8000be2:	4249      	negs	r1, r1
 8000be4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bec:	d313      	bcc.n	8000c16 <__addsf3+0xa6>
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf2:	d306      	bcc.n	8000c02 <__addsf3+0x92>
 8000bf4:	0840      	lsrs	r0, r0, #1
 8000bf6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfa:	f102 0201 	add.w	r2, r2, #1
 8000bfe:	2afe      	cmp	r2, #254	; 0xfe
 8000c00:	d251      	bcs.n	8000ca6 <__addsf3+0x136>
 8000c02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0a:	bf08      	it	eq
 8000c0c:	f020 0001 	biceq.w	r0, r0, #1
 8000c10:	ea40 0003 	orr.w	r0, r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	eb40 0000 	adc.w	r0, r0, r0
 8000c1c:	3a01      	subs	r2, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c24:	d2ed      	bcs.n	8000c02 <__addsf3+0x92>
 8000c26:	fab0 fc80 	clz	ip, r0
 8000c2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c36:	bfaa      	itet	ge
 8000c38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c3c:	4252      	neglt	r2, r2
 8000c3e:	4318      	orrge	r0, r3
 8000c40:	bfbc      	itt	lt
 8000c42:	40d0      	lsrlt	r0, r2
 8000c44:	4318      	orrlt	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	f092 0f00 	teq	r2, #0
 8000c4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c50:	bf06      	itte	eq
 8000c52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c56:	3201      	addeq	r2, #1
 8000c58:	3b01      	subne	r3, #1
 8000c5a:	e7b5      	b.n	8000bc8 <__addsf3+0x58>
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d021      	beq.n	8000cb0 <__addsf3+0x140>
 8000c6c:	ea92 0f03 	teq	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__addsf3+0x10c>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	bf08      	it	eq
 8000c78:	4608      	moveq	r0, r1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea90 0f01 	teq	r0, r1
 8000c80:	bf1c      	itt	ne
 8000c82:	2000      	movne	r0, #0
 8000c84:	4770      	bxne	lr
 8000c86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8a:	d104      	bne.n	8000c96 <__addsf3+0x126>
 8000c8c:	0040      	lsls	r0, r0, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9a:	bf3c      	itt	cc
 8000c9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bxcc	lr
 8000ca2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cae:	4770      	bx	lr
 8000cb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb4:	bf16      	itet	ne
 8000cb6:	4608      	movne	r0, r1
 8000cb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cbc:	4601      	movne	r1, r0
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	bf06      	itte	eq
 8000cc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc6:	ea90 0f01 	teqeq	r0, r1
 8000cca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_ui2f>:
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e004      	b.n	8000ce0 <__aeabi_i2f+0x8>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_i2f>:
 8000cd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cdc:	bf48      	it	mi
 8000cde:	4240      	negmi	r0, r0
 8000ce0:	ea5f 0c00 	movs.w	ip, r0
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cec:	4601      	mov	r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	e01c      	b.n	8000d2e <__aeabi_l2f+0x2a>

08000cf4 <__aeabi_ul2f>:
 8000cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e00a      	b.n	8000d18 <__aeabi_l2f+0x14>
 8000d02:	bf00      	nop

08000d04 <__aeabi_l2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_l2f+0x14>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	ea5f 0c01 	movs.w	ip, r1
 8000d1c:	bf02      	ittt	eq
 8000d1e:	4684      	moveq	ip, r0
 8000d20:	4601      	moveq	r1, r0
 8000d22:	2000      	moveq	r0, #0
 8000d24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d28:	bf08      	it	eq
 8000d2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d32:	fabc f28c 	clz	r2, ip
 8000d36:	3a08      	subs	r2, #8
 8000d38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d3c:	db10      	blt.n	8000d60 <__aeabi_l2f+0x5c>
 8000d3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d42:	4463      	add	r3, ip
 8000d44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d50:	fa20 f202 	lsr.w	r2, r0, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d70:	fa21 f202 	lsr.w	r2, r1, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_fmul>:
 8000d80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d88:	bf1e      	ittt	ne
 8000d8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8e:	ea92 0f0c 	teqne	r2, ip
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d06f      	beq.n	8000e78 <__aeabi_fmul+0xf8>
 8000d98:	441a      	add	r2, r3
 8000d9a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9e:	0240      	lsls	r0, r0, #9
 8000da0:	bf18      	it	ne
 8000da2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da6:	d01e      	beq.n	8000de6 <__aeabi_fmul+0x66>
 8000da8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db4:	fba0 3101 	umull	r3, r1, r0, r1
 8000db8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dbc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc0:	bf3e      	ittt	cc
 8000dc2:	0049      	lslcc	r1, r1, #1
 8000dc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc8:	005b      	lslcc	r3, r3, #1
 8000dca:	ea40 0001 	orr.w	r0, r0, r1
 8000dce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd2:	2afd      	cmp	r2, #253	; 0xfd
 8000dd4:	d81d      	bhi.n	8000e12 <__aeabi_fmul+0x92>
 8000dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dde:	bf08      	it	eq
 8000de0:	f020 0001 	biceq.w	r0, r0, #1
 8000de4:	4770      	bx	lr
 8000de6:	f090 0f00 	teq	r0, #0
 8000dea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dee:	bf08      	it	eq
 8000df0:	0249      	lsleq	r1, r1, #9
 8000df2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfa:	3a7f      	subs	r2, #127	; 0x7f
 8000dfc:	bfc2      	ittt	gt
 8000dfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e06:	4770      	bxgt	lr
 8000e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	3a01      	subs	r2, #1
 8000e12:	dc5d      	bgt.n	8000ed0 <__aeabi_fmul+0x150>
 8000e14:	f112 0f19 	cmn.w	r2, #25
 8000e18:	bfdc      	itt	le
 8000e1a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1e:	4770      	bxle	lr
 8000e20:	f1c2 0200 	rsb	r2, r2, #0
 8000e24:	0041      	lsls	r1, r0, #1
 8000e26:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2a:	f1c2 0220 	rsb	r2, r2, #32
 8000e2e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e32:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e36:	f140 0000 	adc.w	r0, r0, #0
 8000e3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3e:	bf08      	it	eq
 8000e40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e44:	4770      	bx	lr
 8000e46:	f092 0f00 	teq	r2, #0
 8000e4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4e:	bf02      	ittt	eq
 8000e50:	0040      	lsleq	r0, r0, #1
 8000e52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e56:	3a01      	subeq	r2, #1
 8000e58:	d0f9      	beq.n	8000e4e <__aeabi_fmul+0xce>
 8000e5a:	ea40 000c 	orr.w	r0, r0, ip
 8000e5e:	f093 0f00 	teq	r3, #0
 8000e62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0049      	lsleq	r1, r1, #1
 8000e6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6e:	3b01      	subeq	r3, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xe6>
 8000e72:	ea41 010c 	orr.w	r1, r1, ip
 8000e76:	e78f      	b.n	8000d98 <__aeabi_fmul+0x18>
 8000e78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	bf18      	it	ne
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d00a      	beq.n	8000e9e <__aeabi_fmul+0x11e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1d8      	bne.n	8000e46 <__aeabi_fmul+0xc6>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e9c:	4770      	bx	lr
 8000e9e:	f090 0f00 	teq	r0, #0
 8000ea2:	bf17      	itett	ne
 8000ea4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea8:	4608      	moveq	r0, r1
 8000eaa:	f091 0f00 	teqne	r1, #0
 8000eae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb2:	d014      	beq.n	8000ede <__aeabi_fmul+0x15e>
 8000eb4:	ea92 0f0c 	teq	r2, ip
 8000eb8:	d101      	bne.n	8000ebe <__aeabi_fmul+0x13e>
 8000eba:	0242      	lsls	r2, r0, #9
 8000ebc:	d10f      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ebe:	ea93 0f0c 	teq	r3, ip
 8000ec2:	d103      	bne.n	8000ecc <__aeabi_fmul+0x14c>
 8000ec4:	024b      	lsls	r3, r1, #9
 8000ec6:	bf18      	it	ne
 8000ec8:	4608      	movne	r0, r1
 8000eca:	d108      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ecc:	ea80 0001 	eor.w	r0, r0, r1
 8000ed0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000edc:	4770      	bx	lr
 8000ede:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee6:	4770      	bx	lr

08000ee8 <__aeabi_fdiv>:
 8000ee8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef0:	bf1e      	ittt	ne
 8000ef2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef6:	ea92 0f0c 	teqne	r2, ip
 8000efa:	ea93 0f0c 	teqne	r3, ip
 8000efe:	d069      	beq.n	8000fd4 <__aeabi_fdiv+0xec>
 8000f00:	eba2 0203 	sub.w	r2, r2, r3
 8000f04:	ea80 0c01 	eor.w	ip, r0, r1
 8000f08:	0249      	lsls	r1, r1, #9
 8000f0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0e:	d037      	beq.n	8000f80 <__aeabi_fdiv+0x98>
 8000f10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f20:	428b      	cmp	r3, r1
 8000f22:	bf38      	it	cc
 8000f24:	005b      	lslcc	r3, r3, #1
 8000f26:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	bf24      	itt	cs
 8000f32:	1a5b      	subcs	r3, r3, r1
 8000f34:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4a:	bf24      	itt	cs
 8000f4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f58:	bf24      	itt	cs
 8000f5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	bf18      	it	ne
 8000f66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6a:	d1e0      	bne.n	8000f2e <__aeabi_fdiv+0x46>
 8000f6c:	2afd      	cmp	r2, #253	; 0xfd
 8000f6e:	f63f af50 	bhi.w	8000e12 <__aeabi_fmul+0x92>
 8000f72:	428b      	cmp	r3, r1
 8000f74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f78:	bf08      	it	eq
 8000f7a:	f020 0001 	biceq.w	r0, r0, #1
 8000f7e:	4770      	bx	lr
 8000f80:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f88:	327f      	adds	r2, #127	; 0x7f
 8000f8a:	bfc2      	ittt	gt
 8000f8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f94:	4770      	bxgt	lr
 8000f96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	3a01      	subs	r2, #1
 8000fa0:	e737      	b.n	8000e12 <__aeabi_fmul+0x92>
 8000fa2:	f092 0f00 	teq	r2, #0
 8000fa6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0040      	lsleq	r0, r0, #1
 8000fae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb2:	3a01      	subeq	r2, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fdiv+0xc2>
 8000fb6:	ea40 000c 	orr.w	r0, r0, ip
 8000fba:	f093 0f00 	teq	r3, #0
 8000fbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0049      	lsleq	r1, r1, #1
 8000fc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fca:	3b01      	subeq	r3, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xda>
 8000fce:	ea41 010c 	orr.w	r1, r1, ip
 8000fd2:	e795      	b.n	8000f00 <__aeabi_fdiv+0x18>
 8000fd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd8:	ea92 0f0c 	teq	r2, ip
 8000fdc:	d108      	bne.n	8000ff0 <__aeabi_fdiv+0x108>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	f47f af7d 	bne.w	8000ede <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	f47f af70 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8000fec:	4608      	mov	r0, r1
 8000fee:	e776      	b.n	8000ede <__aeabi_fmul+0x15e>
 8000ff0:	ea93 0f0c 	teq	r3, ip
 8000ff4:	d104      	bne.n	8001000 <__aeabi_fdiv+0x118>
 8000ff6:	024b      	lsls	r3, r1, #9
 8000ff8:	f43f af4c 	beq.w	8000e94 <__aeabi_fmul+0x114>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	e76e      	b.n	8000ede <__aeabi_fmul+0x15e>
 8001000:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001004:	bf18      	it	ne
 8001006:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100a:	d1ca      	bne.n	8000fa2 <__aeabi_fdiv+0xba>
 800100c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001010:	f47f af5c 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8001014:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001018:	f47f af3c 	bne.w	8000e94 <__aeabi_fmul+0x114>
 800101c:	e75f      	b.n	8000ede <__aeabi_fmul+0x15e>
 800101e:	bf00      	nop

08001020 <__gesf2>:
 8001020:	f04f 3cff 	mov.w	ip, #4294967295
 8001024:	e006      	b.n	8001034 <__cmpsf2+0x4>
 8001026:	bf00      	nop

08001028 <__lesf2>:
 8001028:	f04f 0c01 	mov.w	ip, #1
 800102c:	e002      	b.n	8001034 <__cmpsf2+0x4>
 800102e:	bf00      	nop

08001030 <__cmpsf2>:
 8001030:	f04f 0c01 	mov.w	ip, #1
 8001034:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001038:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800103c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001040:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001044:	bf18      	it	ne
 8001046:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104a:	d011      	beq.n	8001070 <__cmpsf2+0x40>
 800104c:	b001      	add	sp, #4
 800104e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001052:	bf18      	it	ne
 8001054:	ea90 0f01 	teqne	r0, r1
 8001058:	bf58      	it	pl
 800105a:	ebb2 0003 	subspl.w	r0, r2, r3
 800105e:	bf88      	it	hi
 8001060:	17c8      	asrhi	r0, r1, #31
 8001062:	bf38      	it	cc
 8001064:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001068:	bf18      	it	ne
 800106a:	f040 0001 	orrne.w	r0, r0, #1
 800106e:	4770      	bx	lr
 8001070:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001074:	d102      	bne.n	800107c <__cmpsf2+0x4c>
 8001076:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107a:	d105      	bne.n	8001088 <__cmpsf2+0x58>
 800107c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001080:	d1e4      	bne.n	800104c <__cmpsf2+0x1c>
 8001082:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001086:	d0e1      	beq.n	800104c <__cmpsf2+0x1c>
 8001088:	f85d 0b04 	ldr.w	r0, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <__aeabi_cfrcmple>:
 8001090:	4684      	mov	ip, r0
 8001092:	4608      	mov	r0, r1
 8001094:	4661      	mov	r1, ip
 8001096:	e7ff      	b.n	8001098 <__aeabi_cfcmpeq>

08001098 <__aeabi_cfcmpeq>:
 8001098:	b50f      	push	{r0, r1, r2, r3, lr}
 800109a:	f7ff ffc9 	bl	8001030 <__cmpsf2>
 800109e:	2800      	cmp	r0, #0
 80010a0:	bf48      	it	mi
 80010a2:	f110 0f00 	cmnmi.w	r0, #0
 80010a6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010a8 <__aeabi_fcmpeq>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff fff4 	bl	8001098 <__aeabi_cfcmpeq>
 80010b0:	bf0c      	ite	eq
 80010b2:	2001      	moveq	r0, #1
 80010b4:	2000      	movne	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmplt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffea 	bl	8001098 <__aeabi_cfcmpeq>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmple>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffe0 	bl	8001098 <__aeabi_cfcmpeq>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmpge>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffd2 	bl	8001090 <__aeabi_cfrcmple>
 80010ec:	bf94      	ite	ls
 80010ee:	2001      	movls	r0, #1
 80010f0:	2000      	movhi	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmpgt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffc8 	bl	8001090 <__aeabi_cfrcmple>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_f2iz>:
 800110c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001110:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001114:	d30f      	bcc.n	8001136 <__aeabi_f2iz+0x2a>
 8001116:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111e:	d90d      	bls.n	800113c <__aeabi_f2iz+0x30>
 8001120:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001128:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	bf18      	it	ne
 8001132:	4240      	negne	r0, r0
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr
 800113c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001140:	d101      	bne.n	8001146 <__aeabi_f2iz+0x3a>
 8001142:	0242      	lsls	r2, r0, #9
 8001144:	d105      	bne.n	8001152 <__aeabi_f2iz+0x46>
 8001146:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114a:	bf08      	it	eq
 800114c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001150:	4770      	bx	lr
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4770      	bx	lr

08001158 <__aeabi_f2uiz>:
 8001158:	0042      	lsls	r2, r0, #1
 800115a:	d20e      	bcs.n	800117a <__aeabi_f2uiz+0x22>
 800115c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001160:	d30b      	bcc.n	800117a <__aeabi_f2uiz+0x22>
 8001162:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001166:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116a:	d409      	bmi.n	8001180 <__aeabi_f2uiz+0x28>
 800116c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001170:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001174:	fa23 f002 	lsr.w	r0, r3, r2
 8001178:	4770      	bx	lr
 800117a:	f04f 0000 	mov.w	r0, #0
 800117e:	4770      	bx	lr
 8001180:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001184:	d101      	bne.n	800118a <__aeabi_f2uiz+0x32>
 8001186:	0242      	lsls	r2, r0, #9
 8001188:	d102      	bne.n	8001190 <__aeabi_f2uiz+0x38>
 800118a:	f04f 30ff 	mov.w	r0, #4294967295
 800118e:	4770      	bx	lr
 8001190:	f04f 0000 	mov.w	r0, #0
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop

08001198 <__aeabi_uldivmod>:
 8001198:	b953      	cbnz	r3, 80011b0 <__aeabi_uldivmod+0x18>
 800119a:	b94a      	cbnz	r2, 80011b0 <__aeabi_uldivmod+0x18>
 800119c:	2900      	cmp	r1, #0
 800119e:	bf08      	it	eq
 80011a0:	2800      	cmpeq	r0, #0
 80011a2:	bf1c      	itt	ne
 80011a4:	f04f 31ff 	movne.w	r1, #4294967295
 80011a8:	f04f 30ff 	movne.w	r0, #4294967295
 80011ac:	f000 b96e 	b.w	800148c <__aeabi_idiv0>
 80011b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80011b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011b8:	f000 f806 	bl	80011c8 <__udivmoddi4>
 80011bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011c4:	b004      	add	sp, #16
 80011c6:	4770      	bx	lr

080011c8 <__udivmoddi4>:
 80011c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011cc:	9e08      	ldr	r6, [sp, #32]
 80011ce:	460d      	mov	r5, r1
 80011d0:	4604      	mov	r4, r0
 80011d2:	468e      	mov	lr, r1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f040 8083 	bne.w	80012e0 <__udivmoddi4+0x118>
 80011da:	428a      	cmp	r2, r1
 80011dc:	4617      	mov	r7, r2
 80011de:	d947      	bls.n	8001270 <__udivmoddi4+0xa8>
 80011e0:	fab2 f382 	clz	r3, r2
 80011e4:	b14b      	cbz	r3, 80011fa <__udivmoddi4+0x32>
 80011e6:	f1c3 0120 	rsb	r1, r3, #32
 80011ea:	fa05 fe03 	lsl.w	lr, r5, r3
 80011ee:	fa20 f101 	lsr.w	r1, r0, r1
 80011f2:	409f      	lsls	r7, r3
 80011f4:	ea41 0e0e 	orr.w	lr, r1, lr
 80011f8:	409c      	lsls	r4, r3
 80011fa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80011fe:	fbbe fcf8 	udiv	ip, lr, r8
 8001202:	fa1f f987 	uxth.w	r9, r7
 8001206:	fb08 e21c 	mls	r2, r8, ip, lr
 800120a:	fb0c f009 	mul.w	r0, ip, r9
 800120e:	0c21      	lsrs	r1, r4, #16
 8001210:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001214:	4290      	cmp	r0, r2
 8001216:	d90a      	bls.n	800122e <__udivmoddi4+0x66>
 8001218:	18ba      	adds	r2, r7, r2
 800121a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800121e:	f080 8118 	bcs.w	8001452 <__udivmoddi4+0x28a>
 8001222:	4290      	cmp	r0, r2
 8001224:	f240 8115 	bls.w	8001452 <__udivmoddi4+0x28a>
 8001228:	f1ac 0c02 	sub.w	ip, ip, #2
 800122c:	443a      	add	r2, r7
 800122e:	1a12      	subs	r2, r2, r0
 8001230:	fbb2 f0f8 	udiv	r0, r2, r8
 8001234:	fb08 2210 	mls	r2, r8, r0, r2
 8001238:	fb00 f109 	mul.w	r1, r0, r9
 800123c:	b2a4      	uxth	r4, r4
 800123e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001242:	42a1      	cmp	r1, r4
 8001244:	d909      	bls.n	800125a <__udivmoddi4+0x92>
 8001246:	193c      	adds	r4, r7, r4
 8001248:	f100 32ff 	add.w	r2, r0, #4294967295
 800124c:	f080 8103 	bcs.w	8001456 <__udivmoddi4+0x28e>
 8001250:	42a1      	cmp	r1, r4
 8001252:	f240 8100 	bls.w	8001456 <__udivmoddi4+0x28e>
 8001256:	3802      	subs	r0, #2
 8001258:	443c      	add	r4, r7
 800125a:	1a64      	subs	r4, r4, r1
 800125c:	2100      	movs	r1, #0
 800125e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001262:	b11e      	cbz	r6, 800126c <__udivmoddi4+0xa4>
 8001264:	2200      	movs	r2, #0
 8001266:	40dc      	lsrs	r4, r3
 8001268:	e9c6 4200 	strd	r4, r2, [r6]
 800126c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001270:	b902      	cbnz	r2, 8001274 <__udivmoddi4+0xac>
 8001272:	deff      	udf	#255	; 0xff
 8001274:	fab2 f382 	clz	r3, r2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d14f      	bne.n	800131c <__udivmoddi4+0x154>
 800127c:	1a8d      	subs	r5, r1, r2
 800127e:	2101      	movs	r1, #1
 8001280:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001284:	fa1f f882 	uxth.w	r8, r2
 8001288:	fbb5 fcfe 	udiv	ip, r5, lr
 800128c:	fb0e 551c 	mls	r5, lr, ip, r5
 8001290:	fb08 f00c 	mul.w	r0, r8, ip
 8001294:	0c22      	lsrs	r2, r4, #16
 8001296:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800129a:	42a8      	cmp	r0, r5
 800129c:	d907      	bls.n	80012ae <__udivmoddi4+0xe6>
 800129e:	197d      	adds	r5, r7, r5
 80012a0:	f10c 32ff 	add.w	r2, ip, #4294967295
 80012a4:	d202      	bcs.n	80012ac <__udivmoddi4+0xe4>
 80012a6:	42a8      	cmp	r0, r5
 80012a8:	f200 80e9 	bhi.w	800147e <__udivmoddi4+0x2b6>
 80012ac:	4694      	mov	ip, r2
 80012ae:	1a2d      	subs	r5, r5, r0
 80012b0:	fbb5 f0fe 	udiv	r0, r5, lr
 80012b4:	fb0e 5510 	mls	r5, lr, r0, r5
 80012b8:	fb08 f800 	mul.w	r8, r8, r0
 80012bc:	b2a4      	uxth	r4, r4
 80012be:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012c2:	45a0      	cmp	r8, r4
 80012c4:	d907      	bls.n	80012d6 <__udivmoddi4+0x10e>
 80012c6:	193c      	adds	r4, r7, r4
 80012c8:	f100 32ff 	add.w	r2, r0, #4294967295
 80012cc:	d202      	bcs.n	80012d4 <__udivmoddi4+0x10c>
 80012ce:	45a0      	cmp	r8, r4
 80012d0:	f200 80d9 	bhi.w	8001486 <__udivmoddi4+0x2be>
 80012d4:	4610      	mov	r0, r2
 80012d6:	eba4 0408 	sub.w	r4, r4, r8
 80012da:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012de:	e7c0      	b.n	8001262 <__udivmoddi4+0x9a>
 80012e0:	428b      	cmp	r3, r1
 80012e2:	d908      	bls.n	80012f6 <__udivmoddi4+0x12e>
 80012e4:	2e00      	cmp	r6, #0
 80012e6:	f000 80b1 	beq.w	800144c <__udivmoddi4+0x284>
 80012ea:	2100      	movs	r1, #0
 80012ec:	e9c6 0500 	strd	r0, r5, [r6]
 80012f0:	4608      	mov	r0, r1
 80012f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012f6:	fab3 f183 	clz	r1, r3
 80012fa:	2900      	cmp	r1, #0
 80012fc:	d14b      	bne.n	8001396 <__udivmoddi4+0x1ce>
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d302      	bcc.n	8001308 <__udivmoddi4+0x140>
 8001302:	4282      	cmp	r2, r0
 8001304:	f200 80b9 	bhi.w	800147a <__udivmoddi4+0x2b2>
 8001308:	1a84      	subs	r4, r0, r2
 800130a:	eb65 0303 	sbc.w	r3, r5, r3
 800130e:	2001      	movs	r0, #1
 8001310:	469e      	mov	lr, r3
 8001312:	2e00      	cmp	r6, #0
 8001314:	d0aa      	beq.n	800126c <__udivmoddi4+0xa4>
 8001316:	e9c6 4e00 	strd	r4, lr, [r6]
 800131a:	e7a7      	b.n	800126c <__udivmoddi4+0xa4>
 800131c:	409f      	lsls	r7, r3
 800131e:	f1c3 0220 	rsb	r2, r3, #32
 8001322:	40d1      	lsrs	r1, r2
 8001324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001328:	fbb1 f0fe 	udiv	r0, r1, lr
 800132c:	fa1f f887 	uxth.w	r8, r7
 8001330:	fb0e 1110 	mls	r1, lr, r0, r1
 8001334:	fa24 f202 	lsr.w	r2, r4, r2
 8001338:	409d      	lsls	r5, r3
 800133a:	fb00 fc08 	mul.w	ip, r0, r8
 800133e:	432a      	orrs	r2, r5
 8001340:	0c15      	lsrs	r5, r2, #16
 8001342:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001346:	45ac      	cmp	ip, r5
 8001348:	fa04 f403 	lsl.w	r4, r4, r3
 800134c:	d909      	bls.n	8001362 <__udivmoddi4+0x19a>
 800134e:	197d      	adds	r5, r7, r5
 8001350:	f100 31ff 	add.w	r1, r0, #4294967295
 8001354:	f080 808f 	bcs.w	8001476 <__udivmoddi4+0x2ae>
 8001358:	45ac      	cmp	ip, r5
 800135a:	f240 808c 	bls.w	8001476 <__udivmoddi4+0x2ae>
 800135e:	3802      	subs	r0, #2
 8001360:	443d      	add	r5, r7
 8001362:	eba5 050c 	sub.w	r5, r5, ip
 8001366:	fbb5 f1fe 	udiv	r1, r5, lr
 800136a:	fb0e 5c11 	mls	ip, lr, r1, r5
 800136e:	fb01 f908 	mul.w	r9, r1, r8
 8001372:	b295      	uxth	r5, r2
 8001374:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001378:	45a9      	cmp	r9, r5
 800137a:	d907      	bls.n	800138c <__udivmoddi4+0x1c4>
 800137c:	197d      	adds	r5, r7, r5
 800137e:	f101 32ff 	add.w	r2, r1, #4294967295
 8001382:	d274      	bcs.n	800146e <__udivmoddi4+0x2a6>
 8001384:	45a9      	cmp	r9, r5
 8001386:	d972      	bls.n	800146e <__udivmoddi4+0x2a6>
 8001388:	3902      	subs	r1, #2
 800138a:	443d      	add	r5, r7
 800138c:	eba5 0509 	sub.w	r5, r5, r9
 8001390:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001394:	e778      	b.n	8001288 <__udivmoddi4+0xc0>
 8001396:	f1c1 0720 	rsb	r7, r1, #32
 800139a:	408b      	lsls	r3, r1
 800139c:	fa22 fc07 	lsr.w	ip, r2, r7
 80013a0:	ea4c 0c03 	orr.w	ip, ip, r3
 80013a4:	fa25 f407 	lsr.w	r4, r5, r7
 80013a8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80013ac:	fbb4 f9fe 	udiv	r9, r4, lr
 80013b0:	fa1f f88c 	uxth.w	r8, ip
 80013b4:	fb0e 4419 	mls	r4, lr, r9, r4
 80013b8:	fa20 f307 	lsr.w	r3, r0, r7
 80013bc:	fb09 fa08 	mul.w	sl, r9, r8
 80013c0:	408d      	lsls	r5, r1
 80013c2:	431d      	orrs	r5, r3
 80013c4:	0c2b      	lsrs	r3, r5, #16
 80013c6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80013ca:	45a2      	cmp	sl, r4
 80013cc:	fa02 f201 	lsl.w	r2, r2, r1
 80013d0:	fa00 f301 	lsl.w	r3, r0, r1
 80013d4:	d909      	bls.n	80013ea <__udivmoddi4+0x222>
 80013d6:	eb1c 0404 	adds.w	r4, ip, r4
 80013da:	f109 30ff 	add.w	r0, r9, #4294967295
 80013de:	d248      	bcs.n	8001472 <__udivmoddi4+0x2aa>
 80013e0:	45a2      	cmp	sl, r4
 80013e2:	d946      	bls.n	8001472 <__udivmoddi4+0x2aa>
 80013e4:	f1a9 0902 	sub.w	r9, r9, #2
 80013e8:	4464      	add	r4, ip
 80013ea:	eba4 040a 	sub.w	r4, r4, sl
 80013ee:	fbb4 f0fe 	udiv	r0, r4, lr
 80013f2:	fb0e 4410 	mls	r4, lr, r0, r4
 80013f6:	fb00 fa08 	mul.w	sl, r0, r8
 80013fa:	b2ad      	uxth	r5, r5
 80013fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001400:	45a2      	cmp	sl, r4
 8001402:	d908      	bls.n	8001416 <__udivmoddi4+0x24e>
 8001404:	eb1c 0404 	adds.w	r4, ip, r4
 8001408:	f100 35ff 	add.w	r5, r0, #4294967295
 800140c:	d22d      	bcs.n	800146a <__udivmoddi4+0x2a2>
 800140e:	45a2      	cmp	sl, r4
 8001410:	d92b      	bls.n	800146a <__udivmoddi4+0x2a2>
 8001412:	3802      	subs	r0, #2
 8001414:	4464      	add	r4, ip
 8001416:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800141a:	fba0 8902 	umull	r8, r9, r0, r2
 800141e:	eba4 040a 	sub.w	r4, r4, sl
 8001422:	454c      	cmp	r4, r9
 8001424:	46c6      	mov	lr, r8
 8001426:	464d      	mov	r5, r9
 8001428:	d319      	bcc.n	800145e <__udivmoddi4+0x296>
 800142a:	d016      	beq.n	800145a <__udivmoddi4+0x292>
 800142c:	b15e      	cbz	r6, 8001446 <__udivmoddi4+0x27e>
 800142e:	ebb3 020e 	subs.w	r2, r3, lr
 8001432:	eb64 0405 	sbc.w	r4, r4, r5
 8001436:	fa04 f707 	lsl.w	r7, r4, r7
 800143a:	fa22 f301 	lsr.w	r3, r2, r1
 800143e:	431f      	orrs	r7, r3
 8001440:	40cc      	lsrs	r4, r1
 8001442:	e9c6 7400 	strd	r7, r4, [r6]
 8001446:	2100      	movs	r1, #0
 8001448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800144c:	4631      	mov	r1, r6
 800144e:	4630      	mov	r0, r6
 8001450:	e70c      	b.n	800126c <__udivmoddi4+0xa4>
 8001452:	468c      	mov	ip, r1
 8001454:	e6eb      	b.n	800122e <__udivmoddi4+0x66>
 8001456:	4610      	mov	r0, r2
 8001458:	e6ff      	b.n	800125a <__udivmoddi4+0x92>
 800145a:	4543      	cmp	r3, r8
 800145c:	d2e6      	bcs.n	800142c <__udivmoddi4+0x264>
 800145e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001462:	eb69 050c 	sbc.w	r5, r9, ip
 8001466:	3801      	subs	r0, #1
 8001468:	e7e0      	b.n	800142c <__udivmoddi4+0x264>
 800146a:	4628      	mov	r0, r5
 800146c:	e7d3      	b.n	8001416 <__udivmoddi4+0x24e>
 800146e:	4611      	mov	r1, r2
 8001470:	e78c      	b.n	800138c <__udivmoddi4+0x1c4>
 8001472:	4681      	mov	r9, r0
 8001474:	e7b9      	b.n	80013ea <__udivmoddi4+0x222>
 8001476:	4608      	mov	r0, r1
 8001478:	e773      	b.n	8001362 <__udivmoddi4+0x19a>
 800147a:	4608      	mov	r0, r1
 800147c:	e749      	b.n	8001312 <__udivmoddi4+0x14a>
 800147e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001482:	443d      	add	r5, r7
 8001484:	e713      	b.n	80012ae <__udivmoddi4+0xe6>
 8001486:	3802      	subs	r0, #2
 8001488:	443c      	add	r4, r7
 800148a:	e724      	b.n	80012d6 <__udivmoddi4+0x10e>

0800148c <__aeabi_idiv0>:
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop

08001490 <get_ADC_values>:
#include "main.h"
#include "ADC_driver.h"
#include "sensors.h"

float get_ADC_values(int pH_or_nutrients) // 1 = nutrients 0 = pH
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	//if(pH_or_nutrients == 0)
	//{
		HAL_ADC_Start(&hadc2);
 8001498:	4809      	ldr	r0, [pc, #36]	; (80014c0 <get_ADC_values+0x30>)
 800149a:	f002 f8bb 	bl	8003614 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 100);
 800149e:	2164      	movs	r1, #100	; 0x64
 80014a0:	4807      	ldr	r0, [pc, #28]	; (80014c0 <get_ADC_values+0x30>)
 80014a2:	f002 f967 	bl	8003774 <HAL_ADC_PollForConversion>
		return HAL_ADC_GetValue(&hadc2);//Read value
 80014a6:	4806      	ldr	r0, [pc, #24]	; (80014c0 <get_ADC_values+0x30>)
 80014a8:	f002 f9e8 	bl	800387c <HAL_ADC_GetValue>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fc0e 	bl	8000cd0 <__aeabi_ui2f>
 80014b4:	4603      	mov	r3, r0
	{
		HAL_ADC_Start(&hadc3);
		HAL_ADC_PollForConversion(&hadc3, 100);
		return HAL_ADC_GetValue(&hadc);//Read value
	}*/
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000128 	.word	0x20000128

080014c4 <getTime>:
#include "RTC_driver.h"
#include "light_driver.h"


void getTime(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime,RTC_FORMAT_BIN);
 80014c8:	2200      	movs	r2, #0
 80014ca:	4905      	ldr	r1, [pc, #20]	; (80014e0 <getTime+0x1c>)
 80014cc:	4805      	ldr	r0, [pc, #20]	; (80014e4 <getTime+0x20>)
 80014ce:	f003 fd03 	bl	8004ed8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate,RTC_FORMAT_BIN);
 80014d2:	2200      	movs	r2, #0
 80014d4:	4904      	ldr	r1, [pc, #16]	; (80014e8 <getTime+0x24>)
 80014d6:	4803      	ldr	r0, [pc, #12]	; (80014e4 <getTime+0x20>)
 80014d8:	f003 fdf0 	bl	80050bc <HAL_RTC_GetDate>
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000088 	.word	0x20000088
 80014e4:	200001b8 	.word	0x200001b8
 80014e8:	20000094 	.word	0x20000094

080014ec <setTimeDate>:

void setTimeDate(uint8_t month, uint8_t day, uint8_t year, uint8_t hours, uint8_t min, uint8_t sec)
{
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4604      	mov	r4, r0
 80014f4:	4608      	mov	r0, r1
 80014f6:	4611      	mov	r1, r2
 80014f8:	461a      	mov	r2, r3
 80014fa:	4623      	mov	r3, r4
 80014fc:	71fb      	strb	r3, [r7, #7]
 80014fe:	4603      	mov	r3, r0
 8001500:	71bb      	strb	r3, [r7, #6]
 8001502:	460b      	mov	r3, r1
 8001504:	717b      	strb	r3, [r7, #5]
 8001506:	4613      	mov	r3, r2
 8001508:	713b      	strb	r3, [r7, #4]
	sTime.Hours = hours;
 800150a:	4a19      	ldr	r2, [pc, #100]	; (8001570 <setTimeDate+0x84>)
 800150c:	793b      	ldrb	r3, [r7, #4]
 800150e:	7013      	strb	r3, [r2, #0]
	sTime.Minutes = min;
 8001510:	4a17      	ldr	r2, [pc, #92]	; (8001570 <setTimeDate+0x84>)
 8001512:	7e3b      	ldrb	r3, [r7, #24]
 8001514:	7053      	strb	r3, [r2, #1]
	sTime.Seconds = sec;
 8001516:	4a16      	ldr	r2, [pc, #88]	; (8001570 <setTimeDate+0x84>)
 8001518:	7f3b      	ldrb	r3, [r7, #28]
 800151a:	7093      	strb	r3, [r2, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <setTimeDate+0x84>)
 800151e:	2200      	movs	r2, #0
 8001520:	605a      	str	r2, [r3, #4]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <setTimeDate+0x84>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
	if(HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)Error_Handler();
 8001528:	2201      	movs	r2, #1
 800152a:	4911      	ldr	r1, [pc, #68]	; (8001570 <setTimeDate+0x84>)
 800152c:	4811      	ldr	r0, [pc, #68]	; (8001574 <setTimeDate+0x88>)
 800152e:	f003 fc1d 	bl	8004d6c <HAL_RTC_SetTime>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <setTimeDate+0x50>
 8001538:	f000 fe28 	bl	800218c <Error_Handler>

	sDate.WeekDay = 0x01;
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <setTimeDate+0x8c>)
 800153e:	2201      	movs	r2, #1
 8001540:	701a      	strb	r2, [r3, #0]
	sDate.Month = month;
 8001542:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <setTimeDate+0x8c>)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	7053      	strb	r3, [r2, #1]
	sDate.Date = day;
 8001548:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <setTimeDate+0x8c>)
 800154a:	79bb      	ldrb	r3, [r7, #6]
 800154c:	7093      	strb	r3, [r2, #2]
	sDate.Year = year;
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <setTimeDate+0x8c>)
 8001550:	797b      	ldrb	r3, [r7, #5]
 8001552:	70d3      	strb	r3, [r2, #3]
	if(HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)Error_Handler();
 8001554:	2201      	movs	r2, #1
 8001556:	4908      	ldr	r1, [pc, #32]	; (8001578 <setTimeDate+0x8c>)
 8001558:	4806      	ldr	r0, [pc, #24]	; (8001574 <setTimeDate+0x88>)
 800155a:	f003 fd0f 	bl	8004f7c <HAL_RTC_SetDate>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <setTimeDate+0x7c>
 8001564:	f000 fe12 	bl	800218c <Error_Handler>
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	bd90      	pop	{r4, r7, pc}
 8001570:	20000088 	.word	0x20000088
 8001574:	200001b8 	.word	0x200001b8
 8001578:	20000094 	.word	0x20000094

0800157c <getMedianNum>:
#include "TDS_driver.h"
#include "main.h"
#include "sensors.h"

int getMedianNum(int bArray[], int iFilterLen)
{
 800157c:	b4b0      	push	{r4, r5, r7}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	466b      	mov	r3, sp
 8001588:	461d      	mov	r5, r3
      int bTab[iFilterLen];
 800158a:	683c      	ldr	r4, [r7, #0]
 800158c:	1e63      	subs	r3, r4, #1
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	4623      	mov	r3, r4
 8001592:	4618      	mov	r0, r3
 8001594:	f04f 0100 	mov.w	r1, #0
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	014b      	lsls	r3, r1, #5
 80015a2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015a6:	0142      	lsls	r2, r0, #5
 80015a8:	4623      	mov	r3, r4
 80015aa:	4618      	mov	r0, r3
 80015ac:	f04f 0100 	mov.w	r1, #0
 80015b0:	f04f 0200 	mov.w	r2, #0
 80015b4:	f04f 0300 	mov.w	r3, #0
 80015b8:	014b      	lsls	r3, r1, #5
 80015ba:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015be:	0142      	lsls	r2, r0, #5
 80015c0:	4623      	mov	r3, r4
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	3307      	adds	r3, #7
 80015c6:	08db      	lsrs	r3, r3, #3
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	ebad 0d03 	sub.w	sp, sp, r3
 80015ce:	466b      	mov	r3, sp
 80015d0:	3303      	adds	r3, #3
 80015d2:	089b      	lsrs	r3, r3, #2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	60bb      	str	r3, [r7, #8]
      for (char i = 0; i<iFilterLen; i++)
 80015d8:	2300      	movs	r3, #0
 80015da:	74fb      	strb	r3, [r7, #19]
 80015dc:	e00b      	b.n	80015f6 <getMedianNum+0x7a>
      bTab[i] = bArray[i];
 80015de:	7cfb      	ldrb	r3, [r7, #19]
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	7cfa      	ldrb	r2, [r7, #19]
 80015e8:	6819      	ldr	r1, [r3, #0]
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (char i = 0; i<iFilterLen; i++)
 80015f0:	7cfb      	ldrb	r3, [r7, #19]
 80015f2:	3301      	adds	r3, #1
 80015f4:	74fb      	strb	r3, [r7, #19]
 80015f6:	7cfb      	ldrb	r3, [r7, #19]
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	dcef      	bgt.n	80015de <getMedianNum+0x62>
      int i, j, bTemp;
      for (j = 0; j < iFilterLen - 1; j++)
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	e02e      	b.n	8001662 <getMedianNum+0xe6>
      {
      for (i = 0; i < iFilterLen - j - 1; i++)
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	e021      	b.n	800164e <getMedianNum+0xd2>
          {
        if (bTab[i] > bTab[i + 1])
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	1c59      	adds	r1, r3, #1
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800161c:	429a      	cmp	r2, r3
 800161e:	dd13      	ble.n	8001648 <getMedianNum+0xcc>
            {
        bTemp = bTab[i];
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001628:	61fb      	str	r3, [r7, #28]
            bTab[i] = bTab[i + 1];
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        bTab[i + 1] = bTemp;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	69f9      	ldr	r1, [r7, #28]
 8001644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (i = 0; i < iFilterLen - j - 1; i++)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	3301      	adds	r3, #1
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	3b01      	subs	r3, #1
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	429a      	cmp	r2, r3
 800165a:	dbd6      	blt.n	800160a <getMedianNum+0x8e>
      for (j = 0; j < iFilterLen - 1; j++)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	3301      	adds	r3, #1
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	3b01      	subs	r3, #1
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	429a      	cmp	r2, r3
 800166a:	dbcb      	blt.n	8001604 <getMedianNum+0x88>
         }
      }
      }
      if ((iFilterLen & 1) > 0)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	dd0a      	ble.n	800168c <getMedianNum+0x110>
    bTemp = bTab[(iFilterLen - 1) / 2];
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	3b01      	subs	r3, #1
 800167a:	0fda      	lsrs	r2, r3, #31
 800167c:	4413      	add	r3, r2
 800167e:	105b      	asrs	r3, r3, #1
 8001680:	461a      	mov	r2, r3
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001688:	61fb      	str	r3, [r7, #28]
 800168a:	e014      	b.n	80016b6 <getMedianNum+0x13a>
      else
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	0fda      	lsrs	r2, r3, #31
 8001690:	4413      	add	r3, r2
 8001692:	105b      	asrs	r3, r3, #1
 8001694:	461a      	mov	r2, r3
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	0fd9      	lsrs	r1, r3, #31
 80016a0:	440b      	add	r3, r1
 80016a2:	105b      	asrs	r3, r3, #1
 80016a4:	1e59      	subs	r1, r3, #1
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016ac:	4413      	add	r3, r2
 80016ae:	0fda      	lsrs	r2, r3, #31
 80016b0:	4413      	add	r3, r2
 80016b2:	105b      	asrs	r3, r3, #1
 80016b4:	61fb      	str	r3, [r7, #28]
      return bTemp;
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	46ad      	mov	sp, r5
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bcb0      	pop	{r4, r5, r7}
 80016c2:	4770      	bx	lr

080016c4 <fanOn>:

float system_fan_sp = 5.5;
float plant_fan_sp = 3.5;
float heat_cool_fan_sp = 3.5; // set default fan speed values
void fanOn()
{
 80016c4:	b598      	push	{r3, r4, r7, lr}
 80016c6:	af00      	add	r7, sp, #0
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);	// start heater cooler fan control
 80016c8:	2100      	movs	r1, #0
 80016ca:	482f      	ldr	r0, [pc, #188]	; (8001788 <fanOn+0xc4>)
 80016cc:	f004 f87a 	bl	80057c4 <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;							// sets the PWM frequency of 25Mhz
 80016d0:	4b2e      	ldr	r3, [pc, #184]	; (800178c <fanOn+0xc8>)
 80016d2:	f640 323f 	movw	r2, #2879	; 0xb3f
 80016d6:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM1->CCR1 = (TIM1->ARR)/heat_cool_fan_sp;	// sets the fan speed
 80016d8:	4b2c      	ldr	r3, [pc, #176]	; (800178c <fanOn+0xc8>)
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff faf7 	bl	8000cd0 <__aeabi_ui2f>
 80016e2:	4602      	mov	r2, r0
 80016e4:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <fanOn+0xcc>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	4610      	mov	r0, r2
 80016ec:	f7ff fbfc 	bl	8000ee8 <__aeabi_fdiv>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4c26      	ldr	r4, [pc, #152]	; (800178c <fanOn+0xc8>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fd2f 	bl	8001158 <__aeabi_f2uiz>
 80016fa:	4603      	mov	r3, r0
 80016fc:	6363      	str	r3, [r4, #52]	; 0x34
   TIM1->CNT = 20500;
 80016fe:	4b23      	ldr	r3, [pc, #140]	; (800178c <fanOn+0xc8>)
 8001700:	f245 0214 	movw	r2, #20500	; 0x5014
 8001704:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);		// start system fan control
 8001706:	2108      	movs	r1, #8
 8001708:	481f      	ldr	r0, [pc, #124]	; (8001788 <fanOn+0xc4>)
 800170a:	f004 f85b 	bl	80057c4 <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;							// sets the PWM frequency of 25Mhz
 800170e:	4b1f      	ldr	r3, [pc, #124]	; (800178c <fanOn+0xc8>)
 8001710:	f640 323f 	movw	r2, #2879	; 0xb3f
 8001714:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM1->CCR3 = (TIM1->ARR)/system_fan_sp;		// sets the fan speed
 8001716:	4b1d      	ldr	r3, [pc, #116]	; (800178c <fanOn+0xc8>)
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fad8 	bl	8000cd0 <__aeabi_ui2f>
 8001720:	4602      	mov	r2, r0
 8001722:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <fanOn+0xd0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4619      	mov	r1, r3
 8001728:	4610      	mov	r0, r2
 800172a:	f7ff fbdd 	bl	8000ee8 <__aeabi_fdiv>
 800172e:	4603      	mov	r3, r0
 8001730:	4c16      	ldr	r4, [pc, #88]	; (800178c <fanOn+0xc8>)
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fd10 	bl	8001158 <__aeabi_f2uiz>
 8001738:	4603      	mov	r3, r0
 800173a:	63e3      	str	r3, [r4, #60]	; 0x3c
   TIM1->CNT = 20500;
 800173c:	4b13      	ldr	r3, [pc, #76]	; (800178c <fanOn+0xc8>)
 800173e:	f245 0214 	movw	r2, #20500	; 0x5014
 8001742:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);	// start plant fan control
 8001744:	2100      	movs	r1, #0
 8001746:	4814      	ldr	r0, [pc, #80]	; (8001798 <fanOn+0xd4>)
 8001748:	f004 f83c 	bl	80057c4 <HAL_TIM_PWM_Start>
   TIM10->ARR = 2879;							// sets the PWM frequency of 25Mhz
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <fanOn+0xd8>)
 800174e:	f640 323f 	movw	r2, #2879	; 0xb3f
 8001752:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM10->CCR1 = (TIM10->ARR)/plant_fan_sp;		// sets the fan speed
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <fanOn+0xd8>)
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fab9 	bl	8000cd0 <__aeabi_ui2f>
 800175e:	4602      	mov	r2, r0
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <fanOn+0xdc>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	4610      	mov	r0, r2
 8001768:	f7ff fbbe 	bl	8000ee8 <__aeabi_fdiv>
 800176c:	4603      	mov	r3, r0
 800176e:	4c0b      	ldr	r4, [pc, #44]	; (800179c <fanOn+0xd8>)
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fcf1 	bl	8001158 <__aeabi_f2uiz>
 8001776:	4603      	mov	r3, r0
 8001778:	6363      	str	r3, [r4, #52]	; 0x34
   TIM10->CNT = 20500;
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <fanOn+0xd8>)
 800177c:	f245 0214 	movw	r2, #20500	; 0x5014
 8001780:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001782:	bf00      	nop
 8001784:	bd98      	pop	{r3, r4, r7, pc}
 8001786:	bf00      	nop
 8001788:	200001ec 	.word	0x200001ec
 800178c:	40010000 	.word	0x40010000
 8001790:	20000008 	.word	0x20000008
 8001794:	20000000 	.word	0x20000000
 8001798:	20000170 	.word	0x20000170
 800179c:	40014400 	.word	0x40014400
 80017a0:	20000004 	.word	0x20000004

080017a4 <systemControl>:

#include "hydro_control_loop.h"
double pH_up_dose = 0, pH_down_dose = 0, nutrient_dose = 0;
float nutrient_set_point = 500.0, pH_set_point = 6.5, water_temp_set_point = 20.0, water_temp = 0, TDS = 0, pH = 0;
void systemControl()
{
 80017a4:	b5b0      	push	{r4, r5, r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af02      	add	r7, sp, #8
	int runOnce = 1;
 80017aa:	2301      	movs	r3, #1
 80017ac:	607b      	str	r3, [r7, #4]
	setTimeDate(0x01, 0x08, 0x22, 0x19, 0x09, 0x00); // MUST BE HEX BUT NOT CONVERTED i,e,(the 22 day of the month is represented as 0x22 NOT 0x16) (month, day, year, hours, min, sec)
 80017ae:	2300      	movs	r3, #0
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	2309      	movs	r3, #9
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2319      	movs	r3, #25
 80017b8:	2222      	movs	r2, #34	; 0x22
 80017ba:	2108      	movs	r1, #8
 80017bc:	2001      	movs	r0, #1
 80017be:	f7ff fe95 	bl	80014ec <setTimeDate>
	setLightCyle(19, 9, 19, 10); 			   		 // MUST BE INT (start hour, start min, start sec, end hour, end min)
 80017c2:	230a      	movs	r3, #10
 80017c4:	2213      	movs	r2, #19
 80017c6:	2109      	movs	r1, #9
 80017c8:	2013      	movs	r0, #19
 80017ca:	f000 f893 	bl	80018f4 <setLightCyle>
	fanOn();
 80017ce:	f7ff ff79 	bl	80016c4 <fanOn>
	while (1)
	{
		checkLightCycle();						    // check if its time to turn lights on or off
 80017d2:	f000 f8b3 	bl	800193c <checkLightCycle>

		water_temp	  = readWaterTemp();
 80017d6:	f001 f997 	bl	8002b08 <readWaterTemp>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff f96f 	bl	8000ac4 <__aeabi_d2f>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4a2a      	ldr	r2, [pc, #168]	; (8001894 <systemControl+0xf0>)
 80017ea:	6013      	str	r3, [r2, #0]
		TDS 		  = readWaterTDS();
 80017ec:	f001 f9f8 	bl	8002be0 <readWaterTDS>
 80017f0:	4603      	mov	r3, r0
 80017f2:	4a29      	ldr	r2, [pc, #164]	; (8001898 <systemControl+0xf4>)
 80017f4:	6013      	str	r3, [r2, #0]
		pH 		 	  = readPH();
 80017f6:	f001 fb27 	bl	8002e48 <readPH>
 80017fa:	4603      	mov	r3, r0
 80017fc:	4a27      	ldr	r2, [pc, #156]	; (800189c <systemControl+0xf8>)
 80017fe:	6013      	str	r3, [r2, #0]

   		pH_up_dose 	  = calcPhUpDose(TDS,pH);
 8001800:	4b25      	ldr	r3, [pc, #148]	; (8001898 <systemControl+0xf4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a25      	ldr	r2, [pc, #148]	; (800189c <systemControl+0xf8>)
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fcf0 	bl	80021f0 <calcPhUpDose>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4922      	ldr	r1, [pc, #136]	; (80018a0 <systemControl+0xfc>)
 8001816:	e9c1 2300 	strd	r2, r3, [r1]
		pH_down_dose  = calcPhDownDose(TDS,pH);
 800181a:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <systemControl+0xf4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a1f      	ldr	r2, [pc, #124]	; (800189c <systemControl+0xf8>)
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f000 fcf3 	bl	8002210 <calcPhDownDose>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	491d      	ldr	r1, [pc, #116]	; (80018a4 <systemControl+0x100>)
 8001830:	e9c1 2300 	strd	r2, r3, [r1]
 		nutrient_dose = calcNutrientDose(TDS,pH);
 8001834:	4b18      	ldr	r3, [pc, #96]	; (8001898 <systemControl+0xf4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a18      	ldr	r2, [pc, #96]	; (800189c <systemControl+0xf8>)
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f000 fcf6 	bl	8002230 <calcNutrientDose>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4917      	ldr	r1, [pc, #92]	; (80018a8 <systemControl+0x104>)
 800184a:	e9c1 2300 	strd	r2, r3, [r1]



		if(runOnce != 0)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0be      	beq.n	80017d2 <systemControl+0x2e>
		{
			doseWater(pH_down_dose, pH_up_dose, nutrient_dose);		// step the pump motors (pHDown,pHup,nutrient_dose)
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <systemControl+0x100>)
 8001856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f7ff f931 	bl	8000ac4 <__aeabi_d2f>
 8001862:	4604      	mov	r4, r0
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <systemControl+0xfc>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f7ff f929 	bl	8000ac4 <__aeabi_d2f>
 8001872:	4605      	mov	r5, r0
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <systemControl+0x104>)
 8001876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff f921 	bl	8000ac4 <__aeabi_d2f>
 8001882:	4603      	mov	r3, r0
 8001884:	461a      	mov	r2, r3
 8001886:	4629      	mov	r1, r5
 8001888:	4620      	mov	r0, r4
 800188a:	f000 fc84 	bl	8002196 <doseWater>
			runOnce = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
		checkLightCycle();						    // check if its time to turn lights on or off
 8001892:	e79e      	b.n	80017d2 <systemControl+0x2e>
 8001894:	20000060 	.word	0x20000060
 8001898:	20000064 	.word	0x20000064
 800189c:	20000068 	.word	0x20000068
 80018a0:	20000048 	.word	0x20000048
 80018a4:	20000050 	.word	0x20000050
 80018a8:	20000058 	.word	0x20000058

080018ac <lightOn>:
RTC_TimeTypeDef light_off_time = {0};
RTC_DateTypeDef light_off_date = {0};
int day_or_night = 0; // 0=night 1=day

void lightOn()
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,grow_light_Pin,GPIO_PIN_SET);		// turn on grow light
 80018b0:	2201      	movs	r2, #1
 80018b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018b6:	4804      	ldr	r0, [pc, #16]	; (80018c8 <lightOn+0x1c>)
 80018b8:	f002 fcab 	bl	8004212 <HAL_GPIO_WritePin>
	day_or_night = 1;											// it just turned to daytime so set day status
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <lightOn+0x20>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000
 80018cc:	20000084 	.word	0x20000084

080018d0 <lightOff>:

void lightOff()
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,grow_light_Pin,GPIO_PIN_RESET);		// turn off grow light
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018da:	4804      	ldr	r0, [pc, #16]	; (80018ec <lightOff+0x1c>)
 80018dc:	f002 fc99 	bl	8004212 <HAL_GPIO_WritePin>
	day_or_night = 0;											// it just turned to night time so set night status
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <lightOff+0x20>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000
 80018f0:	20000084 	.word	0x20000084

080018f4 <setLightCyle>:

void setLightCyle(uint8_t start_hour, uint8_t start_min, uint8_t end_hours, uint8_t end_min)
{
 80018f4:	b490      	push	{r4, r7}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4604      	mov	r4, r0
 80018fc:	4608      	mov	r0, r1
 80018fe:	4611      	mov	r1, r2
 8001900:	461a      	mov	r2, r3
 8001902:	4623      	mov	r3, r4
 8001904:	71fb      	strb	r3, [r7, #7]
 8001906:	4603      	mov	r3, r0
 8001908:	71bb      	strb	r3, [r7, #6]
 800190a:	460b      	mov	r3, r1
 800190c:	717b      	strb	r3, [r7, #5]
 800190e:	4613      	mov	r3, r2
 8001910:	713b      	strb	r3, [r7, #4]
	light_on_time.Hours = start_hour;
 8001912:	4a08      	ldr	r2, [pc, #32]	; (8001934 <setLightCyle+0x40>)
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	7013      	strb	r3, [r2, #0]
	light_on_time.Minutes = start_min;
 8001918:	4a06      	ldr	r2, [pc, #24]	; (8001934 <setLightCyle+0x40>)
 800191a:	79bb      	ldrb	r3, [r7, #6]
 800191c:	7053      	strb	r3, [r2, #1]

	light_off_time.Hours = end_hours;
 800191e:	4a06      	ldr	r2, [pc, #24]	; (8001938 <setLightCyle+0x44>)
 8001920:	797b      	ldrb	r3, [r7, #5]
 8001922:	7013      	strb	r3, [r2, #0]
	light_off_time.Minutes = end_min;
 8001924:	4a04      	ldr	r2, [pc, #16]	; (8001938 <setLightCyle+0x44>)
 8001926:	793b      	ldrb	r3, [r7, #4]
 8001928:	7053      	strb	r3, [r2, #1]
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bc90      	pop	{r4, r7}
 8001932:	4770      	bx	lr
 8001934:	2000006c 	.word	0x2000006c
 8001938:	20000078 	.word	0x20000078

0800193c <checkLightCycle>:

void checkLightCycle() // checks to see if its time to turn lights on or off
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
	getTime();		   // get the current system time sets global variables sTime and sDate in RTC_driver.c
 8001940:	f7ff fdc0 	bl	80014c4 <getTime>
	if((sTime.Hours == light_on_time.Hours) && (sTime.Minutes == light_on_time.Minutes) && day_or_night == 0)        lightOn();
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <checkLightCycle+0x58>)
 8001946:	781a      	ldrb	r2, [r3, #0]
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <checkLightCycle+0x5c>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d10c      	bne.n	800196a <checkLightCycle+0x2e>
 8001950:	4b10      	ldr	r3, [pc, #64]	; (8001994 <checkLightCycle+0x58>)
 8001952:	785a      	ldrb	r2, [r3, #1]
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <checkLightCycle+0x5c>)
 8001956:	785b      	ldrb	r3, [r3, #1]
 8001958:	429a      	cmp	r2, r3
 800195a:	d106      	bne.n	800196a <checkLightCycle+0x2e>
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <checkLightCycle+0x60>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <checkLightCycle+0x2e>
 8001964:	f7ff ffa2 	bl	80018ac <lightOn>
	else if((sTime.Hours == light_off_time.Hours) && (sTime.Minutes == light_off_time.Minutes) && day_or_night == 1) lightOff();
}
 8001968:	e011      	b.n	800198e <checkLightCycle+0x52>
	else if((sTime.Hours == light_off_time.Hours) && (sTime.Minutes == light_off_time.Minutes) && day_or_night == 1) lightOff();
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <checkLightCycle+0x58>)
 800196c:	781a      	ldrb	r2, [r3, #0]
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <checkLightCycle+0x64>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d10b      	bne.n	800198e <checkLightCycle+0x52>
 8001976:	4b07      	ldr	r3, [pc, #28]	; (8001994 <checkLightCycle+0x58>)
 8001978:	785a      	ldrb	r2, [r3, #1]
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <checkLightCycle+0x64>)
 800197c:	785b      	ldrb	r3, [r3, #1]
 800197e:	429a      	cmp	r2, r3
 8001980:	d105      	bne.n	800198e <checkLightCycle+0x52>
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <checkLightCycle+0x60>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <checkLightCycle+0x52>
 800198a:	f7ff ffa1 	bl	80018d0 <lightOff>
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000088 	.word	0x20000088
 8001998:	2000006c 	.word	0x2000006c
 800199c:	20000084 	.word	0x20000084
 80019a0:	20000078 	.word	0x20000078

080019a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019aa:	f001 fd5d 	bl	8003468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ae:	f000 f827 	bl	8001a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b2:	f000 fb47 	bl	8002044 <MX_GPIO_Init>
  MX_ADC2_Init();
 80019b6:	f000 f883 	bl	8001ac0 <MX_ADC2_Init>
  MX_TIM1_Init();
 80019ba:	f000 f975 	bl	8001ca8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80019be:	f000 fa1f 	bl	8001e00 <MX_TIM2_Init>
  MX_TIM4_Init();
 80019c2:	f000 fa69 	bl	8001e98 <MX_TIM4_Init>
  MX_TIM10_Init();
 80019c6:	f000 fab5 	bl	8001f34 <MX_TIM10_Init>
  MX_RTC_Init();
 80019ca:	f000 f8db 	bl	8001b84 <MX_RTC_Init>
  MX_TIM12_Init();
 80019ce:	f000 faff 	bl	8001fd0 <MX_TIM12_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019e0:	2310      	movs	r3, #16
 80019e2:	607b      	str	r3, [r7, #4]


  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e4:	2303      	movs	r3, #3
 80019e6:	60bb      	str	r3, [r7, #8]


  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]


  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	4619      	mov	r1, r3
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <main+0x58>)
 80019f2:	f002 fa59 	bl	8003ea8 <HAL_GPIO_Init>
  while (1)
  {
	  systemControl();
 80019f6:	f7ff fed5 	bl	80017a4 <systemControl>
 80019fa:	e7fc      	b.n	80019f6 <main+0x52>
 80019fc:	40020000 	.word	0x40020000

08001a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b096      	sub	sp, #88	; 0x58
 8001a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a0a:	2230      	movs	r2, #48	; 0x30
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f004 fd16 	bl	8006440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a24:	463b      	mov	r3, r7
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001a32:	230a      	movs	r3, #10
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a36:	2301      	movs	r3, #1
 8001a38:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a3a:	2310      	movs	r3, #16
 8001a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a42:	2302      	movs	r3, #2
 8001a44:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a46:	2300      	movs	r3, #0
 8001a48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a4a:	2308      	movs	r3, #8
 8001a4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001a4e:	23d8      	movs	r3, #216	; 0xd8
 8001a50:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001a52:	2306      	movs	r3, #6
 8001a54:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a56:	2304      	movs	r3, #4
 8001a58:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f002 fc08 	bl	8004274 <HAL_RCC_OscConfig>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001a6a:	f000 fb8f 	bl	800218c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a6e:	230f      	movs	r3, #15
 8001a70:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a7a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a7e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	2102      	movs	r1, #2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 fe41 	bl	8004714 <HAL_RCC_ClockConfig>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a98:	f000 fb78 	bl	800218c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aa4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f002 ffdf 	bl	8004a6c <HAL_RCCEx_PeriphCLKConfig>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001ab4:	f000 fb6a 	bl	800218c <Error_Handler>
  }
}
 8001ab8:	bf00      	nop
 8001aba:	3758      	adds	r7, #88	; 0x58
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC2_Init 1 */
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001ad2:	4b29      	ldr	r3, [pc, #164]	; (8001b78 <MX_ADC2_Init+0xb8>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	761a      	strb	r2, [r3, #24]
  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001ad8:	4b27      	ldr	r3, [pc, #156]	; (8001b78 <MX_ADC2_Init+0xb8>)
 8001ada:	4a28      	ldr	r2, [pc, #160]	; (8001b7c <MX_ADC2_Init+0xbc>)
 8001adc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ade:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <MX_ADC2_Init+0xb8>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001ae4:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <MX_ADC2_Init+0xb8>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001aea:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <MX_ADC2_Init+0xb8>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <MX_ADC2_Init+0xb8>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001af6:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <MX_ADC2_Init+0xb8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001afe:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <MX_ADC2_Init+0xb8>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b04:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <MX_ADC2_Init+0xb8>)
 8001b06:	4a1e      	ldr	r2, [pc, #120]	; (8001b80 <MX_ADC2_Init+0xc0>)
 8001b08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <MX_ADC2_Init+0xb8>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8001b10:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <MX_ADC2_Init+0xb8>)
 8001b12:	2202      	movs	r2, #2
 8001b14:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <MX_ADC2_Init+0xb8>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <MX_ADC2_Init+0xb8>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001b24:	4814      	ldr	r0, [pc, #80]	; (8001b78 <MX_ADC2_Init+0xb8>)
 8001b26:	f001 fd31 	bl	800358c <HAL_ADC_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8001b30:	f000 fb2c 	bl	800218c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b34:	2304      	movs	r3, #4
 8001b36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b40:	463b      	mov	r3, r7
 8001b42:	4619      	mov	r1, r3
 8001b44:	480c      	ldr	r0, [pc, #48]	; (8001b78 <MX_ADC2_Init+0xb8>)
 8001b46:	f001 fea5 	bl	8003894 <HAL_ADC_ConfigChannel>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8001b50:	f000 fb1c 	bl	800218c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001b54:	2305      	movs	r3, #5
 8001b56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4805      	ldr	r0, [pc, #20]	; (8001b78 <MX_ADC2_Init+0xb8>)
 8001b62:	f001 fe97 	bl	8003894 <HAL_ADC_ConfigChannel>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8001b6c:	f000 fb0e 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000128 	.word	0x20000128
 8001b7c:	40012100 	.word	0x40012100
 8001b80:	0f000001 	.word	0x0f000001

08001b84 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08c      	sub	sp, #48	; 0x30
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
 8001ba8:	615a      	str	r2, [r3, #20]
 8001baa:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bac:	4b3c      	ldr	r3, [pc, #240]	; (8001ca0 <MX_RTC_Init+0x11c>)
 8001bae:	4a3d      	ldr	r2, [pc, #244]	; (8001ca4 <MX_RTC_Init+0x120>)
 8001bb0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bb2:	4b3b      	ldr	r3, [pc, #236]	; (8001ca0 <MX_RTC_Init+0x11c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001bb8:	4b39      	ldr	r3, [pc, #228]	; (8001ca0 <MX_RTC_Init+0x11c>)
 8001bba:	227f      	movs	r2, #127	; 0x7f
 8001bbc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001bbe:	4b38      	ldr	r3, [pc, #224]	; (8001ca0 <MX_RTC_Init+0x11c>)
 8001bc0:	22ff      	movs	r2, #255	; 0xff
 8001bc2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bc4:	4b36      	ldr	r3, [pc, #216]	; (8001ca0 <MX_RTC_Init+0x11c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bca:	4b35      	ldr	r3, [pc, #212]	; (8001ca0 <MX_RTC_Init+0x11c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bd0:	4b33      	ldr	r3, [pc, #204]	; (8001ca0 <MX_RTC_Init+0x11c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bd6:	4832      	ldr	r0, [pc, #200]	; (8001ca0 <MX_RTC_Init+0x11c>)
 8001bd8:	f003 f83e 	bl	8004c58 <HAL_RTC_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001be2:	f000 fad3 	bl	800218c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sTime.Minutes = 0x0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sTime.Seconds = 0x0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c04:	2201      	movs	r2, #1
 8001c06:	4619      	mov	r1, r3
 8001c08:	4825      	ldr	r0, [pc, #148]	; (8001ca0 <MX_RTC_Init+0x11c>)
 8001c0a:	f003 f8af 	bl	8004d6c <HAL_RTC_SetTime>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001c14:	f000 faba 	bl	800218c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_JANUARY;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sDate.Date = 0x1;
 8001c24:	2301      	movs	r3, #1
 8001c26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sDate.Year = 0x0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c30:	f107 0320 	add.w	r3, r7, #32
 8001c34:	2201      	movs	r2, #1
 8001c36:	4619      	mov	r1, r3
 8001c38:	4819      	ldr	r0, [pc, #100]	; (8001ca0 <MX_RTC_Init+0x11c>)
 8001c3a:	f003 f99f 	bl	8004f7c <HAL_RTC_SetDate>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001c44:	f000 faa2 	bl	800218c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001c64:	2301      	movs	r3, #1
 8001c66:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c6c:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	2201      	movs	r2, #1
 8001c72:	4619      	mov	r1, r3
 8001c74:	480a      	ldr	r0, [pc, #40]	; (8001ca0 <MX_RTC_Init+0x11c>)
 8001c76:	f003 fa70 	bl	800515a <HAL_RTC_SetAlarm>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_RTC_Init+0x100>
  {
    Error_Handler();
 8001c80:	f000 fa84 	bl	800218c <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001c84:	2200      	movs	r2, #0
 8001c86:	2100      	movs	r1, #0
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <MX_RTC_Init+0x11c>)
 8001c8a:	f003 fbfa 	bl	8005482 <HAL_RTCEx_SetWakeUpTimer>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_RTC_Init+0x114>
  {
    Error_Handler();
 8001c94:	f000 fa7a 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	3730      	adds	r7, #48	; 0x30
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200001b8 	.word	0x200001b8
 8001ca4:	40002800 	.word	0x40002800

08001ca8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b096      	sub	sp, #88	; 0x58
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
 8001cd4:	611a      	str	r2, [r3, #16]
 8001cd6:	615a      	str	r2, [r3, #20]
 8001cd8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	2220      	movs	r2, #32
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f004 fbad 	bl	8006440 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ce6:	4b44      	ldr	r3, [pc, #272]	; (8001df8 <MX_TIM1_Init+0x150>)
 8001ce8:	4a44      	ldr	r2, [pc, #272]	; (8001dfc <MX_TIM1_Init+0x154>)
 8001cea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cec:	4b42      	ldr	r3, [pc, #264]	; (8001df8 <MX_TIM1_Init+0x150>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf2:	4b41      	ldr	r3, [pc, #260]	; (8001df8 <MX_TIM1_Init+0x150>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001cf8:	4b3f      	ldr	r3, [pc, #252]	; (8001df8 <MX_TIM1_Init+0x150>)
 8001cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cfe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d00:	4b3d      	ldr	r3, [pc, #244]	; (8001df8 <MX_TIM1_Init+0x150>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d06:	4b3c      	ldr	r3, [pc, #240]	; (8001df8 <MX_TIM1_Init+0x150>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d0c:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <MX_TIM1_Init+0x150>)
 8001d0e:	2280      	movs	r2, #128	; 0x80
 8001d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d12:	4839      	ldr	r0, [pc, #228]	; (8001df8 <MX_TIM1_Init+0x150>)
 8001d14:	f003 fc49 	bl	80055aa <HAL_TIM_Base_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d1e:	f000 fa35 	bl	800218c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d26:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4832      	ldr	r0, [pc, #200]	; (8001df8 <MX_TIM1_Init+0x150>)
 8001d30:	f003 fece 	bl	8005ad0 <HAL_TIM_ConfigClockSource>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d3a:	f000 fa27 	bl	800218c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d3e:	482e      	ldr	r0, [pc, #184]	; (8001df8 <MX_TIM1_Init+0x150>)
 8001d40:	f003 fce8 	bl	8005714 <HAL_TIM_PWM_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001d4a:	f000 fa1f 	bl	800218c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4826      	ldr	r0, [pc, #152]	; (8001df8 <MX_TIM1_Init+0x150>)
 8001d5e:	f004 fa7f 	bl	8006260 <HAL_TIMEx_MasterConfigSynchronization>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001d68:	f000 fa10 	bl	800218c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d6c:	2360      	movs	r3, #96	; 0x60
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d80:	2300      	movs	r3, #0
 8001d82:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d84:	2300      	movs	r3, #0
 8001d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4819      	ldr	r0, [pc, #100]	; (8001df8 <MX_TIM1_Init+0x150>)
 8001d92:	f003 fddf 	bl	8005954 <HAL_TIM_PWM_ConfigChannel>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001d9c:	f000 f9f6 	bl	800218c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da4:	2208      	movs	r2, #8
 8001da6:	4619      	mov	r1, r3
 8001da8:	4813      	ldr	r0, [pc, #76]	; (8001df8 <MX_TIM1_Init+0x150>)
 8001daa:	f003 fdd3 	bl	8005954 <HAL_TIM_PWM_ConfigChannel>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001db4:	f000 f9ea 	bl	800218c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001dcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dd0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4807      	ldr	r0, [pc, #28]	; (8001df8 <MX_TIM1_Init+0x150>)
 8001ddc:	f004 faba 	bl	8006354 <HAL_TIMEx_ConfigBreakDeadTime>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001de6:	f000 f9d1 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001dea:	4803      	ldr	r0, [pc, #12]	; (8001df8 <MX_TIM1_Init+0x150>)
 8001dec:	f001 f93a 	bl	8003064 <HAL_TIM_MspPostInit>

}
 8001df0:	bf00      	nop
 8001df2:	3758      	adds	r7, #88	; 0x58
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	200001ec 	.word	0x200001ec
 8001dfc:	40010000 	.word	0x40010000

08001e00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e06:	f107 0308 	add.w	r3, r7, #8
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e14:	463b      	mov	r3, r7
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <MX_TIM2_Init+0x94>)
 8001e1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36-1;
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <MX_TIM2_Init+0x94>)
 8001e26:	2223      	movs	r2, #35	; 0x23
 8001e28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <MX_TIM2_Init+0x94>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001e30:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <MX_TIM2_Init+0x94>)
 8001e32:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e38:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <MX_TIM2_Init+0x94>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <MX_TIM2_Init+0x94>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e44:	4813      	ldr	r0, [pc, #76]	; (8001e94 <MX_TIM2_Init+0x94>)
 8001e46:	f003 fbb0 	bl	80055aa <HAL_TIM_Base_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e50:	f000 f99c 	bl	800218c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e5a:	f107 0308 	add.w	r3, r7, #8
 8001e5e:	4619      	mov	r1, r3
 8001e60:	480c      	ldr	r0, [pc, #48]	; (8001e94 <MX_TIM2_Init+0x94>)
 8001e62:	f003 fe35 	bl	8005ad0 <HAL_TIM_ConfigClockSource>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001e6c:	f000 f98e 	bl	800218c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e70:	2300      	movs	r3, #0
 8001e72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e78:	463b      	mov	r3, r7
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4805      	ldr	r0, [pc, #20]	; (8001e94 <MX_TIM2_Init+0x94>)
 8001e7e:	f004 f9ef 	bl	8006260 <HAL_TIMEx_MasterConfigSynchronization>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e88:	f000 f980 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e8c:	bf00      	nop
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000234 	.word	0x20000234

08001e98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e9e:	f107 0308 	add.w	r3, r7, #8
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eac:	463b      	mov	r3, r7
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <MX_TIM4_Init+0x94>)
 8001eb6:	4a1e      	ldr	r2, [pc, #120]	; (8001f30 <MX_TIM4_Init+0x98>)
 8001eb8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36-1;
 8001eba:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <MX_TIM4_Init+0x94>)
 8001ebc:	2223      	movs	r2, #35	; 0x23
 8001ebe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <MX_TIM4_Init+0x94>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <MX_TIM4_Init+0x94>)
 8001ec8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001ecc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ece:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <MX_TIM4_Init+0x94>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed4:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <MX_TIM4_Init+0x94>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001eda:	4814      	ldr	r0, [pc, #80]	; (8001f2c <MX_TIM4_Init+0x94>)
 8001edc:	f003 fb65 	bl	80055aa <HAL_TIM_Base_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001ee6:	f000 f951 	bl	800218c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ef0:	f107 0308 	add.w	r3, r7, #8
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	480d      	ldr	r0, [pc, #52]	; (8001f2c <MX_TIM4_Init+0x94>)
 8001ef8:	f003 fdea 	bl	8005ad0 <HAL_TIM_ConfigClockSource>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001f02:	f000 f943 	bl	800218c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f0e:	463b      	mov	r3, r7
 8001f10:	4619      	mov	r1, r3
 8001f12:	4806      	ldr	r0, [pc, #24]	; (8001f2c <MX_TIM4_Init+0x94>)
 8001f14:	f004 f9a4 	bl	8006260 <HAL_TIMEx_MasterConfigSynchronization>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001f1e:	f000 f935 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f22:	bf00      	nop
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200000e0 	.word	0x200000e0
 8001f30:	40000800 	.word	0x40000800

08001f34 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
 8001f48:	615a      	str	r2, [r3, #20]
 8001f4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001f4c:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <MX_TIM10_Init+0x94>)
 8001f4e:	4a1f      	ldr	r2, [pc, #124]	; (8001fcc <MX_TIM10_Init+0x98>)
 8001f50:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001f52:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <MX_TIM10_Init+0x94>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f58:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <MX_TIM10_Init+0x94>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001f5e:	4b1a      	ldr	r3, [pc, #104]	; (8001fc8 <MX_TIM10_Init+0x94>)
 8001f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f64:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f66:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <MX_TIM10_Init+0x94>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f6c:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <MX_TIM10_Init+0x94>)
 8001f6e:	2280      	movs	r2, #128	; 0x80
 8001f70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001f72:	4815      	ldr	r0, [pc, #84]	; (8001fc8 <MX_TIM10_Init+0x94>)
 8001f74:	f003 fb19 	bl	80055aa <HAL_TIM_Base_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001f7e:	f000 f905 	bl	800218c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001f82:	4811      	ldr	r0, [pc, #68]	; (8001fc8 <MX_TIM10_Init+0x94>)
 8001f84:	f003 fbc6 	bl	8005714 <HAL_TIM_PWM_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001f8e:	f000 f8fd 	bl	800218c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f92:	2360      	movs	r3, #96	; 0x60
 8001f94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4807      	ldr	r0, [pc, #28]	; (8001fc8 <MX_TIM10_Init+0x94>)
 8001faa:	f003 fcd3 	bl	8005954 <HAL_TIM_PWM_ConfigChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001fb4:	f000 f8ea 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001fb8:	4803      	ldr	r0, [pc, #12]	; (8001fc8 <MX_TIM10_Init+0x94>)
 8001fba:	f001 f853 	bl	8003064 <HAL_TIM_MspPostInit>

}
 8001fbe:	bf00      	nop
 8001fc0:	3720      	adds	r7, #32
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000170 	.word	0x20000170
 8001fcc:	40014400 	.word	0x40014400

08001fd0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fd6:	463b      	mov	r3, r7
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001fe2:	4b16      	ldr	r3, [pc, #88]	; (800203c <MX_TIM12_Init+0x6c>)
 8001fe4:	4a16      	ldr	r2, [pc, #88]	; (8002040 <MX_TIM12_Init+0x70>)
 8001fe6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1000;
 8001fe8:	4b14      	ldr	r3, [pc, #80]	; (800203c <MX_TIM12_Init+0x6c>)
 8001fea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fee:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <MX_TIM12_Init+0x6c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 36000;
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <MX_TIM12_Init+0x6c>)
 8001ff8:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8001ffc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	; (800203c <MX_TIM12_Init+0x6c>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002004:	4b0d      	ldr	r3, [pc, #52]	; (800203c <MX_TIM12_Init+0x6c>)
 8002006:	2200      	movs	r2, #0
 8002008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800200a:	480c      	ldr	r0, [pc, #48]	; (800203c <MX_TIM12_Init+0x6c>)
 800200c:	f003 facd 	bl	80055aa <HAL_TIM_Base_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 8002016:	f000 f8b9 	bl	800218c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800201a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800201e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002020:	463b      	mov	r3, r7
 8002022:	4619      	mov	r1, r3
 8002024:	4805      	ldr	r0, [pc, #20]	; (800203c <MX_TIM12_Init+0x6c>)
 8002026:	f003 fd53 	bl	8005ad0 <HAL_TIM_ConfigClockSource>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8002030:	f000 f8ac 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002034:	bf00      	nop
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	2000027c 	.word	0x2000027c
 8002040:	40001800 	.word	0x40001800

08002044 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
 8002058:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	4b48      	ldr	r3, [pc, #288]	; (8002180 <MX_GPIO_Init+0x13c>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a47      	ldr	r2, [pc, #284]	; (8002180 <MX_GPIO_Init+0x13c>)
 8002064:	f043 0310 	orr.w	r3, r3, #16
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b45      	ldr	r3, [pc, #276]	; (8002180 <MX_GPIO_Init+0x13c>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	4b41      	ldr	r3, [pc, #260]	; (8002180 <MX_GPIO_Init+0x13c>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a40      	ldr	r2, [pc, #256]	; (8002180 <MX_GPIO_Init+0x13c>)
 8002080:	f043 0320 	orr.w	r3, r3, #32
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b3e      	ldr	r3, [pc, #248]	; (8002180 <MX_GPIO_Init+0x13c>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 0320 	and.w	r3, r3, #32
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	4b3a      	ldr	r3, [pc, #232]	; (8002180 <MX_GPIO_Init+0x13c>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a39      	ldr	r2, [pc, #228]	; (8002180 <MX_GPIO_Init+0x13c>)
 800209c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b37      	ldr	r3, [pc, #220]	; (8002180 <MX_GPIO_Init+0x13c>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	4b33      	ldr	r3, [pc, #204]	; (8002180 <MX_GPIO_Init+0x13c>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a32      	ldr	r2, [pc, #200]	; (8002180 <MX_GPIO_Init+0x13c>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b30      	ldr	r3, [pc, #192]	; (8002180 <MX_GPIO_Init+0x13c>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	607b      	str	r3, [r7, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	603b      	str	r3, [r7, #0]
 80020ce:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <MX_GPIO_Init+0x13c>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a2b      	ldr	r2, [pc, #172]	; (8002180 <MX_GPIO_Init+0x13c>)
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b29      	ldr	r3, [pc, #164]	; (8002180 <MX_GPIO_Init+0x13c>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 80020e6:	2201      	movs	r2, #1
 80020e8:	21fc      	movs	r1, #252	; 0xfc
 80020ea:	4826      	ldr	r0, [pc, #152]	; (8002184 <MX_GPIO_Init+0x140>)
 80020ec:	f002 f891 	bl	8004212 <HAL_GPIO_WritePin>
                          |ph_down_enable_Pin|nutrient_enable_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(water_temp_GPIO_Port, water_temp_Pin, GPIO_PIN_RESET);
 80020f0:	2200      	movs	r2, #0
 80020f2:	2104      	movs	r1, #4
 80020f4:	4824      	ldr	r0, [pc, #144]	; (8002188 <MX_GPIO_Init+0x144>)
 80020f6:	f002 f88c 	bl	8004212 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, water_heat_cool_Pin|grow_light_Pin|water_pump_enable_Pin|water_heat_cool_enable_Pin, GPIO_PIN_RESET);
 80020fa:	2200      	movs	r2, #0
 80020fc:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8002100:	4820      	ldr	r0, [pc, #128]	; (8002184 <MX_GPIO_Init+0x140>)
 8002102:	f002 f886 	bl	8004212 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ph_up_pump_Pin ph_down_pump_Pin nutrient_pump_Pin ph_up_enable_Pin
                           ph_down_enable_Pin nutrient_enable_Pin water_heat_cool_Pin */
  GPIO_InitStruct.Pin = ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 8002106:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 800210a:	617b      	str	r3, [r7, #20]
                          |ph_down_enable_Pin|nutrient_enable_Pin|water_heat_cool_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210c:	2301      	movs	r3, #1
 800210e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002114:	2303      	movs	r3, #3
 8002116:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	4619      	mov	r1, r3
 800211e:	4819      	ldr	r0, [pc, #100]	; (8002184 <MX_GPIO_Init+0x140>)
 8002120:	f001 fec2 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : water_temp_Pin */
  GPIO_InitStruct.Pin = water_temp_Pin;
 8002124:	2304      	movs	r3, #4
 8002126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002128:	2301      	movs	r3, #1
 800212a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002130:	2300      	movs	r3, #0
 8002132:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(water_temp_GPIO_Port, &GPIO_InitStruct);
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	4619      	mov	r1, r3
 800213a:	4813      	ldr	r0, [pc, #76]	; (8002188 <MX_GPIO_Init+0x144>)
 800213c:	f001 feb4 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : grow_light_Pin water_pump_enable_Pin water_heat_cool_enable_Pin */
  GPIO_InitStruct.Pin = grow_light_Pin|water_pump_enable_Pin|water_heat_cool_enable_Pin;
 8002140:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002146:	2301      	movs	r3, #1
 8002148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4619      	mov	r1, r3
 8002158:	480a      	ldr	r0, [pc, #40]	; (8002184 <MX_GPIO_Init+0x140>)
 800215a:	f001 fea5 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : water_level_Pin */
  GPIO_InitStruct.Pin = water_level_Pin;
 800215e:	2302      	movs	r3, #2
 8002160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(water_level_GPIO_Port, &GPIO_InitStruct);
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	4619      	mov	r1, r3
 8002170:	4804      	ldr	r0, [pc, #16]	; (8002184 <MX_GPIO_Init+0x140>)
 8002172:	f001 fe99 	bl	8003ea8 <HAL_GPIO_Init>

}
 8002176:	bf00      	nop
 8002178:	3728      	adds	r7, #40	; 0x28
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800
 8002184:	40021000 	.word	0x40021000
 8002188:	40020400 	.word	0x40020400

0800218c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002190:	b672      	cpsid	i
}
 8002192:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002194:	e7fe      	b.n	8002194 <Error_Handler+0x8>

08002196 <doseWater>:
#include "main.h"



void doseWater(float acid_ml, float base_ml, float nutrient_ml)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b088      	sub	sp, #32
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
	int ph_down_steps = calc_dose_steps(acid_ml);
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f7fe f974 	bl	8000490 <__aeabi_f2d>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4610      	mov	r0, r2
 80021ae:	4619      	mov	r1, r3
 80021b0:	f000 fa6e 	bl	8002690 <calc_dose_steps>
 80021b4:	61f8      	str	r0, [r7, #28]
	int ph_up_steps = calc_dose_steps(base_ml);
 80021b6:	68b8      	ldr	r0, [r7, #8]
 80021b8:	f7fe f96a 	bl	8000490 <__aeabi_f2d>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	f000 fa64 	bl	8002690 <calc_dose_steps>
 80021c8:	61b8      	str	r0, [r7, #24]
	int nutrient_steps = calc_dose_steps(nutrient_ml);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe f960 	bl	8000490 <__aeabi_f2d>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4610      	mov	r0, r2
 80021d6:	4619      	mov	r1, r3
 80021d8:	f000 fa5a 	bl	8002690 <calc_dose_steps>
 80021dc:	6178      	str	r0, [r7, #20]
	step(nutrient_steps,ph_up_steps, ph_down_steps);
 80021de:	69fa      	ldr	r2, [r7, #28]
 80021e0:	69b9      	ldr	r1, [r7, #24]
 80021e2:	6978      	ldr	r0, [r7, #20]
 80021e4:	f000 fc2a 	bl	8002a3c <step>
}
 80021e8:	bf00      	nop
 80021ea:	3720      	adds	r7, #32
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <calcPhUpDose>:

double calcPhUpDose(float TDS, float pH)      // following dose methods return a double in milliliters.
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
	//if(pH > (pH_set_point+0.8))
	return 0;
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	f04f 0300 	mov.w	r3, #0
}
 8002202:	4610      	mov	r0, r2
 8002204:	4619      	mov	r1, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr
	...

08002210 <calcPhDownDose>:

double calcPhDownDose(float TDS, float pH)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
	return 3.0;
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	4b03      	ldr	r3, [pc, #12]	; (800222c <calcPhDownDose+0x1c>)
}
 8002220:	4610      	mov	r0, r2
 8002222:	4619      	mov	r1, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	40080000 	.word	0x40080000

08002230 <calcNutrientDose>:

double calcNutrientDose(float TDS, float pH)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
	return 0;
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	f04f 0300 	mov.w	r3, #0
}
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
	...

08002250 <read_voltage>:
float value;

float voltage_mV, volt_avg_len = 30, pH_low_cal = 2004.0, pH_mid_cal = 1515.0, pH_high_cal= 1123.0;

float read_voltage()
{
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
	phAverage = 0;
 8002256:	4b44      	ldr	r3, [pc, #272]	; (8002368 <read_voltage+0x118>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
	ph_Value = 0;
 800225c:	4b43      	ldr	r3, [pc, #268]	; (800236c <read_voltage+0x11c>)
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<32; i++)
 8002264:	2300      	movs	r3, #0
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	e01d      	b.n	80022a6 <read_voltage+0x56>
	{
		get_nutrient_ph_value();
 800226a:	f000 fdd3 	bl	8002e14 <get_nutrient_ph_value>
		value = nutrient_ph_values[0];
 800226e:	4b40      	ldr	r3, [pc, #256]	; (8002370 <read_voltage+0x120>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe fd2c 	bl	8000cd0 <__aeabi_ui2f>
 8002278:	4603      	mov	r3, r0
 800227a:	4a3e      	ldr	r2, [pc, #248]	; (8002374 <read_voltage+0x124>)
 800227c:	6013      	str	r3, [r2, #0]
		if(i>1) phBuffer[i-2] = value;   // skip first 2 samples for accuracy
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b01      	cmp	r3, #1
 8002282:	dd0a      	ble.n	800229a <read_voltage+0x4a>
 8002284:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <read_voltage+0x124>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	1e9c      	subs	r4, r3, #2
 800228c:	4610      	mov	r0, r2
 800228e:	f7fe ff3d 	bl	800110c <__aeabi_f2iz>
 8002292:	4603      	mov	r3, r0
 8002294:	4a38      	ldr	r2, [pc, #224]	; (8002378 <read_voltage+0x128>)
 8002296:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		HAL_Delay(1);
 800229a:	2001      	movs	r0, #1
 800229c:	f001 f952 	bl	8003544 <HAL_Delay>
	for(int i = 0; i<32; i++)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3301      	adds	r3, #1
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b1f      	cmp	r3, #31
 80022aa:	ddde      	ble.n	800226a <read_voltage+0x1a>
	}
	for(j=0;j<30;j++) ph_Value = phBuffer[j] + ph_Value;
 80022ac:	4b33      	ldr	r3, [pc, #204]	; (800237c <read_voltage+0x12c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	e017      	b.n	80022e4 <read_voltage+0x94>
 80022b4:	4b31      	ldr	r3, [pc, #196]	; (800237c <read_voltage+0x12c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a2f      	ldr	r2, [pc, #188]	; (8002378 <read_voltage+0x128>)
 80022ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe fd0a 	bl	8000cd8 <__aeabi_i2f>
 80022c4:	4602      	mov	r2, r0
 80022c6:	4b29      	ldr	r3, [pc, #164]	; (800236c <read_voltage+0x11c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4619      	mov	r1, r3
 80022cc:	4610      	mov	r0, r2
 80022ce:	f7fe fc4f 	bl	8000b70 <__addsf3>
 80022d2:	4603      	mov	r3, r0
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b25      	ldr	r3, [pc, #148]	; (800236c <read_voltage+0x11c>)
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	4b28      	ldr	r3, [pc, #160]	; (800237c <read_voltage+0x12c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	4a26      	ldr	r2, [pc, #152]	; (800237c <read_voltage+0x12c>)
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	4b25      	ldr	r3, [pc, #148]	; (800237c <read_voltage+0x12c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b1d      	cmp	r3, #29
 80022ea:	dde3      	ble.n	80022b4 <read_voltage+0x64>
	phAverage = ph_Value/30;
 80022ec:	4b1f      	ldr	r3, [pc, #124]	; (800236c <read_voltage+0x11c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4923      	ldr	r1, [pc, #140]	; (8002380 <read_voltage+0x130>)
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe fdf8 	bl	8000ee8 <__aeabi_fdiv>
 80022f8:	4603      	mov	r3, r0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe ff06 	bl	800110c <__aeabi_f2iz>
 8002300:	4603      	mov	r3, r0
 8002302:	4a19      	ldr	r2, [pc, #100]	; (8002368 <read_voltage+0x118>)
 8002304:	6013      	str	r3, [r2, #0]
	mili_Voltage = ((phAverage/4096.0)*3.3)*1000;
 8002306:	4b18      	ldr	r3, [pc, #96]	; (8002368 <read_voltage+0x118>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe f8ae 	bl	800046c <__aeabi_i2d>
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <read_voltage+0x134>)
 8002316:	f7fe fa3d 	bl	8000794 <__aeabi_ddiv>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	a30f      	add	r3, pc, #60	; (adr r3, 8002360 <read_voltage+0x110>)
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	f7fe f90a 	bl	8000540 <__aeabi_dmul>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	4b13      	ldr	r3, [pc, #76]	; (8002388 <read_voltage+0x138>)
 800233a:	f7fe f901 	bl	8000540 <__aeabi_dmul>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	f7fe fbbd 	bl	8000ac4 <__aeabi_d2f>
 800234a:	4603      	mov	r3, r0
 800234c:	4a0f      	ldr	r2, [pc, #60]	; (800238c <read_voltage+0x13c>)
 800234e:	6013      	str	r3, [r2, #0]
	return mili_Voltage;
 8002350:	4b0e      	ldr	r3, [pc, #56]	; (800238c <read_voltage+0x13c>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	4618      	mov	r0, r3
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	bd90      	pop	{r4, r7, pc}
 800235c:	f3af 8000 	nop.w
 8002360:	66666666 	.word	0x66666666
 8002364:	400a6666 	.word	0x400a6666
 8002368:	200000a4 	.word	0x200000a4
 800236c:	200000a0 	.word	0x200000a0
 8002370:	20000098 	.word	0x20000098
 8002374:	20000344 	.word	0x20000344
 8002378:	200002c8 	.word	0x200002c8
 800237c:	200000a8 	.word	0x200000a8
 8002380:	41f00000 	.word	0x41f00000
 8002384:	40b00000 	.word	0x40b00000
 8002388:	408f4000 	.word	0x408f4000
 800238c:	20000340 	.word	0x20000340

08002390 <convert_ph>:

float convert_ph(float voltage_mV)	// converts voltage to pH value based on three point calibration
{
 8002390:	b5b0      	push	{r4, r5, r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	if(voltage_mV>pH_mid_cal) 		// if the solution is basic
 8002398:	4bad      	ldr	r3, [pc, #692]	; (8002650 <convert_ph+0x2c0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4619      	mov	r1, r3
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe feaa 	bl	80010f8 <__aeabi_fcmpgt>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 809f 	beq.w	80024ea <convert_ph+0x15a>
	{
		float slope = (7.0-4.0)/((pH_mid_cal-1500.0)/3.0 - (pH_low_cal-1500.0)/3.0);
 80023ac:	4ba8      	ldr	r3, [pc, #672]	; (8002650 <convert_ph+0x2c0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe f86d 	bl	8000490 <__aeabi_f2d>
 80023b6:	a3a4      	add	r3, pc, #656	; (adr r3, 8002648 <convert_ph+0x2b8>)
 80023b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023bc:	f7fd ff08 	bl	80001d0 <__aeabi_dsub>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	4ba1      	ldr	r3, [pc, #644]	; (8002654 <convert_ph+0x2c4>)
 80023ce:	f7fe f9e1 	bl	8000794 <__aeabi_ddiv>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4614      	mov	r4, r2
 80023d8:	461d      	mov	r5, r3
 80023da:	4b9f      	ldr	r3, [pc, #636]	; (8002658 <convert_ph+0x2c8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe f856 	bl	8000490 <__aeabi_f2d>
 80023e4:	a398      	add	r3, pc, #608	; (adr r3, 8002648 <convert_ph+0x2b8>)
 80023e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ea:	f7fd fef1 	bl	80001d0 <__aeabi_dsub>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4610      	mov	r0, r2
 80023f4:	4619      	mov	r1, r3
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	4b96      	ldr	r3, [pc, #600]	; (8002654 <convert_ph+0x2c4>)
 80023fc:	f7fe f9ca 	bl	8000794 <__aeabi_ddiv>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4620      	mov	r0, r4
 8002406:	4629      	mov	r1, r5
 8002408:	f7fd fee2 	bl	80001d0 <__aeabi_dsub>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	f04f 0000 	mov.w	r0, #0
 8002414:	498f      	ldr	r1, [pc, #572]	; (8002654 <convert_ph+0x2c4>)
 8002416:	f7fe f9bd 	bl	8000794 <__aeabi_ddiv>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4610      	mov	r0, r2
 8002420:	4619      	mov	r1, r3
 8002422:	f7fe fb4f 	bl	8000ac4 <__aeabi_d2f>
 8002426:	4603      	mov	r3, r0
 8002428:	613b      	str	r3, [r7, #16]
		float intercept =  7.0 - slope*(pH_mid_cal-1500.0)/3.0;
 800242a:	6938      	ldr	r0, [r7, #16]
 800242c:	f7fe f830 	bl	8000490 <__aeabi_f2d>
 8002430:	4604      	mov	r4, r0
 8002432:	460d      	mov	r5, r1
 8002434:	4b86      	ldr	r3, [pc, #536]	; (8002650 <convert_ph+0x2c0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe f829 	bl	8000490 <__aeabi_f2d>
 800243e:	a382      	add	r3, pc, #520	; (adr r3, 8002648 <convert_ph+0x2b8>)
 8002440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002444:	f7fd fec4 	bl	80001d0 <__aeabi_dsub>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4620      	mov	r0, r4
 800244e:	4629      	mov	r1, r5
 8002450:	f7fe f876 	bl	8000540 <__aeabi_dmul>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4610      	mov	r0, r2
 800245a:	4619      	mov	r1, r3
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	4b7c      	ldr	r3, [pc, #496]	; (8002654 <convert_ph+0x2c4>)
 8002462:	f7fe f997 	bl	8000794 <__aeabi_ddiv>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	f04f 0000 	mov.w	r0, #0
 800246e:	497b      	ldr	r1, [pc, #492]	; (800265c <convert_ph+0x2cc>)
 8002470:	f7fd feae 	bl	80001d0 <__aeabi_dsub>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	f7fe fb22 	bl	8000ac4 <__aeabi_d2f>
 8002480:	4603      	mov	r3, r0
 8002482:	60fb      	str	r3, [r7, #12]
		float phValue = slope*(voltage_mV-1500.0)/3.0+intercept;  //y = k*x + b
 8002484:	6938      	ldr	r0, [r7, #16]
 8002486:	f7fe f803 	bl	8000490 <__aeabi_f2d>
 800248a:	4604      	mov	r4, r0
 800248c:	460d      	mov	r5, r1
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fd fffe 	bl	8000490 <__aeabi_f2d>
 8002494:	a36c      	add	r3, pc, #432	; (adr r3, 8002648 <convert_ph+0x2b8>)
 8002496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249a:	f7fd fe99 	bl	80001d0 <__aeabi_dsub>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4620      	mov	r0, r4
 80024a4:	4629      	mov	r1, r5
 80024a6:	f7fe f84b 	bl	8000540 <__aeabi_dmul>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	4b67      	ldr	r3, [pc, #412]	; (8002654 <convert_ph+0x2c4>)
 80024b8:	f7fe f96c 	bl	8000794 <__aeabi_ddiv>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4614      	mov	r4, r2
 80024c2:	461d      	mov	r5, r3
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7fd ffe3 	bl	8000490 <__aeabi_f2d>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4620      	mov	r0, r4
 80024d0:	4629      	mov	r1, r5
 80024d2:	f7fd fe7f 	bl	80001d4 <__adddf3>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4610      	mov	r0, r2
 80024dc:	4619      	mov	r1, r3
 80024de:	f7fe faf1 	bl	8000ac4 <__aeabi_d2f>
 80024e2:	4603      	mov	r3, r0
 80024e4:	60bb      	str	r3, [r7, #8]
		return phValue;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	e0a8      	b.n	800263c <convert_ph+0x2ac>
	}
	if(voltage_mV<pH_mid_cal) 		// if the solution is acidic
 80024ea:	4b59      	ldr	r3, [pc, #356]	; (8002650 <convert_ph+0x2c0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4619      	mov	r1, r3
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7fe fde3 	bl	80010bc <__aeabi_fcmplt>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 809f 	beq.w	800263c <convert_ph+0x2ac>
	{
		float slope = (7.0-4.0)/((pH_mid_cal-1500.0)/3.0 - (pH_low_cal-1500.0)/3.0);
 80024fe:	4b54      	ldr	r3, [pc, #336]	; (8002650 <convert_ph+0x2c0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fd ffc4 	bl	8000490 <__aeabi_f2d>
 8002508:	a34f      	add	r3, pc, #316	; (adr r3, 8002648 <convert_ph+0x2b8>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	f7fd fe5f 	bl	80001d0 <__aeabi_dsub>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	4b4d      	ldr	r3, [pc, #308]	; (8002654 <convert_ph+0x2c4>)
 8002520:	f7fe f938 	bl	8000794 <__aeabi_ddiv>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4614      	mov	r4, r2
 800252a:	461d      	mov	r5, r3
 800252c:	4b4a      	ldr	r3, [pc, #296]	; (8002658 <convert_ph+0x2c8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fd ffad 	bl	8000490 <__aeabi_f2d>
 8002536:	a344      	add	r3, pc, #272	; (adr r3, 8002648 <convert_ph+0x2b8>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fd fe48 	bl	80001d0 <__aeabi_dsub>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	4b41      	ldr	r3, [pc, #260]	; (8002654 <convert_ph+0x2c4>)
 800254e:	f7fe f921 	bl	8000794 <__aeabi_ddiv>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4620      	mov	r0, r4
 8002558:	4629      	mov	r1, r5
 800255a:	f7fd fe39 	bl	80001d0 <__aeabi_dsub>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	f04f 0000 	mov.w	r0, #0
 8002566:	493b      	ldr	r1, [pc, #236]	; (8002654 <convert_ph+0x2c4>)
 8002568:	f7fe f914 	bl	8000794 <__aeabi_ddiv>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	f7fe faa6 	bl	8000ac4 <__aeabi_d2f>
 8002578:	4603      	mov	r3, r0
 800257a:	61fb      	str	r3, [r7, #28]
		float intercept =  7.0 - slope*(pH_mid_cal-1500.0)/3.0;
 800257c:	69f8      	ldr	r0, [r7, #28]
 800257e:	f7fd ff87 	bl	8000490 <__aeabi_f2d>
 8002582:	4604      	mov	r4, r0
 8002584:	460d      	mov	r5, r1
 8002586:	4b32      	ldr	r3, [pc, #200]	; (8002650 <convert_ph+0x2c0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7fd ff80 	bl	8000490 <__aeabi_f2d>
 8002590:	a32d      	add	r3, pc, #180	; (adr r3, 8002648 <convert_ph+0x2b8>)
 8002592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002596:	f7fd fe1b 	bl	80001d0 <__aeabi_dsub>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4620      	mov	r0, r4
 80025a0:	4629      	mov	r1, r5
 80025a2:	f7fd ffcd 	bl	8000540 <__aeabi_dmul>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4610      	mov	r0, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	4b28      	ldr	r3, [pc, #160]	; (8002654 <convert_ph+0x2c4>)
 80025b4:	f7fe f8ee 	bl	8000794 <__aeabi_ddiv>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	f04f 0000 	mov.w	r0, #0
 80025c0:	4926      	ldr	r1, [pc, #152]	; (800265c <convert_ph+0x2cc>)
 80025c2:	f7fd fe05 	bl	80001d0 <__aeabi_dsub>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4610      	mov	r0, r2
 80025cc:	4619      	mov	r1, r3
 80025ce:	f7fe fa79 	bl	8000ac4 <__aeabi_d2f>
 80025d2:	4603      	mov	r3, r0
 80025d4:	61bb      	str	r3, [r7, #24]
		float phValue = slope*(voltage_mV-1500.0)/3.0+intercept;  //y = k*x + b
 80025d6:	69f8      	ldr	r0, [r7, #28]
 80025d8:	f7fd ff5a 	bl	8000490 <__aeabi_f2d>
 80025dc:	4604      	mov	r4, r0
 80025de:	460d      	mov	r5, r1
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7fd ff55 	bl	8000490 <__aeabi_f2d>
 80025e6:	a318      	add	r3, pc, #96	; (adr r3, 8002648 <convert_ph+0x2b8>)
 80025e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ec:	f7fd fdf0 	bl	80001d0 <__aeabi_dsub>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4620      	mov	r0, r4
 80025f6:	4629      	mov	r1, r5
 80025f8:	f7fd ffa2 	bl	8000540 <__aeabi_dmul>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4610      	mov	r0, r2
 8002602:	4619      	mov	r1, r3
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <convert_ph+0x2c4>)
 800260a:	f7fe f8c3 	bl	8000794 <__aeabi_ddiv>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4614      	mov	r4, r2
 8002614:	461d      	mov	r5, r3
 8002616:	69b8      	ldr	r0, [r7, #24]
 8002618:	f7fd ff3a 	bl	8000490 <__aeabi_f2d>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4620      	mov	r0, r4
 8002622:	4629      	mov	r1, r5
 8002624:	f7fd fdd6 	bl	80001d4 <__adddf3>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4610      	mov	r0, r2
 800262e:	4619      	mov	r1, r3
 8002630:	f7fe fa48 	bl	8000ac4 <__aeabi_d2f>
 8002634:	4603      	mov	r3, r0
 8002636:	617b      	str	r3, [r7, #20]
		return phValue;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	e7ff      	b.n	800263c <convert_ph+0x2ac>
	}
}
 800263c:	4618      	mov	r0, r3
 800263e:	3720      	adds	r7, #32
 8002640:	46bd      	mov	sp, r7
 8002642:	bdb0      	pop	{r4, r5, r7, pc}
 8002644:	f3af 8000 	nop.w
 8002648:	00000000 	.word	0x00000000
 800264c:	40977000 	.word	0x40977000
 8002650:	20000010 	.word	0x20000010
 8002654:	40080000 	.word	0x40080000
 8002658:	2000000c 	.word	0x2000000c
 800265c:	401c0000 	.word	0x401c0000

08002660 <delay_Stepper>:
#include "peristaltic_driver.h"
#include "main.h"
//extern TIM_HandleTypeDef step_timer;

void delay_Stepper(uint16_t us)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	80fb      	strh	r3, [r7, #6]
		__HAL_TIM_SET_COUNTER(&htim2,0);  			 // set the counter value a 0
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <delay_Stepper+0x2c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2200      	movs	r2, #0
 8002670:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8002672:	bf00      	nop
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <delay_Stepper+0x2c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	429a      	cmp	r2, r3
 800267e:	d3f9      	bcc.n	8002674 <delay_Stepper+0x14>
}
 8002680:	bf00      	nop
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	20000234 	.word	0x20000234

08002690 <calc_dose_steps>:
double steps = 0;
int calc_dose_steps(double miliLiters)	// takes a dose in mls and returns the number of steps for that volume
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	e9c7 0100 	strd	r0, r1, [r7]
	if	   (miliLiters > 0 && miliLiters <= 1)	steps = (1/0.221)*(miliLiters+0.2012)*(1745);
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026a6:	f7fe f9db 	bl	8000a60 <__aeabi_dcmpgt>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d028      	beq.n	8002702 <calc_dose_steps+0x72>
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	4bbe      	ldr	r3, [pc, #760]	; (80029b0 <calc_dose_steps+0x320>)
 80026b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026ba:	f7fe f9bd 	bl	8000a38 <__aeabi_dcmple>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01e      	beq.n	8002702 <calc_dose_steps+0x72>
 80026c4:	a3ae      	add	r3, pc, #696	; (adr r3, 8002980 <calc_dose_steps+0x2f0>)
 80026c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026ce:	f7fd fd81 	bl	80001d4 <__adddf3>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	a3ab      	add	r3, pc, #684	; (adr r3, 8002988 <calc_dose_steps+0x2f8>)
 80026dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e0:	f7fd ff2e 	bl	8000540 <__aeabi_dmul>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	a3a8      	add	r3, pc, #672	; (adr r3, 8002990 <calc_dose_steps+0x300>)
 80026ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f2:	f7fd ff25 	bl	8000540 <__aeabi_dmul>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	49ae      	ldr	r1, [pc, #696]	; (80029b4 <calc_dose_steps+0x324>)
 80026fc:	e9c1 2300 	strd	r2, r3, [r1]
 8002700:	e131      	b.n	8002966 <calc_dose_steps+0x2d6>
	else if(miliLiters > 1 && miliLiters <= 2)	steps = (1/0.221)*(miliLiters+0.2012)*(1790);
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	4baa      	ldr	r3, [pc, #680]	; (80029b0 <calc_dose_steps+0x320>)
 8002708:	e9d7 0100 	ldrd	r0, r1, [r7]
 800270c:	f7fe f9a8 	bl	8000a60 <__aeabi_dcmpgt>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d029      	beq.n	800276a <calc_dose_steps+0xda>
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800271e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002722:	f7fe f989 	bl	8000a38 <__aeabi_dcmple>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d01e      	beq.n	800276a <calc_dose_steps+0xda>
 800272c:	a394      	add	r3, pc, #592	; (adr r3, 8002980 <calc_dose_steps+0x2f0>)
 800272e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002732:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002736:	f7fd fd4d 	bl	80001d4 <__adddf3>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4610      	mov	r0, r2
 8002740:	4619      	mov	r1, r3
 8002742:	a391      	add	r3, pc, #580	; (adr r3, 8002988 <calc_dose_steps+0x2f8>)
 8002744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002748:	f7fd fefa 	bl	8000540 <__aeabi_dmul>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4610      	mov	r0, r2
 8002752:	4619      	mov	r1, r3
 8002754:	a390      	add	r3, pc, #576	; (adr r3, 8002998 <calc_dose_steps+0x308>)
 8002756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275a:	f7fd fef1 	bl	8000540 <__aeabi_dmul>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4994      	ldr	r1, [pc, #592]	; (80029b4 <calc_dose_steps+0x324>)
 8002764:	e9c1 2300 	strd	r2, r3, [r1]
 8002768:	e0fd      	b.n	8002966 <calc_dose_steps+0x2d6>
	else if(miliLiters > 2 && miliLiters <= 3)  steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002772:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002776:	f7fe f973 	bl	8000a60 <__aeabi_dcmpgt>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d028      	beq.n	80027d2 <calc_dose_steps+0x142>
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	4b8c      	ldr	r3, [pc, #560]	; (80029b8 <calc_dose_steps+0x328>)
 8002786:	e9d7 0100 	ldrd	r0, r1, [r7]
 800278a:	f7fe f955 	bl	8000a38 <__aeabi_dcmple>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d01e      	beq.n	80027d2 <calc_dose_steps+0x142>
 8002794:	a37a      	add	r3, pc, #488	; (adr r3, 8002980 <calc_dose_steps+0x2f0>)
 8002796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800279e:	f7fd fd19 	bl	80001d4 <__adddf3>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4610      	mov	r0, r2
 80027a8:	4619      	mov	r1, r3
 80027aa:	a377      	add	r3, pc, #476	; (adr r3, 8002988 <calc_dose_steps+0x2f8>)
 80027ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b0:	f7fd fec6 	bl	8000540 <__aeabi_dmul>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	a378      	add	r3, pc, #480	; (adr r3, 80029a0 <calc_dose_steps+0x310>)
 80027be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c2:	f7fd febd 	bl	8000540 <__aeabi_dmul>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	497a      	ldr	r1, [pc, #488]	; (80029b4 <calc_dose_steps+0x324>)
 80027cc:	e9c1 2300 	strd	r2, r3, [r1]
 80027d0:	e0c9      	b.n	8002966 <calc_dose_steps+0x2d6>
	else if(miliLiters > 3 && miliLiters <= 4)  steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	4b78      	ldr	r3, [pc, #480]	; (80029b8 <calc_dose_steps+0x328>)
 80027d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027dc:	f7fe f940 	bl	8000a60 <__aeabi_dcmpgt>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d028      	beq.n	8002838 <calc_dose_steps+0x1a8>
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	4b74      	ldr	r3, [pc, #464]	; (80029bc <calc_dose_steps+0x32c>)
 80027ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027f0:	f7fe f922 	bl	8000a38 <__aeabi_dcmple>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d01e      	beq.n	8002838 <calc_dose_steps+0x1a8>
 80027fa:	a361      	add	r3, pc, #388	; (adr r3, 8002980 <calc_dose_steps+0x2f0>)
 80027fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002800:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002804:	f7fd fce6 	bl	80001d4 <__adddf3>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	a35d      	add	r3, pc, #372	; (adr r3, 8002988 <calc_dose_steps+0x2f8>)
 8002812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002816:	f7fd fe93 	bl	8000540 <__aeabi_dmul>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	a35f      	add	r3, pc, #380	; (adr r3, 80029a0 <calc_dose_steps+0x310>)
 8002824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002828:	f7fd fe8a 	bl	8000540 <__aeabi_dmul>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4960      	ldr	r1, [pc, #384]	; (80029b4 <calc_dose_steps+0x324>)
 8002832:	e9c1 2300 	strd	r2, r3, [r1]
 8002836:	e096      	b.n	8002966 <calc_dose_steps+0x2d6>
	else if(miliLiters > 4 && miliLiters <= 5)  steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	4b5f      	ldr	r3, [pc, #380]	; (80029bc <calc_dose_steps+0x32c>)
 800283e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002842:	f7fe f90d 	bl	8000a60 <__aeabi_dcmpgt>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d028      	beq.n	800289e <calc_dose_steps+0x20e>
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	4b5b      	ldr	r3, [pc, #364]	; (80029c0 <calc_dose_steps+0x330>)
 8002852:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002856:	f7fe f8ef 	bl	8000a38 <__aeabi_dcmple>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01e      	beq.n	800289e <calc_dose_steps+0x20e>
 8002860:	a347      	add	r3, pc, #284	; (adr r3, 8002980 <calc_dose_steps+0x2f0>)
 8002862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002866:	e9d7 0100 	ldrd	r0, r1, [r7]
 800286a:	f7fd fcb3 	bl	80001d4 <__adddf3>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4610      	mov	r0, r2
 8002874:	4619      	mov	r1, r3
 8002876:	a344      	add	r3, pc, #272	; (adr r3, 8002988 <calc_dose_steps+0x2f8>)
 8002878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287c:	f7fd fe60 	bl	8000540 <__aeabi_dmul>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4610      	mov	r0, r2
 8002886:	4619      	mov	r1, r3
 8002888:	a345      	add	r3, pc, #276	; (adr r3, 80029a0 <calc_dose_steps+0x310>)
 800288a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288e:	f7fd fe57 	bl	8000540 <__aeabi_dmul>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4947      	ldr	r1, [pc, #284]	; (80029b4 <calc_dose_steps+0x324>)
 8002898:	e9c1 2300 	strd	r2, r3, [r1]
 800289c:	e063      	b.n	8002966 <calc_dose_steps+0x2d6>
	else if(miliLiters > 5 && miliLiters <= 30) steps = (1/0.221)*(miliLiters+0.2012)*(1980);
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	4b47      	ldr	r3, [pc, #284]	; (80029c0 <calc_dose_steps+0x330>)
 80028a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028a8:	f7fe f8da 	bl	8000a60 <__aeabi_dcmpgt>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d028      	beq.n	8002904 <calc_dose_steps+0x274>
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	4b43      	ldr	r3, [pc, #268]	; (80029c4 <calc_dose_steps+0x334>)
 80028b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028bc:	f7fe f8bc 	bl	8000a38 <__aeabi_dcmple>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d01e      	beq.n	8002904 <calc_dose_steps+0x274>
 80028c6:	a32e      	add	r3, pc, #184	; (adr r3, 8002980 <calc_dose_steps+0x2f0>)
 80028c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028d0:	f7fd fc80 	bl	80001d4 <__adddf3>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4610      	mov	r0, r2
 80028da:	4619      	mov	r1, r3
 80028dc:	a32a      	add	r3, pc, #168	; (adr r3, 8002988 <calc_dose_steps+0x2f8>)
 80028de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e2:	f7fd fe2d 	bl	8000540 <__aeabi_dmul>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	a32c      	add	r3, pc, #176	; (adr r3, 80029a0 <calc_dose_steps+0x310>)
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	f7fd fe24 	bl	8000540 <__aeabi_dmul>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	492d      	ldr	r1, [pc, #180]	; (80029b4 <calc_dose_steps+0x324>)
 80028fe:	e9c1 2300 	strd	r2, r3, [r1]
 8002902:	e030      	b.n	8002966 <calc_dose_steps+0x2d6>
	else if(miliLiters == 0) steps = 0;
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002910:	f7fe f87e 	bl	8000a10 <__aeabi_dcmpeq>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d007      	beq.n	800292a <calc_dose_steps+0x29a>
 800291a:	4926      	ldr	r1, [pc, #152]	; (80029b4 <calc_dose_steps+0x324>)
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	e9c1 2300 	strd	r2, r3, [r1]
 8002928:	e01d      	b.n	8002966 <calc_dose_steps+0x2d6>
	else steps = (1/0.221)*(miliLiters+0.2012)*(1915);
 800292a:	a315      	add	r3, pc, #84	; (adr r3, 8002980 <calc_dose_steps+0x2f0>)
 800292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002930:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002934:	f7fd fc4e 	bl	80001d4 <__adddf3>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	a311      	add	r3, pc, #68	; (adr r3, 8002988 <calc_dose_steps+0x2f8>)
 8002942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002946:	f7fd fdfb 	bl	8000540 <__aeabi_dmul>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4610      	mov	r0, r2
 8002950:	4619      	mov	r1, r3
 8002952:	a315      	add	r3, pc, #84	; (adr r3, 80029a8 <calc_dose_steps+0x318>)
 8002954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002958:	f7fd fdf2 	bl	8000540 <__aeabi_dmul>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4914      	ldr	r1, [pc, #80]	; (80029b4 <calc_dose_steps+0x324>)
 8002962:	e9c1 2300 	strd	r2, r3, [r1]
	return (int)steps;
 8002966:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <calc_dose_steps+0x324>)
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	f7fe f880 	bl	8000a74 <__aeabi_d2iz>
 8002974:	4603      	mov	r3, r0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	edfa43fe 	.word	0xedfa43fe
 8002984:	3fc9c0eb 	.word	0x3fc9c0eb
 8002988:	f2197bf2 	.word	0xf2197bf2
 800298c:	4012197b 	.word	0x4012197b
 8002990:	00000000 	.word	0x00000000
 8002994:	409b4400 	.word	0x409b4400
 8002998:	00000000 	.word	0x00000000
 800299c:	409bf800 	.word	0x409bf800
 80029a0:	00000000 	.word	0x00000000
 80029a4:	409ef000 	.word	0x409ef000
 80029a8:	00000000 	.word	0x00000000
 80029ac:	409dec00 	.word	0x409dec00
 80029b0:	3ff00000 	.word	0x3ff00000
 80029b4:	200000b0 	.word	0x200000b0
 80029b8:	40080000 	.word	0x40080000
 80029bc:	40100000 	.word	0x40100000
 80029c0:	40140000 	.word	0x40140000
 80029c4:	403e0000 	.word	0x403e0000

080029c8 <disablePumps>:

void disablePumps()	// disable all pumps
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,nutrient_enable_Pin,GPIO_PIN_SET);
 80029cc:	2201      	movs	r2, #1
 80029ce:	2180      	movs	r1, #128	; 0x80
 80029d0:	4807      	ldr	r0, [pc, #28]	; (80029f0 <disablePumps+0x28>)
 80029d2:	f001 fc1e 	bl	8004212 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,ph_down_enable_Pin,GPIO_PIN_SET);
 80029d6:	2201      	movs	r2, #1
 80029d8:	2140      	movs	r1, #64	; 0x40
 80029da:	4805      	ldr	r0, [pc, #20]	; (80029f0 <disablePumps+0x28>)
 80029dc:	f001 fc19 	bl	8004212 <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(GPIOE,ph_up_enable_Pin,GPIO_PIN_SET);
 80029e0:	2201      	movs	r2, #1
 80029e2:	2120      	movs	r1, #32
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <disablePumps+0x28>)
 80029e6:	f001 fc14 	bl	8004212 <HAL_GPIO_WritePin>

}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000

080029f4 <enablePumps>:

void enablePumps(int nutrient_steps, int ph_up_steps, int ph_down_steps)	// enable only the pumps that are going to dose
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
	if(nutrient_steps>0)HAL_GPIO_WritePin(GPIOE,nutrient_enable_Pin,GPIO_PIN_RESET);		// enable nutrient pump
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	dd04      	ble.n	8002a10 <enablePumps+0x1c>
 8002a06:	2200      	movs	r2, #0
 8002a08:	2180      	movs	r1, #128	; 0x80
 8002a0a:	480b      	ldr	r0, [pc, #44]	; (8002a38 <enablePumps+0x44>)
 8002a0c:	f001 fc01 	bl	8004212 <HAL_GPIO_WritePin>
	if(ph_down_steps>0)	HAL_GPIO_WritePin(GPIOE,ph_down_enable_Pin,GPIO_PIN_RESET);			// enable ph down pump
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	dd04      	ble.n	8002a20 <enablePumps+0x2c>
 8002a16:	2200      	movs	r2, #0
 8002a18:	2140      	movs	r1, #64	; 0x40
 8002a1a:	4807      	ldr	r0, [pc, #28]	; (8002a38 <enablePumps+0x44>)
 8002a1c:	f001 fbf9 	bl	8004212 <HAL_GPIO_WritePin>
	if(ph_up_steps>0)	HAL_GPIO_WritePin(GPIOE,ph_up_enable_Pin,GPIO_PIN_RESET);			// enable ph up pump
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	dd04      	ble.n	8002a30 <enablePumps+0x3c>
 8002a26:	2200      	movs	r2, #0
 8002a28:	2120      	movs	r1, #32
 8002a2a:	4803      	ldr	r0, [pc, #12]	; (8002a38 <enablePumps+0x44>)
 8002a2c:	f001 fbf1 	bl	8004212 <HAL_GPIO_WritePin>
}
 8002a30:	bf00      	nop
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40021000 	.word	0x40021000

08002a3c <step>:

void step(int nutrient_steps, int ph_up_steps, int ph_down_steps)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
	int most_steps = nutrient_steps;										// find the largest dose in steps. Will be used in step loop
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	617b      	str	r3, [r7, #20]
	if(ph_up_steps>most_steps) most_steps 	= ph_up_steps;
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	dd01      	ble.n	8002a58 <step+0x1c>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	617b      	str	r3, [r7, #20]
	if(ph_down_steps>most_steps) most_steps = ph_down_steps;
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	dd01      	ble.n	8002a64 <step+0x28>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	617b      	str	r3, [r7, #20]
	enablePumps(nutrient_steps,ph_up_steps,ph_down_steps);					// enable only the pumps that are going to dose
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	68b9      	ldr	r1, [r7, #8]
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f7ff ffc3 	bl	80029f4 <enablePumps>
	HAL_TIM_Base_Start(&htim2);
 8002a6e:	4824      	ldr	r0, [pc, #144]	; (8002b00 <step+0xc4>)
 8002a70:	f002 fdea 	bl	8005648 <HAL_TIM_Base_Start>
	for(int i = 0; i<most_steps; i++)										// step each pump their respective number of steps.
 8002a74:	2300      	movs	r3, #0
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	e038      	b.n	8002aec <step+0xb0>
	{
		if(i<nutrient_steps) HAL_GPIO_TogglePin(GPIOE, nutrient_pump_Pin);
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	da03      	bge.n	8002a8a <step+0x4e>
 8002a82:	2110      	movs	r1, #16
 8002a84:	481f      	ldr	r0, [pc, #124]	; (8002b04 <step+0xc8>)
 8002a86:	f001 fbdc 	bl	8004242 <HAL_GPIO_TogglePin>
		if(i<ph_up_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_up_pump_Pin);
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	da03      	bge.n	8002a9a <step+0x5e>
 8002a92:	2104      	movs	r1, #4
 8002a94:	481b      	ldr	r0, [pc, #108]	; (8002b04 <step+0xc8>)
 8002a96:	f001 fbd4 	bl	8004242 <HAL_GPIO_TogglePin>
		if(i<ph_down_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_down_pump_Pin);
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	da03      	bge.n	8002aaa <step+0x6e>
 8002aa2:	2108      	movs	r1, #8
 8002aa4:	4817      	ldr	r0, [pc, #92]	; (8002b04 <step+0xc8>)
 8002aa6:	f001 fbcc 	bl	8004242 <HAL_GPIO_TogglePin>
		delay_Stepper(40);
 8002aaa:	2028      	movs	r0, #40	; 0x28
 8002aac:	f7ff fdd8 	bl	8002660 <delay_Stepper>
		if(i<nutrient_steps) HAL_GPIO_TogglePin(GPIOE, nutrient_pump_Pin);
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	da03      	bge.n	8002ac0 <step+0x84>
 8002ab8:	2110      	movs	r1, #16
 8002aba:	4812      	ldr	r0, [pc, #72]	; (8002b04 <step+0xc8>)
 8002abc:	f001 fbc1 	bl	8004242 <HAL_GPIO_TogglePin>
		if(i<ph_up_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_up_pump_Pin);
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	da03      	bge.n	8002ad0 <step+0x94>
 8002ac8:	2104      	movs	r1, #4
 8002aca:	480e      	ldr	r0, [pc, #56]	; (8002b04 <step+0xc8>)
 8002acc:	f001 fbb9 	bl	8004242 <HAL_GPIO_TogglePin>
		if(i<ph_down_steps)	 HAL_GPIO_TogglePin(GPIOE, ph_down_pump_Pin);
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	da03      	bge.n	8002ae0 <step+0xa4>
 8002ad8:	2108      	movs	r1, #8
 8002ada:	480a      	ldr	r0, [pc, #40]	; (8002b04 <step+0xc8>)
 8002adc:	f001 fbb1 	bl	8004242 <HAL_GPIO_TogglePin>
		delay_Stepper(40);
 8002ae0:	2028      	movs	r0, #40	; 0x28
 8002ae2:	f7ff fdbd 	bl	8002660 <delay_Stepper>
	for(int i = 0; i<most_steps; i++)										// step each pump their respective number of steps.
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	dbc2      	blt.n	8002a7a <step+0x3e>
	}
	disablePumps();
 8002af4:	f7ff ff68 	bl	80029c8 <disablePumps>
}
 8002af8:	bf00      	nop
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20000234 	.word	0x20000234
 8002b04:	40021000 	.word	0x40021000

08002b08 <readWaterTemp>:
uint16_t TEMP;
double Temperature = 0;
float Humidity = 0;

double readWaterTemp(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
	 DWT_Delay_Init();
 8002b0c:	f000 fb3a 	bl	8003184 <DWT_Delay_Init>

	 //Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set the pin as output
	 HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 1);
 8002b10:	2201      	movs	r2, #1
 8002b12:	2104      	movs	r1, #4
 8002b14:	482b      	ldr	r0, [pc, #172]	; (8002bc4 <readWaterTemp+0xbc>)
 8002b16:	f001 fb7c 	bl	8004212 <HAL_GPIO_WritePin>
	 DWT_Delay_us(100);
 8002b1a:	2064      	movs	r0, #100	; 0x64
 8002b1c:	f000 fb62 	bl	80031e4 <DWT_Delay_us>
	 Presence = DS18B20_Start();
 8002b20:	f000 fb88 	bl	8003234 <DS18B20_Start>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	4b27      	ldr	r3, [pc, #156]	; (8002bc8 <readWaterTemp+0xc0>)
 8002b2a:	701a      	strb	r2, [r3, #0]

	 DWT_Delay_us (300);
 8002b2c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002b30:	f000 fb58 	bl	80031e4 <DWT_Delay_us>
	 DS18B20_Write (0xCC);  // skip ROM
 8002b34:	20cc      	movs	r0, #204	; 0xcc
 8002b36:	f000 fbad 	bl	8003294 <DS18B20_Write>
	 DS18B20_Write (0x44);  // convert t
 8002b3a:	2044      	movs	r0, #68	; 0x44
 8002b3c:	f000 fbaa 	bl	8003294 <DS18B20_Write>

	 Presence = DS18B20_Start();
 8002b40:	f000 fb78 	bl	8003234 <DS18B20_Start>
 8002b44:	4603      	mov	r3, r0
 8002b46:	461a      	mov	r2, r3
 8002b48:	4b1f      	ldr	r3, [pc, #124]	; (8002bc8 <readWaterTemp+0xc0>)
 8002b4a:	701a      	strb	r2, [r3, #0]
	 DWT_Delay_us (300);
 8002b4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002b50:	f000 fb48 	bl	80031e4 <DWT_Delay_us>
	 DS18B20_Write (0xCC);  // skip ROM
 8002b54:	20cc      	movs	r0, #204	; 0xcc
 8002b56:	f000 fb9d 	bl	8003294 <DS18B20_Write>
	 DS18B20_Write (0xBE);  // Read Scratch-pad
 8002b5a:	20be      	movs	r0, #190	; 0xbe
 8002b5c:	f000 fb9a 	bl	8003294 <DS18B20_Write>

	 Temp_byte1 = DS18B20_Read();
 8002b60:	f000 fbde 	bl	8003320 <DS18B20_Read>
 8002b64:	4603      	mov	r3, r0
 8002b66:	461a      	mov	r2, r3
 8002b68:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <readWaterTemp+0xc4>)
 8002b6a:	701a      	strb	r2, [r3, #0]
	 Temp_byte2 = DS18B20_Read();
 8002b6c:	f000 fbd8 	bl	8003320 <DS18B20_Read>
 8002b70:	4603      	mov	r3, r0
 8002b72:	461a      	mov	r2, r3
 8002b74:	4b16      	ldr	r3, [pc, #88]	; (8002bd0 <readWaterTemp+0xc8>)
 8002b76:	701a      	strb	r2, [r3, #0]
	 TEMP = (Temp_byte2<<8)|Temp_byte1;
 8002b78:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <readWaterTemp+0xc8>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	b21a      	sxth	r2, r3
 8002b80:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <readWaterTemp+0xc4>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	b21b      	sxth	r3, r3
 8002b86:	4313      	orrs	r3, r2
 8002b88:	b21b      	sxth	r3, r3
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <readWaterTemp+0xcc>)
 8002b8e:	801a      	strh	r2, [r3, #0]
	 Temperature = (float)TEMP/16;
 8002b90:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <readWaterTemp+0xcc>)
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe f89b 	bl	8000cd0 <__aeabi_ui2f>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fe f9a1 	bl	8000ee8 <__aeabi_fdiv>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fd fc71 	bl	8000490 <__aeabi_f2d>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4909      	ldr	r1, [pc, #36]	; (8002bd8 <readWaterTemp+0xd0>)
 8002bb4:	e9c1 2300 	strd	r2, r3, [r1]
	 return Temperature;
 8002bb8:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <readWaterTemp+0xd0>)
 8002bba:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40020400 	.word	0x40020400
 8002bc8:	200000b8 	.word	0x200000b8
 8002bcc:	200003c4 	.word	0x200003c4
 8002bd0:	20000444 	.word	0x20000444
 8002bd4:	20000348 	.word	0x20000348
 8002bd8:	200000c0 	.word	0x200000c0
 8002bdc:	00000000 	.word	0x00000000

08002be0 <readWaterTDS>:
#define SCOUNT  30           	// sum of sample point
int nutrientBuffer[SCOUNT],analogBufferTemp[SCOUNT], copyIndex = 0;  // store the analog value in the array, read from ADC
float averageVoltage = 0,tdsValue = 0,temperature = 25,compensationCoefficient = 0,compensationVolatge = 0;

float readWaterTDS() // Get nutrient level
{
 8002be0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
	for(int i = 0; i<SCOUNT+10; i++)
 8002be8:	2300      	movs	r3, #0
 8002bea:	607b      	str	r3, [r7, #4]
 8002bec:	e012      	b.n	8002c14 <readWaterTDS+0x34>
	{
		get_nutrient_ph_value();
 8002bee:	f000 f911 	bl	8002e14 <get_nutrient_ph_value>
		if(i>9)nutrientBuffer[i-10] = nutrient_ph_values[1];  		 // skip first 10 values since they are way off (pH: position 0 Nutrient: position 1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b09      	cmp	r3, #9
 8002bf6:	dd07      	ble.n	8002c08 <readWaterTDS+0x28>
 8002bf8:	4b79      	ldr	r3, [pc, #484]	; (8002de0 <readWaterTDS+0x200>)
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3b0a      	subs	r3, #10
 8002c00:	4611      	mov	r1, r2
 8002c02:	4a78      	ldr	r2, [pc, #480]	; (8002de4 <readWaterTDS+0x204>)
 8002c04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    HAL_Delay(1);
 8002c08:	2001      	movs	r0, #1
 8002c0a:	f000 fc9b 	bl	8003544 <HAL_Delay>
	for(int i = 0; i<SCOUNT+10; i++)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3301      	adds	r3, #1
 8002c12:	607b      	str	r3, [r7, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b27      	cmp	r3, #39	; 0x27
 8002c18:	dde9      	ble.n	8002bee <readWaterTDS+0xe>
	}

    for(copyIndex=0;copyIndex<SCOUNT;copyIndex++) analogBufferTemp[copyIndex]= nutrientBuffer[copyIndex];
 8002c1a:	4b73      	ldr	r3, [pc, #460]	; (8002de8 <readWaterTDS+0x208>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	e00e      	b.n	8002c40 <readWaterTDS+0x60>
 8002c22:	4b71      	ldr	r3, [pc, #452]	; (8002de8 <readWaterTDS+0x208>)
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	4b70      	ldr	r3, [pc, #448]	; (8002de8 <readWaterTDS+0x208>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	496e      	ldr	r1, [pc, #440]	; (8002de4 <readWaterTDS+0x204>)
 8002c2c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002c30:	496e      	ldr	r1, [pc, #440]	; (8002dec <readWaterTDS+0x20c>)
 8002c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002c36:	4b6c      	ldr	r3, [pc, #432]	; (8002de8 <readWaterTDS+0x208>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	4a6a      	ldr	r2, [pc, #424]	; (8002de8 <readWaterTDS+0x208>)
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4b69      	ldr	r3, [pc, #420]	; (8002de8 <readWaterTDS+0x208>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b1d      	cmp	r3, #29
 8002c46:	ddec      	ble.n	8002c22 <readWaterTDS+0x42>
    averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)0.000805664; 																					// read the analog value more stable by averaging and convert to voltage value
 8002c48:	211e      	movs	r1, #30
 8002c4a:	4868      	ldr	r0, [pc, #416]	; (8002dec <readWaterTDS+0x20c>)
 8002c4c:	f7fe fc96 	bl	800157c <getMedianNum>
 8002c50:	4603      	mov	r3, r0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe f840 	bl	8000cd8 <__aeabi_i2f>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	4965      	ldr	r1, [pc, #404]	; (8002df0 <readWaterTDS+0x210>)
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe f88f 	bl	8000d80 <__aeabi_fmul>
 8002c62:	4603      	mov	r3, r0
 8002c64:	461a      	mov	r2, r3
 8002c66:	4b63      	ldr	r3, [pc, #396]	; (8002df4 <readWaterTDS+0x214>)
 8002c68:	601a      	str	r2, [r3, #0]
    compensationCoefficient=1.0+0.02*(temperature-25.0);   																								    //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
 8002c6a:	4b63      	ldr	r3, [pc, #396]	; (8002df8 <readWaterTDS+0x218>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd fc0e 	bl	8000490 <__aeabi_f2d>
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	4b60      	ldr	r3, [pc, #384]	; (8002dfc <readWaterTDS+0x21c>)
 8002c7a:	f7fd faa9 	bl	80001d0 <__aeabi_dsub>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4610      	mov	r0, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	a34e      	add	r3, pc, #312	; (adr r3, 8002dc0 <readWaterTDS+0x1e0>)
 8002c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8c:	f7fd fc58 	bl	8000540 <__aeabi_dmul>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4610      	mov	r0, r2
 8002c96:	4619      	mov	r1, r3
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	4b58      	ldr	r3, [pc, #352]	; (8002e00 <readWaterTDS+0x220>)
 8002c9e:	f7fd fa99 	bl	80001d4 <__adddf3>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f7fd ff0b 	bl	8000ac4 <__aeabi_d2f>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4a54      	ldr	r2, [pc, #336]	; (8002e04 <readWaterTDS+0x224>)
 8002cb2:	6013      	str	r3, [r2, #0]
    compensationVolatge=averageVoltage/compensationCoefficient;  																								//temperature compensation
 8002cb4:	4b4f      	ldr	r3, [pc, #316]	; (8002df4 <readWaterTDS+0x214>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a52      	ldr	r2, [pc, #328]	; (8002e04 <readWaterTDS+0x224>)
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fe f912 	bl	8000ee8 <__aeabi_fdiv>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	4b4f      	ldr	r3, [pc, #316]	; (8002e08 <readWaterTDS+0x228>)
 8002cca:	601a      	str	r2, [r3, #0]
    tdsValue=(133.42*compensationVolatge*compensationVolatge*compensationVolatge - 255.86*compensationVolatge*compensationVolatge + 857.39*compensationVolatge)*0.5; //convert voltage value to tds value
 8002ccc:	4b4e      	ldr	r3, [pc, #312]	; (8002e08 <readWaterTDS+0x228>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fbdd 	bl	8000490 <__aeabi_f2d>
 8002cd6:	a33c      	add	r3, pc, #240	; (adr r3, 8002dc8 <readWaterTDS+0x1e8>)
 8002cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cdc:	f7fd fc30 	bl	8000540 <__aeabi_dmul>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4614      	mov	r4, r2
 8002ce6:	461d      	mov	r5, r3
 8002ce8:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <readWaterTDS+0x228>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fd fbcf 	bl	8000490 <__aeabi_f2d>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	4629      	mov	r1, r5
 8002cfa:	f7fd fc21 	bl	8000540 <__aeabi_dmul>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4614      	mov	r4, r2
 8002d04:	461d      	mov	r5, r3
 8002d06:	4b40      	ldr	r3, [pc, #256]	; (8002e08 <readWaterTDS+0x228>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fd fbc0 	bl	8000490 <__aeabi_f2d>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4620      	mov	r0, r4
 8002d16:	4629      	mov	r1, r5
 8002d18:	f7fd fc12 	bl	8000540 <__aeabi_dmul>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4614      	mov	r4, r2
 8002d22:	461d      	mov	r5, r3
 8002d24:	4b38      	ldr	r3, [pc, #224]	; (8002e08 <readWaterTDS+0x228>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fd fbb1 	bl	8000490 <__aeabi_f2d>
 8002d2e:	a328      	add	r3, pc, #160	; (adr r3, 8002dd0 <readWaterTDS+0x1f0>)
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	f7fd fc04 	bl	8000540 <__aeabi_dmul>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4690      	mov	r8, r2
 8002d3e:	4699      	mov	r9, r3
 8002d40:	4b31      	ldr	r3, [pc, #196]	; (8002e08 <readWaterTDS+0x228>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fd fba3 	bl	8000490 <__aeabi_f2d>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4640      	mov	r0, r8
 8002d50:	4649      	mov	r1, r9
 8002d52:	f7fd fbf5 	bl	8000540 <__aeabi_dmul>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	4629      	mov	r1, r5
 8002d5e:	f7fd fa37 	bl	80001d0 <__aeabi_dsub>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4614      	mov	r4, r2
 8002d68:	461d      	mov	r5, r3
 8002d6a:	4b27      	ldr	r3, [pc, #156]	; (8002e08 <readWaterTDS+0x228>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fb8e 	bl	8000490 <__aeabi_f2d>
 8002d74:	a318      	add	r3, pc, #96	; (adr r3, 8002dd8 <readWaterTDS+0x1f8>)
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	f7fd fbe1 	bl	8000540 <__aeabi_dmul>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4620      	mov	r0, r4
 8002d84:	4629      	mov	r1, r5
 8002d86:	f7fd fa25 	bl	80001d4 <__adddf3>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4610      	mov	r0, r2
 8002d90:	4619      	mov	r1, r3
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <readWaterTDS+0x22c>)
 8002d98:	f7fd fbd2 	bl	8000540 <__aeabi_dmul>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4610      	mov	r0, r2
 8002da2:	4619      	mov	r1, r3
 8002da4:	f7fd fe8e 	bl	8000ac4 <__aeabi_d2f>
 8002da8:	4603      	mov	r3, r0
 8002daa:	4a19      	ldr	r2, [pc, #100]	; (8002e10 <readWaterTDS+0x230>)
 8002dac:	6013      	str	r3, [r2, #0]
    return tdsValue;
 8002dae:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <readWaterTDS+0x230>)
 8002db0:	681b      	ldr	r3, [r3, #0]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002dbc:	f3af 8000 	nop.w
 8002dc0:	47ae147b 	.word	0x47ae147b
 8002dc4:	3f947ae1 	.word	0x3f947ae1
 8002dc8:	a3d70a3d 	.word	0xa3d70a3d
 8002dcc:	4060ad70 	.word	0x4060ad70
 8002dd0:	1eb851ec 	.word	0x1eb851ec
 8002dd4:	406ffb85 	.word	0x406ffb85
 8002dd8:	b851eb85 	.word	0xb851eb85
 8002ddc:	408acb1e 	.word	0x408acb1e
 8002de0:	20000098 	.word	0x20000098
 8002de4:	2000034c 	.word	0x2000034c
 8002de8:	200000c8 	.word	0x200000c8
 8002dec:	200003cc 	.word	0x200003cc
 8002df0:	3a533332 	.word	0x3a533332
 8002df4:	200000cc 	.word	0x200000cc
 8002df8:	20000014 	.word	0x20000014
 8002dfc:	40390000 	.word	0x40390000
 8002e00:	3ff00000 	.word	0x3ff00000
 8002e04:	200000d4 	.word	0x200000d4
 8002e08:	200000d8 	.word	0x200000d8
 8002e0c:	3fe00000 	.word	0x3fe00000
 8002e10:	200000d0 	.word	0x200000d0

08002e14 <get_nutrient_ph_value>:

void get_nutrient_ph_value()	// gets nutrient and ph values from the ADC and places it in a buffer
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
	nutrient_ph_values[0] = get_ADC_values(1);
 8002e18:	2001      	movs	r0, #1
 8002e1a:	f7fe fb39 	bl	8001490 <get_ADC_values>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fe f999 	bl	8001158 <__aeabi_f2uiz>
 8002e26:	4603      	mov	r3, r0
 8002e28:	4a06      	ldr	r2, [pc, #24]	; (8002e44 <get_nutrient_ph_value+0x30>)
 8002e2a:	6013      	str	r3, [r2, #0]
	nutrient_ph_values[1] = get_ADC_values(0);
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f7fe fb2f 	bl	8001490 <get_ADC_values>
 8002e32:	4603      	mov	r3, r0
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fe f98f 	bl	8001158 <__aeabi_f2uiz>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	4a01      	ldr	r2, [pc, #4]	; (8002e44 <get_nutrient_ph_value+0x30>)
 8002e3e:	6053      	str	r3, [r2, #4]
}
 8002e40:	bf00      	nop
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20000098 	.word	0x20000098

08002e48 <readPH>:
{

}
float mili_voltage,ph_value = 0;
float readPH()
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
	mili_voltage = read_voltage();
 8002e4c:	f7ff fa00 	bl	8002250 <read_voltage>
 8002e50:	4603      	mov	r3, r0
 8002e52:	4a07      	ldr	r2, [pc, #28]	; (8002e70 <readPH+0x28>)
 8002e54:	6013      	str	r3, [r2, #0]
	ph_value = convert_ph(mili_voltage);
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <readPH+0x28>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff fa98 	bl	8002390 <convert_ph>
 8002e60:	4603      	mov	r3, r0
 8002e62:	4a04      	ldr	r2, [pc, #16]	; (8002e74 <readPH+0x2c>)
 8002e64:	6013      	str	r3, [r2, #0]
	return ph_value;
 8002e66:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <readPH+0x2c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	200003c8 	.word	0x200003c8
 8002e74:	200000dc 	.word	0x200000dc

08002e78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <HAL_MspInit+0x48>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	4a0e      	ldr	r2, [pc, #56]	; (8002ec0 <HAL_MspInit+0x48>)
 8002e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <HAL_MspInit+0x48>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e96:	607b      	str	r3, [r7, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	603b      	str	r3, [r7, #0]
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <HAL_MspInit+0x48>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	4a07      	ldr	r2, [pc, #28]	; (8002ec0 <HAL_MspInit+0x48>)
 8002ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eaa:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <HAL_MspInit+0x48>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	40023800 	.word	0x40023800

08002ec4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	; 0x28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ecc:	f107 0314 	add.w	r3, r7, #20
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a17      	ldr	r2, [pc, #92]	; (8002f40 <HAL_ADC_MspInit+0x7c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d127      	bne.n	8002f36 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <HAL_ADC_MspInit+0x80>)
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	4a15      	ldr	r2, [pc, #84]	; (8002f44 <HAL_ADC_MspInit+0x80>)
 8002ef0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ef6:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <HAL_ADC_MspInit+0x80>)
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <HAL_ADC_MspInit+0x80>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	4a0e      	ldr	r2, [pc, #56]	; (8002f44 <HAL_ADC_MspInit+0x80>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	6313      	str	r3, [r2, #48]	; 0x30
 8002f12:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <HAL_ADC_MspInit+0x80>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN4
    PA5     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = water_ph_Pin|nutrient_level_Pin;
 8002f1e:	2330      	movs	r3, #48	; 0x30
 8002f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f22:	2303      	movs	r3, #3
 8002f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2a:	f107 0314 	add.w	r3, r7, #20
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4805      	ldr	r0, [pc, #20]	; (8002f48 <HAL_ADC_MspInit+0x84>)
 8002f32:	f000 ffb9 	bl	8003ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002f36:	bf00      	nop
 8002f38:	3728      	adds	r7, #40	; 0x28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40012100 	.word	0x40012100
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40020000 	.word	0x40020000

08002f4c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a05      	ldr	r2, [pc, #20]	; (8002f70 <HAL_RTC_MspInit+0x24>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d102      	bne.n	8002f64 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f5e:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_RTC_MspInit+0x28>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40002800 	.word	0x40002800
 8002f74:	42470e3c 	.word	0x42470e3c

08002f78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b089      	sub	sp, #36	; 0x24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a32      	ldr	r2, [pc, #200]	; (8003050 <HAL_TIM_Base_MspInit+0xd8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d10e      	bne.n	8002fa8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	4b31      	ldr	r3, [pc, #196]	; (8003054 <HAL_TIM_Base_MspInit+0xdc>)
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	4a30      	ldr	r2, [pc, #192]	; (8003054 <HAL_TIM_Base_MspInit+0xdc>)
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	6453      	str	r3, [r2, #68]	; 0x44
 8002f9a:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <HAL_TIM_Base_MspInit+0xdc>)
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	61fb      	str	r3, [r7, #28]
 8002fa4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002fa6:	e04e      	b.n	8003046 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb0:	d10e      	bne.n	8002fd0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61bb      	str	r3, [r7, #24]
 8002fb6:	4b27      	ldr	r3, [pc, #156]	; (8003054 <HAL_TIM_Base_MspInit+0xdc>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	4a26      	ldr	r2, [pc, #152]	; (8003054 <HAL_TIM_Base_MspInit+0xdc>)
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc2:	4b24      	ldr	r3, [pc, #144]	; (8003054 <HAL_TIM_Base_MspInit+0xdc>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	61bb      	str	r3, [r7, #24]
 8002fcc:	69bb      	ldr	r3, [r7, #24]
}
 8002fce:	e03a      	b.n	8003046 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM4)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a20      	ldr	r2, [pc, #128]	; (8003058 <HAL_TIM_Base_MspInit+0xe0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d10e      	bne.n	8002ff8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <HAL_TIM_Base_MspInit+0xdc>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	4a1c      	ldr	r2, [pc, #112]	; (8003054 <HAL_TIM_Base_MspInit+0xdc>)
 8002fe4:	f043 0304 	orr.w	r3, r3, #4
 8002fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fea:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <HAL_TIM_Base_MspInit+0xdc>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	697b      	ldr	r3, [r7, #20]
}
 8002ff6:	e026      	b.n	8003046 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM10)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a17      	ldr	r2, [pc, #92]	; (800305c <HAL_TIM_Base_MspInit+0xe4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d10e      	bne.n	8003020 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	4b13      	ldr	r3, [pc, #76]	; (8003054 <HAL_TIM_Base_MspInit+0xdc>)
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	4a12      	ldr	r2, [pc, #72]	; (8003054 <HAL_TIM_Base_MspInit+0xdc>)
 800300c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003010:	6453      	str	r3, [r2, #68]	; 0x44
 8003012:	4b10      	ldr	r3, [pc, #64]	; (8003054 <HAL_TIM_Base_MspInit+0xdc>)
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	693b      	ldr	r3, [r7, #16]
}
 800301e:	e012      	b.n	8003046 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM12)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a0e      	ldr	r2, [pc, #56]	; (8003060 <HAL_TIM_Base_MspInit+0xe8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d10d      	bne.n	8003046 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	4b09      	ldr	r3, [pc, #36]	; (8003054 <HAL_TIM_Base_MspInit+0xdc>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	4a08      	ldr	r2, [pc, #32]	; (8003054 <HAL_TIM_Base_MspInit+0xdc>)
 8003034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003038:	6413      	str	r3, [r2, #64]	; 0x40
 800303a:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_TIM_Base_MspInit+0xdc>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
}
 8003046:	bf00      	nop
 8003048:	3724      	adds	r7, #36	; 0x24
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr
 8003050:	40010000 	.word	0x40010000
 8003054:	40023800 	.word	0x40023800
 8003058:	40000800 	.word	0x40000800
 800305c:	40014400 	.word	0x40014400
 8003060:	40001800 	.word	0x40001800

08003064 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	; 0x28
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306c:	f107 0314 	add.w	r3, r7, #20
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	60da      	str	r2, [r3, #12]
 800307a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a24      	ldr	r2, [pc, #144]	; (8003114 <HAL_TIM_MspPostInit+0xb0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d11f      	bne.n	80030c6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	4b23      	ldr	r3, [pc, #140]	; (8003118 <HAL_TIM_MspPostInit+0xb4>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	4a22      	ldr	r2, [pc, #136]	; (8003118 <HAL_TIM_MspPostInit+0xb4>)
 8003090:	f043 0310 	orr.w	r3, r3, #16
 8003094:	6313      	str	r3, [r2, #48]	; 0x30
 8003096:	4b20      	ldr	r3, [pc, #128]	; (8003118 <HAL_TIM_MspPostInit+0xb4>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = heat_cool_fan_speed_Pin|system_fan_speed_Pin;
 80030a2:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80030a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a8:	2302      	movs	r3, #2
 80030aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b0:	2300      	movs	r3, #0
 80030b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030b4:	2301      	movs	r3, #1
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030b8:	f107 0314 	add.w	r3, r7, #20
 80030bc:	4619      	mov	r1, r3
 80030be:	4817      	ldr	r0, [pc, #92]	; (800311c <HAL_TIM_MspPostInit+0xb8>)
 80030c0:	f000 fef2 	bl	8003ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80030c4:	e022      	b.n	800310c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM10)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a15      	ldr	r2, [pc, #84]	; (8003120 <HAL_TIM_MspPostInit+0xbc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d11d      	bne.n	800310c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	4b10      	ldr	r3, [pc, #64]	; (8003118 <HAL_TIM_MspPostInit+0xb4>)
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	4a0f      	ldr	r2, [pc, #60]	; (8003118 <HAL_TIM_MspPostInit+0xb4>)
 80030da:	f043 0320 	orr.w	r3, r3, #32
 80030de:	6313      	str	r3, [r2, #48]	; 0x30
 80030e0:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <HAL_TIM_MspPostInit+0xb4>)
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = plant_fan_speed_Pin;
 80030ec:	2340      	movs	r3, #64	; 0x40
 80030ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f0:	2302      	movs	r3, #2
 80030f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f8:	2300      	movs	r3, #0
 80030fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80030fc:	2303      	movs	r3, #3
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(plant_fan_speed_GPIO_Port, &GPIO_InitStruct);
 8003100:	f107 0314 	add.w	r3, r7, #20
 8003104:	4619      	mov	r1, r3
 8003106:	4807      	ldr	r0, [pc, #28]	; (8003124 <HAL_TIM_MspPostInit+0xc0>)
 8003108:	f000 fece 	bl	8003ea8 <HAL_GPIO_Init>
}
 800310c:	bf00      	nop
 800310e:	3728      	adds	r7, #40	; 0x28
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40010000 	.word	0x40010000
 8003118:	40023800 	.word	0x40023800
 800311c:	40021000 	.word	0x40021000
 8003120:	40014400 	.word	0x40014400
 8003124:	40021400 	.word	0x40021400

08003128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800312c:	e7fe      	b.n	800312c <NMI_Handler+0x4>

0800312e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800312e:	b480      	push	{r7}
 8003130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003132:	e7fe      	b.n	8003132 <HardFault_Handler+0x4>

08003134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003138:	e7fe      	b.n	8003138 <MemManage_Handler+0x4>

0800313a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800313a:	b480      	push	{r7}
 800313c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800313e:	e7fe      	b.n	800313e <BusFault_Handler+0x4>

08003140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003144:	e7fe      	b.n	8003144 <UsageFault_Handler+0x4>

08003146 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003146:	b480      	push	{r7}
 8003148:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr

08003152 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003152:	b480      	push	{r7}
 8003154:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr

0800315e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr

0800316a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800316e:	f000 f9cd 	bl	800350c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003172:	bf00      	nop
 8003174:	bd80      	pop	{r7, pc}

08003176 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003176:	b480      	push	{r7}
 8003178:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800317a:	bf00      	nop
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr
	...

08003184 <DWT_Delay_Init>:
#include "main.h"
#include "sensors.h"
#include "water_temp_driver.h"

uint32_t DWT_Delay_Init(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8003188:	4b14      	ldr	r3, [pc, #80]	; (80031dc <DWT_Delay_Init+0x58>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4a13      	ldr	r2, [pc, #76]	; (80031dc <DWT_Delay_Init+0x58>)
 800318e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003192:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <DWT_Delay_Init+0x58>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4a10      	ldr	r2, [pc, #64]	; (80031dc <DWT_Delay_Init+0x58>)
 800319a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800319e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80031a0:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <DWT_Delay_Init+0x5c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0e      	ldr	r2, [pc, #56]	; (80031e0 <DWT_Delay_Init+0x5c>)
 80031a6:	f023 0301 	bic.w	r3, r3, #1
 80031aa:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <DWT_Delay_Init+0x5c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a0b      	ldr	r2, [pc, #44]	; (80031e0 <DWT_Delay_Init+0x5c>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80031b8:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <DWT_Delay_Init+0x5c>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80031be:	bf00      	nop
    __ASM volatile ("NOP");
 80031c0:	bf00      	nop
    __ASM volatile ("NOP");
 80031c2:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <DWT_Delay_Init+0x5c>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80031cc:	2300      	movs	r3, #0
 80031ce:	e000      	b.n	80031d2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80031d0:	2301      	movs	r3, #1
    }
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	e000edf0 	.word	0xe000edf0
 80031e0:	e0001000 	.word	0xe0001000

080031e4 <DWT_Delay_us>:

 void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80031ec:	4b0f      	ldr	r3, [pc, #60]	; (800322c <DWT_Delay_us+0x48>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80031f2:	f001 fc31 	bl	8004a58 <HAL_RCC_GetHCLKFreq>
 80031f6:	4603      	mov	r3, r0
 80031f8:	4a0d      	ldr	r2, [pc, #52]	; (8003230 <DWT_Delay_us+0x4c>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	0c9b      	lsrs	r3, r3, #18
 8003200:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 800320c:	bf00      	nop
 800320e:	4b07      	ldr	r3, [pc, #28]	; (800322c <DWT_Delay_us+0x48>)
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1ad2      	subs	r2, r2, r3
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	1acb      	subs	r3, r1, r3
 800321c:	429a      	cmp	r2, r3
 800321e:	d3f6      	bcc.n	800320e <DWT_Delay_us+0x2a>
}
 8003220:	bf00      	nop
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	e0001000 	.word	0xe0001000
 8003230:	431bde83 	.word	0x431bde83

08003234 <DS18B20_Start>:


uint8_t DS18B20_Start (void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set the pin as output
 800323e:	2104      	movs	r1, #4
 8003240:	4813      	ldr	r0, [pc, #76]	; (8003290 <DS18B20_Start+0x5c>)
 8003242:	f000 f8ab 	bl	800339c <Set_Pin_Output>
	HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin low
 8003246:	2200      	movs	r2, #0
 8003248:	2104      	movs	r1, #4
 800324a:	4811      	ldr	r0, [pc, #68]	; (8003290 <DS18B20_Start+0x5c>)
 800324c:	f000 ffe1 	bl	8004212 <HAL_GPIO_WritePin>
	DWT_Delay_us (480);   // delay according to datasheet
 8003250:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003254:	f7ff ffc6 	bl	80031e4 <DWT_Delay_us>

	Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);    // set the pin as input
 8003258:	2104      	movs	r1, #4
 800325a:	480d      	ldr	r0, [pc, #52]	; (8003290 <DS18B20_Start+0x5c>)
 800325c:	f000 f8bc 	bl	80033d8 <Set_Pin_Input>
	DWT_Delay_us (80);    // delay according to datasheet
 8003260:	2050      	movs	r0, #80	; 0x50
 8003262:	f7ff ffbf 	bl	80031e4 <DWT_Delay_us>

	if (!(HAL_GPIO_ReadPin (water_temp_GPIO_Port, water_temp_Pin))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8003266:	2104      	movs	r1, #4
 8003268:	4809      	ldr	r0, [pc, #36]	; (8003290 <DS18B20_Start+0x5c>)
 800326a:	f000 ffbb 	bl	80041e4 <HAL_GPIO_ReadPin>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d102      	bne.n	800327a <DS18B20_Start+0x46>
 8003274:	2301      	movs	r3, #1
 8003276:	71fb      	strb	r3, [r7, #7]
 8003278:	e001      	b.n	800327e <DS18B20_Start+0x4a>
	else Response = -1;
 800327a:	23ff      	movs	r3, #255	; 0xff
 800327c:	71fb      	strb	r3, [r7, #7]

	DWT_Delay_us (400); // 480 us delay totally.
 800327e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003282:	f7ff ffaf 	bl	80031e4 <DWT_Delay_us>

	return Response;
 8003286:	79fb      	ldrb	r3, [r7, #7]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40020400 	.word	0x40020400

08003294 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);  // set as output
 800329e:	2104      	movs	r1, #4
 80032a0:	481e      	ldr	r0, [pc, #120]	; (800331c <DS18B20_Write+0x88>)
 80032a2:	f000 f87b 	bl	800339c <Set_Pin_Output>

	for (int i=0; i<8; i++)
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	e02e      	b.n	800330a <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 80032ac:	79fa      	ldrb	r2, [r7, #7]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	fa42 f303 	asr.w	r3, r2, r3
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);  // set as output
 80032bc:	2104      	movs	r1, #4
 80032be:	4817      	ldr	r0, [pc, #92]	; (800331c <DS18B20_Write+0x88>)
 80032c0:	f000 f86c 	bl	800339c <Set_Pin_Output>
			HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin LOW
 80032c4:	2200      	movs	r2, #0
 80032c6:	2104      	movs	r1, #4
 80032c8:	4814      	ldr	r0, [pc, #80]	; (800331c <DS18B20_Write+0x88>)
 80032ca:	f000 ffa2 	bl	8004212 <HAL_GPIO_WritePin>
			DWT_Delay_us (5);  // wait for 1 us
 80032ce:	2005      	movs	r0, #5
 80032d0:	f7ff ff88 	bl	80031e4 <DWT_Delay_us>

			Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);  // set as input
 80032d4:	2104      	movs	r1, #4
 80032d6:	4811      	ldr	r0, [pc, #68]	; (800331c <DS18B20_Write+0x88>)
 80032d8:	f000 f87e 	bl	80033d8 <Set_Pin_Input>
			DWT_Delay_us (65);  // wait for 60 us
 80032dc:	2041      	movs	r0, #65	; 0x41
 80032de:	f7ff ff81 	bl	80031e4 <DWT_Delay_us>
 80032e2:	e00f      	b.n	8003304 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);
 80032e4:	2104      	movs	r1, #4
 80032e6:	480d      	ldr	r0, [pc, #52]	; (800331c <DS18B20_Write+0x88>)
 80032e8:	f000 f858 	bl	800339c <Set_Pin_Output>
			HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin LOW
 80032ec:	2200      	movs	r2, #0
 80032ee:	2104      	movs	r1, #4
 80032f0:	480a      	ldr	r0, [pc, #40]	; (800331c <DS18B20_Write+0x88>)
 80032f2:	f000 ff8e 	bl	8004212 <HAL_GPIO_WritePin>
			DWT_Delay_us (65);  // wait for 60 us
 80032f6:	2041      	movs	r0, #65	; 0x41
 80032f8:	f7ff ff74 	bl	80031e4 <DWT_Delay_us>

			Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);
 80032fc:	2104      	movs	r1, #4
 80032fe:	4807      	ldr	r0, [pc, #28]	; (800331c <DS18B20_Write+0x88>)
 8003300:	f000 f86a 	bl	80033d8 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3301      	adds	r3, #1
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b07      	cmp	r3, #7
 800330e:	ddcd      	ble.n	80032ac <DS18B20_Write+0x18>
		}
	}
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40020400 	.word	0x40020400

08003320 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8003326:	2300      	movs	r3, #0
 8003328:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);
 800332a:	2104      	movs	r1, #4
 800332c:	481a      	ldr	r0, [pc, #104]	; (8003398 <DS18B20_Read+0x78>)
 800332e:	f000 f853 	bl	80033d8 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 8003332:	2300      	movs	r3, #0
 8003334:	603b      	str	r3, [r7, #0]
 8003336:	e026      	b.n	8003386 <DS18B20_Read+0x66>
	{
		Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set as output
 8003338:	2104      	movs	r1, #4
 800333a:	4817      	ldr	r0, [pc, #92]	; (8003398 <DS18B20_Read+0x78>)
 800333c:	f000 f82e 	bl	800339c <Set_Pin_Output>

		HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the data pin LOW
 8003340:	2200      	movs	r2, #0
 8003342:	2104      	movs	r1, #4
 8003344:	4814      	ldr	r0, [pc, #80]	; (8003398 <DS18B20_Read+0x78>)
 8003346:	f000 ff64 	bl	8004212 <HAL_GPIO_WritePin>
		DWT_Delay_us (5);  // wait for > 1us
 800334a:	2005      	movs	r0, #5
 800334c:	f7ff ff4a 	bl	80031e4 <DWT_Delay_us>

		Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);  // set as input
 8003350:	2104      	movs	r1, #4
 8003352:	4811      	ldr	r0, [pc, #68]	; (8003398 <DS18B20_Read+0x78>)
 8003354:	f000 f840 	bl	80033d8 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (water_temp_GPIO_Port, water_temp_Pin))  // if the pin is HIGH
 8003358:	2104      	movs	r1, #4
 800335a:	480f      	ldr	r0, [pc, #60]	; (8003398 <DS18B20_Read+0x78>)
 800335c:	f000 ff42 	bl	80041e4 <HAL_GPIO_ReadPin>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 8003366:	2201      	movs	r2, #1
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	b25a      	sxtb	r2, r3
 8003370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003374:	4313      	orrs	r3, r2
 8003376:	b25b      	sxtb	r3, r3
 8003378:	71fb      	strb	r3, [r7, #7]
		}
		DWT_Delay_us (50);  // wait for 60 us
 800337a:	2032      	movs	r0, #50	; 0x32
 800337c:	f7ff ff32 	bl	80031e4 <DWT_Delay_us>
	for (int i=0;i<8;i++)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	3301      	adds	r3, #1
 8003384:	603b      	str	r3, [r7, #0]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b07      	cmp	r3, #7
 800338a:	ddd5      	ble.n	8003338 <DS18B20_Read+0x18>
	}
	return value;
 800338c:	79fb      	ldrb	r3, [r7, #7]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40020400 	.word	0x40020400

0800339c <Set_Pin_Output>:


void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a8:	f107 030c 	add.w	r3, r7, #12
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	60da      	str	r2, [r3, #12]
 80033b6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80033b8:	887b      	ldrh	r3, [r7, #2]
 80033ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033bc:	2301      	movs	r3, #1
 80033be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80033c4:	f107 030c 	add.w	r3, r7, #12
 80033c8:	4619      	mov	r1, r3
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fd6c 	bl	8003ea8 <HAL_GPIO_Init>
}
 80033d0:	bf00      	nop
 80033d2:	3720      	adds	r7, #32
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e4:	f107 030c 	add.w	r3, r7, #12
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	60da      	str	r2, [r3, #12]
 80033f2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80033f4:	887b      	ldrh	r3, [r7, #2]
 80033f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033f8:	2300      	movs	r3, #0
 80033fa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033fc:	2301      	movs	r3, #1
 80033fe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003400:	f107 030c 	add.w	r3, r7, #12
 8003404:	4619      	mov	r1, r3
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fd4e 	bl	8003ea8 <HAL_GPIO_Init>
}
 800340c:	bf00      	nop
 800340e:	3720      	adds	r7, #32
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800344c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003418:	480d      	ldr	r0, [pc, #52]	; (8003450 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800341a:	490e      	ldr	r1, [pc, #56]	; (8003454 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800341c:	4a0e      	ldr	r2, [pc, #56]	; (8003458 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800341e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003420:	e002      	b.n	8003428 <LoopCopyDataInit>

08003422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003426:	3304      	adds	r3, #4

08003428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800342a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800342c:	d3f9      	bcc.n	8003422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800342e:	4a0b      	ldr	r2, [pc, #44]	; (800345c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003430:	4c0b      	ldr	r4, [pc, #44]	; (8003460 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003434:	e001      	b.n	800343a <LoopFillZerobss>

08003436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003438:	3204      	adds	r2, #4

0800343a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800343a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800343c:	d3fb      	bcc.n	8003436 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800343e:	f7ff fe9a 	bl	8003176 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003442:	f002 ffd9 	bl	80063f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003446:	f7fe faad 	bl	80019a4 <main>
  bx  lr
 800344a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800344c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8003450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003454:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8003458:	08006488 	.word	0x08006488
  ldr r2, =_sbss
 800345c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8003460:	2000044c 	.word	0x2000044c

08003464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003464:	e7fe      	b.n	8003464 <ADC_IRQHandler>
	...

08003468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800346c:	4b0e      	ldr	r3, [pc, #56]	; (80034a8 <HAL_Init+0x40>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a0d      	ldr	r2, [pc, #52]	; (80034a8 <HAL_Init+0x40>)
 8003472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003476:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <HAL_Init+0x40>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <HAL_Init+0x40>)
 800347e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003482:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003484:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <HAL_Init+0x40>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a07      	ldr	r2, [pc, #28]	; (80034a8 <HAL_Init+0x40>)
 800348a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800348e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003490:	2003      	movs	r0, #3
 8003492:	f000 fcd5 	bl	8003e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003496:	200f      	movs	r0, #15
 8003498:	f000 f808 	bl	80034ac <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800349c:	f7ff fcec 	bl	8002e78 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40023c00 	.word	0x40023c00

080034ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034b4:	4b12      	ldr	r3, [pc, #72]	; (8003500 <HAL_InitTick+0x54>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b12      	ldr	r3, [pc, #72]	; (8003504 <HAL_InitTick+0x58>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	4619      	mov	r1, r3
 80034be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fcdf 	bl	8003e8e <HAL_SYSTICK_Config>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e00e      	b.n	80034f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b0f      	cmp	r3, #15
 80034de:	d80a      	bhi.n	80034f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034e0:	2200      	movs	r2, #0
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	f04f 30ff 	mov.w	r0, #4294967295
 80034e8:	f000 fcb5 	bl	8003e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034ec:	4a06      	ldr	r2, [pc, #24]	; (8003508 <HAL_InitTick+0x5c>)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	e000      	b.n	80034f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20000018 	.word	0x20000018
 8003504:	20000020 	.word	0x20000020
 8003508:	2000001c 	.word	0x2000001c

0800350c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_IncTick+0x1c>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	461a      	mov	r2, r3
 8003516:	4b05      	ldr	r3, [pc, #20]	; (800352c <HAL_IncTick+0x20>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4413      	add	r3, r2
 800351c:	4a03      	ldr	r2, [pc, #12]	; (800352c <HAL_IncTick+0x20>)
 800351e:	6013      	str	r3, [r2, #0]
}
 8003520:	bf00      	nop
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr
 8003528:	20000020 	.word	0x20000020
 800352c:	20000448 	.word	0x20000448

08003530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return uwTick;
 8003534:	4b02      	ldr	r3, [pc, #8]	; (8003540 <HAL_GetTick+0x10>)
 8003536:	681b      	ldr	r3, [r3, #0]
}
 8003538:	4618      	mov	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	20000448 	.word	0x20000448

08003544 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800354c:	f7ff fff0 	bl	8003530 <HAL_GetTick>
 8003550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d005      	beq.n	800356a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800355e:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <HAL_Delay+0x44>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4413      	add	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800356a:	bf00      	nop
 800356c:	f7ff ffe0 	bl	8003530 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	429a      	cmp	r2, r3
 800357a:	d8f7      	bhi.n	800356c <HAL_Delay+0x28>
  {
  }
}
 800357c:	bf00      	nop
 800357e:	bf00      	nop
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000020 	.word	0x20000020

0800358c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e033      	b.n	800360a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff fc8a 	bl	8002ec4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f003 0310 	and.w	r3, r3, #16
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d118      	bne.n	80035fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035d2:	f023 0302 	bic.w	r3, r3, #2
 80035d6:	f043 0202 	orr.w	r2, r3, #2
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fa78 	bl	8003ad4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f023 0303 	bic.w	r3, r3, #3
 80035f2:	f043 0201 	orr.w	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	641a      	str	r2, [r3, #64]	; 0x40
 80035fa:	e001      	b.n	8003600 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003608:	7bfb      	ldrb	r3, [r7, #15]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_ADC_Start+0x1a>
 800362a:	2302      	movs	r3, #2
 800362c:	e095      	b.n	800375a <HAL_ADC_Start+0x146>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b01      	cmp	r3, #1
 8003642:	d018      	beq.n	8003676 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003654:	4b43      	ldr	r3, [pc, #268]	; (8003764 <HAL_ADC_Start+0x150>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a43      	ldr	r2, [pc, #268]	; (8003768 <HAL_ADC_Start+0x154>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	0c9a      	lsrs	r2, r3, #18
 8003660:	4613      	mov	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	4413      	add	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8003668:	e002      	b.n	8003670 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	3b01      	subs	r3, #1
 800366e:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f9      	bne.n	800366a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b01      	cmp	r3, #1
 8003682:	d15d      	bne.n	8003740 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d007      	beq.n	80036b6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c2:	d106      	bne.n	80036d2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c8:	f023 0206 	bic.w	r2, r3, #6
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	645a      	str	r2, [r3, #68]	; 0x44
 80036d0:	e002      	b.n	80036d8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80036e8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80036ea:	4b20      	ldr	r3, [pc, #128]	; (800376c <HAL_ADC_Start+0x158>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10f      	bne.n	8003716 <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d129      	bne.n	8003758 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	e020      	b.n	8003758 <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a15      	ldr	r2, [pc, #84]	; (8003770 <HAL_ADC_Start+0x15c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d11b      	bne.n	8003758 <HAL_ADC_Start+0x144>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d114      	bne.n	8003758 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800373c:	609a      	str	r2, [r3, #8]
 800373e:	e00b      	b.n	8003758 <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	f043 0210 	orr.w	r2, r3, #16
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003750:	f043 0201 	orr.w	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr
 8003764:	20000018 	.word	0x20000018
 8003768:	431bde83 	.word	0x431bde83
 800376c:	40012300 	.word	0x40012300
 8003770:	40012000 	.word	0x40012000

08003774 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003790:	d113      	bne.n	80037ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800379c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a0:	d10b      	bne.n	80037ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f043 0220 	orr.w	r2, r3, #32
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e05c      	b.n	8003874 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80037ba:	f7ff feb9 	bl	8003530 <HAL_GetTick>
 80037be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80037c0:	e01a      	b.n	80037f8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c8:	d016      	beq.n	80037f8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <HAL_ADC_PollForConversion+0x6c>
 80037d0:	f7ff feae 	bl	8003530 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d20b      	bcs.n	80037f8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	f043 0204 	orr.w	r2, r3, #4
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e03d      	b.n	8003874 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b02      	cmp	r3, #2
 8003804:	d1dd      	bne.n	80037c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f06f 0212 	mvn.w	r2, #18
 800380e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F2, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d123      	bne.n	8003872 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800382e:	2b00      	cmp	r3, #0
 8003830:	d11f      	bne.n	8003872 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800383c:	2b00      	cmp	r3, #0
 800383e:	d006      	beq.n	800384e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800384a:	2b00      	cmp	r3, #0
 800384c:	d111      	bne.n	8003872 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d105      	bne.n	8003872 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f043 0201 	orr.w	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800388a:	4618      	mov	r0, r3
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x1c>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e103      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x224>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b09      	cmp	r3, #9
 80038be:	d925      	bls.n	800390c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68d9      	ldr	r1, [r3, #12]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	4613      	mov	r3, r2
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	4413      	add	r3, r2
 80038d4:	3b1e      	subs	r3, #30
 80038d6:	2207      	movs	r2, #7
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43da      	mvns	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	400a      	ands	r2, r1
 80038e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68d9      	ldr	r1, [r3, #12]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	4618      	mov	r0, r3
 80038f8:	4603      	mov	r3, r0
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	4403      	add	r3, r0
 80038fe:	3b1e      	subs	r3, #30
 8003900:	409a      	lsls	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	60da      	str	r2, [r3, #12]
 800390a:	e022      	b.n	8003952 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6919      	ldr	r1, [r3, #16]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	b29b      	uxth	r3, r3
 8003918:	461a      	mov	r2, r3
 800391a:	4613      	mov	r3, r2
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	4413      	add	r3, r2
 8003920:	2207      	movs	r2, #7
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43da      	mvns	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	400a      	ands	r2, r1
 800392e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6919      	ldr	r1, [r3, #16]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	4618      	mov	r0, r3
 8003942:	4603      	mov	r3, r0
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	4403      	add	r3, r0
 8003948:	409a      	lsls	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b06      	cmp	r3, #6
 8003958:	d824      	bhi.n	80039a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	3b05      	subs	r3, #5
 800396c:	221f      	movs	r2, #31
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43da      	mvns	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	400a      	ands	r2, r1
 800397a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	b29b      	uxth	r3, r3
 8003988:	4618      	mov	r0, r3
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	3b05      	subs	r3, #5
 8003996:	fa00 f203 	lsl.w	r2, r0, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	635a      	str	r2, [r3, #52]	; 0x34
 80039a2:	e04c      	b.n	8003a3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b0c      	cmp	r3, #12
 80039aa:	d824      	bhi.n	80039f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	3b23      	subs	r3, #35	; 0x23
 80039be:	221f      	movs	r2, #31
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43da      	mvns	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	400a      	ands	r2, r1
 80039cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	4618      	mov	r0, r3
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	3b23      	subs	r3, #35	; 0x23
 80039e8:	fa00 f203 	lsl.w	r2, r0, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
 80039f4:	e023      	b.n	8003a3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	3b41      	subs	r3, #65	; 0x41
 8003a08:	221f      	movs	r2, #31
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	400a      	ands	r2, r1
 8003a16:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	4618      	mov	r0, r3
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	3b41      	subs	r3, #65	; 0x41
 8003a32:	fa00 f203 	lsl.w	r2, r0, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a20      	ldr	r2, [pc, #128]	; (8003ac4 <HAL_ADC_ConfigChannel+0x230>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d109      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x1c8>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b12      	cmp	r3, #18
 8003a4e:	d105      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003a50:	4b1d      	ldr	r3, [pc, #116]	; (8003ac8 <HAL_ADC_ConfigChannel+0x234>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	4a1c      	ldr	r2, [pc, #112]	; (8003ac8 <HAL_ADC_ConfigChannel+0x234>)
 8003a56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a5a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a18      	ldr	r2, [pc, #96]	; (8003ac4 <HAL_ADC_ConfigChannel+0x230>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d123      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x21a>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b10      	cmp	r3, #16
 8003a6c:	d003      	beq.n	8003a76 <HAL_ADC_ConfigChannel+0x1e2>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b11      	cmp	r3, #17
 8003a74:	d11b      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003a76:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <HAL_ADC_ConfigChannel+0x234>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	4a13      	ldr	r2, [pc, #76]	; (8003ac8 <HAL_ADC_ConfigChannel+0x234>)
 8003a7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a80:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b10      	cmp	r3, #16
 8003a88:	d111      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a8a:	4b10      	ldr	r3, [pc, #64]	; (8003acc <HAL_ADC_ConfigChannel+0x238>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a10      	ldr	r2, [pc, #64]	; (8003ad0 <HAL_ADC_ConfigChannel+0x23c>)
 8003a90:	fba2 2303 	umull	r2, r3, r2, r3
 8003a94:	0c9a      	lsrs	r2, r3, #18
 8003a96:	4613      	mov	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8003aa0:	e002      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f9      	bne.n	8003aa2 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bc80      	pop	{r7}
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40012000 	.word	0x40012000
 8003ac8:	40012300 	.word	0x40012300
 8003acc:	20000018 	.word	0x20000018
 8003ad0:	431bde83 	.word	0x431bde83

08003ad4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003adc:	4b7e      	ldr	r3, [pc, #504]	; (8003cd8 <ADC_Init+0x204>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	4a7d      	ldr	r2, [pc, #500]	; (8003cd8 <ADC_Init+0x204>)
 8003ae2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003ae6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003ae8:	4b7b      	ldr	r3, [pc, #492]	; (8003cd8 <ADC_Init+0x204>)
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	4979      	ldr	r1, [pc, #484]	; (8003cd8 <ADC_Init+0x204>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6859      	ldr	r1, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	021a      	lsls	r2, r3, #8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6859      	ldr	r1, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6899      	ldr	r1, [r3, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b62:	4a5e      	ldr	r2, [pc, #376]	; (8003cdc <ADC_Init+0x208>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d022      	beq.n	8003bae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6899      	ldr	r1, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6899      	ldr	r1, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	609a      	str	r2, [r3, #8]
 8003bac:	e00f      	b.n	8003bce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003bcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0202 	bic.w	r2, r2, #2
 8003bdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6899      	ldr	r1, [r3, #8]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	7e1b      	ldrb	r3, [r3, #24]
 8003be8:	005a      	lsls	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d027      	beq.n	8003c4c <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003c1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	3b01      	subs	r3, #1
 8003c22:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8003c26:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	fa92 f2a2 	rbit	r2, r2
 8003c2e:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	fab2 f282 	clz	r2, r2
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	fa03 f102 	lsl.w	r1, r3, r2
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
 8003c4a:	e007      	b.n	8003c5c <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	051a      	lsls	r2, r3, #20
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6899      	ldr	r1, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c9e:	025a      	lsls	r2, r3, #9
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6899      	ldr	r1, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	029a      	lsls	r2, r3, #10
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	609a      	str	r2, [r3, #8]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40012300 	.word	0x40012300
 8003cdc:	0f000001 	.word	0x0f000001

08003ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <__NVIC_SetPriorityGrouping+0x44>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d12:	4a04      	ldr	r2, [pc, #16]	; (8003d24 <__NVIC_SetPriorityGrouping+0x44>)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	60d3      	str	r3, [r2, #12]
}
 8003d18:	bf00      	nop
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	e000ed00 	.word	0xe000ed00

08003d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d2c:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <__NVIC_GetPriorityGrouping+0x18>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	0a1b      	lsrs	r3, r3, #8
 8003d32:	f003 0307 	and.w	r3, r3, #7
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	e000ed00 	.word	0xe000ed00

08003d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	6039      	str	r1, [r7, #0]
 8003d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	db0a      	blt.n	8003d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	490c      	ldr	r1, [pc, #48]	; (8003d90 <__NVIC_SetPriority+0x4c>)
 8003d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d62:	0112      	lsls	r2, r2, #4
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	440b      	add	r3, r1
 8003d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d6c:	e00a      	b.n	8003d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	4908      	ldr	r1, [pc, #32]	; (8003d94 <__NVIC_SetPriority+0x50>)
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	3b04      	subs	r3, #4
 8003d7c:	0112      	lsls	r2, r2, #4
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	440b      	add	r3, r1
 8003d82:	761a      	strb	r2, [r3, #24]
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	e000e100 	.word	0xe000e100
 8003d94:	e000ed00 	.word	0xe000ed00

08003d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b089      	sub	sp, #36	; 0x24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f1c3 0307 	rsb	r3, r3, #7
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	bf28      	it	cs
 8003db6:	2304      	movcs	r3, #4
 8003db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	2b06      	cmp	r3, #6
 8003dc0:	d902      	bls.n	8003dc8 <NVIC_EncodePriority+0x30>
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	3b03      	subs	r3, #3
 8003dc6:	e000      	b.n	8003dca <NVIC_EncodePriority+0x32>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	43da      	mvns	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	401a      	ands	r2, r3
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003de0:	f04f 31ff 	mov.w	r1, #4294967295
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dea:	43d9      	mvns	r1, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df0:	4313      	orrs	r3, r2
         );
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3724      	adds	r7, #36	; 0x24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr

08003dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e0c:	d301      	bcc.n	8003e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e00f      	b.n	8003e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e12:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <SysTick_Config+0x40>)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e1a:	210f      	movs	r1, #15
 8003e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e20:	f7ff ff90 	bl	8003d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e24:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <SysTick_Config+0x40>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e2a:	4b04      	ldr	r3, [pc, #16]	; (8003e3c <SysTick_Config+0x40>)
 8003e2c:	2207      	movs	r2, #7
 8003e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	e000e010 	.word	0xe000e010

08003e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff ff49 	bl	8003ce0 <__NVIC_SetPriorityGrouping>
}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b086      	sub	sp, #24
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	607a      	str	r2, [r7, #4]
 8003e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e68:	f7ff ff5e 	bl	8003d28 <__NVIC_GetPriorityGrouping>
 8003e6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	6978      	ldr	r0, [r7, #20]
 8003e74:	f7ff ff90 	bl	8003d98 <NVIC_EncodePriority>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff ff5f 	bl	8003d44 <__NVIC_SetPriority>
}
 8003e86:	bf00      	nop
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff ffb0 	bl	8003dfc <SysTick_Config>
 8003e9c:	4603      	mov	r3, r0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eb6:	e16f      	b.n	8004198 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 8161 	beq.w	8004192 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 0303 	and.w	r3, r3, #3
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d005      	beq.n	8003ee8 <HAL_GPIO_Init+0x40>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d130      	bne.n	8003f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4013      	ands	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f1e:	2201      	movs	r2, #1
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	43db      	mvns	r3, r3
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	091b      	lsrs	r3, r3, #4
 8003f34:	f003 0201 	and.w	r2, r3, #1
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d017      	beq.n	8003f86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	2203      	movs	r2, #3
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d123      	bne.n	8003fda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	08da      	lsrs	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3208      	adds	r2, #8
 8003f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	220f      	movs	r2, #15
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	08da      	lsrs	r2, r3, #3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3208      	adds	r2, #8
 8003fd4:	6939      	ldr	r1, [r7, #16]
 8003fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	43db      	mvns	r3, r3
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 0203 	and.w	r2, r3, #3
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 80bb 	beq.w	8004192 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401c:	2300      	movs	r3, #0
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	4b64      	ldr	r3, [pc, #400]	; (80041b4 <HAL_GPIO_Init+0x30c>)
 8004022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004024:	4a63      	ldr	r2, [pc, #396]	; (80041b4 <HAL_GPIO_Init+0x30c>)
 8004026:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800402a:	6453      	str	r3, [r2, #68]	; 0x44
 800402c:	4b61      	ldr	r3, [pc, #388]	; (80041b4 <HAL_GPIO_Init+0x30c>)
 800402e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004034:	60bb      	str	r3, [r7, #8]
 8004036:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004038:	4a5f      	ldr	r2, [pc, #380]	; (80041b8 <HAL_GPIO_Init+0x310>)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	089b      	lsrs	r3, r3, #2
 800403e:	3302      	adds	r3, #2
 8004040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004044:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	220f      	movs	r2, #15
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4013      	ands	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a57      	ldr	r2, [pc, #348]	; (80041bc <HAL_GPIO_Init+0x314>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d031      	beq.n	80040c8 <HAL_GPIO_Init+0x220>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a56      	ldr	r2, [pc, #344]	; (80041c0 <HAL_GPIO_Init+0x318>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d02b      	beq.n	80040c4 <HAL_GPIO_Init+0x21c>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a55      	ldr	r2, [pc, #340]	; (80041c4 <HAL_GPIO_Init+0x31c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d025      	beq.n	80040c0 <HAL_GPIO_Init+0x218>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a54      	ldr	r2, [pc, #336]	; (80041c8 <HAL_GPIO_Init+0x320>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d01f      	beq.n	80040bc <HAL_GPIO_Init+0x214>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a53      	ldr	r2, [pc, #332]	; (80041cc <HAL_GPIO_Init+0x324>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d019      	beq.n	80040b8 <HAL_GPIO_Init+0x210>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a52      	ldr	r2, [pc, #328]	; (80041d0 <HAL_GPIO_Init+0x328>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d013      	beq.n	80040b4 <HAL_GPIO_Init+0x20c>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a51      	ldr	r2, [pc, #324]	; (80041d4 <HAL_GPIO_Init+0x32c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00d      	beq.n	80040b0 <HAL_GPIO_Init+0x208>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a50      	ldr	r2, [pc, #320]	; (80041d8 <HAL_GPIO_Init+0x330>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d007      	beq.n	80040ac <HAL_GPIO_Init+0x204>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a4f      	ldr	r2, [pc, #316]	; (80041dc <HAL_GPIO_Init+0x334>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d101      	bne.n	80040a8 <HAL_GPIO_Init+0x200>
 80040a4:	2308      	movs	r3, #8
 80040a6:	e010      	b.n	80040ca <HAL_GPIO_Init+0x222>
 80040a8:	2309      	movs	r3, #9
 80040aa:	e00e      	b.n	80040ca <HAL_GPIO_Init+0x222>
 80040ac:	2307      	movs	r3, #7
 80040ae:	e00c      	b.n	80040ca <HAL_GPIO_Init+0x222>
 80040b0:	2306      	movs	r3, #6
 80040b2:	e00a      	b.n	80040ca <HAL_GPIO_Init+0x222>
 80040b4:	2305      	movs	r3, #5
 80040b6:	e008      	b.n	80040ca <HAL_GPIO_Init+0x222>
 80040b8:	2304      	movs	r3, #4
 80040ba:	e006      	b.n	80040ca <HAL_GPIO_Init+0x222>
 80040bc:	2303      	movs	r3, #3
 80040be:	e004      	b.n	80040ca <HAL_GPIO_Init+0x222>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e002      	b.n	80040ca <HAL_GPIO_Init+0x222>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <HAL_GPIO_Init+0x222>
 80040c8:	2300      	movs	r3, #0
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	f002 0203 	and.w	r2, r2, #3
 80040d0:	0092      	lsls	r2, r2, #2
 80040d2:	4093      	lsls	r3, r2
 80040d4:	461a      	mov	r2, r3
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040dc:	4936      	ldr	r1, [pc, #216]	; (80041b8 <HAL_GPIO_Init+0x310>)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	089b      	lsrs	r3, r3, #2
 80040e2:	3302      	adds	r3, #2
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040ea:	4b3d      	ldr	r3, [pc, #244]	; (80041e0 <HAL_GPIO_Init+0x338>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	43db      	mvns	r3, r3
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4013      	ands	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800410e:	4a34      	ldr	r2, [pc, #208]	; (80041e0 <HAL_GPIO_Init+0x338>)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004114:	4b32      	ldr	r3, [pc, #200]	; (80041e0 <HAL_GPIO_Init+0x338>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	43db      	mvns	r3, r3
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4013      	ands	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004138:	4a29      	ldr	r2, [pc, #164]	; (80041e0 <HAL_GPIO_Init+0x338>)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800413e:	4b28      	ldr	r3, [pc, #160]	; (80041e0 <HAL_GPIO_Init+0x338>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	43db      	mvns	r3, r3
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4013      	ands	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004162:	4a1f      	ldr	r2, [pc, #124]	; (80041e0 <HAL_GPIO_Init+0x338>)
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004168:	4b1d      	ldr	r3, [pc, #116]	; (80041e0 <HAL_GPIO_Init+0x338>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	43db      	mvns	r3, r3
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4013      	ands	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800418c:	4a14      	ldr	r2, [pc, #80]	; (80041e0 <HAL_GPIO_Init+0x338>)
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	3301      	adds	r3, #1
 8004196:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	fa22 f303 	lsr.w	r3, r2, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f47f ae88 	bne.w	8003eb8 <HAL_GPIO_Init+0x10>
  }
}
 80041a8:	bf00      	nop
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr
 80041b4:	40023800 	.word	0x40023800
 80041b8:	40013800 	.word	0x40013800
 80041bc:	40020000 	.word	0x40020000
 80041c0:	40020400 	.word	0x40020400
 80041c4:	40020800 	.word	0x40020800
 80041c8:	40020c00 	.word	0x40020c00
 80041cc:	40021000 	.word	0x40021000
 80041d0:	40021400 	.word	0x40021400
 80041d4:	40021800 	.word	0x40021800
 80041d8:	40021c00 	.word	0x40021c00
 80041dc:	40022000 	.word	0x40022000
 80041e0:	40013c00 	.word	0x40013c00

080041e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	887b      	ldrh	r3, [r7, #2]
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041fc:	2301      	movs	r3, #1
 80041fe:	73fb      	strb	r3, [r7, #15]
 8004200:	e001      	b.n	8004206 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004202:	2300      	movs	r3, #0
 8004204:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004206:	7bfb      	ldrb	r3, [r7, #15]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr

08004212 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	460b      	mov	r3, r1
 800421c:	807b      	strh	r3, [r7, #2]
 800421e:	4613      	mov	r3, r2
 8004220:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004222:	787b      	ldrb	r3, [r7, #1]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004228:	887a      	ldrh	r2, [r7, #2]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800422e:	e003      	b.n	8004238 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004230:	887b      	ldrh	r3, [r7, #2]
 8004232:	041a      	lsls	r2, r3, #16
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	619a      	str	r2, [r3, #24]
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr

08004242 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004242:	b480      	push	{r7}
 8004244:	b085      	sub	sp, #20
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	460b      	mov	r3, r1
 800424c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004254:	887a      	ldrh	r2, [r7, #2]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4013      	ands	r3, r2
 800425a:	041a      	lsls	r2, r3, #16
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	43d9      	mvns	r1, r3
 8004260:	887b      	ldrh	r3, [r7, #2]
 8004262:	400b      	ands	r3, r1
 8004264:	431a      	orrs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	619a      	str	r2, [r3, #24]
}
 800426a:	bf00      	nop
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr

08004274 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08a      	sub	sp, #40	; 0x28
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e237      	b.n	80046f6 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d050      	beq.n	8004334 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004292:	4ba3      	ldr	r3, [pc, #652]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 030c 	and.w	r3, r3, #12
 800429a:	2b04      	cmp	r3, #4
 800429c:	d00c      	beq.n	80042b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800429e:	4ba0      	ldr	r3, [pc, #640]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042a6:	2b08      	cmp	r3, #8
 80042a8:	d112      	bne.n	80042d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042aa:	4b9d      	ldr	r3, [pc, #628]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042b6:	d10b      	bne.n	80042d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b8:	4b99      	ldr	r3, [pc, #612]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d036      	beq.n	8004332 <HAL_RCC_OscConfig+0xbe>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d132      	bne.n	8004332 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e212      	b.n	80046f6 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	4b93      	ldr	r3, [pc, #588]	; (8004524 <HAL_RCC_OscConfig+0x2b0>)
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d013      	beq.n	800430a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e2:	f7ff f925 	bl	8003530 <HAL_GetTick>
 80042e6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042ea:	f7ff f921 	bl	8003530 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b64      	cmp	r3, #100	; 0x64
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e1fc      	b.n	80046f6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fc:	4b88      	ldr	r3, [pc, #544]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCC_OscConfig+0x76>
 8004308:	e014      	b.n	8004334 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430a:	f7ff f911 	bl	8003530 <HAL_GetTick>
 800430e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004312:	f7ff f90d 	bl	8003530 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b64      	cmp	r3, #100	; 0x64
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e1e8      	b.n	80046f6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004324:	4b7e      	ldr	r3, [pc, #504]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f0      	bne.n	8004312 <HAL_RCC_OscConfig+0x9e>
 8004330:	e000      	b.n	8004334 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004332:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d077      	beq.n	8004430 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004340:	4b77      	ldr	r3, [pc, #476]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 030c 	and.w	r3, r3, #12
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00b      	beq.n	8004364 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800434c:	4b74      	ldr	r3, [pc, #464]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004354:	2b08      	cmp	r3, #8
 8004356:	d126      	bne.n	80043a6 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004358:	4b71      	ldr	r3, [pc, #452]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d120      	bne.n	80043a6 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004364:	4b6e      	ldr	r3, [pc, #440]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <HAL_RCC_OscConfig+0x108>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d001      	beq.n	800437c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e1bc      	b.n	80046f6 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437c:	4b68      	ldr	r3, [pc, #416]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	21f8      	movs	r1, #248	; 0xf8
 800438a:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438c:	69b9      	ldr	r1, [r7, #24]
 800438e:	fa91 f1a1 	rbit	r1, r1
 8004392:	6179      	str	r1, [r7, #20]
  return result;
 8004394:	6979      	ldr	r1, [r7, #20]
 8004396:	fab1 f181 	clz	r1, r1
 800439a:	b2c9      	uxtb	r1, r1
 800439c:	408b      	lsls	r3, r1
 800439e:	4960      	ldr	r1, [pc, #384]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043a4:	e044      	b.n	8004430 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d02a      	beq.n	8004404 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ae:	4b5e      	ldr	r3, [pc, #376]	; (8004528 <HAL_RCC_OscConfig+0x2b4>)
 80043b0:	2201      	movs	r2, #1
 80043b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b4:	f7ff f8bc 	bl	8003530 <HAL_GetTick>
 80043b8:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043bc:	f7ff f8b8 	bl	8003530 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e193      	b.n	80046f6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ce:	4b54      	ldr	r3, [pc, #336]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f0      	beq.n	80043bc <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043da:	4b51      	ldr	r3, [pc, #324]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	21f8      	movs	r1, #248	; 0xf8
 80043e8:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ea:	6939      	ldr	r1, [r7, #16]
 80043ec:	fa91 f1a1 	rbit	r1, r1
 80043f0:	60f9      	str	r1, [r7, #12]
  return result;
 80043f2:	68f9      	ldr	r1, [r7, #12]
 80043f4:	fab1 f181 	clz	r1, r1
 80043f8:	b2c9      	uxtb	r1, r1
 80043fa:	408b      	lsls	r3, r1
 80043fc:	4948      	ldr	r1, [pc, #288]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	600b      	str	r3, [r1, #0]
 8004402:	e015      	b.n	8004430 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004404:	4b48      	ldr	r3, [pc, #288]	; (8004528 <HAL_RCC_OscConfig+0x2b4>)
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440a:	f7ff f891 	bl	8003530 <HAL_GetTick>
 800440e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004412:	f7ff f88d 	bl	8003530 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e168      	b.n	80046f6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004424:	4b3e      	ldr	r3, [pc, #248]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f0      	bne.n	8004412 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d030      	beq.n	800449e <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d016      	beq.n	8004472 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004444:	4b39      	ldr	r3, [pc, #228]	; (800452c <HAL_RCC_OscConfig+0x2b8>)
 8004446:	2201      	movs	r2, #1
 8004448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800444a:	f7ff f871 	bl	8003530 <HAL_GetTick>
 800444e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004452:	f7ff f86d 	bl	8003530 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e148      	b.n	80046f6 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004464:	4b2e      	ldr	r3, [pc, #184]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 8004466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0f0      	beq.n	8004452 <HAL_RCC_OscConfig+0x1de>
 8004470:	e015      	b.n	800449e <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004472:	4b2e      	ldr	r3, [pc, #184]	; (800452c <HAL_RCC_OscConfig+0x2b8>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004478:	f7ff f85a 	bl	8003530 <HAL_GetTick>
 800447c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004480:	f7ff f856 	bl	8003530 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e131      	b.n	80046f6 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004492:	4b23      	ldr	r3, [pc, #140]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 8004494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 8088 	beq.w	80045bc <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ac:	2300      	movs	r3, #0
 80044ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b2:	4b1b      	ldr	r3, [pc, #108]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d110      	bne.n	80044e0 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044be:	2300      	movs	r3, #0
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	4b17      	ldr	r3, [pc, #92]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	4a16      	ldr	r2, [pc, #88]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80044c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044cc:	6413      	str	r3, [r2, #64]	; 0x40
 80044ce:	4b14      	ldr	r3, [pc, #80]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044da:	2301      	movs	r3, #1
 80044dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044e0:	4b13      	ldr	r3, [pc, #76]	; (8004530 <HAL_RCC_OscConfig+0x2bc>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a12      	ldr	r2, [pc, #72]	; (8004530 <HAL_RCC_OscConfig+0x2bc>)
 80044e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ea:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ec:	4b10      	ldr	r3, [pc, #64]	; (8004530 <HAL_RCC_OscConfig+0x2bc>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d123      	bne.n	8004540 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044f8:	4b0d      	ldr	r3, [pc, #52]	; (8004530 <HAL_RCC_OscConfig+0x2bc>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a0c      	ldr	r2, [pc, #48]	; (8004530 <HAL_RCC_OscConfig+0x2bc>)
 80044fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004502:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004504:	f7ff f814 	bl	8003530 <HAL_GetTick>
 8004508:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450a:	e013      	b.n	8004534 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450c:	f7ff f810 	bl	8003530 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d90c      	bls.n	8004534 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e0eb      	b.n	80046f6 <HAL_RCC_OscConfig+0x482>
 800451e:	bf00      	nop
 8004520:	40023800 	.word	0x40023800
 8004524:	40023802 	.word	0x40023802
 8004528:	42470000 	.word	0x42470000
 800452c:	42470e80 	.word	0x42470e80
 8004530:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004534:	4b72      	ldr	r3, [pc, #456]	; (8004700 <HAL_RCC_OscConfig+0x48c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0e5      	beq.n	800450c <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	4b6f      	ldr	r3, [pc, #444]	; (8004704 <HAL_RCC_OscConfig+0x490>)
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d015      	beq.n	800457e <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004552:	f7fe ffed 	bl	8003530 <HAL_GetTick>
 8004556:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004558:	e00a      	b.n	8004570 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800455a:	f7fe ffe9 	bl	8003530 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	f241 3288 	movw	r2, #5000	; 0x1388
 8004568:	4293      	cmp	r3, r2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e0c2      	b.n	80046f6 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004570:	4b65      	ldr	r3, [pc, #404]	; (8004708 <HAL_RCC_OscConfig+0x494>)
 8004572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0ee      	beq.n	800455a <HAL_RCC_OscConfig+0x2e6>
 800457c:	e014      	b.n	80045a8 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800457e:	f7fe ffd7 	bl	8003530 <HAL_GetTick>
 8004582:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004584:	e00a      	b.n	800459c <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004586:	f7fe ffd3 	bl	8003530 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	f241 3288 	movw	r2, #5000	; 0x1388
 8004594:	4293      	cmp	r3, r2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e0ac      	b.n	80046f6 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800459c:	4b5a      	ldr	r3, [pc, #360]	; (8004708 <HAL_RCC_OscConfig+0x494>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1ee      	bne.n	8004586 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d105      	bne.n	80045bc <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b0:	4b55      	ldr	r3, [pc, #340]	; (8004708 <HAL_RCC_OscConfig+0x494>)
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	4a54      	ldr	r2, [pc, #336]	; (8004708 <HAL_RCC_OscConfig+0x494>)
 80045b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 8097 	beq.w	80046f4 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045c6:	4b50      	ldr	r3, [pc, #320]	; (8004708 <HAL_RCC_OscConfig+0x494>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 030c 	and.w	r3, r3, #12
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d061      	beq.n	8004696 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d146      	bne.n	8004668 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045da:	4b4c      	ldr	r3, [pc, #304]	; (800470c <HAL_RCC_OscConfig+0x498>)
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e0:	f7fe ffa6 	bl	8003530 <HAL_GetTick>
 80045e4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e8:	f7fe ffa2 	bl	8003530 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	; 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e07d      	b.n	80046f6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fa:	4b43      	ldr	r3, [pc, #268]	; (8004708 <HAL_RCC_OscConfig+0x494>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f0      	bne.n	80045e8 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004606:	4b40      	ldr	r3, [pc, #256]	; (8004708 <HAL_RCC_OscConfig+0x494>)
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	4b41      	ldr	r3, [pc, #260]	; (8004710 <HAL_RCC_OscConfig+0x49c>)
 800460c:	4013      	ands	r3, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	69d1      	ldr	r1, [r2, #28]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6a12      	ldr	r2, [r2, #32]
 8004616:	4311      	orrs	r1, r2
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800461c:	0192      	lsls	r2, r2, #6
 800461e:	4311      	orrs	r1, r2
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004624:	0612      	lsls	r2, r2, #24
 8004626:	4311      	orrs	r1, r2
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800462c:	0852      	lsrs	r2, r2, #1
 800462e:	3a01      	subs	r2, #1
 8004630:	0412      	lsls	r2, r2, #16
 8004632:	430a      	orrs	r2, r1
 8004634:	4934      	ldr	r1, [pc, #208]	; (8004708 <HAL_RCC_OscConfig+0x494>)
 8004636:	4313      	orrs	r3, r2
 8004638:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800463a:	4b34      	ldr	r3, [pc, #208]	; (800470c <HAL_RCC_OscConfig+0x498>)
 800463c:	2201      	movs	r2, #1
 800463e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004640:	f7fe ff76 	bl	8003530 <HAL_GetTick>
 8004644:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004648:	f7fe ff72 	bl	8003530 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b64      	cmp	r3, #100	; 0x64
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e04d      	b.n	80046f6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465a:	4b2b      	ldr	r3, [pc, #172]	; (8004708 <HAL_RCC_OscConfig+0x494>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0f0      	beq.n	8004648 <HAL_RCC_OscConfig+0x3d4>
 8004666:	e045      	b.n	80046f4 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004668:	4b28      	ldr	r3, [pc, #160]	; (800470c <HAL_RCC_OscConfig+0x498>)
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466e:	f7fe ff5f 	bl	8003530 <HAL_GetTick>
 8004672:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004676:	f7fe ff5b 	bl	8003530 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b64      	cmp	r3, #100	; 0x64
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e036      	b.n	80046f6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004688:	4b1f      	ldr	r3, [pc, #124]	; (8004708 <HAL_RCC_OscConfig+0x494>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1f0      	bne.n	8004676 <HAL_RCC_OscConfig+0x402>
 8004694:	e02e      	b.n	80046f4 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e029      	b.n	80046f6 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80046a2:	4b19      	ldr	r3, [pc, #100]	; (8004708 <HAL_RCC_OscConfig+0x494>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d11c      	bne.n	80046f0 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d115      	bne.n	80046f0 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	099b      	lsrs	r3, r3, #6
 80046c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d10d      	bne.n	80046f0 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80046de:	429a      	cmp	r2, r3
 80046e0:	d106      	bne.n	80046f0 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d001      	beq.n	80046f4 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e000      	b.n	80046f6 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3728      	adds	r7, #40	; 0x28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40007000 	.word	0x40007000
 8004704:	40023870 	.word	0x40023870
 8004708:	40023800 	.word	0x40023800
 800470c:	42470060 	.word	0x42470060
 8004710:	f0bc8000 	.word	0xf0bc8000

08004714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0d2      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004728:	4b6b      	ldr	r3, [pc, #428]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 030f 	and.w	r3, r3, #15
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d90c      	bls.n	8004750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004736:	4b68      	ldr	r3, [pc, #416]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800473e:	4b66      	ldr	r3, [pc, #408]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d001      	beq.n	8004750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e0be      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d020      	beq.n	800479e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d005      	beq.n	8004774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004768:	4b5c      	ldr	r3, [pc, #368]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	4a5b      	ldr	r2, [pc, #364]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 800476e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004772:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8004780:	4b56      	ldr	r3, [pc, #344]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	4a55      	ldr	r2, [pc, #340]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 8004786:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800478a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800478c:	4b53      	ldr	r3, [pc, #332]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	4950      	ldr	r1, [pc, #320]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 800479a:	4313      	orrs	r3, r2
 800479c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d040      	beq.n	800482c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d107      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b2:	4b4a      	ldr	r3, [pc, #296]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d115      	bne.n	80047ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e085      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d107      	bne.n	80047da <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ca:	4b44      	ldr	r3, [pc, #272]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d109      	bne.n	80047ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e079      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047da:	4b40      	ldr	r3, [pc, #256]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e071      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ea:	4b3c      	ldr	r3, [pc, #240]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f023 0203 	bic.w	r2, r3, #3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	4939      	ldr	r1, [pc, #228]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047fc:	f7fe fe98 	bl	8003530 <HAL_GetTick>
 8004800:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004802:	e00a      	b.n	800481a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004804:	f7fe fe94 	bl	8003530 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004812:	4293      	cmp	r3, r2
 8004814:	d901      	bls.n	800481a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e059      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481a:	4b30      	ldr	r3, [pc, #192]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 020c 	and.w	r2, r3, #12
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	429a      	cmp	r2, r3
 800482a:	d1eb      	bne.n	8004804 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800482c:	4b2a      	ldr	r3, [pc, #168]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d20c      	bcs.n	8004854 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483a:	4b27      	ldr	r3, [pc, #156]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004842:	4b25      	ldr	r3, [pc, #148]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d001      	beq.n	8004854 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e03c      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004860:	4b1e      	ldr	r3, [pc, #120]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	491b      	ldr	r1, [pc, #108]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 800486e:	4313      	orrs	r3, r2
 8004870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d009      	beq.n	8004892 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800487e:	4b17      	ldr	r3, [pc, #92]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4913      	ldr	r1, [pc, #76]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 800488e:	4313      	orrs	r3, r2
 8004890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8004892:	f000 f82b 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 8004896:	4601      	mov	r1, r0
 8004898:	4b10      	ldr	r3, [pc, #64]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048a0:	22f0      	movs	r2, #240	; 0xf0
 80048a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	fa92 f2a2 	rbit	r2, r2
 80048aa:	60fa      	str	r2, [r7, #12]
  return result;
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	fab2 f282 	clz	r2, r2
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	40d3      	lsrs	r3, r2
 80048b6:	4a0a      	ldr	r2, [pc, #40]	; (80048e0 <HAL_RCC_ClockConfig+0x1cc>)
 80048b8:	5cd3      	ldrb	r3, [r2, r3]
 80048ba:	fa21 f303 	lsr.w	r3, r1, r3
 80048be:	4a09      	ldr	r2, [pc, #36]	; (80048e4 <HAL_RCC_ClockConfig+0x1d0>)
 80048c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048c2:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <HAL_RCC_ClockConfig+0x1d4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fe fdf0 	bl	80034ac <HAL_InitTick>

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40023c00 	.word	0x40023c00
 80048dc:	40023800 	.word	0x40023800
 80048e0:	08006468 	.word	0x08006468
 80048e4:	20000018 	.word	0x20000018
 80048e8:	2000001c 	.word	0x2000001c

080048ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048ec:	b5b0      	push	{r4, r5, r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048f2:	2100      	movs	r1, #0
 80048f4:	6079      	str	r1, [r7, #4]
 80048f6:	2100      	movs	r1, #0
 80048f8:	60f9      	str	r1, [r7, #12]
 80048fa:	2100      	movs	r1, #0
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048fe:	2100      	movs	r1, #0
 8004900:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004902:	4952      	ldr	r1, [pc, #328]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x160>)
 8004904:	6889      	ldr	r1, [r1, #8]
 8004906:	f001 010c 	and.w	r1, r1, #12
 800490a:	2908      	cmp	r1, #8
 800490c:	d00d      	beq.n	800492a <HAL_RCC_GetSysClockFreq+0x3e>
 800490e:	2908      	cmp	r1, #8
 8004910:	f200 8094 	bhi.w	8004a3c <HAL_RCC_GetSysClockFreq+0x150>
 8004914:	2900      	cmp	r1, #0
 8004916:	d002      	beq.n	800491e <HAL_RCC_GetSysClockFreq+0x32>
 8004918:	2904      	cmp	r1, #4
 800491a:	d003      	beq.n	8004924 <HAL_RCC_GetSysClockFreq+0x38>
 800491c:	e08e      	b.n	8004a3c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800491e:	4b4c      	ldr	r3, [pc, #304]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x164>)
 8004920:	60bb      	str	r3, [r7, #8]
       break;
 8004922:	e08e      	b.n	8004a42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004924:	4b4b      	ldr	r3, [pc, #300]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x168>)
 8004926:	60bb      	str	r3, [r7, #8]
      break;
 8004928:	e08b      	b.n	8004a42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800492a:	4948      	ldr	r1, [pc, #288]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x160>)
 800492c:	6849      	ldr	r1, [r1, #4]
 800492e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004932:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004934:	4945      	ldr	r1, [pc, #276]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x160>)
 8004936:	6849      	ldr	r1, [r1, #4]
 8004938:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800493c:	2900      	cmp	r1, #0
 800493e:	d024      	beq.n	800498a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004940:	4942      	ldr	r1, [pc, #264]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x160>)
 8004942:	6849      	ldr	r1, [r1, #4]
 8004944:	0989      	lsrs	r1, r1, #6
 8004946:	4608      	mov	r0, r1
 8004948:	f04f 0100 	mov.w	r1, #0
 800494c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004950:	f04f 0500 	mov.w	r5, #0
 8004954:	ea00 0204 	and.w	r2, r0, r4
 8004958:	ea01 0305 	and.w	r3, r1, r5
 800495c:	493d      	ldr	r1, [pc, #244]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x168>)
 800495e:	fb01 f003 	mul.w	r0, r1, r3
 8004962:	2100      	movs	r1, #0
 8004964:	fb01 f102 	mul.w	r1, r1, r2
 8004968:	1844      	adds	r4, r0, r1
 800496a:	493a      	ldr	r1, [pc, #232]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x168>)
 800496c:	fba2 0101 	umull	r0, r1, r2, r1
 8004970:	1863      	adds	r3, r4, r1
 8004972:	4619      	mov	r1, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	461a      	mov	r2, r3
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	f7fc fc0c 	bl	8001198 <__aeabi_uldivmod>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4613      	mov	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	e04a      	b.n	8004a20 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800498a:	4b30      	ldr	r3, [pc, #192]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x160>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	099b      	lsrs	r3, r3, #6
 8004990:	461a      	mov	r2, r3
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	f240 10ff 	movw	r0, #511	; 0x1ff
 800499a:	f04f 0100 	mov.w	r1, #0
 800499e:	ea02 0400 	and.w	r4, r2, r0
 80049a2:	ea03 0501 	and.w	r5, r3, r1
 80049a6:	4620      	mov	r0, r4
 80049a8:	4629      	mov	r1, r5
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	014b      	lsls	r3, r1, #5
 80049b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049b8:	0142      	lsls	r2, r0, #5
 80049ba:	4610      	mov	r0, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	1b00      	subs	r0, r0, r4
 80049c0:	eb61 0105 	sbc.w	r1, r1, r5
 80049c4:	f04f 0200 	mov.w	r2, #0
 80049c8:	f04f 0300 	mov.w	r3, #0
 80049cc:	018b      	lsls	r3, r1, #6
 80049ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049d2:	0182      	lsls	r2, r0, #6
 80049d4:	1a12      	subs	r2, r2, r0
 80049d6:	eb63 0301 	sbc.w	r3, r3, r1
 80049da:	f04f 0000 	mov.w	r0, #0
 80049de:	f04f 0100 	mov.w	r1, #0
 80049e2:	00d9      	lsls	r1, r3, #3
 80049e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049e8:	00d0      	lsls	r0, r2, #3
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	1912      	adds	r2, r2, r4
 80049f0:	eb45 0303 	adc.w	r3, r5, r3
 80049f4:	f04f 0000 	mov.w	r0, #0
 80049f8:	f04f 0100 	mov.w	r1, #0
 80049fc:	0299      	lsls	r1, r3, #10
 80049fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a02:	0290      	lsls	r0, r2, #10
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4610      	mov	r0, r2
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	f7fc fbc0 	bl	8001198 <__aeabi_uldivmod>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a20:	4b0a      	ldr	r3, [pc, #40]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x160>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	0c1b      	lsrs	r3, r3, #16
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a38:	60bb      	str	r3, [r7, #8]
      break;
 8004a3a:	e002      	b.n	8004a42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a3c:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x164>)
 8004a3e:	60bb      	str	r3, [r7, #8]
      break;
 8004a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a42:	68bb      	ldr	r3, [r7, #8]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	00f42400 	.word	0x00f42400
 8004a54:	017d7840 	.word	0x017d7840

08004a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a5c:	4b02      	ldr	r3, [pc, #8]	; (8004a68 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr
 8004a68:	20000018 	.word	0x20000018

08004a6c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08a      	sub	sp, #40	; 0x28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d103      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d14c      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a90:	4b6d      	ldr	r3, [pc, #436]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a96:	f7fe fd4b 	bl	8003530 <HAL_GetTick>
 8004a9a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a9e:	f7fe fd47 	bl	8003530 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e0c7      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ab0:	4b66      	ldr	r3, [pc, #408]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1f0      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8004ac4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	fa92 f2a2 	rbit	r2, r2
 8004acc:	613a      	str	r2, [r7, #16]
  return result;
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	fab2 f282 	clz	r2, r2
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	fa03 f202 	lsl.w	r2, r3, r2
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8004ae2:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae4:	69f9      	ldr	r1, [r7, #28]
 8004ae6:	fa91 f1a1 	rbit	r1, r1
 8004aea:	61b9      	str	r1, [r7, #24]
  return result;
 8004aec:	69b9      	ldr	r1, [r7, #24]
 8004aee:	fab1 f181 	clz	r1, r1
 8004af2:	b2c9      	uxtb	r1, r1
 8004af4:	408b      	lsls	r3, r1
 8004af6:	4955      	ldr	r1, [pc, #340]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004afe:	4b52      	ldr	r3, [pc, #328]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b04:	f7fe fd14 	bl	8003530 <HAL_GetTick>
 8004b08:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b0c:	f7fe fd10 	bl	8003530 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e090      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b1e:	4b4b      	ldr	r3, [pc, #300]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0f0      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 8083 	beq.w	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	4b43      	ldr	r3, [pc, #268]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	4a42      	ldr	r2, [pc, #264]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b46:	6413      	str	r3, [r2, #64]	; 0x40
 8004b48:	4b40      	ldr	r3, [pc, #256]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b54:	4b3e      	ldr	r3, [pc, #248]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a3d      	ldr	r2, [pc, #244]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b5e:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b60:	f7fe fce6 	bl	8003530 <HAL_GetTick>
 8004b64:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b68:	f7fe fce2 	bl	8003530 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e062      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b7a:	4b35      	ldr	r3, [pc, #212]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0f0      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b86:	4b31      	ldr	r3, [pc, #196]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8e:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d02f      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b9e:	6a3a      	ldr	r2, [r7, #32]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d028      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ba4:	4b29      	ldr	r3, [pc, #164]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bac:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bae:	4b29      	ldr	r3, [pc, #164]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bb4:	4b27      	ldr	r3, [pc, #156]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004bba:	4a24      	ldr	r2, [pc, #144]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bc0:	4b22      	ldr	r3, [pc, #136]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d114      	bne.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004bcc:	f7fe fcb0 	bl	8003530 <HAL_GetTick>
 8004bd0:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd2:	e00a      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bd4:	f7fe fcac 	bl	8003530 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d901      	bls.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e02a      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bea:	4b18      	ldr	r3, [pc, #96]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0ee      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c02:	d10d      	bne.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004c04:	4b11      	ldr	r3, [pc, #68]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c18:	490c      	ldr	r1, [pc, #48]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	608b      	str	r3, [r1, #8]
 8004c1e:	e005      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004c20:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	4a09      	ldr	r2, [pc, #36]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c26:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c2a:	6093      	str	r3, [r2, #8]
 8004c2c:	4b07      	ldr	r3, [pc, #28]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c38:	4904      	ldr	r1, [pc, #16]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3728      	adds	r7, #40	; 0x28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	42470068 	.word	0x42470068
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	40007000 	.word	0x40007000
 8004c54:	42470e40 	.word	0x42470e40

08004c58 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e07c      	b.n	8004d64 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	7f5b      	ldrb	r3, [r3, #29]
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d105      	bne.n	8004c80 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7fe f966 	bl	8002f4c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	22ca      	movs	r2, #202	; 0xca
 8004c8c:	625a      	str	r2, [r3, #36]	; 0x24
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2253      	movs	r2, #83	; 0x53
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fb8d 	bl	80053b6 <RTC_EnterInitMode>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d008      	beq.n	8004cb4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	22ff      	movs	r2, #255	; 0xff
 8004ca8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2204      	movs	r2, #4
 8004cae:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e057      	b.n	8004d64 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6812      	ldr	r2, [r2, #0]
 8004cbe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cc6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6899      	ldr	r1, [r3, #8]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	68d2      	ldr	r2, [r2, #12]
 8004cee:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6919      	ldr	r1, [r3, #16]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	041a      	lsls	r2, r3, #16
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d12:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 fb26 	bl	8005366 <HAL_RTC_WaitForSynchro>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d008      	beq.n	8004d32 <HAL_RTC_Init+0xda>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	22ff      	movs	r2, #255	; 0xff
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2204      	movs	r2, #4
 8004d2c:	775a      	strb	r2, [r3, #29]

      return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e018      	b.n	8004d64 <HAL_RTC_Init+0x10c>
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d40:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699a      	ldr	r2, [r3, #24]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	22ff      	movs	r2, #255	; 0xff
 8004d5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004d62:	2300      	movs	r3, #0
  }
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d6c:	b590      	push	{r4, r7, lr}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	7f1b      	ldrb	r3, [r3, #28]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_RTC_SetTime+0x1c>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e0a3      	b.n	8004ed0 <HAL_RTC_SetTime+0x164>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2202      	movs	r2, #2
 8004d92:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d126      	bne.n	8004de8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d102      	bne.n	8004dae <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2200      	movs	r2, #0
 8004dac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fb2b 	bl	800540e <RTC_ByteToBcd2>
 8004db8:	4603      	mov	r3, r0
 8004dba:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	785b      	ldrb	r3, [r3, #1]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fb24 	bl	800540e <RTC_ByteToBcd2>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004dca:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	789b      	ldrb	r3, [r3, #2]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 fb1c 	bl	800540e <RTC_ByteToBcd2>
 8004dd6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004dd8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	78db      	ldrb	r3, [r3, #3]
 8004de0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	e018      	b.n	8004e1a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d102      	bne.n	8004dfc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	785b      	ldrb	r3, [r3, #1]
 8004e06:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004e08:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004e0e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	78db      	ldrb	r3, [r3, #3]
 8004e14:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004e16:	4313      	orrs	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	22ca      	movs	r2, #202	; 0xca
 8004e20:	625a      	str	r2, [r3, #36]	; 0x24
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2253      	movs	r2, #83	; 0x53
 8004e28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 fac3 	bl	80053b6 <RTC_EnterInitMode>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00b      	beq.n	8004e4e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	22ff      	movs	r2, #255	; 0xff
 8004e3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2204      	movs	r2, #4
 8004e42:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e040      	b.n	8004ed0 <HAL_RTC_SetTime+0x164>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004e58:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004e5c:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e6c:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6899      	ldr	r1, [r3, #8]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e94:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 fa65 	bl	8005366 <HAL_RTC_WaitForSynchro>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00b      	beq.n	8004eba <HAL_RTC_SetTime+0x14e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	22ff      	movs	r2, #255	; 0xff
 8004ea8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2204      	movs	r2, #4
 8004eae:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e00a      	b.n	8004ed0 <HAL_RTC_SetTime+0x164>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	22ff      	movs	r2, #255	; 0xff
 8004ec0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004ece:	2300      	movs	r3, #0
  }
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd90      	pop	{r4, r7, pc}

08004ed8 <HAL_RTC_GetTime>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004ef2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004ef6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	0c1b      	lsrs	r3, r3, #16
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	0a1b      	lsrs	r3, r3, #8
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	0c1b      	lsrs	r3, r3, #16
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d11a      	bne.n	8004f72 <HAL_RTC_GetTime+0x9a>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 fa81 	bl	8005448 <RTC_Bcd2ToByte>
 8004f46:	4603      	mov	r3, r0
 8004f48:	461a      	mov	r2, r3
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	785b      	ldrb	r3, [r3, #1]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 fa78 	bl	8005448 <RTC_Bcd2ToByte>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	789b      	ldrb	r3, [r3, #2]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fa6f 	bl	8005448 <RTC_Bcd2ToByte>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f7c:	b590      	push	{r4, r7, lr}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	7f1b      	ldrb	r3, [r3, #28]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_RTC_SetDate+0x1c>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e08d      	b.n	80050b4 <HAL_RTC_SetDate+0x138>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10e      	bne.n	8004fc8 <HAL_RTC_SetDate+0x4c>
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	785b      	ldrb	r3, [r3, #1]
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d008      	beq.n	8004fc8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~0x10) + (uint8_t)0x0A);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	785b      	ldrb	r3, [r3, #1]
 8004fba:	f023 0310 	bic.w	r3, r3, #16
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	330a      	adds	r3, #10
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d11c      	bne.n	8005008 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	78db      	ldrb	r3, [r3, #3]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fa1b 	bl	800540e <RTC_ByteToBcd2>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	785b      	ldrb	r3, [r3, #1]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 fa14 	bl	800540e <RTC_ByteToBcd2>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004fea:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	789b      	ldrb	r3, [r3, #2]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fa0c 	bl	800540e <RTC_ByteToBcd2>
 8004ff6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004ff8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	e00e      	b.n	8005026 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	78db      	ldrb	r3, [r3, #3]
 800500c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	785b      	ldrb	r3, [r3, #1]
 8005012:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005014:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800501a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005022:	4313      	orrs	r3, r2
 8005024:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	22ca      	movs	r2, #202	; 0xca
 800502c:	625a      	str	r2, [r3, #36]	; 0x24
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2253      	movs	r2, #83	; 0x53
 8005034:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f9bd 	bl	80053b6 <RTC_EnterInitMode>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00b      	beq.n	800505a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	22ff      	movs	r2, #255	; 0xff
 8005048:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2204      	movs	r2, #4
 800504e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e02c      	b.n	80050b4 <HAL_RTC_SetDate+0x138>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005064:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005068:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005078:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 f973 	bl	8005366 <HAL_RTC_WaitForSynchro>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00b      	beq.n	800509e <HAL_RTC_SetDate+0x122>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	22ff      	movs	r2, #255	; 0xff
 800508c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2204      	movs	r2, #4
 8005092:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e00a      	b.n	80050b4 <HAL_RTC_SetDate+0x138>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	22ff      	movs	r2, #255	; 0xff
 80050a4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80050b2:	2300      	movs	r3, #0
  }
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd90      	pop	{r4, r7, pc}

080050bc <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80050d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80050da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	0c1b      	lsrs	r3, r3, #16
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	0a1b      	lsrs	r3, r3, #8
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	f003 031f 	and.w	r3, r3, #31
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	0b5b      	lsrs	r3, r3, #13
 8005108:	b2db      	uxtb	r3, r3
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	b2da      	uxtb	r2, r3
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d11a      	bne.n	8005150 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	78db      	ldrb	r3, [r3, #3]
 800511e:	4618      	mov	r0, r3
 8005120:	f000 f992 	bl	8005448 <RTC_Bcd2ToByte>
 8005124:	4603      	mov	r3, r0
 8005126:	461a      	mov	r2, r3
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	785b      	ldrb	r3, [r3, #1]
 8005130:	4618      	mov	r0, r3
 8005132:	f000 f989 	bl	8005448 <RTC_Bcd2ToByte>
 8005136:	4603      	mov	r3, r0
 8005138:	461a      	mov	r2, r3
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	789b      	ldrb	r3, [r3, #2]
 8005142:	4618      	mov	r0, r3
 8005144:	f000 f980 	bl	8005448 <RTC_Bcd2ToByte>
 8005148:	4603      	mov	r3, r0
 800514a:	461a      	mov	r2, r3
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800515a:	b590      	push	{r4, r7, lr}
 800515c:	b087      	sub	sp, #28
 800515e:	af00      	add	r7, sp, #0
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	7f1b      	ldrb	r3, [r3, #28]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_RTC_SetAlarm+0x20>
 8005176:	2302      	movs	r3, #2
 8005178:	e0f1      	b.n	800535e <HAL_RTC_SetAlarm+0x204>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2202      	movs	r2, #2
 8005184:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d136      	bne.n	80051fa <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	d102      	bne.n	80051a0 <HAL_RTC_SetAlarm+0x46>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2200      	movs	r2, #0
 800519e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 f932 	bl	800540e <RTC_ByteToBcd2>
 80051aa:	4603      	mov	r3, r0
 80051ac:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	785b      	ldrb	r3, [r3, #1]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 f92b 	bl	800540e <RTC_ByteToBcd2>
 80051b8:	4603      	mov	r3, r0
 80051ba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80051bc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	789b      	ldrb	r3, [r3, #2]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 f923 	bl	800540e <RTC_ByteToBcd2>
 80051c8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80051ca:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	78db      	ldrb	r3, [r3, #3]
 80051d2:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80051d4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	7d1b      	ldrb	r3, [r3, #20]
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 f916 	bl	800540e <RTC_ByteToBcd2>
 80051e2:	4603      	mov	r3, r0
 80051e4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80051e6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80051ee:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	e022      	b.n	8005240 <HAL_RTC_SetAlarm+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005204:	2b00      	cmp	r3, #0
 8005206:	d102      	bne.n	800520e <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2200      	movs	r2, #0
 800520c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	785b      	ldrb	r3, [r3, #1]
 8005218:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800521a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005220:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	78db      	ldrb	r3, [r3, #3]
 8005226:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005228:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	7d1b      	ldrb	r3, [r3, #20]
 800522e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005230:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005236:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	22ca      	movs	r2, #202	; 0xca
 8005246:	625a      	str	r2, [r3, #36]	; 0x24
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2253      	movs	r2, #83	; 0x53
 800524e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005258:	d13b      	bne.n	80052d2 <HAL_RTC_SetAlarm+0x178>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005268:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005278:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800527a:	f7fe f959 	bl	8003530 <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005280:	e013      	b.n	80052aa <HAL_RTC_SetAlarm+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005282:	f7fe f955 	bl	8003530 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005290:	d90b      	bls.n	80052aa <HAL_RTC_SetAlarm+0x150>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	22ff      	movs	r2, #255	; 0xff
 8005298:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2203      	movs	r2, #3
 800529e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e059      	b.n	800535e <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0e4      	beq.n	8005282 <HAL_RTC_SetAlarm+0x128>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052ce:	609a      	str	r2, [r3, #8]
 80052d0:	e03a      	b.n	8005348 <HAL_RTC_SetAlarm+0x1ee>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052e0:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052f0:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052f2:	f7fe f91d 	bl	8003530 <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80052f8:	e013      	b.n	8005322 <HAL_RTC_SetAlarm+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052fa:	f7fe f919 	bl	8003530 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005308:	d90b      	bls.n	8005322 <HAL_RTC_SetAlarm+0x1c8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	22ff      	movs	r2, #255	; 0xff
 8005310:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2203      	movs	r2, #3
 8005316:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e01d      	b.n	800535e <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0e4      	beq.n	80052fa <HAL_RTC_SetAlarm+0x1a0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005346:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	22ff      	movs	r2, #255	; 0xff
 800534e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2201      	movs	r2, #1
 8005354:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	bd90      	pop	{r4, r7, pc}

08005366 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005380:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005382:	f7fe f8d5 	bl	8003530 <HAL_GetTick>
 8005386:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005388:	e009      	b.n	800539e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800538a:	f7fe f8d1 	bl	8003530 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005398:	d901      	bls.n	800539e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e007      	b.n	80053ae <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0320 	and.w	r3, r3, #32
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0ee      	beq.n	800538a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d119      	bne.n	8005404 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f04f 32ff 	mov.w	r2, #4294967295
 80053d8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053da:	f7fe f8a9 	bl	8003530 <HAL_GetTick>
 80053de:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80053e0:	e009      	b.n	80053f6 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80053e2:	f7fe f8a5 	bl	8003530 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053f0:	d901      	bls.n	80053f6 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e007      	b.n	8005406 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0ee      	beq.n	80053e2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800540e:	b480      	push	{r7}
 8005410:	b085      	sub	sp, #20
 8005412:	af00      	add	r7, sp, #0
 8005414:	4603      	mov	r3, r0
 8005416:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	60fb      	str	r3, [r7, #12]

  while (Value >= 10)
 800541c:	e005      	b.n	800542a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3301      	adds	r3, #1
 8005422:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	3b0a      	subs	r3, #10
 8005428:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 800542a:	79fb      	ldrb	r3, [r7, #7]
 800542c:	2b09      	cmp	r3, #9
 800542e:	d8f6      	bhi.n	800541e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	b2db      	uxtb	r3, r3
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	b2da      	uxtb	r2, r3
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	4313      	orrs	r3, r2
 800543c:	b2db      	uxtb	r3, r3
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr

08005448 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	4603      	mov	r3, r0
 8005450:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005456:	79fb      	ldrb	r3, [r7, #7]
 8005458:	091b      	lsrs	r3, r3, #4
 800545a:	b2db      	uxtb	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	4613      	mov	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005468:	79fb      	ldrb	r3, [r7, #7]
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	b2da      	uxtb	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	4413      	add	r3, r2
 8005476:	b2db      	uxtb	r3, r3
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	bc80      	pop	{r7}
 8005480:	4770      	bx	lr

08005482 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b086      	sub	sp, #24
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	7f1b      	ldrb	r3, [r3, #28]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d101      	bne.n	800549e <HAL_RTCEx_SetWakeUpTimer+0x1c>
 800549a:	2302      	movs	r3, #2
 800549c:	e081      	b.n	80055a2 <HAL_RTCEx_SetWakeUpTimer+0x120>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2201      	movs	r2, #1
 80054a2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2202      	movs	r2, #2
 80054a8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	22ca      	movs	r2, #202	; 0xca
 80054b0:	625a      	str	r2, [r3, #36]	; 0x24
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2253      	movs	r2, #83	; 0x53
 80054b8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d01e      	beq.n	8005506 <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 80054c8:	f7fe f832 	bl	8003530 <HAL_GetTick>
 80054cc:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 80054ce:	e013      	b.n	80054f8 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80054d0:	f7fe f82e 	bl	8003530 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054de:	d90b      	bls.n	80054f8 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	22ff      	movs	r2, #255	; 0xff
 80054e6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2203      	movs	r2, #3
 80054ec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e054      	b.n	80055a2 <HAL_RTCEx_SetWakeUpTimer+0x120>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1e4      	bne.n	80054d0 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005514:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005516:	f7fe f80b 	bl	8003530 <HAL_GetTick>
 800551a:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800551c:	e013      	b.n	8005546 <HAL_RTCEx_SetWakeUpTimer+0xc4>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800551e:	f7fe f807 	bl	8003530 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800552c:	d90b      	bls.n	8005546 <HAL_RTCEx_SetWakeUpTimer+0xc4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	22ff      	movs	r2, #255	; 0xff
 8005534:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2203      	movs	r2, #3
 800553a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e02d      	b.n	80055a2 <HAL_RTCEx_SetWakeUpTimer+0x120>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0e4      	beq.n	800551e <HAL_RTCEx_SetWakeUpTimer+0x9c>
    }
  }

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0207 	bic.w	r2, r2, #7
 8005562:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6899      	ldr	r1, [r3, #8]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	430a      	orrs	r2, r1
 8005572:	609a      	str	r2, [r3, #8]

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	615a      	str	r2, [r3, #20]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800558a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	22ff      	movs	r2, #255	; 0xff
 8005592:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2201      	movs	r2, #1
 8005598:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3718      	adds	r7, #24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e041      	b.n	8005640 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d106      	bne.n	80055d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7fd fcd1 	bl	8002f78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2202      	movs	r2, #2
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3304      	adds	r3, #4
 80055e6:	4619      	mov	r1, r3
 80055e8:	4610      	mov	r0, r2
 80055ea:	f000 fb35 	bl	8005c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b01      	cmp	r3, #1
 800565a:	d001      	beq.n	8005660 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e046      	b.n	80056ee <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a22      	ldr	r2, [pc, #136]	; (80056f8 <HAL_TIM_Base_Start+0xb0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d022      	beq.n	80056b8 <HAL_TIM_Base_Start+0x70>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567a:	d01d      	beq.n	80056b8 <HAL_TIM_Base_Start+0x70>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a1e      	ldr	r2, [pc, #120]	; (80056fc <HAL_TIM_Base_Start+0xb4>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d018      	beq.n	80056b8 <HAL_TIM_Base_Start+0x70>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a1d      	ldr	r2, [pc, #116]	; (8005700 <HAL_TIM_Base_Start+0xb8>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d013      	beq.n	80056b8 <HAL_TIM_Base_Start+0x70>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a1b      	ldr	r2, [pc, #108]	; (8005704 <HAL_TIM_Base_Start+0xbc>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00e      	beq.n	80056b8 <HAL_TIM_Base_Start+0x70>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a1a      	ldr	r2, [pc, #104]	; (8005708 <HAL_TIM_Base_Start+0xc0>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d009      	beq.n	80056b8 <HAL_TIM_Base_Start+0x70>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a18      	ldr	r2, [pc, #96]	; (800570c <HAL_TIM_Base_Start+0xc4>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_TIM_Base_Start+0x70>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a17      	ldr	r2, [pc, #92]	; (8005710 <HAL_TIM_Base_Start+0xc8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d111      	bne.n	80056dc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b06      	cmp	r3, #6
 80056c8:	d010      	beq.n	80056ec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0201 	orr.w	r2, r2, #1
 80056d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056da:	e007      	b.n	80056ec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bc80      	pop	{r7}
 80056f6:	4770      	bx	lr
 80056f8:	40010000 	.word	0x40010000
 80056fc:	40000400 	.word	0x40000400
 8005700:	40000800 	.word	0x40000800
 8005704:	40000c00 	.word	0x40000c00
 8005708:	40010400 	.word	0x40010400
 800570c:	40014000 	.word	0x40014000
 8005710:	40001800 	.word	0x40001800

08005714 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e041      	b.n	80057aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f839 	bl	80057b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3304      	adds	r3, #4
 8005750:	4619      	mov	r1, r3
 8005752:	4610      	mov	r0, r2
 8005754:	f000 fa80 	bl	8005c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	bc80      	pop	{r7}
 80057c2:	4770      	bx	lr

080057c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d109      	bne.n	80057e8 <HAL_TIM_PWM_Start+0x24>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b01      	cmp	r3, #1
 80057de:	bf14      	ite	ne
 80057e0:	2301      	movne	r3, #1
 80057e2:	2300      	moveq	r3, #0
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	e022      	b.n	800582e <HAL_TIM_PWM_Start+0x6a>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	d109      	bne.n	8005802 <HAL_TIM_PWM_Start+0x3e>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	bf14      	ite	ne
 80057fa:	2301      	movne	r3, #1
 80057fc:	2300      	moveq	r3, #0
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	e015      	b.n	800582e <HAL_TIM_PWM_Start+0x6a>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b08      	cmp	r3, #8
 8005806:	d109      	bne.n	800581c <HAL_TIM_PWM_Start+0x58>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b01      	cmp	r3, #1
 8005812:	bf14      	ite	ne
 8005814:	2301      	movne	r3, #1
 8005816:	2300      	moveq	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	e008      	b.n	800582e <HAL_TIM_PWM_Start+0x6a>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b01      	cmp	r3, #1
 8005826:	bf14      	ite	ne
 8005828:	2301      	movne	r3, #1
 800582a:	2300      	moveq	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e07c      	b.n	8005930 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d104      	bne.n	8005846 <HAL_TIM_PWM_Start+0x82>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005844:	e013      	b.n	800586e <HAL_TIM_PWM_Start+0xaa>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b04      	cmp	r3, #4
 800584a:	d104      	bne.n	8005856 <HAL_TIM_PWM_Start+0x92>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005854:	e00b      	b.n	800586e <HAL_TIM_PWM_Start+0xaa>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b08      	cmp	r3, #8
 800585a:	d104      	bne.n	8005866 <HAL_TIM_PWM_Start+0xa2>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005864:	e003      	b.n	800586e <HAL_TIM_PWM_Start+0xaa>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2202      	movs	r2, #2
 800586a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2201      	movs	r2, #1
 8005874:	6839      	ldr	r1, [r7, #0]
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fcce 	bl	8006218 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a2d      	ldr	r2, [pc, #180]	; (8005938 <HAL_TIM_PWM_Start+0x174>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d004      	beq.n	8005890 <HAL_TIM_PWM_Start+0xcc>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a2c      	ldr	r2, [pc, #176]	; (800593c <HAL_TIM_PWM_Start+0x178>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d101      	bne.n	8005894 <HAL_TIM_PWM_Start+0xd0>
 8005890:	2301      	movs	r3, #1
 8005892:	e000      	b.n	8005896 <HAL_TIM_PWM_Start+0xd2>
 8005894:	2300      	movs	r3, #0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d007      	beq.n	80058aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a22      	ldr	r2, [pc, #136]	; (8005938 <HAL_TIM_PWM_Start+0x174>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d022      	beq.n	80058fa <HAL_TIM_PWM_Start+0x136>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058bc:	d01d      	beq.n	80058fa <HAL_TIM_PWM_Start+0x136>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a1f      	ldr	r2, [pc, #124]	; (8005940 <HAL_TIM_PWM_Start+0x17c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d018      	beq.n	80058fa <HAL_TIM_PWM_Start+0x136>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a1d      	ldr	r2, [pc, #116]	; (8005944 <HAL_TIM_PWM_Start+0x180>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d013      	beq.n	80058fa <HAL_TIM_PWM_Start+0x136>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a1c      	ldr	r2, [pc, #112]	; (8005948 <HAL_TIM_PWM_Start+0x184>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d00e      	beq.n	80058fa <HAL_TIM_PWM_Start+0x136>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a16      	ldr	r2, [pc, #88]	; (800593c <HAL_TIM_PWM_Start+0x178>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d009      	beq.n	80058fa <HAL_TIM_PWM_Start+0x136>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a18      	ldr	r2, [pc, #96]	; (800594c <HAL_TIM_PWM_Start+0x188>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d004      	beq.n	80058fa <HAL_TIM_PWM_Start+0x136>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a16      	ldr	r2, [pc, #88]	; (8005950 <HAL_TIM_PWM_Start+0x18c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d111      	bne.n	800591e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f003 0307 	and.w	r3, r3, #7
 8005904:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b06      	cmp	r3, #6
 800590a:	d010      	beq.n	800592e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0201 	orr.w	r2, r2, #1
 800591a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800591c:	e007      	b.n	800592e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f042 0201 	orr.w	r2, r2, #1
 800592c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	40010000 	.word	0x40010000
 800593c:	40010400 	.word	0x40010400
 8005940:	40000400 	.word	0x40000400
 8005944:	40000800 	.word	0x40000800
 8005948:	40000c00 	.word	0x40000c00
 800594c:	40014000 	.word	0x40014000
 8005950:	40001800 	.word	0x40001800

08005954 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005966:	2b01      	cmp	r3, #1
 8005968:	d101      	bne.n	800596e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800596a:	2302      	movs	r3, #2
 800596c:	e0ac      	b.n	8005ac8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b0c      	cmp	r3, #12
 800597a:	f200 809f 	bhi.w	8005abc <HAL_TIM_PWM_ConfigChannel+0x168>
 800597e:	a201      	add	r2, pc, #4	; (adr r2, 8005984 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005984:	080059b9 	.word	0x080059b9
 8005988:	08005abd 	.word	0x08005abd
 800598c:	08005abd 	.word	0x08005abd
 8005990:	08005abd 	.word	0x08005abd
 8005994:	080059f9 	.word	0x080059f9
 8005998:	08005abd 	.word	0x08005abd
 800599c:	08005abd 	.word	0x08005abd
 80059a0:	08005abd 	.word	0x08005abd
 80059a4:	08005a3b 	.word	0x08005a3b
 80059a8:	08005abd 	.word	0x08005abd
 80059ac:	08005abd 	.word	0x08005abd
 80059b0:	08005abd 	.word	0x08005abd
 80059b4:	08005a7b 	.word	0x08005a7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68b9      	ldr	r1, [r7, #8]
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 f9e8 	bl	8005d94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699a      	ldr	r2, [r3, #24]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0208 	orr.w	r2, r2, #8
 80059d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699a      	ldr	r2, [r3, #24]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0204 	bic.w	r2, r2, #4
 80059e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6999      	ldr	r1, [r3, #24]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	691a      	ldr	r2, [r3, #16]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	619a      	str	r2, [r3, #24]
      break;
 80059f6:	e062      	b.n	8005abe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68b9      	ldr	r1, [r7, #8]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fa38 	bl	8005e74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699a      	ldr	r2, [r3, #24]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6999      	ldr	r1, [r3, #24]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	021a      	lsls	r2, r3, #8
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	619a      	str	r2, [r3, #24]
      break;
 8005a38:	e041      	b.n	8005abe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fa8b 	bl	8005f5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69da      	ldr	r2, [r3, #28]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f042 0208 	orr.w	r2, r2, #8
 8005a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69da      	ldr	r2, [r3, #28]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 0204 	bic.w	r2, r2, #4
 8005a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69d9      	ldr	r1, [r3, #28]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	61da      	str	r2, [r3, #28]
      break;
 8005a78:	e021      	b.n	8005abe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68b9      	ldr	r1, [r7, #8]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 fadf 	bl	8006044 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	69da      	ldr	r2, [r3, #28]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69da      	ldr	r2, [r3, #28]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69d9      	ldr	r1, [r3, #28]
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	021a      	lsls	r2, r3, #8
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	61da      	str	r2, [r3, #28]
      break;
 8005aba:	e000      	b.n	8005abe <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005abc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_TIM_ConfigClockSource+0x18>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e0b3      	b.n	8005c50 <HAL_TIM_ConfigClockSource+0x180>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b20:	d03e      	beq.n	8005ba0 <HAL_TIM_ConfigClockSource+0xd0>
 8005b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b26:	f200 8087 	bhi.w	8005c38 <HAL_TIM_ConfigClockSource+0x168>
 8005b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2e:	f000 8085 	beq.w	8005c3c <HAL_TIM_ConfigClockSource+0x16c>
 8005b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b36:	d87f      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x168>
 8005b38:	2b70      	cmp	r3, #112	; 0x70
 8005b3a:	d01a      	beq.n	8005b72 <HAL_TIM_ConfigClockSource+0xa2>
 8005b3c:	2b70      	cmp	r3, #112	; 0x70
 8005b3e:	d87b      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x168>
 8005b40:	2b60      	cmp	r3, #96	; 0x60
 8005b42:	d050      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0x116>
 8005b44:	2b60      	cmp	r3, #96	; 0x60
 8005b46:	d877      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x168>
 8005b48:	2b50      	cmp	r3, #80	; 0x50
 8005b4a:	d03c      	beq.n	8005bc6 <HAL_TIM_ConfigClockSource+0xf6>
 8005b4c:	2b50      	cmp	r3, #80	; 0x50
 8005b4e:	d873      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x168>
 8005b50:	2b40      	cmp	r3, #64	; 0x40
 8005b52:	d058      	beq.n	8005c06 <HAL_TIM_ConfigClockSource+0x136>
 8005b54:	2b40      	cmp	r3, #64	; 0x40
 8005b56:	d86f      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x168>
 8005b58:	2b30      	cmp	r3, #48	; 0x30
 8005b5a:	d064      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x156>
 8005b5c:	2b30      	cmp	r3, #48	; 0x30
 8005b5e:	d86b      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x168>
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d060      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x156>
 8005b64:	2b20      	cmp	r3, #32
 8005b66:	d867      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x168>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d05c      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x156>
 8005b6c:	2b10      	cmp	r3, #16
 8005b6e:	d05a      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005b70:	e062      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6818      	ldr	r0, [r3, #0]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	6899      	ldr	r1, [r3, #8]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f000 fb2a 	bl	80061da <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b94:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	609a      	str	r2, [r3, #8]
      break;
 8005b9e:	e04e      	b.n	8005c3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6818      	ldr	r0, [r3, #0]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	6899      	ldr	r1, [r3, #8]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f000 fb13 	bl	80061da <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bc2:	609a      	str	r2, [r3, #8]
      break;
 8005bc4:	e03b      	b.n	8005c3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	6859      	ldr	r1, [r3, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f000 fa8a 	bl	80060ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2150      	movs	r1, #80	; 0x50
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 fae1 	bl	80061a6 <TIM_ITRx_SetConfig>
      break;
 8005be4:	e02b      	b.n	8005c3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6818      	ldr	r0, [r3, #0]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	6859      	ldr	r1, [r3, #4]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	f000 faa8 	bl	8006148 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2160      	movs	r1, #96	; 0x60
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fad1 	bl	80061a6 <TIM_ITRx_SetConfig>
      break;
 8005c04:	e01b      	b.n	8005c3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6818      	ldr	r0, [r3, #0]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	6859      	ldr	r1, [r3, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	461a      	mov	r2, r3
 8005c14:	f000 fa6a 	bl	80060ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2140      	movs	r1, #64	; 0x40
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 fac1 	bl	80061a6 <TIM_ITRx_SetConfig>
      break;
 8005c24:	e00b      	b.n	8005c3e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4619      	mov	r1, r3
 8005c30:	4610      	mov	r0, r2
 8005c32:	f000 fab8 	bl	80061a6 <TIM_ITRx_SetConfig>
        break;
 8005c36:	e002      	b.n	8005c3e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c38:	bf00      	nop
 8005c3a:	e000      	b.n	8005c3e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c3c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a3f      	ldr	r2, [pc, #252]	; (8005d68 <TIM_Base_SetConfig+0x110>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d013      	beq.n	8005c98 <TIM_Base_SetConfig+0x40>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c76:	d00f      	beq.n	8005c98 <TIM_Base_SetConfig+0x40>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a3c      	ldr	r2, [pc, #240]	; (8005d6c <TIM_Base_SetConfig+0x114>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00b      	beq.n	8005c98 <TIM_Base_SetConfig+0x40>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a3b      	ldr	r2, [pc, #236]	; (8005d70 <TIM_Base_SetConfig+0x118>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d007      	beq.n	8005c98 <TIM_Base_SetConfig+0x40>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a3a      	ldr	r2, [pc, #232]	; (8005d74 <TIM_Base_SetConfig+0x11c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d003      	beq.n	8005c98 <TIM_Base_SetConfig+0x40>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a39      	ldr	r2, [pc, #228]	; (8005d78 <TIM_Base_SetConfig+0x120>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d108      	bne.n	8005caa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a2e      	ldr	r2, [pc, #184]	; (8005d68 <TIM_Base_SetConfig+0x110>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d02b      	beq.n	8005d0a <TIM_Base_SetConfig+0xb2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb8:	d027      	beq.n	8005d0a <TIM_Base_SetConfig+0xb2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a2b      	ldr	r2, [pc, #172]	; (8005d6c <TIM_Base_SetConfig+0x114>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d023      	beq.n	8005d0a <TIM_Base_SetConfig+0xb2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a2a      	ldr	r2, [pc, #168]	; (8005d70 <TIM_Base_SetConfig+0x118>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d01f      	beq.n	8005d0a <TIM_Base_SetConfig+0xb2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a29      	ldr	r2, [pc, #164]	; (8005d74 <TIM_Base_SetConfig+0x11c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d01b      	beq.n	8005d0a <TIM_Base_SetConfig+0xb2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a28      	ldr	r2, [pc, #160]	; (8005d78 <TIM_Base_SetConfig+0x120>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d017      	beq.n	8005d0a <TIM_Base_SetConfig+0xb2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a27      	ldr	r2, [pc, #156]	; (8005d7c <TIM_Base_SetConfig+0x124>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d013      	beq.n	8005d0a <TIM_Base_SetConfig+0xb2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a26      	ldr	r2, [pc, #152]	; (8005d80 <TIM_Base_SetConfig+0x128>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d00f      	beq.n	8005d0a <TIM_Base_SetConfig+0xb2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a25      	ldr	r2, [pc, #148]	; (8005d84 <TIM_Base_SetConfig+0x12c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00b      	beq.n	8005d0a <TIM_Base_SetConfig+0xb2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a24      	ldr	r2, [pc, #144]	; (8005d88 <TIM_Base_SetConfig+0x130>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d007      	beq.n	8005d0a <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a23      	ldr	r2, [pc, #140]	; (8005d8c <TIM_Base_SetConfig+0x134>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d003      	beq.n	8005d0a <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a22      	ldr	r2, [pc, #136]	; (8005d90 <TIM_Base_SetConfig+0x138>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d108      	bne.n	8005d1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a09      	ldr	r2, [pc, #36]	; (8005d68 <TIM_Base_SetConfig+0x110>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d003      	beq.n	8005d50 <TIM_Base_SetConfig+0xf8>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a0b      	ldr	r2, [pc, #44]	; (8005d78 <TIM_Base_SetConfig+0x120>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d103      	bne.n	8005d58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	615a      	str	r2, [r3, #20]
}
 8005d5e:	bf00      	nop
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bc80      	pop	{r7}
 8005d66:	4770      	bx	lr
 8005d68:	40010000 	.word	0x40010000
 8005d6c:	40000400 	.word	0x40000400
 8005d70:	40000800 	.word	0x40000800
 8005d74:	40000c00 	.word	0x40000c00
 8005d78:	40010400 	.word	0x40010400
 8005d7c:	40014000 	.word	0x40014000
 8005d80:	40014400 	.word	0x40014400
 8005d84:	40014800 	.word	0x40014800
 8005d88:	40001800 	.word	0x40001800
 8005d8c:	40001c00 	.word	0x40001c00
 8005d90:	40002000 	.word	0x40002000

08005d94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	f023 0201 	bic.w	r2, r3, #1
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0303 	bic.w	r3, r3, #3
 8005dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f023 0302 	bic.w	r3, r3, #2
 8005ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a20      	ldr	r2, [pc, #128]	; (8005e6c <TIM_OC1_SetConfig+0xd8>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d003      	beq.n	8005df8 <TIM_OC1_SetConfig+0x64>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a1f      	ldr	r2, [pc, #124]	; (8005e70 <TIM_OC1_SetConfig+0xdc>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d10c      	bne.n	8005e12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f023 0308 	bic.w	r3, r3, #8
 8005dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f023 0304 	bic.w	r3, r3, #4
 8005e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a15      	ldr	r2, [pc, #84]	; (8005e6c <TIM_OC1_SetConfig+0xd8>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d003      	beq.n	8005e22 <TIM_OC1_SetConfig+0x8e>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a14      	ldr	r2, [pc, #80]	; (8005e70 <TIM_OC1_SetConfig+0xdc>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d111      	bne.n	8005e46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	621a      	str	r2, [r3, #32]
}
 8005e60:	bf00      	nop
 8005e62:	371c      	adds	r7, #28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bc80      	pop	{r7}
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40010000 	.word	0x40010000
 8005e70:	40010400 	.word	0x40010400

08005e74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	f023 0210 	bic.w	r2, r3, #16
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	021b      	lsls	r3, r3, #8
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f023 0320 	bic.w	r3, r3, #32
 8005ebe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	011b      	lsls	r3, r3, #4
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a21      	ldr	r2, [pc, #132]	; (8005f54 <TIM_OC2_SetConfig+0xe0>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d003      	beq.n	8005edc <TIM_OC2_SetConfig+0x68>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a20      	ldr	r2, [pc, #128]	; (8005f58 <TIM_OC2_SetConfig+0xe4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d10d      	bne.n	8005ef8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	011b      	lsls	r3, r3, #4
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a16      	ldr	r2, [pc, #88]	; (8005f54 <TIM_OC2_SetConfig+0xe0>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d003      	beq.n	8005f08 <TIM_OC2_SetConfig+0x94>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a15      	ldr	r2, [pc, #84]	; (8005f58 <TIM_OC2_SetConfig+0xe4>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d113      	bne.n	8005f30 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	621a      	str	r2, [r3, #32]
}
 8005f4a:	bf00      	nop
 8005f4c:	371c      	adds	r7, #28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bc80      	pop	{r7}
 8005f52:	4770      	bx	lr
 8005f54:	40010000 	.word	0x40010000
 8005f58:	40010400 	.word	0x40010400

08005f5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0303 	bic.w	r3, r3, #3
 8005f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	021b      	lsls	r3, r3, #8
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a21      	ldr	r2, [pc, #132]	; (800603c <TIM_OC3_SetConfig+0xe0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d003      	beq.n	8005fc2 <TIM_OC3_SetConfig+0x66>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a20      	ldr	r2, [pc, #128]	; (8006040 <TIM_OC3_SetConfig+0xe4>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d10d      	bne.n	8005fde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a16      	ldr	r2, [pc, #88]	; (800603c <TIM_OC3_SetConfig+0xe0>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d003      	beq.n	8005fee <TIM_OC3_SetConfig+0x92>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a15      	ldr	r2, [pc, #84]	; (8006040 <TIM_OC3_SetConfig+0xe4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d113      	bne.n	8006016 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	4313      	orrs	r3, r2
 8006008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	4313      	orrs	r3, r2
 8006014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	621a      	str	r2, [r3, #32]
}
 8006030:	bf00      	nop
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	bc80      	pop	{r7}
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40010000 	.word	0x40010000
 8006040:	40010400 	.word	0x40010400

08006044 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800607a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	021b      	lsls	r3, r3, #8
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4313      	orrs	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800608e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	031b      	lsls	r3, r3, #12
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a11      	ldr	r2, [pc, #68]	; (80060e4 <TIM_OC4_SetConfig+0xa0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d003      	beq.n	80060ac <TIM_OC4_SetConfig+0x68>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a10      	ldr	r2, [pc, #64]	; (80060e8 <TIM_OC4_SetConfig+0xa4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d109      	bne.n	80060c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	019b      	lsls	r3, r3, #6
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	4313      	orrs	r3, r2
 80060be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	621a      	str	r2, [r3, #32]
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	bc80      	pop	{r7}
 80060e2:	4770      	bx	lr
 80060e4:	40010000 	.word	0x40010000
 80060e8:	40010400 	.word	0x40010400

080060ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	f023 0201 	bic.w	r2, r3, #1
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f023 030a 	bic.w	r3, r3, #10
 8006128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	621a      	str	r2, [r3, #32]
}
 800613e:	bf00      	nop
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	bc80      	pop	{r7}
 8006146:	4770      	bx	lr

08006148 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006148:	b480      	push	{r7}
 800614a:	b087      	sub	sp, #28
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	f023 0210 	bic.w	r2, r3, #16
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006172:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	031b      	lsls	r3, r3, #12
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006184:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	4313      	orrs	r3, r2
 800618e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	621a      	str	r2, [r3, #32]
}
 800619c:	bf00      	nop
 800619e:	371c      	adds	r7, #28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bc80      	pop	{r7}
 80061a4:	4770      	bx	lr

080061a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b085      	sub	sp, #20
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f043 0307 	orr.w	r3, r3, #7
 80061c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	609a      	str	r2, [r3, #8]
}
 80061d0:	bf00      	nop
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bc80      	pop	{r7}
 80061d8:	4770      	bx	lr

080061da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061da:	b480      	push	{r7}
 80061dc:	b087      	sub	sp, #28
 80061de:	af00      	add	r7, sp, #0
 80061e0:	60f8      	str	r0, [r7, #12]
 80061e2:	60b9      	str	r1, [r7, #8]
 80061e4:	607a      	str	r2, [r7, #4]
 80061e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	021a      	lsls	r2, r3, #8
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	431a      	orrs	r2, r3
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	4313      	orrs	r3, r2
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	609a      	str	r2, [r3, #8]
}
 800620e:	bf00      	nop
 8006210:	371c      	adds	r7, #28
 8006212:	46bd      	mov	sp, r7
 8006214:	bc80      	pop	{r7}
 8006216:	4770      	bx	lr

08006218 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f003 031f 	and.w	r3, r3, #31
 800622a:	2201      	movs	r2, #1
 800622c:	fa02 f303 	lsl.w	r3, r2, r3
 8006230:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6a1a      	ldr	r2, [r3, #32]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	43db      	mvns	r3, r3
 800623a:	401a      	ands	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a1a      	ldr	r2, [r3, #32]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f003 031f 	and.w	r3, r3, #31
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	fa01 f303 	lsl.w	r3, r1, r3
 8006250:	431a      	orrs	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	621a      	str	r2, [r3, #32]
}
 8006256:	bf00      	nop
 8006258:	371c      	adds	r7, #28
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr

08006260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006274:	2302      	movs	r3, #2
 8006276:	e05a      	b.n	800632e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a20      	ldr	r2, [pc, #128]	; (8006338 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d022      	beq.n	8006302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c4:	d01d      	beq.n	8006302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a1c      	ldr	r2, [pc, #112]	; (800633c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d018      	beq.n	8006302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a1a      	ldr	r2, [pc, #104]	; (8006340 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d013      	beq.n	8006302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a19      	ldr	r2, [pc, #100]	; (8006344 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d00e      	beq.n	8006302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a17      	ldr	r2, [pc, #92]	; (8006348 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d009      	beq.n	8006302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a16      	ldr	r2, [pc, #88]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d004      	beq.n	8006302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a14      	ldr	r2, [pc, #80]	; (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d10c      	bne.n	800631c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006308:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	4313      	orrs	r3, r2
 8006312:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	bc80      	pop	{r7}
 8006336:	4770      	bx	lr
 8006338:	40010000 	.word	0x40010000
 800633c:	40000400 	.word	0x40000400
 8006340:	40000800 	.word	0x40000800
 8006344:	40000c00 	.word	0x40000c00
 8006348:	40010400 	.word	0x40010400
 800634c:	40014000 	.word	0x40014000
 8006350:	40001800 	.word	0x40001800

08006354 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006368:	2b01      	cmp	r3, #1
 800636a:	d101      	bne.n	8006370 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800636c:	2302      	movs	r3, #2
 800636e:	e03d      	b.n	80063ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	4313      	orrs	r3, r2
 8006392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bc80      	pop	{r7}
 80063f4:	4770      	bx	lr
	...

080063f8 <__libc_init_array>:
 80063f8:	b570      	push	{r4, r5, r6, lr}
 80063fa:	2600      	movs	r6, #0
 80063fc:	4d0c      	ldr	r5, [pc, #48]	; (8006430 <__libc_init_array+0x38>)
 80063fe:	4c0d      	ldr	r4, [pc, #52]	; (8006434 <__libc_init_array+0x3c>)
 8006400:	1b64      	subs	r4, r4, r5
 8006402:	10a4      	asrs	r4, r4, #2
 8006404:	42a6      	cmp	r6, r4
 8006406:	d109      	bne.n	800641c <__libc_init_array+0x24>
 8006408:	f000 f822 	bl	8006450 <_init>
 800640c:	2600      	movs	r6, #0
 800640e:	4d0a      	ldr	r5, [pc, #40]	; (8006438 <__libc_init_array+0x40>)
 8006410:	4c0a      	ldr	r4, [pc, #40]	; (800643c <__libc_init_array+0x44>)
 8006412:	1b64      	subs	r4, r4, r5
 8006414:	10a4      	asrs	r4, r4, #2
 8006416:	42a6      	cmp	r6, r4
 8006418:	d105      	bne.n	8006426 <__libc_init_array+0x2e>
 800641a:	bd70      	pop	{r4, r5, r6, pc}
 800641c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006420:	4798      	blx	r3
 8006422:	3601      	adds	r6, #1
 8006424:	e7ee      	b.n	8006404 <__libc_init_array+0xc>
 8006426:	f855 3b04 	ldr.w	r3, [r5], #4
 800642a:	4798      	blx	r3
 800642c:	3601      	adds	r6, #1
 800642e:	e7f2      	b.n	8006416 <__libc_init_array+0x1e>
 8006430:	08006480 	.word	0x08006480
 8006434:	08006480 	.word	0x08006480
 8006438:	08006480 	.word	0x08006480
 800643c:	08006484 	.word	0x08006484

08006440 <memset>:
 8006440:	4603      	mov	r3, r0
 8006442:	4402      	add	r2, r0
 8006444:	4293      	cmp	r3, r2
 8006446:	d100      	bne.n	800644a <memset+0xa>
 8006448:	4770      	bx	lr
 800644a:	f803 1b01 	strb.w	r1, [r3], #1
 800644e:	e7f9      	b.n	8006444 <memset+0x4>

08006450 <_init>:
 8006450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006452:	bf00      	nop
 8006454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006456:	bc08      	pop	{r3}
 8006458:	469e      	mov	lr, r3
 800645a:	4770      	bx	lr

0800645c <_fini>:
 800645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645e:	bf00      	nop
 8006460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006462:	bc08      	pop	{r3}
 8006464:	469e      	mov	lr, r3
 8006466:	4770      	bx	lr
