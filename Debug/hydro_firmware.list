
hydro_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015ac0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000644  08015c50  08015c50  00025c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016294  08016294  00030230  2**0
                  CONTENTS
  4 .ARM          00000008  08016294  08016294  00026294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801629c  0801629c  00030230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801629c  0801629c  0002629c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080162a0  080162a0  000262a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  080162a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b17c  20000230  080164d4  00030230  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  2000b3ac  080164d4  0003b3ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 12 .debug_info   000539da  00000000  00000000  00030259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008748  00000000  00000000  00083c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb8  00000000  00000000  0008c380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c70  00000000  00000000  0008e338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c205  00000000  00000000  0008ffa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000301d6  00000000  00000000  000bc1ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dae93  00000000  00000000  000ec383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c7216  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009690  00000000  00000000  001c726c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015c38 	.word	0x08015c38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	08015c38 	.word	0x08015c38

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_drsub>:
 80001f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f8:	e002      	b.n	8000200 <__adddf3>
 80001fa:	bf00      	nop

080001fc <__aeabi_dsub>:
 80001fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000200 <__adddf3>:
 8000200:	b530      	push	{r4, r5, lr}
 8000202:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000206:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800020a:	ea94 0f05 	teq	r4, r5
 800020e:	bf08      	it	eq
 8000210:	ea90 0f02 	teqeq	r0, r2
 8000214:	bf1f      	itttt	ne
 8000216:	ea54 0c00 	orrsne.w	ip, r4, r0
 800021a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000222:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000226:	f000 80e2 	beq.w	80003ee <__adddf3+0x1ee>
 800022a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000232:	bfb8      	it	lt
 8000234:	426d      	neglt	r5, r5
 8000236:	dd0c      	ble.n	8000252 <__adddf3+0x52>
 8000238:	442c      	add	r4, r5
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	ea82 0000 	eor.w	r0, r2, r0
 8000246:	ea83 0101 	eor.w	r1, r3, r1
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	2d36      	cmp	r5, #54	; 0x36
 8000254:	bf88      	it	hi
 8000256:	bd30      	pophi	{r4, r5, pc}
 8000258:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800025c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000260:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000264:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x70>
 800026a:	4240      	negs	r0, r0
 800026c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000270:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000274:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000278:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x84>
 800027e:	4252      	negs	r2, r2
 8000280:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000284:	ea94 0f05 	teq	r4, r5
 8000288:	f000 80a7 	beq.w	80003da <__adddf3+0x1da>
 800028c:	f1a4 0401 	sub.w	r4, r4, #1
 8000290:	f1d5 0e20 	rsbs	lr, r5, #32
 8000294:	db0d      	blt.n	80002b2 <__adddf3+0xb2>
 8000296:	fa02 fc0e 	lsl.w	ip, r2, lr
 800029a:	fa22 f205 	lsr.w	r2, r2, r5
 800029e:	1880      	adds	r0, r0, r2
 80002a0:	f141 0100 	adc.w	r1, r1, #0
 80002a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a8:	1880      	adds	r0, r0, r2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	4159      	adcs	r1, r3
 80002b0:	e00e      	b.n	80002d0 <__adddf3+0xd0>
 80002b2:	f1a5 0520 	sub.w	r5, r5, #32
 80002b6:	f10e 0e20 	add.w	lr, lr, #32
 80002ba:	2a01      	cmp	r2, #1
 80002bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c0:	bf28      	it	cs
 80002c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	18c0      	adds	r0, r0, r3
 80002cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d4:	d507      	bpl.n	80002e6 <__adddf3+0xe6>
 80002d6:	f04f 0e00 	mov.w	lr, #0
 80002da:	f1dc 0c00 	rsbs	ip, ip, #0
 80002de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ea:	d31b      	bcc.n	8000324 <__adddf3+0x124>
 80002ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f0:	d30c      	bcc.n	800030c <__adddf3+0x10c>
 80002f2:	0849      	lsrs	r1, r1, #1
 80002f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002fc:	f104 0401 	add.w	r4, r4, #1
 8000300:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000304:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000308:	f080 809a 	bcs.w	8000440 <__adddf3+0x240>
 800030c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000310:	bf08      	it	eq
 8000312:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000316:	f150 0000 	adcs.w	r0, r0, #0
 800031a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031e:	ea41 0105 	orr.w	r1, r1, r5
 8000322:	bd30      	pop	{r4, r5, pc}
 8000324:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000328:	4140      	adcs	r0, r0
 800032a:	eb41 0101 	adc.w	r1, r1, r1
 800032e:	3c01      	subs	r4, #1
 8000330:	bf28      	it	cs
 8000332:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000336:	d2e9      	bcs.n	800030c <__adddf3+0x10c>
 8000338:	f091 0f00 	teq	r1, #0
 800033c:	bf04      	itt	eq
 800033e:	4601      	moveq	r1, r0
 8000340:	2000      	moveq	r0, #0
 8000342:	fab1 f381 	clz	r3, r1
 8000346:	bf08      	it	eq
 8000348:	3320      	addeq	r3, #32
 800034a:	f1a3 030b 	sub.w	r3, r3, #11
 800034e:	f1b3 0220 	subs.w	r2, r3, #32
 8000352:	da0c      	bge.n	800036e <__adddf3+0x16e>
 8000354:	320c      	adds	r2, #12
 8000356:	dd08      	ble.n	800036a <__adddf3+0x16a>
 8000358:	f102 0c14 	add.w	ip, r2, #20
 800035c:	f1c2 020c 	rsb	r2, r2, #12
 8000360:	fa01 f00c 	lsl.w	r0, r1, ip
 8000364:	fa21 f102 	lsr.w	r1, r1, r2
 8000368:	e00c      	b.n	8000384 <__adddf3+0x184>
 800036a:	f102 0214 	add.w	r2, r2, #20
 800036e:	bfd8      	it	le
 8000370:	f1c2 0c20 	rsble	ip, r2, #32
 8000374:	fa01 f102 	lsl.w	r1, r1, r2
 8000378:	fa20 fc0c 	lsr.w	ip, r0, ip
 800037c:	bfdc      	itt	le
 800037e:	ea41 010c 	orrle.w	r1, r1, ip
 8000382:	4090      	lslle	r0, r2
 8000384:	1ae4      	subs	r4, r4, r3
 8000386:	bfa2      	ittt	ge
 8000388:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800038c:	4329      	orrge	r1, r5
 800038e:	bd30      	popge	{r4, r5, pc}
 8000390:	ea6f 0404 	mvn.w	r4, r4
 8000394:	3c1f      	subs	r4, #31
 8000396:	da1c      	bge.n	80003d2 <__adddf3+0x1d2>
 8000398:	340c      	adds	r4, #12
 800039a:	dc0e      	bgt.n	80003ba <__adddf3+0x1ba>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0220 	rsb	r2, r4, #32
 80003a4:	fa20 f004 	lsr.w	r0, r0, r4
 80003a8:	fa01 f302 	lsl.w	r3, r1, r2
 80003ac:	ea40 0003 	orr.w	r0, r0, r3
 80003b0:	fa21 f304 	lsr.w	r3, r1, r4
 80003b4:	ea45 0103 	orr.w	r1, r5, r3
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f1c4 040c 	rsb	r4, r4, #12
 80003be:	f1c4 0220 	rsb	r2, r4, #32
 80003c2:	fa20 f002 	lsr.w	r0, r0, r2
 80003c6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ca:	ea40 0003 	orr.w	r0, r0, r3
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	fa21 f004 	lsr.w	r0, r1, r4
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	f094 0f00 	teq	r4, #0
 80003de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003e2:	bf06      	itte	eq
 80003e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e8:	3401      	addeq	r4, #1
 80003ea:	3d01      	subne	r5, #1
 80003ec:	e74e      	b.n	800028c <__adddf3+0x8c>
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf18      	it	ne
 80003f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f8:	d029      	beq.n	800044e <__adddf3+0x24e>
 80003fa:	ea94 0f05 	teq	r4, r5
 80003fe:	bf08      	it	eq
 8000400:	ea90 0f02 	teqeq	r0, r2
 8000404:	d005      	beq.n	8000412 <__adddf3+0x212>
 8000406:	ea54 0c00 	orrs.w	ip, r4, r0
 800040a:	bf04      	itt	eq
 800040c:	4619      	moveq	r1, r3
 800040e:	4610      	moveq	r0, r2
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	ea91 0f03 	teq	r1, r3
 8000416:	bf1e      	ittt	ne
 8000418:	2100      	movne	r1, #0
 800041a:	2000      	movne	r0, #0
 800041c:	bd30      	popne	{r4, r5, pc}
 800041e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000422:	d105      	bne.n	8000430 <__adddf3+0x230>
 8000424:	0040      	lsls	r0, r0, #1
 8000426:	4149      	adcs	r1, r1
 8000428:	bf28      	it	cs
 800042a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000434:	bf3c      	itt	cc
 8000436:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800043a:	bd30      	popcc	{r4, r5, pc}
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000440:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000444:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000448:	f04f 0000 	mov.w	r0, #0
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf1a      	itte	ne
 8000454:	4619      	movne	r1, r3
 8000456:	4610      	movne	r0, r2
 8000458:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800045c:	bf1c      	itt	ne
 800045e:	460b      	movne	r3, r1
 8000460:	4602      	movne	r2, r0
 8000462:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000466:	bf06      	itte	eq
 8000468:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800046c:	ea91 0f03 	teqeq	r1, r3
 8000470:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	bf00      	nop

08000478 <__aeabi_ui2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f04f 0500 	mov.w	r5, #0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e750      	b.n	8000338 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_i2d>:
 8000498:	f090 0f00 	teq	r0, #0
 800049c:	bf04      	itt	eq
 800049e:	2100      	moveq	r1, #0
 80004a0:	4770      	bxeq	lr
 80004a2:	b530      	push	{r4, r5, lr}
 80004a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b0:	bf48      	it	mi
 80004b2:	4240      	negmi	r0, r0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e73e      	b.n	8000338 <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_f2d>:
 80004bc:	0042      	lsls	r2, r0, #1
 80004be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ca:	bf1f      	itttt	ne
 80004cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d8:	4770      	bxne	lr
 80004da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004de:	bf08      	it	eq
 80004e0:	4770      	bxeq	lr
 80004e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e6:	bf04      	itt	eq
 80004e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	e71c      	b.n	8000338 <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_ul2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	e00a      	b.n	8000526 <__aeabi_l2d+0x16>

08000510 <__aeabi_l2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051e:	d502      	bpl.n	8000526 <__aeabi_l2d+0x16>
 8000520:	4240      	negs	r0, r0
 8000522:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000526:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000532:	f43f aed8 	beq.w	80002e6 <__adddf3+0xe6>
 8000536:	f04f 0203 	mov.w	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054e:	f1c2 0320 	rsb	r3, r2, #32
 8000552:	fa00 fc03 	lsl.w	ip, r0, r3
 8000556:	fa20 f002 	lsr.w	r0, r0, r2
 800055a:	fa01 fe03 	lsl.w	lr, r1, r3
 800055e:	ea40 000e 	orr.w	r0, r0, lr
 8000562:	fa21 f102 	lsr.w	r1, r1, r2
 8000566:	4414      	add	r4, r2
 8000568:	e6bd      	b.n	80002e6 <__adddf3+0xe6>
 800056a:	bf00      	nop

0800056c <__aeabi_dmul>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000572:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000576:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800057a:	bf1d      	ittte	ne
 800057c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000580:	ea94 0f0c 	teqne	r4, ip
 8000584:	ea95 0f0c 	teqne	r5, ip
 8000588:	f000 f8de 	bleq	8000748 <__aeabi_dmul+0x1dc>
 800058c:	442c      	add	r4, r5
 800058e:	ea81 0603 	eor.w	r6, r1, r3
 8000592:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000596:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800059a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059e:	bf18      	it	ne
 80005a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005ac:	d038      	beq.n	8000620 <__aeabi_dmul+0xb4>
 80005ae:	fba0 ce02 	umull	ip, lr, r0, r2
 80005b2:	f04f 0500 	mov.w	r5, #0
 80005b6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005be:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005c2:	f04f 0600 	mov.w	r6, #0
 80005c6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ca:	f09c 0f00 	teq	ip, #0
 80005ce:	bf18      	it	ne
 80005d0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e0:	d204      	bcs.n	80005ec <__aeabi_dmul+0x80>
 80005e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e6:	416d      	adcs	r5, r5
 80005e8:	eb46 0606 	adc.w	r6, r6, r6
 80005ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000600:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000604:	bf88      	it	hi
 8000606:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800060a:	d81e      	bhi.n	800064a <__aeabi_dmul+0xde>
 800060c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000624:	ea46 0101 	orr.w	r1, r6, r1
 8000628:	ea40 0002 	orr.w	r0, r0, r2
 800062c:	ea81 0103 	eor.w	r1, r1, r3
 8000630:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000634:	bfc2      	ittt	gt
 8000636:	ebd4 050c 	rsbsgt	r5, r4, ip
 800063a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063e:	bd70      	popgt	{r4, r5, r6, pc}
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f04f 0e00 	mov.w	lr, #0
 8000648:	3c01      	subs	r4, #1
 800064a:	f300 80ab 	bgt.w	80007a4 <__aeabi_dmul+0x238>
 800064e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000652:	bfde      	ittt	le
 8000654:	2000      	movle	r0, #0
 8000656:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800065a:	bd70      	pople	{r4, r5, r6, pc}
 800065c:	f1c4 0400 	rsb	r4, r4, #0
 8000660:	3c20      	subs	r4, #32
 8000662:	da35      	bge.n	80006d0 <__aeabi_dmul+0x164>
 8000664:	340c      	adds	r4, #12
 8000666:	dc1b      	bgt.n	80006a0 <__aeabi_dmul+0x134>
 8000668:	f104 0414 	add.w	r4, r4, #20
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f305 	lsl.w	r3, r0, r5
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f205 	lsl.w	r2, r1, r5
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	fa21 f604 	lsr.w	r6, r1, r4
 8000690:	eb42 0106 	adc.w	r1, r2, r6
 8000694:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000698:	bf08      	it	eq
 800069a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f1c4 040c 	rsb	r4, r4, #12
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f304 	lsl.w	r3, r0, r4
 80006ac:	fa20 f005 	lsr.w	r0, r0, r5
 80006b0:	fa01 f204 	lsl.w	r2, r1, r4
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	f141 0100 	adc.w	r1, r1, #0
 80006c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c8:	bf08      	it	eq
 80006ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f205 	lsl.w	r2, r0, r5
 80006d8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006dc:	fa20 f304 	lsr.w	r3, r0, r4
 80006e0:	fa01 f205 	lsl.w	r2, r1, r5
 80006e4:	ea43 0302 	orr.w	r3, r3, r2
 80006e8:	fa21 f004 	lsr.w	r0, r1, r4
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	fa21 f204 	lsr.w	r2, r1, r4
 80006f4:	ea20 0002 	bic.w	r0, r0, r2
 80006f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000700:	bf08      	it	eq
 8000702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f094 0f00 	teq	r4, #0
 800070c:	d10f      	bne.n	800072e <__aeabi_dmul+0x1c2>
 800070e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000712:	0040      	lsls	r0, r0, #1
 8000714:	eb41 0101 	adc.w	r1, r1, r1
 8000718:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3c01      	subeq	r4, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1a6>
 8000722:	ea41 0106 	orr.w	r1, r1, r6
 8000726:	f095 0f00 	teq	r5, #0
 800072a:	bf18      	it	ne
 800072c:	4770      	bxne	lr
 800072e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000732:	0052      	lsls	r2, r2, #1
 8000734:	eb43 0303 	adc.w	r3, r3, r3
 8000738:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800073c:	bf08      	it	eq
 800073e:	3d01      	subeq	r5, #1
 8000740:	d0f7      	beq.n	8000732 <__aeabi_dmul+0x1c6>
 8000742:	ea43 0306 	orr.w	r3, r3, r6
 8000746:	4770      	bx	lr
 8000748:	ea94 0f0c 	teq	r4, ip
 800074c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000750:	bf18      	it	ne
 8000752:	ea95 0f0c 	teqne	r5, ip
 8000756:	d00c      	beq.n	8000772 <__aeabi_dmul+0x206>
 8000758:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075c:	bf18      	it	ne
 800075e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000762:	d1d1      	bne.n	8000708 <__aeabi_dmul+0x19c>
 8000764:	ea81 0103 	eor.w	r1, r1, r3
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	f04f 0000 	mov.w	r0, #0
 8000770:	bd70      	pop	{r4, r5, r6, pc}
 8000772:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000776:	bf06      	itte	eq
 8000778:	4610      	moveq	r0, r2
 800077a:	4619      	moveq	r1, r3
 800077c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000780:	d019      	beq.n	80007b6 <__aeabi_dmul+0x24a>
 8000782:	ea94 0f0c 	teq	r4, ip
 8000786:	d102      	bne.n	800078e <__aeabi_dmul+0x222>
 8000788:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800078c:	d113      	bne.n	80007b6 <__aeabi_dmul+0x24a>
 800078e:	ea95 0f0c 	teq	r5, ip
 8000792:	d105      	bne.n	80007a0 <__aeabi_dmul+0x234>
 8000794:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000798:	bf1c      	itt	ne
 800079a:	4610      	movne	r0, r2
 800079c:	4619      	movne	r1, r3
 800079e:	d10a      	bne.n	80007b6 <__aeabi_dmul+0x24a>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007be:	bd70      	pop	{r4, r5, r6, pc}

080007c0 <__aeabi_ddiv>:
 80007c0:	b570      	push	{r4, r5, r6, lr}
 80007c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ce:	bf1d      	ittte	ne
 80007d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d4:	ea94 0f0c 	teqne	r4, ip
 80007d8:	ea95 0f0c 	teqne	r5, ip
 80007dc:	f000 f8a7 	bleq	800092e <__aeabi_ddiv+0x16e>
 80007e0:	eba4 0405 	sub.w	r4, r4, r5
 80007e4:	ea81 0e03 	eor.w	lr, r1, r3
 80007e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f0:	f000 8088 	beq.w	8000904 <__aeabi_ddiv+0x144>
 80007f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000800:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000804:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000808:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800080c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000810:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000814:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000818:	429d      	cmp	r5, r3
 800081a:	bf08      	it	eq
 800081c:	4296      	cmpeq	r6, r2
 800081e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000822:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000826:	d202      	bcs.n	800082e <__aeabi_ddiv+0x6e>
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	1ab6      	subs	r6, r6, r2
 8000830:	eb65 0503 	sbc.w	r5, r5, r3
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000842:	ebb6 0e02 	subs.w	lr, r6, r2
 8000846:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084a:	bf22      	ittt	cs
 800084c:	1ab6      	subcs	r6, r6, r2
 800084e:	4675      	movcs	r5, lr
 8000850:	ea40 000c 	orrcs.w	r0, r0, ip
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	ebb6 0e02 	subs.w	lr, r6, r2
 800085e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000862:	bf22      	ittt	cs
 8000864:	1ab6      	subcs	r6, r6, r2
 8000866:	4675      	movcs	r5, lr
 8000868:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	ebb6 0e02 	subs.w	lr, r6, r2
 800088e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000892:	bf22      	ittt	cs
 8000894:	1ab6      	subcs	r6, r6, r2
 8000896:	4675      	movcs	r5, lr
 8000898:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800089c:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a0:	d018      	beq.n	80008d4 <__aeabi_ddiv+0x114>
 80008a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008be:	d1c0      	bne.n	8000842 <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	d10b      	bne.n	80008de <__aeabi_ddiv+0x11e>
 80008c6:	ea41 0100 	orr.w	r1, r1, r0
 80008ca:	f04f 0000 	mov.w	r0, #0
 80008ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008d2:	e7b6      	b.n	8000842 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	bf04      	itt	eq
 80008da:	4301      	orreq	r1, r0
 80008dc:	2000      	moveq	r0, #0
 80008de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008e2:	bf88      	it	hi
 80008e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e8:	f63f aeaf 	bhi.w	800064a <__aeabi_dmul+0xde>
 80008ec:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f0:	bf04      	itt	eq
 80008f2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008fa:	f150 0000 	adcs.w	r0, r0, #0
 80008fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000902:	bd70      	pop	{r4, r5, r6, pc}
 8000904:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000908:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800090c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000910:	bfc2      	ittt	gt
 8000912:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000916:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091a:	bd70      	popgt	{r4, r5, r6, pc}
 800091c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000920:	f04f 0e00 	mov.w	lr, #0
 8000924:	3c01      	subs	r4, #1
 8000926:	e690      	b.n	800064a <__aeabi_dmul+0xde>
 8000928:	ea45 0e06 	orr.w	lr, r5, r6
 800092c:	e68d      	b.n	800064a <__aeabi_dmul+0xde>
 800092e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000932:	ea94 0f0c 	teq	r4, ip
 8000936:	bf08      	it	eq
 8000938:	ea95 0f0c 	teqeq	r5, ip
 800093c:	f43f af3b 	beq.w	80007b6 <__aeabi_dmul+0x24a>
 8000940:	ea94 0f0c 	teq	r4, ip
 8000944:	d10a      	bne.n	800095c <__aeabi_ddiv+0x19c>
 8000946:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800094a:	f47f af34 	bne.w	80007b6 <__aeabi_dmul+0x24a>
 800094e:	ea95 0f0c 	teq	r5, ip
 8000952:	f47f af25 	bne.w	80007a0 <__aeabi_dmul+0x234>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e72c      	b.n	80007b6 <__aeabi_dmul+0x24a>
 800095c:	ea95 0f0c 	teq	r5, ip
 8000960:	d106      	bne.n	8000970 <__aeabi_ddiv+0x1b0>
 8000962:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000966:	f43f aefd 	beq.w	8000764 <__aeabi_dmul+0x1f8>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e722      	b.n	80007b6 <__aeabi_dmul+0x24a>
 8000970:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000974:	bf18      	it	ne
 8000976:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800097a:	f47f aec5 	bne.w	8000708 <__aeabi_dmul+0x19c>
 800097e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000982:	f47f af0d 	bne.w	80007a0 <__aeabi_dmul+0x234>
 8000986:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800098a:	f47f aeeb 	bne.w	8000764 <__aeabi_dmul+0x1f8>
 800098e:	e712      	b.n	80007b6 <__aeabi_dmul+0x24a>

08000990 <__gedf2>:
 8000990:	f04f 3cff 	mov.w	ip, #4294967295
 8000994:	e006      	b.n	80009a4 <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__ledf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	e002      	b.n	80009a4 <__cmpdf2+0x4>
 800099e:	bf00      	nop

080009a0 <__cmpdf2>:
 80009a0:	f04f 0c01 	mov.w	ip, #1
 80009a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b4:	bf18      	it	ne
 80009b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ba:	d01b      	beq.n	80009f4 <__cmpdf2+0x54>
 80009bc:	b001      	add	sp, #4
 80009be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009c2:	bf0c      	ite	eq
 80009c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c8:	ea91 0f03 	teqne	r1, r3
 80009cc:	bf02      	ittt	eq
 80009ce:	ea90 0f02 	teqeq	r0, r2
 80009d2:	2000      	moveq	r0, #0
 80009d4:	4770      	bxeq	lr
 80009d6:	f110 0f00 	cmn.w	r0, #0
 80009da:	ea91 0f03 	teq	r1, r3
 80009de:	bf58      	it	pl
 80009e0:	4299      	cmppl	r1, r3
 80009e2:	bf08      	it	eq
 80009e4:	4290      	cmpeq	r0, r2
 80009e6:	bf2c      	ite	cs
 80009e8:	17d8      	asrcs	r0, r3, #31
 80009ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ee:	f040 0001 	orr.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d102      	bne.n	8000a04 <__cmpdf2+0x64>
 80009fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a02:	d107      	bne.n	8000a14 <__cmpdf2+0x74>
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d1d6      	bne.n	80009bc <__cmpdf2+0x1c>
 8000a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a12:	d0d3      	beq.n	80009bc <__cmpdf2+0x1c>
 8000a14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_cdrcmple>:
 8000a1c:	4684      	mov	ip, r0
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4662      	mov	r2, ip
 8000a22:	468c      	mov	ip, r1
 8000a24:	4619      	mov	r1, r3
 8000a26:	4663      	mov	r3, ip
 8000a28:	e000      	b.n	8000a2c <__aeabi_cdcmpeq>
 8000a2a:	bf00      	nop

08000a2c <__aeabi_cdcmpeq>:
 8000a2c:	b501      	push	{r0, lr}
 8000a2e:	f7ff ffb7 	bl	80009a0 <__cmpdf2>
 8000a32:	2800      	cmp	r0, #0
 8000a34:	bf48      	it	mi
 8000a36:	f110 0f00 	cmnmi.w	r0, #0
 8000a3a:	bd01      	pop	{r0, pc}

08000a3c <__aeabi_dcmpeq>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff fff4 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a44:	bf0c      	ite	eq
 8000a46:	2001      	moveq	r0, #1
 8000a48:	2000      	movne	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmplt>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffea 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a58:	bf34      	ite	cc
 8000a5a:	2001      	movcc	r0, #1
 8000a5c:	2000      	movcs	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmple>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffe0 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpge>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffce 	bl	8000a1c <__aeabi_cdrcmple>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpgt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffc4 	bl	8000a1c <__aeabi_cdrcmple>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpun>:
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__aeabi_dcmpun+0x10>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d10a      	bne.n	8000ac6 <__aeabi_dcmpun+0x26>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__aeabi_dcmpun+0x20>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_dcmpun+0x26>
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0001 	mov.w	r0, #1
 8000aca:	4770      	bx	lr

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_frsub>:
 8000bfc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c00:	e002      	b.n	8000c08 <__addsf3>
 8000c02:	bf00      	nop

08000c04 <__aeabi_fsub>:
 8000c04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c08 <__addsf3>:
 8000c08:	0042      	lsls	r2, r0, #1
 8000c0a:	bf1f      	itttt	ne
 8000c0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c10:	ea92 0f03 	teqne	r2, r3
 8000c14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1c:	d06a      	beq.n	8000cf4 <__addsf3+0xec>
 8000c1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c26:	bfc1      	itttt	gt
 8000c28:	18d2      	addgt	r2, r2, r3
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	4048      	eorgt	r0, r1
 8000c2e:	4041      	eorgt	r1, r0
 8000c30:	bfb8      	it	lt
 8000c32:	425b      	neglt	r3, r3
 8000c34:	2b19      	cmp	r3, #25
 8000c36:	bf88      	it	hi
 8000c38:	4770      	bxhi	lr
 8000c3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c46:	bf18      	it	ne
 8000c48:	4240      	negne	r0, r0
 8000c4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c56:	bf18      	it	ne
 8000c58:	4249      	negne	r1, r1
 8000c5a:	ea92 0f03 	teq	r2, r3
 8000c5e:	d03f      	beq.n	8000ce0 <__addsf3+0xd8>
 8000c60:	f1a2 0201 	sub.w	r2, r2, #1
 8000c64:	fa41 fc03 	asr.w	ip, r1, r3
 8000c68:	eb10 000c 	adds.w	r0, r0, ip
 8000c6c:	f1c3 0320 	rsb	r3, r3, #32
 8000c70:	fa01 f103 	lsl.w	r1, r1, r3
 8000c74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c78:	d502      	bpl.n	8000c80 <__addsf3+0x78>
 8000c7a:	4249      	negs	r1, r1
 8000c7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c84:	d313      	bcc.n	8000cae <__addsf3+0xa6>
 8000c86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c8a:	d306      	bcc.n	8000c9a <__addsf3+0x92>
 8000c8c:	0840      	lsrs	r0, r0, #1
 8000c8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c92:	f102 0201 	add.w	r2, r2, #1
 8000c96:	2afe      	cmp	r2, #254	; 0xfe
 8000c98:	d251      	bcs.n	8000d3e <__addsf3+0x136>
 8000c9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca2:	bf08      	it	eq
 8000ca4:	f020 0001 	biceq.w	r0, r0, #1
 8000ca8:	ea40 0003 	orr.w	r0, r0, r3
 8000cac:	4770      	bx	lr
 8000cae:	0049      	lsls	r1, r1, #1
 8000cb0:	eb40 0000 	adc.w	r0, r0, r0
 8000cb4:	3a01      	subs	r2, #1
 8000cb6:	bf28      	it	cs
 8000cb8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cbc:	d2ed      	bcs.n	8000c9a <__addsf3+0x92>
 8000cbe:	fab0 fc80 	clz	ip, r0
 8000cc2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc6:	ebb2 020c 	subs.w	r2, r2, ip
 8000cca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cce:	bfaa      	itet	ge
 8000cd0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd4:	4252      	neglt	r2, r2
 8000cd6:	4318      	orrge	r0, r3
 8000cd8:	bfbc      	itt	lt
 8000cda:	40d0      	lsrlt	r0, r2
 8000cdc:	4318      	orrlt	r0, r3
 8000cde:	4770      	bx	lr
 8000ce0:	f092 0f00 	teq	r2, #0
 8000ce4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ce8:	bf06      	itte	eq
 8000cea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cee:	3201      	addeq	r2, #1
 8000cf0:	3b01      	subne	r3, #1
 8000cf2:	e7b5      	b.n	8000c60 <__addsf3+0x58>
 8000cf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cfc:	bf18      	it	ne
 8000cfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d02:	d021      	beq.n	8000d48 <__addsf3+0x140>
 8000d04:	ea92 0f03 	teq	r2, r3
 8000d08:	d004      	beq.n	8000d14 <__addsf3+0x10c>
 8000d0a:	f092 0f00 	teq	r2, #0
 8000d0e:	bf08      	it	eq
 8000d10:	4608      	moveq	r0, r1
 8000d12:	4770      	bx	lr
 8000d14:	ea90 0f01 	teq	r0, r1
 8000d18:	bf1c      	itt	ne
 8000d1a:	2000      	movne	r0, #0
 8000d1c:	4770      	bxne	lr
 8000d1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d22:	d104      	bne.n	8000d2e <__addsf3+0x126>
 8000d24:	0040      	lsls	r0, r0, #1
 8000d26:	bf28      	it	cs
 8000d28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d2c:	4770      	bx	lr
 8000d2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d32:	bf3c      	itt	cc
 8000d34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d38:	4770      	bxcc	lr
 8000d3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d46:	4770      	bx	lr
 8000d48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d4c:	bf16      	itet	ne
 8000d4e:	4608      	movne	r0, r1
 8000d50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d54:	4601      	movne	r1, r0
 8000d56:	0242      	lsls	r2, r0, #9
 8000d58:	bf06      	itte	eq
 8000d5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5e:	ea90 0f01 	teqeq	r0, r1
 8000d62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_ui2f>:
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e004      	b.n	8000d78 <__aeabi_i2f+0x8>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_i2f>:
 8000d70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d74:	bf48      	it	mi
 8000d76:	4240      	negmi	r0, r0
 8000d78:	ea5f 0c00 	movs.w	ip, r0
 8000d7c:	bf08      	it	eq
 8000d7e:	4770      	bxeq	lr
 8000d80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d84:	4601      	mov	r1, r0
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	e01c      	b.n	8000dc6 <__aeabi_l2f+0x2a>

08000d8c <__aeabi_ul2f>:
 8000d8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d90:	bf08      	it	eq
 8000d92:	4770      	bxeq	lr
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	e00a      	b.n	8000db0 <__aeabi_l2f+0x14>
 8000d9a:	bf00      	nop

08000d9c <__aeabi_l2f>:
 8000d9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000da0:	bf08      	it	eq
 8000da2:	4770      	bxeq	lr
 8000da4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000da8:	d502      	bpl.n	8000db0 <__aeabi_l2f+0x14>
 8000daa:	4240      	negs	r0, r0
 8000dac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db0:	ea5f 0c01 	movs.w	ip, r1
 8000db4:	bf02      	ittt	eq
 8000db6:	4684      	moveq	ip, r0
 8000db8:	4601      	moveq	r1, r0
 8000dba:	2000      	moveq	r0, #0
 8000dbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dc0:	bf08      	it	eq
 8000dc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dca:	fabc f28c 	clz	r2, ip
 8000dce:	3a08      	subs	r2, #8
 8000dd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd4:	db10      	blt.n	8000df8 <__aeabi_l2f+0x5c>
 8000dd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dda:	4463      	add	r3, ip
 8000ddc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de0:	f1c2 0220 	rsb	r2, r2, #32
 8000de4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000de8:	fa20 f202 	lsr.w	r2, r0, r2
 8000dec:	eb43 0002 	adc.w	r0, r3, r2
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f102 0220 	add.w	r2, r2, #32
 8000dfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e00:	f1c2 0220 	rsb	r2, r2, #32
 8000e04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e08:	fa21 f202 	lsr.w	r2, r1, r2
 8000e0c:	eb43 0002 	adc.w	r0, r3, r2
 8000e10:	bf08      	it	eq
 8000e12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e16:	4770      	bx	lr

08000e18 <__aeabi_fmul>:
 8000e18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e20:	bf1e      	ittt	ne
 8000e22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e26:	ea92 0f0c 	teqne	r2, ip
 8000e2a:	ea93 0f0c 	teqne	r3, ip
 8000e2e:	d06f      	beq.n	8000f10 <__aeabi_fmul+0xf8>
 8000e30:	441a      	add	r2, r3
 8000e32:	ea80 0c01 	eor.w	ip, r0, r1
 8000e36:	0240      	lsls	r0, r0, #9
 8000e38:	bf18      	it	ne
 8000e3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e3e:	d01e      	beq.n	8000e7e <__aeabi_fmul+0x66>
 8000e40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000e50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e58:	bf3e      	ittt	cc
 8000e5a:	0049      	lslcc	r1, r1, #1
 8000e5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e60:	005b      	lslcc	r3, r3, #1
 8000e62:	ea40 0001 	orr.w	r0, r0, r1
 8000e66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e6a:	2afd      	cmp	r2, #253	; 0xfd
 8000e6c:	d81d      	bhi.n	8000eaa <__aeabi_fmul+0x92>
 8000e6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e76:	bf08      	it	eq
 8000e78:	f020 0001 	biceq.w	r0, r0, #1
 8000e7c:	4770      	bx	lr
 8000e7e:	f090 0f00 	teq	r0, #0
 8000e82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e86:	bf08      	it	eq
 8000e88:	0249      	lsleq	r1, r1, #9
 8000e8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e92:	3a7f      	subs	r2, #127	; 0x7f
 8000e94:	bfc2      	ittt	gt
 8000e96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e9e:	4770      	bxgt	lr
 8000ea0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea4:	f04f 0300 	mov.w	r3, #0
 8000ea8:	3a01      	subs	r2, #1
 8000eaa:	dc5d      	bgt.n	8000f68 <__aeabi_fmul+0x150>
 8000eac:	f112 0f19 	cmn.w	r2, #25
 8000eb0:	bfdc      	itt	le
 8000eb2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eb6:	4770      	bxle	lr
 8000eb8:	f1c2 0200 	rsb	r2, r2, #0
 8000ebc:	0041      	lsls	r1, r0, #1
 8000ebe:	fa21 f102 	lsr.w	r1, r1, r2
 8000ec2:	f1c2 0220 	rsb	r2, r2, #32
 8000ec6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ece:	f140 0000 	adc.w	r0, r0, #0
 8000ed2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ed6:	bf08      	it	eq
 8000ed8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000edc:	4770      	bx	lr
 8000ede:	f092 0f00 	teq	r2, #0
 8000ee2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0040      	lsleq	r0, r0, #1
 8000eea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eee:	3a01      	subeq	r2, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fmul+0xce>
 8000ef2:	ea40 000c 	orr.w	r0, r0, ip
 8000ef6:	f093 0f00 	teq	r3, #0
 8000efa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0049      	lsleq	r1, r1, #1
 8000f02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f06:	3b01      	subeq	r3, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fmul+0xe6>
 8000f0a:	ea41 010c 	orr.w	r1, r1, ip
 8000f0e:	e78f      	b.n	8000e30 <__aeabi_fmul+0x18>
 8000f10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f14:	ea92 0f0c 	teq	r2, ip
 8000f18:	bf18      	it	ne
 8000f1a:	ea93 0f0c 	teqne	r3, ip
 8000f1e:	d00a      	beq.n	8000f36 <__aeabi_fmul+0x11e>
 8000f20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f24:	bf18      	it	ne
 8000f26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2a:	d1d8      	bne.n	8000ede <__aeabi_fmul+0xc6>
 8000f2c:	ea80 0001 	eor.w	r0, r0, r1
 8000f30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f34:	4770      	bx	lr
 8000f36:	f090 0f00 	teq	r0, #0
 8000f3a:	bf17      	itett	ne
 8000f3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f40:	4608      	moveq	r0, r1
 8000f42:	f091 0f00 	teqne	r1, #0
 8000f46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f4a:	d014      	beq.n	8000f76 <__aeabi_fmul+0x15e>
 8000f4c:	ea92 0f0c 	teq	r2, ip
 8000f50:	d101      	bne.n	8000f56 <__aeabi_fmul+0x13e>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	d10f      	bne.n	8000f76 <__aeabi_fmul+0x15e>
 8000f56:	ea93 0f0c 	teq	r3, ip
 8000f5a:	d103      	bne.n	8000f64 <__aeabi_fmul+0x14c>
 8000f5c:	024b      	lsls	r3, r1, #9
 8000f5e:	bf18      	it	ne
 8000f60:	4608      	movne	r0, r1
 8000f62:	d108      	bne.n	8000f76 <__aeabi_fmul+0x15e>
 8000f64:	ea80 0001 	eor.w	r0, r0, r1
 8000f68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f74:	4770      	bx	lr
 8000f76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f7e:	4770      	bx	lr

08000f80 <__aeabi_fdiv>:
 8000f80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f88:	bf1e      	ittt	ne
 8000f8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f8e:	ea92 0f0c 	teqne	r2, ip
 8000f92:	ea93 0f0c 	teqne	r3, ip
 8000f96:	d069      	beq.n	800106c <__aeabi_fdiv+0xec>
 8000f98:	eba2 0203 	sub.w	r2, r2, r3
 8000f9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000fa0:	0249      	lsls	r1, r1, #9
 8000fa2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fa6:	d037      	beq.n	8001018 <__aeabi_fdiv+0x98>
 8000fa8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	bf38      	it	cc
 8000fbc:	005b      	lslcc	r3, r3, #1
 8000fbe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fc2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	bf24      	itt	cs
 8000fca:	1a5b      	subcs	r3, r3, r1
 8000fcc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fd0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd4:	bf24      	itt	cs
 8000fd6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fde:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fe2:	bf24      	itt	cs
 8000fe4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fe8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ff0:	bf24      	itt	cs
 8000ff2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ff6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	bf18      	it	ne
 8000ffe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001002:	d1e0      	bne.n	8000fc6 <__aeabi_fdiv+0x46>
 8001004:	2afd      	cmp	r2, #253	; 0xfd
 8001006:	f63f af50 	bhi.w	8000eaa <__aeabi_fmul+0x92>
 800100a:	428b      	cmp	r3, r1
 800100c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001010:	bf08      	it	eq
 8001012:	f020 0001 	biceq.w	r0, r0, #1
 8001016:	4770      	bx	lr
 8001018:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800101c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001020:	327f      	adds	r2, #127	; 0x7f
 8001022:	bfc2      	ittt	gt
 8001024:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001028:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800102c:	4770      	bxgt	lr
 800102e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001032:	f04f 0300 	mov.w	r3, #0
 8001036:	3a01      	subs	r2, #1
 8001038:	e737      	b.n	8000eaa <__aeabi_fmul+0x92>
 800103a:	f092 0f00 	teq	r2, #0
 800103e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001042:	bf02      	ittt	eq
 8001044:	0040      	lsleq	r0, r0, #1
 8001046:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800104a:	3a01      	subeq	r2, #1
 800104c:	d0f9      	beq.n	8001042 <__aeabi_fdiv+0xc2>
 800104e:	ea40 000c 	orr.w	r0, r0, ip
 8001052:	f093 0f00 	teq	r3, #0
 8001056:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800105a:	bf02      	ittt	eq
 800105c:	0049      	lsleq	r1, r1, #1
 800105e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001062:	3b01      	subeq	r3, #1
 8001064:	d0f9      	beq.n	800105a <__aeabi_fdiv+0xda>
 8001066:	ea41 010c 	orr.w	r1, r1, ip
 800106a:	e795      	b.n	8000f98 <__aeabi_fdiv+0x18>
 800106c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001070:	ea92 0f0c 	teq	r2, ip
 8001074:	d108      	bne.n	8001088 <__aeabi_fdiv+0x108>
 8001076:	0242      	lsls	r2, r0, #9
 8001078:	f47f af7d 	bne.w	8000f76 <__aeabi_fmul+0x15e>
 800107c:	ea93 0f0c 	teq	r3, ip
 8001080:	f47f af70 	bne.w	8000f64 <__aeabi_fmul+0x14c>
 8001084:	4608      	mov	r0, r1
 8001086:	e776      	b.n	8000f76 <__aeabi_fmul+0x15e>
 8001088:	ea93 0f0c 	teq	r3, ip
 800108c:	d104      	bne.n	8001098 <__aeabi_fdiv+0x118>
 800108e:	024b      	lsls	r3, r1, #9
 8001090:	f43f af4c 	beq.w	8000f2c <__aeabi_fmul+0x114>
 8001094:	4608      	mov	r0, r1
 8001096:	e76e      	b.n	8000f76 <__aeabi_fmul+0x15e>
 8001098:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800109c:	bf18      	it	ne
 800109e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010a2:	d1ca      	bne.n	800103a <__aeabi_fdiv+0xba>
 80010a4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010a8:	f47f af5c 	bne.w	8000f64 <__aeabi_fmul+0x14c>
 80010ac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010b0:	f47f af3c 	bne.w	8000f2c <__aeabi_fmul+0x114>
 80010b4:	e75f      	b.n	8000f76 <__aeabi_fmul+0x15e>
 80010b6:	bf00      	nop

080010b8 <__gesf2>:
 80010b8:	f04f 3cff 	mov.w	ip, #4294967295
 80010bc:	e006      	b.n	80010cc <__cmpsf2+0x4>
 80010be:	bf00      	nop

080010c0 <__lesf2>:
 80010c0:	f04f 0c01 	mov.w	ip, #1
 80010c4:	e002      	b.n	80010cc <__cmpsf2+0x4>
 80010c6:	bf00      	nop

080010c8 <__cmpsf2>:
 80010c8:	f04f 0c01 	mov.w	ip, #1
 80010cc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	bf18      	it	ne
 80010de:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010e2:	d011      	beq.n	8001108 <__cmpsf2+0x40>
 80010e4:	b001      	add	sp, #4
 80010e6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010ea:	bf18      	it	ne
 80010ec:	ea90 0f01 	teqne	r0, r1
 80010f0:	bf58      	it	pl
 80010f2:	ebb2 0003 	subspl.w	r0, r2, r3
 80010f6:	bf88      	it	hi
 80010f8:	17c8      	asrhi	r0, r1, #31
 80010fa:	bf38      	it	cc
 80010fc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001100:	bf18      	it	ne
 8001102:	f040 0001 	orrne.w	r0, r0, #1
 8001106:	4770      	bx	lr
 8001108:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800110c:	d102      	bne.n	8001114 <__cmpsf2+0x4c>
 800110e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001112:	d105      	bne.n	8001120 <__cmpsf2+0x58>
 8001114:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001118:	d1e4      	bne.n	80010e4 <__cmpsf2+0x1c>
 800111a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800111e:	d0e1      	beq.n	80010e4 <__cmpsf2+0x1c>
 8001120:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop

08001128 <__aeabi_cfrcmple>:
 8001128:	4684      	mov	ip, r0
 800112a:	4608      	mov	r0, r1
 800112c:	4661      	mov	r1, ip
 800112e:	e7ff      	b.n	8001130 <__aeabi_cfcmpeq>

08001130 <__aeabi_cfcmpeq>:
 8001130:	b50f      	push	{r0, r1, r2, r3, lr}
 8001132:	f7ff ffc9 	bl	80010c8 <__cmpsf2>
 8001136:	2800      	cmp	r0, #0
 8001138:	bf48      	it	mi
 800113a:	f110 0f00 	cmnmi.w	r0, #0
 800113e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001140 <__aeabi_fcmpeq>:
 8001140:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001144:	f7ff fff4 	bl	8001130 <__aeabi_cfcmpeq>
 8001148:	bf0c      	ite	eq
 800114a:	2001      	moveq	r0, #1
 800114c:	2000      	movne	r0, #0
 800114e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001152:	bf00      	nop

08001154 <__aeabi_fcmplt>:
 8001154:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001158:	f7ff ffea 	bl	8001130 <__aeabi_cfcmpeq>
 800115c:	bf34      	ite	cc
 800115e:	2001      	movcc	r0, #1
 8001160:	2000      	movcs	r0, #0
 8001162:	f85d fb08 	ldr.w	pc, [sp], #8
 8001166:	bf00      	nop

08001168 <__aeabi_fcmple>:
 8001168:	f84d ed08 	str.w	lr, [sp, #-8]!
 800116c:	f7ff ffe0 	bl	8001130 <__aeabi_cfcmpeq>
 8001170:	bf94      	ite	ls
 8001172:	2001      	movls	r0, #1
 8001174:	2000      	movhi	r0, #0
 8001176:	f85d fb08 	ldr.w	pc, [sp], #8
 800117a:	bf00      	nop

0800117c <__aeabi_fcmpge>:
 800117c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001180:	f7ff ffd2 	bl	8001128 <__aeabi_cfrcmple>
 8001184:	bf94      	ite	ls
 8001186:	2001      	movls	r0, #1
 8001188:	2000      	movhi	r0, #0
 800118a:	f85d fb08 	ldr.w	pc, [sp], #8
 800118e:	bf00      	nop

08001190 <__aeabi_fcmpgt>:
 8001190:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001194:	f7ff ffc8 	bl	8001128 <__aeabi_cfrcmple>
 8001198:	bf34      	ite	cc
 800119a:	2001      	movcc	r0, #1
 800119c:	2000      	movcs	r0, #0
 800119e:	f85d fb08 	ldr.w	pc, [sp], #8
 80011a2:	bf00      	nop

080011a4 <__aeabi_f2uiz>:
 80011a4:	0042      	lsls	r2, r0, #1
 80011a6:	d20e      	bcs.n	80011c6 <__aeabi_f2uiz+0x22>
 80011a8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011ac:	d30b      	bcc.n	80011c6 <__aeabi_f2uiz+0x22>
 80011ae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011b2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011b6:	d409      	bmi.n	80011cc <__aeabi_f2uiz+0x28>
 80011b8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011c0:	fa23 f002 	lsr.w	r0, r3, r2
 80011c4:	4770      	bx	lr
 80011c6:	f04f 0000 	mov.w	r0, #0
 80011ca:	4770      	bx	lr
 80011cc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011d0:	d101      	bne.n	80011d6 <__aeabi_f2uiz+0x32>
 80011d2:	0242      	lsls	r2, r0, #9
 80011d4:	d102      	bne.n	80011dc <__aeabi_f2uiz+0x38>
 80011d6:	f04f 30ff 	mov.w	r0, #4294967295
 80011da:	4770      	bx	lr
 80011dc:	f04f 0000 	mov.w	r0, #0
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop

080011e4 <__aeabi_uldivmod>:
 80011e4:	b953      	cbnz	r3, 80011fc <__aeabi_uldivmod+0x18>
 80011e6:	b94a      	cbnz	r2, 80011fc <__aeabi_uldivmod+0x18>
 80011e8:	2900      	cmp	r1, #0
 80011ea:	bf08      	it	eq
 80011ec:	2800      	cmpeq	r0, #0
 80011ee:	bf1c      	itt	ne
 80011f0:	f04f 31ff 	movne.w	r1, #4294967295
 80011f4:	f04f 30ff 	movne.w	r0, #4294967295
 80011f8:	f000 b9a6 	b.w	8001548 <__aeabi_idiv0>
 80011fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8001200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001204:	f000 f83e 	bl	8001284 <__udivmoddi4>
 8001208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800120c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001210:	b004      	add	sp, #16
 8001212:	4770      	bx	lr

08001214 <__aeabi_d2lz>:
 8001214:	b538      	push	{r3, r4, r5, lr}
 8001216:	460c      	mov	r4, r1
 8001218:	4605      	mov	r5, r0
 800121a:	4621      	mov	r1, r4
 800121c:	4628      	mov	r0, r5
 800121e:	2200      	movs	r2, #0
 8001220:	2300      	movs	r3, #0
 8001222:	f7ff fc15 	bl	8000a50 <__aeabi_dcmplt>
 8001226:	b928      	cbnz	r0, 8001234 <__aeabi_d2lz+0x20>
 8001228:	4628      	mov	r0, r5
 800122a:	4621      	mov	r1, r4
 800122c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001230:	f000 b80a 	b.w	8001248 <__aeabi_d2ulz>
 8001234:	4628      	mov	r0, r5
 8001236:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800123a:	f000 f805 	bl	8001248 <__aeabi_d2ulz>
 800123e:	4240      	negs	r0, r0
 8001240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001244:	bd38      	pop	{r3, r4, r5, pc}
 8001246:	bf00      	nop

08001248 <__aeabi_d2ulz>:
 8001248:	b5d0      	push	{r4, r6, r7, lr}
 800124a:	2200      	movs	r2, #0
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <__aeabi_d2ulz+0x34>)
 800124e:	4606      	mov	r6, r0
 8001250:	460f      	mov	r7, r1
 8001252:	f7ff f98b 	bl	800056c <__aeabi_dmul>
 8001256:	f7ff fc61 	bl	8000b1c <__aeabi_d2uiz>
 800125a:	4604      	mov	r4, r0
 800125c:	f7ff f90c 	bl	8000478 <__aeabi_ui2d>
 8001260:	2200      	movs	r2, #0
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <__aeabi_d2ulz+0x38>)
 8001264:	f7ff f982 	bl	800056c <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4630      	mov	r0, r6
 800126e:	4639      	mov	r1, r7
 8001270:	f7fe ffc4 	bl	80001fc <__aeabi_dsub>
 8001274:	f7ff fc52 	bl	8000b1c <__aeabi_d2uiz>
 8001278:	4621      	mov	r1, r4
 800127a:	bdd0      	pop	{r4, r6, r7, pc}
 800127c:	3df00000 	.word	0x3df00000
 8001280:	41f00000 	.word	0x41f00000

08001284 <__udivmoddi4>:
 8001284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001288:	9e08      	ldr	r6, [sp, #32]
 800128a:	460d      	mov	r5, r1
 800128c:	4604      	mov	r4, r0
 800128e:	468e      	mov	lr, r1
 8001290:	2b00      	cmp	r3, #0
 8001292:	f040 8083 	bne.w	800139c <__udivmoddi4+0x118>
 8001296:	428a      	cmp	r2, r1
 8001298:	4617      	mov	r7, r2
 800129a:	d947      	bls.n	800132c <__udivmoddi4+0xa8>
 800129c:	fab2 f382 	clz	r3, r2
 80012a0:	b14b      	cbz	r3, 80012b6 <__udivmoddi4+0x32>
 80012a2:	f1c3 0120 	rsb	r1, r3, #32
 80012a6:	fa05 fe03 	lsl.w	lr, r5, r3
 80012aa:	fa20 f101 	lsr.w	r1, r0, r1
 80012ae:	409f      	lsls	r7, r3
 80012b0:	ea41 0e0e 	orr.w	lr, r1, lr
 80012b4:	409c      	lsls	r4, r3
 80012b6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80012ba:	fbbe fcf8 	udiv	ip, lr, r8
 80012be:	fa1f f987 	uxth.w	r9, r7
 80012c2:	fb08 e21c 	mls	r2, r8, ip, lr
 80012c6:	fb0c f009 	mul.w	r0, ip, r9
 80012ca:	0c21      	lsrs	r1, r4, #16
 80012cc:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80012d0:	4290      	cmp	r0, r2
 80012d2:	d90a      	bls.n	80012ea <__udivmoddi4+0x66>
 80012d4:	18ba      	adds	r2, r7, r2
 80012d6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80012da:	f080 8118 	bcs.w	800150e <__udivmoddi4+0x28a>
 80012de:	4290      	cmp	r0, r2
 80012e0:	f240 8115 	bls.w	800150e <__udivmoddi4+0x28a>
 80012e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80012e8:	443a      	add	r2, r7
 80012ea:	1a12      	subs	r2, r2, r0
 80012ec:	fbb2 f0f8 	udiv	r0, r2, r8
 80012f0:	fb08 2210 	mls	r2, r8, r0, r2
 80012f4:	fb00 f109 	mul.w	r1, r0, r9
 80012f8:	b2a4      	uxth	r4, r4
 80012fa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012fe:	42a1      	cmp	r1, r4
 8001300:	d909      	bls.n	8001316 <__udivmoddi4+0x92>
 8001302:	193c      	adds	r4, r7, r4
 8001304:	f100 32ff 	add.w	r2, r0, #4294967295
 8001308:	f080 8103 	bcs.w	8001512 <__udivmoddi4+0x28e>
 800130c:	42a1      	cmp	r1, r4
 800130e:	f240 8100 	bls.w	8001512 <__udivmoddi4+0x28e>
 8001312:	3802      	subs	r0, #2
 8001314:	443c      	add	r4, r7
 8001316:	1a64      	subs	r4, r4, r1
 8001318:	2100      	movs	r1, #0
 800131a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800131e:	b11e      	cbz	r6, 8001328 <__udivmoddi4+0xa4>
 8001320:	2200      	movs	r2, #0
 8001322:	40dc      	lsrs	r4, r3
 8001324:	e9c6 4200 	strd	r4, r2, [r6]
 8001328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800132c:	b902      	cbnz	r2, 8001330 <__udivmoddi4+0xac>
 800132e:	deff      	udf	#255	; 0xff
 8001330:	fab2 f382 	clz	r3, r2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d14f      	bne.n	80013d8 <__udivmoddi4+0x154>
 8001338:	1a8d      	subs	r5, r1, r2
 800133a:	2101      	movs	r1, #1
 800133c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001340:	fa1f f882 	uxth.w	r8, r2
 8001344:	fbb5 fcfe 	udiv	ip, r5, lr
 8001348:	fb0e 551c 	mls	r5, lr, ip, r5
 800134c:	fb08 f00c 	mul.w	r0, r8, ip
 8001350:	0c22      	lsrs	r2, r4, #16
 8001352:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001356:	42a8      	cmp	r0, r5
 8001358:	d907      	bls.n	800136a <__udivmoddi4+0xe6>
 800135a:	197d      	adds	r5, r7, r5
 800135c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001360:	d202      	bcs.n	8001368 <__udivmoddi4+0xe4>
 8001362:	42a8      	cmp	r0, r5
 8001364:	f200 80e9 	bhi.w	800153a <__udivmoddi4+0x2b6>
 8001368:	4694      	mov	ip, r2
 800136a:	1a2d      	subs	r5, r5, r0
 800136c:	fbb5 f0fe 	udiv	r0, r5, lr
 8001370:	fb0e 5510 	mls	r5, lr, r0, r5
 8001374:	fb08 f800 	mul.w	r8, r8, r0
 8001378:	b2a4      	uxth	r4, r4
 800137a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800137e:	45a0      	cmp	r8, r4
 8001380:	d907      	bls.n	8001392 <__udivmoddi4+0x10e>
 8001382:	193c      	adds	r4, r7, r4
 8001384:	f100 32ff 	add.w	r2, r0, #4294967295
 8001388:	d202      	bcs.n	8001390 <__udivmoddi4+0x10c>
 800138a:	45a0      	cmp	r8, r4
 800138c:	f200 80d9 	bhi.w	8001542 <__udivmoddi4+0x2be>
 8001390:	4610      	mov	r0, r2
 8001392:	eba4 0408 	sub.w	r4, r4, r8
 8001396:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800139a:	e7c0      	b.n	800131e <__udivmoddi4+0x9a>
 800139c:	428b      	cmp	r3, r1
 800139e:	d908      	bls.n	80013b2 <__udivmoddi4+0x12e>
 80013a0:	2e00      	cmp	r6, #0
 80013a2:	f000 80b1 	beq.w	8001508 <__udivmoddi4+0x284>
 80013a6:	2100      	movs	r1, #0
 80013a8:	e9c6 0500 	strd	r0, r5, [r6]
 80013ac:	4608      	mov	r0, r1
 80013ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013b2:	fab3 f183 	clz	r1, r3
 80013b6:	2900      	cmp	r1, #0
 80013b8:	d14b      	bne.n	8001452 <__udivmoddi4+0x1ce>
 80013ba:	42ab      	cmp	r3, r5
 80013bc:	d302      	bcc.n	80013c4 <__udivmoddi4+0x140>
 80013be:	4282      	cmp	r2, r0
 80013c0:	f200 80b9 	bhi.w	8001536 <__udivmoddi4+0x2b2>
 80013c4:	1a84      	subs	r4, r0, r2
 80013c6:	eb65 0303 	sbc.w	r3, r5, r3
 80013ca:	2001      	movs	r0, #1
 80013cc:	469e      	mov	lr, r3
 80013ce:	2e00      	cmp	r6, #0
 80013d0:	d0aa      	beq.n	8001328 <__udivmoddi4+0xa4>
 80013d2:	e9c6 4e00 	strd	r4, lr, [r6]
 80013d6:	e7a7      	b.n	8001328 <__udivmoddi4+0xa4>
 80013d8:	409f      	lsls	r7, r3
 80013da:	f1c3 0220 	rsb	r2, r3, #32
 80013de:	40d1      	lsrs	r1, r2
 80013e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80013e8:	fa1f f887 	uxth.w	r8, r7
 80013ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80013f0:	fa24 f202 	lsr.w	r2, r4, r2
 80013f4:	409d      	lsls	r5, r3
 80013f6:	fb00 fc08 	mul.w	ip, r0, r8
 80013fa:	432a      	orrs	r2, r5
 80013fc:	0c15      	lsrs	r5, r2, #16
 80013fe:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001402:	45ac      	cmp	ip, r5
 8001404:	fa04 f403 	lsl.w	r4, r4, r3
 8001408:	d909      	bls.n	800141e <__udivmoddi4+0x19a>
 800140a:	197d      	adds	r5, r7, r5
 800140c:	f100 31ff 	add.w	r1, r0, #4294967295
 8001410:	f080 808f 	bcs.w	8001532 <__udivmoddi4+0x2ae>
 8001414:	45ac      	cmp	ip, r5
 8001416:	f240 808c 	bls.w	8001532 <__udivmoddi4+0x2ae>
 800141a:	3802      	subs	r0, #2
 800141c:	443d      	add	r5, r7
 800141e:	eba5 050c 	sub.w	r5, r5, ip
 8001422:	fbb5 f1fe 	udiv	r1, r5, lr
 8001426:	fb0e 5c11 	mls	ip, lr, r1, r5
 800142a:	fb01 f908 	mul.w	r9, r1, r8
 800142e:	b295      	uxth	r5, r2
 8001430:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001434:	45a9      	cmp	r9, r5
 8001436:	d907      	bls.n	8001448 <__udivmoddi4+0x1c4>
 8001438:	197d      	adds	r5, r7, r5
 800143a:	f101 32ff 	add.w	r2, r1, #4294967295
 800143e:	d274      	bcs.n	800152a <__udivmoddi4+0x2a6>
 8001440:	45a9      	cmp	r9, r5
 8001442:	d972      	bls.n	800152a <__udivmoddi4+0x2a6>
 8001444:	3902      	subs	r1, #2
 8001446:	443d      	add	r5, r7
 8001448:	eba5 0509 	sub.w	r5, r5, r9
 800144c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001450:	e778      	b.n	8001344 <__udivmoddi4+0xc0>
 8001452:	f1c1 0720 	rsb	r7, r1, #32
 8001456:	408b      	lsls	r3, r1
 8001458:	fa22 fc07 	lsr.w	ip, r2, r7
 800145c:	ea4c 0c03 	orr.w	ip, ip, r3
 8001460:	fa25 f407 	lsr.w	r4, r5, r7
 8001464:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001468:	fbb4 f9fe 	udiv	r9, r4, lr
 800146c:	fa1f f88c 	uxth.w	r8, ip
 8001470:	fb0e 4419 	mls	r4, lr, r9, r4
 8001474:	fa20 f307 	lsr.w	r3, r0, r7
 8001478:	fb09 fa08 	mul.w	sl, r9, r8
 800147c:	408d      	lsls	r5, r1
 800147e:	431d      	orrs	r5, r3
 8001480:	0c2b      	lsrs	r3, r5, #16
 8001482:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001486:	45a2      	cmp	sl, r4
 8001488:	fa02 f201 	lsl.w	r2, r2, r1
 800148c:	fa00 f301 	lsl.w	r3, r0, r1
 8001490:	d909      	bls.n	80014a6 <__udivmoddi4+0x222>
 8001492:	eb1c 0404 	adds.w	r4, ip, r4
 8001496:	f109 30ff 	add.w	r0, r9, #4294967295
 800149a:	d248      	bcs.n	800152e <__udivmoddi4+0x2aa>
 800149c:	45a2      	cmp	sl, r4
 800149e:	d946      	bls.n	800152e <__udivmoddi4+0x2aa>
 80014a0:	f1a9 0902 	sub.w	r9, r9, #2
 80014a4:	4464      	add	r4, ip
 80014a6:	eba4 040a 	sub.w	r4, r4, sl
 80014aa:	fbb4 f0fe 	udiv	r0, r4, lr
 80014ae:	fb0e 4410 	mls	r4, lr, r0, r4
 80014b2:	fb00 fa08 	mul.w	sl, r0, r8
 80014b6:	b2ad      	uxth	r5, r5
 80014b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80014bc:	45a2      	cmp	sl, r4
 80014be:	d908      	bls.n	80014d2 <__udivmoddi4+0x24e>
 80014c0:	eb1c 0404 	adds.w	r4, ip, r4
 80014c4:	f100 35ff 	add.w	r5, r0, #4294967295
 80014c8:	d22d      	bcs.n	8001526 <__udivmoddi4+0x2a2>
 80014ca:	45a2      	cmp	sl, r4
 80014cc:	d92b      	bls.n	8001526 <__udivmoddi4+0x2a2>
 80014ce:	3802      	subs	r0, #2
 80014d0:	4464      	add	r4, ip
 80014d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80014d6:	fba0 8902 	umull	r8, r9, r0, r2
 80014da:	eba4 040a 	sub.w	r4, r4, sl
 80014de:	454c      	cmp	r4, r9
 80014e0:	46c6      	mov	lr, r8
 80014e2:	464d      	mov	r5, r9
 80014e4:	d319      	bcc.n	800151a <__udivmoddi4+0x296>
 80014e6:	d016      	beq.n	8001516 <__udivmoddi4+0x292>
 80014e8:	b15e      	cbz	r6, 8001502 <__udivmoddi4+0x27e>
 80014ea:	ebb3 020e 	subs.w	r2, r3, lr
 80014ee:	eb64 0405 	sbc.w	r4, r4, r5
 80014f2:	fa04 f707 	lsl.w	r7, r4, r7
 80014f6:	fa22 f301 	lsr.w	r3, r2, r1
 80014fa:	431f      	orrs	r7, r3
 80014fc:	40cc      	lsrs	r4, r1
 80014fe:	e9c6 7400 	strd	r7, r4, [r6]
 8001502:	2100      	movs	r1, #0
 8001504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001508:	4631      	mov	r1, r6
 800150a:	4630      	mov	r0, r6
 800150c:	e70c      	b.n	8001328 <__udivmoddi4+0xa4>
 800150e:	468c      	mov	ip, r1
 8001510:	e6eb      	b.n	80012ea <__udivmoddi4+0x66>
 8001512:	4610      	mov	r0, r2
 8001514:	e6ff      	b.n	8001316 <__udivmoddi4+0x92>
 8001516:	4543      	cmp	r3, r8
 8001518:	d2e6      	bcs.n	80014e8 <__udivmoddi4+0x264>
 800151a:	ebb8 0e02 	subs.w	lr, r8, r2
 800151e:	eb69 050c 	sbc.w	r5, r9, ip
 8001522:	3801      	subs	r0, #1
 8001524:	e7e0      	b.n	80014e8 <__udivmoddi4+0x264>
 8001526:	4628      	mov	r0, r5
 8001528:	e7d3      	b.n	80014d2 <__udivmoddi4+0x24e>
 800152a:	4611      	mov	r1, r2
 800152c:	e78c      	b.n	8001448 <__udivmoddi4+0x1c4>
 800152e:	4681      	mov	r9, r0
 8001530:	e7b9      	b.n	80014a6 <__udivmoddi4+0x222>
 8001532:	4608      	mov	r0, r1
 8001534:	e773      	b.n	800141e <__udivmoddi4+0x19a>
 8001536:	4608      	mov	r0, r1
 8001538:	e749      	b.n	80013ce <__udivmoddi4+0x14a>
 800153a:	f1ac 0c02 	sub.w	ip, ip, #2
 800153e:	443d      	add	r5, r7
 8001540:	e713      	b.n	800136a <__udivmoddi4+0xe6>
 8001542:	3802      	subs	r0, #2
 8001544:	443c      	add	r4, r7
 8001546:	e724      	b.n	8001392 <__udivmoddi4+0x10e>

08001548 <__aeabi_idiv0>:
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop

0800154c <get_ADC_values>:
#include "main.h"
#include "ADC_driver.h"
#include "sensors.h"

float get_ADC_values(int pH_or_nutrients) // 1 = nutrients 0 = pH
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
		HAL_ADC_Start(&hadc2);
 8001554:	4809      	ldr	r0, [pc, #36]	; (800157c <get_ADC_values+0x30>)
 8001556:	f001 ff07 	bl	8003368 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 100);
 800155a:	2164      	movs	r1, #100	; 0x64
 800155c:	4807      	ldr	r0, [pc, #28]	; (800157c <get_ADC_values+0x30>)
 800155e:	f001 ffb3 	bl	80034c8 <HAL_ADC_PollForConversion>
		return HAL_ADC_GetValue(&hadc2);//Read value
 8001562:	4806      	ldr	r0, [pc, #24]	; (800157c <get_ADC_values+0x30>)
 8001564:	f002 f834 	bl	80035d0 <HAL_ADC_GetValue>
 8001568:	4603      	mov	r3, r0
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fbfc 	bl	8000d68 <__aeabi_ui2f>
 8001570:	4603      	mov	r3, r0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20006528 	.word	0x20006528

08001580 <Mount_USB>:




void Mount_USB (void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8001584:	2201      	movs	r2, #1
 8001586:	4905      	ldr	r1, [pc, #20]	; (800159c <Mount_USB+0x1c>)
 8001588:	4805      	ldr	r0, [pc, #20]	; (80015a0 <Mount_USB+0x20>)
 800158a:	f00c f92f 	bl	800d7ec <f_mount>
 800158e:	4603      	mov	r3, r0
 8001590:	461a      	mov	r2, r3
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <Mount_USB+0x24>)
 8001594:	701a      	strb	r2, [r3, #0]
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2000a814 	.word	0x2000a814
 80015a0:	2000aa44 	.word	0x2000aa44
 80015a4:	20006408 	.word	0x20006408

080015a8 <Unmount_USB>:
void Unmount_USB (void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 80015ac:	2201      	movs	r2, #1
 80015ae:	4905      	ldr	r1, [pc, #20]	; (80015c4 <Unmount_USB+0x1c>)
 80015b0:	2000      	movs	r0, #0
 80015b2:	f00c f91b 	bl	800d7ec <f_mount>
 80015b6:	4603      	mov	r3, r0
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <Unmount_USB+0x20>)
 80015bc:	701a      	strb	r2, [r3, #0]
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2000a814 	.word	0x2000a814
 80015c8:	20006408 	.word	0x20006408

080015cc <Scan_USB>:
char *path[20*8] = {0};
/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	6018      	str	r0, [r3, #0]
    DIR dir;
    UINT i=0;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c


    fresult = f_opendir(&dir, *path);                       /* Open the directory */
 80015de:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <Scan_USB+0xd4>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f00c f967 	bl	800d8bc <f_opendir>
 80015ee:	4603      	mov	r3, r0
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <Scan_USB+0xd8>)
 80015f4:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80015f6:	4b2b      	ldr	r3, [pc, #172]	; (80016a4 <Scan_USB+0xd8>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d143      	bne.n	8001686 <Scan_USB+0xba>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 80015fe:	f107 030c 	add.w	r3, r7, #12
 8001602:	4929      	ldr	r1, [pc, #164]	; (80016a8 <Scan_USB+0xdc>)
 8001604:	4618      	mov	r0, r3
 8001606:	f00c fa0e 	bl	800da26 <f_readdir>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <Scan_USB+0xd8>)
 8001610:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001612:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <Scan_USB+0xd8>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d130      	bne.n	800167c <Scan_USB+0xb0>
 800161a:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <Scan_USB+0xdc>)
 800161c:	7a5b      	ldrb	r3, [r3, #9]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d02c      	beq.n	800167c <Scan_USB+0xb0>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <Scan_USB+0xdc>)
 8001624:	7a1b      	ldrb	r3, [r3, #8]
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0e7      	beq.n	80015fe <Scan_USB+0x32>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 800162e:	491f      	ldr	r1, [pc, #124]	; (80016ac <Scan_USB+0xe0>)
 8001630:	481f      	ldr	r0, [pc, #124]	; (80016b0 <Scan_USB+0xe4>)
 8001632:	f7fe fdcd 	bl	80001d0 <strcmp>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d01a      	beq.n	8001672 <Scan_USB+0xa6>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 800163c:	491b      	ldr	r1, [pc, #108]	; (80016ac <Scan_USB+0xe0>)
 800163e:	481d      	ldr	r0, [pc, #116]	; (80016b4 <Scan_USB+0xe8>)
 8001640:	f7fe fdc6 	bl	80001d0 <strcmp>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d015      	beq.n	8001676 <Scan_USB+0xaa>
                fresult = Scan_USB(*path);                     /* Enter the directory */
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <Scan_USB+0xd4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ffbc 	bl	80015cc <Scan_USB>
 8001654:	4603      	mov	r3, r0
 8001656:	461a      	mov	r2, r3
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <Scan_USB+0xd8>)
 800165a:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <Scan_USB+0xd8>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10a      	bne.n	800167a <Scan_USB+0xae>
                path[i] = 0;
 8001664:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <Scan_USB+0xd4>)
 8001666:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800166a:	2100      	movs	r1, #0
 800166c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001670:	e7c5      	b.n	80015fe <Scan_USB+0x32>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8001672:	bf00      	nop
 8001674:	e7c3      	b.n	80015fe <Scan_USB+0x32>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8001676:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8001678:	e7c1      	b.n	80015fe <Scan_USB+0x32>
                if (fresult != FR_OK) break;
 800167a:	bf00      	nop
            }
            else
            {
            }
        }
        f_closedir(&dir);
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	4618      	mov	r0, r3
 8001682:	f00c f9a3 	bl	800d9cc <f_closedir>
    }
    free(*path);
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <Scan_USB+0xd4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f00f ff52 	bl	8011534 <free>
    return fresult;
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <Scan_USB+0xd8>)
 8001692:	781b      	ldrb	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	f507 770c 	add.w	r7, r7, #560	; 0x230
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	2000024c 	.word	0x2000024c
 80016a4:	20006408 	.word	0x20006408
 80016a8:	2000640c 	.word	0x2000640c
 80016ac:	20006415 	.word	0x20006415
 80016b0:	08015c50 	.word	0x08015c50
 80016b4:	08015c5c 	.word	0x08015c5c

080016b8 <Check_USB_Details>:

    return fresult;
}

void Check_USB_Details (void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 80016bc:	4a1e      	ldr	r2, [pc, #120]	; (8001738 <Check_USB_Details+0x80>)
 80016be:	491f      	ldr	r1, [pc, #124]	; (800173c <Check_USB_Details+0x84>)
 80016c0:	481f      	ldr	r0, [pc, #124]	; (8001740 <Check_USB_Details+0x88>)
 80016c2:	f00c f9fe 	bl	800dac2 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <Check_USB_Details+0x80>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80016ce:	3b02      	subs	r3, #2
 80016d0:	4a19      	ldr	r2, [pc, #100]	; (8001738 <Check_USB_Details+0x80>)
 80016d2:	6812      	ldr	r2, [r2, #0]
 80016d4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80016d8:	fb02 f303 	mul.w	r3, r2, r3
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe fecb 	bl	8000478 <__aeabi_ui2d>
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <Check_USB_Details+0x8c>)
 80016e8:	f7fe ff40 	bl	800056c <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fa12 	bl	8000b1c <__aeabi_d2uiz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4a13      	ldr	r2, [pc, #76]	; (8001748 <Check_USB_Details+0x90>)
 80016fc:	6013      	str	r3, [r2, #0]

    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <Check_USB_Details+0x80>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8001706:	461a      	mov	r2, r3
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <Check_USB_Details+0x84>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	fb03 f302 	mul.w	r3, r3, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe feb1 	bl	8000478 <__aeabi_ui2d>
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <Check_USB_Details+0x8c>)
 800171c:	f7fe ff26 	bl	800056c <__aeabi_dmul>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f7ff f9f8 	bl	8000b1c <__aeabi_d2uiz>
 800172c:	4603      	mov	r3, r0
 800172e:	4a07      	ldr	r2, [pc, #28]	; (800174c <Check_USB_Details+0x94>)
 8001730:	6013      	str	r3, [r2, #0]
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200063fc 	.word	0x200063fc
 800173c:	200063f4 	.word	0x200063f4
 8001740:	08015c78 	.word	0x08015c78
 8001744:	3fe00000 	.word	0x3fe00000
 8001748:	20006424 	.word	0x20006424
 800174c:	20006400 	.word	0x20006400

08001750 <setTimeDate>:
	HAL_RTC_GetTime(&hrtc, &sTime,RTC_FORMAT_BIN);
	HAL_RTC_GetDate(&hrtc, &sDate,RTC_FORMAT_BIN);
}

void setTimeDate(uint8_t month, uint8_t day, uint8_t year, uint8_t hours, uint8_t min, uint8_t sec)
{
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4604      	mov	r4, r0
 8001758:	4608      	mov	r0, r1
 800175a:	4611      	mov	r1, r2
 800175c:	461a      	mov	r2, r3
 800175e:	4623      	mov	r3, r4
 8001760:	71fb      	strb	r3, [r7, #7]
 8001762:	4603      	mov	r3, r0
 8001764:	71bb      	strb	r3, [r7, #6]
 8001766:	460b      	mov	r3, r1
 8001768:	717b      	strb	r3, [r7, #5]
 800176a:	4613      	mov	r3, r2
 800176c:	713b      	strb	r3, [r7, #4]
	sTime.Hours = hours;
 800176e:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <setTimeDate+0x84>)
 8001770:	793b      	ldrb	r3, [r7, #4]
 8001772:	7013      	strb	r3, [r2, #0]
	sTime.Minutes = min;
 8001774:	4a17      	ldr	r2, [pc, #92]	; (80017d4 <setTimeDate+0x84>)
 8001776:	7e3b      	ldrb	r3, [r7, #24]
 8001778:	7053      	strb	r3, [r2, #1]
	sTime.Seconds = sec;
 800177a:	4a16      	ldr	r2, [pc, #88]	; (80017d4 <setTimeDate+0x84>)
 800177c:	7f3b      	ldrb	r3, [r7, #28]
 800177e:	7093      	strb	r3, [r2, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <setTimeDate+0x84>)
 8001782:	2200      	movs	r2, #0
 8001784:	605a      	str	r2, [r3, #4]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001786:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <setTimeDate+0x84>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
	if(HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)Error_Handler();
 800178c:	2201      	movs	r2, #1
 800178e:	4911      	ldr	r1, [pc, #68]	; (80017d4 <setTimeDate+0x84>)
 8001790:	4811      	ldr	r0, [pc, #68]	; (80017d8 <setTimeDate+0x88>)
 8001792:	f004 ff31 	bl	80065f8 <HAL_RTC_SetTime>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <setTimeDate+0x50>
 800179c:	f000 fe4e 	bl	800243c <Error_Handler>

	sDate.WeekDay = 0x01;
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <setTimeDate+0x8c>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
	sDate.Month = month;
 80017a6:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <setTimeDate+0x8c>)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	7053      	strb	r3, [r2, #1]
	sDate.Date = day;
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <setTimeDate+0x8c>)
 80017ae:	79bb      	ldrb	r3, [r7, #6]
 80017b0:	7093      	strb	r3, [r2, #2]
	sDate.Year = year;
 80017b2:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <setTimeDate+0x8c>)
 80017b4:	797b      	ldrb	r3, [r7, #5]
 80017b6:	70d3      	strb	r3, [r2, #3]
	if(HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)Error_Handler();
 80017b8:	2201      	movs	r2, #1
 80017ba:	4908      	ldr	r1, [pc, #32]	; (80017dc <setTimeDate+0x8c>)
 80017bc:	4806      	ldr	r0, [pc, #24]	; (80017d8 <setTimeDate+0x88>)
 80017be:	f004 ffd1 	bl	8006764 <HAL_RTC_SetDate>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <setTimeDate+0x7c>
 80017c8:	f000 fe38 	bl	800243c <Error_Handler>
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd90      	pop	{r4, r7, pc}
 80017d4:	200025a4 	.word	0x200025a4
 80017d8:	2000a5b8 	.word	0x2000a5b8
 80017dc:	200025b0 	.word	0x200025b0

080017e0 <getMedianNum>:
#include "TDS_driver.h"
#include "main.h"
#include "sensors.h"

int getMedianNum(int bArray[], int iFilterLen)
{
 80017e0:	b4b0      	push	{r4, r5, r7}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	466b      	mov	r3, sp
 80017ec:	461d      	mov	r5, r3
      int bTab[iFilterLen];
 80017ee:	683c      	ldr	r4, [r7, #0]
 80017f0:	1e63      	subs	r3, r4, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	4623      	mov	r3, r4
 80017f6:	4618      	mov	r0, r3
 80017f8:	f04f 0100 	mov.w	r1, #0
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	014b      	lsls	r3, r1, #5
 8001806:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800180a:	0142      	lsls	r2, r0, #5
 800180c:	4623      	mov	r3, r4
 800180e:	4618      	mov	r0, r3
 8001810:	f04f 0100 	mov.w	r1, #0
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	014b      	lsls	r3, r1, #5
 800181e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001822:	0142      	lsls	r2, r0, #5
 8001824:	4623      	mov	r3, r4
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	3307      	adds	r3, #7
 800182a:	08db      	lsrs	r3, r3, #3
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	ebad 0d03 	sub.w	sp, sp, r3
 8001832:	466b      	mov	r3, sp
 8001834:	3303      	adds	r3, #3
 8001836:	089b      	lsrs	r3, r3, #2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	60bb      	str	r3, [r7, #8]
      for (char i = 0; i<iFilterLen; i++)
 800183c:	2300      	movs	r3, #0
 800183e:	74fb      	strb	r3, [r7, #19]
 8001840:	e00b      	b.n	800185a <getMedianNum+0x7a>
      bTab[i] = bArray[i];
 8001842:	7cfb      	ldrb	r3, [r7, #19]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	7cfa      	ldrb	r2, [r7, #19]
 800184c:	6819      	ldr	r1, [r3, #0]
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (char i = 0; i<iFilterLen; i++)
 8001854:	7cfb      	ldrb	r3, [r7, #19]
 8001856:	3301      	adds	r3, #1
 8001858:	74fb      	strb	r3, [r7, #19]
 800185a:	7cfb      	ldrb	r3, [r7, #19]
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	dcef      	bgt.n	8001842 <getMedianNum+0x62>
      int i, j, bTemp;
      for (j = 0; j < iFilterLen - 1; j++)
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
 8001866:	e02e      	b.n	80018c6 <getMedianNum+0xe6>
      {
      for (i = 0; i < iFilterLen - j - 1; i++)
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	e021      	b.n	80018b2 <getMedianNum+0xd2>
          {
        if (bTab[i] > bTab[i + 1])
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	1c59      	adds	r1, r3, #1
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001880:	429a      	cmp	r2, r3
 8001882:	dd13      	ble.n	80018ac <getMedianNum+0xcc>
            {
        bTemp = bTab[i];
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800188c:	61fb      	str	r3, [r7, #28]
            bTab[i] = bTab[i + 1];
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        bTab[i + 1] = bTemp;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	69f9      	ldr	r1, [r7, #28]
 80018a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (i = 0; i < iFilterLen - j - 1; i++)
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	3301      	adds	r3, #1
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	3b01      	subs	r3, #1
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	429a      	cmp	r2, r3
 80018be:	dbd6      	blt.n	800186e <getMedianNum+0x8e>
      for (j = 0; j < iFilterLen - 1; j++)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	3301      	adds	r3, #1
 80018c4:	61bb      	str	r3, [r7, #24]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dbcb      	blt.n	8001868 <getMedianNum+0x88>
         }
      }
      }
      if ((iFilterLen & 1) > 0)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	dd0a      	ble.n	80018f0 <getMedianNum+0x110>
    bTemp = bTab[(iFilterLen - 1) / 2];
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	3b01      	subs	r3, #1
 80018de:	0fda      	lsrs	r2, r3, #31
 80018e0:	4413      	add	r3, r2
 80018e2:	105b      	asrs	r3, r3, #1
 80018e4:	461a      	mov	r2, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	e014      	b.n	800191a <getMedianNum+0x13a>
      else
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	0fda      	lsrs	r2, r3, #31
 80018f4:	4413      	add	r3, r2
 80018f6:	105b      	asrs	r3, r3, #1
 80018f8:	461a      	mov	r2, r3
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	0fd9      	lsrs	r1, r3, #31
 8001904:	440b      	add	r3, r1
 8001906:	105b      	asrs	r3, r3, #1
 8001908:	1e59      	subs	r1, r3, #1
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001910:	4413      	add	r3, r2
 8001912:	0fda      	lsrs	r2, r3, #31
 8001914:	4413      	add	r3, r2
 8001916:	105b      	asrs	r3, r3, #1
 8001918:	61fb      	str	r3, [r7, #28]
      return bTemp;
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	46ad      	mov	sp, r5
}
 800191e:	4618      	mov	r0, r3
 8001920:	3724      	adds	r7, #36	; 0x24
 8001922:	46bd      	mov	sp, r7
 8001924:	bcb0      	pop	{r4, r5, r7}
 8001926:	4770      	bx	lr

08001928 <fanOn>:

float system_fan_sp = 5.5;
float plant_fan_sp = 3.5;
float heat_cool_fan_sp = 3.5; // set default fan speed values
void fanOn()
{
 8001928:	b598      	push	{r3, r4, r7, lr}
 800192a:	af00      	add	r7, sp, #0
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);	// start heater cooler fan control
 800192c:	2100      	movs	r1, #0
 800192e:	482f      	ldr	r0, [pc, #188]	; (80019ec <fanOn+0xc4>)
 8001930:	f005 fad8 	bl	8006ee4 <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;							// sets the PWM frequency of 25Mhz
 8001934:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <fanOn+0xc8>)
 8001936:	f640 323f 	movw	r2, #2879	; 0xb3f
 800193a:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM1->CCR1 = (TIM1->ARR)/heat_cool_fan_sp;	// sets the fan speed
 800193c:	4b2c      	ldr	r3, [pc, #176]	; (80019f0 <fanOn+0xc8>)
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fa11 	bl	8000d68 <__aeabi_ui2f>
 8001946:	4602      	mov	r2, r0
 8001948:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <fanOn+0xcc>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	4610      	mov	r0, r2
 8001950:	f7ff fb16 	bl	8000f80 <__aeabi_fdiv>
 8001954:	4603      	mov	r3, r0
 8001956:	4c26      	ldr	r4, [pc, #152]	; (80019f0 <fanOn+0xc8>)
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fc23 	bl	80011a4 <__aeabi_f2uiz>
 800195e:	4603      	mov	r3, r0
 8001960:	6363      	str	r3, [r4, #52]	; 0x34
   TIM1->CNT = 20500;
 8001962:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <fanOn+0xc8>)
 8001964:	f245 0214 	movw	r2, #20500	; 0x5014
 8001968:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);		// start system fan control
 800196a:	2108      	movs	r1, #8
 800196c:	481f      	ldr	r0, [pc, #124]	; (80019ec <fanOn+0xc4>)
 800196e:	f005 fab9 	bl	8006ee4 <HAL_TIM_PWM_Start>
   TIM1->ARR = 2879;							// sets the PWM frequency of 25Mhz
 8001972:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <fanOn+0xc8>)
 8001974:	f640 323f 	movw	r2, #2879	; 0xb3f
 8001978:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM1->CCR3 = (TIM1->ARR)/system_fan_sp;		// sets the fan speed
 800197a:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <fanOn+0xc8>)
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f9f2 	bl	8000d68 <__aeabi_ui2f>
 8001984:	4602      	mov	r2, r0
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <fanOn+0xd0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4619      	mov	r1, r3
 800198c:	4610      	mov	r0, r2
 800198e:	f7ff faf7 	bl	8000f80 <__aeabi_fdiv>
 8001992:	4603      	mov	r3, r0
 8001994:	4c16      	ldr	r4, [pc, #88]	; (80019f0 <fanOn+0xc8>)
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fc04 	bl	80011a4 <__aeabi_f2uiz>
 800199c:	4603      	mov	r3, r0
 800199e:	63e3      	str	r3, [r4, #60]	; 0x3c
   TIM1->CNT = 20500;
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <fanOn+0xc8>)
 80019a2:	f245 0214 	movw	r2, #20500	; 0x5014
 80019a6:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);	// start plant fan control
 80019a8:	2100      	movs	r1, #0
 80019aa:	4814      	ldr	r0, [pc, #80]	; (80019fc <fanOn+0xd4>)
 80019ac:	f005 fa9a 	bl	8006ee4 <HAL_TIM_PWM_Start>
   TIM10->ARR = 2879;							// sets the PWM frequency of 25Mhz
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <fanOn+0xd8>)
 80019b2:	f640 323f 	movw	r2, #2879	; 0xb3f
 80019b6:	62da      	str	r2, [r3, #44]	; 0x2c
   TIM10->CCR1 = (TIM10->ARR)/plant_fan_sp;		// sets the fan speed
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <fanOn+0xd8>)
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff f9d3 	bl	8000d68 <__aeabi_ui2f>
 80019c2:	4602      	mov	r2, r0
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <fanOn+0xdc>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4619      	mov	r1, r3
 80019ca:	4610      	mov	r0, r2
 80019cc:	f7ff fad8 	bl	8000f80 <__aeabi_fdiv>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4c0b      	ldr	r4, [pc, #44]	; (8001a00 <fanOn+0xd8>)
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fbe5 	bl	80011a4 <__aeabi_f2uiz>
 80019da:	4603      	mov	r3, r0
 80019dc:	6363      	str	r3, [r4, #52]	; 0x34
   TIM10->CNT = 20500;
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <fanOn+0xd8>)
 80019e0:	f245 0214 	movw	r2, #20500	; 0x5014
 80019e4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80019e6:	bf00      	nop
 80019e8:	bd98      	pop	{r3, r4, r7, pc}
 80019ea:	bf00      	nop
 80019ec:	2000a5ec 	.word	0x2000a5ec
 80019f0:	40010000 	.word	0x40010000
 80019f4:	20000008 	.word	0x20000008
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20006570 	.word	0x20006570
 8001a00:	40014400 	.word	0x40014400
 8001a04:	20000004 	.word	0x20000004

08001a08 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	4a06      	ldr	r2, [pc, #24]	; (8001a38 <vApplicationGetIdleTaskMemory+0x30>)
 8001a1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a26:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	200004cc 	.word	0x200004cc
 8001a38:	20000580 	.word	0x20000580

08001a3c <getFiveSamples>:

char setting_pH = 'n';
char setting_nutrient = 'n';

void getFiveSamples(int delay_and_temp_enable)
{
 8001a3c:	b5b0      	push	{r4, r5, r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	water_temp = 0;
 8001a44:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <getFiveSamples+0xe8>)
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
	TDS = 0;
 8001a4c:	4b36      	ldr	r3, [pc, #216]	; (8001b28 <getFiveSamples+0xec>)
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
	pH = 0;
 8001a54:	4b35      	ldr	r3, [pc, #212]	; (8001b2c <getFiveSamples+0xf0>)
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
	for(int fiveSamples = 0; fiveSamples<5;fiveSamples++)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	e03a      	b.n	8001ad8 <getFiveSamples+0x9c>
	{
								// get sensor data
		TDS 		  += readWaterTDS();
 8001a62:	f000 fe75 	bl	8002750 <readWaterTDS>
 8001a66:	4602      	mov	r2, r0
 8001a68:	4b2f      	ldr	r3, [pc, #188]	; (8001b28 <getFiveSamples+0xec>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4610      	mov	r0, r2
 8001a70:	f7ff f8ca 	bl	8000c08 <__addsf3>
 8001a74:	4603      	mov	r3, r0
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <getFiveSamples+0xec>)
 8001a7a:	601a      	str	r2, [r3, #0]
		pH 		 	  += readPH();
 8001a7c:	f000 ff9c 	bl	80029b8 <readPH>
 8001a80:	4602      	mov	r2, r0
 8001a82:	4b2a      	ldr	r3, [pc, #168]	; (8001b2c <getFiveSamples+0xf0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	4610      	mov	r0, r2
 8001a8a:	f7ff f8bd 	bl	8000c08 <__addsf3>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <getFiveSamples+0xf0>)
 8001a94:	601a      	str	r2, [r3, #0]
		if(delay_and_temp_enable == 1)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d11a      	bne.n	8001ad2 <getFiveSamples+0x96>
		{
			water_temp	  += readWaterTemp();
 8001a9c:	f000 fdee 	bl	800267c <readWaterTemp>
 8001aa0:	4604      	mov	r4, r0
 8001aa2:	460d      	mov	r5, r1
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <getFiveSamples+0xe8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd07 	bl	80004bc <__aeabi_f2d>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	f7fe fba3 	bl	8000200 <__adddf3>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f7ff f84b 	bl	8000b5c <__aeabi_d2f>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4a16      	ldr	r2, [pc, #88]	; (8001b24 <getFiveSamples+0xe8>)
 8001aca:	6013      	str	r3, [r2, #0]
			 osDelay(100);
 8001acc:	2064      	movs	r0, #100	; 0x64
 8001ace:	f00c fb18 	bl	800e102 <osDelay>
	for(int fiveSamples = 0; fiveSamples<5;fiveSamples++)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	ddc1      	ble.n	8001a62 <getFiveSamples+0x26>
		}
	}
	water_temp	  = water_temp/5;							    // get sensor data so we can tell if its time to do pH up or pH down
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <getFiveSamples+0xe8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4913      	ldr	r1, [pc, #76]	; (8001b30 <getFiveSamples+0xf4>)
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fa4b 	bl	8000f80 <__aeabi_fdiv>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <getFiveSamples+0xe8>)
 8001af0:	601a      	str	r2, [r3, #0]
	TDS 		  = TDS/5;
 8001af2:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <getFiveSamples+0xec>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	490e      	ldr	r1, [pc, #56]	; (8001b30 <getFiveSamples+0xf4>)
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fa41 	bl	8000f80 <__aeabi_fdiv>
 8001afe:	4603      	mov	r3, r0
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <getFiveSamples+0xec>)
 8001b04:	601a      	str	r2, [r3, #0]
	pH 		 	  = pH/5;
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <getFiveSamples+0xf0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4909      	ldr	r1, [pc, #36]	; (8001b30 <getFiveSamples+0xf4>)
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fa37 	bl	8000f80 <__aeabi_fdiv>
 8001b12:	4603      	mov	r3, r0
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <getFiveSamples+0xf0>)
 8001b18:	601a      	str	r2, [r3, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bdb0      	pop	{r4, r5, r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20002588 	.word	0x20002588
 8001b28:	20002580 	.word	0x20002580
 8001b2c:	20002584 	.word	0x20002584
 8001b30:	40a00000 	.word	0x40a00000

08001b34 <systemControl>:
void waterTempControl()
{

}
void systemControl()
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af02      	add	r7, sp, #8


	if(run_once == 1)// && write_times == 2)
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <systemControl+0x44>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d114      	bne.n	8001b6c <systemControl+0x38>
	{
		//doseWater(30,30,50);
		run_once = 0;
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <systemControl+0x44>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
		fanOn();
 8001b48:	f7ff feee 	bl	8001928 <fanOn>
		setTimeDate(0x01, 0x08, 0x22, 0x19, 0x09, 0x00); // MUST BE HEX BUT NOT CONVERTED i,e,(the 22 day of the month is represented as 0x22 NOT 0x16) (month, day, year, hours, min, sec)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	2309      	movs	r3, #9
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2319      	movs	r3, #25
 8001b56:	2222      	movs	r2, #34	; 0x22
 8001b58:	2108      	movs	r1, #8
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f7ff fdf8 	bl	8001750 <setTimeDate>
		setLightCyle(19, 9, 19, 10); 			   		 // MUST BE INT (start hour, start min, start sec, end hour, end min)
 8001b60:	230a      	movs	r3, #10
 8001b62:	2213      	movs	r2, #19
 8001b64:	2109      	movs	r1, #9
 8001b66:	2013      	movs	r0, #19
 8001b68:	f000 f808 	bl	8001b7c <setLightCyle>


	//float_to_string(10.21);
	//convertedString[1] = convertedString[1];

	getFiveSamples(1);
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	f7ff ff65 	bl	8001a3c <getFiveSamples>

	// Water Temp control



}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	2000000c 	.word	0x2000000c

08001b7c <setLightCyle>:
	HAL_GPIO_WritePin(GPIOE,grow_light_Pin,GPIO_PIN_RESET);		// turn off grow light
	day_or_night = 0;											// it just turned to night time so set night status
}

void setLightCyle(uint8_t start_hour, uint8_t start_min, uint8_t end_hours, uint8_t end_min)
{
 8001b7c:	b490      	push	{r4, r7}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4604      	mov	r4, r0
 8001b84:	4608      	mov	r0, r1
 8001b86:	4611      	mov	r1, r2
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4623      	mov	r3, r4
 8001b8c:	71fb      	strb	r3, [r7, #7]
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71bb      	strb	r3, [r7, #6]
 8001b92:	460b      	mov	r3, r1
 8001b94:	717b      	strb	r3, [r7, #5]
 8001b96:	4613      	mov	r3, r2
 8001b98:	713b      	strb	r3, [r7, #4]
	light_on_time.Hours = start_hour;
 8001b9a:	4a08      	ldr	r2, [pc, #32]	; (8001bbc <setLightCyle+0x40>)
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	7013      	strb	r3, [r2, #0]
	light_on_time.Minutes = start_min;
 8001ba0:	4a06      	ldr	r2, [pc, #24]	; (8001bbc <setLightCyle+0x40>)
 8001ba2:	79bb      	ldrb	r3, [r7, #6]
 8001ba4:	7053      	strb	r3, [r2, #1]

	light_off_time.Hours = end_hours;
 8001ba6:	4a06      	ldr	r2, [pc, #24]	; (8001bc0 <setLightCyle+0x44>)
 8001ba8:	797b      	ldrb	r3, [r7, #5]
 8001baa:	7013      	strb	r3, [r2, #0]
	light_off_time.Minutes = end_min;
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <setLightCyle+0x44>)
 8001bae:	793b      	ldrb	r3, [r7, #4]
 8001bb0:	7053      	strb	r3, [r2, #1]
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc90      	pop	{r4, r7}
 8001bba:	4770      	bx	lr
 8001bbc:	2000258c 	.word	0x2000258c
 8001bc0:	20002598 	.word	0x20002598

08001bc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bc4:	b5b0      	push	{r4, r5, r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bca:	f001 fb27 	bl	800321c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bce:	f000 f82b 	bl	8001c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bd2:	f000 fb4f 	bl	8002274 <MX_GPIO_Init>
  MX_ADC2_Init();
 8001bd6:	f000 f887 	bl	8001ce8 <MX_ADC2_Init>
  MX_TIM1_Init();
 8001bda:	f000 f97d 	bl	8001ed8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001bde:	f000 fa27 	bl	8002030 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001be2:	f000 fa71 	bl	80020c8 <MX_TIM4_Init>
  MX_TIM10_Init();
 8001be6:	f000 fabd 	bl	8002164 <MX_TIM10_Init>
  MX_RTC_Init();
 8001bea:	f000 f8e3 	bl	8001db4 <MX_RTC_Init>
  MX_TIM12_Init();
 8001bee:	f000 fb07 	bl	8002200 <MX_TIM12_Init>
  MX_FATFS_Init();
 8001bf2:	f007 f86b 	bl	8008ccc <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of BalanceWater */
  osThreadStaticDef(BalanceWater, StartBalanceWater, osPriorityNormal, 0, 4096, BalanceWaterBuffer, &BalanceWaterControlBlock);
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <main+0x5c>)
 8001bf8:	1d3c      	adds	r4, r7, #4
 8001bfa:	461d      	mov	r5, r3
 8001bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BalanceWaterHandle = osThreadCreate(osThread(BalanceWater), NULL);
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f00c fa2c 	bl	800e06a <osThreadCreate>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4a03      	ldr	r2, [pc, #12]	; (8001c24 <main+0x60>)
 8001c16:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001c18:	f00c fa20 	bl	800e05c <osKernelStart>
  GPIO_InitStruct.Pull = GPIO_NOPULL;


  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);*/

  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <main+0x58>
 8001c1e:	bf00      	nop
 8001c20:	08015c8c 	.word	0x08015c8c
 8001c24:	20006428 	.word	0x20006428

08001c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b096      	sub	sp, #88	; 0x58
 8001c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c32:	2230      	movs	r2, #48	; 0x30
 8001c34:	2100      	movs	r1, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f00f fc92 	bl	8011560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
 8001c58:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001c5a:	230a      	movs	r3, #10
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c62:	2310      	movs	r3, #16
 8001c64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c66:	2301      	movs	r3, #1
 8001c68:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c72:	2308      	movs	r3, #8
 8001c74:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001c76:	23d8      	movs	r3, #216	; 0xd8
 8001c78:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001c7a:	2306      	movs	r3, #6
 8001c7c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001c7e:	2309      	movs	r3, #9
 8001c80:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c86:	4618      	mov	r0, r3
 8001c88:	f003 fee8 	bl	8005a5c <HAL_RCC_OscConfig>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001c92:	f000 fbd3 	bl	800243c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c96:	230f      	movs	r3, #15
 8001c98:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ca2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ca6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	2102      	movs	r1, #2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f004 f921 	bl	8005efc <HAL_RCC_ClockConfig>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001cc0:	f000 fbbc 	bl	800243c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ccc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cce:	463b      	mov	r3, r7
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f004 fb11 	bl	80062f8 <HAL_RCCEx_PeriphCLKConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001cdc:	f000 fbae 	bl	800243c <Error_Handler>
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	3758      	adds	r7, #88	; 0x58
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cee:	463b      	mov	r3, r7
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC2_Init 1 */
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001cfa:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <MX_ADC2_Init+0xc0>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	761a      	strb	r2, [r3, #24]
  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001d00:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <MX_ADC2_Init+0xc0>)
 8001d02:	4a2a      	ldr	r2, [pc, #168]	; (8001dac <MX_ADC2_Init+0xc4>)
 8001d04:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d06:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <MX_ADC2_Init+0xc0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001d0c:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <MX_ADC2_Init+0xc0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001d12:	4b25      	ldr	r3, [pc, #148]	; (8001da8 <MX_ADC2_Init+0xc0>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001d18:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <MX_ADC2_Init+0xc0>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 8001d1e:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <MX_ADC2_Init+0xc0>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8001d26:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <MX_ADC2_Init+0xc0>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <MX_ADC2_Init+0xc0>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d32:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <MX_ADC2_Init+0xc0>)
 8001d34:	4a1e      	ldr	r2, [pc, #120]	; (8001db0 <MX_ADC2_Init+0xc8>)
 8001d36:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <MX_ADC2_Init+0xc0>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <MX_ADC2_Init+0xc0>)
 8001d40:	2202      	movs	r2, #2
 8001d42:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <MX_ADC2_Init+0xc0>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d4c:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <MX_ADC2_Init+0xc0>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001d52:	4815      	ldr	r0, [pc, #84]	; (8001da8 <MX_ADC2_Init+0xc0>)
 8001d54:	f001 fac4 	bl	80032e0 <HAL_ADC_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_ADC2_Init+0x7a>
  {
    Error_Handler();
 8001d5e:	f000 fb6d 	bl	800243c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d62:	2304      	movs	r3, #4
 8001d64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d6e:	463b      	mov	r3, r7
 8001d70:	4619      	mov	r1, r3
 8001d72:	480d      	ldr	r0, [pc, #52]	; (8001da8 <MX_ADC2_Init+0xc0>)
 8001d74:	f001 fc38 	bl	80035e8 <HAL_ADC_ConfigChannel>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_ADC2_Init+0x9a>
  {
    Error_Handler();
 8001d7e:	f000 fb5d 	bl	800243c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d82:	2305      	movs	r3, #5
 8001d84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001d86:	2302      	movs	r3, #2
 8001d88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d8a:	463b      	mov	r3, r7
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4806      	ldr	r0, [pc, #24]	; (8001da8 <MX_ADC2_Init+0xc0>)
 8001d90:	f001 fc2a 	bl	80035e8 <HAL_ADC_ConfigChannel>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001d9a:	f000 fb4f 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20006528 	.word	0x20006528
 8001dac:	40012100 	.word	0x40012100
 8001db0:	0f000001 	.word	0x0f000001

08001db4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	; 0x30
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
 8001dd8:	615a      	str	r2, [r3, #20]
 8001dda:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ddc:	4b3c      	ldr	r3, [pc, #240]	; (8001ed0 <MX_RTC_Init+0x11c>)
 8001dde:	4a3d      	ldr	r2, [pc, #244]	; (8001ed4 <MX_RTC_Init+0x120>)
 8001de0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001de2:	4b3b      	ldr	r3, [pc, #236]	; (8001ed0 <MX_RTC_Init+0x11c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001de8:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <MX_RTC_Init+0x11c>)
 8001dea:	227f      	movs	r2, #127	; 0x7f
 8001dec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001dee:	4b38      	ldr	r3, [pc, #224]	; (8001ed0 <MX_RTC_Init+0x11c>)
 8001df0:	22ff      	movs	r2, #255	; 0xff
 8001df2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001df4:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <MX_RTC_Init+0x11c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001dfa:	4b35      	ldr	r3, [pc, #212]	; (8001ed0 <MX_RTC_Init+0x11c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e00:	4b33      	ldr	r3, [pc, #204]	; (8001ed0 <MX_RTC_Init+0x11c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e06:	4832      	ldr	r0, [pc, #200]	; (8001ed0 <MX_RTC_Init+0x11c>)
 8001e08:	f004 fb6c 	bl	80064e4 <HAL_RTC_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001e12:	f000 fb13 	bl	800243c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sTime.Minutes = 0x0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sTime.Seconds = 0x0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e34:	2201      	movs	r2, #1
 8001e36:	4619      	mov	r1, r3
 8001e38:	4825      	ldr	r0, [pc, #148]	; (8001ed0 <MX_RTC_Init+0x11c>)
 8001e3a:	f004 fbdd 	bl	80065f8 <HAL_RTC_SetTime>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001e44:	f000 fafa 	bl	800243c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_JANUARY;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sDate.Date = 0x1;
 8001e54:	2301      	movs	r3, #1
 8001e56:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sDate.Year = 0x0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001e60:	f107 0320 	add.w	r3, r7, #32
 8001e64:	2201      	movs	r2, #1
 8001e66:	4619      	mov	r1, r3
 8001e68:	4819      	ldr	r0, [pc, #100]	; (8001ed0 <MX_RTC_Init+0x11c>)
 8001e6a:	f004 fc7b 	bl	8006764 <HAL_RTC_SetDate>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001e74:	f000 fae2 	bl	800243c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001e94:	2301      	movs	r3, #1
 8001e96:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 8001e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e9c:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	480a      	ldr	r0, [pc, #40]	; (8001ed0 <MX_RTC_Init+0x11c>)
 8001ea6:	f004 fcfd 	bl	80068a4 <HAL_RTC_SetAlarm>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_RTC_Init+0x100>
  {
    Error_Handler();
 8001eb0:	f000 fac4 	bl	800243c <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <MX_RTC_Init+0x11c>)
 8001eba:	f004 fe6a 	bl	8006b92 <HAL_RTCEx_SetWakeUpTimer>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_RTC_Init+0x114>
  {
    Error_Handler();
 8001ec4:	f000 faba 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ec8:	bf00      	nop
 8001eca:	3730      	adds	r7, #48	; 0x30
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	2000a5b8 	.word	0x2000a5b8
 8001ed4:	40002800 	.word	0x40002800

08001ed8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b096      	sub	sp, #88	; 0x58
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ede:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
 8001f04:	611a      	str	r2, [r3, #16]
 8001f06:	615a      	str	r2, [r3, #20]
 8001f08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f00f fb25 	bl	8011560 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f16:	4b44      	ldr	r3, [pc, #272]	; (8002028 <MX_TIM1_Init+0x150>)
 8001f18:	4a44      	ldr	r2, [pc, #272]	; (800202c <MX_TIM1_Init+0x154>)
 8001f1a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f1c:	4b42      	ldr	r3, [pc, #264]	; (8002028 <MX_TIM1_Init+0x150>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f22:	4b41      	ldr	r3, [pc, #260]	; (8002028 <MX_TIM1_Init+0x150>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f28:	4b3f      	ldr	r3, [pc, #252]	; (8002028 <MX_TIM1_Init+0x150>)
 8001f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f2e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f30:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <MX_TIM1_Init+0x150>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f36:	4b3c      	ldr	r3, [pc, #240]	; (8002028 <MX_TIM1_Init+0x150>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f3c:	4b3a      	ldr	r3, [pc, #232]	; (8002028 <MX_TIM1_Init+0x150>)
 8001f3e:	2280      	movs	r2, #128	; 0x80
 8001f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f42:	4839      	ldr	r0, [pc, #228]	; (8002028 <MX_TIM1_Init+0x150>)
 8001f44:	f004 feb9 	bl	8006cba <HAL_TIM_Base_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001f4e:	f000 fa75 	bl	800243c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f56:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4832      	ldr	r0, [pc, #200]	; (8002028 <MX_TIM1_Init+0x150>)
 8001f60:	f005 fa4e 	bl	8007400 <HAL_TIM_ConfigClockSource>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f6a:	f000 fa67 	bl	800243c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f6e:	482e      	ldr	r0, [pc, #184]	; (8002028 <MX_TIM1_Init+0x150>)
 8001f70:	f004 ff60 	bl	8006e34 <HAL_TIM_PWM_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001f7a:	f000 fa5f 	bl	800243c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4826      	ldr	r0, [pc, #152]	; (8002028 <MX_TIM1_Init+0x150>)
 8001f8e:	f005 fe23 	bl	8007bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001f98:	f000 fa50 	bl	800243c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f9c:	2360      	movs	r3, #96	; 0x60
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001fac:	2304      	movs	r3, #4
 8001fae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4819      	ldr	r0, [pc, #100]	; (8002028 <MX_TIM1_Init+0x150>)
 8001fc2:	f005 f95f 	bl	8007284 <HAL_TIM_PWM_ConfigChannel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001fcc:	f000 fa36 	bl	800243c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd4:	2208      	movs	r2, #8
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4813      	ldr	r0, [pc, #76]	; (8002028 <MX_TIM1_Init+0x150>)
 8001fda:	f005 f953 	bl	8007284 <HAL_TIM_PWM_ConfigChannel>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001fe4:	f000 fa2a 	bl	800243c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002000:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	4619      	mov	r1, r3
 800200a:	4807      	ldr	r0, [pc, #28]	; (8002028 <MX_TIM1_Init+0x150>)
 800200c:	f005 fe5e 	bl	8007ccc <HAL_TIMEx_ConfigBreakDeadTime>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002016:	f000 fa11 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800201a:	4803      	ldr	r0, [pc, #12]	; (8002028 <MX_TIM1_Init+0x150>)
 800201c:	f000 fde0 	bl	8002be0 <HAL_TIM_MspPostInit>

}
 8002020:	bf00      	nop
 8002022:	3758      	adds	r7, #88	; 0x58
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	2000a5ec 	.word	0x2000a5ec
 800202c:	40010000 	.word	0x40010000

08002030 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002036:	f107 0308 	add.w	r3, r7, #8
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002044:	463b      	mov	r3, r7
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <MX_TIM2_Init+0x94>)
 800204e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002052:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36-1;
 8002054:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <MX_TIM2_Init+0x94>)
 8002056:	2223      	movs	r2, #35	; 0x23
 8002058:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205a:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <MX_TIM2_Init+0x94>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8002060:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <MX_TIM2_Init+0x94>)
 8002062:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002066:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002068:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <MX_TIM2_Init+0x94>)
 800206a:	2200      	movs	r2, #0
 800206c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <MX_TIM2_Init+0x94>)
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002074:	4813      	ldr	r0, [pc, #76]	; (80020c4 <MX_TIM2_Init+0x94>)
 8002076:	f004 fe20 	bl	8006cba <HAL_TIM_Base_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002080:	f000 f9dc 	bl	800243c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002088:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800208a:	f107 0308 	add.w	r3, r7, #8
 800208e:	4619      	mov	r1, r3
 8002090:	480c      	ldr	r0, [pc, #48]	; (80020c4 <MX_TIM2_Init+0x94>)
 8002092:	f005 f9b5 	bl	8007400 <HAL_TIM_ConfigClockSource>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800209c:	f000 f9ce 	bl	800243c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a0:	2300      	movs	r3, #0
 80020a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020a8:	463b      	mov	r3, r7
 80020aa:	4619      	mov	r1, r3
 80020ac:	4805      	ldr	r0, [pc, #20]	; (80020c4 <MX_TIM2_Init+0x94>)
 80020ae:	f005 fd93 	bl	8007bd8 <HAL_TIMEx_MasterConfigSynchronization>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80020b8:	f000 f9c0 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020bc:	bf00      	nop
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	2000a634 	.word	0x2000a634

080020c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ce:	f107 0308 	add.w	r3, r7, #8
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020dc:	463b      	mov	r3, r7
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020e4:	4b1d      	ldr	r3, [pc, #116]	; (800215c <MX_TIM4_Init+0x94>)
 80020e6:	4a1e      	ldr	r2, [pc, #120]	; (8002160 <MX_TIM4_Init+0x98>)
 80020e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36-1;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <MX_TIM4_Init+0x94>)
 80020ec:	2223      	movs	r2, #35	; 0x23
 80020ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f0:	4b1a      	ldr	r3, [pc, #104]	; (800215c <MX_TIM4_Init+0x94>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <MX_TIM4_Init+0x94>)
 80020f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80020fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020fe:	4b17      	ldr	r3, [pc, #92]	; (800215c <MX_TIM4_Init+0x94>)
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002104:	4b15      	ldr	r3, [pc, #84]	; (800215c <MX_TIM4_Init+0x94>)
 8002106:	2200      	movs	r2, #0
 8002108:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800210a:	4814      	ldr	r0, [pc, #80]	; (800215c <MX_TIM4_Init+0x94>)
 800210c:	f004 fdd5 	bl	8006cba <HAL_TIM_Base_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002116:	f000 f991 	bl	800243c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800211a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800211e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002120:	f107 0308 	add.w	r3, r7, #8
 8002124:	4619      	mov	r1, r3
 8002126:	480d      	ldr	r0, [pc, #52]	; (800215c <MX_TIM4_Init+0x94>)
 8002128:	f005 f96a 	bl	8007400 <HAL_TIM_ConfigClockSource>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002132:	f000 f983 	bl	800243c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800213e:	463b      	mov	r3, r7
 8002140:	4619      	mov	r1, r3
 8002142:	4806      	ldr	r0, [pc, #24]	; (800215c <MX_TIM4_Init+0x94>)
 8002144:	f005 fd48 	bl	8007bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800214e:	f000 f975 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200064e0 	.word	0x200064e0
 8002160:	40000800 	.word	0x40000800

08002164 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
 8002178:	615a      	str	r2, [r3, #20]
 800217a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800217c:	4b1e      	ldr	r3, [pc, #120]	; (80021f8 <MX_TIM10_Init+0x94>)
 800217e:	4a1f      	ldr	r2, [pc, #124]	; (80021fc <MX_TIM10_Init+0x98>)
 8002180:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002182:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <MX_TIM10_Init+0x94>)
 8002184:	2200      	movs	r2, #0
 8002186:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002188:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <MX_TIM10_Init+0x94>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800218e:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <MX_TIM10_Init+0x94>)
 8002190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002194:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002196:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <MX_TIM10_Init+0x94>)
 8002198:	2200      	movs	r2, #0
 800219a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800219c:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <MX_TIM10_Init+0x94>)
 800219e:	2280      	movs	r2, #128	; 0x80
 80021a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80021a2:	4815      	ldr	r0, [pc, #84]	; (80021f8 <MX_TIM10_Init+0x94>)
 80021a4:	f004 fd89 	bl	8006cba <HAL_TIM_Base_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80021ae:	f000 f945 	bl	800243c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80021b2:	4811      	ldr	r0, [pc, #68]	; (80021f8 <MX_TIM10_Init+0x94>)
 80021b4:	f004 fe3e 	bl	8006e34 <HAL_TIM_PWM_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80021be:	f000 f93d 	bl	800243c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021c2:	2360      	movs	r3, #96	; 0x60
 80021c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	2200      	movs	r2, #0
 80021d6:	4619      	mov	r1, r3
 80021d8:	4807      	ldr	r0, [pc, #28]	; (80021f8 <MX_TIM10_Init+0x94>)
 80021da:	f005 f853 	bl	8007284 <HAL_TIM_PWM_ConfigChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80021e4:	f000 f92a 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80021e8:	4803      	ldr	r0, [pc, #12]	; (80021f8 <MX_TIM10_Init+0x94>)
 80021ea:	f000 fcf9 	bl	8002be0 <HAL_TIM_MspPostInit>

}
 80021ee:	bf00      	nop
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20006570 	.word	0x20006570
 80021fc:	40014400 	.word	0x40014400

08002200 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002206:	463b      	mov	r3, r7
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002212:	4b16      	ldr	r3, [pc, #88]	; (800226c <MX_TIM12_Init+0x6c>)
 8002214:	4a16      	ldr	r2, [pc, #88]	; (8002270 <MX_TIM12_Init+0x70>)
 8002216:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1000;
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <MX_TIM12_Init+0x6c>)
 800221a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800221e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <MX_TIM12_Init+0x6c>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 36000;
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <MX_TIM12_Init+0x6c>)
 8002228:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800222c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800222e:	4b0f      	ldr	r3, [pc, #60]	; (800226c <MX_TIM12_Init+0x6c>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002234:	4b0d      	ldr	r3, [pc, #52]	; (800226c <MX_TIM12_Init+0x6c>)
 8002236:	2200      	movs	r2, #0
 8002238:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800223a:	480c      	ldr	r0, [pc, #48]	; (800226c <MX_TIM12_Init+0x6c>)
 800223c:	f004 fd3d 	bl	8006cba <HAL_TIM_Base_Init>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 8002246:	f000 f8f9 	bl	800243c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800224a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800224e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002250:	463b      	mov	r3, r7
 8002252:	4619      	mov	r1, r3
 8002254:	4805      	ldr	r0, [pc, #20]	; (800226c <MX_TIM12_Init+0x6c>)
 8002256:	f005 f8d3 	bl	8007400 <HAL_TIM_ConfigClockSource>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8002260:	f000 f8ec 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	2000a67c 	.word	0x2000a67c
 8002270:	40001800 	.word	0x40001800

08002274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08c      	sub	sp, #48	; 0x30
 8002278:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227a:	f107 031c 	add.w	r3, r7, #28
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]
 8002286:	60da      	str	r2, [r3, #12]
 8002288:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	61bb      	str	r3, [r7, #24]
 800228e:	4b58      	ldr	r3, [pc, #352]	; (80023f0 <MX_GPIO_Init+0x17c>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a57      	ldr	r2, [pc, #348]	; (80023f0 <MX_GPIO_Init+0x17c>)
 8002294:	f043 0310 	orr.w	r3, r3, #16
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b55      	ldr	r3, [pc, #340]	; (80023f0 <MX_GPIO_Init+0x17c>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	61bb      	str	r3, [r7, #24]
 80022a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	4b51      	ldr	r3, [pc, #324]	; (80023f0 <MX_GPIO_Init+0x17c>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a50      	ldr	r2, [pc, #320]	; (80023f0 <MX_GPIO_Init+0x17c>)
 80022b0:	f043 0320 	orr.w	r3, r3, #32
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
 80022b6:	4b4e      	ldr	r3, [pc, #312]	; (80023f0 <MX_GPIO_Init+0x17c>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	4b4a      	ldr	r3, [pc, #296]	; (80023f0 <MX_GPIO_Init+0x17c>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a49      	ldr	r2, [pc, #292]	; (80023f0 <MX_GPIO_Init+0x17c>)
 80022cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <MX_GPIO_Init+0x17c>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	4b43      	ldr	r3, [pc, #268]	; (80023f0 <MX_GPIO_Init+0x17c>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a42      	ldr	r2, [pc, #264]	; (80023f0 <MX_GPIO_Init+0x17c>)
 80022e8:	f043 0304 	orr.w	r3, r3, #4
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b40      	ldr	r3, [pc, #256]	; (80023f0 <MX_GPIO_Init+0x17c>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	4b3c      	ldr	r3, [pc, #240]	; (80023f0 <MX_GPIO_Init+0x17c>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	4a3b      	ldr	r2, [pc, #236]	; (80023f0 <MX_GPIO_Init+0x17c>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6313      	str	r3, [r2, #48]	; 0x30
 800230a:	4b39      	ldr	r3, [pc, #228]	; (80023f0 <MX_GPIO_Init+0x17c>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	607b      	str	r3, [r7, #4]
 800231a:	4b35      	ldr	r3, [pc, #212]	; (80023f0 <MX_GPIO_Init+0x17c>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a34      	ldr	r2, [pc, #208]	; (80023f0 <MX_GPIO_Init+0x17c>)
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <MX_GPIO_Init+0x17c>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 8002332:	2201      	movs	r2, #1
 8002334:	21fc      	movs	r1, #252	; 0xfc
 8002336:	482f      	ldr	r0, [pc, #188]	; (80023f4 <MX_GPIO_Init+0x180>)
 8002338:	f001 fe11 	bl	8003f5e <HAL_GPIO_WritePin>
                          |ph_down_enable_Pin|nutrient_enable_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800233c:	2200      	movs	r2, #0
 800233e:	2104      	movs	r1, #4
 8002340:	482d      	ldr	r0, [pc, #180]	; (80023f8 <MX_GPIO_Init+0x184>)
 8002342:	f001 fe0c 	bl	8003f5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(water_temp_GPIO_Port, water_temp_Pin, GPIO_PIN_RESET);
 8002346:	2200      	movs	r2, #0
 8002348:	2104      	movs	r1, #4
 800234a:	482c      	ldr	r0, [pc, #176]	; (80023fc <MX_GPIO_Init+0x188>)
 800234c:	f001 fe07 	bl	8003f5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, water_heat_cool_Pin|grow_light_Pin|water_pump_enable_Pin|water_heat_cool_enable_Pin, GPIO_PIN_RESET);
 8002350:	2200      	movs	r2, #0
 8002352:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8002356:	4827      	ldr	r0, [pc, #156]	; (80023f4 <MX_GPIO_Init+0x180>)
 8002358:	f001 fe01 	bl	8003f5e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ph_up_pump_Pin ph_down_pump_Pin nutrient_pump_Pin ph_up_enable_Pin
                           ph_down_enable_Pin nutrient_enable_Pin water_heat_cool_Pin */
  GPIO_InitStruct.Pin = ph_up_pump_Pin|ph_down_pump_Pin|nutrient_pump_Pin|ph_up_enable_Pin
 800235c:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 8002360:	61fb      	str	r3, [r7, #28]
                          |ph_down_enable_Pin|nutrient_enable_Pin|water_heat_cool_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002362:	2301      	movs	r3, #1
 8002364:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236a:	2303      	movs	r3, #3
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800236e:	f107 031c 	add.w	r3, r7, #28
 8002372:	4619      	mov	r1, r3
 8002374:	481f      	ldr	r0, [pc, #124]	; (80023f4 <MX_GPIO_Init+0x180>)
 8002376:	f001 fc3d 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800237a:	2304      	movs	r3, #4
 800237c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237e:	2301      	movs	r3, #1
 8002380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800238a:	f107 031c 	add.w	r3, r7, #28
 800238e:	4619      	mov	r1, r3
 8002390:	4819      	ldr	r0, [pc, #100]	; (80023f8 <MX_GPIO_Init+0x184>)
 8002392:	f001 fc2f 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : water_temp_Pin */
  GPIO_InitStruct.Pin = water_temp_Pin;
 8002396:	2304      	movs	r3, #4
 8002398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239a:	2301      	movs	r3, #1
 800239c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a2:	2300      	movs	r3, #0
 80023a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(water_temp_GPIO_Port, &GPIO_InitStruct);
 80023a6:	f107 031c 	add.w	r3, r7, #28
 80023aa:	4619      	mov	r1, r3
 80023ac:	4813      	ldr	r0, [pc, #76]	; (80023fc <MX_GPIO_Init+0x188>)
 80023ae:	f001 fc21 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : grow_light_Pin water_pump_enable_Pin water_heat_cool_enable_Pin */
  GPIO_InitStruct.Pin = grow_light_Pin|water_pump_enable_Pin|water_heat_cool_enable_Pin;
 80023b2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80023b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b8:	2301      	movs	r3, #1
 80023ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	2300      	movs	r3, #0
 80023c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023c4:	f107 031c 	add.w	r3, r7, #28
 80023c8:	4619      	mov	r1, r3
 80023ca:	480a      	ldr	r0, [pc, #40]	; (80023f4 <MX_GPIO_Init+0x180>)
 80023cc:	f001 fc12 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : water_level_Pin */
  GPIO_InitStruct.Pin = water_level_Pin;
 80023d0:	2302      	movs	r3, #2
 80023d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d4:	2300      	movs	r3, #0
 80023d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(water_level_GPIO_Port, &GPIO_InitStruct);
 80023dc:	f107 031c 	add.w	r3, r7, #28
 80023e0:	4619      	mov	r1, r3
 80023e2:	4804      	ldr	r0, [pc, #16]	; (80023f4 <MX_GPIO_Init+0x180>)
 80023e4:	f001 fc06 	bl	8003bf4 <HAL_GPIO_Init>

}
 80023e8:	bf00      	nop
 80023ea:	3730      	adds	r7, #48	; 0x30
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40020800 	.word	0x40020800
 80023fc:	40020400 	.word	0x40020400

08002400 <StartBalanceWater>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBalanceWater */
void StartBalanceWater(void const * argument)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8002408:	f00e fc28 	bl	8010c5c <MX_USB_HOST_Init>
  /* Infinite loop */
  for(;;)
  {

	 // MX_USB_HOST_Process();
	  systemControl();
 800240c:	f7ff fb92 	bl	8001b34 <systemControl>
    osDelay(1);
 8002410:	2001      	movs	r0, #1
 8002412:	f00b fe76 	bl	800e102 <osDelay>
	  systemControl();
 8002416:	e7f9      	b.n	800240c <StartBalanceWater+0xc>

08002418 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a04      	ldr	r2, [pc, #16]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d101      	bne.n	800242e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800242a:	f000 ff19 	bl	8003260 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40001000 	.word	0x40001000

0800243c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002440:	b672      	cpsid	i
}
 8002442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002444:	e7fe      	b.n	8002444 <Error_Handler+0x8>
	...

08002448 <read_voltage>:
float value;
float ph_voltage_buffer[30] = {0};
float pH_low_cal = 2021.0, pH_mid_cal = 1523.0, pH_high_cal= 1135.0, low_ph_solution = 4.0, mid_ph_solution = 6.86, High_ph_solution = 9.18;
float slope = 0, ph_Value_Buf = 0;
float read_voltage()
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
	ph_Value_Buf = 0;
 800244e:	4b3a      	ldr	r3, [pc, #232]	; (8002538 <read_voltage+0xf0>)
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<32; i++)
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	e019      	b.n	8002490 <read_voltage+0x48>
	{
		get_nutrient_ph_value();
 800245c:	f000 fa92 	bl	8002984 <get_nutrient_ph_value>
		value = nutrient_ph_values[0];
 8002460:	4b36      	ldr	r3, [pc, #216]	; (800253c <read_voltage+0xf4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe fc7f 	bl	8000d68 <__aeabi_ui2f>
 800246a:	4603      	mov	r3, r0
 800246c:	4a34      	ldr	r2, [pc, #208]	; (8002540 <read_voltage+0xf8>)
 800246e:	6013      	str	r3, [r2, #0]
		if(i>1) ph_voltage_buffer[i-2] = value;   // skip first 2 samples for accuracy
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b01      	cmp	r3, #1
 8002474:	dd06      	ble.n	8002484 <read_voltage+0x3c>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3b02      	subs	r3, #2
 800247a:	4a31      	ldr	r2, [pc, #196]	; (8002540 <read_voltage+0xf8>)
 800247c:	6812      	ldr	r2, [r2, #0]
 800247e:	4931      	ldr	r1, [pc, #196]	; (8002544 <read_voltage+0xfc>)
 8002480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		 osDelay(1);
 8002484:	2001      	movs	r0, #1
 8002486:	f00b fe3c 	bl	800e102 <osDelay>
	for(int i = 0; i<32; i++)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3301      	adds	r3, #1
 800248e:	607b      	str	r3, [r7, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b1f      	cmp	r3, #31
 8002494:	dde2      	ble.n	800245c <read_voltage+0x14>
	}
	for(int j=0;j<30;j++) ph_Value_Buf = ph_voltage_buffer[j] + ph_Value_Buf;
 8002496:	2300      	movs	r3, #0
 8002498:	603b      	str	r3, [r7, #0]
 800249a:	e010      	b.n	80024be <read_voltage+0x76>
 800249c:	4a29      	ldr	r2, [pc, #164]	; (8002544 <read_voltage+0xfc>)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a4:	4a24      	ldr	r2, [pc, #144]	; (8002538 <read_voltage+0xf0>)
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	4611      	mov	r1, r2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fbac 	bl	8000c08 <__addsf3>
 80024b0:	4603      	mov	r3, r0
 80024b2:	461a      	mov	r2, r3
 80024b4:	4b20      	ldr	r3, [pc, #128]	; (8002538 <read_voltage+0xf0>)
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	3301      	adds	r3, #1
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b1d      	cmp	r3, #29
 80024c2:	ddeb      	ble.n	800249c <read_voltage+0x54>
	ph_voltage_average = ph_Value_Buf/30;
 80024c4:	4b1c      	ldr	r3, [pc, #112]	; (8002538 <read_voltage+0xf0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	491f      	ldr	r1, [pc, #124]	; (8002548 <read_voltage+0x100>)
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe fd58 	bl	8000f80 <__aeabi_fdiv>
 80024d0:	4603      	mov	r3, r0
 80024d2:	461a      	mov	r2, r3
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <read_voltage+0x104>)
 80024d6:	601a      	str	r2, [r3, #0]
	mili_Voltage_Buf = ((ph_voltage_average/4096.0)*3.3)*1000;
 80024d8:	4b1c      	ldr	r3, [pc, #112]	; (800254c <read_voltage+0x104>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fd ffed 	bl	80004bc <__aeabi_f2d>
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <read_voltage+0x108>)
 80024e8:	f7fe f96a 	bl	80007c0 <__aeabi_ddiv>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	a30e      	add	r3, pc, #56	; (adr r3, 8002530 <read_voltage+0xe8>)
 80024f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fa:	f7fe f837 	bl	800056c <__aeabi_dmul>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <read_voltage+0x10c>)
 800250c:	f7fe f82e 	bl	800056c <__aeabi_dmul>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4610      	mov	r0, r2
 8002516:	4619      	mov	r1, r3
 8002518:	f7fe fb20 	bl	8000b5c <__aeabi_d2f>
 800251c:	4603      	mov	r3, r0
 800251e:	4a0e      	ldr	r2, [pc, #56]	; (8002558 <read_voltage+0x110>)
 8002520:	6013      	str	r3, [r2, #0]
	return mili_Voltage_Buf;
 8002522:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <read_voltage+0x110>)
 8002524:	681b      	ldr	r3, [r3, #0]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	66666666 	.word	0x66666666
 8002534:	400a6666 	.word	0x400a6666
 8002538:	20002640 	.word	0x20002640
 800253c:	200025b4 	.word	0x200025b4
 8002540:	2000a6c4 	.word	0x2000a6c4
 8002544:	200025c4 	.word	0x200025c4
 8002548:	41f00000 	.word	0x41f00000
 800254c:	200025c0 	.word	0x200025c0
 8002550:	40b00000 	.word	0x40b00000
 8002554:	408f4000 	.word	0x408f4000
 8002558:	200025bc 	.word	0x200025bc

0800255c <convert_ph>:

float convert_ph(float voltage_mV)	// converts voltage to pH value based on three point calibration
{
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	if(voltage_mV>pH_mid_cal)
 8002564:	4b3e      	ldr	r3, [pc, #248]	; (8002660 <convert_ph+0x104>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4619      	mov	r1, r3
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7fe fe10 	bl	8001190 <__aeabi_fcmpgt>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d032      	beq.n	80025dc <convert_ph+0x80>
	{
		slope = (mid_ph_solution-low_ph_solution)/(pH_mid_cal-pH_low_cal);	// if the solution is Acidic calculate the slope of the (calibration_ph_Value_Buf vs calibration_milimvoltage) line  bases on calibration parameters
 8002576:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <convert_ph+0x108>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a3b      	ldr	r2, [pc, #236]	; (8002668 <convert_ph+0x10c>)
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fb3f 	bl	8000c04 <__aeabi_fsub>
 8002586:	4603      	mov	r3, r0
 8002588:	461c      	mov	r4, r3
 800258a:	4b35      	ldr	r3, [pc, #212]	; (8002660 <convert_ph+0x104>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a37      	ldr	r2, [pc, #220]	; (800266c <convert_ph+0x110>)
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe fb35 	bl	8000c04 <__aeabi_fsub>
 800259a:	4603      	mov	r3, r0
 800259c:	4619      	mov	r1, r3
 800259e:	4620      	mov	r0, r4
 80025a0:	f7fe fcee 	bl	8000f80 <__aeabi_fdiv>
 80025a4:	4603      	mov	r3, r0
 80025a6:	461a      	mov	r2, r3
 80025a8:	4b31      	ldr	r3, [pc, #196]	; (8002670 <convert_ph+0x114>)
 80025aa:	601a      	str	r2, [r3, #0]
		return (slope*(voltage_mV - pH_low_cal)+low_ph_solution);
 80025ac:	4b2f      	ldr	r3, [pc, #188]	; (800266c <convert_ph+0x110>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4619      	mov	r1, r3
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7fe fb26 	bl	8000c04 <__aeabi_fsub>
 80025b8:	4603      	mov	r3, r0
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <convert_ph+0x114>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4619      	mov	r1, r3
 80025c2:	4610      	mov	r0, r2
 80025c4:	f7fe fc28 	bl	8000e18 <__aeabi_fmul>
 80025c8:	4603      	mov	r3, r0
 80025ca:	461a      	mov	r2, r3
 80025cc:	4b26      	ldr	r3, [pc, #152]	; (8002668 <convert_ph+0x10c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4619      	mov	r1, r3
 80025d2:	4610      	mov	r0, r2
 80025d4:	f7fe fb18 	bl	8000c08 <__addsf3>
 80025d8:	4603      	mov	r3, r0
 80025da:	e03d      	b.n	8002658 <convert_ph+0xfc>
	}
	else if(voltage_mV<=pH_mid_cal)
 80025dc:	4b20      	ldr	r3, [pc, #128]	; (8002660 <convert_ph+0x104>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4619      	mov	r1, r3
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fe fdc0 	bl	8001168 <__aeabi_fcmple>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d032      	beq.n	8002654 <convert_ph+0xf8>
	{
		slope = (High_ph_solution-mid_ph_solution)/(pH_high_cal-pH_mid_cal);// if the solution is Basic calculate the slope bases just like we did above but for the higher range
 80025ee:	4b21      	ldr	r3, [pc, #132]	; (8002674 <convert_ph+0x118>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a1c      	ldr	r2, [pc, #112]	; (8002664 <convert_ph+0x108>)
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	4611      	mov	r1, r2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fe fb03 	bl	8000c04 <__aeabi_fsub>
 80025fe:	4603      	mov	r3, r0
 8002600:	461c      	mov	r4, r3
 8002602:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <convert_ph+0x11c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a16      	ldr	r2, [pc, #88]	; (8002660 <convert_ph+0x104>)
 8002608:	6812      	ldr	r2, [r2, #0]
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe faf9 	bl	8000c04 <__aeabi_fsub>
 8002612:	4603      	mov	r3, r0
 8002614:	4619      	mov	r1, r3
 8002616:	4620      	mov	r0, r4
 8002618:	f7fe fcb2 	bl	8000f80 <__aeabi_fdiv>
 800261c:	4603      	mov	r3, r0
 800261e:	461a      	mov	r2, r3
 8002620:	4b13      	ldr	r3, [pc, #76]	; (8002670 <convert_ph+0x114>)
 8002622:	601a      	str	r2, [r3, #0]
		return (slope*(voltage_mV - pH_mid_cal)+mid_ph_solution);
 8002624:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <convert_ph+0x104>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4619      	mov	r1, r3
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7fe faea 	bl	8000c04 <__aeabi_fsub>
 8002630:	4603      	mov	r3, r0
 8002632:	461a      	mov	r2, r3
 8002634:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <convert_ph+0x114>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4619      	mov	r1, r3
 800263a:	4610      	mov	r0, r2
 800263c:	f7fe fbec 	bl	8000e18 <__aeabi_fmul>
 8002640:	4603      	mov	r3, r0
 8002642:	461a      	mov	r2, r3
 8002644:	4b07      	ldr	r3, [pc, #28]	; (8002664 <convert_ph+0x108>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4619      	mov	r1, r3
 800264a:	4610      	mov	r0, r2
 800264c:	f7fe fadc 	bl	8000c08 <__addsf3>
 8002650:	4603      	mov	r3, r0
 8002652:	e001      	b.n	8002658 <convert_ph+0xfc>
	}
	return 0;
 8002654:	f04f 0300 	mov.w	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	bd90      	pop	{r4, r7, pc}
 8002660:	20000014 	.word	0x20000014
 8002664:	20000020 	.word	0x20000020
 8002668:	2000001c 	.word	0x2000001c
 800266c:	20000010 	.word	0x20000010
 8002670:	2000263c 	.word	0x2000263c
 8002674:	20000024 	.word	0x20000024
 8002678:	20000018 	.word	0x20000018

0800267c <readWaterTemp>:
uint16_t TEMP;
double Temperature = 0;
double Humidity = 0;

double readWaterTemp(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
	 DWT_Delay_Init();
 8002680:	f000 fc5a 	bl	8002f38 <DWT_Delay_Init>

	 //Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set the pin as output
	 HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 1);
 8002684:	2201      	movs	r2, #1
 8002686:	2104      	movs	r1, #4
 8002688:	4829      	ldr	r0, [pc, #164]	; (8002730 <readWaterTemp+0xb4>)
 800268a:	f001 fc68 	bl	8003f5e <HAL_GPIO_WritePin>
	 DWT_Delay_us(100);
 800268e:	2064      	movs	r0, #100	; 0x64
 8002690:	f000 fc82 	bl	8002f98 <DWT_Delay_us>
	 Presence = DS18B20_Start();
 8002694:	f000 fca8 	bl	8002fe8 <DS18B20_Start>
 8002698:	4603      	mov	r3, r0
 800269a:	461a      	mov	r2, r3
 800269c:	4b25      	ldr	r3, [pc, #148]	; (8002734 <readWaterTemp+0xb8>)
 800269e:	701a      	strb	r2, [r3, #0]

	 DWT_Delay_us (300);
 80026a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026a4:	f000 fc78 	bl	8002f98 <DWT_Delay_us>
	 DS18B20_Write (0xCC);  // skip ROM
 80026a8:	20cc      	movs	r0, #204	; 0xcc
 80026aa:	f000 fccd 	bl	8003048 <DS18B20_Write>
	 DS18B20_Write (0x44);  // convert t
 80026ae:	2044      	movs	r0, #68	; 0x44
 80026b0:	f000 fcca 	bl	8003048 <DS18B20_Write>

	 Presence = DS18B20_Start();
 80026b4:	f000 fc98 	bl	8002fe8 <DS18B20_Start>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <readWaterTemp+0xb8>)
 80026be:	701a      	strb	r2, [r3, #0]
	 DWT_Delay_us (300);
 80026c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026c4:	f000 fc68 	bl	8002f98 <DWT_Delay_us>
	 DS18B20_Write (0xCC);  // skip ROM
 80026c8:	20cc      	movs	r0, #204	; 0xcc
 80026ca:	f000 fcbd 	bl	8003048 <DS18B20_Write>
	 DS18B20_Write (0xBE);  // Read Scratch-pad
 80026ce:	20be      	movs	r0, #190	; 0xbe
 80026d0:	f000 fcba 	bl	8003048 <DS18B20_Write>

	 Temp_byte1 = DS18B20_Read();
 80026d4:	f000 fcfe 	bl	80030d4 <DS18B20_Read>
 80026d8:	4603      	mov	r3, r0
 80026da:	461a      	mov	r2, r3
 80026dc:	4b16      	ldr	r3, [pc, #88]	; (8002738 <readWaterTemp+0xbc>)
 80026de:	701a      	strb	r2, [r3, #0]
	 Temp_byte2 = DS18B20_Read();
 80026e0:	f000 fcf8 	bl	80030d4 <DS18B20_Read>
 80026e4:	4603      	mov	r3, r0
 80026e6:	461a      	mov	r2, r3
 80026e8:	4b14      	ldr	r3, [pc, #80]	; (800273c <readWaterTemp+0xc0>)
 80026ea:	701a      	strb	r2, [r3, #0]
	 TEMP = (Temp_byte2<<8)|Temp_byte1;
 80026ec:	4b13      	ldr	r3, [pc, #76]	; (800273c <readWaterTemp+0xc0>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	b21a      	sxth	r2, r3
 80026f4:	4b10      	ldr	r3, [pc, #64]	; (8002738 <readWaterTemp+0xbc>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	b21b      	sxth	r3, r3
 80026fa:	4313      	orrs	r3, r2
 80026fc:	b21b      	sxth	r3, r3
 80026fe:	b29a      	uxth	r2, r3
 8002700:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <readWaterTemp+0xc4>)
 8002702:	801a      	strh	r2, [r3, #0]
	 Temperature = (double)TEMP/16;
 8002704:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <readWaterTemp+0xc4>)
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd feb5 	bl	8000478 <__aeabi_ui2d>
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <readWaterTemp+0xc8>)
 8002714:	f7fe f854 	bl	80007c0 <__aeabi_ddiv>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	490a      	ldr	r1, [pc, #40]	; (8002748 <readWaterTemp+0xcc>)
 800271e:	e9c1 2300 	strd	r2, r3, [r1]
	 return Temperature;
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <readWaterTemp+0xcc>)
 8002724:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8002728:	4610      	mov	r0, r2
 800272a:	4619      	mov	r1, r3
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40020400 	.word	0x40020400
 8002734:	20002644 	.word	0x20002644
 8002738:	2000a744 	.word	0x2000a744
 800273c:	2000a7c4 	.word	0x2000a7c4
 8002740:	2000a6c8 	.word	0x2000a6c8
 8002744:	40300000 	.word	0x40300000
 8002748:	20002648 	.word	0x20002648
 800274c:	00000000 	.word	0x00000000

08002750 <readWaterTDS>:
#define SCOUNT  30           	// sum of sample point
int nutrientBuffer[SCOUNT],analogBufferTemp[SCOUNT], copyIndex = 0;  // store the analog value in the array, read from ADC
float averageVoltage = 0,tdsValue = 0,temperature = 25,compensationCoefficient = 0,compensationVolatge = 0;

float readWaterTDS() // Get nutrient level
{
 8002750:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
	for(int i = 0; i<SCOUNT+10; i++)
 8002758:	2300      	movs	r3, #0
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	e012      	b.n	8002784 <readWaterTDS+0x34>
	{
		get_nutrient_ph_value();
 800275e:	f000 f911 	bl	8002984 <get_nutrient_ph_value>
		if(i>9)nutrientBuffer[i-10] = nutrient_ph_values[1];  		 // skip first 10 values since they are way off (pH: position 0 Nutrient: position 1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b09      	cmp	r3, #9
 8002766:	dd07      	ble.n	8002778 <readWaterTDS+0x28>
 8002768:	4b79      	ldr	r3, [pc, #484]	; (8002950 <readWaterTDS+0x200>)
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3b0a      	subs	r3, #10
 8002770:	4611      	mov	r1, r2
 8002772:	4a78      	ldr	r2, [pc, #480]	; (8002954 <readWaterTDS+0x204>)
 8002774:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	     osDelay(1);
 8002778:	2001      	movs	r0, #1
 800277a:	f00b fcc2 	bl	800e102 <osDelay>
	for(int i = 0; i<SCOUNT+10; i++)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3301      	adds	r3, #1
 8002782:	607b      	str	r3, [r7, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b27      	cmp	r3, #39	; 0x27
 8002788:	dde9      	ble.n	800275e <readWaterTDS+0xe>
	}

    for(copyIndex=0;copyIndex<SCOUNT;copyIndex++) analogBufferTemp[copyIndex]= nutrientBuffer[copyIndex];
 800278a:	4b73      	ldr	r3, [pc, #460]	; (8002958 <readWaterTDS+0x208>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e00e      	b.n	80027b0 <readWaterTDS+0x60>
 8002792:	4b71      	ldr	r3, [pc, #452]	; (8002958 <readWaterTDS+0x208>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	4b70      	ldr	r3, [pc, #448]	; (8002958 <readWaterTDS+0x208>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	496e      	ldr	r1, [pc, #440]	; (8002954 <readWaterTDS+0x204>)
 800279c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80027a0:	496e      	ldr	r1, [pc, #440]	; (800295c <readWaterTDS+0x20c>)
 80027a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80027a6:	4b6c      	ldr	r3, [pc, #432]	; (8002958 <readWaterTDS+0x208>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3301      	adds	r3, #1
 80027ac:	4a6a      	ldr	r2, [pc, #424]	; (8002958 <readWaterTDS+0x208>)
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4b69      	ldr	r3, [pc, #420]	; (8002958 <readWaterTDS+0x208>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b1d      	cmp	r3, #29
 80027b6:	ddec      	ble.n	8002792 <readWaterTDS+0x42>
    averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)0.000805664; 																					// read the analog value more stable by averaging and convert to voltage value
 80027b8:	211e      	movs	r1, #30
 80027ba:	4868      	ldr	r0, [pc, #416]	; (800295c <readWaterTDS+0x20c>)
 80027bc:	f7ff f810 	bl	80017e0 <getMedianNum>
 80027c0:	4603      	mov	r3, r0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe fad4 	bl	8000d70 <__aeabi_i2f>
 80027c8:	4603      	mov	r3, r0
 80027ca:	4965      	ldr	r1, [pc, #404]	; (8002960 <readWaterTDS+0x210>)
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fe fb23 	bl	8000e18 <__aeabi_fmul>
 80027d2:	4603      	mov	r3, r0
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b63      	ldr	r3, [pc, #396]	; (8002964 <readWaterTDS+0x214>)
 80027d8:	601a      	str	r2, [r3, #0]
    compensationCoefficient=1.0+0.02*(temperature-25.0);   																								    //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
 80027da:	4b63      	ldr	r3, [pc, #396]	; (8002968 <readWaterTDS+0x218>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fd fe6c 	bl	80004bc <__aeabi_f2d>
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	4b60      	ldr	r3, [pc, #384]	; (800296c <readWaterTDS+0x21c>)
 80027ea:	f7fd fd07 	bl	80001fc <__aeabi_dsub>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4610      	mov	r0, r2
 80027f4:	4619      	mov	r1, r3
 80027f6:	a34e      	add	r3, pc, #312	; (adr r3, 8002930 <readWaterTDS+0x1e0>)
 80027f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fc:	f7fd feb6 	bl	800056c <__aeabi_dmul>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	4610      	mov	r0, r2
 8002806:	4619      	mov	r1, r3
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	4b58      	ldr	r3, [pc, #352]	; (8002970 <readWaterTDS+0x220>)
 800280e:	f7fd fcf7 	bl	8000200 <__adddf3>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4610      	mov	r0, r2
 8002818:	4619      	mov	r1, r3
 800281a:	f7fe f99f 	bl	8000b5c <__aeabi_d2f>
 800281e:	4603      	mov	r3, r0
 8002820:	4a54      	ldr	r2, [pc, #336]	; (8002974 <readWaterTDS+0x224>)
 8002822:	6013      	str	r3, [r2, #0]
    compensationVolatge=averageVoltage/compensationCoefficient;  																								//temperature compensation
 8002824:	4b4f      	ldr	r3, [pc, #316]	; (8002964 <readWaterTDS+0x214>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a52      	ldr	r2, [pc, #328]	; (8002974 <readWaterTDS+0x224>)
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	4611      	mov	r1, r2
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe fba6 	bl	8000f80 <__aeabi_fdiv>
 8002834:	4603      	mov	r3, r0
 8002836:	461a      	mov	r2, r3
 8002838:	4b4f      	ldr	r3, [pc, #316]	; (8002978 <readWaterTDS+0x228>)
 800283a:	601a      	str	r2, [r3, #0]
    tdsValue=(133.42*compensationVolatge*compensationVolatge*compensationVolatge - 255.86*compensationVolatge*compensationVolatge + 857.39*compensationVolatge)*0.5; //convert voltage value to tds value
 800283c:	4b4e      	ldr	r3, [pc, #312]	; (8002978 <readWaterTDS+0x228>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7fd fe3b 	bl	80004bc <__aeabi_f2d>
 8002846:	a33c      	add	r3, pc, #240	; (adr r3, 8002938 <readWaterTDS+0x1e8>)
 8002848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284c:	f7fd fe8e 	bl	800056c <__aeabi_dmul>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4614      	mov	r4, r2
 8002856:	461d      	mov	r5, r3
 8002858:	4b47      	ldr	r3, [pc, #284]	; (8002978 <readWaterTDS+0x228>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7fd fe2d 	bl	80004bc <__aeabi_f2d>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4620      	mov	r0, r4
 8002868:	4629      	mov	r1, r5
 800286a:	f7fd fe7f 	bl	800056c <__aeabi_dmul>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4614      	mov	r4, r2
 8002874:	461d      	mov	r5, r3
 8002876:	4b40      	ldr	r3, [pc, #256]	; (8002978 <readWaterTDS+0x228>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fd fe1e 	bl	80004bc <__aeabi_f2d>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4620      	mov	r0, r4
 8002886:	4629      	mov	r1, r5
 8002888:	f7fd fe70 	bl	800056c <__aeabi_dmul>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4614      	mov	r4, r2
 8002892:	461d      	mov	r5, r3
 8002894:	4b38      	ldr	r3, [pc, #224]	; (8002978 <readWaterTDS+0x228>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f7fd fe0f 	bl	80004bc <__aeabi_f2d>
 800289e:	a328      	add	r3, pc, #160	; (adr r3, 8002940 <readWaterTDS+0x1f0>)
 80028a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a4:	f7fd fe62 	bl	800056c <__aeabi_dmul>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4690      	mov	r8, r2
 80028ae:	4699      	mov	r9, r3
 80028b0:	4b31      	ldr	r3, [pc, #196]	; (8002978 <readWaterTDS+0x228>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fd fe01 	bl	80004bc <__aeabi_f2d>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4640      	mov	r0, r8
 80028c0:	4649      	mov	r1, r9
 80028c2:	f7fd fe53 	bl	800056c <__aeabi_dmul>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4620      	mov	r0, r4
 80028cc:	4629      	mov	r1, r5
 80028ce:	f7fd fc95 	bl	80001fc <__aeabi_dsub>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4614      	mov	r4, r2
 80028d8:	461d      	mov	r5, r3
 80028da:	4b27      	ldr	r3, [pc, #156]	; (8002978 <readWaterTDS+0x228>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fd fdec 	bl	80004bc <__aeabi_f2d>
 80028e4:	a318      	add	r3, pc, #96	; (adr r3, 8002948 <readWaterTDS+0x1f8>)
 80028e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ea:	f7fd fe3f 	bl	800056c <__aeabi_dmul>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4620      	mov	r0, r4
 80028f4:	4629      	mov	r1, r5
 80028f6:	f7fd fc83 	bl	8000200 <__adddf3>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	4610      	mov	r0, r2
 8002900:	4619      	mov	r1, r3
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	4b1d      	ldr	r3, [pc, #116]	; (800297c <readWaterTDS+0x22c>)
 8002908:	f7fd fe30 	bl	800056c <__aeabi_dmul>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4610      	mov	r0, r2
 8002912:	4619      	mov	r1, r3
 8002914:	f7fe f922 	bl	8000b5c <__aeabi_d2f>
 8002918:	4603      	mov	r3, r0
 800291a:	4a19      	ldr	r2, [pc, #100]	; (8002980 <readWaterTDS+0x230>)
 800291c:	6013      	str	r3, [r2, #0]
    return tdsValue;
 800291e:	4b18      	ldr	r3, [pc, #96]	; (8002980 <readWaterTDS+0x230>)
 8002920:	681b      	ldr	r3, [r3, #0]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800292c:	f3af 8000 	nop.w
 8002930:	47ae147b 	.word	0x47ae147b
 8002934:	3f947ae1 	.word	0x3f947ae1
 8002938:	a3d70a3d 	.word	0xa3d70a3d
 800293c:	4060ad70 	.word	0x4060ad70
 8002940:	1eb851ec 	.word	0x1eb851ec
 8002944:	406ffb85 	.word	0x406ffb85
 8002948:	b851eb85 	.word	0xb851eb85
 800294c:	408acb1e 	.word	0x408acb1e
 8002950:	200025b4 	.word	0x200025b4
 8002954:	2000a6cc 	.word	0x2000a6cc
 8002958:	20002650 	.word	0x20002650
 800295c:	2000a74c 	.word	0x2000a74c
 8002960:	3a533332 	.word	0x3a533332
 8002964:	20002654 	.word	0x20002654
 8002968:	20000028 	.word	0x20000028
 800296c:	40390000 	.word	0x40390000
 8002970:	3ff00000 	.word	0x3ff00000
 8002974:	2000265c 	.word	0x2000265c
 8002978:	20002660 	.word	0x20002660
 800297c:	3fe00000 	.word	0x3fe00000
 8002980:	20002658 	.word	0x20002658

08002984 <get_nutrient_ph_value>:

void get_nutrient_ph_value()	// gets nutrient and ph values from the ADC and places it in a buffer
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
	nutrient_ph_values[0] = get_ADC_values(1);
 8002988:	2001      	movs	r0, #1
 800298a:	f7fe fddf 	bl	800154c <get_ADC_values>
 800298e:	4603      	mov	r3, r0
 8002990:	4618      	mov	r0, r3
 8002992:	f7fe fc07 	bl	80011a4 <__aeabi_f2uiz>
 8002996:	4603      	mov	r3, r0
 8002998:	4a06      	ldr	r2, [pc, #24]	; (80029b4 <get_nutrient_ph_value+0x30>)
 800299a:	6013      	str	r3, [r2, #0]
	nutrient_ph_values[1] = get_ADC_values(0);
 800299c:	2000      	movs	r0, #0
 800299e:	f7fe fdd5 	bl	800154c <get_ADC_values>
 80029a2:	4603      	mov	r3, r0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fe fbfd 	bl	80011a4 <__aeabi_f2uiz>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4a01      	ldr	r2, [pc, #4]	; (80029b4 <get_nutrient_ph_value+0x30>)
 80029ae:	6053      	str	r3, [r2, #4]
}
 80029b0:	bf00      	nop
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	200025b4 	.word	0x200025b4

080029b8 <readPH>:
{

}
float mili_voltage,ph_value = 0;
float readPH()
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
	mili_voltage = read_voltage();
 80029bc:	f7ff fd44 	bl	8002448 <read_voltage>
 80029c0:	4603      	mov	r3, r0
 80029c2:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <readPH+0x28>)
 80029c4:	6013      	str	r3, [r2, #0]
	ph_value = convert_ph(mili_voltage);
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <readPH+0x28>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fdc6 	bl	800255c <convert_ph>
 80029d0:	4603      	mov	r3, r0
 80029d2:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <readPH+0x2c>)
 80029d4:	6013      	str	r3, [r2, #0]
	return ph_value;
 80029d6:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <readPH+0x2c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	2000a748 	.word	0x2000a748
 80029e4:	20002664 	.word	0x20002664

080029e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <HAL_MspInit+0x54>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	4a11      	ldr	r2, [pc, #68]	; (8002a3c <HAL_MspInit+0x54>)
 80029f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029fc:	6453      	str	r3, [r2, #68]	; 0x44
 80029fe:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <HAL_MspInit+0x54>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a06:	607b      	str	r3, [r7, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	603b      	str	r3, [r7, #0]
 8002a0e:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <HAL_MspInit+0x54>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <HAL_MspInit+0x54>)
 8002a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a18:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1a:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <HAL_MspInit+0x54>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a26:	2200      	movs	r2, #0
 8002a28:	210f      	movs	r1, #15
 8002a2a:	f06f 0001 	mvn.w	r0, #1
 8002a2e:	f001 f8b6 	bl	8003b9e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800

08002a40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	; 0x28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a17      	ldr	r2, [pc, #92]	; (8002abc <HAL_ADC_MspInit+0x7c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d127      	bne.n	8002ab2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <HAL_ADC_MspInit+0x80>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <HAL_ADC_MspInit+0x80>)
 8002a6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a70:	6453      	str	r3, [r2, #68]	; 0x44
 8002a72:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <HAL_ADC_MspInit+0x80>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <HAL_ADC_MspInit+0x80>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <HAL_ADC_MspInit+0x80>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <HAL_ADC_MspInit+0x80>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN4
    PA5     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = water_ph_Pin|nutrient_level_Pin;
 8002a9a:	2330      	movs	r3, #48	; 0x30
 8002a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa6:	f107 0314 	add.w	r3, r7, #20
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4805      	ldr	r0, [pc, #20]	; (8002ac4 <HAL_ADC_MspInit+0x84>)
 8002aae:	f001 f8a1 	bl	8003bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002ab2:	bf00      	nop
 8002ab4:	3728      	adds	r7, #40	; 0x28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40012100 	.word	0x40012100
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40020000 	.word	0x40020000

08002ac8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a05      	ldr	r2, [pc, #20]	; (8002aec <HAL_RTC_MspInit+0x24>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d102      	bne.n	8002ae0 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ada:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_RTC_MspInit+0x28>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40002800 	.word	0x40002800
 8002af0:	42470e3c 	.word	0x42470e3c

08002af4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	; 0x24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a32      	ldr	r2, [pc, #200]	; (8002bcc <HAL_TIM_Base_MspInit+0xd8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d10e      	bne.n	8002b24 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
 8002b0a:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <HAL_TIM_Base_MspInit+0xdc>)
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	4a30      	ldr	r2, [pc, #192]	; (8002bd0 <HAL_TIM_Base_MspInit+0xdc>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6453      	str	r3, [r2, #68]	; 0x44
 8002b16:	4b2e      	ldr	r3, [pc, #184]	; (8002bd0 <HAL_TIM_Base_MspInit+0xdc>)
 8002b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	61fb      	str	r3, [r7, #28]
 8002b20:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002b22:	e04e      	b.n	8002bc2 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2c:	d10e      	bne.n	8002b4c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61bb      	str	r3, [r7, #24]
 8002b32:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <HAL_TIM_Base_MspInit+0xdc>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	4a26      	ldr	r2, [pc, #152]	; (8002bd0 <HAL_TIM_Base_MspInit+0xdc>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3e:	4b24      	ldr	r3, [pc, #144]	; (8002bd0 <HAL_TIM_Base_MspInit+0xdc>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	61bb      	str	r3, [r7, #24]
 8002b48:	69bb      	ldr	r3, [r7, #24]
}
 8002b4a:	e03a      	b.n	8002bc2 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM4)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a20      	ldr	r2, [pc, #128]	; (8002bd4 <HAL_TIM_Base_MspInit+0xe0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d10e      	bne.n	8002b74 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <HAL_TIM_Base_MspInit+0xdc>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	4a1c      	ldr	r2, [pc, #112]	; (8002bd0 <HAL_TIM_Base_MspInit+0xdc>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	6413      	str	r3, [r2, #64]	; 0x40
 8002b66:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <HAL_TIM_Base_MspInit+0xdc>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	697b      	ldr	r3, [r7, #20]
}
 8002b72:	e026      	b.n	8002bc2 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM10)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a17      	ldr	r2, [pc, #92]	; (8002bd8 <HAL_TIM_Base_MspInit+0xe4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d10e      	bne.n	8002b9c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <HAL_TIM_Base_MspInit+0xdc>)
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	4a12      	ldr	r2, [pc, #72]	; (8002bd0 <HAL_TIM_Base_MspInit+0xdc>)
 8002b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b8e:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <HAL_TIM_Base_MspInit+0xdc>)
 8002b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	693b      	ldr	r3, [r7, #16]
}
 8002b9a:	e012      	b.n	8002bc2 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM12)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0e      	ldr	r2, [pc, #56]	; (8002bdc <HAL_TIM_Base_MspInit+0xe8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d10d      	bne.n	8002bc2 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <HAL_TIM_Base_MspInit+0xdc>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	4a08      	ldr	r2, [pc, #32]	; (8002bd0 <HAL_TIM_Base_MspInit+0xdc>)
 8002bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb6:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <HAL_TIM_Base_MspInit+0xdc>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
}
 8002bc2:	bf00      	nop
 8002bc4:	3724      	adds	r7, #36	; 0x24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr
 8002bcc:	40010000 	.word	0x40010000
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40000800 	.word	0x40000800
 8002bd8:	40014400 	.word	0x40014400
 8002bdc:	40001800 	.word	0x40001800

08002be0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08a      	sub	sp, #40	; 0x28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	f107 0314 	add.w	r3, r7, #20
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a24      	ldr	r2, [pc, #144]	; (8002c90 <HAL_TIM_MspPostInit+0xb0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d11f      	bne.n	8002c42 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	4b23      	ldr	r3, [pc, #140]	; (8002c94 <HAL_TIM_MspPostInit+0xb4>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	4a22      	ldr	r2, [pc, #136]	; (8002c94 <HAL_TIM_MspPostInit+0xb4>)
 8002c0c:	f043 0310 	orr.w	r3, r3, #16
 8002c10:	6313      	str	r3, [r2, #48]	; 0x30
 8002c12:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <HAL_TIM_MspPostInit+0xb4>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f003 0310 	and.w	r3, r3, #16
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = heat_cool_fan_speed_Pin|system_fan_speed_Pin;
 8002c1e:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8002c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c24:	2302      	movs	r3, #2
 8002c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c30:	2301      	movs	r3, #1
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c34:	f107 0314 	add.w	r3, r7, #20
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4817      	ldr	r0, [pc, #92]	; (8002c98 <HAL_TIM_MspPostInit+0xb8>)
 8002c3c:	f000 ffda 	bl	8003bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8002c40:	e022      	b.n	8002c88 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM10)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a15      	ldr	r2, [pc, #84]	; (8002c9c <HAL_TIM_MspPostInit+0xbc>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d11d      	bne.n	8002c88 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <HAL_TIM_MspPostInit+0xb4>)
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	4a0f      	ldr	r2, [pc, #60]	; (8002c94 <HAL_TIM_MspPostInit+0xb4>)
 8002c56:	f043 0320 	orr.w	r3, r3, #32
 8002c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5c:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <HAL_TIM_MspPostInit+0xb4>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = plant_fan_speed_Pin;
 8002c68:	2340      	movs	r3, #64	; 0x40
 8002c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c74:	2300      	movs	r3, #0
 8002c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(plant_fan_speed_GPIO_Port, &GPIO_InitStruct);
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	4619      	mov	r1, r3
 8002c82:	4807      	ldr	r0, [pc, #28]	; (8002ca0 <HAL_TIM_MspPostInit+0xc0>)
 8002c84:	f000 ffb6 	bl	8003bf4 <HAL_GPIO_Init>
}
 8002c88:	bf00      	nop
 8002c8a:	3728      	adds	r7, #40	; 0x28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40010000 	.word	0x40010000
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40014400 	.word	0x40014400
 8002ca0:	40021400 	.word	0x40021400

08002ca4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08c      	sub	sp, #48	; 0x30
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	2036      	movs	r0, #54	; 0x36
 8002cba:	f000 ff70 	bl	8003b9e <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002cbe:	2036      	movs	r0, #54	; 0x36
 8002cc0:	f000 ff89 	bl	8003bd6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <HAL_InitTick+0xa4>)
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	4a1e      	ldr	r2, [pc, #120]	; (8002d48 <HAL_InitTick+0xa4>)
 8002cce:	f043 0310 	orr.w	r3, r3, #16
 8002cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd4:	4b1c      	ldr	r3, [pc, #112]	; (8002d48 <HAL_InitTick+0xa4>)
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ce0:	f107 0210 	add.w	r2, r7, #16
 8002ce4:	f107 0314 	add.w	r3, r7, #20
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f003 fad4 	bl	8006298 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002cf0:	f003 fab0 	bl	8006254 <HAL_RCC_GetPCLK1Freq>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfc:	4a13      	ldr	r2, [pc, #76]	; (8002d4c <HAL_InitTick+0xa8>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	0c9b      	lsrs	r3, r3, #18
 8002d04:	3b01      	subs	r3, #1
 8002d06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <HAL_InitTick+0xac>)
 8002d0a:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <HAL_InitTick+0xb0>)
 8002d0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <HAL_InitTick+0xac>)
 8002d10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d14:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002d16:	4a0e      	ldr	r2, [pc, #56]	; (8002d50 <HAL_InitTick+0xac>)
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <HAL_InitTick+0xac>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_InitTick+0xac>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002d28:	4809      	ldr	r0, [pc, #36]	; (8002d50 <HAL_InitTick+0xac>)
 8002d2a:	f003 ffc6 	bl	8006cba <HAL_TIM_Base_Init>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d104      	bne.n	8002d3e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002d34:	4806      	ldr	r0, [pc, #24]	; (8002d50 <HAL_InitTick+0xac>)
 8002d36:	f004 f80f 	bl	8006d58 <HAL_TIM_Base_Start_IT>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	e000      	b.n	8002d40 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3730      	adds	r7, #48	; 0x30
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	431bde83 	.word	0x431bde83
 8002d50:	2000a7c8 	.word	0x2000a7c8
 8002d54:	40001000 	.word	0x40001000

08002d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d5c:	e7fe      	b.n	8002d5c <NMI_Handler+0x4>

08002d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d62:	e7fe      	b.n	8002d62 <HardFault_Handler+0x4>

08002d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d68:	e7fe      	b.n	8002d68 <MemManage_Handler+0x4>

08002d6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d6e:	e7fe      	b.n	8002d6e <BusFault_Handler+0x4>

08002d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d74:	e7fe      	b.n	8002d74 <UsageFault_Handler+0x4>

08002d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr
	...

08002d84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d88:	4802      	ldr	r0, [pc, #8]	; (8002d94 <TIM6_DAC_IRQHandler+0x10>)
 8002d8a:	f004 f973 	bl	8007074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	2000a7c8 	.word	0x2000a7c8

08002d98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002d9c:	4802      	ldr	r0, [pc, #8]	; (8002da8 <OTG_FS_IRQHandler+0x10>)
 8002d9e:	f001 fb61 	bl	8004464 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	2000b098 	.word	0x2000b098

08002dac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
	return 1;
 8002db0:	2301      	movs	r3, #1
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr

08002dba <_kill>:

int _kill(int pid, int sig)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002dc4:	f00e fa8a 	bl	80112dc <__errno>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2216      	movs	r2, #22
 8002dcc:	601a      	str	r2, [r3, #0]
	return -1;
 8002dce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <_exit>:

void _exit (int status)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002de2:	f04f 31ff 	mov.w	r1, #4294967295
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ffe7 	bl	8002dba <_kill>
	while (1) {}		/* Make sure we hang here */
 8002dec:	e7fe      	b.n	8002dec <_exit+0x12>

08002dee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b086      	sub	sp, #24
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	e00a      	b.n	8002e16 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e00:	f3af 8000 	nop.w
 8002e04:	4601      	mov	r1, r0
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	60ba      	str	r2, [r7, #8]
 8002e0c:	b2ca      	uxtb	r2, r1
 8002e0e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	3301      	adds	r3, #1
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	dbf0      	blt.n	8002e00 <_read+0x12>
	}

return len;
 8002e1e:	687b      	ldr	r3, [r7, #4]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	e009      	b.n	8002e4e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	60ba      	str	r2, [r7, #8]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	dbf1      	blt.n	8002e3a <_write+0x12>
	}
	return len;
 8002e56:	687b      	ldr	r3, [r7, #4]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <_close>:

int _close(int file)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	return -1;
 8002e68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr

08002e76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e86:	605a      	str	r2, [r3, #4]
	return 0;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <_isatty>:

int _isatty(int file)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
	return 1;
 8002e9c:	2301      	movs	r3, #1
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
	return 0;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ec8:	4a14      	ldr	r2, [pc, #80]	; (8002f1c <_sbrk+0x5c>)
 8002eca:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <_sbrk+0x60>)
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <_sbrk+0x64>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002edc:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <_sbrk+0x64>)
 8002ede:	4a12      	ldr	r2, [pc, #72]	; (8002f28 <_sbrk+0x68>)
 8002ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <_sbrk+0x64>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d207      	bcs.n	8002f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ef0:	f00e f9f4 	bl	80112dc <__errno>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	220c      	movs	r2, #12
 8002ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002efa:	f04f 33ff 	mov.w	r3, #4294967295
 8002efe:	e009      	b.n	8002f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <_sbrk+0x64>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f06:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <_sbrk+0x64>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <_sbrk+0x64>)
 8002f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f12:	68fb      	ldr	r3, [r7, #12]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	2001c000 	.word	0x2001c000
 8002f20:	00000800 	.word	0x00000800
 8002f24:	20002668 	.word	0x20002668
 8002f28:	2000b3b0 	.word	0x2000b3b0

08002f2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <DWT_Delay_Init>:
#include "main.h"
#include "sensors.h"
#include "water_temp_driver.h"

uint32_t DWT_Delay_Init(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8002f3c:	4b14      	ldr	r3, [pc, #80]	; (8002f90 <DWT_Delay_Init+0x58>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <DWT_Delay_Init+0x58>)
 8002f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f46:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <DWT_Delay_Init+0x58>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	4a10      	ldr	r2, [pc, #64]	; (8002f90 <DWT_Delay_Init+0x58>)
 8002f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f52:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002f54:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <DWT_Delay_Init+0x5c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a0e      	ldr	r2, [pc, #56]	; (8002f94 <DWT_Delay_Init+0x5c>)
 8002f5a:	f023 0301 	bic.w	r3, r3, #1
 8002f5e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <DWT_Delay_Init+0x5c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a0b      	ldr	r2, [pc, #44]	; (8002f94 <DWT_Delay_Init+0x5c>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <DWT_Delay_Init+0x5c>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8002f72:	bf00      	nop
    __ASM volatile ("NOP");
 8002f74:	bf00      	nop
    __ASM volatile ("NOP");
 8002f76:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <DWT_Delay_Init+0x5c>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8002f80:	2300      	movs	r3, #0
 8002f82:	e000      	b.n	8002f86 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8002f84:	2301      	movs	r3, #1
    }
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	e000edf0 	.word	0xe000edf0
 8002f94:	e0001000 	.word	0xe0001000

08002f98 <DWT_Delay_us>:

 void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <DWT_Delay_us+0x48>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8002fa6:	f003 f94b 	bl	8006240 <HAL_RCC_GetHCLKFreq>
 8002faa:	4603      	mov	r3, r0
 8002fac:	4a0d      	ldr	r2, [pc, #52]	; (8002fe4 <DWT_Delay_us+0x4c>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	0c9b      	lsrs	r3, r3, #18
 8002fb4:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	fb02 f303 	mul.w	r3, r2, r3
 8002fbe:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8002fc0:	bf00      	nop
 8002fc2:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <DWT_Delay_us+0x48>)
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1ad2      	subs	r2, r2, r3
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	1acb      	subs	r3, r1, r3
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d3f6      	bcc.n	8002fc2 <DWT_Delay_us+0x2a>
}
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	e0001000 	.word	0xe0001000
 8002fe4:	431bde83 	.word	0x431bde83

08002fe8 <DS18B20_Start>:


uint8_t DS18B20_Start (void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set the pin as output
 8002ff2:	2104      	movs	r1, #4
 8002ff4:	4813      	ldr	r0, [pc, #76]	; (8003044 <DS18B20_Start+0x5c>)
 8002ff6:	f000 f8ab 	bl	8003150 <Set_Pin_Output>
	HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin low
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2104      	movs	r1, #4
 8002ffe:	4811      	ldr	r0, [pc, #68]	; (8003044 <DS18B20_Start+0x5c>)
 8003000:	f000 ffad 	bl	8003f5e <HAL_GPIO_WritePin>
	DWT_Delay_us (480);   // delay according to datasheet
 8003004:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003008:	f7ff ffc6 	bl	8002f98 <DWT_Delay_us>

	Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);    // set the pin as input
 800300c:	2104      	movs	r1, #4
 800300e:	480d      	ldr	r0, [pc, #52]	; (8003044 <DS18B20_Start+0x5c>)
 8003010:	f000 f8bc 	bl	800318c <Set_Pin_Input>
	DWT_Delay_us (80);    // delay according to datasheet
 8003014:	2050      	movs	r0, #80	; 0x50
 8003016:	f7ff ffbf 	bl	8002f98 <DWT_Delay_us>

	if (!(HAL_GPIO_ReadPin (water_temp_GPIO_Port, water_temp_Pin))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 800301a:	2104      	movs	r1, #4
 800301c:	4809      	ldr	r0, [pc, #36]	; (8003044 <DS18B20_Start+0x5c>)
 800301e:	f000 ff87 	bl	8003f30 <HAL_GPIO_ReadPin>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d102      	bne.n	800302e <DS18B20_Start+0x46>
 8003028:	2301      	movs	r3, #1
 800302a:	71fb      	strb	r3, [r7, #7]
 800302c:	e001      	b.n	8003032 <DS18B20_Start+0x4a>
	else Response = -1;
 800302e:	23ff      	movs	r3, #255	; 0xff
 8003030:	71fb      	strb	r3, [r7, #7]

	DWT_Delay_us (400); // 480 us delay totally.
 8003032:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003036:	f7ff ffaf 	bl	8002f98 <DWT_Delay_us>

	return Response;
 800303a:	79fb      	ldrb	r3, [r7, #7]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40020400 	.word	0x40020400

08003048 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);  // set as output
 8003052:	2104      	movs	r1, #4
 8003054:	481e      	ldr	r0, [pc, #120]	; (80030d0 <DS18B20_Write+0x88>)
 8003056:	f000 f87b 	bl	8003150 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	e02e      	b.n	80030be <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8003060:	79fa      	ldrb	r2, [r7, #7]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	fa42 f303 	asr.w	r3, r2, r3
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d013      	beq.n	8003098 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);  // set as output
 8003070:	2104      	movs	r1, #4
 8003072:	4817      	ldr	r0, [pc, #92]	; (80030d0 <DS18B20_Write+0x88>)
 8003074:	f000 f86c 	bl	8003150 <Set_Pin_Output>
			HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin LOW
 8003078:	2200      	movs	r2, #0
 800307a:	2104      	movs	r1, #4
 800307c:	4814      	ldr	r0, [pc, #80]	; (80030d0 <DS18B20_Write+0x88>)
 800307e:	f000 ff6e 	bl	8003f5e <HAL_GPIO_WritePin>
			DWT_Delay_us (5);  // wait for 1 us
 8003082:	2005      	movs	r0, #5
 8003084:	f7ff ff88 	bl	8002f98 <DWT_Delay_us>

			Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);  // set as input
 8003088:	2104      	movs	r1, #4
 800308a:	4811      	ldr	r0, [pc, #68]	; (80030d0 <DS18B20_Write+0x88>)
 800308c:	f000 f87e 	bl	800318c <Set_Pin_Input>
			DWT_Delay_us (65);  // wait for 60 us
 8003090:	2041      	movs	r0, #65	; 0x41
 8003092:	f7ff ff81 	bl	8002f98 <DWT_Delay_us>
 8003096:	e00f      	b.n	80030b8 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);
 8003098:	2104      	movs	r1, #4
 800309a:	480d      	ldr	r0, [pc, #52]	; (80030d0 <DS18B20_Write+0x88>)
 800309c:	f000 f858 	bl	8003150 <Set_Pin_Output>
			HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the pin LOW
 80030a0:	2200      	movs	r2, #0
 80030a2:	2104      	movs	r1, #4
 80030a4:	480a      	ldr	r0, [pc, #40]	; (80030d0 <DS18B20_Write+0x88>)
 80030a6:	f000 ff5a 	bl	8003f5e <HAL_GPIO_WritePin>
			DWT_Delay_us (65);  // wait for 60 us
 80030aa:	2041      	movs	r0, #65	; 0x41
 80030ac:	f7ff ff74 	bl	8002f98 <DWT_Delay_us>

			Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);
 80030b0:	2104      	movs	r1, #4
 80030b2:	4807      	ldr	r0, [pc, #28]	; (80030d0 <DS18B20_Write+0x88>)
 80030b4:	f000 f86a 	bl	800318c <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	3301      	adds	r3, #1
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b07      	cmp	r3, #7
 80030c2:	ddcd      	ble.n	8003060 <DS18B20_Write+0x18>
		}
	}
}
 80030c4:	bf00      	nop
 80030c6:	bf00      	nop
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40020400 	.word	0x40020400

080030d4 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
	uint8_t value=0;
 80030da:	2300      	movs	r3, #0
 80030dc:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);
 80030de:	2104      	movs	r1, #4
 80030e0:	481a      	ldr	r0, [pc, #104]	; (800314c <DS18B20_Read+0x78>)
 80030e2:	f000 f853 	bl	800318c <Set_Pin_Input>

	for (int i=0;i<8;i++)
 80030e6:	2300      	movs	r3, #0
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	e026      	b.n	800313a <DS18B20_Read+0x66>
	{
		Set_Pin_Output(water_temp_GPIO_Port, water_temp_Pin);   // set as output
 80030ec:	2104      	movs	r1, #4
 80030ee:	4817      	ldr	r0, [pc, #92]	; (800314c <DS18B20_Read+0x78>)
 80030f0:	f000 f82e 	bl	8003150 <Set_Pin_Output>

		HAL_GPIO_WritePin (water_temp_GPIO_Port, water_temp_Pin, 0);  // pull the data pin LOW
 80030f4:	2200      	movs	r2, #0
 80030f6:	2104      	movs	r1, #4
 80030f8:	4814      	ldr	r0, [pc, #80]	; (800314c <DS18B20_Read+0x78>)
 80030fa:	f000 ff30 	bl	8003f5e <HAL_GPIO_WritePin>
		DWT_Delay_us (5);  // wait for > 1us
 80030fe:	2005      	movs	r0, #5
 8003100:	f7ff ff4a 	bl	8002f98 <DWT_Delay_us>

		Set_Pin_Input(water_temp_GPIO_Port, water_temp_Pin);  // set as input
 8003104:	2104      	movs	r1, #4
 8003106:	4811      	ldr	r0, [pc, #68]	; (800314c <DS18B20_Read+0x78>)
 8003108:	f000 f840 	bl	800318c <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (water_temp_GPIO_Port, water_temp_Pin))  // if the pin is HIGH
 800310c:	2104      	movs	r1, #4
 800310e:	480f      	ldr	r0, [pc, #60]	; (800314c <DS18B20_Read+0x78>)
 8003110:	f000 ff0e 	bl	8003f30 <HAL_GPIO_ReadPin>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 800311a:	2201      	movs	r2, #1
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	b25a      	sxtb	r2, r3
 8003124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003128:	4313      	orrs	r3, r2
 800312a:	b25b      	sxtb	r3, r3
 800312c:	71fb      	strb	r3, [r7, #7]
		}
		DWT_Delay_us (50);  // wait for 60 us
 800312e:	2032      	movs	r0, #50	; 0x32
 8003130:	f7ff ff32 	bl	8002f98 <DWT_Delay_us>
	for (int i=0;i<8;i++)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	3301      	adds	r3, #1
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b07      	cmp	r3, #7
 800313e:	ddd5      	ble.n	80030ec <DS18B20_Read+0x18>
	}
	return value;
 8003140:	79fb      	ldrb	r3, [r7, #7]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40020400 	.word	0x40020400

08003150 <Set_Pin_Output>:


void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800315c:	f107 030c 	add.w	r3, r7, #12
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800316c:	887b      	ldrh	r3, [r7, #2]
 800316e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003170:	2301      	movs	r3, #1
 8003172:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003174:	2300      	movs	r3, #0
 8003176:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003178:	f107 030c 	add.w	r3, r7, #12
 800317c:	4619      	mov	r1, r3
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fd38 	bl	8003bf4 <HAL_GPIO_Init>
}
 8003184:	bf00      	nop
 8003186:	3720      	adds	r7, #32
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003198:	f107 030c 	add.w	r3, r7, #12
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	609a      	str	r2, [r3, #8]
 80031a4:	60da      	str	r2, [r3, #12]
 80031a6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80031a8:	887b      	ldrh	r3, [r7, #2]
 80031aa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ac:	2300      	movs	r3, #0
 80031ae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031b0:	2301      	movs	r3, #1
 80031b2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80031b4:	f107 030c 	add.w	r3, r7, #12
 80031b8:	4619      	mov	r1, r3
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fd1a 	bl	8003bf4 <HAL_GPIO_Init>
}
 80031c0:	bf00      	nop
 80031c2:	3720      	adds	r7, #32
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80031c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003200 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031cc:	480d      	ldr	r0, [pc, #52]	; (8003204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031ce:	490e      	ldr	r1, [pc, #56]	; (8003208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031d0:	4a0e      	ldr	r2, [pc, #56]	; (800320c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031d4:	e002      	b.n	80031dc <LoopCopyDataInit>

080031d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031da:	3304      	adds	r3, #4

080031dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031e0:	d3f9      	bcc.n	80031d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031e2:	4a0b      	ldr	r2, [pc, #44]	; (8003210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031e4:	4c0b      	ldr	r4, [pc, #44]	; (8003214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031e8:	e001      	b.n	80031ee <LoopFillZerobss>

080031ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031ec:	3204      	adds	r2, #4

080031ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031f0:	d3fb      	bcc.n	80031ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80031f2:	f7ff fe9b 	bl	8002f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031f6:	f00e f96d 	bl	80114d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031fa:	f7fe fce3 	bl	8001bc4 <main>
  bx  lr
 80031fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003200:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8003204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003208:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 800320c:	080162a4 	.word	0x080162a4
  ldr r2, =_sbss
 8003210:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8003214:	2000b3ac 	.word	0x2000b3ac

08003218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003218:	e7fe      	b.n	8003218 <ADC_IRQHandler>
	...

0800321c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003220:	4b0e      	ldr	r3, [pc, #56]	; (800325c <HAL_Init+0x40>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a0d      	ldr	r2, [pc, #52]	; (800325c <HAL_Init+0x40>)
 8003226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800322a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_Init+0x40>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a0a      	ldr	r2, [pc, #40]	; (800325c <HAL_Init+0x40>)
 8003232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003238:	4b08      	ldr	r3, [pc, #32]	; (800325c <HAL_Init+0x40>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a07      	ldr	r2, [pc, #28]	; (800325c <HAL_Init+0x40>)
 800323e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003244:	2003      	movs	r0, #3
 8003246:	f000 fc9f 	bl	8003b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800324a:	200f      	movs	r0, #15
 800324c:	f7ff fd2a 	bl	8002ca4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003250:	f7ff fbca 	bl	80029e8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40023c00 	.word	0x40023c00

08003260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <HAL_IncTick+0x1c>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	461a      	mov	r2, r3
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_IncTick+0x20>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4413      	add	r3, r2
 8003270:	4a03      	ldr	r2, [pc, #12]	; (8003280 <HAL_IncTick+0x20>)
 8003272:	6013      	str	r3, [r2, #0]
}
 8003274:	bf00      	nop
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr
 800327c:	20000034 	.word	0x20000034
 8003280:	2000a810 	.word	0x2000a810

08003284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return uwTick;
 8003288:	4b02      	ldr	r3, [pc, #8]	; (8003294 <HAL_GetTick+0x10>)
 800328a:	681b      	ldr	r3, [r3, #0]
}
 800328c:	4618      	mov	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr
 8003294:	2000a810 	.word	0x2000a810

08003298 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032a0:	f7ff fff0 	bl	8003284 <HAL_GetTick>
 80032a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b0:	d005      	beq.n	80032be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032b2:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <HAL_Delay+0x44>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4413      	add	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032be:	bf00      	nop
 80032c0:	f7ff ffe0 	bl	8003284 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d8f7      	bhi.n	80032c0 <HAL_Delay+0x28>
  {
  }
}
 80032d0:	bf00      	nop
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000034 	.word	0x20000034

080032e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e033      	b.n	800335e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d109      	bne.n	8003312 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff fb9e 	bl	8002a40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b00      	cmp	r3, #0
 800331c:	d118      	bne.n	8003350 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003326:	f023 0302 	bic.w	r3, r3, #2
 800332a:	f043 0202 	orr.w	r2, r3, #2
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fa78 	bl	8003828 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f023 0303 	bic.w	r3, r3, #3
 8003346:	f043 0201 	orr.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	641a      	str	r2, [r3, #64]	; 0x40
 800334e:	e001      	b.n	8003354 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800335c:	7bfb      	ldrb	r3, [r7, #15]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_ADC_Start+0x1a>
 800337e:	2302      	movs	r3, #2
 8003380:	e095      	b.n	80034ae <HAL_ADC_Start+0x146>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b01      	cmp	r3, #1
 8003396:	d018      	beq.n	80033ca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033a8:	4b43      	ldr	r3, [pc, #268]	; (80034b8 <HAL_ADC_Start+0x150>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a43      	ldr	r2, [pc, #268]	; (80034bc <HAL_ADC_Start+0x154>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	0c9a      	lsrs	r2, r3, #18
 80033b4:	4613      	mov	r3, r2
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	4413      	add	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 80033bc:	e002      	b.n	80033c4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3b01      	subs	r3, #1
 80033c2:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f9      	bne.n	80033be <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d15d      	bne.n	8003494 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003402:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003416:	d106      	bne.n	8003426 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341c:	f023 0206 	bic.w	r2, r3, #6
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	645a      	str	r2, [r3, #68]	; 0x44
 8003424:	e002      	b.n	800342c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800343c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800343e:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <HAL_ADC_Start+0x158>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10f      	bne.n	800346a <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d129      	bne.n	80034ac <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	e020      	b.n	80034ac <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a15      	ldr	r2, [pc, #84]	; (80034c4 <HAL_ADC_Start+0x15c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d11b      	bne.n	80034ac <HAL_ADC_Start+0x144>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d114      	bne.n	80034ac <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003490:	609a      	str	r2, [r3, #8]
 8003492:	e00b      	b.n	80034ac <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	f043 0210 	orr.w	r2, r3, #16
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a4:	f043 0201 	orr.w	r2, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr
 80034b8:	2000002c 	.word	0x2000002c
 80034bc:	431bde83 	.word	0x431bde83
 80034c0:	40012300 	.word	0x40012300
 80034c4:	40012000 	.word	0x40012000

080034c8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e4:	d113      	bne.n	800350e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80034f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f4:	d10b      	bne.n	800350e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f043 0220 	orr.w	r2, r3, #32
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e05c      	b.n	80035c8 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800350e:	f7ff feb9 	bl	8003284 <HAL_GetTick>
 8003512:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003514:	e01a      	b.n	800354c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351c:	d016      	beq.n	800354c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d007      	beq.n	8003534 <HAL_ADC_PollForConversion+0x6c>
 8003524:	f7ff feae 	bl	8003284 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d20b      	bcs.n	800354c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	f043 0204 	orr.w	r2, r3, #4
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e03d      	b.n	80035c8 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b02      	cmp	r3, #2
 8003558:	d1dd      	bne.n	8003516 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f06f 0212 	mvn.w	r2, #18
 8003562:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F2, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d123      	bne.n	80035c6 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003582:	2b00      	cmp	r3, #0
 8003584:	d11f      	bne.n	80035c6 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003590:	2b00      	cmp	r3, #0
 8003592:	d006      	beq.n	80035a2 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d111      	bne.n	80035c6 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d105      	bne.n	80035c6 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f043 0201 	orr.w	r2, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr

080035e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_ADC_ConfigChannel+0x1c>
 8003600:	2302      	movs	r3, #2
 8003602:	e103      	b.n	800380c <HAL_ADC_ConfigChannel+0x224>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b09      	cmp	r3, #9
 8003612:	d925      	bls.n	8003660 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68d9      	ldr	r1, [r3, #12]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	b29b      	uxth	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	4613      	mov	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4413      	add	r3, r2
 8003628:	3b1e      	subs	r3, #30
 800362a:	2207      	movs	r2, #7
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43da      	mvns	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	400a      	ands	r2, r1
 8003638:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68d9      	ldr	r1, [r3, #12]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	b29b      	uxth	r3, r3
 800364a:	4618      	mov	r0, r3
 800364c:	4603      	mov	r3, r0
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	4403      	add	r3, r0
 8003652:	3b1e      	subs	r3, #30
 8003654:	409a      	lsls	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	e022      	b.n	80036a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6919      	ldr	r1, [r3, #16]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	b29b      	uxth	r3, r3
 800366c:	461a      	mov	r2, r3
 800366e:	4613      	mov	r3, r2
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	4413      	add	r3, r2
 8003674:	2207      	movs	r2, #7
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43da      	mvns	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	400a      	ands	r2, r1
 8003682:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6919      	ldr	r1, [r3, #16]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	b29b      	uxth	r3, r3
 8003694:	4618      	mov	r0, r3
 8003696:	4603      	mov	r3, r0
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	4403      	add	r3, r0
 800369c:	409a      	lsls	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b06      	cmp	r3, #6
 80036ac:	d824      	bhi.n	80036f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	3b05      	subs	r3, #5
 80036c0:	221f      	movs	r2, #31
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43da      	mvns	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	400a      	ands	r2, r1
 80036ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	4618      	mov	r0, r3
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	3b05      	subs	r3, #5
 80036ea:	fa00 f203 	lsl.w	r2, r0, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	635a      	str	r2, [r3, #52]	; 0x34
 80036f6:	e04c      	b.n	8003792 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b0c      	cmp	r3, #12
 80036fe:	d824      	bhi.n	800374a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	3b23      	subs	r3, #35	; 0x23
 8003712:	221f      	movs	r2, #31
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43da      	mvns	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	400a      	ands	r2, r1
 8003720:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	b29b      	uxth	r3, r3
 800372e:	4618      	mov	r0, r3
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	3b23      	subs	r3, #35	; 0x23
 800373c:	fa00 f203 	lsl.w	r2, r0, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
 8003748:	e023      	b.n	8003792 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	3b41      	subs	r3, #65	; 0x41
 800375c:	221f      	movs	r2, #31
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43da      	mvns	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	400a      	ands	r2, r1
 800376a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	b29b      	uxth	r3, r3
 8003778:	4618      	mov	r0, r3
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	3b41      	subs	r3, #65	; 0x41
 8003786:	fa00 f203 	lsl.w	r2, r0, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a20      	ldr	r2, [pc, #128]	; (8003818 <HAL_ADC_ConfigChannel+0x230>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d109      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x1c8>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b12      	cmp	r3, #18
 80037a2:	d105      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80037a4:	4b1d      	ldr	r3, [pc, #116]	; (800381c <HAL_ADC_ConfigChannel+0x234>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	4a1c      	ldr	r2, [pc, #112]	; (800381c <HAL_ADC_ConfigChannel+0x234>)
 80037aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037ae:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a18      	ldr	r2, [pc, #96]	; (8003818 <HAL_ADC_ConfigChannel+0x230>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d123      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x21a>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b10      	cmp	r3, #16
 80037c0:	d003      	beq.n	80037ca <HAL_ADC_ConfigChannel+0x1e2>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b11      	cmp	r3, #17
 80037c8:	d11b      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80037ca:	4b14      	ldr	r3, [pc, #80]	; (800381c <HAL_ADC_ConfigChannel+0x234>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	4a13      	ldr	r2, [pc, #76]	; (800381c <HAL_ADC_ConfigChannel+0x234>)
 80037d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037d4:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b10      	cmp	r3, #16
 80037dc:	d111      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_ADC_ConfigChannel+0x238>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a10      	ldr	r2, [pc, #64]	; (8003824 <HAL_ADC_ConfigChannel+0x23c>)
 80037e4:	fba2 2303 	umull	r2, r3, r2, r3
 80037e8:	0c9a      	lsrs	r2, r3, #18
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80037f4:	e002      	b.n	80037fc <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f9      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40012000 	.word	0x40012000
 800381c:	40012300 	.word	0x40012300
 8003820:	2000002c 	.word	0x2000002c
 8003824:	431bde83 	.word	0x431bde83

08003828 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003830:	4b7e      	ldr	r3, [pc, #504]	; (8003a2c <ADC_Init+0x204>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	4a7d      	ldr	r2, [pc, #500]	; (8003a2c <ADC_Init+0x204>)
 8003836:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800383a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800383c:	4b7b      	ldr	r3, [pc, #492]	; (8003a2c <ADC_Init+0x204>)
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	4979      	ldr	r1, [pc, #484]	; (8003a2c <ADC_Init+0x204>)
 8003846:	4313      	orrs	r3, r2
 8003848:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003858:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6859      	ldr	r1, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	021a      	lsls	r2, r3, #8
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800387c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800389e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6899      	ldr	r1, [r3, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	4a5e      	ldr	r2, [pc, #376]	; (8003a30 <ADC_Init+0x208>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d022      	beq.n	8003902 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6899      	ldr	r1, [r3, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6899      	ldr	r1, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	e00f      	b.n	8003922 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003910:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003920:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0202 	bic.w	r2, r2, #2
 8003930:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6899      	ldr	r1, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	7e1b      	ldrb	r3, [r3, #24]
 800393c:	005a      	lsls	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3020 	ldrb.w	r3, [r3, #32]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d027      	beq.n	80039a0 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800395e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800396e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	3b01      	subs	r3, #1
 8003976:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800397a:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	fa92 f2a2 	rbit	r2, r2
 8003982:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	fab2 f282 	clz	r2, r2
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	fa03 f102 	lsl.w	r1, r3, r2
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
 800399e:	e007      	b.n	80039b0 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80039be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	051a      	lsls	r2, r3, #20
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6899      	ldr	r1, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039f2:	025a      	lsls	r2, r3, #9
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6899      	ldr	r1, [r3, #8]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	029a      	lsls	r2, r3, #10
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	609a      	str	r2, [r3, #8]
}
 8003a20:	bf00      	nop
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40012300 	.word	0x40012300
 8003a30:	0f000001 	.word	0x0f000001

08003a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a44:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <__NVIC_SetPriorityGrouping+0x44>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a50:	4013      	ands	r3, r2
 8003a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a66:	4a04      	ldr	r2, [pc, #16]	; (8003a78 <__NVIC_SetPriorityGrouping+0x44>)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	60d3      	str	r3, [r2, #12]
}
 8003a6c:	bf00      	nop
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	e000ed00 	.word	0xe000ed00

08003a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a80:	4b04      	ldr	r3, [pc, #16]	; (8003a94 <__NVIC_GetPriorityGrouping+0x18>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	0a1b      	lsrs	r3, r3, #8
 8003a86:	f003 0307 	and.w	r3, r3, #7
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	e000ed00 	.word	0xe000ed00

08003a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	db0b      	blt.n	8003ac2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	f003 021f 	and.w	r2, r3, #31
 8003ab0:	4906      	ldr	r1, [pc, #24]	; (8003acc <__NVIC_EnableIRQ+0x34>)
 8003ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	2001      	movs	r0, #1
 8003aba:	fa00 f202 	lsl.w	r2, r0, r2
 8003abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr
 8003acc:	e000e100 	.word	0xe000e100

08003ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	6039      	str	r1, [r7, #0]
 8003ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	db0a      	blt.n	8003afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	490c      	ldr	r1, [pc, #48]	; (8003b1c <__NVIC_SetPriority+0x4c>)
 8003aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aee:	0112      	lsls	r2, r2, #4
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	440b      	add	r3, r1
 8003af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003af8:	e00a      	b.n	8003b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	4908      	ldr	r1, [pc, #32]	; (8003b20 <__NVIC_SetPriority+0x50>)
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	3b04      	subs	r3, #4
 8003b08:	0112      	lsls	r2, r2, #4
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	761a      	strb	r2, [r3, #24]
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	e000e100 	.word	0xe000e100
 8003b20:	e000ed00 	.word	0xe000ed00

08003b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b089      	sub	sp, #36	; 0x24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f1c3 0307 	rsb	r3, r3, #7
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	bf28      	it	cs
 8003b42:	2304      	movcs	r3, #4
 8003b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	2b06      	cmp	r3, #6
 8003b4c:	d902      	bls.n	8003b54 <NVIC_EncodePriority+0x30>
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	3b03      	subs	r3, #3
 8003b52:	e000      	b.n	8003b56 <NVIC_EncodePriority+0x32>
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b58:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43da      	mvns	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	401a      	ands	r2, r3
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	fa01 f303 	lsl.w	r3, r1, r3
 8003b76:	43d9      	mvns	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b7c:	4313      	orrs	r3, r2
         );
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3724      	adds	r7, #36	; 0x24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr

08003b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff ff4f 	bl	8003a34 <__NVIC_SetPriorityGrouping>
}
 8003b96:	bf00      	nop
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b086      	sub	sp, #24
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bb0:	f7ff ff64 	bl	8003a7c <__NVIC_GetPriorityGrouping>
 8003bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	68b9      	ldr	r1, [r7, #8]
 8003bba:	6978      	ldr	r0, [r7, #20]
 8003bbc:	f7ff ffb2 	bl	8003b24 <NVIC_EncodePriority>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff ff81 	bl	8003ad0 <__NVIC_SetPriority>
}
 8003bce:	bf00      	nop
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	4603      	mov	r3, r0
 8003bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ff57 	bl	8003a98 <__NVIC_EnableIRQ>
}
 8003bea:	bf00      	nop
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c02:	e16f      	b.n	8003ee4 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	2101      	movs	r1, #1
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c10:	4013      	ands	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 8161 	beq.w	8003ede <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d005      	beq.n	8003c34 <HAL_GPIO_Init+0x40>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d130      	bne.n	8003c96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	2203      	movs	r2, #3
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	091b      	lsrs	r3, r3, #4
 8003c80:	f003 0201 	and.w	r2, r3, #1
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d017      	beq.n	8003cd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	2203      	movs	r2, #3
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d123      	bne.n	8003d26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	08da      	lsrs	r2, r3, #3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3208      	adds	r2, #8
 8003ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	220f      	movs	r2, #15
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	691a      	ldr	r2, [r3, #16]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	08da      	lsrs	r2, r3, #3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3208      	adds	r2, #8
 8003d20:	6939      	ldr	r1, [r7, #16]
 8003d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	2203      	movs	r2, #3
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43db      	mvns	r3, r3
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 0203 	and.w	r2, r3, #3
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 80bb 	beq.w	8003ede <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60bb      	str	r3, [r7, #8]
 8003d6c:	4b64      	ldr	r3, [pc, #400]	; (8003f00 <HAL_GPIO_Init+0x30c>)
 8003d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d70:	4a63      	ldr	r2, [pc, #396]	; (8003f00 <HAL_GPIO_Init+0x30c>)
 8003d72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d76:	6453      	str	r3, [r2, #68]	; 0x44
 8003d78:	4b61      	ldr	r3, [pc, #388]	; (8003f00 <HAL_GPIO_Init+0x30c>)
 8003d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d84:	4a5f      	ldr	r2, [pc, #380]	; (8003f04 <HAL_GPIO_Init+0x310>)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	089b      	lsrs	r3, r3, #2
 8003d8a:	3302      	adds	r3, #2
 8003d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	220f      	movs	r2, #15
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a57      	ldr	r2, [pc, #348]	; (8003f08 <HAL_GPIO_Init+0x314>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d031      	beq.n	8003e14 <HAL_GPIO_Init+0x220>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a56      	ldr	r2, [pc, #344]	; (8003f0c <HAL_GPIO_Init+0x318>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d02b      	beq.n	8003e10 <HAL_GPIO_Init+0x21c>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a55      	ldr	r2, [pc, #340]	; (8003f10 <HAL_GPIO_Init+0x31c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d025      	beq.n	8003e0c <HAL_GPIO_Init+0x218>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a54      	ldr	r2, [pc, #336]	; (8003f14 <HAL_GPIO_Init+0x320>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d01f      	beq.n	8003e08 <HAL_GPIO_Init+0x214>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a53      	ldr	r2, [pc, #332]	; (8003f18 <HAL_GPIO_Init+0x324>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d019      	beq.n	8003e04 <HAL_GPIO_Init+0x210>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a52      	ldr	r2, [pc, #328]	; (8003f1c <HAL_GPIO_Init+0x328>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d013      	beq.n	8003e00 <HAL_GPIO_Init+0x20c>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a51      	ldr	r2, [pc, #324]	; (8003f20 <HAL_GPIO_Init+0x32c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d00d      	beq.n	8003dfc <HAL_GPIO_Init+0x208>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a50      	ldr	r2, [pc, #320]	; (8003f24 <HAL_GPIO_Init+0x330>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d007      	beq.n	8003df8 <HAL_GPIO_Init+0x204>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a4f      	ldr	r2, [pc, #316]	; (8003f28 <HAL_GPIO_Init+0x334>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d101      	bne.n	8003df4 <HAL_GPIO_Init+0x200>
 8003df0:	2308      	movs	r3, #8
 8003df2:	e010      	b.n	8003e16 <HAL_GPIO_Init+0x222>
 8003df4:	2309      	movs	r3, #9
 8003df6:	e00e      	b.n	8003e16 <HAL_GPIO_Init+0x222>
 8003df8:	2307      	movs	r3, #7
 8003dfa:	e00c      	b.n	8003e16 <HAL_GPIO_Init+0x222>
 8003dfc:	2306      	movs	r3, #6
 8003dfe:	e00a      	b.n	8003e16 <HAL_GPIO_Init+0x222>
 8003e00:	2305      	movs	r3, #5
 8003e02:	e008      	b.n	8003e16 <HAL_GPIO_Init+0x222>
 8003e04:	2304      	movs	r3, #4
 8003e06:	e006      	b.n	8003e16 <HAL_GPIO_Init+0x222>
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e004      	b.n	8003e16 <HAL_GPIO_Init+0x222>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e002      	b.n	8003e16 <HAL_GPIO_Init+0x222>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <HAL_GPIO_Init+0x222>
 8003e14:	2300      	movs	r3, #0
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	f002 0203 	and.w	r2, r2, #3
 8003e1c:	0092      	lsls	r2, r2, #2
 8003e1e:	4093      	lsls	r3, r2
 8003e20:	461a      	mov	r2, r3
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e28:	4936      	ldr	r1, [pc, #216]	; (8003f04 <HAL_GPIO_Init+0x310>)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	089b      	lsrs	r3, r3, #2
 8003e2e:	3302      	adds	r3, #2
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e36:	4b3d      	ldr	r3, [pc, #244]	; (8003f2c <HAL_GPIO_Init+0x338>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4013      	ands	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e5a:	4a34      	ldr	r2, [pc, #208]	; (8003f2c <HAL_GPIO_Init+0x338>)
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e60:	4b32      	ldr	r3, [pc, #200]	; (8003f2c <HAL_GPIO_Init+0x338>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e84:	4a29      	ldr	r2, [pc, #164]	; (8003f2c <HAL_GPIO_Init+0x338>)
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e8a:	4b28      	ldr	r3, [pc, #160]	; (8003f2c <HAL_GPIO_Init+0x338>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	43db      	mvns	r3, r3
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4013      	ands	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003eae:	4a1f      	ldr	r2, [pc, #124]	; (8003f2c <HAL_GPIO_Init+0x338>)
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003eb4:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <HAL_GPIO_Init+0x338>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ed8:	4a14      	ldr	r2, [pc, #80]	; (8003f2c <HAL_GPIO_Init+0x338>)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	fa22 f303 	lsr.w	r3, r2, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f47f ae88 	bne.w	8003c04 <HAL_GPIO_Init+0x10>
  }
}
 8003ef4:	bf00      	nop
 8003ef6:	bf00      	nop
 8003ef8:	371c      	adds	r7, #28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr
 8003f00:	40023800 	.word	0x40023800
 8003f04:	40013800 	.word	0x40013800
 8003f08:	40020000 	.word	0x40020000
 8003f0c:	40020400 	.word	0x40020400
 8003f10:	40020800 	.word	0x40020800
 8003f14:	40020c00 	.word	0x40020c00
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	40021400 	.word	0x40021400
 8003f20:	40021800 	.word	0x40021800
 8003f24:	40021c00 	.word	0x40021c00
 8003f28:	40022000 	.word	0x40022000
 8003f2c:	40013c00 	.word	0x40013c00

08003f30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	887b      	ldrh	r3, [r7, #2]
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
 8003f4c:	e001      	b.n	8003f52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr

08003f5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	460b      	mov	r3, r1
 8003f68:	807b      	strh	r3, [r7, #2]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f6e:	787b      	ldrb	r3, [r7, #1]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f74:	887a      	ldrh	r2, [r7, #2]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f7a:	e003      	b.n	8003f84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f7c:	887b      	ldrh	r3, [r7, #2]
 8003f7e:	041a      	lsls	r2, r3, #16
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	619a      	str	r2, [r3, #24]
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	4770      	bx	lr

08003f8e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003f8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f90:	b08f      	sub	sp, #60	; 0x3c
 8003f92:	af0a      	add	r7, sp, #40	; 0x28
 8003f94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e054      	b.n	800404a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f00c feb2 	bl	8010d24 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d102      	bne.n	8003fda <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f003 ff3e 	bl	8007e60 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	603b      	str	r3, [r7, #0]
 8003fea:	687e      	ldr	r6, [r7, #4]
 8003fec:	466d      	mov	r5, sp
 8003fee:	f106 0410 	add.w	r4, r6, #16
 8003ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ff4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ffa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ffe:	e885 0003 	stmia.w	r5, {r0, r1}
 8004002:	1d33      	adds	r3, r6, #4
 8004004:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004006:	6838      	ldr	r0, [r7, #0]
 8004008:	f003 fec3 	bl	8007d92 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2101      	movs	r1, #1
 8004012:	4618      	mov	r0, r3
 8004014:	f003 ff34 	bl	8007e80 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	603b      	str	r3, [r7, #0]
 800401e:	687e      	ldr	r6, [r7, #4]
 8004020:	466d      	mov	r5, sp
 8004022:	f106 0410 	add.w	r4, r6, #16
 8004026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800402a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800402c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800402e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004032:	e885 0003 	stmia.w	r5, {r0, r1}
 8004036:	1d33      	adds	r3, r6, #4
 8004038:	cb0e      	ldmia	r3, {r1, r2, r3}
 800403a:	6838      	ldr	r0, [r7, #0]
 800403c:	f004 f896 	bl	800816c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004052 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004052:	b590      	push	{r4, r7, lr}
 8004054:	b089      	sub	sp, #36	; 0x24
 8004056:	af04      	add	r7, sp, #16
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	4608      	mov	r0, r1
 800405c:	4611      	mov	r1, r2
 800405e:	461a      	mov	r2, r3
 8004060:	4603      	mov	r3, r0
 8004062:	70fb      	strb	r3, [r7, #3]
 8004064:	460b      	mov	r3, r1
 8004066:	70bb      	strb	r3, [r7, #2]
 8004068:	4613      	mov	r3, r2
 800406a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_HCD_HC_Init+0x28>
 8004076:	2302      	movs	r3, #2
 8004078:	e076      	b.n	8004168 <HAL_HCD_HC_Init+0x116>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	212c      	movs	r1, #44	; 0x2c
 8004088:	fb01 f303 	mul.w	r3, r1, r3
 800408c:	4413      	add	r3, r2
 800408e:	333d      	adds	r3, #61	; 0x3d
 8004090:	2200      	movs	r2, #0
 8004092:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	212c      	movs	r1, #44	; 0x2c
 800409a:	fb01 f303 	mul.w	r3, r1, r3
 800409e:	4413      	add	r3, r2
 80040a0:	3338      	adds	r3, #56	; 0x38
 80040a2:	787a      	ldrb	r2, [r7, #1]
 80040a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80040a6:	78fb      	ldrb	r3, [r7, #3]
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	212c      	movs	r1, #44	; 0x2c
 80040ac:	fb01 f303 	mul.w	r3, r1, r3
 80040b0:	4413      	add	r3, r2
 80040b2:	3340      	adds	r3, #64	; 0x40
 80040b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80040b6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	212c      	movs	r1, #44	; 0x2c
 80040be:	fb01 f303 	mul.w	r3, r1, r3
 80040c2:	4413      	add	r3, r2
 80040c4:	3339      	adds	r3, #57	; 0x39
 80040c6:	78fa      	ldrb	r2, [r7, #3]
 80040c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80040ca:	78fb      	ldrb	r3, [r7, #3]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	212c      	movs	r1, #44	; 0x2c
 80040d0:	fb01 f303 	mul.w	r3, r1, r3
 80040d4:	4413      	add	r3, r2
 80040d6:	333f      	adds	r3, #63	; 0x3f
 80040d8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80040dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80040de:	78fb      	ldrb	r3, [r7, #3]
 80040e0:	78ba      	ldrb	r2, [r7, #2]
 80040e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040e6:	b2d0      	uxtb	r0, r2
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	212c      	movs	r1, #44	; 0x2c
 80040ec:	fb01 f303 	mul.w	r3, r1, r3
 80040f0:	4413      	add	r3, r2
 80040f2:	333a      	adds	r3, #58	; 0x3a
 80040f4:	4602      	mov	r2, r0
 80040f6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80040f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	da09      	bge.n	8004114 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	212c      	movs	r1, #44	; 0x2c
 8004106:	fb01 f303 	mul.w	r3, r1, r3
 800410a:	4413      	add	r3, r2
 800410c:	333b      	adds	r3, #59	; 0x3b
 800410e:	2201      	movs	r2, #1
 8004110:	701a      	strb	r2, [r3, #0]
 8004112:	e008      	b.n	8004126 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004114:	78fb      	ldrb	r3, [r7, #3]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	212c      	movs	r1, #44	; 0x2c
 800411a:	fb01 f303 	mul.w	r3, r1, r3
 800411e:	4413      	add	r3, r2
 8004120:	333b      	adds	r3, #59	; 0x3b
 8004122:	2200      	movs	r2, #0
 8004124:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	212c      	movs	r1, #44	; 0x2c
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	4413      	add	r3, r2
 8004132:	333c      	adds	r3, #60	; 0x3c
 8004134:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004138:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	787c      	ldrb	r4, [r7, #1]
 8004140:	78ba      	ldrb	r2, [r7, #2]
 8004142:	78f9      	ldrb	r1, [r7, #3]
 8004144:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004146:	9302      	str	r3, [sp, #8]
 8004148:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800414c:	9301      	str	r3, [sp, #4]
 800414e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	4623      	mov	r3, r4
 8004156:	f004 f97f 	bl	8008458 <USB_HC_Init>
 800415a:	4603      	mov	r3, r0
 800415c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004166:	7bfb      	ldrb	r3, [r7, #15]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	bd90      	pop	{r4, r7, pc}

08004170 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800417c:	2300      	movs	r3, #0
 800417e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_HCD_HC_Halt+0x1e>
 800418a:	2302      	movs	r3, #2
 800418c:	e00f      	b.n	80041ae <HAL_HCD_HC_Halt+0x3e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	78fa      	ldrb	r2, [r7, #3]
 800419c:	4611      	mov	r1, r2
 800419e:	4618      	mov	r0, r3
 80041a0:	f004 fbba 	bl	8008918 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	4608      	mov	r0, r1
 80041c2:	4611      	mov	r1, r2
 80041c4:	461a      	mov	r2, r3
 80041c6:	4603      	mov	r3, r0
 80041c8:	70fb      	strb	r3, [r7, #3]
 80041ca:	460b      	mov	r3, r1
 80041cc:	70bb      	strb	r3, [r7, #2]
 80041ce:	4613      	mov	r3, r2
 80041d0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	212c      	movs	r1, #44	; 0x2c
 80041d8:	fb01 f303 	mul.w	r3, r1, r3
 80041dc:	4413      	add	r3, r2
 80041de:	333b      	adds	r3, #59	; 0x3b
 80041e0:	78ba      	ldrb	r2, [r7, #2]
 80041e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	212c      	movs	r1, #44	; 0x2c
 80041ea:	fb01 f303 	mul.w	r3, r1, r3
 80041ee:	4413      	add	r3, r2
 80041f0:	333f      	adds	r3, #63	; 0x3f
 80041f2:	787a      	ldrb	r2, [r7, #1]
 80041f4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80041f6:	7c3b      	ldrb	r3, [r7, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d112      	bne.n	8004222 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	212c      	movs	r1, #44	; 0x2c
 8004202:	fb01 f303 	mul.w	r3, r1, r3
 8004206:	4413      	add	r3, r2
 8004208:	3342      	adds	r3, #66	; 0x42
 800420a:	2203      	movs	r2, #3
 800420c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	212c      	movs	r1, #44	; 0x2c
 8004214:	fb01 f303 	mul.w	r3, r1, r3
 8004218:	4413      	add	r3, r2
 800421a:	333d      	adds	r3, #61	; 0x3d
 800421c:	7f3a      	ldrb	r2, [r7, #28]
 800421e:	701a      	strb	r2, [r3, #0]
 8004220:	e008      	b.n	8004234 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004222:	78fb      	ldrb	r3, [r7, #3]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	212c      	movs	r1, #44	; 0x2c
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	4413      	add	r3, r2
 800422e:	3342      	adds	r3, #66	; 0x42
 8004230:	2202      	movs	r2, #2
 8004232:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004234:	787b      	ldrb	r3, [r7, #1]
 8004236:	2b03      	cmp	r3, #3
 8004238:	f200 80c6 	bhi.w	80043c8 <HAL_HCD_HC_SubmitRequest+0x210>
 800423c:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	08004255 	.word	0x08004255
 8004248:	080043b5 	.word	0x080043b5
 800424c:	080042b9 	.word	0x080042b9
 8004250:	08004337 	.word	0x08004337
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004254:	7c3b      	ldrb	r3, [r7, #16]
 8004256:	2b01      	cmp	r3, #1
 8004258:	f040 80b8 	bne.w	80043cc <HAL_HCD_HC_SubmitRequest+0x214>
 800425c:	78bb      	ldrb	r3, [r7, #2]
 800425e:	2b00      	cmp	r3, #0
 8004260:	f040 80b4 	bne.w	80043cc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004264:	8b3b      	ldrh	r3, [r7, #24]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d108      	bne.n	800427c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	212c      	movs	r1, #44	; 0x2c
 8004270:	fb01 f303 	mul.w	r3, r1, r3
 8004274:	4413      	add	r3, r2
 8004276:	3355      	adds	r3, #85	; 0x55
 8004278:	2201      	movs	r2, #1
 800427a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800427c:	78fb      	ldrb	r3, [r7, #3]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	212c      	movs	r1, #44	; 0x2c
 8004282:	fb01 f303 	mul.w	r3, r1, r3
 8004286:	4413      	add	r3, r2
 8004288:	3355      	adds	r3, #85	; 0x55
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d109      	bne.n	80042a4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	212c      	movs	r1, #44	; 0x2c
 8004296:	fb01 f303 	mul.w	r3, r1, r3
 800429a:	4413      	add	r3, r2
 800429c:	3342      	adds	r3, #66	; 0x42
 800429e:	2200      	movs	r2, #0
 80042a0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80042a2:	e093      	b.n	80043cc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	212c      	movs	r1, #44	; 0x2c
 80042aa:	fb01 f303 	mul.w	r3, r1, r3
 80042ae:	4413      	add	r3, r2
 80042b0:	3342      	adds	r3, #66	; 0x42
 80042b2:	2202      	movs	r2, #2
 80042b4:	701a      	strb	r2, [r3, #0]
      break;
 80042b6:	e089      	b.n	80043cc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80042b8:	78bb      	ldrb	r3, [r7, #2]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d11d      	bne.n	80042fa <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80042be:	78fb      	ldrb	r3, [r7, #3]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	212c      	movs	r1, #44	; 0x2c
 80042c4:	fb01 f303 	mul.w	r3, r1, r3
 80042c8:	4413      	add	r3, r2
 80042ca:	3355      	adds	r3, #85	; 0x55
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	212c      	movs	r1, #44	; 0x2c
 80042d8:	fb01 f303 	mul.w	r3, r1, r3
 80042dc:	4413      	add	r3, r2
 80042de:	3342      	adds	r3, #66	; 0x42
 80042e0:	2200      	movs	r2, #0
 80042e2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80042e4:	e073      	b.n	80043ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042e6:	78fb      	ldrb	r3, [r7, #3]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	212c      	movs	r1, #44	; 0x2c
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	4413      	add	r3, r2
 80042f2:	3342      	adds	r3, #66	; 0x42
 80042f4:	2202      	movs	r2, #2
 80042f6:	701a      	strb	r2, [r3, #0]
      break;
 80042f8:	e069      	b.n	80043ce <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80042fa:	78fb      	ldrb	r3, [r7, #3]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	212c      	movs	r1, #44	; 0x2c
 8004300:	fb01 f303 	mul.w	r3, r1, r3
 8004304:	4413      	add	r3, r2
 8004306:	3354      	adds	r3, #84	; 0x54
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800430e:	78fb      	ldrb	r3, [r7, #3]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	212c      	movs	r1, #44	; 0x2c
 8004314:	fb01 f303 	mul.w	r3, r1, r3
 8004318:	4413      	add	r3, r2
 800431a:	3342      	adds	r3, #66	; 0x42
 800431c:	2200      	movs	r2, #0
 800431e:	701a      	strb	r2, [r3, #0]
      break;
 8004320:	e055      	b.n	80043ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004322:	78fb      	ldrb	r3, [r7, #3]
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	212c      	movs	r1, #44	; 0x2c
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	4413      	add	r3, r2
 800432e:	3342      	adds	r3, #66	; 0x42
 8004330:	2202      	movs	r2, #2
 8004332:	701a      	strb	r2, [r3, #0]
      break;
 8004334:	e04b      	b.n	80043ce <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004336:	78bb      	ldrb	r3, [r7, #2]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d11d      	bne.n	8004378 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	212c      	movs	r1, #44	; 0x2c
 8004342:	fb01 f303 	mul.w	r3, r1, r3
 8004346:	4413      	add	r3, r2
 8004348:	3355      	adds	r3, #85	; 0x55
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d109      	bne.n	8004364 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	212c      	movs	r1, #44	; 0x2c
 8004356:	fb01 f303 	mul.w	r3, r1, r3
 800435a:	4413      	add	r3, r2
 800435c:	3342      	adds	r3, #66	; 0x42
 800435e:	2200      	movs	r2, #0
 8004360:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004362:	e034      	b.n	80043ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004364:	78fb      	ldrb	r3, [r7, #3]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	212c      	movs	r1, #44	; 0x2c
 800436a:	fb01 f303 	mul.w	r3, r1, r3
 800436e:	4413      	add	r3, r2
 8004370:	3342      	adds	r3, #66	; 0x42
 8004372:	2202      	movs	r2, #2
 8004374:	701a      	strb	r2, [r3, #0]
      break;
 8004376:	e02a      	b.n	80043ce <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	212c      	movs	r1, #44	; 0x2c
 800437e:	fb01 f303 	mul.w	r3, r1, r3
 8004382:	4413      	add	r3, r2
 8004384:	3354      	adds	r3, #84	; 0x54
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d109      	bne.n	80043a0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800438c:	78fb      	ldrb	r3, [r7, #3]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	212c      	movs	r1, #44	; 0x2c
 8004392:	fb01 f303 	mul.w	r3, r1, r3
 8004396:	4413      	add	r3, r2
 8004398:	3342      	adds	r3, #66	; 0x42
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
      break;
 800439e:	e016      	b.n	80043ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043a0:	78fb      	ldrb	r3, [r7, #3]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	212c      	movs	r1, #44	; 0x2c
 80043a6:	fb01 f303 	mul.w	r3, r1, r3
 80043aa:	4413      	add	r3, r2
 80043ac:	3342      	adds	r3, #66	; 0x42
 80043ae:	2202      	movs	r2, #2
 80043b0:	701a      	strb	r2, [r3, #0]
      break;
 80043b2:	e00c      	b.n	80043ce <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	212c      	movs	r1, #44	; 0x2c
 80043ba:	fb01 f303 	mul.w	r3, r1, r3
 80043be:	4413      	add	r3, r2
 80043c0:	3342      	adds	r3, #66	; 0x42
 80043c2:	2200      	movs	r2, #0
 80043c4:	701a      	strb	r2, [r3, #0]
      break;
 80043c6:	e002      	b.n	80043ce <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80043c8:	bf00      	nop
 80043ca:	e000      	b.n	80043ce <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80043cc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	212c      	movs	r1, #44	; 0x2c
 80043d4:	fb01 f303 	mul.w	r3, r1, r3
 80043d8:	4413      	add	r3, r2
 80043da:	3344      	adds	r3, #68	; 0x44
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	8b3a      	ldrh	r2, [r7, #24]
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	202c      	movs	r0, #44	; 0x2c
 80043e8:	fb00 f303 	mul.w	r3, r0, r3
 80043ec:	440b      	add	r3, r1
 80043ee:	334c      	adds	r3, #76	; 0x4c
 80043f0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	212c      	movs	r1, #44	; 0x2c
 80043f8:	fb01 f303 	mul.w	r3, r1, r3
 80043fc:	4413      	add	r3, r2
 80043fe:	3360      	adds	r3, #96	; 0x60
 8004400:	2200      	movs	r2, #0
 8004402:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	212c      	movs	r1, #44	; 0x2c
 800440a:	fb01 f303 	mul.w	r3, r1, r3
 800440e:	4413      	add	r3, r2
 8004410:	3350      	adds	r3, #80	; 0x50
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004416:	78fb      	ldrb	r3, [r7, #3]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	212c      	movs	r1, #44	; 0x2c
 800441c:	fb01 f303 	mul.w	r3, r1, r3
 8004420:	4413      	add	r3, r2
 8004422:	3339      	adds	r3, #57	; 0x39
 8004424:	78fa      	ldrb	r2, [r7, #3]
 8004426:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	212c      	movs	r1, #44	; 0x2c
 800442e:	fb01 f303 	mul.w	r3, r1, r3
 8004432:	4413      	add	r3, r2
 8004434:	3361      	adds	r3, #97	; 0x61
 8004436:	2200      	movs	r2, #0
 8004438:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	222c      	movs	r2, #44	; 0x2c
 8004442:	fb02 f303 	mul.w	r3, r2, r3
 8004446:	3338      	adds	r3, #56	; 0x38
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	18d1      	adds	r1, r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	461a      	mov	r2, r3
 8004454:	f004 f90e 	bl	8008674 <USB_HC_StartXfer>
 8004458:	4603      	mov	r3, r0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop

08004464 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f003 fe36 	bl	80080ec <USB_GetMode>
 8004480:	4603      	mov	r3, r0
 8004482:	2b01      	cmp	r3, #1
 8004484:	f040 80ef 	bne.w	8004666 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f003 fe1b 	bl	80080c8 <USB_ReadInterrupts>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 80e5 	beq.w	8004664 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f003 fe12 	bl	80080c8 <USB_ReadInterrupts>
 80044a4:	4603      	mov	r3, r0
 80044a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044ae:	d104      	bne.n	80044ba <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80044b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f003 fe02 	bl	80080c8 <USB_ReadInterrupts>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ce:	d104      	bne.n	80044da <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80044d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f003 fdf2 	bl	80080c8 <USB_ReadInterrupts>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044ee:	d104      	bne.n	80044fa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80044f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f003 fde2 	bl	80080c8 <USB_ReadInterrupts>
 8004504:	4603      	mov	r3, r0
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b02      	cmp	r3, #2
 800450c:	d103      	bne.n	8004516 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2202      	movs	r2, #2
 8004514:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f003 fdd4 	bl	80080c8 <USB_ReadInterrupts>
 8004520:	4603      	mov	r3, r0
 8004522:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800452a:	d115      	bne.n	8004558 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004534:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d108      	bne.n	8004558 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f00c fc6a 	bl	8010e20 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2101      	movs	r1, #1
 8004552:	4618      	mov	r0, r3
 8004554:	f003 febe 	bl	80082d4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f003 fdb3 	bl	80080c8 <USB_ReadInterrupts>
 8004562:	4603      	mov	r3, r0
 8004564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800456c:	d102      	bne.n	8004574 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f001 fa01 	bl	8005976 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f003 fda5 	bl	80080c8 <USB_ReadInterrupts>
 800457e:	4603      	mov	r3, r0
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b08      	cmp	r3, #8
 8004586:	d106      	bne.n	8004596 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f00c fc2d 	bl	8010de8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2208      	movs	r2, #8
 8004594:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f003 fd94 	bl	80080c8 <USB_ReadInterrupts>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f003 0310 	and.w	r3, r3, #16
 80045a6:	2b10      	cmp	r3, #16
 80045a8:	d101      	bne.n	80045ae <HAL_HCD_IRQHandler+0x14a>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <HAL_HCD_IRQHandler+0x14c>
 80045ae:	2300      	movs	r3, #0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d012      	beq.n	80045da <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0210 	bic.w	r2, r2, #16
 80045c2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f001 f904 	bl	80057d2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699a      	ldr	r2, [r3, #24]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0210 	orr.w	r2, r2, #16
 80045d8:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f003 fd72 	bl	80080c8 <USB_ReadInterrupts>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045ee:	d13a      	bne.n	8004666 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f004 f97f 	bl	80088f8 <USB_HC_ReadInterrupt>
 80045fa:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	e025      	b.n	800464e <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f003 030f 	and.w	r3, r3, #15
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	fa22 f303 	lsr.w	r3, r2, r3
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d018      	beq.n	8004648 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4413      	add	r3, r2
 800461e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800462c:	d106      	bne.n	800463c <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	4619      	mov	r1, r3
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f8a9 	bl	800478c <HCD_HC_IN_IRQHandler>
 800463a:	e005      	b.n	8004648 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	b2db      	uxtb	r3, r3
 8004640:	4619      	mov	r1, r3
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fcc4 	bl	8004fd0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	3301      	adds	r3, #1
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	429a      	cmp	r2, r3
 8004656:	d3d4      	bcc.n	8004602 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004660:	615a      	str	r2, [r3, #20]
 8004662:	e000      	b.n	8004666 <HAL_HCD_IRQHandler+0x202>
      return;
 8004664:	bf00      	nop
    }
  }
}
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800467a:	2b01      	cmp	r3, #1
 800467c:	d101      	bne.n	8004682 <HAL_HCD_Start+0x16>
 800467e:	2302      	movs	r3, #2
 8004680:	e013      	b.n	80046aa <HAL_HCD_Start+0x3e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2101      	movs	r1, #1
 8004690:	4618      	mov	r0, r3
 8004692:	f003 fe82 	bl	800839a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f003 fbd0 	bl	8007e40 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b082      	sub	sp, #8
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d101      	bne.n	80046c8 <HAL_HCD_Stop+0x16>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e00d      	b.n	80046e4 <HAL_HCD_Stop+0x32>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f004 fa75 	bl	8008bc4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f003 fe24 	bl	8008346 <USB_ResetPort>
 80046fe:	4603      	mov	r3, r0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	460b      	mov	r3, r1
 8004712:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	212c      	movs	r1, #44	; 0x2c
 800471a:	fb01 f303 	mul.w	r3, r1, r3
 800471e:	4413      	add	r3, r2
 8004720:	3360      	adds	r3, #96	; 0x60
 8004722:	781b      	ldrb	r3, [r3, #0]
}
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	bc80      	pop	{r7}
 800472c:	4770      	bx	lr

0800472e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	460b      	mov	r3, r1
 8004738:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800473a:	78fb      	ldrb	r3, [r7, #3]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	212c      	movs	r1, #44	; 0x2c
 8004740:	fb01 f303 	mul.w	r3, r1, r3
 8004744:	4413      	add	r3, r2
 8004746:	3350      	adds	r3, #80	; 0x50
 8004748:	681b      	ldr	r3, [r3, #0]
}
 800474a:	4618      	mov	r0, r3
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr

08004754 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f003 fe68 	bl	8008436 <USB_GetCurrentFrame>
 8004766:	4603      	mov	r3, r0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f003 fe44 	bl	800840a <USB_GetHostSpeed>
 8004782:	4603      	mov	r3, r0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80047a2:	78fb      	ldrb	r3, [r7, #3]
 80047a4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d119      	bne.n	80047f0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c8:	461a      	mov	r2, r3
 80047ca:	2304      	movs	r3, #4
 80047cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	0151      	lsls	r1, r2, #5
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	440a      	add	r2, r1
 80047e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047e8:	f043 0302 	orr.w	r3, r3, #2
 80047ec:	60d3      	str	r3, [r2, #12]
 80047ee:	e101      	b.n	80049f4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004806:	d12b      	bne.n	8004860 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	4413      	add	r3, r2
 8004810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004814:	461a      	mov	r2, r3
 8004816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800481a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	212c      	movs	r1, #44	; 0x2c
 8004822:	fb01 f303 	mul.w	r3, r1, r3
 8004826:	4413      	add	r3, r2
 8004828:	3361      	adds	r3, #97	; 0x61
 800482a:	2207      	movs	r2, #7
 800482c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	4413      	add	r3, r2
 8004836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	0151      	lsls	r1, r2, #5
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	440a      	add	r2, r1
 8004844:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004848:	f043 0302 	orr.w	r3, r3, #2
 800484c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	4611      	mov	r1, r2
 8004858:	4618      	mov	r0, r3
 800485a:	f004 f85d 	bl	8008918 <USB_HC_Halt>
 800485e:	e0c9      	b.n	80049f4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	4413      	add	r3, r2
 8004868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b20      	cmp	r3, #32
 8004874:	d109      	bne.n	800488a <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	4413      	add	r3, r2
 800487e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004882:	461a      	mov	r2, r3
 8004884:	2320      	movs	r3, #32
 8004886:	6093      	str	r3, [r2, #8]
 8004888:	e0b4      	b.n	80049f4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	4413      	add	r3, r2
 8004892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b08      	cmp	r3, #8
 800489e:	d133      	bne.n	8004908 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	0151      	lsls	r1, r2, #5
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	440a      	add	r2, r1
 80048b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048ba:	f043 0302 	orr.w	r3, r3, #2
 80048be:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	212c      	movs	r1, #44	; 0x2c
 80048c6:	fb01 f303 	mul.w	r3, r1, r3
 80048ca:	4413      	add	r3, r2
 80048cc:	3361      	adds	r3, #97	; 0x61
 80048ce:	2205      	movs	r2, #5
 80048d0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048de:	461a      	mov	r2, r3
 80048e0:	2310      	movs	r3, #16
 80048e2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f0:	461a      	mov	r2, r3
 80048f2:	2308      	movs	r3, #8
 80048f4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	4611      	mov	r1, r2
 8004900:	4618      	mov	r0, r3
 8004902:	f004 f809 	bl	8008918 <USB_HC_Halt>
 8004906:	e075      	b.n	80049f4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	4413      	add	r3, r2
 8004910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800491a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491e:	d134      	bne.n	800498a <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4413      	add	r3, r2
 8004928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	0151      	lsls	r1, r2, #5
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	440a      	add	r2, r1
 8004936:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800493a:	f043 0302 	orr.w	r3, r3, #2
 800493e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	212c      	movs	r1, #44	; 0x2c
 8004946:	fb01 f303 	mul.w	r3, r1, r3
 800494a:	4413      	add	r3, r2
 800494c:	3361      	adds	r3, #97	; 0x61
 800494e:	2208      	movs	r2, #8
 8004950:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	4413      	add	r3, r2
 800495a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800495e:	461a      	mov	r2, r3
 8004960:	2310      	movs	r3, #16
 8004962:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	4413      	add	r3, r2
 800496c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004970:	461a      	mov	r2, r3
 8004972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004976:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	4611      	mov	r1, r2
 8004982:	4618      	mov	r0, r3
 8004984:	f003 ffc8 	bl	8008918 <USB_HC_Halt>
 8004988:	e034      	b.n	80049f4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	4413      	add	r3, r2
 8004992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499c:	2b80      	cmp	r3, #128	; 0x80
 800499e:	d129      	bne.n	80049f4 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	0151      	lsls	r1, r2, #5
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	440a      	add	r2, r1
 80049b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049ba:	f043 0302 	orr.w	r3, r3, #2
 80049be:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	212c      	movs	r1, #44	; 0x2c
 80049c6:	fb01 f303 	mul.w	r3, r1, r3
 80049ca:	4413      	add	r3, r2
 80049cc:	3361      	adds	r3, #97	; 0x61
 80049ce:	2206      	movs	r2, #6
 80049d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	4611      	mov	r1, r2
 80049dc:	4618      	mov	r0, r3
 80049de:	f003 ff9b 	bl	8008918 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ee:	461a      	mov	r2, r3
 80049f0:	2380      	movs	r3, #128	; 0x80
 80049f2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a0a:	d122      	bne.n	8004a52 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	0151      	lsls	r1, r2, #5
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	440a      	add	r2, r1
 8004a22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a26:	f043 0302 	orr.w	r3, r3, #2
 8004a2a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	4611      	mov	r1, r2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f003 ff6e 	bl	8008918 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a48:	461a      	mov	r2, r3
 8004a4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a4e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004a50:	e2ba      	b.n	8004fc8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	f040 811b 	bne.w	8004ca0 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d019      	beq.n	8004aa6 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	212c      	movs	r1, #44	; 0x2c
 8004a78:	fb01 f303 	mul.w	r3, r1, r3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	3348      	adds	r3, #72	; 0x48
 8004a80:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	0159      	lsls	r1, r3, #5
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	440b      	add	r3, r1
 8004a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004a94:	1ad2      	subs	r2, r2, r3
 8004a96:	6879      	ldr	r1, [r7, #4]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	202c      	movs	r0, #44	; 0x2c
 8004a9c:	fb00 f303 	mul.w	r3, r0, r3
 8004aa0:	440b      	add	r3, r1
 8004aa2:	3350      	adds	r3, #80	; 0x50
 8004aa4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	212c      	movs	r1, #44	; 0x2c
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	3361      	adds	r3, #97	; 0x61
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	212c      	movs	r1, #44	; 0x2c
 8004abe:	fb01 f303 	mul.w	r3, r1, r3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	335c      	adds	r3, #92	; 0x5c
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	2301      	movs	r3, #1
 8004ada:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	212c      	movs	r1, #44	; 0x2c
 8004ae2:	fb01 f303 	mul.w	r3, r1, r3
 8004ae6:	4413      	add	r3, r2
 8004ae8:	333f      	adds	r3, #63	; 0x3f
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d009      	beq.n	8004b04 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	212c      	movs	r1, #44	; 0x2c
 8004af6:	fb01 f303 	mul.w	r3, r1, r3
 8004afa:	4413      	add	r3, r2
 8004afc:	333f      	adds	r3, #63	; 0x3f
 8004afe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d121      	bne.n	8004b48 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	0151      	lsls	r1, r2, #5
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	440a      	add	r2, r1
 8004b1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b1e:	f043 0302 	orr.w	r3, r3, #2
 8004b22:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f003 fef2 	bl	8008918 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b40:	461a      	mov	r2, r3
 8004b42:	2310      	movs	r3, #16
 8004b44:	6093      	str	r3, [r2, #8]
 8004b46:	e066      	b.n	8004c16 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	212c      	movs	r1, #44	; 0x2c
 8004b4e:	fb01 f303 	mul.w	r3, r1, r3
 8004b52:	4413      	add	r3, r2
 8004b54:	333f      	adds	r3, #63	; 0x3f
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d127      	bne.n	8004bac <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	0151      	lsls	r1, r2, #5
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	440a      	add	r2, r1
 8004b72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b7a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	212c      	movs	r1, #44	; 0x2c
 8004b82:	fb01 f303 	mul.w	r3, r1, r3
 8004b86:	4413      	add	r3, r2
 8004b88:	3360      	adds	r3, #96	; 0x60
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	b2d9      	uxtb	r1, r3
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	202c      	movs	r0, #44	; 0x2c
 8004b98:	fb00 f303 	mul.w	r3, r0, r3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3360      	adds	r3, #96	; 0x60
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f00c f949 	bl	8010e3c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004baa:	e034      	b.n	8004c16 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	212c      	movs	r1, #44	; 0x2c
 8004bb2:	fb01 f303 	mul.w	r3, r1, r3
 8004bb6:	4413      	add	r3, r2
 8004bb8:	333f      	adds	r3, #63	; 0x3f
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d12a      	bne.n	8004c16 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	212c      	movs	r1, #44	; 0x2c
 8004bc6:	fb01 f303 	mul.w	r3, r1, r3
 8004bca:	4413      	add	r3, r2
 8004bcc:	3360      	adds	r3, #96	; 0x60
 8004bce:	2201      	movs	r2, #1
 8004bd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	212c      	movs	r1, #44	; 0x2c
 8004bd8:	fb01 f303 	mul.w	r3, r1, r3
 8004bdc:	4413      	add	r3, r2
 8004bde:	3354      	adds	r3, #84	; 0x54
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	f083 0301 	eor.w	r3, r3, #1
 8004be6:	b2d8      	uxtb	r0, r3
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	212c      	movs	r1, #44	; 0x2c
 8004bee:	fb01 f303 	mul.w	r3, r1, r3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	3354      	adds	r3, #84	; 0x54
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	b2d9      	uxtb	r1, r3
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	202c      	movs	r0, #44	; 0x2c
 8004c04:	fb00 f303 	mul.w	r3, r0, r3
 8004c08:	4413      	add	r3, r2
 8004c0a:	3360      	adds	r3, #96	; 0x60
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f00c f913 	bl	8010e3c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d12b      	bne.n	8004c76 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	212c      	movs	r1, #44	; 0x2c
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	4413      	add	r3, r2
 8004c2a:	3348      	adds	r3, #72	; 0x48
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	202c      	movs	r0, #44	; 0x2c
 8004c34:	fb00 f202 	mul.w	r2, r0, r2
 8004c38:	440a      	add	r2, r1
 8004c3a:	3240      	adds	r2, #64	; 0x40
 8004c3c:	8812      	ldrh	r2, [r2, #0]
 8004c3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 81be 	beq.w	8004fc8 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	212c      	movs	r1, #44	; 0x2c
 8004c52:	fb01 f303 	mul.w	r3, r1, r3
 8004c56:	4413      	add	r3, r2
 8004c58:	3354      	adds	r3, #84	; 0x54
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	f083 0301 	eor.w	r3, r3, #1
 8004c60:	b2d8      	uxtb	r0, r3
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	212c      	movs	r1, #44	; 0x2c
 8004c68:	fb01 f303 	mul.w	r3, r1, r3
 8004c6c:	4413      	add	r3, r2
 8004c6e:	3354      	adds	r3, #84	; 0x54
 8004c70:	4602      	mov	r2, r0
 8004c72:	701a      	strb	r2, [r3, #0]
}
 8004c74:	e1a8      	b.n	8004fc8 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	212c      	movs	r1, #44	; 0x2c
 8004c7c:	fb01 f303 	mul.w	r3, r1, r3
 8004c80:	4413      	add	r3, r2
 8004c82:	3354      	adds	r3, #84	; 0x54
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	f083 0301 	eor.w	r3, r3, #1
 8004c8a:	b2d8      	uxtb	r0, r3
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	212c      	movs	r1, #44	; 0x2c
 8004c92:	fb01 f303 	mul.w	r3, r1, r3
 8004c96:	4413      	add	r3, r2
 8004c98:	3354      	adds	r3, #84	; 0x54
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	701a      	strb	r2, [r3, #0]
}
 8004c9e:	e193      	b.n	8004fc8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	f040 8106 	bne.w	8004ec4 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	0151      	lsls	r1, r2, #5
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	440a      	add	r2, r1
 8004cce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cd2:	f023 0302 	bic.w	r3, r3, #2
 8004cd6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	212c      	movs	r1, #44	; 0x2c
 8004cde:	fb01 f303 	mul.w	r3, r1, r3
 8004ce2:	4413      	add	r3, r2
 8004ce4:	3361      	adds	r3, #97	; 0x61
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d109      	bne.n	8004d00 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	212c      	movs	r1, #44	; 0x2c
 8004cf2:	fb01 f303 	mul.w	r3, r1, r3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3360      	adds	r3, #96	; 0x60
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	701a      	strb	r2, [r3, #0]
 8004cfe:	e0c9      	b.n	8004e94 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	212c      	movs	r1, #44	; 0x2c
 8004d06:	fb01 f303 	mul.w	r3, r1, r3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	3361      	adds	r3, #97	; 0x61
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b05      	cmp	r3, #5
 8004d12:	d109      	bne.n	8004d28 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	212c      	movs	r1, #44	; 0x2c
 8004d1a:	fb01 f303 	mul.w	r3, r1, r3
 8004d1e:	4413      	add	r3, r2
 8004d20:	3360      	adds	r3, #96	; 0x60
 8004d22:	2205      	movs	r2, #5
 8004d24:	701a      	strb	r2, [r3, #0]
 8004d26:	e0b5      	b.n	8004e94 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	212c      	movs	r1, #44	; 0x2c
 8004d2e:	fb01 f303 	mul.w	r3, r1, r3
 8004d32:	4413      	add	r3, r2
 8004d34:	3361      	adds	r3, #97	; 0x61
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b06      	cmp	r3, #6
 8004d3a:	d009      	beq.n	8004d50 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	212c      	movs	r1, #44	; 0x2c
 8004d42:	fb01 f303 	mul.w	r3, r1, r3
 8004d46:	4413      	add	r3, r2
 8004d48:	3361      	adds	r3, #97	; 0x61
 8004d4a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d150      	bne.n	8004df2 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	212c      	movs	r1, #44	; 0x2c
 8004d56:	fb01 f303 	mul.w	r3, r1, r3
 8004d5a:	4413      	add	r3, r2
 8004d5c:	335c      	adds	r3, #92	; 0x5c
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	1c5a      	adds	r2, r3, #1
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	202c      	movs	r0, #44	; 0x2c
 8004d68:	fb00 f303 	mul.w	r3, r0, r3
 8004d6c:	440b      	add	r3, r1
 8004d6e:	335c      	adds	r3, #92	; 0x5c
 8004d70:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	212c      	movs	r1, #44	; 0x2c
 8004d78:	fb01 f303 	mul.w	r3, r1, r3
 8004d7c:	4413      	add	r3, r2
 8004d7e:	335c      	adds	r3, #92	; 0x5c
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d912      	bls.n	8004dac <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	212c      	movs	r1, #44	; 0x2c
 8004d8c:	fb01 f303 	mul.w	r3, r1, r3
 8004d90:	4413      	add	r3, r2
 8004d92:	335c      	adds	r3, #92	; 0x5c
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	212c      	movs	r1, #44	; 0x2c
 8004d9e:	fb01 f303 	mul.w	r3, r1, r3
 8004da2:	4413      	add	r3, r2
 8004da4:	3360      	adds	r3, #96	; 0x60
 8004da6:	2204      	movs	r2, #4
 8004da8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004daa:	e073      	b.n	8004e94 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	212c      	movs	r1, #44	; 0x2c
 8004db2:	fb01 f303 	mul.w	r3, r1, r3
 8004db6:	4413      	add	r3, r2
 8004db8:	3360      	adds	r3, #96	; 0x60
 8004dba:	2202      	movs	r2, #2
 8004dbc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dd4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ddc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dea:	461a      	mov	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004df0:	e050      	b.n	8004e94 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	212c      	movs	r1, #44	; 0x2c
 8004df8:	fb01 f303 	mul.w	r3, r1, r3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	3361      	adds	r3, #97	; 0x61
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	d122      	bne.n	8004e4c <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	212c      	movs	r1, #44	; 0x2c
 8004e0c:	fb01 f303 	mul.w	r3, r1, r3
 8004e10:	4413      	add	r3, r2
 8004e12:	3360      	adds	r3, #96	; 0x60
 8004e14:	2202      	movs	r2, #2
 8004e16:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e2e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e36:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e44:	461a      	mov	r2, r3
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	e023      	b.n	8004e94 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	212c      	movs	r1, #44	; 0x2c
 8004e52:	fb01 f303 	mul.w	r3, r1, r3
 8004e56:	4413      	add	r3, r2
 8004e58:	3361      	adds	r3, #97	; 0x61
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b07      	cmp	r3, #7
 8004e5e:	d119      	bne.n	8004e94 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	212c      	movs	r1, #44	; 0x2c
 8004e66:	fb01 f303 	mul.w	r3, r1, r3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	335c      	adds	r3, #92	; 0x5c
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	202c      	movs	r0, #44	; 0x2c
 8004e78:	fb00 f303 	mul.w	r3, r0, r3
 8004e7c:	440b      	add	r3, r1
 8004e7e:	335c      	adds	r3, #92	; 0x5c
 8004e80:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	212c      	movs	r1, #44	; 0x2c
 8004e88:	fb01 f303 	mul.w	r3, r1, r3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3360      	adds	r3, #96	; 0x60
 8004e90:	2204      	movs	r2, #4
 8004e92:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	b2d9      	uxtb	r1, r3
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	202c      	movs	r0, #44	; 0x2c
 8004eb0:	fb00 f303 	mul.w	r3, r0, r3
 8004eb4:	4413      	add	r3, r2
 8004eb6:	3360      	adds	r3, #96	; 0x60
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f00b ffbd 	bl	8010e3c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004ec2:	e081      	b.n	8004fc8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 0310 	and.w	r3, r3, #16
 8004ed6:	2b10      	cmp	r3, #16
 8004ed8:	d176      	bne.n	8004fc8 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	212c      	movs	r1, #44	; 0x2c
 8004ee0:	fb01 f303 	mul.w	r3, r1, r3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	333f      	adds	r3, #63	; 0x3f
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d121      	bne.n	8004f32 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	212c      	movs	r1, #44	; 0x2c
 8004ef4:	fb01 f303 	mul.w	r3, r1, r3
 8004ef8:	4413      	add	r3, r2
 8004efa:	335c      	adds	r3, #92	; 0x5c
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	0151      	lsls	r1, r2, #5
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	440a      	add	r2, r1
 8004f16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f1a:	f043 0302 	orr.w	r3, r3, #2
 8004f1e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	4611      	mov	r1, r2
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f003 fcf4 	bl	8008918 <USB_HC_Halt>
 8004f30:	e041      	b.n	8004fb6 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	212c      	movs	r1, #44	; 0x2c
 8004f38:	fb01 f303 	mul.w	r3, r1, r3
 8004f3c:	4413      	add	r3, r2
 8004f3e:	333f      	adds	r3, #63	; 0x3f
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d009      	beq.n	8004f5a <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	212c      	movs	r1, #44	; 0x2c
 8004f4c:	fb01 f303 	mul.w	r3, r1, r3
 8004f50:	4413      	add	r3, r2
 8004f52:	333f      	adds	r3, #63	; 0x3f
 8004f54:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d12d      	bne.n	8004fb6 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	212c      	movs	r1, #44	; 0x2c
 8004f60:	fb01 f303 	mul.w	r3, r1, r3
 8004f64:	4413      	add	r3, r2
 8004f66:	335c      	adds	r3, #92	; 0x5c
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d120      	bne.n	8004fb6 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	212c      	movs	r1, #44	; 0x2c
 8004f7a:	fb01 f303 	mul.w	r3, r1, r3
 8004f7e:	4413      	add	r3, r2
 8004f80:	3361      	adds	r3, #97	; 0x61
 8004f82:	2203      	movs	r2, #3
 8004f84:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	0151      	lsls	r1, r2, #5
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	440a      	add	r2, r1
 8004f9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fa0:	f043 0302 	orr.w	r3, r3, #2
 8004fa4:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	4611      	mov	r1, r2
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f003 fcb1 	bl	8008918 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	2310      	movs	r3, #16
 8004fc6:	6093      	str	r3, [r2, #8]
}
 8004fc8:	bf00      	nop
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004fe6:	78fb      	ldrb	r3, [r7, #3]
 8004fe8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d119      	bne.n	8005034 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	4413      	add	r3, r2
 8005008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500c:	461a      	mov	r2, r3
 800500e:	2304      	movs	r3, #4
 8005010:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	4413      	add	r3, r2
 800501a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	0151      	lsls	r1, r2, #5
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	440a      	add	r2, r1
 8005028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800502c:	f043 0302 	orr.w	r3, r3, #2
 8005030:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005032:	e3ca      	b.n	80057ca <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	4413      	add	r3, r2
 800503c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b20      	cmp	r3, #32
 8005048:	d13e      	bne.n	80050c8 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	4413      	add	r3, r2
 8005052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005056:	461a      	mov	r2, r3
 8005058:	2320      	movs	r3, #32
 800505a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	212c      	movs	r1, #44	; 0x2c
 8005062:	fb01 f303 	mul.w	r3, r1, r3
 8005066:	4413      	add	r3, r2
 8005068:	333d      	adds	r3, #61	; 0x3d
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	2b01      	cmp	r3, #1
 800506e:	f040 83ac 	bne.w	80057ca <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	212c      	movs	r1, #44	; 0x2c
 8005078:	fb01 f303 	mul.w	r3, r1, r3
 800507c:	4413      	add	r3, r2
 800507e:	333d      	adds	r3, #61	; 0x3d
 8005080:	2200      	movs	r2, #0
 8005082:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	212c      	movs	r1, #44	; 0x2c
 800508a:	fb01 f303 	mul.w	r3, r1, r3
 800508e:	4413      	add	r3, r2
 8005090:	3360      	adds	r3, #96	; 0x60
 8005092:	2202      	movs	r2, #2
 8005094:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	4413      	add	r3, r2
 800509e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	0151      	lsls	r1, r2, #5
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	440a      	add	r2, r1
 80050ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050b0:	f043 0302 	orr.w	r3, r3, #2
 80050b4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	4611      	mov	r1, r2
 80050c0:	4618      	mov	r0, r3
 80050c2:	f003 fc29 	bl	8008918 <USB_HC_Halt>
}
 80050c6:	e380      	b.n	80057ca <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050de:	d122      	bne.n	8005126 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	0151      	lsls	r1, r2, #5
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	440a      	add	r2, r1
 80050f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050fa:	f043 0302 	orr.w	r3, r3, #2
 80050fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	4611      	mov	r1, r2
 800510a:	4618      	mov	r0, r3
 800510c:	f003 fc04 	bl	8008918 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	4413      	add	r3, r2
 8005118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800511c:	461a      	mov	r2, r3
 800511e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005122:	6093      	str	r3, [r2, #8]
}
 8005124:	e351      	b.n	80057ca <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	4413      	add	r3, r2
 800512e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b01      	cmp	r3, #1
 800513a:	d150      	bne.n	80051de <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	212c      	movs	r1, #44	; 0x2c
 8005142:	fb01 f303 	mul.w	r3, r1, r3
 8005146:	4413      	add	r3, r2
 8005148:	335c      	adds	r3, #92	; 0x5c
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	4413      	add	r3, r2
 8005156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005160:	2b40      	cmp	r3, #64	; 0x40
 8005162:	d111      	bne.n	8005188 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	212c      	movs	r1, #44	; 0x2c
 800516a:	fb01 f303 	mul.w	r3, r1, r3
 800516e:	4413      	add	r3, r2
 8005170:	333d      	adds	r3, #61	; 0x3d
 8005172:	2201      	movs	r2, #1
 8005174:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	4413      	add	r3, r2
 800517e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005182:	461a      	mov	r2, r3
 8005184:	2340      	movs	r3, #64	; 0x40
 8005186:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	4413      	add	r3, r2
 8005190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	0151      	lsls	r1, r2, #5
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	440a      	add	r2, r1
 800519e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051a2:	f043 0302 	orr.w	r3, r3, #2
 80051a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	4611      	mov	r1, r2
 80051b2:	4618      	mov	r0, r3
 80051b4:	f003 fbb0 	bl	8008918 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c4:	461a      	mov	r2, r3
 80051c6:	2301      	movs	r3, #1
 80051c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	212c      	movs	r1, #44	; 0x2c
 80051d0:	fb01 f303 	mul.w	r3, r1, r3
 80051d4:	4413      	add	r3, r2
 80051d6:	3361      	adds	r3, #97	; 0x61
 80051d8:	2201      	movs	r2, #1
 80051da:	701a      	strb	r2, [r3, #0]
}
 80051dc:	e2f5      	b.n	80057ca <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f0:	2b40      	cmp	r3, #64	; 0x40
 80051f2:	d13c      	bne.n	800526e <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	212c      	movs	r1, #44	; 0x2c
 80051fa:	fb01 f303 	mul.w	r3, r1, r3
 80051fe:	4413      	add	r3, r2
 8005200:	3361      	adds	r3, #97	; 0x61
 8005202:	2204      	movs	r2, #4
 8005204:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	212c      	movs	r1, #44	; 0x2c
 800520c:	fb01 f303 	mul.w	r3, r1, r3
 8005210:	4413      	add	r3, r2
 8005212:	333d      	adds	r3, #61	; 0x3d
 8005214:	2201      	movs	r2, #1
 8005216:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	212c      	movs	r1, #44	; 0x2c
 800521e:	fb01 f303 	mul.w	r3, r1, r3
 8005222:	4413      	add	r3, r2
 8005224:	335c      	adds	r3, #92	; 0x5c
 8005226:	2200      	movs	r2, #0
 8005228:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	4413      	add	r3, r2
 8005232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	0151      	lsls	r1, r2, #5
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	440a      	add	r2, r1
 8005240:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005244:	f043 0302 	orr.w	r3, r3, #2
 8005248:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	4611      	mov	r1, r2
 8005254:	4618      	mov	r0, r3
 8005256:	f003 fb5f 	bl	8008918 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	4413      	add	r3, r2
 8005262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005266:	461a      	mov	r2, r3
 8005268:	2340      	movs	r3, #64	; 0x40
 800526a:	6093      	str	r3, [r2, #8]
}
 800526c:	e2ad      	b.n	80057ca <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	4413      	add	r3, r2
 8005276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b08      	cmp	r3, #8
 8005282:	d12a      	bne.n	80052da <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	4413      	add	r3, r2
 800528c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005290:	461a      	mov	r2, r3
 8005292:	2308      	movs	r3, #8
 8005294:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	4413      	add	r3, r2
 800529e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	0151      	lsls	r1, r2, #5
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	440a      	add	r2, r1
 80052ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052b0:	f043 0302 	orr.w	r3, r3, #2
 80052b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	b2d2      	uxtb	r2, r2
 80052be:	4611      	mov	r1, r2
 80052c0:	4618      	mov	r0, r3
 80052c2:	f003 fb29 	bl	8008918 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	212c      	movs	r1, #44	; 0x2c
 80052cc:	fb01 f303 	mul.w	r3, r1, r3
 80052d0:	4413      	add	r3, r2
 80052d2:	3361      	adds	r3, #97	; 0x61
 80052d4:	2205      	movs	r2, #5
 80052d6:	701a      	strb	r2, [r3, #0]
}
 80052d8:	e277      	b.n	80057ca <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	d150      	bne.n	8005392 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	212c      	movs	r1, #44	; 0x2c
 80052f6:	fb01 f303 	mul.w	r3, r1, r3
 80052fa:	4413      	add	r3, r2
 80052fc:	335c      	adds	r3, #92	; 0x5c
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	212c      	movs	r1, #44	; 0x2c
 8005308:	fb01 f303 	mul.w	r3, r1, r3
 800530c:	4413      	add	r3, r2
 800530e:	3361      	adds	r3, #97	; 0x61
 8005310:	2203      	movs	r2, #3
 8005312:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	212c      	movs	r1, #44	; 0x2c
 800531a:	fb01 f303 	mul.w	r3, r1, r3
 800531e:	4413      	add	r3, r2
 8005320:	333d      	adds	r3, #61	; 0x3d
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d112      	bne.n	800534e <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	212c      	movs	r1, #44	; 0x2c
 800532e:	fb01 f303 	mul.w	r3, r1, r3
 8005332:	4413      	add	r3, r2
 8005334:	333c      	adds	r3, #60	; 0x3c
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d108      	bne.n	800534e <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	212c      	movs	r1, #44	; 0x2c
 8005342:	fb01 f303 	mul.w	r3, r1, r3
 8005346:	4413      	add	r3, r2
 8005348:	333d      	adds	r3, #61	; 0x3d
 800534a:	2201      	movs	r2, #1
 800534c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	4413      	add	r3, r2
 8005356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	0151      	lsls	r1, r2, #5
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	440a      	add	r2, r1
 8005364:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005368:	f043 0302 	orr.w	r3, r3, #2
 800536c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	b2d2      	uxtb	r2, r2
 8005376:	4611      	mov	r1, r2
 8005378:	4618      	mov	r0, r3
 800537a:	f003 facd 	bl	8008918 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	4413      	add	r3, r2
 8005386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538a:	461a      	mov	r2, r3
 800538c:	2310      	movs	r3, #16
 800538e:	6093      	str	r3, [r2, #8]
}
 8005390:	e21b      	b.n	80057ca <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	4413      	add	r3, r2
 800539a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a4:	2b80      	cmp	r3, #128	; 0x80
 80053a6:	d174      	bne.n	8005492 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d121      	bne.n	80053f4 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	212c      	movs	r1, #44	; 0x2c
 80053b6:	fb01 f303 	mul.w	r3, r1, r3
 80053ba:	4413      	add	r3, r2
 80053bc:	3361      	adds	r3, #97	; 0x61
 80053be:	2206      	movs	r2, #6
 80053c0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	0151      	lsls	r1, r2, #5
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	440a      	add	r2, r1
 80053d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053dc:	f043 0302 	orr.w	r3, r3, #2
 80053e0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	4611      	mov	r1, r2
 80053ec:	4618      	mov	r0, r3
 80053ee:	f003 fa93 	bl	8008918 <USB_HC_Halt>
 80053f2:	e044      	b.n	800547e <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	212c      	movs	r1, #44	; 0x2c
 80053fa:	fb01 f303 	mul.w	r3, r1, r3
 80053fe:	4413      	add	r3, r2
 8005400:	335c      	adds	r3, #92	; 0x5c
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	202c      	movs	r0, #44	; 0x2c
 800540c:	fb00 f303 	mul.w	r3, r0, r3
 8005410:	440b      	add	r3, r1
 8005412:	335c      	adds	r3, #92	; 0x5c
 8005414:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	212c      	movs	r1, #44	; 0x2c
 800541c:	fb01 f303 	mul.w	r3, r1, r3
 8005420:	4413      	add	r3, r2
 8005422:	335c      	adds	r3, #92	; 0x5c
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d920      	bls.n	800546c <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	212c      	movs	r1, #44	; 0x2c
 8005430:	fb01 f303 	mul.w	r3, r1, r3
 8005434:	4413      	add	r3, r2
 8005436:	335c      	adds	r3, #92	; 0x5c
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	212c      	movs	r1, #44	; 0x2c
 8005442:	fb01 f303 	mul.w	r3, r1, r3
 8005446:	4413      	add	r3, r2
 8005448:	3360      	adds	r3, #96	; 0x60
 800544a:	2204      	movs	r2, #4
 800544c:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	b2d9      	uxtb	r1, r3
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	202c      	movs	r0, #44	; 0x2c
 8005458:	fb00 f303 	mul.w	r3, r0, r3
 800545c:	4413      	add	r3, r2
 800545e:	3360      	adds	r3, #96	; 0x60
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f00b fce9 	bl	8010e3c <HAL_HCD_HC_NotifyURBChange_Callback>
 800546a:	e008      	b.n	800547e <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	212c      	movs	r1, #44	; 0x2c
 8005472:	fb01 f303 	mul.w	r3, r1, r3
 8005476:	4413      	add	r3, r2
 8005478:	3360      	adds	r3, #96	; 0x60
 800547a:	2202      	movs	r2, #2
 800547c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	4413      	add	r3, r2
 8005486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548a:	461a      	mov	r2, r3
 800548c:	2380      	movs	r3, #128	; 0x80
 800548e:	6093      	str	r3, [r2, #8]
}
 8005490:	e19b      	b.n	80057ca <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	4413      	add	r3, r2
 800549a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054a8:	d134      	bne.n	8005514 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	0151      	lsls	r1, r2, #5
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	440a      	add	r2, r1
 80054c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054c4:	f043 0302 	orr.w	r3, r3, #2
 80054c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	b2d2      	uxtb	r2, r2
 80054d2:	4611      	mov	r1, r2
 80054d4:	4618      	mov	r0, r3
 80054d6:	f003 fa1f 	bl	8008918 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e6:	461a      	mov	r2, r3
 80054e8:	2310      	movs	r3, #16
 80054ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f8:	461a      	mov	r2, r3
 80054fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	212c      	movs	r1, #44	; 0x2c
 8005506:	fb01 f303 	mul.w	r3, r1, r3
 800550a:	4413      	add	r3, r2
 800550c:	3361      	adds	r3, #97	; 0x61
 800550e:	2208      	movs	r2, #8
 8005510:	701a      	strb	r2, [r3, #0]
}
 8005512:	e15a      	b.n	80057ca <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	4413      	add	r3, r2
 800551c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b02      	cmp	r3, #2
 8005528:	f040 814f 	bne.w	80057ca <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	4413      	add	r3, r2
 8005534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	0151      	lsls	r1, r2, #5
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	440a      	add	r2, r1
 8005542:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005546:	f023 0302 	bic.w	r3, r3, #2
 800554a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	212c      	movs	r1, #44	; 0x2c
 8005552:	fb01 f303 	mul.w	r3, r1, r3
 8005556:	4413      	add	r3, r2
 8005558:	3361      	adds	r3, #97	; 0x61
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d17d      	bne.n	800565c <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	212c      	movs	r1, #44	; 0x2c
 8005566:	fb01 f303 	mul.w	r3, r1, r3
 800556a:	4413      	add	r3, r2
 800556c:	3360      	adds	r3, #96	; 0x60
 800556e:	2201      	movs	r2, #1
 8005570:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	212c      	movs	r1, #44	; 0x2c
 8005578:	fb01 f303 	mul.w	r3, r1, r3
 800557c:	4413      	add	r3, r2
 800557e:	333f      	adds	r3, #63	; 0x3f
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d00a      	beq.n	800559c <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	212c      	movs	r1, #44	; 0x2c
 800558c:	fb01 f303 	mul.w	r3, r1, r3
 8005590:	4413      	add	r3, r2
 8005592:	333f      	adds	r3, #63	; 0x3f
 8005594:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005596:	2b03      	cmp	r3, #3
 8005598:	f040 8100 	bne.w	800579c <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d113      	bne.n	80055cc <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	212c      	movs	r1, #44	; 0x2c
 80055aa:	fb01 f303 	mul.w	r3, r1, r3
 80055ae:	4413      	add	r3, r2
 80055b0:	3355      	adds	r3, #85	; 0x55
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	f083 0301 	eor.w	r3, r3, #1
 80055b8:	b2d8      	uxtb	r0, r3
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	212c      	movs	r1, #44	; 0x2c
 80055c0:	fb01 f303 	mul.w	r3, r1, r3
 80055c4:	4413      	add	r3, r2
 80055c6:	3355      	adds	r3, #85	; 0x55
 80055c8:	4602      	mov	r2, r0
 80055ca:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	f040 80e3 	bne.w	800579c <HCD_HC_OUT_IRQHandler+0x7cc>
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	212c      	movs	r1, #44	; 0x2c
 80055dc:	fb01 f303 	mul.w	r3, r1, r3
 80055e0:	4413      	add	r3, r2
 80055e2:	334c      	adds	r3, #76	; 0x4c
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 80d8 	beq.w	800579c <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	212c      	movs	r1, #44	; 0x2c
 80055f2:	fb01 f303 	mul.w	r3, r1, r3
 80055f6:	4413      	add	r3, r2
 80055f8:	334c      	adds	r3, #76	; 0x4c
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	202c      	movs	r0, #44	; 0x2c
 8005602:	fb00 f202 	mul.w	r2, r0, r2
 8005606:	440a      	add	r2, r1
 8005608:	3240      	adds	r2, #64	; 0x40
 800560a:	8812      	ldrh	r2, [r2, #0]
 800560c:	4413      	add	r3, r2
 800560e:	3b01      	subs	r3, #1
 8005610:	6879      	ldr	r1, [r7, #4]
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	202c      	movs	r0, #44	; 0x2c
 8005616:	fb00 f202 	mul.w	r2, r0, r2
 800561a:	440a      	add	r2, r1
 800561c:	3240      	adds	r2, #64	; 0x40
 800561e:	8812      	ldrh	r2, [r2, #0]
 8005620:	fbb3 f3f2 	udiv	r3, r3, r2
 8005624:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 80b5 	beq.w	800579c <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	212c      	movs	r1, #44	; 0x2c
 8005638:	fb01 f303 	mul.w	r3, r1, r3
 800563c:	4413      	add	r3, r2
 800563e:	3355      	adds	r3, #85	; 0x55
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	f083 0301 	eor.w	r3, r3, #1
 8005646:	b2d8      	uxtb	r0, r3
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	212c      	movs	r1, #44	; 0x2c
 800564e:	fb01 f303 	mul.w	r3, r1, r3
 8005652:	4413      	add	r3, r2
 8005654:	3355      	adds	r3, #85	; 0x55
 8005656:	4602      	mov	r2, r0
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	e09f      	b.n	800579c <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	212c      	movs	r1, #44	; 0x2c
 8005662:	fb01 f303 	mul.w	r3, r1, r3
 8005666:	4413      	add	r3, r2
 8005668:	3361      	adds	r3, #97	; 0x61
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2b03      	cmp	r3, #3
 800566e:	d109      	bne.n	8005684 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	212c      	movs	r1, #44	; 0x2c
 8005676:	fb01 f303 	mul.w	r3, r1, r3
 800567a:	4413      	add	r3, r2
 800567c:	3360      	adds	r3, #96	; 0x60
 800567e:	2202      	movs	r2, #2
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	e08b      	b.n	800579c <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	212c      	movs	r1, #44	; 0x2c
 800568a:	fb01 f303 	mul.w	r3, r1, r3
 800568e:	4413      	add	r3, r2
 8005690:	3361      	adds	r3, #97	; 0x61
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2b04      	cmp	r3, #4
 8005696:	d109      	bne.n	80056ac <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	212c      	movs	r1, #44	; 0x2c
 800569e:	fb01 f303 	mul.w	r3, r1, r3
 80056a2:	4413      	add	r3, r2
 80056a4:	3360      	adds	r3, #96	; 0x60
 80056a6:	2202      	movs	r2, #2
 80056a8:	701a      	strb	r2, [r3, #0]
 80056aa:	e077      	b.n	800579c <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	212c      	movs	r1, #44	; 0x2c
 80056b2:	fb01 f303 	mul.w	r3, r1, r3
 80056b6:	4413      	add	r3, r2
 80056b8:	3361      	adds	r3, #97	; 0x61
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b05      	cmp	r3, #5
 80056be:	d109      	bne.n	80056d4 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	212c      	movs	r1, #44	; 0x2c
 80056c6:	fb01 f303 	mul.w	r3, r1, r3
 80056ca:	4413      	add	r3, r2
 80056cc:	3360      	adds	r3, #96	; 0x60
 80056ce:	2205      	movs	r2, #5
 80056d0:	701a      	strb	r2, [r3, #0]
 80056d2:	e063      	b.n	800579c <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	212c      	movs	r1, #44	; 0x2c
 80056da:	fb01 f303 	mul.w	r3, r1, r3
 80056de:	4413      	add	r3, r2
 80056e0:	3361      	adds	r3, #97	; 0x61
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2b06      	cmp	r3, #6
 80056e6:	d009      	beq.n	80056fc <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	212c      	movs	r1, #44	; 0x2c
 80056ee:	fb01 f303 	mul.w	r3, r1, r3
 80056f2:	4413      	add	r3, r2
 80056f4:	3361      	adds	r3, #97	; 0x61
 80056f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d14f      	bne.n	800579c <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	212c      	movs	r1, #44	; 0x2c
 8005702:	fb01 f303 	mul.w	r3, r1, r3
 8005706:	4413      	add	r3, r2
 8005708:	335c      	adds	r3, #92	; 0x5c
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	1c5a      	adds	r2, r3, #1
 800570e:	6879      	ldr	r1, [r7, #4]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	202c      	movs	r0, #44	; 0x2c
 8005714:	fb00 f303 	mul.w	r3, r0, r3
 8005718:	440b      	add	r3, r1
 800571a:	335c      	adds	r3, #92	; 0x5c
 800571c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	212c      	movs	r1, #44	; 0x2c
 8005724:	fb01 f303 	mul.w	r3, r1, r3
 8005728:	4413      	add	r3, r2
 800572a:	335c      	adds	r3, #92	; 0x5c
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b02      	cmp	r3, #2
 8005730:	d912      	bls.n	8005758 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	212c      	movs	r1, #44	; 0x2c
 8005738:	fb01 f303 	mul.w	r3, r1, r3
 800573c:	4413      	add	r3, r2
 800573e:	335c      	adds	r3, #92	; 0x5c
 8005740:	2200      	movs	r2, #0
 8005742:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	212c      	movs	r1, #44	; 0x2c
 800574a:	fb01 f303 	mul.w	r3, r1, r3
 800574e:	4413      	add	r3, r2
 8005750:	3360      	adds	r3, #96	; 0x60
 8005752:	2204      	movs	r2, #4
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	e021      	b.n	800579c <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	212c      	movs	r1, #44	; 0x2c
 800575e:	fb01 f303 	mul.w	r3, r1, r3
 8005762:	4413      	add	r3, r2
 8005764:	3360      	adds	r3, #96	; 0x60
 8005766:	2202      	movs	r2, #2
 8005768:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	4413      	add	r3, r2
 8005772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005780:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005788:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	4413      	add	r3, r2
 8005792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005796:	461a      	mov	r2, r3
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a8:	461a      	mov	r2, r3
 80057aa:	2302      	movs	r3, #2
 80057ac:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	b2d9      	uxtb	r1, r3
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	202c      	movs	r0, #44	; 0x2c
 80057b8:	fb00 f303 	mul.w	r3, r0, r3
 80057bc:	4413      	add	r3, r2
 80057be:	3360      	adds	r3, #96	; 0x60
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f00b fb39 	bl	8010e3c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80057ca:	bf00      	nop
 80057cc:	3720      	adds	r7, #32
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b08a      	sub	sp, #40	; 0x28
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	0c5b      	lsrs	r3, r3, #17
 80057f8:	f003 030f 	and.w	r3, r3, #15
 80057fc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	091b      	lsrs	r3, r3, #4
 8005802:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005806:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2b02      	cmp	r3, #2
 800580c:	d004      	beq.n	8005818 <HCD_RXQLVL_IRQHandler+0x46>
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b05      	cmp	r3, #5
 8005812:	f000 80a9 	beq.w	8005968 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005816:	e0aa      	b.n	800596e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 80a6 	beq.w	800596c <HCD_RXQLVL_IRQHandler+0x19a>
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	212c      	movs	r1, #44	; 0x2c
 8005826:	fb01 f303 	mul.w	r3, r1, r3
 800582a:	4413      	add	r3, r2
 800582c:	3344      	adds	r3, #68	; 0x44
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 809b 	beq.w	800596c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	212c      	movs	r1, #44	; 0x2c
 800583c:	fb01 f303 	mul.w	r3, r1, r3
 8005840:	4413      	add	r3, r2
 8005842:	3350      	adds	r3, #80	; 0x50
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	441a      	add	r2, r3
 800584a:	6879      	ldr	r1, [r7, #4]
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	202c      	movs	r0, #44	; 0x2c
 8005850:	fb00 f303 	mul.w	r3, r0, r3
 8005854:	440b      	add	r3, r1
 8005856:	334c      	adds	r3, #76	; 0x4c
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d87a      	bhi.n	8005954 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	212c      	movs	r1, #44	; 0x2c
 8005868:	fb01 f303 	mul.w	r3, r1, r3
 800586c:	4413      	add	r3, r2
 800586e:	3344      	adds	r3, #68	; 0x44
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	b292      	uxth	r2, r2
 8005876:	4619      	mov	r1, r3
 8005878:	f002 fbcf 	bl	800801a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	212c      	movs	r1, #44	; 0x2c
 8005882:	fb01 f303 	mul.w	r3, r1, r3
 8005886:	4413      	add	r3, r2
 8005888:	3344      	adds	r3, #68	; 0x44
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	441a      	add	r2, r3
 8005890:	6879      	ldr	r1, [r7, #4]
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	202c      	movs	r0, #44	; 0x2c
 8005896:	fb00 f303 	mul.w	r3, r0, r3
 800589a:	440b      	add	r3, r1
 800589c:	3344      	adds	r3, #68	; 0x44
 800589e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	212c      	movs	r1, #44	; 0x2c
 80058a6:	fb01 f303 	mul.w	r3, r1, r3
 80058aa:	4413      	add	r3, r2
 80058ac:	3350      	adds	r3, #80	; 0x50
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	441a      	add	r2, r3
 80058b4:	6879      	ldr	r1, [r7, #4]
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	202c      	movs	r0, #44	; 0x2c
 80058ba:	fb00 f303 	mul.w	r3, r0, r3
 80058be:	440b      	add	r3, r1
 80058c0:	3350      	adds	r3, #80	; 0x50
 80058c2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	0cdb      	lsrs	r3, r3, #19
 80058d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058d8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	212c      	movs	r1, #44	; 0x2c
 80058e0:	fb01 f303 	mul.w	r3, r1, r3
 80058e4:	4413      	add	r3, r2
 80058e6:	3340      	adds	r3, #64	; 0x40
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	461a      	mov	r2, r3
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d13c      	bne.n	800596c <HCD_RXQLVL_IRQHandler+0x19a>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d039      	beq.n	800596c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800590e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005916:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	4413      	add	r3, r2
 8005920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005924:	461a      	mov	r2, r3
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	212c      	movs	r1, #44	; 0x2c
 8005930:	fb01 f303 	mul.w	r3, r1, r3
 8005934:	4413      	add	r3, r2
 8005936:	3354      	adds	r3, #84	; 0x54
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	f083 0301 	eor.w	r3, r3, #1
 800593e:	b2d8      	uxtb	r0, r3
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	212c      	movs	r1, #44	; 0x2c
 8005946:	fb01 f303 	mul.w	r3, r1, r3
 800594a:	4413      	add	r3, r2
 800594c:	3354      	adds	r3, #84	; 0x54
 800594e:	4602      	mov	r2, r0
 8005950:	701a      	strb	r2, [r3, #0]
      break;
 8005952:	e00b      	b.n	800596c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	212c      	movs	r1, #44	; 0x2c
 800595a:	fb01 f303 	mul.w	r3, r1, r3
 800595e:	4413      	add	r3, r2
 8005960:	3360      	adds	r3, #96	; 0x60
 8005962:	2204      	movs	r2, #4
 8005964:	701a      	strb	r2, [r3, #0]
      break;
 8005966:	e001      	b.n	800596c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005968:	bf00      	nop
 800596a:	e000      	b.n	800596e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800596c:	bf00      	nop
  }
}
 800596e:	bf00      	nop
 8005970:	3728      	adds	r7, #40	; 0x28
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b086      	sub	sp, #24
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80059a2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d10b      	bne.n	80059c6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d102      	bne.n	80059be <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f00b fa23 	bl	8010e04 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f043 0302 	orr.w	r3, r3, #2
 80059c4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f003 0308 	and.w	r3, r3, #8
 80059cc:	2b08      	cmp	r3, #8
 80059ce:	d132      	bne.n	8005a36 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f043 0308 	orr.w	r3, r3, #8
 80059d6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f003 0304 	and.w	r3, r3, #4
 80059de:	2b04      	cmp	r3, #4
 80059e0:	d126      	bne.n	8005a30 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d113      	bne.n	8005a12 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80059f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059f4:	d106      	bne.n	8005a04 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2102      	movs	r1, #2
 80059fc:	4618      	mov	r0, r3
 80059fe:	f002 fc69 	bl	80082d4 <USB_InitFSLSPClkSel>
 8005a02:	e011      	b.n	8005a28 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2101      	movs	r1, #1
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f002 fc62 	bl	80082d4 <USB_InitFSLSPClkSel>
 8005a10:	e00a      	b.n	8005a28 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d106      	bne.n	8005a28 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a20:	461a      	mov	r2, r3
 8005a22:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005a26:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f00b fa19 	bl	8010e60 <HAL_HCD_PortEnabled_Callback>
 8005a2e:	e002      	b.n	8005a36 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f00b fa23 	bl	8010e7c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f003 0320 	and.w	r3, r3, #32
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d103      	bne.n	8005a48 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f043 0320 	orr.w	r3, r3, #32
 8005a46:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a4e:	461a      	mov	r2, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	6013      	str	r3, [r2, #0]
}
 8005a54:	bf00      	nop
 8005a56:	3718      	adds	r7, #24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b08a      	sub	sp, #40	; 0x28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e237      	b.n	8005ede <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d050      	beq.n	8005b1c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a7a:	4ba3      	ldr	r3, [pc, #652]	; (8005d08 <HAL_RCC_OscConfig+0x2ac>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 030c 	and.w	r3, r3, #12
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d00c      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a86:	4ba0      	ldr	r3, [pc, #640]	; (8005d08 <HAL_RCC_OscConfig+0x2ac>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a8e:	2b08      	cmp	r3, #8
 8005a90:	d112      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a92:	4b9d      	ldr	r3, [pc, #628]	; (8005d08 <HAL_RCC_OscConfig+0x2ac>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a9e:	d10b      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aa0:	4b99      	ldr	r3, [pc, #612]	; (8005d08 <HAL_RCC_OscConfig+0x2ac>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d036      	beq.n	8005b1a <HAL_RCC_OscConfig+0xbe>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d132      	bne.n	8005b1a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e212      	b.n	8005ede <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	4b93      	ldr	r3, [pc, #588]	; (8005d0c <HAL_RCC_OscConfig+0x2b0>)
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d013      	beq.n	8005af2 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aca:	f7fd fbdb 	bl	8003284 <HAL_GetTick>
 8005ace:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ad0:	e008      	b.n	8005ae4 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ad2:	f7fd fbd7 	bl	8003284 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b64      	cmp	r3, #100	; 0x64
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e1fc      	b.n	8005ede <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ae4:	4b88      	ldr	r3, [pc, #544]	; (8005d08 <HAL_RCC_OscConfig+0x2ac>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0f0      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x76>
 8005af0:	e014      	b.n	8005b1c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af2:	f7fd fbc7 	bl	8003284 <HAL_GetTick>
 8005af6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005af8:	e008      	b.n	8005b0c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005afa:	f7fd fbc3 	bl	8003284 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b64      	cmp	r3, #100	; 0x64
 8005b06:	d901      	bls.n	8005b0c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e1e8      	b.n	8005ede <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b0c:	4b7e      	ldr	r3, [pc, #504]	; (8005d08 <HAL_RCC_OscConfig+0x2ac>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1f0      	bne.n	8005afa <HAL_RCC_OscConfig+0x9e>
 8005b18:	e000      	b.n	8005b1c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b1a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d077      	beq.n	8005c18 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b28:	4b77      	ldr	r3, [pc, #476]	; (8005d08 <HAL_RCC_OscConfig+0x2ac>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 030c 	and.w	r3, r3, #12
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00b      	beq.n	8005b4c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b34:	4b74      	ldr	r3, [pc, #464]	; (8005d08 <HAL_RCC_OscConfig+0x2ac>)
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d126      	bne.n	8005b8e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b40:	4b71      	ldr	r3, [pc, #452]	; (8005d08 <HAL_RCC_OscConfig+0x2ac>)
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d120      	bne.n	8005b8e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b4c:	4b6e      	ldr	r3, [pc, #440]	; (8005d08 <HAL_RCC_OscConfig+0x2ac>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d005      	beq.n	8005b64 <HAL_RCC_OscConfig+0x108>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d001      	beq.n	8005b64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e1bc      	b.n	8005ede <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b64:	4b68      	ldr	r3, [pc, #416]	; (8005d08 <HAL_RCC_OscConfig+0x2ac>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	21f8      	movs	r1, #248	; 0xf8
 8005b72:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b74:	69b9      	ldr	r1, [r7, #24]
 8005b76:	fa91 f1a1 	rbit	r1, r1
 8005b7a:	6179      	str	r1, [r7, #20]
  return result;
 8005b7c:	6979      	ldr	r1, [r7, #20]
 8005b7e:	fab1 f181 	clz	r1, r1
 8005b82:	b2c9      	uxtb	r1, r1
 8005b84:	408b      	lsls	r3, r1
 8005b86:	4960      	ldr	r1, [pc, #384]	; (8005d08 <HAL_RCC_OscConfig+0x2ac>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b8c:	e044      	b.n	8005c18 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d02a      	beq.n	8005bec <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b96:	4b5e      	ldr	r3, [pc, #376]	; (8005d10 <HAL_RCC_OscConfig+0x2b4>)
 8005b98:	2201      	movs	r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b9c:	f7fd fb72 	bl	8003284 <HAL_GetTick>
 8005ba0:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ba4:	f7fd fb6e 	bl	8003284 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e193      	b.n	8005ede <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bb6:	4b54      	ldr	r3, [pc, #336]	; (8005d08 <HAL_RCC_OscConfig+0x2ac>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0f0      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc2:	4b51      	ldr	r3, [pc, #324]	; (8005d08 <HAL_RCC_OscConfig+0x2ac>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	21f8      	movs	r1, #248	; 0xf8
 8005bd0:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd2:	6939      	ldr	r1, [r7, #16]
 8005bd4:	fa91 f1a1 	rbit	r1, r1
 8005bd8:	60f9      	str	r1, [r7, #12]
  return result;
 8005bda:	68f9      	ldr	r1, [r7, #12]
 8005bdc:	fab1 f181 	clz	r1, r1
 8005be0:	b2c9      	uxtb	r1, r1
 8005be2:	408b      	lsls	r3, r1
 8005be4:	4948      	ldr	r1, [pc, #288]	; (8005d08 <HAL_RCC_OscConfig+0x2ac>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	600b      	str	r3, [r1, #0]
 8005bea:	e015      	b.n	8005c18 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bec:	4b48      	ldr	r3, [pc, #288]	; (8005d10 <HAL_RCC_OscConfig+0x2b4>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf2:	f7fd fb47 	bl	8003284 <HAL_GetTick>
 8005bf6:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bf8:	e008      	b.n	8005c0c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bfa:	f7fd fb43 	bl	8003284 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d901      	bls.n	8005c0c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e168      	b.n	8005ede <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c0c:	4b3e      	ldr	r3, [pc, #248]	; (8005d08 <HAL_RCC_OscConfig+0x2ac>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1f0      	bne.n	8005bfa <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0308 	and.w	r3, r3, #8
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d030      	beq.n	8005c86 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d016      	beq.n	8005c5a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c2c:	4b39      	ldr	r3, [pc, #228]	; (8005d14 <HAL_RCC_OscConfig+0x2b8>)
 8005c2e:	2201      	movs	r2, #1
 8005c30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c32:	f7fd fb27 	bl	8003284 <HAL_GetTick>
 8005c36:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c38:	e008      	b.n	8005c4c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c3a:	f7fd fb23 	bl	8003284 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e148      	b.n	8005ede <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c4c:	4b2e      	ldr	r3, [pc, #184]	; (8005d08 <HAL_RCC_OscConfig+0x2ac>)
 8005c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0f0      	beq.n	8005c3a <HAL_RCC_OscConfig+0x1de>
 8005c58:	e015      	b.n	8005c86 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c5a:	4b2e      	ldr	r3, [pc, #184]	; (8005d14 <HAL_RCC_OscConfig+0x2b8>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c60:	f7fd fb10 	bl	8003284 <HAL_GetTick>
 8005c64:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c66:	e008      	b.n	8005c7a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c68:	f7fd fb0c 	bl	8003284 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e131      	b.n	8005ede <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c7a:	4b23      	ldr	r3, [pc, #140]	; (8005d08 <HAL_RCC_OscConfig+0x2ac>)
 8005c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1f0      	bne.n	8005c68 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0304 	and.w	r3, r3, #4
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f000 8088 	beq.w	8005da4 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c94:	2300      	movs	r3, #0
 8005c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c9a:	4b1b      	ldr	r3, [pc, #108]	; (8005d08 <HAL_RCC_OscConfig+0x2ac>)
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d110      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60bb      	str	r3, [r7, #8]
 8005caa:	4b17      	ldr	r3, [pc, #92]	; (8005d08 <HAL_RCC_OscConfig+0x2ac>)
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	4a16      	ldr	r2, [pc, #88]	; (8005d08 <HAL_RCC_OscConfig+0x2ac>)
 8005cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8005cb6:	4b14      	ldr	r3, [pc, #80]	; (8005d08 <HAL_RCC_OscConfig+0x2ac>)
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cbe:	60bb      	str	r3, [r7, #8]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005cc8:	4b13      	ldr	r3, [pc, #76]	; (8005d18 <HAL_RCC_OscConfig+0x2bc>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a12      	ldr	r2, [pc, #72]	; (8005d18 <HAL_RCC_OscConfig+0x2bc>)
 8005cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd2:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd4:	4b10      	ldr	r3, [pc, #64]	; (8005d18 <HAL_RCC_OscConfig+0x2bc>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d123      	bne.n	8005d28 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ce0:	4b0d      	ldr	r3, [pc, #52]	; (8005d18 <HAL_RCC_OscConfig+0x2bc>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a0c      	ldr	r2, [pc, #48]	; (8005d18 <HAL_RCC_OscConfig+0x2bc>)
 8005ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cec:	f7fd faca 	bl	8003284 <HAL_GetTick>
 8005cf0:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf2:	e013      	b.n	8005d1c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cf4:	f7fd fac6 	bl	8003284 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d90c      	bls.n	8005d1c <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e0eb      	b.n	8005ede <HAL_RCC_OscConfig+0x482>
 8005d06:	bf00      	nop
 8005d08:	40023800 	.word	0x40023800
 8005d0c:	40023802 	.word	0x40023802
 8005d10:	42470000 	.word	0x42470000
 8005d14:	42470e80 	.word	0x42470e80
 8005d18:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d1c:	4b72      	ldr	r3, [pc, #456]	; (8005ee8 <HAL_RCC_OscConfig+0x48c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0e5      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	4b6f      	ldr	r3, [pc, #444]	; (8005eec <HAL_RCC_OscConfig+0x490>)
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d015      	beq.n	8005d66 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d3a:	f7fd faa3 	bl	8003284 <HAL_GetTick>
 8005d3e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d40:	e00a      	b.n	8005d58 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d42:	f7fd fa9f 	bl	8003284 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e0c2      	b.n	8005ede <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d58:	4b65      	ldr	r3, [pc, #404]	; (8005ef0 <HAL_RCC_OscConfig+0x494>)
 8005d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0ee      	beq.n	8005d42 <HAL_RCC_OscConfig+0x2e6>
 8005d64:	e014      	b.n	8005d90 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d66:	f7fd fa8d 	bl	8003284 <HAL_GetTick>
 8005d6a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d6c:	e00a      	b.n	8005d84 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d6e:	f7fd fa89 	bl	8003284 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e0ac      	b.n	8005ede <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d84:	4b5a      	ldr	r3, [pc, #360]	; (8005ef0 <HAL_RCC_OscConfig+0x494>)
 8005d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1ee      	bne.n	8005d6e <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d105      	bne.n	8005da4 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d98:	4b55      	ldr	r3, [pc, #340]	; (8005ef0 <HAL_RCC_OscConfig+0x494>)
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	4a54      	ldr	r2, [pc, #336]	; (8005ef0 <HAL_RCC_OscConfig+0x494>)
 8005d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005da2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 8097 	beq.w	8005edc <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dae:	4b50      	ldr	r3, [pc, #320]	; (8005ef0 <HAL_RCC_OscConfig+0x494>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 030c 	and.w	r3, r3, #12
 8005db6:	2b08      	cmp	r3, #8
 8005db8:	d061      	beq.n	8005e7e <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d146      	bne.n	8005e50 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dc2:	4b4c      	ldr	r3, [pc, #304]	; (8005ef4 <HAL_RCC_OscConfig+0x498>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc8:	f7fd fa5c 	bl	8003284 <HAL_GetTick>
 8005dcc:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dd0:	f7fd fa58 	bl	8003284 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b64      	cmp	r3, #100	; 0x64
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e07d      	b.n	8005ede <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005de2:	4b43      	ldr	r3, [pc, #268]	; (8005ef0 <HAL_RCC_OscConfig+0x494>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1f0      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dee:	4b40      	ldr	r3, [pc, #256]	; (8005ef0 <HAL_RCC_OscConfig+0x494>)
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	4b41      	ldr	r3, [pc, #260]	; (8005ef8 <HAL_RCC_OscConfig+0x49c>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	69d1      	ldr	r1, [r2, #28]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6a12      	ldr	r2, [r2, #32]
 8005dfe:	4311      	orrs	r1, r2
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e04:	0192      	lsls	r2, r2, #6
 8005e06:	4311      	orrs	r1, r2
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005e0c:	0612      	lsls	r2, r2, #24
 8005e0e:	4311      	orrs	r1, r2
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005e14:	0852      	lsrs	r2, r2, #1
 8005e16:	3a01      	subs	r2, #1
 8005e18:	0412      	lsls	r2, r2, #16
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	4934      	ldr	r1, [pc, #208]	; (8005ef0 <HAL_RCC_OscConfig+0x494>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e22:	4b34      	ldr	r3, [pc, #208]	; (8005ef4 <HAL_RCC_OscConfig+0x498>)
 8005e24:	2201      	movs	r2, #1
 8005e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e28:	f7fd fa2c 	bl	8003284 <HAL_GetTick>
 8005e2c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e2e:	e008      	b.n	8005e42 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e30:	f7fd fa28 	bl	8003284 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b64      	cmp	r3, #100	; 0x64
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e04d      	b.n	8005ede <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e42:	4b2b      	ldr	r3, [pc, #172]	; (8005ef0 <HAL_RCC_OscConfig+0x494>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d0f0      	beq.n	8005e30 <HAL_RCC_OscConfig+0x3d4>
 8005e4e:	e045      	b.n	8005edc <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e50:	4b28      	ldr	r3, [pc, #160]	; (8005ef4 <HAL_RCC_OscConfig+0x498>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e56:	f7fd fa15 	bl	8003284 <HAL_GetTick>
 8005e5a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e5c:	e008      	b.n	8005e70 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e5e:	f7fd fa11 	bl	8003284 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b64      	cmp	r3, #100	; 0x64
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e036      	b.n	8005ede <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e70:	4b1f      	ldr	r3, [pc, #124]	; (8005ef0 <HAL_RCC_OscConfig+0x494>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1f0      	bne.n	8005e5e <HAL_RCC_OscConfig+0x402>
 8005e7c:	e02e      	b.n	8005edc <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d101      	bne.n	8005e8a <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e029      	b.n	8005ede <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8005e8a:	4b19      	ldr	r3, [pc, #100]	; (8005ef0 <HAL_RCC_OscConfig+0x494>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d11c      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d115      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	099b      	lsrs	r3, r3, #6
 8005eb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d10d      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d106      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d001      	beq.n	8005edc <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e000      	b.n	8005ede <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3728      	adds	r7, #40	; 0x28
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	40007000 	.word	0x40007000
 8005eec:	40023870 	.word	0x40023870
 8005ef0:	40023800 	.word	0x40023800
 8005ef4:	42470060 	.word	0x42470060
 8005ef8:	f0bc8000 	.word	0xf0bc8000

08005efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e0d2      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f10:	4b6b      	ldr	r3, [pc, #428]	; (80060c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 030f 	and.w	r3, r3, #15
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d90c      	bls.n	8005f38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f1e:	4b68      	ldr	r3, [pc, #416]	; (80060c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f26:	4b66      	ldr	r3, [pc, #408]	; (80060c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 030f 	and.w	r3, r3, #15
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d001      	beq.n	8005f38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e0be      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d020      	beq.n	8005f86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0304 	and.w	r3, r3, #4
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d005      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f50:	4b5c      	ldr	r3, [pc, #368]	; (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	4a5b      	ldr	r2, [pc, #364]	; (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005f56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0308 	and.w	r3, r3, #8
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d005      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8005f68:	4b56      	ldr	r3, [pc, #344]	; (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	4a55      	ldr	r2, [pc, #340]	; (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005f6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f74:	4b53      	ldr	r3, [pc, #332]	; (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	4950      	ldr	r1, [pc, #320]	; (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d040      	beq.n	8006014 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d107      	bne.n	8005faa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f9a:	4b4a      	ldr	r3, [pc, #296]	; (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d115      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e085      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d107      	bne.n	8005fc2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fb2:	4b44      	ldr	r3, [pc, #272]	; (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d109      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e079      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fc2:	4b40      	ldr	r3, [pc, #256]	; (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e071      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fd2:	4b3c      	ldr	r3, [pc, #240]	; (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f023 0203 	bic.w	r2, r3, #3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	4939      	ldr	r1, [pc, #228]	; (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fe4:	f7fd f94e 	bl	8003284 <HAL_GetTick>
 8005fe8:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fea:	e00a      	b.n	8006002 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fec:	f7fd f94a 	bl	8003284 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e059      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006002:	4b30      	ldr	r3, [pc, #192]	; (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 020c 	and.w	r2, r3, #12
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	429a      	cmp	r2, r3
 8006012:	d1eb      	bne.n	8005fec <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006014:	4b2a      	ldr	r3, [pc, #168]	; (80060c0 <HAL_RCC_ClockConfig+0x1c4>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 030f 	and.w	r3, r3, #15
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	429a      	cmp	r2, r3
 8006020:	d20c      	bcs.n	800603c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006022:	4b27      	ldr	r3, [pc, #156]	; (80060c0 <HAL_RCC_ClockConfig+0x1c4>)
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	b2d2      	uxtb	r2, r2
 8006028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800602a:	4b25      	ldr	r3, [pc, #148]	; (80060c0 <HAL_RCC_ClockConfig+0x1c4>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 030f 	and.w	r3, r3, #15
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	429a      	cmp	r2, r3
 8006036:	d001      	beq.n	800603c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e03c      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	d008      	beq.n	800605a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006048:	4b1e      	ldr	r3, [pc, #120]	; (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	491b      	ldr	r1, [pc, #108]	; (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8006056:	4313      	orrs	r3, r2
 8006058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0308 	and.w	r3, r3, #8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d009      	beq.n	800607a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006066:	4b17      	ldr	r3, [pc, #92]	; (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	4913      	ldr	r1, [pc, #76]	; (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8006076:	4313      	orrs	r3, r2
 8006078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800607a:	f000 f82b 	bl	80060d4 <HAL_RCC_GetSysClockFreq>
 800607e:	4601      	mov	r1, r0
 8006080:	4b10      	ldr	r3, [pc, #64]	; (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006088:	22f0      	movs	r2, #240	; 0xf0
 800608a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	fa92 f2a2 	rbit	r2, r2
 8006092:	60fa      	str	r2, [r7, #12]
  return result;
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	fab2 f282 	clz	r2, r2
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	40d3      	lsrs	r3, r2
 800609e:	4a0a      	ldr	r2, [pc, #40]	; (80060c8 <HAL_RCC_ClockConfig+0x1cc>)
 80060a0:	5cd3      	ldrb	r3, [r2, r3]
 80060a2:	fa21 f303 	lsr.w	r3, r1, r3
 80060a6:	4a09      	ldr	r2, [pc, #36]	; (80060cc <HAL_RCC_ClockConfig+0x1d0>)
 80060a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060aa:	4b09      	ldr	r3, [pc, #36]	; (80060d0 <HAL_RCC_ClockConfig+0x1d4>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fc fdf8 	bl	8002ca4 <HAL_InitTick>

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	40023c00 	.word	0x40023c00
 80060c4:	40023800 	.word	0x40023800
 80060c8:	08015d34 	.word	0x08015d34
 80060cc:	2000002c 	.word	0x2000002c
 80060d0:	20000030 	.word	0x20000030

080060d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060d4:	b5b0      	push	{r4, r5, r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060da:	2100      	movs	r1, #0
 80060dc:	6079      	str	r1, [r7, #4]
 80060de:	2100      	movs	r1, #0
 80060e0:	60f9      	str	r1, [r7, #12]
 80060e2:	2100      	movs	r1, #0
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80060e6:	2100      	movs	r1, #0
 80060e8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060ea:	4952      	ldr	r1, [pc, #328]	; (8006234 <HAL_RCC_GetSysClockFreq+0x160>)
 80060ec:	6889      	ldr	r1, [r1, #8]
 80060ee:	f001 010c 	and.w	r1, r1, #12
 80060f2:	2908      	cmp	r1, #8
 80060f4:	d00d      	beq.n	8006112 <HAL_RCC_GetSysClockFreq+0x3e>
 80060f6:	2908      	cmp	r1, #8
 80060f8:	f200 8094 	bhi.w	8006224 <HAL_RCC_GetSysClockFreq+0x150>
 80060fc:	2900      	cmp	r1, #0
 80060fe:	d002      	beq.n	8006106 <HAL_RCC_GetSysClockFreq+0x32>
 8006100:	2904      	cmp	r1, #4
 8006102:	d003      	beq.n	800610c <HAL_RCC_GetSysClockFreq+0x38>
 8006104:	e08e      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006106:	4b4c      	ldr	r3, [pc, #304]	; (8006238 <HAL_RCC_GetSysClockFreq+0x164>)
 8006108:	60bb      	str	r3, [r7, #8]
       break;
 800610a:	e08e      	b.n	800622a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800610c:	4b4b      	ldr	r3, [pc, #300]	; (800623c <HAL_RCC_GetSysClockFreq+0x168>)
 800610e:	60bb      	str	r3, [r7, #8]
      break;
 8006110:	e08b      	b.n	800622a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006112:	4948      	ldr	r1, [pc, #288]	; (8006234 <HAL_RCC_GetSysClockFreq+0x160>)
 8006114:	6849      	ldr	r1, [r1, #4]
 8006116:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800611a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800611c:	4945      	ldr	r1, [pc, #276]	; (8006234 <HAL_RCC_GetSysClockFreq+0x160>)
 800611e:	6849      	ldr	r1, [r1, #4]
 8006120:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006124:	2900      	cmp	r1, #0
 8006126:	d024      	beq.n	8006172 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006128:	4942      	ldr	r1, [pc, #264]	; (8006234 <HAL_RCC_GetSysClockFreq+0x160>)
 800612a:	6849      	ldr	r1, [r1, #4]
 800612c:	0989      	lsrs	r1, r1, #6
 800612e:	4608      	mov	r0, r1
 8006130:	f04f 0100 	mov.w	r1, #0
 8006134:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006138:	f04f 0500 	mov.w	r5, #0
 800613c:	ea00 0204 	and.w	r2, r0, r4
 8006140:	ea01 0305 	and.w	r3, r1, r5
 8006144:	493d      	ldr	r1, [pc, #244]	; (800623c <HAL_RCC_GetSysClockFreq+0x168>)
 8006146:	fb01 f003 	mul.w	r0, r1, r3
 800614a:	2100      	movs	r1, #0
 800614c:	fb01 f102 	mul.w	r1, r1, r2
 8006150:	1844      	adds	r4, r0, r1
 8006152:	493a      	ldr	r1, [pc, #232]	; (800623c <HAL_RCC_GetSysClockFreq+0x168>)
 8006154:	fba2 0101 	umull	r0, r1, r2, r1
 8006158:	1863      	adds	r3, r4, r1
 800615a:	4619      	mov	r1, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	461a      	mov	r2, r3
 8006160:	f04f 0300 	mov.w	r3, #0
 8006164:	f7fb f83e 	bl	80011e4 <__aeabi_uldivmod>
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	4613      	mov	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	e04a      	b.n	8006208 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006172:	4b30      	ldr	r3, [pc, #192]	; (8006234 <HAL_RCC_GetSysClockFreq+0x160>)
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	099b      	lsrs	r3, r3, #6
 8006178:	461a      	mov	r2, r3
 800617a:	f04f 0300 	mov.w	r3, #0
 800617e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006182:	f04f 0100 	mov.w	r1, #0
 8006186:	ea02 0400 	and.w	r4, r2, r0
 800618a:	ea03 0501 	and.w	r5, r3, r1
 800618e:	4620      	mov	r0, r4
 8006190:	4629      	mov	r1, r5
 8006192:	f04f 0200 	mov.w	r2, #0
 8006196:	f04f 0300 	mov.w	r3, #0
 800619a:	014b      	lsls	r3, r1, #5
 800619c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80061a0:	0142      	lsls	r2, r0, #5
 80061a2:	4610      	mov	r0, r2
 80061a4:	4619      	mov	r1, r3
 80061a6:	1b00      	subs	r0, r0, r4
 80061a8:	eb61 0105 	sbc.w	r1, r1, r5
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	f04f 0300 	mov.w	r3, #0
 80061b4:	018b      	lsls	r3, r1, #6
 80061b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80061ba:	0182      	lsls	r2, r0, #6
 80061bc:	1a12      	subs	r2, r2, r0
 80061be:	eb63 0301 	sbc.w	r3, r3, r1
 80061c2:	f04f 0000 	mov.w	r0, #0
 80061c6:	f04f 0100 	mov.w	r1, #0
 80061ca:	00d9      	lsls	r1, r3, #3
 80061cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061d0:	00d0      	lsls	r0, r2, #3
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	1912      	adds	r2, r2, r4
 80061d8:	eb45 0303 	adc.w	r3, r5, r3
 80061dc:	f04f 0000 	mov.w	r0, #0
 80061e0:	f04f 0100 	mov.w	r1, #0
 80061e4:	0299      	lsls	r1, r3, #10
 80061e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80061ea:	0290      	lsls	r0, r2, #10
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	4610      	mov	r0, r2
 80061f2:	4619      	mov	r1, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	461a      	mov	r2, r3
 80061f8:	f04f 0300 	mov.w	r3, #0
 80061fc:	f7fa fff2 	bl	80011e4 <__aeabi_uldivmod>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4613      	mov	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006208:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <HAL_RCC_GetSysClockFreq+0x160>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	0c1b      	lsrs	r3, r3, #16
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	3301      	adds	r3, #1
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006220:	60bb      	str	r3, [r7, #8]
      break;
 8006222:	e002      	b.n	800622a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006224:	4b04      	ldr	r3, [pc, #16]	; (8006238 <HAL_RCC_GetSysClockFreq+0x164>)
 8006226:	60bb      	str	r3, [r7, #8]
      break;
 8006228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800622a:	68bb      	ldr	r3, [r7, #8]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bdb0      	pop	{r4, r5, r7, pc}
 8006234:	40023800 	.word	0x40023800
 8006238:	00f42400 	.word	0x00f42400
 800623c:	017d7840 	.word	0x017d7840

08006240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006240:	b480      	push	{r7}
 8006242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006244:	4b02      	ldr	r3, [pc, #8]	; (8006250 <HAL_RCC_GetHCLKFreq+0x10>)
 8006246:	681b      	ldr	r3, [r3, #0]
}
 8006248:	4618      	mov	r0, r3
 800624a:	46bd      	mov	sp, r7
 800624c:	bc80      	pop	{r7}
 800624e:	4770      	bx	lr
 8006250:	2000002c 	.word	0x2000002c

08006254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800625a:	f7ff fff1 	bl	8006240 <HAL_RCC_GetHCLKFreq>
 800625e:	4601      	mov	r1, r0
 8006260:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006268:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800626c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	fa92 f2a2 	rbit	r2, r2
 8006274:	603a      	str	r2, [r7, #0]
  return result;
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	fab2 f282 	clz	r2, r2
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	40d3      	lsrs	r3, r2
 8006280:	4a04      	ldr	r2, [pc, #16]	; (8006294 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006282:	5cd3      	ldrb	r3, [r2, r3]
 8006284:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006288:	4618      	mov	r0, r3
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	40023800 	.word	0x40023800
 8006294:	08015d44 	.word	0x08015d44

08006298 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	220f      	movs	r2, #15
 80062a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80062a8:	4b11      	ldr	r3, [pc, #68]	; (80062f0 <HAL_RCC_GetClockConfig+0x58>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f003 0203 	and.w	r2, r3, #3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80062b4:	4b0e      	ldr	r3, [pc, #56]	; (80062f0 <HAL_RCC_GetClockConfig+0x58>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80062c0:	4b0b      	ldr	r3, [pc, #44]	; (80062f0 <HAL_RCC_GetClockConfig+0x58>)
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80062cc:	4b08      	ldr	r3, [pc, #32]	; (80062f0 <HAL_RCC_GetClockConfig+0x58>)
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	08db      	lsrs	r3, r3, #3
 80062d2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80062da:	4b06      	ldr	r3, [pc, #24]	; (80062f4 <HAL_RCC_GetClockConfig+0x5c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 020f 	and.w	r2, r3, #15
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	601a      	str	r2, [r3, #0]
}
 80062e6:	bf00      	nop
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bc80      	pop	{r7}
 80062ee:	4770      	bx	lr
 80062f0:	40023800 	.word	0x40023800
 80062f4:	40023c00 	.word	0x40023c00

080062f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08a      	sub	sp, #40	; 0x28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8006304:	2300      	movs	r3, #0
 8006306:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	2b00      	cmp	r3, #0
 8006312:	d103      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8006318:	2b08      	cmp	r3, #8
 800631a:	d14c      	bne.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800631c:	4b6d      	ldr	r3, [pc, #436]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006322:	f7fc ffaf 	bl	8003284 <HAL_GetTick>
 8006326:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006328:	e008      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800632a:	f7fc ffab 	bl	8003284 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d901      	bls.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e0c7      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800633c:	4b66      	ldr	r3, [pc, #408]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1f0      	bne.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8006350:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	fa92 f2a2 	rbit	r2, r2
 8006358:	613a      	str	r2, [r7, #16]
  return result;
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	fab2 f282 	clz	r2, r2
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	fa03 f202 	lsl.w	r2, r3, r2
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 800636e:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006370:	69f9      	ldr	r1, [r7, #28]
 8006372:	fa91 f1a1 	rbit	r1, r1
 8006376:	61b9      	str	r1, [r7, #24]
  return result;
 8006378:	69b9      	ldr	r1, [r7, #24]
 800637a:	fab1 f181 	clz	r1, r1
 800637e:	b2c9      	uxtb	r1, r1
 8006380:	408b      	lsls	r3, r1
 8006382:	4955      	ldr	r1, [pc, #340]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006384:	4313      	orrs	r3, r2
 8006386:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800638a:	4b52      	ldr	r3, [pc, #328]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800638c:	2201      	movs	r2, #1
 800638e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006390:	f7fc ff78 	bl	8003284 <HAL_GetTick>
 8006394:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006396:	e008      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006398:	f7fc ff74 	bl	8003284 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d901      	bls.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e090      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80063aa:	4b4b      	ldr	r3, [pc, #300]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0f0      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0304 	and.w	r3, r3, #4
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 8083 	beq.w	80064ca <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	4b43      	ldr	r3, [pc, #268]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80063ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063cc:	4a42      	ldr	r2, [pc, #264]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80063ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063d2:	6413      	str	r3, [r2, #64]	; 0x40
 80063d4:	4b40      	ldr	r3, [pc, #256]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80063d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80063e0:	4b3e      	ldr	r3, [pc, #248]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a3d      	ldr	r2, [pc, #244]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80063e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063ea:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80063ec:	f7fc ff4a 	bl	8003284 <HAL_GetTick>
 80063f0:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80063f2:	e008      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80063f4:	f7fc ff46 	bl	8003284 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d901      	bls.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e062      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006406:	4b35      	ldr	r3, [pc, #212]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0f0      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006412:	4b31      	ldr	r3, [pc, #196]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800641a:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d02f      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800642a:	6a3a      	ldr	r2, [r7, #32]
 800642c:	429a      	cmp	r2, r3
 800642e:	d028      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006430:	4b29      	ldr	r3, [pc, #164]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006438:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800643a:	4b29      	ldr	r3, [pc, #164]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800643c:	2201      	movs	r2, #1
 800643e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006440:	4b27      	ldr	r3, [pc, #156]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006442:	2200      	movs	r2, #0
 8006444:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006446:	4a24      	ldr	r2, [pc, #144]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800644c:	4b22      	ldr	r3, [pc, #136]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800644e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b01      	cmp	r3, #1
 8006456:	d114      	bne.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006458:	f7fc ff14 	bl	8003284 <HAL_GetTick>
 800645c:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800645e:	e00a      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006460:	f7fc ff10 	bl	8003284 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	f241 3288 	movw	r2, #5000	; 0x1388
 800646e:	4293      	cmp	r3, r2
 8006470:	d901      	bls.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e02a      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006476:	4b18      	ldr	r3, [pc, #96]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0ee      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800648a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800648e:	d10d      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006490:	4b11      	ldr	r3, [pc, #68]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80064a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064a4:	490c      	ldr	r1, [pc, #48]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	608b      	str	r3, [r1, #8]
 80064aa:	e005      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80064ac:	4b0a      	ldr	r3, [pc, #40]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	4a09      	ldr	r2, [pc, #36]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80064b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80064b6:	6093      	str	r3, [r2, #8]
 80064b8:	4b07      	ldr	r3, [pc, #28]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80064ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064c4:	4904      	ldr	r1, [pc, #16]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3728      	adds	r7, #40	; 0x28
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	42470068 	.word	0x42470068
 80064d8:	40023800 	.word	0x40023800
 80064dc:	40007000 	.word	0x40007000
 80064e0:	42470e40 	.word	0x42470e40

080064e4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e07c      	b.n	80065f0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	7f5b      	ldrb	r3, [r3, #29]
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d105      	bne.n	800650c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7fc fade 	bl	8002ac8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	22ca      	movs	r2, #202	; 0xca
 8006518:	625a      	str	r2, [r3, #36]	; 0x24
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2253      	movs	r2, #83	; 0x53
 8006520:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 faec 	bl	8006b00 <RTC_EnterInitMode>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d008      	beq.n	8006540 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	22ff      	movs	r2, #255	; 0xff
 8006534:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2204      	movs	r2, #4
 800653a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e057      	b.n	80065f0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	6812      	ldr	r2, [r2, #0]
 800654a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800654e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006552:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6899      	ldr	r1, [r3, #8]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	431a      	orrs	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	68d2      	ldr	r2, [r2, #12]
 800657a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6919      	ldr	r1, [r3, #16]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	041a      	lsls	r2, r3, #16
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800659e:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fa85 	bl	8006ab0 <HAL_RTC_WaitForSynchro>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d008      	beq.n	80065be <HAL_RTC_Init+0xda>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	22ff      	movs	r2, #255	; 0xff
 80065b2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2204      	movs	r2, #4
 80065b8:	775a      	strb	r2, [r3, #29]

      return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e018      	b.n	80065f0 <HAL_RTC_Init+0x10c>
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80065cc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	699a      	ldr	r2, [r3, #24]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	22ff      	movs	r2, #255	; 0xff
 80065e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80065ee:	2300      	movs	r3, #0
  }
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80065f8:	b590      	push	{r4, r7, lr}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	7f1b      	ldrb	r3, [r3, #28]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_RTC_SetTime+0x1c>
 8006610:	2302      	movs	r3, #2
 8006612:	e0a3      	b.n	800675c <HAL_RTC_SetTime+0x164>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2201      	movs	r2, #1
 8006618:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2202      	movs	r2, #2
 800661e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d126      	bne.n	8006674 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006630:	2b00      	cmp	r3, #0
 8006632:	d102      	bne.n	800663a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2200      	movs	r2, #0
 8006638:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fa8a 	bl	8006b58 <RTC_ByteToBcd2>
 8006644:	4603      	mov	r3, r0
 8006646:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	785b      	ldrb	r3, [r3, #1]
 800664c:	4618      	mov	r0, r3
 800664e:	f000 fa83 	bl	8006b58 <RTC_ByteToBcd2>
 8006652:	4603      	mov	r3, r0
 8006654:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006656:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	789b      	ldrb	r3, [r3, #2]
 800665c:	4618      	mov	r0, r3
 800665e:	f000 fa7b 	bl	8006b58 <RTC_ByteToBcd2>
 8006662:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006664:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	78db      	ldrb	r3, [r3, #3]
 800666c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800666e:	4313      	orrs	r3, r2
 8006670:	617b      	str	r3, [r7, #20]
 8006672:	e018      	b.n	80066a6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667e:	2b00      	cmp	r3, #0
 8006680:	d102      	bne.n	8006688 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	2200      	movs	r2, #0
 8006686:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	785b      	ldrb	r3, [r3, #1]
 8006692:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006694:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800669a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	78db      	ldrb	r3, [r3, #3]
 80066a0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80066a2:	4313      	orrs	r3, r2
 80066a4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	22ca      	movs	r2, #202	; 0xca
 80066ac:	625a      	str	r2, [r3, #36]	; 0x24
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2253      	movs	r2, #83	; 0x53
 80066b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 fa22 	bl	8006b00 <RTC_EnterInitMode>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00b      	beq.n	80066da <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	22ff      	movs	r2, #255	; 0xff
 80066c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2204      	movs	r2, #4
 80066ce:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e040      	b.n	800675c <HAL_RTC_SetTime+0x164>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80066e4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80066e8:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80066f8:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6899      	ldr	r1, [r3, #8]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	431a      	orrs	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006720:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 f9c4 	bl	8006ab0 <HAL_RTC_WaitForSynchro>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00b      	beq.n	8006746 <HAL_RTC_SetTime+0x14e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	22ff      	movs	r2, #255	; 0xff
 8006734:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2204      	movs	r2, #4
 800673a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e00a      	b.n	800675c <HAL_RTC_SetTime+0x164>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	22ff      	movs	r2, #255	; 0xff
 800674c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2201      	movs	r2, #1
 8006752:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800675a:	2300      	movs	r3, #0
  }
}
 800675c:	4618      	mov	r0, r3
 800675e:	371c      	adds	r7, #28
 8006760:	46bd      	mov	sp, r7
 8006762:	bd90      	pop	{r4, r7, pc}

08006764 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006764:	b590      	push	{r4, r7, lr}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	7f1b      	ldrb	r3, [r3, #28]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_RTC_SetDate+0x1c>
 800677c:	2302      	movs	r3, #2
 800677e:	e08d      	b.n	800689c <HAL_RTC_SetDate+0x138>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2201      	movs	r2, #1
 8006784:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2202      	movs	r2, #2
 800678a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10e      	bne.n	80067b0 <HAL_RTC_SetDate+0x4c>
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	785b      	ldrb	r3, [r3, #1]
 8006796:	f003 0310 	and.w	r3, r3, #16
 800679a:	2b00      	cmp	r3, #0
 800679c:	d008      	beq.n	80067b0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~0x10) + (uint8_t)0x0A);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	785b      	ldrb	r3, [r3, #1]
 80067a2:	f023 0310 	bic.w	r3, r3, #16
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	330a      	adds	r3, #10
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d11c      	bne.n	80067f0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	78db      	ldrb	r3, [r3, #3]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 f9cc 	bl	8006b58 <RTC_ByteToBcd2>
 80067c0:	4603      	mov	r3, r0
 80067c2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	785b      	ldrb	r3, [r3, #1]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 f9c5 	bl	8006b58 <RTC_ByteToBcd2>
 80067ce:	4603      	mov	r3, r0
 80067d0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80067d2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	789b      	ldrb	r3, [r3, #2]
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 f9bd 	bl	8006b58 <RTC_ByteToBcd2>
 80067de:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80067e0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80067ea:	4313      	orrs	r3, r2
 80067ec:	617b      	str	r3, [r7, #20]
 80067ee:	e00e      	b.n	800680e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	78db      	ldrb	r3, [r3, #3]
 80067f4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	785b      	ldrb	r3, [r3, #1]
 80067fa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80067fc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006802:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800680a:	4313      	orrs	r3, r2
 800680c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	22ca      	movs	r2, #202	; 0xca
 8006814:	625a      	str	r2, [r3, #36]	; 0x24
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2253      	movs	r2, #83	; 0x53
 800681c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 f96e 	bl	8006b00 <RTC_EnterInitMode>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00b      	beq.n	8006842 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	22ff      	movs	r2, #255	; 0xff
 8006830:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2204      	movs	r2, #4
 8006836:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e02c      	b.n	800689c <HAL_RTC_SetDate+0x138>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800684c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006850:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68da      	ldr	r2, [r3, #12]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006860:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 f924 	bl	8006ab0 <HAL_RTC_WaitForSynchro>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00b      	beq.n	8006886 <HAL_RTC_SetDate+0x122>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	22ff      	movs	r2, #255	; 0xff
 8006874:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2204      	movs	r2, #4
 800687a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e00a      	b.n	800689c <HAL_RTC_SetDate+0x138>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	22ff      	movs	r2, #255	; 0xff
 800688c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2201      	movs	r2, #1
 8006892:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800689a:	2300      	movs	r3, #0
  }
}
 800689c:	4618      	mov	r0, r3
 800689e:	371c      	adds	r7, #28
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd90      	pop	{r4, r7, pc}

080068a4 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80068a4:	b590      	push	{r4, r7, lr}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	7f1b      	ldrb	r3, [r3, #28]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d101      	bne.n	80068c4 <HAL_RTC_SetAlarm+0x20>
 80068c0:	2302      	movs	r3, #2
 80068c2:	e0f1      	b.n	8006aa8 <HAL_RTC_SetAlarm+0x204>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2201      	movs	r2, #1
 80068c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2202      	movs	r2, #2
 80068ce:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d136      	bne.n	8006944 <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d102      	bne.n	80068ea <HAL_RTC_SetAlarm+0x46>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2200      	movs	r2, #0
 80068e8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 f932 	bl	8006b58 <RTC_ByteToBcd2>
 80068f4:	4603      	mov	r3, r0
 80068f6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	785b      	ldrb	r3, [r3, #1]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 f92b 	bl	8006b58 <RTC_ByteToBcd2>
 8006902:	4603      	mov	r3, r0
 8006904:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006906:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	789b      	ldrb	r3, [r3, #2]
 800690c:	4618      	mov	r0, r3
 800690e:	f000 f923 	bl	8006b58 <RTC_ByteToBcd2>
 8006912:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006914:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	78db      	ldrb	r3, [r3, #3]
 800691c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800691e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	7d1b      	ldrb	r3, [r3, #20]
 8006926:	4618      	mov	r0, r3
 8006928:	f000 f916 	bl	8006b58 <RTC_ByteToBcd2>
 800692c:	4603      	mov	r3, r0
 800692e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006930:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006938:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800693e:	4313      	orrs	r3, r2
 8006940:	617b      	str	r3, [r7, #20]
 8006942:	e022      	b.n	800698a <HAL_RTC_SetAlarm+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694e:	2b00      	cmp	r3, #0
 8006950:	d102      	bne.n	8006958 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2200      	movs	r2, #0
 8006956:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	785b      	ldrb	r3, [r3, #1]
 8006962:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006964:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800696a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	78db      	ldrb	r3, [r3, #3]
 8006970:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006972:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	7d1b      	ldrb	r3, [r3, #20]
 8006978:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800697a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006980:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006986:	4313      	orrs	r3, r2
 8006988:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	22ca      	movs	r2, #202	; 0xca
 8006990:	625a      	str	r2, [r3, #36]	; 0x24
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2253      	movs	r2, #83	; 0x53
 8006998:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069a2:	d13b      	bne.n	8006a1c <HAL_RTC_SetAlarm+0x178>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069b2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689a      	ldr	r2, [r3, #8]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80069c2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80069c4:	f7fc fc5e 	bl	8003284 <HAL_GetTick>
 80069c8:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80069ca:	e013      	b.n	80069f4 <HAL_RTC_SetAlarm+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80069cc:	f7fc fc5a 	bl	8003284 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069da:	d90b      	bls.n	80069f4 <HAL_RTC_SetAlarm+0x150>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	22ff      	movs	r2, #255	; 0xff
 80069e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2203      	movs	r2, #3
 80069e8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e059      	b.n	8006aa8 <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0e4      	beq.n	80069cc <HAL_RTC_SetAlarm+0x128>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a18:	609a      	str	r2, [r3, #8]
 8006a1a:	e03a      	b.n	8006a92 <HAL_RTC_SetAlarm+0x1ee>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689a      	ldr	r2, [r3, #8]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006a2a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689a      	ldr	r2, [r3, #8]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a3a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a3c:	f7fc fc22 	bl	8003284 <HAL_GetTick>
 8006a40:	6138      	str	r0, [r7, #16]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8006a42:	e013      	b.n	8006a6c <HAL_RTC_SetAlarm+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a44:	f7fc fc1e 	bl	8003284 <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a52:	d90b      	bls.n	8006a6c <HAL_RTC_SetAlarm+0x1c8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	22ff      	movs	r2, #255	; 0xff
 8006a5a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2203      	movs	r2, #3
 8006a60:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e01d      	b.n	8006aa8 <HAL_RTC_SetAlarm+0x204>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d0e4      	beq.n	8006a44 <HAL_RTC_SetAlarm+0x1a0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	689a      	ldr	r2, [r3, #8]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a90:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	22ff      	movs	r2, #255	; 0xff
 8006a98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	371c      	adds	r7, #28
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd90      	pop	{r4, r7, pc}

08006ab0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006aca:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006acc:	f7fc fbda 	bl	8003284 <HAL_GetTick>
 8006ad0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006ad2:	e009      	b.n	8006ae8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ad4:	f7fc fbd6 	bl	8003284 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ae2:	d901      	bls.n	8006ae8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e007      	b.n	8006af8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	f003 0320 	and.w	r3, r3, #32
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0ee      	beq.n	8006ad4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d119      	bne.n	8006b4e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b22:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b24:	f7fc fbae 	bl	8003284 <HAL_GetTick>
 8006b28:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006b2a:	e009      	b.n	8006b40 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b2c:	f7fc fbaa 	bl	8003284 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b3a:	d901      	bls.n	8006b40 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e007      	b.n	8006b50 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d0ee      	beq.n	8006b2c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	4603      	mov	r3, r0
 8006b60:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	60fb      	str	r3, [r7, #12]

  while (Value >= 10)
 8006b66:	e005      	b.n	8006b74 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8006b6e:	79fb      	ldrb	r3, [r7, #7]
 8006b70:	3b0a      	subs	r3, #10
 8006b72:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 8006b74:	79fb      	ldrb	r3, [r7, #7]
 8006b76:	2b09      	cmp	r3, #9
 8006b78:	d8f6      	bhi.n	8006b68 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	011b      	lsls	r3, r3, #4
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	79fb      	ldrb	r3, [r7, #7]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	b2db      	uxtb	r3, r3
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bc80      	pop	{r7}
 8006b90:	4770      	bx	lr

08006b92 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b086      	sub	sp, #24
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	60f8      	str	r0, [r7, #12]
 8006b9a:	60b9      	str	r1, [r7, #8]
 8006b9c:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	7f1b      	ldrb	r3, [r3, #28]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d101      	bne.n	8006bae <HAL_RTCEx_SetWakeUpTimer+0x1c>
 8006baa:	2302      	movs	r3, #2
 8006bac:	e081      	b.n	8006cb2 <HAL_RTCEx_SetWakeUpTimer+0x120>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	22ca      	movs	r2, #202	; 0xca
 8006bc0:	625a      	str	r2, [r3, #36]	; 0x24
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2253      	movs	r2, #83	; 0x53
 8006bc8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d01e      	beq.n	8006c16 <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 8006bd8:	f7fc fb54 	bl	8003284 <HAL_GetTick>
 8006bdc:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8006bde:	e013      	b.n	8006c08 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006be0:	f7fc fb50 	bl	8003284 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bee:	d90b      	bls.n	8006c08 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	22ff      	movs	r2, #255	; 0xff
 8006bf6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2203      	movs	r2, #3
 8006bfc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e054      	b.n	8006cb2 <HAL_RTCEx_SetWakeUpTimer+0x120>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	f003 0304 	and.w	r3, r3, #4
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e4      	bne.n	8006be0 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c24:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c26:	f7fc fb2d 	bl	8003284 <HAL_GetTick>
 8006c2a:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8006c2c:	e013      	b.n	8006c56 <HAL_RTCEx_SetWakeUpTimer+0xc4>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c2e:	f7fc fb29 	bl	8003284 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c3c:	d90b      	bls.n	8006c56 <HAL_RTCEx_SetWakeUpTimer+0xc4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	22ff      	movs	r2, #255	; 0xff
 8006c44:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2203      	movs	r2, #3
 8006c4a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e02d      	b.n	8006cb2 <HAL_RTCEx_SetWakeUpTimer+0x120>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	f003 0304 	and.w	r3, r3, #4
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d0e4      	beq.n	8006c2e <HAL_RTCEx_SetWakeUpTimer+0x9c>
    }
  }

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f022 0207 	bic.w	r2, r2, #7
 8006c72:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6899      	ldr	r1, [r3, #8]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	609a      	str	r2, [r3, #8]

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	615a      	str	r2, [r3, #20]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689a      	ldr	r2, [r3, #8]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c9a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	22ff      	movs	r2, #255	; 0xff
 8006ca2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3718      	adds	r7, #24
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b082      	sub	sp, #8
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e041      	b.n	8006d50 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d106      	bne.n	8006ce6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7fb ff07 	bl	8002af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2202      	movs	r2, #2
 8006cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	f000 fc69 	bl	80075d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d001      	beq.n	8006d70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e04e      	b.n	8006e0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68da      	ldr	r2, [r3, #12]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f042 0201 	orr.w	r2, r2, #1
 8006d86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a22      	ldr	r2, [pc, #136]	; (8006e18 <HAL_TIM_Base_Start_IT+0xc0>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d022      	beq.n	8006dd8 <HAL_TIM_Base_Start_IT+0x80>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d9a:	d01d      	beq.n	8006dd8 <HAL_TIM_Base_Start_IT+0x80>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a1e      	ldr	r2, [pc, #120]	; (8006e1c <HAL_TIM_Base_Start_IT+0xc4>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d018      	beq.n	8006dd8 <HAL_TIM_Base_Start_IT+0x80>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a1d      	ldr	r2, [pc, #116]	; (8006e20 <HAL_TIM_Base_Start_IT+0xc8>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d013      	beq.n	8006dd8 <HAL_TIM_Base_Start_IT+0x80>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a1b      	ldr	r2, [pc, #108]	; (8006e24 <HAL_TIM_Base_Start_IT+0xcc>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d00e      	beq.n	8006dd8 <HAL_TIM_Base_Start_IT+0x80>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a1a      	ldr	r2, [pc, #104]	; (8006e28 <HAL_TIM_Base_Start_IT+0xd0>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d009      	beq.n	8006dd8 <HAL_TIM_Base_Start_IT+0x80>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a18      	ldr	r2, [pc, #96]	; (8006e2c <HAL_TIM_Base_Start_IT+0xd4>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d004      	beq.n	8006dd8 <HAL_TIM_Base_Start_IT+0x80>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a17      	ldr	r2, [pc, #92]	; (8006e30 <HAL_TIM_Base_Start_IT+0xd8>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d111      	bne.n	8006dfc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2b06      	cmp	r3, #6
 8006de8:	d010      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f042 0201 	orr.w	r2, r2, #1
 8006df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dfa:	e007      	b.n	8006e0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f042 0201 	orr.w	r2, r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bc80      	pop	{r7}
 8006e16:	4770      	bx	lr
 8006e18:	40010000 	.word	0x40010000
 8006e1c:	40000400 	.word	0x40000400
 8006e20:	40000800 	.word	0x40000800
 8006e24:	40000c00 	.word	0x40000c00
 8006e28:	40010400 	.word	0x40010400
 8006e2c:	40014000 	.word	0x40014000
 8006e30:	40001800 	.word	0x40001800

08006e34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e041      	b.n	8006eca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d106      	bne.n	8006e60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f839 	bl	8006ed2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2202      	movs	r2, #2
 8006e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	3304      	adds	r3, #4
 8006e70:	4619      	mov	r1, r3
 8006e72:	4610      	mov	r0, r2
 8006e74:	f000 fbac 	bl	80075d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006eda:	bf00      	nop
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bc80      	pop	{r7}
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d109      	bne.n	8006f08 <HAL_TIM_PWM_Start+0x24>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	bf14      	ite	ne
 8006f00:	2301      	movne	r3, #1
 8006f02:	2300      	moveq	r3, #0
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	e022      	b.n	8006f4e <HAL_TIM_PWM_Start+0x6a>
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	2b04      	cmp	r3, #4
 8006f0c:	d109      	bne.n	8006f22 <HAL_TIM_PWM_Start+0x3e>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	bf14      	ite	ne
 8006f1a:	2301      	movne	r3, #1
 8006f1c:	2300      	moveq	r3, #0
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	e015      	b.n	8006f4e <HAL_TIM_PWM_Start+0x6a>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b08      	cmp	r3, #8
 8006f26:	d109      	bne.n	8006f3c <HAL_TIM_PWM_Start+0x58>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	bf14      	ite	ne
 8006f34:	2301      	movne	r3, #1
 8006f36:	2300      	moveq	r3, #0
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	e008      	b.n	8006f4e <HAL_TIM_PWM_Start+0x6a>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	bf14      	ite	ne
 8006f48:	2301      	movne	r3, #1
 8006f4a:	2300      	moveq	r3, #0
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e07c      	b.n	8007050 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d104      	bne.n	8006f66 <HAL_TIM_PWM_Start+0x82>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f64:	e013      	b.n	8006f8e <HAL_TIM_PWM_Start+0xaa>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b04      	cmp	r3, #4
 8006f6a:	d104      	bne.n	8006f76 <HAL_TIM_PWM_Start+0x92>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f74:	e00b      	b.n	8006f8e <HAL_TIM_PWM_Start+0xaa>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b08      	cmp	r3, #8
 8006f7a:	d104      	bne.n	8006f86 <HAL_TIM_PWM_Start+0xa2>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f84:	e003      	b.n	8006f8e <HAL_TIM_PWM_Start+0xaa>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2202      	movs	r2, #2
 8006f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2201      	movs	r2, #1
 8006f94:	6839      	ldr	r1, [r7, #0]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 fdfa 	bl	8007b90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a2d      	ldr	r2, [pc, #180]	; (8007058 <HAL_TIM_PWM_Start+0x174>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d004      	beq.n	8006fb0 <HAL_TIM_PWM_Start+0xcc>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a2c      	ldr	r2, [pc, #176]	; (800705c <HAL_TIM_PWM_Start+0x178>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d101      	bne.n	8006fb4 <HAL_TIM_PWM_Start+0xd0>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e000      	b.n	8006fb6 <HAL_TIM_PWM_Start+0xd2>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d007      	beq.n	8006fca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a22      	ldr	r2, [pc, #136]	; (8007058 <HAL_TIM_PWM_Start+0x174>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d022      	beq.n	800701a <HAL_TIM_PWM_Start+0x136>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fdc:	d01d      	beq.n	800701a <HAL_TIM_PWM_Start+0x136>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a1f      	ldr	r2, [pc, #124]	; (8007060 <HAL_TIM_PWM_Start+0x17c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d018      	beq.n	800701a <HAL_TIM_PWM_Start+0x136>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a1d      	ldr	r2, [pc, #116]	; (8007064 <HAL_TIM_PWM_Start+0x180>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d013      	beq.n	800701a <HAL_TIM_PWM_Start+0x136>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a1c      	ldr	r2, [pc, #112]	; (8007068 <HAL_TIM_PWM_Start+0x184>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d00e      	beq.n	800701a <HAL_TIM_PWM_Start+0x136>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a16      	ldr	r2, [pc, #88]	; (800705c <HAL_TIM_PWM_Start+0x178>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d009      	beq.n	800701a <HAL_TIM_PWM_Start+0x136>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a18      	ldr	r2, [pc, #96]	; (800706c <HAL_TIM_PWM_Start+0x188>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d004      	beq.n	800701a <HAL_TIM_PWM_Start+0x136>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a16      	ldr	r2, [pc, #88]	; (8007070 <HAL_TIM_PWM_Start+0x18c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d111      	bne.n	800703e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f003 0307 	and.w	r3, r3, #7
 8007024:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2b06      	cmp	r3, #6
 800702a:	d010      	beq.n	800704e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f042 0201 	orr.w	r2, r2, #1
 800703a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800703c:	e007      	b.n	800704e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f042 0201 	orr.w	r2, r2, #1
 800704c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	40010000 	.word	0x40010000
 800705c:	40010400 	.word	0x40010400
 8007060:	40000400 	.word	0x40000400
 8007064:	40000800 	.word	0x40000800
 8007068:	40000c00 	.word	0x40000c00
 800706c:	40014000 	.word	0x40014000
 8007070:	40001800 	.word	0x40001800

08007074 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b02      	cmp	r3, #2
 8007088:	d122      	bne.n	80070d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f003 0302 	and.w	r3, r3, #2
 8007094:	2b02      	cmp	r3, #2
 8007096:	d11b      	bne.n	80070d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f06f 0202 	mvn.w	r2, #2
 80070a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	f003 0303 	and.w	r3, r3, #3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fa6f 	bl	800759a <HAL_TIM_IC_CaptureCallback>
 80070bc:	e005      	b.n	80070ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fa62 	bl	8007588 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fa71 	bl	80075ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	f003 0304 	and.w	r3, r3, #4
 80070da:	2b04      	cmp	r3, #4
 80070dc:	d122      	bne.n	8007124 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	d11b      	bne.n	8007124 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f06f 0204 	mvn.w	r2, #4
 80070f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2202      	movs	r2, #2
 80070fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fa45 	bl	800759a <HAL_TIM_IC_CaptureCallback>
 8007110:	e005      	b.n	800711e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fa38 	bl	8007588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fa47 	bl	80075ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b08      	cmp	r3, #8
 8007130:	d122      	bne.n	8007178 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f003 0308 	and.w	r3, r3, #8
 800713c:	2b08      	cmp	r3, #8
 800713e:	d11b      	bne.n	8007178 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f06f 0208 	mvn.w	r2, #8
 8007148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2204      	movs	r2, #4
 800714e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	f003 0303 	and.w	r3, r3, #3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fa1b 	bl	800759a <HAL_TIM_IC_CaptureCallback>
 8007164:	e005      	b.n	8007172 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fa0e 	bl	8007588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fa1d 	bl	80075ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	f003 0310 	and.w	r3, r3, #16
 8007182:	2b10      	cmp	r3, #16
 8007184:	d122      	bne.n	80071cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f003 0310 	and.w	r3, r3, #16
 8007190:	2b10      	cmp	r3, #16
 8007192:	d11b      	bne.n	80071cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f06f 0210 	mvn.w	r2, #16
 800719c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2208      	movs	r2, #8
 80071a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f9f1 	bl	800759a <HAL_TIM_IC_CaptureCallback>
 80071b8:	e005      	b.n	80071c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f9e4 	bl	8007588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f9f3 	bl	80075ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d10e      	bne.n	80071f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d107      	bne.n	80071f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f06f 0201 	mvn.w	r2, #1
 80071f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7fb f910 	bl	8002418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007202:	2b80      	cmp	r3, #128	; 0x80
 8007204:	d10e      	bne.n	8007224 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007210:	2b80      	cmp	r3, #128	; 0x80
 8007212:	d107      	bne.n	8007224 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800721c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fdae 	bl	8007d80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722e:	2b40      	cmp	r3, #64	; 0x40
 8007230:	d10e      	bne.n	8007250 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723c:	2b40      	cmp	r3, #64	; 0x40
 800723e:	d107      	bne.n	8007250 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f9b7 	bl	80075be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b20      	cmp	r3, #32
 800725c:	d10e      	bne.n	800727c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f003 0320 	and.w	r3, r3, #32
 8007268:	2b20      	cmp	r3, #32
 800726a:	d107      	bne.n	800727c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f06f 0220 	mvn.w	r2, #32
 8007274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fd79 	bl	8007d6e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800727c:	bf00      	nop
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800729a:	2302      	movs	r3, #2
 800729c:	e0ac      	b.n	80073f8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b0c      	cmp	r3, #12
 80072aa:	f200 809f 	bhi.w	80073ec <HAL_TIM_PWM_ConfigChannel+0x168>
 80072ae:	a201      	add	r2, pc, #4	; (adr r2, 80072b4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80072b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b4:	080072e9 	.word	0x080072e9
 80072b8:	080073ed 	.word	0x080073ed
 80072bc:	080073ed 	.word	0x080073ed
 80072c0:	080073ed 	.word	0x080073ed
 80072c4:	08007329 	.word	0x08007329
 80072c8:	080073ed 	.word	0x080073ed
 80072cc:	080073ed 	.word	0x080073ed
 80072d0:	080073ed 	.word	0x080073ed
 80072d4:	0800736b 	.word	0x0800736b
 80072d8:	080073ed 	.word	0x080073ed
 80072dc:	080073ed 	.word	0x080073ed
 80072e0:	080073ed 	.word	0x080073ed
 80072e4:	080073ab 	.word	0x080073ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68b9      	ldr	r1, [r7, #8]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 fa0c 	bl	800770c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699a      	ldr	r2, [r3, #24]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f042 0208 	orr.w	r2, r2, #8
 8007302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	699a      	ldr	r2, [r3, #24]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f022 0204 	bic.w	r2, r2, #4
 8007312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6999      	ldr	r1, [r3, #24]
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	691a      	ldr	r2, [r3, #16]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	619a      	str	r2, [r3, #24]
      break;
 8007326:	e062      	b.n	80073ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68b9      	ldr	r1, [r7, #8]
 800732e:	4618      	mov	r0, r3
 8007330:	f000 fa5c 	bl	80077ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	699a      	ldr	r2, [r3, #24]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	699a      	ldr	r2, [r3, #24]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6999      	ldr	r1, [r3, #24]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	021a      	lsls	r2, r3, #8
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	430a      	orrs	r2, r1
 8007366:	619a      	str	r2, [r3, #24]
      break;
 8007368:	e041      	b.n	80073ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68b9      	ldr	r1, [r7, #8]
 8007370:	4618      	mov	r0, r3
 8007372:	f000 faaf 	bl	80078d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	69da      	ldr	r2, [r3, #28]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f042 0208 	orr.w	r2, r2, #8
 8007384:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	69da      	ldr	r2, [r3, #28]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 0204 	bic.w	r2, r2, #4
 8007394:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	69d9      	ldr	r1, [r3, #28]
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	691a      	ldr	r2, [r3, #16]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	61da      	str	r2, [r3, #28]
      break;
 80073a8:	e021      	b.n	80073ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68b9      	ldr	r1, [r7, #8]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f000 fb03 	bl	80079bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	69da      	ldr	r2, [r3, #28]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	69da      	ldr	r2, [r3, #28]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	69d9      	ldr	r1, [r3, #28]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	021a      	lsls	r2, r3, #8
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	61da      	str	r2, [r3, #28]
      break;
 80073ea:	e000      	b.n	80073ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80073ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007410:	2b01      	cmp	r3, #1
 8007412:	d101      	bne.n	8007418 <HAL_TIM_ConfigClockSource+0x18>
 8007414:	2302      	movs	r3, #2
 8007416:	e0b3      	b.n	8007580 <HAL_TIM_ConfigClockSource+0x180>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2202      	movs	r2, #2
 8007424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007436:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800743e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007450:	d03e      	beq.n	80074d0 <HAL_TIM_ConfigClockSource+0xd0>
 8007452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007456:	f200 8087 	bhi.w	8007568 <HAL_TIM_ConfigClockSource+0x168>
 800745a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800745e:	f000 8085 	beq.w	800756c <HAL_TIM_ConfigClockSource+0x16c>
 8007462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007466:	d87f      	bhi.n	8007568 <HAL_TIM_ConfigClockSource+0x168>
 8007468:	2b70      	cmp	r3, #112	; 0x70
 800746a:	d01a      	beq.n	80074a2 <HAL_TIM_ConfigClockSource+0xa2>
 800746c:	2b70      	cmp	r3, #112	; 0x70
 800746e:	d87b      	bhi.n	8007568 <HAL_TIM_ConfigClockSource+0x168>
 8007470:	2b60      	cmp	r3, #96	; 0x60
 8007472:	d050      	beq.n	8007516 <HAL_TIM_ConfigClockSource+0x116>
 8007474:	2b60      	cmp	r3, #96	; 0x60
 8007476:	d877      	bhi.n	8007568 <HAL_TIM_ConfigClockSource+0x168>
 8007478:	2b50      	cmp	r3, #80	; 0x50
 800747a:	d03c      	beq.n	80074f6 <HAL_TIM_ConfigClockSource+0xf6>
 800747c:	2b50      	cmp	r3, #80	; 0x50
 800747e:	d873      	bhi.n	8007568 <HAL_TIM_ConfigClockSource+0x168>
 8007480:	2b40      	cmp	r3, #64	; 0x40
 8007482:	d058      	beq.n	8007536 <HAL_TIM_ConfigClockSource+0x136>
 8007484:	2b40      	cmp	r3, #64	; 0x40
 8007486:	d86f      	bhi.n	8007568 <HAL_TIM_ConfigClockSource+0x168>
 8007488:	2b30      	cmp	r3, #48	; 0x30
 800748a:	d064      	beq.n	8007556 <HAL_TIM_ConfigClockSource+0x156>
 800748c:	2b30      	cmp	r3, #48	; 0x30
 800748e:	d86b      	bhi.n	8007568 <HAL_TIM_ConfigClockSource+0x168>
 8007490:	2b20      	cmp	r3, #32
 8007492:	d060      	beq.n	8007556 <HAL_TIM_ConfigClockSource+0x156>
 8007494:	2b20      	cmp	r3, #32
 8007496:	d867      	bhi.n	8007568 <HAL_TIM_ConfigClockSource+0x168>
 8007498:	2b00      	cmp	r3, #0
 800749a:	d05c      	beq.n	8007556 <HAL_TIM_ConfigClockSource+0x156>
 800749c:	2b10      	cmp	r3, #16
 800749e:	d05a      	beq.n	8007556 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80074a0:	e062      	b.n	8007568 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6818      	ldr	r0, [r3, #0]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	6899      	ldr	r1, [r3, #8]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f000 fb4e 	bl	8007b52 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	609a      	str	r2, [r3, #8]
      break;
 80074ce:	e04e      	b.n	800756e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6818      	ldr	r0, [r3, #0]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	6899      	ldr	r1, [r3, #8]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	f000 fb37 	bl	8007b52 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	689a      	ldr	r2, [r3, #8]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074f2:	609a      	str	r2, [r3, #8]
      break;
 80074f4:	e03b      	b.n	800756e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6818      	ldr	r0, [r3, #0]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	6859      	ldr	r1, [r3, #4]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	461a      	mov	r2, r3
 8007504:	f000 faae 	bl	8007a64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2150      	movs	r1, #80	; 0x50
 800750e:	4618      	mov	r0, r3
 8007510:	f000 fb05 	bl	8007b1e <TIM_ITRx_SetConfig>
      break;
 8007514:	e02b      	b.n	800756e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6818      	ldr	r0, [r3, #0]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	6859      	ldr	r1, [r3, #4]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	461a      	mov	r2, r3
 8007524:	f000 facc 	bl	8007ac0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2160      	movs	r1, #96	; 0x60
 800752e:	4618      	mov	r0, r3
 8007530:	f000 faf5 	bl	8007b1e <TIM_ITRx_SetConfig>
      break;
 8007534:	e01b      	b.n	800756e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6818      	ldr	r0, [r3, #0]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	6859      	ldr	r1, [r3, #4]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	461a      	mov	r2, r3
 8007544:	f000 fa8e 	bl	8007a64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2140      	movs	r1, #64	; 0x40
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fae5 	bl	8007b1e <TIM_ITRx_SetConfig>
      break;
 8007554:	e00b      	b.n	800756e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4619      	mov	r1, r3
 8007560:	4610      	mov	r0, r2
 8007562:	f000 fadc 	bl	8007b1e <TIM_ITRx_SetConfig>
        break;
 8007566:	e002      	b.n	800756e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007568:	bf00      	nop
 800756a:	e000      	b.n	800756e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800756c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	bc80      	pop	{r7}
 8007598:	4770      	bx	lr

0800759a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075a2:	bf00      	nop
 80075a4:	370c      	adds	r7, #12
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bc80      	pop	{r7}
 80075aa:	4770      	bx	lr

080075ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bc80      	pop	{r7}
 80075bc:	4770      	bx	lr

080075be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075be:	b480      	push	{r7}
 80075c0:	b083      	sub	sp, #12
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075c6:	bf00      	nop
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bc80      	pop	{r7}
 80075ce:	4770      	bx	lr

080075d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a3f      	ldr	r2, [pc, #252]	; (80076e0 <TIM_Base_SetConfig+0x110>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d013      	beq.n	8007610 <TIM_Base_SetConfig+0x40>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ee:	d00f      	beq.n	8007610 <TIM_Base_SetConfig+0x40>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a3c      	ldr	r2, [pc, #240]	; (80076e4 <TIM_Base_SetConfig+0x114>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d00b      	beq.n	8007610 <TIM_Base_SetConfig+0x40>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a3b      	ldr	r2, [pc, #236]	; (80076e8 <TIM_Base_SetConfig+0x118>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d007      	beq.n	8007610 <TIM_Base_SetConfig+0x40>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a3a      	ldr	r2, [pc, #232]	; (80076ec <TIM_Base_SetConfig+0x11c>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d003      	beq.n	8007610 <TIM_Base_SetConfig+0x40>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a39      	ldr	r2, [pc, #228]	; (80076f0 <TIM_Base_SetConfig+0x120>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d108      	bne.n	8007622 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	4313      	orrs	r3, r2
 8007620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a2e      	ldr	r2, [pc, #184]	; (80076e0 <TIM_Base_SetConfig+0x110>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d02b      	beq.n	8007682 <TIM_Base_SetConfig+0xb2>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007630:	d027      	beq.n	8007682 <TIM_Base_SetConfig+0xb2>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a2b      	ldr	r2, [pc, #172]	; (80076e4 <TIM_Base_SetConfig+0x114>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d023      	beq.n	8007682 <TIM_Base_SetConfig+0xb2>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a2a      	ldr	r2, [pc, #168]	; (80076e8 <TIM_Base_SetConfig+0x118>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d01f      	beq.n	8007682 <TIM_Base_SetConfig+0xb2>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a29      	ldr	r2, [pc, #164]	; (80076ec <TIM_Base_SetConfig+0x11c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d01b      	beq.n	8007682 <TIM_Base_SetConfig+0xb2>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a28      	ldr	r2, [pc, #160]	; (80076f0 <TIM_Base_SetConfig+0x120>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d017      	beq.n	8007682 <TIM_Base_SetConfig+0xb2>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a27      	ldr	r2, [pc, #156]	; (80076f4 <TIM_Base_SetConfig+0x124>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d013      	beq.n	8007682 <TIM_Base_SetConfig+0xb2>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a26      	ldr	r2, [pc, #152]	; (80076f8 <TIM_Base_SetConfig+0x128>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d00f      	beq.n	8007682 <TIM_Base_SetConfig+0xb2>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a25      	ldr	r2, [pc, #148]	; (80076fc <TIM_Base_SetConfig+0x12c>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d00b      	beq.n	8007682 <TIM_Base_SetConfig+0xb2>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a24      	ldr	r2, [pc, #144]	; (8007700 <TIM_Base_SetConfig+0x130>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d007      	beq.n	8007682 <TIM_Base_SetConfig+0xb2>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a23      	ldr	r2, [pc, #140]	; (8007704 <TIM_Base_SetConfig+0x134>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d003      	beq.n	8007682 <TIM_Base_SetConfig+0xb2>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a22      	ldr	r2, [pc, #136]	; (8007708 <TIM_Base_SetConfig+0x138>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d108      	bne.n	8007694 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	4313      	orrs	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	4313      	orrs	r3, r2
 80076a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a09      	ldr	r2, [pc, #36]	; (80076e0 <TIM_Base_SetConfig+0x110>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d003      	beq.n	80076c8 <TIM_Base_SetConfig+0xf8>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a0b      	ldr	r2, [pc, #44]	; (80076f0 <TIM_Base_SetConfig+0x120>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d103      	bne.n	80076d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	691a      	ldr	r2, [r3, #16]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	615a      	str	r2, [r3, #20]
}
 80076d6:	bf00      	nop
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	bc80      	pop	{r7}
 80076de:	4770      	bx	lr
 80076e0:	40010000 	.word	0x40010000
 80076e4:	40000400 	.word	0x40000400
 80076e8:	40000800 	.word	0x40000800
 80076ec:	40000c00 	.word	0x40000c00
 80076f0:	40010400 	.word	0x40010400
 80076f4:	40014000 	.word	0x40014000
 80076f8:	40014400 	.word	0x40014400
 80076fc:	40014800 	.word	0x40014800
 8007700:	40001800 	.word	0x40001800
 8007704:	40001c00 	.word	0x40001c00
 8007708:	40002000 	.word	0x40002000

0800770c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800770c:	b480      	push	{r7}
 800770e:	b087      	sub	sp, #28
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	f023 0201 	bic.w	r2, r3, #1
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f023 0303 	bic.w	r3, r3, #3
 8007742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	4313      	orrs	r3, r2
 800774c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f023 0302 	bic.w	r3, r3, #2
 8007754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	4313      	orrs	r3, r2
 800775e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a20      	ldr	r2, [pc, #128]	; (80077e4 <TIM_OC1_SetConfig+0xd8>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d003      	beq.n	8007770 <TIM_OC1_SetConfig+0x64>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a1f      	ldr	r2, [pc, #124]	; (80077e8 <TIM_OC1_SetConfig+0xdc>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d10c      	bne.n	800778a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f023 0308 	bic.w	r3, r3, #8
 8007776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	4313      	orrs	r3, r2
 8007780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f023 0304 	bic.w	r3, r3, #4
 8007788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a15      	ldr	r2, [pc, #84]	; (80077e4 <TIM_OC1_SetConfig+0xd8>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d003      	beq.n	800779a <TIM_OC1_SetConfig+0x8e>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a14      	ldr	r2, [pc, #80]	; (80077e8 <TIM_OC1_SetConfig+0xdc>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d111      	bne.n	80077be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	693a      	ldr	r2, [r7, #16]
 80077c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	621a      	str	r2, [r3, #32]
}
 80077d8:	bf00      	nop
 80077da:	371c      	adds	r7, #28
 80077dc:	46bd      	mov	sp, r7
 80077de:	bc80      	pop	{r7}
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	40010000 	.word	0x40010000
 80077e8:	40010400 	.word	0x40010400

080077ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	f023 0210 	bic.w	r2, r3, #16
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800781a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	021b      	lsls	r3, r3, #8
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	4313      	orrs	r3, r2
 800782e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f023 0320 	bic.w	r3, r3, #32
 8007836:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	011b      	lsls	r3, r3, #4
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	4313      	orrs	r3, r2
 8007842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a21      	ldr	r2, [pc, #132]	; (80078cc <TIM_OC2_SetConfig+0xe0>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d003      	beq.n	8007854 <TIM_OC2_SetConfig+0x68>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a20      	ldr	r2, [pc, #128]	; (80078d0 <TIM_OC2_SetConfig+0xe4>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d10d      	bne.n	8007870 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800785a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	011b      	lsls	r3, r3, #4
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	4313      	orrs	r3, r2
 8007866:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800786e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a16      	ldr	r2, [pc, #88]	; (80078cc <TIM_OC2_SetConfig+0xe0>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d003      	beq.n	8007880 <TIM_OC2_SetConfig+0x94>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a15      	ldr	r2, [pc, #84]	; (80078d0 <TIM_OC2_SetConfig+0xe4>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d113      	bne.n	80078a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007886:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800788e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	4313      	orrs	r3, r2
 800789a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	621a      	str	r2, [r3, #32]
}
 80078c2:	bf00      	nop
 80078c4:	371c      	adds	r7, #28
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bc80      	pop	{r7}
 80078ca:	4770      	bx	lr
 80078cc:	40010000 	.word	0x40010000
 80078d0:	40010400 	.word	0x40010400

080078d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 0303 	bic.w	r3, r3, #3
 800790a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	4313      	orrs	r3, r2
 8007914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800791c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	021b      	lsls	r3, r3, #8
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	4313      	orrs	r3, r2
 8007928:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a21      	ldr	r2, [pc, #132]	; (80079b4 <TIM_OC3_SetConfig+0xe0>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d003      	beq.n	800793a <TIM_OC3_SetConfig+0x66>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a20      	ldr	r2, [pc, #128]	; (80079b8 <TIM_OC3_SetConfig+0xe4>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d10d      	bne.n	8007956 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007940:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	021b      	lsls	r3, r3, #8
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	4313      	orrs	r3, r2
 800794c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a16      	ldr	r2, [pc, #88]	; (80079b4 <TIM_OC3_SetConfig+0xe0>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d003      	beq.n	8007966 <TIM_OC3_SetConfig+0x92>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a15      	ldr	r2, [pc, #84]	; (80079b8 <TIM_OC3_SetConfig+0xe4>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d113      	bne.n	800798e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800796c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	011b      	lsls	r3, r3, #4
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	4313      	orrs	r3, r2
 8007980:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	4313      	orrs	r3, r2
 800798c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	697a      	ldr	r2, [r7, #20]
 80079a6:	621a      	str	r2, [r3, #32]
}
 80079a8:	bf00      	nop
 80079aa:	371c      	adds	r7, #28
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bc80      	pop	{r7}
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	40010000 	.word	0x40010000
 80079b8:	40010400 	.word	0x40010400

080079bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	021b      	lsls	r3, r3, #8
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	031b      	lsls	r3, r3, #12
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a11      	ldr	r2, [pc, #68]	; (8007a5c <TIM_OC4_SetConfig+0xa0>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d003      	beq.n	8007a24 <TIM_OC4_SetConfig+0x68>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a10      	ldr	r2, [pc, #64]	; (8007a60 <TIM_OC4_SetConfig+0xa4>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d109      	bne.n	8007a38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	695b      	ldr	r3, [r3, #20]
 8007a30:	019b      	lsls	r3, r3, #6
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	621a      	str	r2, [r3, #32]
}
 8007a52:	bf00      	nop
 8007a54:	371c      	adds	r7, #28
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bc80      	pop	{r7}
 8007a5a:	4770      	bx	lr
 8007a5c:	40010000 	.word	0x40010000
 8007a60:	40010400 	.word	0x40010400

08007a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b087      	sub	sp, #28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	f023 0201 	bic.w	r2, r3, #1
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	011b      	lsls	r3, r3, #4
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f023 030a 	bic.w	r3, r3, #10
 8007aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	621a      	str	r2, [r3, #32]
}
 8007ab6:	bf00      	nop
 8007ab8:	371c      	adds	r7, #28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bc80      	pop	{r7}
 8007abe:	4770      	bx	lr

08007ac0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6a1b      	ldr	r3, [r3, #32]
 8007ad0:	f023 0210 	bic.w	r2, r3, #16
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007aea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	031b      	lsls	r3, r3, #12
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007afc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	011b      	lsls	r3, r3, #4
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	621a      	str	r2, [r3, #32]
}
 8007b14:	bf00      	nop
 8007b16:	371c      	adds	r7, #28
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bc80      	pop	{r7}
 8007b1c:	4770      	bx	lr

08007b1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b085      	sub	sp, #20
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	f043 0307 	orr.w	r3, r3, #7
 8007b40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	609a      	str	r2, [r3, #8]
}
 8007b48:	bf00      	nop
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bc80      	pop	{r7}
 8007b50:	4770      	bx	lr

08007b52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b087      	sub	sp, #28
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	60f8      	str	r0, [r7, #12]
 8007b5a:	60b9      	str	r1, [r7, #8]
 8007b5c:	607a      	str	r2, [r7, #4]
 8007b5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	021a      	lsls	r2, r3, #8
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	431a      	orrs	r2, r3
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	609a      	str	r2, [r3, #8]
}
 8007b86:	bf00      	nop
 8007b88:	371c      	adds	r7, #28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bc80      	pop	{r7}
 8007b8e:	4770      	bx	lr

08007b90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b087      	sub	sp, #28
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	f003 031f 	and.w	r3, r3, #31
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6a1a      	ldr	r2, [r3, #32]
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	43db      	mvns	r3, r3
 8007bb2:	401a      	ands	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6a1a      	ldr	r2, [r3, #32]
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f003 031f 	and.w	r3, r3, #31
 8007bc2:	6879      	ldr	r1, [r7, #4]
 8007bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8007bc8:	431a      	orrs	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	621a      	str	r2, [r3, #32]
}
 8007bce:	bf00      	nop
 8007bd0:	371c      	adds	r7, #28
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bc80      	pop	{r7}
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d101      	bne.n	8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bec:	2302      	movs	r3, #2
 8007bee:	e05a      	b.n	8007ca6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a20      	ldr	r2, [pc, #128]	; (8007cb0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d022      	beq.n	8007c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c3c:	d01d      	beq.n	8007c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a1c      	ldr	r2, [pc, #112]	; (8007cb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d018      	beq.n	8007c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a1a      	ldr	r2, [pc, #104]	; (8007cb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d013      	beq.n	8007c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a19      	ldr	r2, [pc, #100]	; (8007cbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d00e      	beq.n	8007c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a17      	ldr	r2, [pc, #92]	; (8007cc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d009      	beq.n	8007c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a16      	ldr	r2, [pc, #88]	; (8007cc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d004      	beq.n	8007c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a14      	ldr	r2, [pc, #80]	; (8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d10c      	bne.n	8007c94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bc80      	pop	{r7}
 8007cae:	4770      	bx	lr
 8007cb0:	40010000 	.word	0x40010000
 8007cb4:	40000400 	.word	0x40000400
 8007cb8:	40000800 	.word	0x40000800
 8007cbc:	40000c00 	.word	0x40000c00
 8007cc0:	40010400 	.word	0x40010400
 8007cc4:	40014000 	.word	0x40014000
 8007cc8:	40001800 	.word	0x40001800

08007ccc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d101      	bne.n	8007ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	e03d      	b.n	8007d64 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	695b      	ldr	r3, [r3, #20]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	69db      	ldr	r3, [r3, #28]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bc80      	pop	{r7}
 8007d6c:	4770      	bx	lr

08007d6e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d76:	bf00      	nop
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bc80      	pop	{r7}
 8007d7e:	4770      	bx	lr

08007d80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bc80      	pop	{r7}
 8007d90:	4770      	bx	lr

08007d92 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d92:	b084      	sub	sp, #16
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	f107 001c 	add.w	r0, r7, #28
 8007da0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d122      	bne.n	8007df0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d105      	bne.n	8007de4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f98f 	bl	8008108 <USB_CoreReset>
 8007dea:	4603      	mov	r3, r0
 8007dec:	73fb      	strb	r3, [r7, #15]
 8007dee:	e010      	b.n	8007e12 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f983 	bl	8008108 <USB_CoreReset>
 8007e02:	4603      	mov	r3, r0
 8007e04:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d10b      	bne.n	8007e30 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f043 0206 	orr.w	r2, r3, #6
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f043 0220 	orr.w	r2, r3, #32
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e3c:	b004      	add	sp, #16
 8007e3e:	4770      	bx	lr

08007e40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	f043 0201 	orr.w	r2, r3, #1
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bc80      	pop	{r7}
 8007e5e:	4770      	bx	lr

08007e60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f023 0201 	bic.w	r2, r3, #1
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bc80      	pop	{r7}
 8007e7e:	4770      	bx	lr

08007e80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d115      	bne.n	8007ece <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007eae:	2001      	movs	r0, #1
 8007eb0:	f7fb f9f2 	bl	8003298 <HAL_Delay>
      ms++;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f916 	bl	80080ec <USB_GetMode>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d01e      	beq.n	8007f04 <USB_SetCurrentMode+0x84>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b31      	cmp	r3, #49	; 0x31
 8007eca:	d9f0      	bls.n	8007eae <USB_SetCurrentMode+0x2e>
 8007ecc:	e01a      	b.n	8007f04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ece:	78fb      	ldrb	r3, [r7, #3]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d115      	bne.n	8007f00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ee0:	2001      	movs	r0, #1
 8007ee2:	f7fb f9d9 	bl	8003298 <HAL_Delay>
      ms++;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f8fd 	bl	80080ec <USB_GetMode>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d005      	beq.n	8007f04 <USB_SetCurrentMode+0x84>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2b31      	cmp	r3, #49	; 0x31
 8007efc:	d9f0      	bls.n	8007ee0 <USB_SetCurrentMode+0x60>
 8007efe:	e001      	b.n	8007f04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e005      	b.n	8007f10 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2b32      	cmp	r3, #50	; 0x32
 8007f08:	d101      	bne.n	8007f0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e000      	b.n	8007f10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	019b      	lsls	r3, r3, #6
 8007f2a:	f043 0220 	orr.w	r2, r3, #32
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	3301      	adds	r3, #1
 8007f36:	60fb      	str	r3, [r7, #12]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4a08      	ldr	r2, [pc, #32]	; (8007f5c <USB_FlushTxFifo+0x44>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d901      	bls.n	8007f44 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e006      	b.n	8007f52 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	f003 0320 	and.w	r3, r3, #32
 8007f4c:	2b20      	cmp	r3, #32
 8007f4e:	d0f0      	beq.n	8007f32 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3714      	adds	r7, #20
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bc80      	pop	{r7}
 8007f5a:	4770      	bx	lr
 8007f5c:	00030d40 	.word	0x00030d40

08007f60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2210      	movs	r2, #16
 8007f70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3301      	adds	r3, #1
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	4a08      	ldr	r2, [pc, #32]	; (8007f9c <USB_FlushRxFifo+0x3c>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d901      	bls.n	8007f84 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	e006      	b.n	8007f92 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	f003 0310 	and.w	r3, r3, #16
 8007f8c:	2b10      	cmp	r3, #16
 8007f8e:	d0f0      	beq.n	8007f72 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3714      	adds	r7, #20
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bc80      	pop	{r7}
 8007f9a:	4770      	bx	lr
 8007f9c:	00030d40 	.word	0x00030d40

08007fa0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b089      	sub	sp, #36	; 0x24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	4611      	mov	r1, r2
 8007fac:	461a      	mov	r2, r3
 8007fae:	460b      	mov	r3, r1
 8007fb0:	71fb      	strb	r3, [r7, #7]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007fbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d123      	bne.n	800800e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007fc6:	88bb      	ldrh	r3, [r7, #4]
 8007fc8:	3303      	adds	r3, #3
 8007fca:	089b      	lsrs	r3, r3, #2
 8007fcc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007fce:	2300      	movs	r3, #0
 8007fd0:	61bb      	str	r3, [r7, #24]
 8007fd2:	e018      	b.n	8008006 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007fd4:	79fb      	ldrb	r3, [r7, #7]
 8007fd6:	031a      	lsls	r2, r3, #12
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	3301      	adds	r3, #1
 8007fec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	3301      	adds	r3, #1
 8008004:	61bb      	str	r3, [r7, #24]
 8008006:	69ba      	ldr	r2, [r7, #24]
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	429a      	cmp	r2, r3
 800800c:	d3e2      	bcc.n	8007fd4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3724      	adds	r7, #36	; 0x24
 8008014:	46bd      	mov	sp, r7
 8008016:	bc80      	pop	{r7}
 8008018:	4770      	bx	lr

0800801a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800801a:	b480      	push	{r7}
 800801c:	b08b      	sub	sp, #44	; 0x2c
 800801e:	af00      	add	r7, sp, #0
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	60b9      	str	r1, [r7, #8]
 8008024:	4613      	mov	r3, r2
 8008026:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008030:	88fb      	ldrh	r3, [r7, #6]
 8008032:	089b      	lsrs	r3, r3, #2
 8008034:	b29b      	uxth	r3, r3
 8008036:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008038:	88fb      	ldrh	r3, [r7, #6]
 800803a:	f003 0303 	and.w	r3, r3, #3
 800803e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008040:	2300      	movs	r3, #0
 8008042:	623b      	str	r3, [r7, #32]
 8008044:	e014      	b.n	8008070 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008050:	601a      	str	r2, [r3, #0]
    pDest++;
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	3301      	adds	r3, #1
 8008056:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805a:	3301      	adds	r3, #1
 800805c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008060:	3301      	adds	r3, #1
 8008062:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	3301      	adds	r3, #1
 8008068:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	3301      	adds	r3, #1
 800806e:	623b      	str	r3, [r7, #32]
 8008070:	6a3a      	ldr	r2, [r7, #32]
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	429a      	cmp	r2, r3
 8008076:	d3e6      	bcc.n	8008046 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008078:	8bfb      	ldrh	r3, [r7, #30]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d01e      	beq.n	80080bc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800807e:	2300      	movs	r3, #0
 8008080:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008088:	461a      	mov	r2, r3
 800808a:	f107 0310 	add.w	r3, r7, #16
 800808e:	6812      	ldr	r2, [r2, #0]
 8008090:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	b2db      	uxtb	r3, r3
 8008098:	00db      	lsls	r3, r3, #3
 800809a:	fa22 f303 	lsr.w	r3, r2, r3
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	701a      	strb	r2, [r3, #0]
      i++;
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	3301      	adds	r3, #1
 80080a8:	623b      	str	r3, [r7, #32]
      pDest++;
 80080aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ac:	3301      	adds	r3, #1
 80080ae:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80080b0:	8bfb      	ldrh	r3, [r7, #30]
 80080b2:	3b01      	subs	r3, #1
 80080b4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80080b6:	8bfb      	ldrh	r3, [r7, #30]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1ea      	bne.n	8008092 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080be:	4618      	mov	r0, r3
 80080c0:	372c      	adds	r7, #44	; 0x2c
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bc80      	pop	{r7}
 80080c6:	4770      	bx	lr

080080c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	695b      	ldr	r3, [r3, #20]
 80080d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	4013      	ands	r3, r2
 80080de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80080e0:	68fb      	ldr	r3, [r7, #12]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bc80      	pop	{r7}
 80080ea:	4770      	bx	lr

080080ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	f003 0301 	and.w	r3, r3, #1
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	bc80      	pop	{r7}
 8008104:	4770      	bx	lr
	...

08008108 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	3301      	adds	r3, #1
 8008118:	60fb      	str	r3, [r7, #12]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	4a12      	ldr	r2, [pc, #72]	; (8008168 <USB_CoreReset+0x60>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d901      	bls.n	8008126 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e01b      	b.n	800815e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	2b00      	cmp	r3, #0
 800812c:	daf2      	bge.n	8008114 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800812e:	2300      	movs	r3, #0
 8008130:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	f043 0201 	orr.w	r2, r3, #1
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3301      	adds	r3, #1
 8008142:	60fb      	str	r3, [r7, #12]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	4a08      	ldr	r2, [pc, #32]	; (8008168 <USB_CoreReset+0x60>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d901      	bls.n	8008150 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e006      	b.n	800815e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	f003 0301 	and.w	r3, r3, #1
 8008158:	2b01      	cmp	r3, #1
 800815a:	d0f0      	beq.n	800813e <USB_CoreReset+0x36>

  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3714      	adds	r7, #20
 8008162:	46bd      	mov	sp, r7
 8008164:	bc80      	pop	{r7}
 8008166:	4770      	bx	lr
 8008168:	00030d40 	.word	0x00030d40

0800816c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800816c:	b084      	sub	sp, #16
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	f107 001c 	add.w	r0, r7, #28
 800817a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008188:	461a      	mov	r2, r3
 800818a:	2300      	movs	r3, #0
 800818c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008192:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081aa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d018      	beq.n	80081f0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d10a      	bne.n	80081da <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081d2:	f043 0304 	orr.w	r3, r3, #4
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	e014      	b.n	8008204 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081e8:	f023 0304 	bic.w	r3, r3, #4
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	e009      	b.n	8008204 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081fe:	f023 0304 	bic.w	r3, r3, #4
 8008202:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008204:	2110      	movs	r1, #16
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7ff fe86 	bl	8007f18 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f7ff fea7 	bl	8007f60 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008212:	2300      	movs	r3, #0
 8008214:	60fb      	str	r3, [r7, #12]
 8008216:	e015      	b.n	8008244 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	015a      	lsls	r2, r3, #5
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	4413      	add	r3, r2
 8008220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008224:	461a      	mov	r2, r3
 8008226:	f04f 33ff 	mov.w	r3, #4294967295
 800822a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	015a      	lsls	r2, r3, #5
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	4413      	add	r3, r2
 8008234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008238:	461a      	mov	r2, r3
 800823a:	2300      	movs	r3, #0
 800823c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3301      	adds	r3, #1
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	6a3b      	ldr	r3, [r7, #32]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	429a      	cmp	r2, r3
 800824a:	d3e5      	bcc.n	8008218 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f04f 32ff 	mov.w	r2, #4294967295
 8008258:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800825e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00b      	beq.n	800827e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800826c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a13      	ldr	r2, [pc, #76]	; (80082c0 <USB_HostInit+0x154>)
 8008272:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a13      	ldr	r2, [pc, #76]	; (80082c4 <USB_HostInit+0x158>)
 8008278:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800827c:	e009      	b.n	8008292 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2280      	movs	r2, #128	; 0x80
 8008282:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a10      	ldr	r2, [pc, #64]	; (80082c8 <USB_HostInit+0x15c>)
 8008288:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a0f      	ldr	r2, [pc, #60]	; (80082cc <USB_HostInit+0x160>)
 800828e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008294:	2b00      	cmp	r3, #0
 8008296:	d105      	bne.n	80082a4 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	f043 0210 	orr.w	r2, r3, #16
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	699a      	ldr	r2, [r3, #24]
 80082a8:	4b09      	ldr	r3, [pc, #36]	; (80082d0 <USB_HostInit+0x164>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082bc:	b004      	add	sp, #16
 80082be:	4770      	bx	lr
 80082c0:	01000200 	.word	0x01000200
 80082c4:	00e00300 	.word	0x00e00300
 80082c8:	00600080 	.word	0x00600080
 80082cc:	004000e0 	.word	0x004000e0
 80082d0:	a3200008 	.word	0xa3200008

080082d4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	460b      	mov	r3, r1
 80082de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80082f2:	f023 0303 	bic.w	r3, r3, #3
 80082f6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	f003 0303 	and.w	r3, r3, #3
 8008306:	68f9      	ldr	r1, [r7, #12]
 8008308:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800830c:	4313      	orrs	r3, r2
 800830e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008310:	78fb      	ldrb	r3, [r7, #3]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d107      	bne.n	8008326 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800831c:	461a      	mov	r2, r3
 800831e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008322:	6053      	str	r3, [r2, #4]
 8008324:	e009      	b.n	800833a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008326:	78fb      	ldrb	r3, [r7, #3]
 8008328:	2b02      	cmp	r3, #2
 800832a:	d106      	bne.n	800833a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008332:	461a      	mov	r2, r3
 8008334:	f241 7370 	movw	r3, #6000	; 0x1770
 8008338:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	bc80      	pop	{r7}
 8008344:	4770      	bx	lr

08008346 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b084      	sub	sp, #16
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008352:	2300      	movs	r3, #0
 8008354:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008366:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008374:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008376:	2064      	movs	r0, #100	; 0x64
 8008378:	f7fa ff8e 	bl	8003298 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008388:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800838a:	200a      	movs	r0, #10
 800838c:	f7fa ff84 	bl	8003298 <HAL_Delay>

  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800839a:	b480      	push	{r7}
 800839c:	b085      	sub	sp, #20
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
 80083a2:	460b      	mov	r3, r1
 80083a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80083aa:	2300      	movs	r3, #0
 80083ac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80083be:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d109      	bne.n	80083de <USB_DriveVbus+0x44>
 80083ca:	78fb      	ldrb	r3, [r7, #3]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d106      	bne.n	80083de <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80083d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80083dc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083e8:	d109      	bne.n	80083fe <USB_DriveVbus+0x64>
 80083ea:	78fb      	ldrb	r3, [r7, #3]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d106      	bne.n	80083fe <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80083f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083fc:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	bc80      	pop	{r7}
 8008408:	4770      	bx	lr

0800840a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800840a:	b480      	push	{r7}
 800840c:	b085      	sub	sp, #20
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	0c5b      	lsrs	r3, r3, #17
 8008428:	f003 0303 	and.w	r3, r3, #3
}
 800842c:	4618      	mov	r0, r3
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	bc80      	pop	{r7}
 8008434:	4770      	bx	lr

08008436 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008436:	b480      	push	{r7}
 8008438:	b085      	sub	sp, #20
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	b29b      	uxth	r3, r3
}
 800844c:	4618      	mov	r0, r3
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	bc80      	pop	{r7}
 8008454:	4770      	bx	lr
	...

08008458 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b088      	sub	sp, #32
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	4608      	mov	r0, r1
 8008462:	4611      	mov	r1, r2
 8008464:	461a      	mov	r2, r3
 8008466:	4603      	mov	r3, r0
 8008468:	70fb      	strb	r3, [r7, #3]
 800846a:	460b      	mov	r3, r1
 800846c:	70bb      	strb	r3, [r7, #2]
 800846e:	4613      	mov	r3, r2
 8008470:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008472:	2300      	movs	r3, #0
 8008474:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800847a:	78fb      	ldrb	r3, [r7, #3]
 800847c:	015a      	lsls	r2, r3, #5
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	4413      	add	r3, r2
 8008482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008486:	461a      	mov	r2, r3
 8008488:	f04f 33ff 	mov.w	r3, #4294967295
 800848c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800848e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008492:	2b03      	cmp	r3, #3
 8008494:	d87e      	bhi.n	8008594 <USB_HC_Init+0x13c>
 8008496:	a201      	add	r2, pc, #4	; (adr r2, 800849c <USB_HC_Init+0x44>)
 8008498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849c:	080084ad 	.word	0x080084ad
 80084a0:	08008557 	.word	0x08008557
 80084a4:	080084ad 	.word	0x080084ad
 80084a8:	08008519 	.word	0x08008519
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80084ac:	78fb      	ldrb	r3, [r7, #3]
 80084ae:	015a      	lsls	r2, r3, #5
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	4413      	add	r3, r2
 80084b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084b8:	461a      	mov	r2, r3
 80084ba:	f240 439d 	movw	r3, #1181	; 0x49d
 80084be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80084c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	da10      	bge.n	80084ea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80084c8:	78fb      	ldrb	r3, [r7, #3]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	78fa      	ldrb	r2, [r7, #3]
 80084d8:	0151      	lsls	r1, r2, #5
 80084da:	693a      	ldr	r2, [r7, #16]
 80084dc:	440a      	add	r2, r1
 80084de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084e6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80084e8:	e057      	b.n	800859a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d051      	beq.n	800859a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80084f6:	78fb      	ldrb	r3, [r7, #3]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	78fa      	ldrb	r2, [r7, #3]
 8008506:	0151      	lsls	r1, r2, #5
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	440a      	add	r2, r1
 800850c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008510:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008514:	60d3      	str	r3, [r2, #12]
      break;
 8008516:	e040      	b.n	800859a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008518:	78fb      	ldrb	r3, [r7, #3]
 800851a:	015a      	lsls	r2, r3, #5
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	4413      	add	r3, r2
 8008520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008524:	461a      	mov	r2, r3
 8008526:	f240 639d 	movw	r3, #1693	; 0x69d
 800852a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800852c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008530:	2b00      	cmp	r3, #0
 8008532:	da34      	bge.n	800859e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008534:	78fb      	ldrb	r3, [r7, #3]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	4413      	add	r3, r2
 800853c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	78fa      	ldrb	r2, [r7, #3]
 8008544:	0151      	lsls	r1, r2, #5
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	440a      	add	r2, r1
 800854a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800854e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008552:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008554:	e023      	b.n	800859e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008556:	78fb      	ldrb	r3, [r7, #3]
 8008558:	015a      	lsls	r2, r3, #5
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	4413      	add	r3, r2
 800855e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008562:	461a      	mov	r2, r3
 8008564:	f240 2325 	movw	r3, #549	; 0x225
 8008568:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800856a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800856e:	2b00      	cmp	r3, #0
 8008570:	da17      	bge.n	80085a2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008572:	78fb      	ldrb	r3, [r7, #3]
 8008574:	015a      	lsls	r2, r3, #5
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	4413      	add	r3, r2
 800857a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	78fa      	ldrb	r2, [r7, #3]
 8008582:	0151      	lsls	r1, r2, #5
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	440a      	add	r2, r1
 8008588:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800858c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008590:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008592:	e006      	b.n	80085a2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	77fb      	strb	r3, [r7, #31]
      break;
 8008598:	e004      	b.n	80085a4 <USB_HC_Init+0x14c>
      break;
 800859a:	bf00      	nop
 800859c:	e002      	b.n	80085a4 <USB_HC_Init+0x14c>
      break;
 800859e:	bf00      	nop
 80085a0:	e000      	b.n	80085a4 <USB_HC_Init+0x14c>
      break;
 80085a2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085aa:	699a      	ldr	r2, [r3, #24]
 80085ac:	78fb      	ldrb	r3, [r7, #3]
 80085ae:	f003 030f 	and.w	r3, r3, #15
 80085b2:	2101      	movs	r1, #1
 80085b4:	fa01 f303 	lsl.w	r3, r1, r3
 80085b8:	6939      	ldr	r1, [r7, #16]
 80085ba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80085be:	4313      	orrs	r3, r2
 80085c0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80085ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	da03      	bge.n	80085de <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80085d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085da:	61bb      	str	r3, [r7, #24]
 80085dc:	e001      	b.n	80085e2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80085de:	2300      	movs	r3, #0
 80085e0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7ff ff11 	bl	800840a <USB_GetHostSpeed>
 80085e8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80085ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d106      	bne.n	8008600 <USB_HC_Init+0x1a8>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d003      	beq.n	8008600 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80085f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80085fc:	617b      	str	r3, [r7, #20]
 80085fe:	e001      	b.n	8008604 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008600:	2300      	movs	r3, #0
 8008602:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008604:	787b      	ldrb	r3, [r7, #1]
 8008606:	059b      	lsls	r3, r3, #22
 8008608:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800860c:	78bb      	ldrb	r3, [r7, #2]
 800860e:	02db      	lsls	r3, r3, #11
 8008610:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008614:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008616:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800861a:	049b      	lsls	r3, r3, #18
 800861c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008620:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008622:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008624:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008628:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800862e:	78fb      	ldrb	r3, [r7, #3]
 8008630:	0159      	lsls	r1, r3, #5
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	440b      	add	r3, r1
 8008636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800863a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008640:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008642:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008646:	2b03      	cmp	r3, #3
 8008648:	d10f      	bne.n	800866a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	4413      	add	r3, r2
 8008652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	78fa      	ldrb	r2, [r7, #3]
 800865a:	0151      	lsls	r1, r2, #5
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	440a      	add	r2, r1
 8008660:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008664:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008668:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800866a:	7ffb      	ldrb	r3, [r7, #31]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3720      	adds	r7, #32
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b08c      	sub	sp, #48	; 0x30
 8008678:	af02      	add	r7, sp, #8
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	4613      	mov	r3, r2
 8008680:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	785b      	ldrb	r3, [r3, #1]
 800868a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800868c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008690:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800869a:	2b00      	cmp	r3, #0
 800869c:	d02d      	beq.n	80086fa <USB_HC_StartXfer+0x86>
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	791b      	ldrb	r3, [r3, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d129      	bne.n	80086fa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80086a6:	79fb      	ldrb	r3, [r7, #7]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d117      	bne.n	80086dc <USB_HC_StartXfer+0x68>
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	79db      	ldrb	r3, [r3, #7]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d003      	beq.n	80086bc <USB_HC_StartXfer+0x48>
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	79db      	ldrb	r3, [r3, #7]
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	d10f      	bne.n	80086dc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	015a      	lsls	r2, r3, #5
 80086c0:	6a3b      	ldr	r3, [r7, #32]
 80086c2:	4413      	add	r3, r2
 80086c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	69fa      	ldr	r2, [r7, #28]
 80086cc:	0151      	lsls	r1, r2, #5
 80086ce:	6a3a      	ldr	r2, [r7, #32]
 80086d0:	440a      	add	r2, r1
 80086d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086da:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80086dc:	79fb      	ldrb	r3, [r7, #7]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10b      	bne.n	80086fa <USB_HC_StartXfer+0x86>
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	795b      	ldrb	r3, [r3, #5]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d107      	bne.n	80086fa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	785b      	ldrb	r3, [r3, #1]
 80086ee:	4619      	mov	r1, r3
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f000 fa2d 	bl	8008b50 <USB_DoPing>
      return HAL_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	e0f8      	b.n	80088ec <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	695b      	ldr	r3, [r3, #20]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d018      	beq.n	8008734 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	8912      	ldrh	r2, [r2, #8]
 800870a:	4413      	add	r3, r2
 800870c:	3b01      	subs	r3, #1
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	8912      	ldrh	r2, [r2, #8]
 8008712:	fbb3 f3f2 	udiv	r3, r3, r2
 8008716:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008718:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800871a:	8b7b      	ldrh	r3, [r7, #26]
 800871c:	429a      	cmp	r2, r3
 800871e:	d90b      	bls.n	8008738 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008720:	8b7b      	ldrh	r3, [r7, #26]
 8008722:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008724:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	8912      	ldrh	r2, [r2, #8]
 800872a:	fb02 f203 	mul.w	r2, r2, r3
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	611a      	str	r2, [r3, #16]
 8008732:	e001      	b.n	8008738 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008734:	2301      	movs	r3, #1
 8008736:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	78db      	ldrb	r3, [r3, #3]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d007      	beq.n	8008750 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008740:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	8912      	ldrh	r2, [r2, #8]
 8008746:	fb02 f203 	mul.w	r2, r2, r3
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	611a      	str	r2, [r3, #16]
 800874e:	e003      	b.n	8008758 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	695a      	ldr	r2, [r3, #20]
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008760:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008762:	04d9      	lsls	r1, r3, #19
 8008764:	4b63      	ldr	r3, [pc, #396]	; (80088f4 <USB_HC_StartXfer+0x280>)
 8008766:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008768:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	7a9b      	ldrb	r3, [r3, #10]
 800876e:	075b      	lsls	r3, r3, #29
 8008770:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008774:	69f9      	ldr	r1, [r7, #28]
 8008776:	0148      	lsls	r0, r1, #5
 8008778:	6a39      	ldr	r1, [r7, #32]
 800877a:	4401      	add	r1, r0
 800877c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008780:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008782:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008784:	79fb      	ldrb	r3, [r7, #7]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d009      	beq.n	800879e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	68d9      	ldr	r1, [r3, #12]
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	4413      	add	r3, r2
 8008796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800879a:	460a      	mov	r2, r1
 800879c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	bf0c      	ite	eq
 80087ae:	2301      	moveq	r3, #1
 80087b0:	2300      	movne	r3, #0
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	015a      	lsls	r2, r3, #5
 80087ba:	6a3b      	ldr	r3, [r7, #32]
 80087bc:	4413      	add	r3, r2
 80087be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	69fa      	ldr	r2, [r7, #28]
 80087c6:	0151      	lsls	r1, r2, #5
 80087c8:	6a3a      	ldr	r2, [r7, #32]
 80087ca:	440a      	add	r2, r1
 80087cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80087d4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	015a      	lsls	r2, r3, #5
 80087da:	6a3b      	ldr	r3, [r7, #32]
 80087dc:	4413      	add	r3, r2
 80087de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	7e7b      	ldrb	r3, [r7, #25]
 80087e6:	075b      	lsls	r3, r3, #29
 80087e8:	69f9      	ldr	r1, [r7, #28]
 80087ea:	0148      	lsls	r0, r1, #5
 80087ec:	6a39      	ldr	r1, [r7, #32]
 80087ee:	4401      	add	r1, r0
 80087f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80087f4:	4313      	orrs	r3, r2
 80087f6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800880e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	78db      	ldrb	r3, [r3, #3]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d004      	beq.n	8008822 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800881e:	613b      	str	r3, [r7, #16]
 8008820:	e003      	b.n	800882a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008828:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008830:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	015a      	lsls	r2, r3, #5
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	4413      	add	r3, r2
 800883a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800883e:	461a      	mov	r2, r3
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008844:	79fb      	ldrb	r3, [r7, #7]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	e04e      	b.n	80088ec <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	78db      	ldrb	r3, [r3, #3]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d149      	bne.n	80088ea <USB_HC_StartXfer+0x276>
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d045      	beq.n	80088ea <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	79db      	ldrb	r3, [r3, #7]
 8008862:	2b03      	cmp	r3, #3
 8008864:	d830      	bhi.n	80088c8 <USB_HC_StartXfer+0x254>
 8008866:	a201      	add	r2, pc, #4	; (adr r2, 800886c <USB_HC_StartXfer+0x1f8>)
 8008868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886c:	0800887d 	.word	0x0800887d
 8008870:	080088a1 	.word	0x080088a1
 8008874:	0800887d 	.word	0x0800887d
 8008878:	080088a1 	.word	0x080088a1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	3303      	adds	r3, #3
 8008882:	089b      	lsrs	r3, r3, #2
 8008884:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008886:	8afa      	ldrh	r2, [r7, #22]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888c:	b29b      	uxth	r3, r3
 800888e:	429a      	cmp	r2, r3
 8008890:	d91c      	bls.n	80088cc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	f043 0220 	orr.w	r2, r3, #32
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	619a      	str	r2, [r3, #24]
        }
        break;
 800889e:	e015      	b.n	80088cc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	3303      	adds	r3, #3
 80088a6:	089b      	lsrs	r3, r3, #2
 80088a8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80088aa:	8afa      	ldrh	r2, [r7, #22]
 80088ac:	6a3b      	ldr	r3, [r7, #32]
 80088ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d90a      	bls.n	80088d0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80088c6:	e003      	b.n	80088d0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80088c8:	bf00      	nop
 80088ca:	e002      	b.n	80088d2 <USB_HC_StartXfer+0x25e>
        break;
 80088cc:	bf00      	nop
 80088ce:	e000      	b.n	80088d2 <USB_HC_StartXfer+0x25e>
        break;
 80088d0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	68d9      	ldr	r1, [r3, #12]
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	785a      	ldrb	r2, [r3, #1]
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	695b      	ldr	r3, [r3, #20]
 80088de:	b29b      	uxth	r3, r3
 80088e0:	2000      	movs	r0, #0
 80088e2:	9000      	str	r0, [sp, #0]
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f7ff fb5b 	bl	8007fa0 <USB_WritePacket>
  }

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3728      	adds	r7, #40	; 0x28
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	1ff80000 	.word	0x1ff80000

080088f8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800890a:	695b      	ldr	r3, [r3, #20]
 800890c:	b29b      	uxth	r3, r3
}
 800890e:	4618      	mov	r0, r3
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	bc80      	pop	{r7}
 8008916:	4770      	bx	lr

08008918 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008918:	b480      	push	{r7}
 800891a:	b089      	sub	sp, #36	; 0x24
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	460b      	mov	r3, r1
 8008922:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008928:	78fb      	ldrb	r3, [r7, #3]
 800892a:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800892c:	2300      	movs	r3, #0
 800892e:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	015a      	lsls	r2, r3, #5
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	4413      	add	r3, r2
 8008938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	0c9b      	lsrs	r3, r3, #18
 8008940:	f003 0303 	and.w	r3, r3, #3
 8008944:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	015a      	lsls	r2, r3, #5
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	4413      	add	r3, r2
 800894e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	0fdb      	lsrs	r3, r3, #31
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	f003 0320 	and.w	r3, r3, #32
 8008964:	2b20      	cmp	r3, #32
 8008966:	d104      	bne.n	8008972 <USB_HC_Halt+0x5a>
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d101      	bne.n	8008972 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	e0e8      	b.n	8008b44 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d002      	beq.n	800897e <USB_HC_Halt+0x66>
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	2b02      	cmp	r3, #2
 800897c:	d173      	bne.n	8008a66 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	015a      	lsls	r2, r3, #5
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	4413      	add	r3, r2
 8008986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	0151      	lsls	r1, r2, #5
 8008990:	69ba      	ldr	r2, [r7, #24]
 8008992:	440a      	add	r2, r1
 8008994:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008998:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800899c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f003 0320 	and.w	r3, r3, #32
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f040 80cb 	bne.w	8008b42 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d143      	bne.n	8008a40 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	0151      	lsls	r1, r2, #5
 80089ca:	69ba      	ldr	r2, [r7, #24]
 80089cc:	440a      	add	r2, r1
 80089ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089d6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	015a      	lsls	r2, r3, #5
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	4413      	add	r3, r2
 80089e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	0151      	lsls	r1, r2, #5
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	440a      	add	r2, r1
 80089ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089f6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	0151      	lsls	r1, r2, #5
 8008a0a:	69ba      	ldr	r2, [r7, #24]
 8008a0c:	440a      	add	r2, r1
 8008a0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a16:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	61fb      	str	r3, [r7, #28]
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a24:	d81d      	bhi.n	8008a62 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	015a      	lsls	r2, r3, #5
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a3c:	d0ec      	beq.n	8008a18 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a3e:	e080      	b.n	8008b42 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	015a      	lsls	r2, r3, #5
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	4413      	add	r3, r2
 8008a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	697a      	ldr	r2, [r7, #20]
 8008a50:	0151      	lsls	r1, r2, #5
 8008a52:	69ba      	ldr	r2, [r7, #24]
 8008a54:	440a      	add	r2, r1
 8008a56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a5e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a60:	e06f      	b.n	8008b42 <USB_HC_Halt+0x22a>
            break;
 8008a62:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a64:	e06d      	b.n	8008b42 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	015a      	lsls	r2, r3, #5
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	697a      	ldr	r2, [r7, #20]
 8008a76:	0151      	lsls	r1, r2, #5
 8008a78:	69ba      	ldr	r2, [r7, #24]
 8008a7a:	440a      	add	r2, r1
 8008a7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a84:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d143      	bne.n	8008b1e <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	015a      	lsls	r2, r3, #5
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	0151      	lsls	r1, r2, #5
 8008aa8:	69ba      	ldr	r2, [r7, #24]
 8008aaa:	440a      	add	r2, r1
 8008aac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ab0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ab4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	015a      	lsls	r2, r3, #5
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	4413      	add	r3, r2
 8008abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	697a      	ldr	r2, [r7, #20]
 8008ac6:	0151      	lsls	r1, r2, #5
 8008ac8:	69ba      	ldr	r2, [r7, #24]
 8008aca:	440a      	add	r2, r1
 8008acc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ad0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ad4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	015a      	lsls	r2, r3, #5
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	0151      	lsls	r1, r2, #5
 8008ae8:	69ba      	ldr	r2, [r7, #24]
 8008aea:	440a      	add	r2, r1
 8008aec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008af0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008af4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	3301      	adds	r3, #1
 8008afa:	61fb      	str	r3, [r7, #28]
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b02:	d81d      	bhi.n	8008b40 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b1a:	d0ec      	beq.n	8008af6 <USB_HC_Halt+0x1de>
 8008b1c:	e011      	b.n	8008b42 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	015a      	lsls	r2, r3, #5
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	4413      	add	r3, r2
 8008b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	0151      	lsls	r1, r2, #5
 8008b30:	69ba      	ldr	r2, [r7, #24]
 8008b32:	440a      	add	r2, r1
 8008b34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b3c:	6013      	str	r3, [r2, #0]
 8008b3e:	e000      	b.n	8008b42 <USB_HC_Halt+0x22a>
          break;
 8008b40:	bf00      	nop
    }
  }

  return HAL_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3724      	adds	r7, #36	; 0x24
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bc80      	pop	{r7}
 8008b4c:	4770      	bx	lr
	...

08008b50 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b087      	sub	sp, #28
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008b60:	78fb      	ldrb	r3, [r7, #3]
 8008b62:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008b64:	2301      	movs	r3, #1
 8008b66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	04da      	lsls	r2, r3, #19
 8008b6c:	4b14      	ldr	r3, [pc, #80]	; (8008bc0 <USB_DoPing+0x70>)
 8008b6e:	4013      	ands	r3, r2
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	0151      	lsls	r1, r2, #5
 8008b74:	697a      	ldr	r2, [r7, #20]
 8008b76:	440a      	add	r2, r1
 8008b78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b80:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	015a      	lsls	r2, r3, #5
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	4413      	add	r3, r2
 8008b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b98:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ba0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bae:	461a      	mov	r2, r3
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	371c      	adds	r7, #28
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bc80      	pop	{r7}
 8008bbe:	4770      	bx	lr
 8008bc0:	1ff80000 	.word	0x1ff80000

08008bc4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b086      	sub	sp, #24
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f7ff f943 	bl	8007e60 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008bda:	2110      	movs	r1, #16
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff f99b 	bl	8007f18 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7ff f9bc 	bl	8007f60 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008be8:	2300      	movs	r3, #0
 8008bea:	613b      	str	r3, [r7, #16]
 8008bec:	e01f      	b.n	8008c2e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	015a      	lsls	r2, r3, #5
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c04:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c0c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c14:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	015a      	lsls	r2, r3, #5
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c22:	461a      	mov	r2, r3
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	613b      	str	r3, [r7, #16]
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	2b0f      	cmp	r3, #15
 8008c32:	d9dc      	bls.n	8008bee <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008c34:	2300      	movs	r3, #0
 8008c36:	613b      	str	r3, [r7, #16]
 8008c38:	e034      	b.n	8008ca4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	015a      	lsls	r2, r3, #5
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	4413      	add	r3, r2
 8008c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c50:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c58:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c60:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	015a      	lsls	r2, r3, #5
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	4413      	add	r3, r2
 8008c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c6e:	461a      	mov	r2, r3
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	3301      	adds	r3, #1
 8008c78:	617b      	str	r3, [r7, #20]
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c80:	d80c      	bhi.n	8008c9c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	015a      	lsls	r2, r3, #5
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	4413      	add	r3, r2
 8008c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c98:	d0ec      	beq.n	8008c74 <USB_StopHost+0xb0>
 8008c9a:	e000      	b.n	8008c9e <USB_StopHost+0xda>
        break;
 8008c9c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	613b      	str	r3, [r7, #16]
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	2b0f      	cmp	r3, #15
 8008ca8:	d9c7      	bls.n	8008c3a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f04f 32ff 	mov.w	r2, #4294967295
 8008cbe:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3718      	adds	r7, #24
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
	...

08008ccc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008cd0:	4904      	ldr	r1, [pc, #16]	; (8008ce4 <MX_FATFS_Init+0x18>)
 8008cd2:	4805      	ldr	r0, [pc, #20]	; (8008ce8 <MX_FATFS_Init+0x1c>)
 8008cd4:	f005 f812 	bl	800dcfc <FATFS_LinkDriver>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	461a      	mov	r2, r3
 8008cdc:	4b03      	ldr	r3, [pc, #12]	; (8008cec <MX_FATFS_Init+0x20>)
 8008cde:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008ce0:	bf00      	nop
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	2000a814 	.word	0x2000a814
 8008ce8:	08015dcc 	.word	0x08015dcc
 8008cec:	2000ac78 	.word	0x2000ac78

08008cf0 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008cf0:	b590      	push	{r4, r7, lr}
 8008cf2:	b089      	sub	sp, #36	; 0x24
 8008cf4:	af04      	add	r7, sp, #16
 8008cf6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008cfe:	7919      	ldrb	r1, [r3, #4]
 8008d00:	2350      	movs	r3, #80	; 0x50
 8008d02:	2206      	movs	r2, #6
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f001 fd3c 	bl	800a782 <USBH_FindInterface>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
 8008d10:	2bff      	cmp	r3, #255	; 0xff
 8008d12:	d002      	beq.n	8008d1a <USBH_MSC_InterfaceInit+0x2a>
 8008d14:	7bfb      	ldrb	r3, [r7, #15]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d901      	bls.n	8008d1e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	e0ef      	b.n	8008efe <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
 8008d20:	4619      	mov	r1, r3
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f001 fd12 	bl	800a74c <USBH_SelectInterface>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008d2c:	7bbb      	ldrb	r3, [r7, #14]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008d32:	2302      	movs	r3, #2
 8008d34:	e0e3      	b.n	8008efe <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8008d3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008d40:	f008 fbf0 	bl	8011524 <malloc>
 8008d44:	4603      	mov	r3, r0
 8008d46:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008d4e:	69db      	ldr	r3, [r3, #28]
 8008d50:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d101      	bne.n	8008d5c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008d58:	2302      	movs	r3, #2
 8008d5a:	e0d0      	b.n	8008efe <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008d5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d60:	2100      	movs	r1, #0
 8008d62:	68b8      	ldr	r0, [r7, #8]
 8008d64:	f008 fbfc 	bl	8011560 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	211a      	movs	r1, #26
 8008d6e:	fb01 f303 	mul.w	r3, r1, r3
 8008d72:	4413      	add	r3, r2
 8008d74:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	b25b      	sxtb	r3, r3
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	da16      	bge.n	8008dae <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	211a      	movs	r1, #26
 8008d86:	fb01 f303 	mul.w	r3, r1, r3
 8008d8a:	4413      	add	r3, r2
 8008d8c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008d90:	781a      	ldrb	r2, [r3, #0]
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	211a      	movs	r1, #26
 8008d9c:	fb01 f303 	mul.w	r3, r1, r3
 8008da0:	4413      	add	r3, r2
 8008da2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008da6:	881a      	ldrh	r2, [r3, #0]
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	815a      	strh	r2, [r3, #10]
 8008dac:	e015      	b.n	8008dda <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008dae:	7bfb      	ldrb	r3, [r7, #15]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	211a      	movs	r1, #26
 8008db4:	fb01 f303 	mul.w	r3, r1, r3
 8008db8:	4413      	add	r3, r2
 8008dba:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008dbe:	781a      	ldrb	r2, [r3, #0]
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008dc4:	7bfb      	ldrb	r3, [r7, #15]
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	211a      	movs	r1, #26
 8008dca:	fb01 f303 	mul.w	r3, r1, r3
 8008dce:	4413      	add	r3, r2
 8008dd0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008dd4:	881a      	ldrh	r2, [r3, #0]
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008dda:	7bfb      	ldrb	r3, [r7, #15]
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	211a      	movs	r1, #26
 8008de0:	fb01 f303 	mul.w	r3, r1, r3
 8008de4:	4413      	add	r3, r2
 8008de6:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	b25b      	sxtb	r3, r3
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	da16      	bge.n	8008e20 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	211a      	movs	r1, #26
 8008df8:	fb01 f303 	mul.w	r3, r1, r3
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008e02:	781a      	ldrb	r2, [r3, #0]
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	211a      	movs	r1, #26
 8008e0e:	fb01 f303 	mul.w	r3, r1, r3
 8008e12:	4413      	add	r3, r2
 8008e14:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008e18:	881a      	ldrh	r2, [r3, #0]
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	815a      	strh	r2, [r3, #10]
 8008e1e:	e015      	b.n	8008e4c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	211a      	movs	r1, #26
 8008e26:	fb01 f303 	mul.w	r3, r1, r3
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008e30:	781a      	ldrb	r2, [r3, #0]
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008e36:	7bfb      	ldrb	r3, [r7, #15]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	211a      	movs	r1, #26
 8008e3c:	fb01 f303 	mul.w	r3, r1, r3
 8008e40:	4413      	add	r3, r2
 8008e42:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008e46:	881a      	ldrh	r2, [r3, #0]
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	2200      	movs	r2, #0
 8008e56:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	799b      	ldrb	r3, [r3, #6]
 8008e62:	4619      	mov	r1, r3
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f002 ff78 	bl	800bd5a <USBH_AllocPipe>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	79db      	ldrb	r3, [r3, #7]
 8008e76:	4619      	mov	r1, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f002 ff6e 	bl	800bd5a <USBH_AllocPipe>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	461a      	mov	r2, r3
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fdec 	bl	8009a64 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	7959      	ldrb	r1, [r3, #5]
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	7998      	ldrb	r0, [r3, #6]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ea0:	68ba      	ldr	r2, [r7, #8]
 8008ea2:	8912      	ldrh	r2, [r2, #8]
 8008ea4:	9202      	str	r2, [sp, #8]
 8008ea6:	2202      	movs	r2, #2
 8008ea8:	9201      	str	r2, [sp, #4]
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	4623      	mov	r3, r4
 8008eae:	4602      	mov	r2, r0
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f002 ff23 	bl	800bcfc <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	7919      	ldrb	r1, [r3, #4]
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	79d8      	ldrb	r0, [r3, #7]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	8952      	ldrh	r2, [r2, #10]
 8008ece:	9202      	str	r2, [sp, #8]
 8008ed0:	2202      	movs	r2, #2
 8008ed2:	9201      	str	r2, [sp, #4]
 8008ed4:	9300      	str	r3, [sp, #0]
 8008ed6:	4623      	mov	r3, r4
 8008ed8:	4602      	mov	r2, r0
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f002 ff0e 	bl	800bcfc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	791b      	ldrb	r3, [r3, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f008 f945 	bl	8011178 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	795b      	ldrb	r3, [r3, #5]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f008 f93e 	bl	8011178 <USBH_LL_SetToggle>

  return USBH_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd90      	pop	{r4, r7, pc}

08008f06 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b084      	sub	sp, #16
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	795b      	ldrb	r3, [r3, #5]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00e      	beq.n	8008f3e <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	795b      	ldrb	r3, [r3, #5]
 8008f24:	4619      	mov	r1, r3
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f002 ff07 	bl	800bd3a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	795b      	ldrb	r3, [r3, #5]
 8008f30:	4619      	mov	r1, r3
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f002 ff31 	bl	800bd9a <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	791b      	ldrb	r3, [r3, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00e      	beq.n	8008f64 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	791b      	ldrb	r3, [r3, #4]
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f002 fef4 	bl	800bd3a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	791b      	ldrb	r3, [r3, #4]
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f002 ff1e 	bl	800bd9a <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008f6a:	69db      	ldr	r3, [r3, #28]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00b      	beq.n	8008f88 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008f76:	69db      	ldr	r3, [r3, #28]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f008 fadb 	bl	8011534 <free>
    phost->pActiveClass->pData = 0U;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008f84:	2200      	movs	r2, #0
 8008f86:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b084      	sub	sp, #16
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	7b9b      	ldrb	r3, [r3, #14]
 8008fac:	2b03      	cmp	r3, #3
 8008fae:	d042      	beq.n	8009036 <USBH_MSC_ClassRequest+0xa4>
 8008fb0:	2b03      	cmp	r3, #3
 8008fb2:	dc4c      	bgt.n	800904e <USBH_MSC_ClassRequest+0xbc>
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d001      	beq.n	8008fbc <USBH_MSC_ClassRequest+0x2a>
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d148      	bne.n	800904e <USBH_MSC_ClassRequest+0xbc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fd31 	bl	8009a28 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
 8008fcc:	2b03      	cmp	r3, #3
 8008fce:	d104      	bne.n	8008fda <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	601a      	str	r2, [r3, #0]
        status = USBH_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d138      	bne.n	8009052 <USBH_MSC_ClassRequest+0xc0>
      {
        MSC_Handle->max_lun = ((MSC_Handle->max_lun & 0xFFU) > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : ((MSC_Handle->max_lun & 0xFFU) + 1U);
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d804      	bhi.n	8008ff4 <USBH_MSC_ClassRequest+0x62>
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	e000      	b.n	8008ff6 <USBH_MSC_ClassRequest+0x64>
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	6013      	str	r3, [r2, #0]
        USBH_UsrLog("Number of supported LUN: %lu", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	73bb      	strb	r3, [r7, #14]
 8008ffe:	e014      	b.n	800902a <USBH_MSC_ClassRequest+0x98>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009000:	7bbb      	ldrb	r3, [r7, #14]
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	2134      	movs	r1, #52	; 0x34
 8009006:	fb01 f303 	mul.w	r3, r1, r3
 800900a:	4413      	add	r3, r2
 800900c:	3392      	adds	r3, #146	; 0x92
 800900e:	2202      	movs	r2, #2
 8009010:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009012:	7bbb      	ldrb	r3, [r7, #14]
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	2134      	movs	r1, #52	; 0x34
 8009018:	fb01 f303 	mul.w	r3, r1, r3
 800901c:	4413      	add	r3, r2
 800901e:	33c1      	adds	r3, #193	; 0xc1
 8009020:	2200      	movs	r2, #0
 8009022:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009024:	7bbb      	ldrb	r3, [r7, #14]
 8009026:	3301      	adds	r3, #1
 8009028:	73bb      	strb	r3, [r7, #14]
 800902a:	7bba      	ldrb	r2, [r7, #14]
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	429a      	cmp	r2, r3
 8009032:	d3e5      	bcc.n	8009000 <USBH_MSC_ClassRequest+0x6e>
        }
      }
      break;
 8009034:	e00d      	b.n	8009052 <USBH_MSC_ClassRequest+0xc0>

    case MSC_REQ_ERROR :
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009036:	2100      	movs	r1, #0
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f002 f950 	bl	800b2de <USBH_ClrFeature>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d108      	bne.n	8009056 <USBH_MSC_ClassRequest+0xc4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	7bda      	ldrb	r2, [r3, #15]
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	739a      	strb	r2, [r3, #14]
      }
      break;
 800904c:	e003      	b.n	8009056 <USBH_MSC_ClassRequest+0xc4>

    default:
      break;
 800904e:	bf00      	nop
 8009050:	e002      	b.n	8009058 <USBH_MSC_ClassRequest+0xc6>
      break;
 8009052:	bf00      	nop
 8009054:	e000      	b.n	8009058 <USBH_MSC_ClassRequest+0xc6>
      break;
 8009056:	bf00      	nop
  }

  return status;
 8009058:	7bfb      	ldrb	r3, [r7, #15]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
	...

08009064 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009072:	69db      	ldr	r3, [r3, #28]
 8009074:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009076:	2301      	movs	r3, #1
 8009078:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800907a:	2301      	movs	r3, #1
 800907c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800907e:	2301      	movs	r3, #1
 8009080:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	7b1b      	ldrb	r3, [r3, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d003      	beq.n	8009092 <USBH_MSC_Process+0x2e>
 800908a:	2b01      	cmp	r3, #1
 800908c:	f000 828d 	beq.w	80095aa <USBH_MSC_Process+0x546>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009090:	e28e      	b.n	80095b0 <USBH_MSC_Process+0x54c>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009098:	461a      	mov	r2, r3
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	429a      	cmp	r2, r3
 80090a0:	f080 8267 	bcs.w	8009572 <USBH_MSC_Process+0x50e>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090aa:	4619      	mov	r1, r3
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	2334      	movs	r3, #52	; 0x34
 80090b0:	fb03 f301 	mul.w	r3, r3, r1
 80090b4:	4413      	add	r3, r2
 80090b6:	3391      	adds	r3, #145	; 0x91
 80090b8:	2201      	movs	r2, #1
 80090ba:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090c2:	4619      	mov	r1, r3
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	2334      	movs	r3, #52	; 0x34
 80090c8:	fb03 f301 	mul.w	r3, r3, r1
 80090cc:	4413      	add	r3, r2
 80090ce:	3390      	adds	r3, #144	; 0x90
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	2b08      	cmp	r3, #8
 80090d4:	f200 8235 	bhi.w	8009542 <USBH_MSC_Process+0x4de>
 80090d8:	a201      	add	r2, pc, #4	; (adr r2, 80090e0 <USBH_MSC_Process+0x7c>)
 80090da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090de:	bf00      	nop
 80090e0:	08009105 	.word	0x08009105
 80090e4:	08009543 	.word	0x08009543
 80090e8:	080091cd 	.word	0x080091cd
 80090ec:	08009351 	.word	0x08009351
 80090f0:	0800912b 	.word	0x0800912b
 80090f4:	0800941d 	.word	0x0800941d
 80090f8:	08009543 	.word	0x08009543
 80090fc:	08009543 	.word	0x08009543
 8009100:	08009531 	.word	0x08009531
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800910a:	4619      	mov	r1, r3
 800910c:	693a      	ldr	r2, [r7, #16]
 800910e:	2334      	movs	r3, #52	; 0x34
 8009110:	fb03 f301 	mul.w	r3, r3, r1
 8009114:	4413      	add	r3, r2
 8009116:	3390      	adds	r3, #144	; 0x90
 8009118:	2204      	movs	r2, #4
 800911a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009128:	e214      	b.n	8009554 <USBH_MSC_Process+0x4f0>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009130:	b2d9      	uxtb	r1, r3
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009138:	461a      	mov	r2, r3
 800913a:	2334      	movs	r3, #52	; 0x34
 800913c:	fb03 f302 	mul.w	r3, r3, r2
 8009140:	3398      	adds	r3, #152	; 0x98
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	4413      	add	r3, r2
 8009146:	3307      	adds	r3, #7
 8009148:	461a      	mov	r2, r3
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f001 f834 	bl	800a1b8 <USBH_MSC_SCSI_Inquiry>
 8009150:	4603      	mov	r3, r0
 8009152:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009154:	7bfb      	ldrb	r3, [r7, #15]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10b      	bne.n	8009172 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009160:	4619      	mov	r1, r3
 8009162:	693a      	ldr	r2, [r7, #16]
 8009164:	2334      	movs	r3, #52	; 0x34
 8009166:	fb03 f301 	mul.w	r3, r3, r1
 800916a:	4413      	add	r3, r2
 800916c:	3390      	adds	r3, #144	; 0x90
 800916e:	2202      	movs	r2, #2
 8009170:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8009172:	7bfb      	ldrb	r3, [r7, #15]
 8009174:	2b02      	cmp	r3, #2
 8009176:	d10c      	bne.n	8009192 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800917e:	4619      	mov	r1, r3
 8009180:	693a      	ldr	r2, [r7, #16]
 8009182:	2334      	movs	r3, #52	; 0x34
 8009184:	fb03 f301 	mul.w	r3, r3, r1
 8009188:	4413      	add	r3, r2
 800918a:	3390      	adds	r3, #144	; 0x90
 800918c:	2205      	movs	r2, #5
 800918e:	701a      	strb	r2, [r3, #0]
            break;
 8009190:	e1d9      	b.n	8009546 <USBH_MSC_Process+0x4e2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009192:	7bfb      	ldrb	r3, [r7, #15]
 8009194:	2b04      	cmp	r3, #4
 8009196:	f040 81d6 	bne.w	8009546 <USBH_MSC_Process+0x4e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091a0:	4619      	mov	r1, r3
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	2334      	movs	r3, #52	; 0x34
 80091a6:	fb03 f301 	mul.w	r3, r3, r1
 80091aa:	4413      	add	r3, r2
 80091ac:	3390      	adds	r3, #144	; 0x90
 80091ae:	2201      	movs	r2, #1
 80091b0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091b8:	4619      	mov	r1, r3
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	2334      	movs	r3, #52	; 0x34
 80091be:	fb03 f301 	mul.w	r3, r3, r1
 80091c2:	4413      	add	r3, r2
 80091c4:	3391      	adds	r3, #145	; 0x91
 80091c6:	2202      	movs	r2, #2
 80091c8:	701a      	strb	r2, [r3, #0]
            break;
 80091ca:	e1bc      	b.n	8009546 <USBH_MSC_Process+0x4e2>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	4619      	mov	r1, r3
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 ff30 	bl	800a03c <USBH_MSC_SCSI_TestUnitReady>
 80091dc:	4603      	mov	r3, r0
 80091de:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80091e0:	7bbb      	ldrb	r3, [r7, #14]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d149      	bne.n	800927a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091ec:	4619      	mov	r1, r3
 80091ee:	693a      	ldr	r2, [r7, #16]
 80091f0:	2334      	movs	r3, #52	; 0x34
 80091f2:	fb03 f301 	mul.w	r3, r3, r1
 80091f6:	4413      	add	r3, r2
 80091f8:	3392      	adds	r3, #146	; 0x92
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00c      	beq.n	800921a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009206:	4619      	mov	r1, r3
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	2334      	movs	r3, #52	; 0x34
 800920c:	fb03 f301 	mul.w	r3, r3, r1
 8009210:	4413      	add	r3, r2
 8009212:	33c1      	adds	r3, #193	; 0xc1
 8009214:	2201      	movs	r2, #1
 8009216:	701a      	strb	r2, [r3, #0]
 8009218:	e00b      	b.n	8009232 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009220:	4619      	mov	r1, r3
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	2334      	movs	r3, #52	; 0x34
 8009226:	fb03 f301 	mul.w	r3, r3, r1
 800922a:	4413      	add	r3, r2
 800922c:	33c1      	adds	r3, #193	; 0xc1
 800922e:	2200      	movs	r2, #0
 8009230:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009238:	4619      	mov	r1, r3
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	2334      	movs	r3, #52	; 0x34
 800923e:	fb03 f301 	mul.w	r3, r3, r1
 8009242:	4413      	add	r3, r2
 8009244:	3390      	adds	r3, #144	; 0x90
 8009246:	2203      	movs	r2, #3
 8009248:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009250:	4619      	mov	r1, r3
 8009252:	693a      	ldr	r2, [r7, #16]
 8009254:	2334      	movs	r3, #52	; 0x34
 8009256:	fb03 f301 	mul.w	r3, r3, r1
 800925a:	4413      	add	r3, r2
 800925c:	3391      	adds	r3, #145	; 0x91
 800925e:	2200      	movs	r2, #0
 8009260:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009268:	4619      	mov	r1, r3
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	2334      	movs	r3, #52	; 0x34
 800926e:	fb03 f301 	mul.w	r3, r3, r1
 8009272:	4413      	add	r3, r2
 8009274:	3392      	adds	r3, #146	; 0x92
 8009276:	2200      	movs	r2, #0
 8009278:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800927a:	7bbb      	ldrb	r3, [r7, #14]
 800927c:	2b02      	cmp	r3, #2
 800927e:	d14a      	bne.n	8009316 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009286:	4619      	mov	r1, r3
 8009288:	693a      	ldr	r2, [r7, #16]
 800928a:	2334      	movs	r3, #52	; 0x34
 800928c:	fb03 f301 	mul.w	r3, r3, r1
 8009290:	4413      	add	r3, r2
 8009292:	3392      	adds	r3, #146	; 0x92
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	2b02      	cmp	r3, #2
 8009298:	d00c      	beq.n	80092b4 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092a0:	4619      	mov	r1, r3
 80092a2:	693a      	ldr	r2, [r7, #16]
 80092a4:	2334      	movs	r3, #52	; 0x34
 80092a6:	fb03 f301 	mul.w	r3, r3, r1
 80092aa:	4413      	add	r3, r2
 80092ac:	33c1      	adds	r3, #193	; 0xc1
 80092ae:	2201      	movs	r2, #1
 80092b0:	701a      	strb	r2, [r3, #0]
 80092b2:	e00b      	b.n	80092cc <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092ba:	4619      	mov	r1, r3
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	2334      	movs	r3, #52	; 0x34
 80092c0:	fb03 f301 	mul.w	r3, r3, r1
 80092c4:	4413      	add	r3, r2
 80092c6:	33c1      	adds	r3, #193	; 0xc1
 80092c8:	2200      	movs	r2, #0
 80092ca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092d2:	4619      	mov	r1, r3
 80092d4:	693a      	ldr	r2, [r7, #16]
 80092d6:	2334      	movs	r3, #52	; 0x34
 80092d8:	fb03 f301 	mul.w	r3, r3, r1
 80092dc:	4413      	add	r3, r2
 80092de:	3390      	adds	r3, #144	; 0x90
 80092e0:	2205      	movs	r2, #5
 80092e2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092ea:	4619      	mov	r1, r3
 80092ec:	693a      	ldr	r2, [r7, #16]
 80092ee:	2334      	movs	r3, #52	; 0x34
 80092f0:	fb03 f301 	mul.w	r3, r3, r1
 80092f4:	4413      	add	r3, r2
 80092f6:	3391      	adds	r3, #145	; 0x91
 80092f8:	2201      	movs	r2, #1
 80092fa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009302:	4619      	mov	r1, r3
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	2334      	movs	r3, #52	; 0x34
 8009308:	fb03 f301 	mul.w	r3, r3, r1
 800930c:	4413      	add	r3, r2
 800930e:	3392      	adds	r3, #146	; 0x92
 8009310:	2202      	movs	r2, #2
 8009312:	701a      	strb	r2, [r3, #0]
            break;
 8009314:	e119      	b.n	800954a <USBH_MSC_Process+0x4e6>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009316:	7bbb      	ldrb	r3, [r7, #14]
 8009318:	2b04      	cmp	r3, #4
 800931a:	f040 8116 	bne.w	800954a <USBH_MSC_Process+0x4e6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009324:	4619      	mov	r1, r3
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	2334      	movs	r3, #52	; 0x34
 800932a:	fb03 f301 	mul.w	r3, r3, r1
 800932e:	4413      	add	r3, r2
 8009330:	3390      	adds	r3, #144	; 0x90
 8009332:	2201      	movs	r2, #1
 8009334:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800933c:	4619      	mov	r1, r3
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	2334      	movs	r3, #52	; 0x34
 8009342:	fb03 f301 	mul.w	r3, r3, r1
 8009346:	4413      	add	r3, r2
 8009348:	3391      	adds	r3, #145	; 0x91
 800934a:	2202      	movs	r2, #2
 800934c:	701a      	strb	r2, [r3, #0]
            break;
 800934e:	e0fc      	b.n	800954a <USBH_MSC_Process+0x4e6>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009356:	b2d9      	uxtb	r1, r3
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800935e:	461a      	mov	r2, r3
 8009360:	2334      	movs	r3, #52	; 0x34
 8009362:	fb03 f302 	mul.w	r3, r3, r2
 8009366:	3390      	adds	r3, #144	; 0x90
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	4413      	add	r3, r2
 800936c:	3304      	adds	r3, #4
 800936e:	461a      	mov	r2, r3
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fea6 	bl	800a0c2 <USBH_MSC_SCSI_ReadCapacity>
 8009376:	4603      	mov	r3, r0
 8009378:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800937a:	7bfb      	ldrb	r3, [r7, #15]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d120      	bne.n	80093c2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009386:	4619      	mov	r1, r3
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	2334      	movs	r3, #52	; 0x34
 800938c:	fb03 f301 	mul.w	r3, r3, r1
 8009390:	4413      	add	r3, r2
 8009392:	3390      	adds	r3, #144	; 0x90
 8009394:	2201      	movs	r2, #1
 8009396:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800939e:	4619      	mov	r1, r3
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	2334      	movs	r3, #52	; 0x34
 80093a4:	fb03 f301 	mul.w	r3, r3, r1
 80093a8:	4413      	add	r3, r2
 80093aa:	3391      	adds	r3, #145	; 0x91
 80093ac:	2200      	movs	r2, #0
 80093ae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093b6:	3301      	adds	r3, #1
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80093c0:	e0c5      	b.n	800954e <USBH_MSC_Process+0x4ea>
            else if (scsi_status == USBH_FAIL)
 80093c2:	7bfb      	ldrb	r3, [r7, #15]
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d10c      	bne.n	80093e2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093ce:	4619      	mov	r1, r3
 80093d0:	693a      	ldr	r2, [r7, #16]
 80093d2:	2334      	movs	r3, #52	; 0x34
 80093d4:	fb03 f301 	mul.w	r3, r3, r1
 80093d8:	4413      	add	r3, r2
 80093da:	3390      	adds	r3, #144	; 0x90
 80093dc:	2205      	movs	r2, #5
 80093de:	701a      	strb	r2, [r3, #0]
            break;
 80093e0:	e0b5      	b.n	800954e <USBH_MSC_Process+0x4ea>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80093e2:	7bfb      	ldrb	r3, [r7, #15]
 80093e4:	2b04      	cmp	r3, #4
 80093e6:	f040 80b2 	bne.w	800954e <USBH_MSC_Process+0x4ea>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093f0:	4619      	mov	r1, r3
 80093f2:	693a      	ldr	r2, [r7, #16]
 80093f4:	2334      	movs	r3, #52	; 0x34
 80093f6:	fb03 f301 	mul.w	r3, r3, r1
 80093fa:	4413      	add	r3, r2
 80093fc:	3390      	adds	r3, #144	; 0x90
 80093fe:	2201      	movs	r2, #1
 8009400:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009408:	4619      	mov	r1, r3
 800940a:	693a      	ldr	r2, [r7, #16]
 800940c:	2334      	movs	r3, #52	; 0x34
 800940e:	fb03 f301 	mul.w	r3, r3, r1
 8009412:	4413      	add	r3, r2
 8009414:	3391      	adds	r3, #145	; 0x91
 8009416:	2202      	movs	r2, #2
 8009418:	701a      	strb	r2, [r3, #0]
            break;
 800941a:	e098      	b.n	800954e <USBH_MSC_Process+0x4ea>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009422:	b2d9      	uxtb	r1, r3
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800942a:	461a      	mov	r2, r3
 800942c:	2334      	movs	r3, #52	; 0x34
 800942e:	fb03 f302 	mul.w	r3, r3, r2
 8009432:	3398      	adds	r3, #152	; 0x98
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	4413      	add	r3, r2
 8009438:	3304      	adds	r3, #4
 800943a:	461a      	mov	r2, r3
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 ff60 	bl	800a302 <USBH_MSC_SCSI_RequestSense>
 8009442:	4603      	mov	r3, r0
 8009444:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009446:	7bfb      	ldrb	r3, [r7, #15]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d145      	bne.n	80094d8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009452:	4619      	mov	r1, r3
 8009454:	693a      	ldr	r2, [r7, #16]
 8009456:	2334      	movs	r3, #52	; 0x34
 8009458:	fb03 f301 	mul.w	r3, r3, r1
 800945c:	4413      	add	r3, r2
 800945e:	339c      	adds	r3, #156	; 0x9c
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	2b06      	cmp	r3, #6
 8009464:	d00c      	beq.n	8009480 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800946c:	4619      	mov	r1, r3
 800946e:	693a      	ldr	r2, [r7, #16]
 8009470:	2334      	movs	r3, #52	; 0x34
 8009472:	fb03 f301 	mul.w	r3, r3, r1
 8009476:	4413      	add	r3, r2
 8009478:	339c      	adds	r3, #156	; 0x9c
 800947a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800947c:	2b02      	cmp	r3, #2
 800947e:	d117      	bne.n	80094b0 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	f242 720f 	movw	r2, #9999	; 0x270f
 8009492:	4293      	cmp	r3, r2
 8009494:	d80c      	bhi.n	80094b0 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800949c:	4619      	mov	r1, r3
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	2334      	movs	r3, #52	; 0x34
 80094a2:	fb03 f301 	mul.w	r3, r3, r1
 80094a6:	4413      	add	r3, r2
 80094a8:	3390      	adds	r3, #144	; 0x90
 80094aa:	2202      	movs	r2, #2
 80094ac:	701a      	strb	r2, [r3, #0]
                  break;
 80094ae:	e051      	b.n	8009554 <USBH_MSC_Process+0x4f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094b6:	4619      	mov	r1, r3
 80094b8:	693a      	ldr	r2, [r7, #16]
 80094ba:	2334      	movs	r3, #52	; 0x34
 80094bc:	fb03 f301 	mul.w	r3, r3, r1
 80094c0:	4413      	add	r3, r2
 80094c2:	3390      	adds	r3, #144	; 0x90
 80094c4:	2201      	movs	r2, #1
 80094c6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094ce:	3301      	adds	r3, #1
 80094d0:	b29a      	uxth	r2, r3
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80094d8:	7bfb      	ldrb	r3, [r7, #15]
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d10c      	bne.n	80094f8 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094e4:	4619      	mov	r1, r3
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	2334      	movs	r3, #52	; 0x34
 80094ea:	fb03 f301 	mul.w	r3, r3, r1
 80094ee:	4413      	add	r3, r2
 80094f0:	3390      	adds	r3, #144	; 0x90
 80094f2:	2208      	movs	r2, #8
 80094f4:	701a      	strb	r2, [r3, #0]
            break;
 80094f6:	e02c      	b.n	8009552 <USBH_MSC_Process+0x4ee>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
 80094fa:	2b04      	cmp	r3, #4
 80094fc:	d129      	bne.n	8009552 <USBH_MSC_Process+0x4ee>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009504:	4619      	mov	r1, r3
 8009506:	693a      	ldr	r2, [r7, #16]
 8009508:	2334      	movs	r3, #52	; 0x34
 800950a:	fb03 f301 	mul.w	r3, r3, r1
 800950e:	4413      	add	r3, r2
 8009510:	3390      	adds	r3, #144	; 0x90
 8009512:	2201      	movs	r2, #1
 8009514:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800951c:	4619      	mov	r1, r3
 800951e:	693a      	ldr	r2, [r7, #16]
 8009520:	2334      	movs	r3, #52	; 0x34
 8009522:	fb03 f301 	mul.w	r3, r3, r1
 8009526:	4413      	add	r3, r2
 8009528:	3391      	adds	r3, #145	; 0x91
 800952a:	2202      	movs	r2, #2
 800952c:	701a      	strb	r2, [r3, #0]
            break;
 800952e:	e010      	b.n	8009552 <USBH_MSC_Process+0x4ee>
            MSC_Handle->current_lun++;
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009536:	3301      	adds	r3, #1
 8009538:	b29a      	uxth	r2, r3
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009540:	e008      	b.n	8009554 <USBH_MSC_Process+0x4f0>
            break;
 8009542:	bf00      	nop
 8009544:	e006      	b.n	8009554 <USBH_MSC_Process+0x4f0>
            break;
 8009546:	bf00      	nop
 8009548:	e004      	b.n	8009554 <USBH_MSC_Process+0x4f0>
            break;
 800954a:	bf00      	nop
 800954c:	e002      	b.n	8009554 <USBH_MSC_Process+0x4f0>
            break;
 800954e:	bf00      	nop
 8009550:	e000      	b.n	8009554 <USBH_MSC_Process+0x4f0>
            break;
 8009552:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2204      	movs	r2, #4
 8009558:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009568:	2200      	movs	r2, #0
 800956a:	4619      	mov	r1, r3
 800956c:	f004 fed0 	bl	800e310 <osMessagePut>
      break;
 8009570:	e01e      	b.n	80095b0 <USBH_MSC_Process+0x54c>
        MSC_Handle->current_lun = 0U;
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	2200      	movs	r2, #0
 8009576:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	2201      	movs	r2, #1
 800957e:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2204      	movs	r2, #4
 8009584:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009594:	2200      	movs	r2, #0
 8009596:	4619      	mov	r1, r3
 8009598:	f004 feba 	bl	800e310 <osMessagePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80095a2:	2102      	movs	r1, #2
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	4798      	blx	r3
      break;
 80095a8:	e002      	b.n	80095b0 <USBH_MSC_Process+0x54c>
      error = USBH_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	75fb      	strb	r3, [r7, #23]
      break;
 80095ae:	bf00      	nop
  }
  return error;
 80095b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3718      	adds	r7, #24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop

080095bc <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bc80      	pop	{r7}
 80095ce:	4770      	bx	lr

080095d0 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b088      	sub	sp, #32
 80095d4:	af02      	add	r7, sp, #8
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	460b      	mov	r3, r1
 80095da:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80095e2:	69db      	ldr	r3, [r3, #28]
 80095e4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80095e6:	2301      	movs	r3, #1
 80095e8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80095ea:	2301      	movs	r3, #1
 80095ec:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80095ee:	78fb      	ldrb	r3, [r7, #3]
 80095f0:	693a      	ldr	r2, [r7, #16]
 80095f2:	2134      	movs	r1, #52	; 0x34
 80095f4:	fb01 f303 	mul.w	r3, r1, r3
 80095f8:	4413      	add	r3, r2
 80095fa:	3390      	adds	r3, #144	; 0x90
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	2b07      	cmp	r3, #7
 8009600:	d04b      	beq.n	800969a <USBH_MSC_RdWrProcess+0xca>
 8009602:	2b07      	cmp	r3, #7
 8009604:	f300 80d2 	bgt.w	80097ac <USBH_MSC_RdWrProcess+0x1dc>
 8009608:	2b05      	cmp	r3, #5
 800960a:	f000 8089 	beq.w	8009720 <USBH_MSC_RdWrProcess+0x150>
 800960e:	2b06      	cmp	r3, #6
 8009610:	f040 80cc 	bne.w	80097ac <USBH_MSC_RdWrProcess+0x1dc>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8009614:	78f9      	ldrb	r1, [r7, #3]
 8009616:	2300      	movs	r3, #0
 8009618:	9300      	str	r3, [sp, #0]
 800961a:	2300      	movs	r3, #0
 800961c:	2200      	movs	r2, #0
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 ff53 	bl	800a4ca <USBH_MSC_SCSI_Read>
 8009624:	4603      	mov	r3, r0
 8009626:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009628:	7bfb      	ldrb	r3, [r7, #15]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d10b      	bne.n	8009646 <USBH_MSC_RdWrProcess+0x76>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800962e:	78fb      	ldrb	r3, [r7, #3]
 8009630:	693a      	ldr	r2, [r7, #16]
 8009632:	2134      	movs	r1, #52	; 0x34
 8009634:	fb01 f303 	mul.w	r3, r1, r3
 8009638:	4413      	add	r3, r2
 800963a:	3390      	adds	r3, #144	; 0x90
 800963c:	2201      	movs	r2, #1
 800963e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	75fb      	strb	r3, [r7, #23]
 8009644:	e01a      	b.n	800967c <USBH_MSC_RdWrProcess+0xac>
      }
      else if (scsi_status == USBH_FAIL)
 8009646:	7bfb      	ldrb	r3, [r7, #15]
 8009648:	2b02      	cmp	r3, #2
 800964a:	d109      	bne.n	8009660 <USBH_MSC_RdWrProcess+0x90>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800964c:	78fb      	ldrb	r3, [r7, #3]
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	2134      	movs	r1, #52	; 0x34
 8009652:	fb01 f303 	mul.w	r3, r1, r3
 8009656:	4413      	add	r3, r2
 8009658:	3390      	adds	r3, #144	; 0x90
 800965a:	2205      	movs	r2, #5
 800965c:	701a      	strb	r2, [r3, #0]
 800965e:	e00d      	b.n	800967c <USBH_MSC_RdWrProcess+0xac>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009660:	7bfb      	ldrb	r3, [r7, #15]
 8009662:	2b04      	cmp	r3, #4
 8009664:	d10a      	bne.n	800967c <USBH_MSC_RdWrProcess+0xac>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009666:	78fb      	ldrb	r3, [r7, #3]
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	2134      	movs	r1, #52	; 0x34
 800966c:	fb01 f303 	mul.w	r3, r1, r3
 8009670:	4413      	add	r3, r2
 8009672:	3390      	adds	r3, #144	; 0x90
 8009674:	2208      	movs	r2, #8
 8009676:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009678:	2302      	movs	r3, #2
 800967a:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2204      	movs	r2, #4
 8009680:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009690:	2200      	movs	r2, #0
 8009692:	4619      	mov	r1, r3
 8009694:	f004 fe3c 	bl	800e310 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009698:	e089      	b.n	80097ae <USBH_MSC_RdWrProcess+0x1de>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800969a:	78f9      	ldrb	r1, [r7, #3]
 800969c:	2300      	movs	r3, #0
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	2300      	movs	r3, #0
 80096a2:	2200      	movs	r2, #0
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 fea5 	bl	800a3f4 <USBH_MSC_SCSI_Write>
 80096aa:	4603      	mov	r3, r0
 80096ac:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10b      	bne.n	80096cc <USBH_MSC_RdWrProcess+0xfc>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80096b4:	78fb      	ldrb	r3, [r7, #3]
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	2134      	movs	r1, #52	; 0x34
 80096ba:	fb01 f303 	mul.w	r3, r1, r3
 80096be:	4413      	add	r3, r2
 80096c0:	3390      	adds	r3, #144	; 0x90
 80096c2:	2201      	movs	r2, #1
 80096c4:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	75fb      	strb	r3, [r7, #23]
 80096ca:	e01a      	b.n	8009702 <USBH_MSC_RdWrProcess+0x132>
      }
      else if (scsi_status == USBH_FAIL)
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d109      	bne.n	80096e6 <USBH_MSC_RdWrProcess+0x116>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80096d2:	78fb      	ldrb	r3, [r7, #3]
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	2134      	movs	r1, #52	; 0x34
 80096d8:	fb01 f303 	mul.w	r3, r1, r3
 80096dc:	4413      	add	r3, r2
 80096de:	3390      	adds	r3, #144	; 0x90
 80096e0:	2205      	movs	r2, #5
 80096e2:	701a      	strb	r2, [r3, #0]
 80096e4:	e00d      	b.n	8009702 <USBH_MSC_RdWrProcess+0x132>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80096e6:	7bfb      	ldrb	r3, [r7, #15]
 80096e8:	2b04      	cmp	r3, #4
 80096ea:	d10a      	bne.n	8009702 <USBH_MSC_RdWrProcess+0x132>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80096ec:	78fb      	ldrb	r3, [r7, #3]
 80096ee:	693a      	ldr	r2, [r7, #16]
 80096f0:	2134      	movs	r1, #52	; 0x34
 80096f2:	fb01 f303 	mul.w	r3, r1, r3
 80096f6:	4413      	add	r3, r2
 80096f8:	3390      	adds	r3, #144	; 0x90
 80096fa:	2208      	movs	r2, #8
 80096fc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80096fe:	2302      	movs	r3, #2
 8009700:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2204      	movs	r2, #4
 8009706:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009716:	2200      	movs	r2, #0
 8009718:	4619      	mov	r1, r3
 800971a:	f004 fdf9 	bl	800e310 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800971e:	e046      	b.n	80097ae <USBH_MSC_RdWrProcess+0x1de>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8009720:	78fb      	ldrb	r3, [r7, #3]
 8009722:	2234      	movs	r2, #52	; 0x34
 8009724:	fb02 f303 	mul.w	r3, r2, r3
 8009728:	3398      	adds	r3, #152	; 0x98
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	4413      	add	r3, r2
 800972e:	1d1a      	adds	r2, r3, #4
 8009730:	78fb      	ldrb	r3, [r7, #3]
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fde4 	bl	800a302 <USBH_MSC_SCSI_RequestSense>
 800973a:	4603      	mov	r3, r0
 800973c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800973e:	7bfb      	ldrb	r3, [r7, #15]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d113      	bne.n	800976c <USBH_MSC_RdWrProcess+0x19c>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009744:	78fb      	ldrb	r3, [r7, #3]
 8009746:	693a      	ldr	r2, [r7, #16]
 8009748:	2134      	movs	r1, #52	; 0x34
 800974a:	fb01 f303 	mul.w	r3, r1, r3
 800974e:	4413      	add	r3, r2
 8009750:	3390      	adds	r3, #144	; 0x90
 8009752:	2201      	movs	r2, #1
 8009754:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009756:	78fb      	ldrb	r3, [r7, #3]
 8009758:	693a      	ldr	r2, [r7, #16]
 800975a:	2134      	movs	r1, #52	; 0x34
 800975c:	fb01 f303 	mul.w	r3, r1, r3
 8009760:	4413      	add	r3, r2
 8009762:	3391      	adds	r3, #145	; 0x91
 8009764:	2202      	movs	r2, #2
 8009766:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009768:	2302      	movs	r3, #2
 800976a:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800976c:	7bfb      	ldrb	r3, [r7, #15]
 800976e:	2b02      	cmp	r3, #2
 8009770:	d00d      	beq.n	800978e <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009772:	7bfb      	ldrb	r3, [r7, #15]
 8009774:	2b04      	cmp	r3, #4
 8009776:	d10a      	bne.n	800978e <USBH_MSC_RdWrProcess+0x1be>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009778:	78fb      	ldrb	r3, [r7, #3]
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	2134      	movs	r1, #52	; 0x34
 800977e:	fb01 f303 	mul.w	r3, r1, r3
 8009782:	4413      	add	r3, r2
 8009784:	3390      	adds	r3, #144	; 0x90
 8009786:	2208      	movs	r2, #8
 8009788:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800978a:	2302      	movs	r3, #2
 800978c:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2204      	movs	r2, #4
 8009792:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80097a2:	2200      	movs	r2, #0
 80097a4:	4619      	mov	r1, r3
 80097a6:	f004 fdb3 	bl	800e310 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80097aa:	e000      	b.n	80097ae <USBH_MSC_RdWrProcess+0x1de>

    default:
      break;
 80097ac:	bf00      	nop

  }
  return error;
 80097ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3718      	adds	r7, #24
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	460b      	mov	r3, r1
 80097c2:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80097ca:	69db      	ldr	r3, [r3, #28]
 80097cc:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	2b0b      	cmp	r3, #11
 80097d6:	d10c      	bne.n	80097f2 <USBH_MSC_UnitIsReady+0x3a>
 80097d8:	78fb      	ldrb	r3, [r7, #3]
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	2134      	movs	r1, #52	; 0x34
 80097de:	fb01 f303 	mul.w	r3, r1, r3
 80097e2:	4413      	add	r3, r2
 80097e4:	3391      	adds	r3, #145	; 0x91
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d102      	bne.n	80097f2 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80097ec:	2301      	movs	r3, #1
 80097ee:	73fb      	strb	r3, [r7, #15]
 80097f0:	e001      	b.n	80097f6 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80097f2:	2300      	movs	r3, #0
 80097f4:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80097f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3714      	adds	r7, #20
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bc80      	pop	{r7}
 8009800:	4770      	bx	lr

08009802 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b086      	sub	sp, #24
 8009806:	af00      	add	r7, sp, #0
 8009808:	60f8      	str	r0, [r7, #12]
 800980a:	460b      	mov	r3, r1
 800980c:	607a      	str	r2, [r7, #4]
 800980e:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009816:	69db      	ldr	r3, [r3, #28]
 8009818:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	b2db      	uxtb	r3, r3
 8009820:	2b0b      	cmp	r3, #11
 8009822:	d10d      	bne.n	8009840 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009824:	7afb      	ldrb	r3, [r7, #11]
 8009826:	2234      	movs	r2, #52	; 0x34
 8009828:	fb02 f303 	mul.w	r3, r2, r3
 800982c:	3390      	adds	r3, #144	; 0x90
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	4413      	add	r3, r2
 8009832:	2234      	movs	r2, #52	; 0x34
 8009834:	4619      	mov	r1, r3
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f007 fe84 	bl	8011544 <memcpy>
    return USBH_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	e000      	b.n	8009842 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8009840:	2302      	movs	r3, #2
  }
}
 8009842:	4618      	mov	r0, r3
 8009844:	3718      	adds	r7, #24
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b088      	sub	sp, #32
 800984e:	af02      	add	r7, sp, #8
 8009850:	60f8      	str	r0, [r7, #12]
 8009852:	607a      	str	r2, [r7, #4]
 8009854:	603b      	str	r3, [r7, #0]
 8009856:	460b      	mov	r3, r1
 8009858:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009860:	69db      	ldr	r3, [r3, #28]
 8009862:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800986a:	b2db      	uxtb	r3, r3
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00e      	beq.n	800988e <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009876:	2b0b      	cmp	r3, #11
 8009878:	d109      	bne.n	800988e <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800987a:	7afb      	ldrb	r3, [r7, #11]
 800987c:	697a      	ldr	r2, [r7, #20]
 800987e:	2134      	movs	r1, #52	; 0x34
 8009880:	fb01 f303 	mul.w	r3, r1, r3
 8009884:	4413      	add	r3, r2
 8009886:	3390      	adds	r3, #144	; 0x90
 8009888:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800988a:	2b01      	cmp	r3, #1
 800988c:	d001      	beq.n	8009892 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800988e:	2302      	movs	r3, #2
 8009890:	e040      	b.n	8009914 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	2206      	movs	r2, #6
 8009896:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009898:	7afb      	ldrb	r3, [r7, #11]
 800989a:	697a      	ldr	r2, [r7, #20]
 800989c:	2134      	movs	r1, #52	; 0x34
 800989e:	fb01 f303 	mul.w	r3, r1, r3
 80098a2:	4413      	add	r3, r2
 80098a4:	3390      	adds	r3, #144	; 0x90
 80098a6:	2206      	movs	r2, #6
 80098a8:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80098aa:	7afb      	ldrb	r3, [r7, #11]
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80098b4:	7af9      	ldrb	r1, [r7, #11]
 80098b6:	6a3b      	ldr	r3, [r7, #32]
 80098b8:	9300      	str	r3, [sp, #0]
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f000 fe03 	bl	800a4ca <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80098ca:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80098cc:	e016      	b.n	80098fc <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	1ad2      	subs	r2, r2, r3
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	f242 7110 	movw	r1, #10000	; 0x2710
 80098de:	fb01 f303 	mul.w	r3, r1, r3
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d805      	bhi.n	80098f2 <USBH_MSC_Read+0xa8>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d104      	bne.n	80098fc <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	2201      	movs	r2, #1
 80098f6:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80098f8:	2302      	movs	r3, #2
 80098fa:	e00b      	b.n	8009914 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80098fc:	7afb      	ldrb	r3, [r7, #11]
 80098fe:	4619      	mov	r1, r3
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f7ff fe65 	bl	80095d0 <USBH_MSC_RdWrProcess>
 8009906:	4603      	mov	r3, r0
 8009908:	2b01      	cmp	r3, #1
 800990a:	d0e0      	beq.n	80098ce <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	2201      	movs	r2, #1
 8009910:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3718      	adds	r7, #24
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b088      	sub	sp, #32
 8009920:	af02      	add	r7, sp, #8
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	607a      	str	r2, [r7, #4]
 8009926:	603b      	str	r3, [r7, #0]
 8009928:	460b      	mov	r3, r1
 800992a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009932:	69db      	ldr	r3, [r3, #28]
 8009934:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800993c:	b2db      	uxtb	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00e      	beq.n	8009960 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009948:	2b0b      	cmp	r3, #11
 800994a:	d109      	bne.n	8009960 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800994c:	7afb      	ldrb	r3, [r7, #11]
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	2134      	movs	r1, #52	; 0x34
 8009952:	fb01 f303 	mul.w	r3, r1, r3
 8009956:	4413      	add	r3, r2
 8009958:	3390      	adds	r3, #144	; 0x90
 800995a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800995c:	2b01      	cmp	r3, #1
 800995e:	d001      	beq.n	8009964 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009960:	2302      	movs	r3, #2
 8009962:	e040      	b.n	80099e6 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	2207      	movs	r2, #7
 8009968:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800996a:	7afb      	ldrb	r3, [r7, #11]
 800996c:	697a      	ldr	r2, [r7, #20]
 800996e:	2134      	movs	r1, #52	; 0x34
 8009970:	fb01 f303 	mul.w	r3, r1, r3
 8009974:	4413      	add	r3, r2
 8009976:	3390      	adds	r3, #144	; 0x90
 8009978:	2207      	movs	r2, #7
 800997a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800997c:	7afb      	ldrb	r3, [r7, #11]
 800997e:	b29a      	uxth	r2, r3
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009986:	7af9      	ldrb	r1, [r7, #11]
 8009988:	6a3b      	ldr	r3, [r7, #32]
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f000 fd2f 	bl	800a3f4 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800999c:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800999e:	e016      	b.n	80099ce <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	1ad2      	subs	r2, r2, r3
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	f242 7110 	movw	r1, #10000	; 0x2710
 80099b0:	fb01 f303 	mul.w	r3, r1, r3
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d805      	bhi.n	80099c4 <USBH_MSC_Write+0xa8>
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d104      	bne.n	80099ce <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	2201      	movs	r2, #1
 80099c8:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80099ca:	2302      	movs	r3, #2
 80099cc:	e00b      	b.n	80099e6 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80099ce:	7afb      	ldrb	r3, [r7, #11]
 80099d0:	4619      	mov	r1, r3
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f7ff fdfc 	bl	80095d0 <USBH_MSC_RdWrProcess>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d0e0      	beq.n	80099a0 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	2201      	movs	r2, #1
 80099e2:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b082      	sub	sp, #8
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2221      	movs	r2, #33	; 0x21
 80099fa:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	22ff      	movs	r2, #255	; 0xff
 8009a00:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8009a14:	2200      	movs	r2, #0
 8009a16:	2100      	movs	r1, #0
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f001 fe3b 	bl	800b694 <USBH_CtlReq>
 8009a1e:	4603      	mov	r3, r0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	22a1      	movs	r2, #161	; 0xa1
 8009a36:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	22fe      	movs	r2, #254	; 0xfe
 8009a3c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009a50:	2201      	movs	r2, #1
 8009a52:	6839      	ldr	r1, [r7, #0]
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f001 fe1d 	bl	800b694 <USBH_CtlReq>
 8009a5a:	4603      	mov	r3, r0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009a72:	69db      	ldr	r3, [r3, #28]
 8009a74:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	4a09      	ldr	r2, [pc, #36]	; (8009aa0 <USBH_MSC_BOT_Init+0x3c>)
 8009a7a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	4a09      	ldr	r2, [pc, #36]	; (8009aa4 <USBH_MSC_BOT_Init+0x40>)
 8009a80:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2201      	movs	r2, #1
 8009a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bc80      	pop	{r7}
 8009a9c:	4770      	bx	lr
 8009a9e:	bf00      	nop
 8009aa0:	43425355 	.word	0x43425355
 8009aa4:	20304050 	.word	0x20304050

08009aa8 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b088      	sub	sp, #32
 8009aac:	af02      	add	r7, sp, #8
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009abc:	2301      	movs	r3, #1
 8009abe:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009aca:	69db      	ldr	r3, [r3, #28]
 8009acc:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009ad8:	3b01      	subs	r3, #1
 8009ada:	2b0a      	cmp	r3, #10
 8009adc:	f200 822a 	bhi.w	8009f34 <USBH_MSC_BOT_Process+0x48c>
 8009ae0:	a201      	add	r2, pc, #4	; (adr r2, 8009ae8 <USBH_MSC_BOT_Process+0x40>)
 8009ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae6:	bf00      	nop
 8009ae8:	08009b15 	.word	0x08009b15
 8009aec:	08009b3d 	.word	0x08009b3d
 8009af0:	08009bfb 	.word	0x08009bfb
 8009af4:	08009c19 	.word	0x08009c19
 8009af8:	08009cd5 	.word	0x08009cd5
 8009afc:	08009cf7 	.word	0x08009cf7
 8009b00:	08009de3 	.word	0x08009de3
 8009b04:	08009dff 	.word	0x08009dff
 8009b08:	08009e89 	.word	0x08009e89
 8009b0c:	08009eb9 	.word	0x08009eb9
 8009b10:	08009f1b 	.word	0x08009f1b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	78fa      	ldrb	r2, [r7, #3]
 8009b18:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	2202      	movs	r2, #2
 8009b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	795b      	ldrb	r3, [r3, #5]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	9200      	str	r2, [sp, #0]
 8009b32:	221f      	movs	r2, #31
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f002 f89e 	bl	800bc76 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009b3a:	e20a      	b.n	8009f52 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	795b      	ldrb	r3, [r3, #5]
 8009b40:	4619      	mov	r1, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f007 faee 	bl	8011124 <USBH_LL_GetURBState>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009b4c:	7d3b      	ldrb	r3, [r7, #20]
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d126      	bne.n	8009ba0 <USBH_MSC_BOT_Process+0xf8>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00f      	beq.n	8009b7a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009b60:	b25b      	sxtb	r3, r3
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	da04      	bge.n	8009b70 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	2203      	movs	r2, #3
 8009b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009b6e:	e008      	b.n	8009b82 <USBH_MSC_BOT_Process+0xda>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	2205      	movs	r2, #5
 8009b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009b78:	e003      	b.n	8009b82 <USBH_MSC_BOT_Process+0xda>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	2207      	movs	r2, #7
 8009b7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2202      	movs	r2, #2
 8009b86:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009b96:	2200      	movs	r2, #0
 8009b98:	4619      	mov	r1, r3
 8009b9a:	f004 fbb9 	bl	800e310 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009b9e:	e1cb      	b.n	8009f38 <USBH_MSC_BOT_Process+0x490>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ba0:	7d3b      	ldrb	r3, [r7, #20]
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d112      	bne.n	8009bcc <USBH_MSC_BOT_Process+0x124>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	f004 fba3 	bl	800e310 <osMessagePut>
      break;
 8009bca:	e1b5      	b.n	8009f38 <USBH_MSC_BOT_Process+0x490>
        if (URB_Status == USBH_URB_STALL)
 8009bcc:	7d3b      	ldrb	r3, [r7, #20]
 8009bce:	2b05      	cmp	r3, #5
 8009bd0:	f040 81b2 	bne.w	8009f38 <USBH_MSC_BOT_Process+0x490>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	220a      	movs	r2, #10
 8009bd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2202      	movs	r2, #2
 8009be0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	f004 fb8c 	bl	800e310 <osMessagePut>
      break;
 8009bf8:	e19e      	b.n	8009f38 <USBH_MSC_BOT_Process+0x490>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	895a      	ldrh	r2, [r3, #10]
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	791b      	ldrb	r3, [r3, #4]
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f002 f859 	bl	800bcc0 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	2204      	movs	r2, #4
 8009c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009c16:	e19c      	b.n	8009f52 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	791b      	ldrb	r3, [r3, #4]
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f007 fa80 	bl	8011124 <USBH_LL_GetURBState>
 8009c24:	4603      	mov	r3, r0
 8009c26:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009c28:	7d3b      	ldrb	r3, [r7, #20]
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d13b      	bne.n	8009ca6 <USBH_MSC_BOT_Process+0x1fe>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c32:	693a      	ldr	r2, [r7, #16]
 8009c34:	8952      	ldrh	r2, [r2, #10]
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d910      	bls.n	8009c5c <USBH_MSC_BOT_Process+0x1b4>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	8952      	ldrh	r2, [r2, #10]
 8009c44:	441a      	add	r2, r3
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c50:	693a      	ldr	r2, [r7, #16]
 8009c52:	8952      	ldrh	r2, [r2, #10]
 8009c54:	1a9a      	subs	r2, r3, r2
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	65da      	str	r2, [r3, #92]	; 0x5c
 8009c5a:	e002      	b.n	8009c62 <USBH_MSC_BOT_Process+0x1ba>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00a      	beq.n	8009c80 <USBH_MSC_BOT_Process+0x1d8>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	895a      	ldrh	r2, [r3, #10]
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	791b      	ldrb	r3, [r3, #4]
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f002 f821 	bl	800bcc0 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009c7e:	e15d      	b.n	8009f3c <USBH_MSC_BOT_Process+0x494>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	2207      	movs	r2, #7
 8009c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	f004 fb36 	bl	800e310 <osMessagePut>
      break;
 8009ca4:	e14a      	b.n	8009f3c <USBH_MSC_BOT_Process+0x494>
      else if (URB_Status == USBH_URB_STALL)
 8009ca6:	7d3b      	ldrb	r3, [r7, #20]
 8009ca8:	2b05      	cmp	r3, #5
 8009caa:	f040 8147 	bne.w	8009f3c <USBH_MSC_BOT_Process+0x494>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	2209      	movs	r2, #9
 8009cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2202      	movs	r2, #2
 8009cba:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009cca:	2200      	movs	r2, #0
 8009ccc:	4619      	mov	r1, r3
 8009cce:	f004 fb1f 	bl	800e310 <osMessagePut>
      break;
 8009cd2:	e133      	b.n	8009f3c <USBH_MSC_BOT_Process+0x494>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	891a      	ldrh	r2, [r3, #8]
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	795b      	ldrb	r3, [r3, #5]
 8009ce2:	2001      	movs	r0, #1
 8009ce4:	9000      	str	r0, [sp, #0]
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f001 ffc5 	bl	800bc76 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	2206      	movs	r2, #6
 8009cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009cf4:	e12d      	b.n	8009f52 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	795b      	ldrb	r3, [r3, #5]
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f007 fa11 	bl	8011124 <USBH_LL_GetURBState>
 8009d02:	4603      	mov	r3, r0
 8009d04:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009d06:	7d3b      	ldrb	r3, [r7, #20]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d13d      	bne.n	8009d88 <USBH_MSC_BOT_Process+0x2e0>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	8912      	ldrh	r2, [r2, #8]
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d910      	bls.n	8009d3a <USBH_MSC_BOT_Process+0x292>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	8912      	ldrh	r2, [r2, #8]
 8009d22:	441a      	add	r2, r3
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d2e:	693a      	ldr	r2, [r7, #16]
 8009d30:	8912      	ldrh	r2, [r2, #8]
 8009d32:	1a9a      	subs	r2, r3, r2
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	65da      	str	r2, [r3, #92]	; 0x5c
 8009d38:	e002      	b.n	8009d40 <USBH_MSC_BOT_Process+0x298>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00c      	beq.n	8009d62 <USBH_MSC_BOT_Process+0x2ba>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	891a      	ldrh	r2, [r3, #8]
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	795b      	ldrb	r3, [r3, #5]
 8009d56:	2001      	movs	r0, #1
 8009d58:	9000      	str	r0, [sp, #0]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f001 ff8b 	bl	800bc76 <USBH_BulkSendData>
 8009d60:	e003      	b.n	8009d6a <USBH_MSC_BOT_Process+0x2c2>
                            MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	2207      	movs	r2, #7
 8009d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2202      	movs	r2, #2
 8009d6e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009d7e:	2200      	movs	r2, #0
 8009d80:	4619      	mov	r1, r3
 8009d82:	f004 fac5 	bl	800e310 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 8009d86:	e0db      	b.n	8009f40 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009d88:	7d3b      	ldrb	r3, [r7, #20]
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d112      	bne.n	8009db4 <USBH_MSC_BOT_Process+0x30c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	2205      	movs	r2, #5
 8009d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2202      	movs	r2, #2
 8009d9a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009daa:	2200      	movs	r2, #0
 8009dac:	4619      	mov	r1, r3
 8009dae:	f004 faaf 	bl	800e310 <osMessagePut>
      break;
 8009db2:	e0c5      	b.n	8009f40 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_STALL)
 8009db4:	7d3b      	ldrb	r3, [r7, #20]
 8009db6:	2b05      	cmp	r3, #5
 8009db8:	f040 80c2 	bne.w	8009f40 <USBH_MSC_BOT_Process+0x498>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	220a      	movs	r2, #10
 8009dc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2202      	movs	r2, #2
 8009dc8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009dd8:	2200      	movs	r2, #0
 8009dda:	4619      	mov	r1, r3
 8009ddc:	f004 fa98 	bl	800e310 <osMessagePut>
      break;
 8009de0:	e0ae      	b.n	8009f40 <USBH_MSC_BOT_Process+0x498>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	791b      	ldrb	r3, [r3, #4]
 8009dec:	220d      	movs	r2, #13
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f001 ff66 	bl	800bcc0 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	2208      	movs	r2, #8
 8009df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009dfc:	e0a9      	b.n	8009f52 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	791b      	ldrb	r3, [r3, #4]
 8009e02:	4619      	mov	r1, r3
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f007 f98d 	bl	8011124 <USBH_LL_GetURBState>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009e0e:	7d3b      	ldrb	r3, [r7, #20]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d123      	bne.n	8009e5c <USBH_MSC_BOT_Process+0x3b4>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f8c5 	bl	8009fb4 <USBH_MSC_DecodeCSW>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009e2e:	7d7b      	ldrb	r3, [r7, #21]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d102      	bne.n	8009e3a <USBH_MSC_BOT_Process+0x392>
        {
          status = USBH_OK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	75fb      	strb	r3, [r7, #23]
 8009e38:	e001      	b.n	8009e3e <USBH_MSC_BOT_Process+0x396>
        }
        else
        {
          status = USBH_FAIL;
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2202      	movs	r2, #2
 8009e42:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009e52:	2200      	movs	r2, #0
 8009e54:	4619      	mov	r1, r3
 8009e56:	f004 fa5b 	bl	800e310 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 8009e5a:	e073      	b.n	8009f44 <USBH_MSC_BOT_Process+0x49c>
      else if (URB_Status == USBH_URB_STALL)
 8009e5c:	7d3b      	ldrb	r3, [r7, #20]
 8009e5e:	2b05      	cmp	r3, #5
 8009e60:	d170      	bne.n	8009f44 <USBH_MSC_BOT_Process+0x49c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	2209      	movs	r2, #9
 8009e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2202      	movs	r2, #2
 8009e6e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8009e7e:	2200      	movs	r2, #0
 8009e80:	4619      	mov	r1, r3
 8009e82:	f004 fa45 	bl	800e310 <osMessagePut>
      break;
 8009e86:	e05d      	b.n	8009f44 <USBH_MSC_BOT_Process+0x49c>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009e88:	78fb      	ldrb	r3, [r7, #3]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f864 	bl	8009f5c <USBH_MSC_BOT_Abort>
 8009e94:	4603      	mov	r3, r0
 8009e96:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009e98:	7dbb      	ldrb	r3, [r7, #22]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d104      	bne.n	8009ea8 <USBH_MSC_BOT_Process+0x400>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	2207      	movs	r2, #7
 8009ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009ea6:	e04f      	b.n	8009f48 <USBH_MSC_BOT_Process+0x4a0>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009ea8:	7dbb      	ldrb	r3, [r7, #22]
 8009eaa:	2b04      	cmp	r3, #4
 8009eac:	d14c      	bne.n	8009f48 <USBH_MSC_BOT_Process+0x4a0>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	220b      	movs	r2, #11
 8009eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009eb6:	e047      	b.n	8009f48 <USBH_MSC_BOT_Process+0x4a0>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009eb8:	78fb      	ldrb	r3, [r7, #3]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 f84c 	bl	8009f5c <USBH_MSC_BOT_Abort>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009ec8:	7dbb      	ldrb	r3, [r7, #22]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d11d      	bne.n	8009f0a <USBH_MSC_BOT_Process+0x462>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	795b      	ldrb	r3, [r3, #5]
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f007 f97e 	bl	80111d6 <USBH_LL_GetToggle>
 8009eda:	4603      	mov	r3, r0
 8009edc:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	7959      	ldrb	r1, [r3, #5]
 8009ee2:	7bfb      	ldrb	r3, [r7, #15]
 8009ee4:	f1c3 0301 	rsb	r3, r3, #1
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	461a      	mov	r2, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f007 f943 	bl	8011178 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	791b      	ldrb	r3, [r3, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	4619      	mov	r1, r3
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f007 f93c 	bl	8011178 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	2209      	movs	r2, #9
 8009f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009f08:	e020      	b.n	8009f4c <USBH_MSC_BOT_Process+0x4a4>
        if (error == USBH_UNRECOVERED_ERROR)
 8009f0a:	7dbb      	ldrb	r3, [r7, #22]
 8009f0c:	2b04      	cmp	r3, #4
 8009f0e:	d11d      	bne.n	8009f4c <USBH_MSC_BOT_Process+0x4a4>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	220b      	movs	r2, #11
 8009f14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f18:	e018      	b.n	8009f4c <USBH_MSC_BOT_Process+0x4a4>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f7ff fd67 	bl	80099ee <USBH_MSC_BOT_REQ_Reset>
 8009f20:	4603      	mov	r3, r0
 8009f22:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009f24:	7dfb      	ldrb	r3, [r7, #23]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d112      	bne.n	8009f50 <USBH_MSC_BOT_Process+0x4a8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009f32:	e00d      	b.n	8009f50 <USBH_MSC_BOT_Process+0x4a8>

    default:
      break;
 8009f34:	bf00      	nop
 8009f36:	e00c      	b.n	8009f52 <USBH_MSC_BOT_Process+0x4aa>
      break;
 8009f38:	bf00      	nop
 8009f3a:	e00a      	b.n	8009f52 <USBH_MSC_BOT_Process+0x4aa>
      break;
 8009f3c:	bf00      	nop
 8009f3e:	e008      	b.n	8009f52 <USBH_MSC_BOT_Process+0x4aa>
      break;
 8009f40:	bf00      	nop
 8009f42:	e006      	b.n	8009f52 <USBH_MSC_BOT_Process+0x4aa>
      break;
 8009f44:	bf00      	nop
 8009f46:	e004      	b.n	8009f52 <USBH_MSC_BOT_Process+0x4aa>
      break;
 8009f48:	bf00      	nop
 8009f4a:	e002      	b.n	8009f52 <USBH_MSC_BOT_Process+0x4aa>
      break;
 8009f4c:	bf00      	nop
 8009f4e:	e000      	b.n	8009f52 <USBH_MSC_BOT_Process+0x4aa>
      break;
 8009f50:	bf00      	nop
  }
  return status;
 8009f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3718      	adds	r7, #24
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	460b      	mov	r3, r1
 8009f66:	70fb      	strb	r3, [r7, #3]
 8009f68:	4613      	mov	r3, r2
 8009f6a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009f6c:	2302      	movs	r3, #2
 8009f6e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009f76:	69db      	ldr	r3, [r3, #28]
 8009f78:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009f7a:	78bb      	ldrb	r3, [r7, #2]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d002      	beq.n	8009f86 <USBH_MSC_BOT_Abort+0x2a>
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d009      	beq.n	8009f98 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009f84:	e011      	b.n	8009faa <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	79db      	ldrb	r3, [r3, #7]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f001 f9a6 	bl	800b2de <USBH_ClrFeature>
 8009f92:	4603      	mov	r3, r0
 8009f94:	73fb      	strb	r3, [r7, #15]
      break;
 8009f96:	e008      	b.n	8009faa <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	799b      	ldrb	r3, [r3, #6]
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f001 f99d 	bl	800b2de <USBH_ClrFeature>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8009fa8:	bf00      	nop
  }
  return status;
 8009faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009fc2:	69db      	ldr	r3, [r3, #28]
 8009fc4:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	791b      	ldrb	r3, [r3, #4]
 8009fce:	4619      	mov	r1, r3
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f007 f815 	bl	8011000 <USBH_LL_GetLastXferSize>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b0d      	cmp	r3, #13
 8009fda:	d002      	beq.n	8009fe2 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009fdc:	2302      	movs	r3, #2
 8009fde:	73fb      	strb	r3, [r7, #15]
 8009fe0:	e024      	b.n	800a02c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fe6:	4a14      	ldr	r2, [pc, #80]	; (800a038 <USBH_MSC_DecodeCSW+0x84>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d11d      	bne.n	800a028 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d119      	bne.n	800a02c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d102      	bne.n	800a008 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800a002:	2300      	movs	r3, #0
 800a004:	73fb      	strb	r3, [r7, #15]
 800a006:	e011      	b.n	800a02c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d102      	bne.n	800a018 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a012:	2301      	movs	r3, #1
 800a014:	73fb      	strb	r3, [r7, #15]
 800a016:	e009      	b.n	800a02c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d104      	bne.n	800a02c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800a022:	2302      	movs	r3, #2
 800a024:	73fb      	strb	r3, [r7, #15]
 800a026:	e001      	b.n	800a02c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a028:	2302      	movs	r3, #2
 800a02a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	53425355 	.word	0x53425355

0800a03c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	460b      	mov	r3, r1
 800a046:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a048:	2302      	movs	r3, #2
 800a04a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a052:	69db      	ldr	r3, [r3, #28]
 800a054:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d002      	beq.n	800a066 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800a060:	2b02      	cmp	r3, #2
 800a062:	d021      	beq.n	800a0a8 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a064:	e028      	b.n	800a0b8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	2200      	movs	r2, #0
 800a06a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	220a      	movs	r2, #10
 800a078:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	3363      	adds	r3, #99	; 0x63
 800a080:	2210      	movs	r2, #16
 800a082:	2100      	movs	r1, #0
 800a084:	4618      	mov	r0, r3
 800a086:	f007 fa6b 	bl	8011560 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	2201      	movs	r2, #1
 800a096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	2202      	movs	r2, #2
 800a09e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	73fb      	strb	r3, [r7, #15]
      break;
 800a0a6:	e007      	b.n	800a0b8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a0a8:	78fb      	ldrb	r3, [r7, #3]
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f7ff fcfb 	bl	8009aa8 <USBH_MSC_BOT_Process>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a0b6:	bf00      	nop
  }

  return error;
 800a0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b086      	sub	sp, #24
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	60f8      	str	r0, [r7, #12]
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	607a      	str	r2, [r7, #4]
 800a0ce:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a0da:	69db      	ldr	r3, [r3, #28]
 800a0dc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d002      	beq.n	800a0ee <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d027      	beq.n	800a13c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800a0ec:	e05f      	b.n	800a1ae <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	2208      	movs	r2, #8
 800a0f2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	2280      	movs	r2, #128	; 0x80
 800a0f8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	220a      	movs	r2, #10
 800a100:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	3363      	adds	r3, #99	; 0x63
 800a108:	2210      	movs	r2, #16
 800a10a:	2100      	movs	r1, #0
 800a10c:	4618      	mov	r0, r3
 800a10e:	f007 fa27 	bl	8011560 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	2225      	movs	r2, #37	; 0x25
 800a116:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	2201      	movs	r2, #1
 800a11e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	2202      	movs	r2, #2
 800a126:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	f103 0210 	add.w	r2, r3, #16
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a136:	2301      	movs	r3, #1
 800a138:	75fb      	strb	r3, [r7, #23]
      break;
 800a13a:	e038      	b.n	800a1ae <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a13c:	7afb      	ldrb	r3, [r7, #11]
 800a13e:	4619      	mov	r1, r3
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f7ff fcb1 	bl	8009aa8 <USBH_MSC_BOT_Process>
 800a146:	4603      	mov	r3, r0
 800a148:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a14a:	7dfb      	ldrb	r3, [r7, #23]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d12d      	bne.n	800a1ac <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a156:	3303      	adds	r3, #3
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	461a      	mov	r2, r3
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a162:	3302      	adds	r3, #2
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	021b      	lsls	r3, r3, #8
 800a168:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a170:	3301      	adds	r3, #1
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a176:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	061b      	lsls	r3, r3, #24
 800a182:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a18e:	3307      	adds	r3, #7
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	b29a      	uxth	r2, r3
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a19a:	3306      	adds	r3, #6
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	021b      	lsls	r3, r3, #8
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	809a      	strh	r2, [r3, #4]
      break;
 800a1ac:	bf00      	nop
  }

  return error;
 800a1ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3718      	adds	r7, #24
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b086      	sub	sp, #24
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	607a      	str	r2, [r7, #4]
 800a1c4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a1c6:	2302      	movs	r3, #2
 800a1c8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a1d0:	69db      	ldr	r3, [r3, #28]
 800a1d2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d002      	beq.n	800a1e4 <USBH_MSC_SCSI_Inquiry+0x2c>
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	d03d      	beq.n	800a25e <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a1e2:	e089      	b.n	800a2f8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	2224      	movs	r2, #36	; 0x24
 800a1e8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	2280      	movs	r2, #128	; 0x80
 800a1ee:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	220a      	movs	r2, #10
 800a1f6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	3363      	adds	r3, #99	; 0x63
 800a1fe:	220a      	movs	r2, #10
 800a200:	2100      	movs	r1, #0
 800a202:	4618      	mov	r0, r3
 800a204:	f007 f9ac 	bl	8011560 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	2212      	movs	r2, #18
 800a20c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a210:	7afb      	ldrb	r3, [r7, #11]
 800a212:	015b      	lsls	r3, r3, #5
 800a214:	b2da      	uxtb	r2, r3
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	2200      	movs	r2, #0
 800a220:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	2200      	movs	r2, #0
 800a228:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	2224      	movs	r2, #36	; 0x24
 800a230:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	2200      	movs	r2, #0
 800a238:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	2202      	movs	r2, #2
 800a248:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	f103 0210 	add.w	r2, r3, #16
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a258:	2301      	movs	r3, #1
 800a25a:	75fb      	strb	r3, [r7, #23]
      break;
 800a25c:	e04c      	b.n	800a2f8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a25e:	7afb      	ldrb	r3, [r7, #11]
 800a260:	4619      	mov	r1, r3
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f7ff fc20 	bl	8009aa8 <USBH_MSC_BOT_Process>
 800a268:	4603      	mov	r3, r0
 800a26a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a26c:	7dfb      	ldrb	r3, [r7, #23]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d141      	bne.n	800a2f6 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a272:	2222      	movs	r2, #34	; 0x22
 800a274:	2100      	movs	r1, #0
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f007 f972 	bl	8011560 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	f003 031f 	and.w	r3, r3, #31
 800a288:	b2da      	uxtb	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	095b      	lsrs	r3, r3, #5
 800a298:	b2da      	uxtb	r2, r3
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	b25b      	sxtb	r3, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	da03      	bge.n	800a2b6 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	709a      	strb	r2, [r3, #2]
 800a2b4:	e002      	b.n	800a2bc <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	1cd8      	adds	r0, r3, #3
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2c6:	3308      	adds	r3, #8
 800a2c8:	2208      	movs	r2, #8
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	f007 f93a 	bl	8011544 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f103 000c 	add.w	r0, r3, #12
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2dc:	3310      	adds	r3, #16
 800a2de:	2210      	movs	r2, #16
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	f007 f92f 	bl	8011544 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	331d      	adds	r3, #29
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a2f0:	3220      	adds	r2, #32
 800a2f2:	6812      	ldr	r2, [r2, #0]
 800a2f4:	601a      	str	r2, [r3, #0]
      break;
 800a2f6:	bf00      	nop
  }

  return error;
 800a2f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3718      	adds	r7, #24
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b086      	sub	sp, #24
 800a306:	af00      	add	r7, sp, #0
 800a308:	60f8      	str	r0, [r7, #12]
 800a30a:	460b      	mov	r3, r1
 800a30c:	607a      	str	r2, [r7, #4]
 800a30e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a310:	2302      	movs	r3, #2
 800a312:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a31a:	69db      	ldr	r3, [r3, #28]
 800a31c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a324:	2b01      	cmp	r3, #1
 800a326:	d002      	beq.n	800a32e <USBH_MSC_SCSI_RequestSense+0x2c>
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d03d      	beq.n	800a3a8 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a32c:	e05d      	b.n	800a3ea <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	220e      	movs	r2, #14
 800a332:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	2280      	movs	r2, #128	; 0x80
 800a338:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	220a      	movs	r2, #10
 800a340:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	3363      	adds	r3, #99	; 0x63
 800a348:	2210      	movs	r2, #16
 800a34a:	2100      	movs	r1, #0
 800a34c:	4618      	mov	r0, r3
 800a34e:	f007 f907 	bl	8011560 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	2203      	movs	r2, #3
 800a356:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a35a:	7afb      	ldrb	r3, [r7, #11]
 800a35c:	015b      	lsls	r3, r3, #5
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	2200      	movs	r2, #0
 800a36a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	2200      	movs	r2, #0
 800a372:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	220e      	movs	r2, #14
 800a37a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	2200      	movs	r2, #0
 800a382:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	2201      	movs	r2, #1
 800a38a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	2202      	movs	r2, #2
 800a392:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	f103 0210 	add.w	r2, r3, #16
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	75fb      	strb	r3, [r7, #23]
      break;
 800a3a6:	e020      	b.n	800a3ea <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a3a8:	7afb      	ldrb	r3, [r7, #11]
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f7ff fb7b 	bl	8009aa8 <USBH_MSC_BOT_Process>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a3b6:	7dfb      	ldrb	r3, [r7, #23]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d115      	bne.n	800a3e8 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3c2:	3302      	adds	r3, #2
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	f003 030f 	and.w	r3, r3, #15
 800a3ca:	b2da      	uxtb	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3d6:	7b1a      	ldrb	r2, [r3, #12]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3e2:	7b5a      	ldrb	r2, [r3, #13]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	709a      	strb	r2, [r3, #2]
      break;
 800a3e8:	bf00      	nop
  }

  return error;
 800a3ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3718      	adds	r7, #24
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b086      	sub	sp, #24
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	607a      	str	r2, [r7, #4]
 800a3fe:	603b      	str	r3, [r7, #0]
 800a400:	460b      	mov	r3, r1
 800a402:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a404:	2302      	movs	r3, #2
 800a406:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a40e:	69db      	ldr	r3, [r3, #28]
 800a410:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d002      	beq.n	800a422 <USBH_MSC_SCSI_Write+0x2e>
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	d047      	beq.n	800a4b0 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a420:	e04e      	b.n	800a4c0 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a428:	461a      	mov	r2, r3
 800a42a:	6a3b      	ldr	r3, [r7, #32]
 800a42c:	fb03 f202 	mul.w	r2, r3, r2
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	2200      	movs	r2, #0
 800a438:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	220a      	movs	r2, #10
 800a440:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	3363      	adds	r3, #99	; 0x63
 800a448:	2210      	movs	r2, #16
 800a44a:	2100      	movs	r1, #0
 800a44c:	4618      	mov	r0, r3
 800a44e:	f007 f887 	bl	8011560 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	222a      	movs	r2, #42	; 0x2a
 800a456:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a45a:	79fa      	ldrb	r2, [r7, #7]
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a462:	79ba      	ldrb	r2, [r7, #6]
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a46a:	797a      	ldrb	r2, [r7, #5]
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a472:	1d3b      	adds	r3, r7, #4
 800a474:	781a      	ldrb	r2, [r3, #0]
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a47c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a486:	f107 0320 	add.w	r3, r7, #32
 800a48a:	781a      	ldrb	r2, [r3, #0]
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	2201      	movs	r2, #1
 800a496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	2202      	movs	r2, #2
 800a49e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	683a      	ldr	r2, [r7, #0]
 800a4a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a4ae:	e007      	b.n	800a4c0 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a4b0:	7afb      	ldrb	r3, [r7, #11]
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f7ff faf7 	bl	8009aa8 <USBH_MSC_BOT_Process>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	75fb      	strb	r3, [r7, #23]
      break;
 800a4be:	bf00      	nop
  }

  return error;
 800a4c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3718      	adds	r7, #24
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b086      	sub	sp, #24
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	60f8      	str	r0, [r7, #12]
 800a4d2:	607a      	str	r2, [r7, #4]
 800a4d4:	603b      	str	r3, [r7, #0]
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a4da:	2302      	movs	r3, #2
 800a4dc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a4e4:	69db      	ldr	r3, [r3, #28]
 800a4e6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d002      	beq.n	800a4f8 <USBH_MSC_SCSI_Read+0x2e>
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	d047      	beq.n	800a586 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a4f6:	e04e      	b.n	800a596 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a4fe:	461a      	mov	r2, r3
 800a500:	6a3b      	ldr	r3, [r7, #32]
 800a502:	fb03 f202 	mul.w	r2, r3, r2
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	2280      	movs	r2, #128	; 0x80
 800a50e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	220a      	movs	r2, #10
 800a516:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	3363      	adds	r3, #99	; 0x63
 800a51e:	2210      	movs	r2, #16
 800a520:	2100      	movs	r1, #0
 800a522:	4618      	mov	r0, r3
 800a524:	f007 f81c 	bl	8011560 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	2228      	movs	r2, #40	; 0x28
 800a52c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a530:	79fa      	ldrb	r2, [r7, #7]
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a538:	79ba      	ldrb	r2, [r7, #6]
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a540:	797a      	ldrb	r2, [r7, #5]
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a548:	1d3b      	adds	r3, r7, #4
 800a54a:	781a      	ldrb	r2, [r3, #0]
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a552:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a55c:	f107 0320 	add.w	r3, r7, #32
 800a560:	781a      	ldrb	r2, [r3, #0]
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	2202      	movs	r2, #2
 800a574:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	683a      	ldr	r2, [r7, #0]
 800a57c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a580:	2301      	movs	r3, #1
 800a582:	75fb      	strb	r3, [r7, #23]
      break;
 800a584:	e007      	b.n	800a596 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a586:	7afb      	ldrb	r3, [r7, #11]
 800a588:	4619      	mov	r1, r3
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f7ff fa8c 	bl	8009aa8 <USBH_MSC_BOT_Process>
 800a590:	4603      	mov	r3, r0
 800a592:	75fb      	strb	r3, [r7, #23]
      break;
 800a594:	bf00      	nop
  }

  return error;
 800a596:	7dfb      	ldrb	r3, [r7, #23]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3718      	adds	r7, #24
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a5a0:	b5b0      	push	{r4, r5, r7, lr}
 800a5a2:	b090      	sub	sp, #64	; 0x40
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d101      	bne.n	800a5b8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a5b4:	2302      	movs	r3, #2
 800a5b6:	e04d      	b.n	800a654 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	79fa      	ldrb	r2, [r7, #7]
 800a5bc:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f000 f847 	bl	800a664 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d003      	beq.n	800a604 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800a604:	4b15      	ldr	r3, [pc, #84]	; (800a65c <USBH_Init+0xbc>)
 800a606:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800a60a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a60c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800a610:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a614:	2100      	movs	r1, #0
 800a616:	4618      	mov	r0, r3
 800a618:	f003 fe51 	bl	800e2be <osMessageCreate>
 800a61c:	4602      	mov	r2, r0
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800a624:	4b0e      	ldr	r3, [pc, #56]	; (800a660 <USBH_Init+0xc0>)
 800a626:	f107 0414 	add.w	r4, r7, #20
 800a62a:	461d      	mov	r5, r3
 800a62c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a62e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a630:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800a638:	f107 0314 	add.w	r3, r7, #20
 800a63c:	68f9      	ldr	r1, [r7, #12]
 800a63e:	4618      	mov	r0, r3
 800a640:	f003 fd13 	bl	800e06a <osThreadCreate>
 800a644:	4602      	mov	r2, r0
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	f006 fc23 	bl	8010e98 <USBH_LL_Init>

  return USBH_OK;
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	3740      	adds	r7, #64	; 0x40
 800a658:	46bd      	mov	sp, r7
 800a65a:	bdb0      	pop	{r4, r5, r7, pc}
 800a65c:	08015cb8 	.word	0x08015cb8
 800a660:	08015cc8 	.word	0x08015cc8

0800a664 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a66c:	2300      	movs	r3, #0
 800a66e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a670:	2300      	movs	r3, #0
 800a672:	60fb      	str	r3, [r7, #12]
 800a674:	e008      	b.n	800a688 <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	32e0      	adds	r2, #224	; 0xe0
 800a67c:	2100      	movs	r1, #0
 800a67e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	3301      	adds	r3, #1
 800a686:	60fb      	str	r3, [r7, #12]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2b0e      	cmp	r3, #14
 800a68c:	d9f3      	bls.n	800a676 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a68e:	2300      	movs	r3, #0
 800a690:	60fb      	str	r3, [r7, #12]
 800a692:	e009      	b.n	800a6a8 <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	4413      	add	r3, r2
 800a69a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a69e:	2200      	movs	r2, #0
 800a6a0:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	60fb      	str	r3, [r7, #12]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6ae:	d3f1      	bcc.n	800a694 <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  phost->Control.state = CTRL_SETUP;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2240      	movs	r2, #64	; 0x40
 800a6d4:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3714      	adds	r7, #20
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bc80      	pop	{r7}
 800a6f6:	4770      	bx	lr

0800a6f8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a702:	2300      	movs	r3, #0
 800a704:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d017      	beq.n	800a73c <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a712:	2b00      	cmp	r3, #0
 800a714:	d10f      	bne.n	800a736 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a71c:	1c59      	adds	r1, r3, #1
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	33dc      	adds	r3, #220	; 0xdc
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	4413      	add	r3, r2
 800a72c:	683a      	ldr	r2, [r7, #0]
 800a72e:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800a730:	2300      	movs	r3, #0
 800a732:	73fb      	strb	r3, [r7, #15]
 800a734:	e004      	b.n	800a740 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a736:	2302      	movs	r3, #2
 800a738:	73fb      	strb	r3, [r7, #15]
 800a73a:	e001      	b.n	800a740 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a73c:	2302      	movs	r3, #2
 800a73e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a740:	7bfb      	ldrb	r3, [r7, #15]
}
 800a742:	4618      	mov	r0, r3
 800a744:	3714      	adds	r7, #20
 800a746:	46bd      	mov	sp, r7
 800a748:	bc80      	pop	{r7}
 800a74a:	4770      	bx	lr

0800a74c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	460b      	mov	r3, r1
 800a756:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a758:	2300      	movs	r3, #0
 800a75a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a762:	78fa      	ldrb	r2, [r7, #3]
 800a764:	429a      	cmp	r2, r3
 800a766:	d204      	bcs.n	800a772 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	78fa      	ldrb	r2, [r7, #3]
 800a76c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 800a770:	e001      	b.n	800a776 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a772:	2302      	movs	r3, #2
 800a774:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a776:	7bfb      	ldrb	r3, [r7, #15]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3714      	adds	r7, #20
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bc80      	pop	{r7}
 800a780:	4770      	bx	lr

0800a782 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a782:	b480      	push	{r7}
 800a784:	b087      	sub	sp, #28
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
 800a78a:	4608      	mov	r0, r1
 800a78c:	4611      	mov	r1, r2
 800a78e:	461a      	mov	r2, r3
 800a790:	4603      	mov	r3, r0
 800a792:	70fb      	strb	r3, [r7, #3]
 800a794:	460b      	mov	r3, r1
 800a796:	70bb      	strb	r3, [r7, #2]
 800a798:	4613      	mov	r3, r2
 800a79a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a79c:	2300      	movs	r3, #0
 800a79e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f203 3336 	addw	r3, r3, #822	; 0x336
 800a7aa:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a7ac:	e025      	b.n	800a7fa <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a7ae:	7dfb      	ldrb	r3, [r7, #23]
 800a7b0:	221a      	movs	r2, #26
 800a7b2:	fb02 f303 	mul.w	r3, r2, r3
 800a7b6:	3308      	adds	r3, #8
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	3302      	adds	r3, #2
 800a7be:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	795b      	ldrb	r3, [r3, #5]
 800a7c4:	78fa      	ldrb	r2, [r7, #3]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d002      	beq.n	800a7d0 <USBH_FindInterface+0x4e>
 800a7ca:	78fb      	ldrb	r3, [r7, #3]
 800a7cc:	2bff      	cmp	r3, #255	; 0xff
 800a7ce:	d111      	bne.n	800a7f4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a7d4:	78ba      	ldrb	r2, [r7, #2]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d002      	beq.n	800a7e0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a7da:	78bb      	ldrb	r3, [r7, #2]
 800a7dc:	2bff      	cmp	r3, #255	; 0xff
 800a7de:	d109      	bne.n	800a7f4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a7e4:	787a      	ldrb	r2, [r7, #1]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d002      	beq.n	800a7f0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a7ea:	787b      	ldrb	r3, [r7, #1]
 800a7ec:	2bff      	cmp	r3, #255	; 0xff
 800a7ee:	d101      	bne.n	800a7f4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a7f0:	7dfb      	ldrb	r3, [r7, #23]
 800a7f2:	e006      	b.n	800a802 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a7f4:	7dfb      	ldrb	r3, [r7, #23]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a7fa:	7dfb      	ldrb	r3, [r7, #23]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d9d6      	bls.n	800a7ae <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a800:	23ff      	movs	r3, #255	; 0xff
}
 800a802:	4618      	mov	r0, r3
 800a804:	371c      	adds	r7, #28
 800a806:	46bd      	mov	sp, r7
 800a808:	bc80      	pop	{r7}
 800a80a:	4770      	bx	lr

0800a80c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f006 fb7b 	bl	8010f10 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a81a:	2101      	movs	r1, #1
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f006 fc94 	bl	801114a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b088      	sub	sp, #32
 800a830:	af04      	add	r7, sp, #16
 800a832:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a834:	2302      	movs	r3, #2
 800a836:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a838:	2300      	movs	r3, #0
 800a83a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a842:	b2db      	uxtb	r3, r3
 800a844:	2b01      	cmp	r3, #1
 800a846:	d102      	bne.n	800a84e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2203      	movs	r2, #3
 800a84c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	b2db      	uxtb	r3, r3
 800a854:	2b0b      	cmp	r3, #11
 800a856:	f200 81e4 	bhi.w	800ac22 <USBH_Process+0x3f6>
 800a85a:	a201      	add	r2, pc, #4	; (adr r2, 800a860 <USBH_Process+0x34>)
 800a85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a860:	0800a891 	.word	0x0800a891
 800a864:	0800a8cf 	.word	0x0800a8cf
 800a868:	0800a8e3 	.word	0x0800a8e3
 800a86c:	0800aba1 	.word	0x0800aba1
 800a870:	0800ac23 	.word	0x0800ac23
 800a874:	0800a9a3 	.word	0x0800a9a3
 800a878:	0800ab3b 	.word	0x0800ab3b
 800a87c:	0800a9d3 	.word	0x0800a9d3
 800a880:	0800aa0f 	.word	0x0800aa0f
 800a884:	0800aa49 	.word	0x0800aa49
 800a888:	0800aa91 	.word	0x0800aa91
 800a88c:	0800ab89 	.word	0x0800ab89
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a896:	b2db      	uxtb	r3, r3
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f000 81c4 	beq.w	800ac26 <USBH_Process+0x3fa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a8a4:	20c8      	movs	r0, #200	; 0xc8
 800a8a6:	f006 fcc5 	bl	8011234 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f006 fb8d 	bl	8010fca <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	f003 fd22 	bl	800e310 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a8cc:	e1ab      	b.n	800ac26 <USBH_Process+0x3fa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	f040 81a8 	bne.w	800ac2a <USBH_Process+0x3fe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->gState = HOST_DEV_ATTACHED;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2202      	movs	r2, #2
 800a8de:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a8e0:	e1a3      	b.n	800ac2a <USBH_Process+0x3fe>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d005      	beq.n	800a8f8 <USBH_Process+0xcc>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a8f2:	2104      	movs	r1, #4
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a8f8:	2064      	movs	r0, #100	; 0x64
 800a8fa:	f006 fc9b 	bl	8011234 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f006 fb3c 	bl	8010f7c <USBH_LL_GetSpeed>
 800a904:	4603      	mov	r3, r0
 800a906:	461a      	mov	r2, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2205      	movs	r2, #5
 800a912:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a914:	2100      	movs	r1, #0
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f001 fa1f 	bl	800bd5a <USBH_AllocPipe>
 800a91c:	4603      	mov	r3, r0
 800a91e:	461a      	mov	r2, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a924:	2180      	movs	r1, #128	; 0x80
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f001 fa17 	bl	800bd5a <USBH_AllocPipe>
 800a92c:	4603      	mov	r3, r0
 800a92e:	461a      	mov	r2, r3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	7919      	ldrb	r1, [r3, #4]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800a948:	b292      	uxth	r2, r2
 800a94a:	9202      	str	r2, [sp, #8]
 800a94c:	2200      	movs	r2, #0
 800a94e:	9201      	str	r2, [sp, #4]
 800a950:	9300      	str	r3, [sp, #0]
 800a952:	4603      	mov	r3, r0
 800a954:	2280      	movs	r2, #128	; 0x80
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f001 f9d0 	bl	800bcfc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	7959      	ldrb	r1, [r3, #5]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800a970:	b292      	uxth	r2, r2
 800a972:	9202      	str	r2, [sp, #8]
 800a974:	2200      	movs	r2, #0
 800a976:	9201      	str	r2, [sp, #4]
 800a978:	9300      	str	r3, [sp, #0]
 800a97a:	4603      	mov	r3, r0
 800a97c:	2200      	movs	r2, #0
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f001 f9bc 	bl	800bcfc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800a998:	2200      	movs	r2, #0
 800a99a:	4619      	mov	r1, r3
 800a99c:	f003 fcb8 	bl	800e310 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a9a0:	e14c      	b.n	800ac3c <USBH_Process+0x410>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f950 	bl	800ac48 <USBH_HandleEnum>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f040 813f 	bne.w	800ac2e <USBH_Process+0x402>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d103      	bne.n	800a9ca <USBH_Process+0x19e>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2208      	movs	r2, #8
 800a9c6:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 800a9c8:	e131      	b.n	800ac2e <USBH_Process+0x402>
          phost->gState = HOST_INPUT;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2207      	movs	r2, #7
 800a9ce:	701a      	strb	r2, [r3, #0]
      break;
 800a9d0:	e12d      	b.n	800ac2e <USBH_Process+0x402>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f000 812a 	beq.w	800ac32 <USBH_Process+0x406>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a9e4:	2101      	movs	r1, #1
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2208      	movs	r2, #8
 800a9ee:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2205      	movs	r2, #5
 800a9f4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800aa04:	2200      	movs	r2, #0
 800aa06:	4619      	mov	r1, r3
 800aa08:	f003 fc82 	bl	800e310 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800aa0c:	e111      	b.n	800ac32 <USBH_Process+0x406>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	4619      	mov	r1, r3
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 fc19 	bl	800b250 <USBH_SetCfg>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d102      	bne.n	800aa2a <USBH_Process+0x1fe>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2209      	movs	r2, #9
 800aa28:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800aa3e:	2200      	movs	r2, #0
 800aa40:	4619      	mov	r1, r3
 800aa42:	f003 fc65 	bl	800e310 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aa46:	e0f9      	b.n	800ac3c <USBH_Process+0x410>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800aa4e:	f003 0320 	and.w	r3, r3, #32
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00a      	beq.n	800aa6c <USBH_Process+0x240>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800aa56:	2101      	movs	r1, #1
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 fc1c 	bl	800b296 <USBH_SetFeature>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d106      	bne.n	800aa72 <USBH_Process+0x246>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	220a      	movs	r2, #10
 800aa68:	701a      	strb	r2, [r3, #0]
 800aa6a:	e002      	b.n	800aa72 <USBH_Process+0x246>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	220a      	movs	r2, #10
 800aa70:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2201      	movs	r2, #1
 800aa76:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800aa86:	2200      	movs	r2, #0
 800aa88:	4619      	mov	r1, r3
 800aa8a:	f003 fc41 	bl	800e310 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aa8e:	e0d5      	b.n	800ac3c <USBH_Process+0x410>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d040      	beq.n	800ab1c <USBH_Process+0x2f0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	73fb      	strb	r3, [r7, #15]
 800aaa6:	e017      	b.n	800aad8 <USBH_Process+0x2ac>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800aaa8:	7bfb      	ldrb	r3, [r7, #15]
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	33dc      	adds	r3, #220	; 0xdc
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	4413      	add	r3, r2
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	791a      	ldrb	r2, [r3, #4]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d108      	bne.n	800aad2 <USBH_Process+0x2a6>
          {
            phost->pActiveClass = phost->pClass[idx];
 800aac0:	7bfb      	ldrb	r3, [r7, #15]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	33dc      	adds	r3, #220	; 0xdc
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	4413      	add	r3, r2
 800aaca:	685a      	ldr	r2, [r3, #4]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aad2:	7bfb      	ldrb	r3, [r7, #15]
 800aad4:	3301      	adds	r3, #1
 800aad6:	73fb      	strb	r3, [r7, #15]
 800aad8:	7bfb      	ldrb	r3, [r7, #15]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d0e4      	beq.n	800aaa8 <USBH_Process+0x27c>
          }
        }

        if (phost->pActiveClass != NULL)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d016      	beq.n	800ab16 <USBH_Process+0x2ea>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	4798      	blx	r3
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d109      	bne.n	800ab0e <USBH_Process+0x2e2>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2206      	movs	r2, #6
 800aafe:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800ab06:	2103      	movs	r1, #3
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	4798      	blx	r3
 800ab0c:	e006      	b.n	800ab1c <USBH_Process+0x2f0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	220d      	movs	r2, #13
 800ab12:	701a      	strb	r2, [r3, #0]
 800ab14:	e002      	b.n	800ab1c <USBH_Process+0x2f0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	220d      	movs	r2, #13
 800ab1a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2205      	movs	r2, #5
 800ab20:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ab30:	2200      	movs	r2, #0
 800ab32:	4619      	mov	r1, r3
 800ab34:	f003 fbec 	bl	800e310 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ab38:	e080      	b.n	800ac3c <USBH_Process+0x410>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00f      	beq.n	800ab64 <USBH_Process+0x338>
      {
        status = phost->pActiveClass->Requests(phost);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	4798      	blx	r3
 800ab50:	4603      	mov	r3, r0
 800ab52:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ab54:	7bbb      	ldrb	r3, [r7, #14]
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d16c      	bne.n	800ac36 <USBH_Process+0x40a>
        {
          phost->gState = HOST_CLASS;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	220b      	movs	r2, #11
 800ab60:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ab62:	e068      	b.n	800ac36 <USBH_Process+0x40a>
        phost->gState = HOST_ABORT_STATE;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	220d      	movs	r2, #13
 800ab68:	701a      	strb	r2, [r3, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2205      	movs	r2, #5
 800ab6e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ab7e:	2200      	movs	r2, #0
 800ab80:	4619      	mov	r1, r3
 800ab82:	f003 fbc5 	bl	800e310 <osMessagePut>
      break;
 800ab86:	e056      	b.n	800ac36 <USBH_Process+0x40a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d053      	beq.n	800ac3a <USBH_Process+0x40e>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ab98:	695b      	ldr	r3, [r3, #20]
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	4798      	blx	r3
      }
      break;
 800ab9e:	e04c      	b.n	800ac3a <USBH_Process+0x40e>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

      DeInitStateMachine(phost);
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7ff fd5b 	bl	800a664 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d009      	beq.n	800abcc <USBH_Process+0x3a0>
      {
        phost->pActiveClass->DeInit(phost);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      }

      if (phost->pUser != NULL)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d005      	beq.n	800abe2 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800abdc:	2105      	movs	r1, #5
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	2b01      	cmp	r3, #1
 800abec:	d107      	bne.n	800abfe <USBH_Process+0x3d2>
      {
        phost->device.is_ReEnumerated = 0U;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f7ff fe08 	bl	800a80c <USBH_Start>
 800abfc:	e002      	b.n	800ac04 <USBH_Process+0x3d8>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f006 f986 	bl	8010f10 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2201      	movs	r2, #1
 800ac08:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ac18:	2200      	movs	r2, #0
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	f003 fb78 	bl	800e310 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ac20:	e00c      	b.n	800ac3c <USBH_Process+0x410>

    case HOST_ABORT_STATE:
    default :
      break;
 800ac22:	bf00      	nop
 800ac24:	e00a      	b.n	800ac3c <USBH_Process+0x410>
      break;
 800ac26:	bf00      	nop
 800ac28:	e008      	b.n	800ac3c <USBH_Process+0x410>
      break;
 800ac2a:	bf00      	nop
 800ac2c:	e006      	b.n	800ac3c <USBH_Process+0x410>
      break;
 800ac2e:	bf00      	nop
 800ac30:	e004      	b.n	800ac3c <USBH_Process+0x410>
    break;
 800ac32:	bf00      	nop
 800ac34:	e002      	b.n	800ac3c <USBH_Process+0x410>
      break;
 800ac36:	bf00      	nop
 800ac38:	e000      	b.n	800ac3c <USBH_Process+0x410>
      break;
 800ac3a:	bf00      	nop
  }
  return USBH_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop

0800ac48 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b088      	sub	sp, #32
 800ac4c:	af04      	add	r7, sp, #16
 800ac4e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ac50:	2301      	movs	r3, #1
 800ac52:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	785b      	ldrb	r3, [r3, #1]
 800ac58:	2b07      	cmp	r3, #7
 800ac5a:	f200 8132 	bhi.w	800aec2 <USBH_HandleEnum+0x27a>
 800ac5e:	a201      	add	r2, pc, #4	; (adr r2, 800ac64 <USBH_HandleEnum+0x1c>)
 800ac60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac64:	0800ac85 	.word	0x0800ac85
 800ac68:	0800acf7 	.word	0x0800acf7
 800ac6c:	0800ad0f 	.word	0x0800ad0f
 800ac70:	0800ad85 	.word	0x0800ad85
 800ac74:	0800ad9d 	.word	0x0800ad9d
 800ac78:	0800adbb 	.word	0x0800adbb
 800ac7c:	0800ae27 	.word	0x0800ae27
 800ac80:	0800ae77 	.word	0x0800ae77
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800ac84:	2108      	movs	r1, #8
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 fa12 	bl	800b0b0 <USBH_Get_DevDesc>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f040 8119 	bne.w	800aec6 <USBH_HandleEnum+0x27e>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2201      	movs	r2, #1
 800aca2:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	7919      	ldrb	r1, [r3, #4]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800acb8:	b292      	uxth	r2, r2
 800acba:	9202      	str	r2, [sp, #8]
 800acbc:	2200      	movs	r2, #0
 800acbe:	9201      	str	r2, [sp, #4]
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	4603      	mov	r3, r0
 800acc4:	2280      	movs	r2, #128	; 0x80
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f001 f818 	bl	800bcfc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	7959      	ldrb	r1, [r3, #5]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800ace0:	b292      	uxth	r2, r2
 800ace2:	9202      	str	r2, [sp, #8]
 800ace4:	2200      	movs	r2, #0
 800ace6:	9201      	str	r2, [sp, #4]
 800ace8:	9300      	str	r3, [sp, #0]
 800acea:	4603      	mov	r3, r0
 800acec:	2200      	movs	r2, #0
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f001 f804 	bl	800bcfc <USBH_OpenPipe>
      }
      break;
 800acf4:	e0e7      	b.n	800aec6 <USBH_HandleEnum+0x27e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 800acf6:	2112      	movs	r1, #18
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 f9d9 	bl	800b0b0 <USBH_Get_DevDesc>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	f040 80e2 	bne.w	800aeca <USBH_HandleEnum+0x282>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2202      	movs	r2, #2
 800ad0a:	705a      	strb	r2, [r3, #1]

      }
      break;
 800ad0c:	e0dd      	b.n	800aeca <USBH_HandleEnum+0x282>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800ad0e:	2101      	movs	r1, #1
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 fa79 	bl	800b208 <USBH_SetAddress>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f040 80d8 	bne.w	800aece <USBH_HandleEnum+0x286>
      {
        USBH_Delay(2U);
 800ad1e:	2002      	movs	r0, #2
 800ad20:	f006 fa88 	bl	8011234 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2203      	movs	r2, #3
 800ad30:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	7919      	ldrb	r1, [r3, #4]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800ad46:	b292      	uxth	r2, r2
 800ad48:	9202      	str	r2, [sp, #8]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	9201      	str	r2, [sp, #4]
 800ad4e:	9300      	str	r3, [sp, #0]
 800ad50:	4603      	mov	r3, r0
 800ad52:	2280      	movs	r2, #128	; 0x80
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 ffd1 	bl	800bcfc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	7959      	ldrb	r1, [r3, #5]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800ad6e:	b292      	uxth	r2, r2
 800ad70:	9202      	str	r2, [sp, #8]
 800ad72:	2200      	movs	r2, #0
 800ad74:	9201      	str	r2, [sp, #4]
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 ffbd 	bl	800bcfc <USBH_OpenPipe>
      }
      break;
 800ad82:	e0a4      	b.n	800aece <USBH_HandleEnum+0x286>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 800ad84:	2109      	movs	r1, #9
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 f9ba 	bl	800b100 <USBH_Get_CfgDesc>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	f040 809f 	bne.w	800aed2 <USBH_HandleEnum+0x28a>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2204      	movs	r2, #4
 800ad98:	705a      	strb	r2, [r3, #1]
      }
      break;
 800ad9a:	e09a      	b.n	800aed2 <USBH_HandleEnum+0x28a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 800ada2:	4619      	mov	r1, r3
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 f9ab 	bl	800b100 <USBH_Get_CfgDesc>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	f040 8092 	bne.w	800aed6 <USBH_HandleEnum+0x28e>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2205      	movs	r2, #5
 800adb6:	705a      	strb	r2, [r3, #1]
      }
      break;
 800adb8:	e08d      	b.n	800aed6 <USBH_HandleEnum+0x28e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d01e      	beq.n	800ae02 <USBH_HandleEnum+0x1ba>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800add0:	23ff      	movs	r3, #255	; 0xff
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 f9b8 	bl	800b148 <USBH_Get_StringDesc>
 800add8:	4603      	mov	r3, r0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d17d      	bne.n	800aeda <USBH_HandleEnum+0x292>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2206      	movs	r2, #6
 800ade2:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2205      	movs	r2, #5
 800ade8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800adf8:	2200      	movs	r2, #0
 800adfa:	4619      	mov	r1, r3
 800adfc:	f003 fa88 	bl	800e310 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ae00:	e06b      	b.n	800aeda <USBH_HandleEnum+0x292>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2206      	movs	r2, #6
 800ae06:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2205      	movs	r2, #5
 800ae0c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	4619      	mov	r1, r3
 800ae20:	f003 fa76 	bl	800e310 <osMessagePut>
      break;
 800ae24:	e059      	b.n	800aeda <USBH_HandleEnum+0x292>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d010      	beq.n	800ae52 <USBH_HandleEnum+0x20a>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f893 1333 	ldrb.w	r1, [r3, #819]	; 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800ae3c:	23ff      	movs	r3, #255	; 0xff
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 f982 	bl	800b148 <USBH_Get_StringDesc>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d149      	bne.n	800aede <USBH_HandleEnum+0x296>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2207      	movs	r2, #7
 800ae4e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ae50:	e045      	b.n	800aede <USBH_HandleEnum+0x296>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2207      	movs	r2, #7
 800ae56:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2205      	movs	r2, #5
 800ae5c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	4619      	mov	r1, r3
 800ae70:	f003 fa4e 	bl	800e310 <osMessagePut>
      break;
 800ae74:	e033      	b.n	800aede <USBH_HandleEnum+0x296>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00f      	beq.n	800aea0 <USBH_HandleEnum+0x258>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800ae8c:	23ff      	movs	r3, #255	; 0xff
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 f95a 	bl	800b148 <USBH_Get_StringDesc>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d123      	bne.n	800aee2 <USBH_HandleEnum+0x29a>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ae9e:	e020      	b.n	800aee2 <USBH_HandleEnum+0x29a>
        Status = USBH_OK;
 800aea0:	2300      	movs	r3, #0
 800aea2:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2205      	movs	r2, #5
 800aea8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800aeb8:	2200      	movs	r2, #0
 800aeba:	4619      	mov	r1, r3
 800aebc:	f003 fa28 	bl	800e310 <osMessagePut>
      break;
 800aec0:	e00f      	b.n	800aee2 <USBH_HandleEnum+0x29a>

    default:
      break;
 800aec2:	bf00      	nop
 800aec4:	e00e      	b.n	800aee4 <USBH_HandleEnum+0x29c>
      break;
 800aec6:	bf00      	nop
 800aec8:	e00c      	b.n	800aee4 <USBH_HandleEnum+0x29c>
      break;
 800aeca:	bf00      	nop
 800aecc:	e00a      	b.n	800aee4 <USBH_HandleEnum+0x29c>
      break;
 800aece:	bf00      	nop
 800aed0:	e008      	b.n	800aee4 <USBH_HandleEnum+0x29c>
      break;
 800aed2:	bf00      	nop
 800aed4:	e006      	b.n	800aee4 <USBH_HandleEnum+0x29c>
      break;
 800aed6:	bf00      	nop
 800aed8:	e004      	b.n	800aee4 <USBH_HandleEnum+0x29c>
      break;
 800aeda:	bf00      	nop
 800aedc:	e002      	b.n	800aee4 <USBH_HandleEnum+0x29c>
      break;
 800aede:	bf00      	nop
 800aee0:	e000      	b.n	800aee4 <USBH_HandleEnum+0x29c>
      break;
 800aee2:	bf00      	nop
  }
  return Status;
 800aee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3710      	adds	r7, #16
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
 800aeee:	bf00      	nop

0800aef0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	683a      	ldr	r2, [r7, #0]
 800aefe:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
}
 800af02:	bf00      	nop
 800af04:	370c      	adds	r7, #12
 800af06:	46bd      	mov	sp, r7
 800af08:	bc80      	pop	{r7}
 800af0a:	4770      	bx	lr

0800af0c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800af1a:	1c5a      	adds	r2, r3, #1
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  USBH_HandleSof(phost);
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 f804 	bl	800af30 <USBH_HandleSof>
}
 800af28:	bf00      	nop
 800af2a:	3708      	adds	r7, #8
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	2b0b      	cmp	r3, #11
 800af40:	d10a      	bne.n	800af58 <USBH_HandleSof+0x28>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d005      	beq.n	800af58 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800af52:	699b      	ldr	r3, [r3, #24]
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	4798      	blx	r3
  }
}
 800af58:	bf00      	nop
 800af5a:	3708      	adds	r7, #8
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800af84:	2200      	movs	r2, #0
 800af86:	4619      	mov	r1, r3
 800af88:	f003 f9c2 	bl	800e310 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800af8c:	bf00      	nop
}
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 800afa4:	bf00      	nop
}
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bc80      	pop	{r7}
 800afac:	4770      	bx	lr

0800afae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b082      	sub	sp, #8
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2201      	movs	r2, #1
 800afba:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2201      	movs	r2, #1
 800afd2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800afe2:	2200      	movs	r2, #0
 800afe4:	4619      	mov	r1, r3
 800afe6:	f003 f993 	bl	800e310 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	3708      	adds	r7, #8
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f005 ff96 	bl	8010f46 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	791b      	ldrb	r3, [r3, #4]
 800b01e:	4619      	mov	r1, r3
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 feba 	bl	800bd9a <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	795b      	ldrb	r3, [r3, #5]
 800b02a:	4619      	mov	r1, r3
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 feb4 	bl	800bd9a <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2201      	movs	r2, #1
 800b036:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b046:	2200      	movs	r2, #0
 800b048:	4619      	mov	r1, r3
 800b04a:	f003 f961 	bl	800e310 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b04e:	2300      	movs	r3, #0
}
 800b050:	4618      	mov	r0, r3
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b086      	sub	sp, #24
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 13d0 	ldr.w	r1, [r3, #976]	; 0x3d0
 800b066:	f107 030c 	add.w	r3, r7, #12
 800b06a:	f04f 32ff 	mov.w	r2, #4294967295
 800b06e:	4618      	mov	r0, r3
 800b070:	f003 f98e 	bl	800e390 <osMessageGet>
    if (event.status == osEventMessage)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2b10      	cmp	r3, #16
 800b078:	d1f2      	bne.n	800b060 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f7ff fbd6 	bl	800a82c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800b080:	e7ee      	b.n	800b060 <USBH_Process_OS+0x8>

0800b082 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b082      	sub	sp, #8
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2201      	movs	r2, #1
 800b08e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b09e:	2200      	movs	r2, #0
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	f003 f935 	bl	800e310 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800b0a6:	2300      	movs	r3, #0
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3708      	adds	r7, #8
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b086      	sub	sp, #24
 800b0b4:	af02      	add	r7, sp, #8
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b0c2:	78fb      	ldrb	r3, [r7, #3]
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	9300      	str	r3, [sp, #0]
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0ce:	2100      	movs	r1, #0
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 f864 	bl	800b19e <USBH_GetDescriptor>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	73fb      	strb	r3, [r7, #15]
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d10a      	bne.n	800b0f6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f503 7049 	add.w	r0, r3, #804	; 0x324
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b0ec:	78fa      	ldrb	r2, [r7, #3]
 800b0ee:	b292      	uxth	r2, r2
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	f000 f918 	bl	800b326 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b100:	b580      	push	{r7, lr}
 800b102:	b086      	sub	sp, #24
 800b104:	af02      	add	r7, sp, #8
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	460b      	mov	r3, r1
 800b10a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	331c      	adds	r3, #28
 800b110:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b112:	887b      	ldrh	r3, [r7, #2]
 800b114:	9300      	str	r3, [sp, #0]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b11c:	2100      	movs	r1, #0
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 f83d 	bl	800b19e <USBH_GetDescriptor>
 800b124:	4603      	mov	r3, r0
 800b126:	72fb      	strb	r3, [r7, #11]
 800b128:	7afb      	ldrb	r3, [r7, #11]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d107      	bne.n	800b13e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f203 3336 	addw	r3, r3, #822	; 0x336
 800b134:	887a      	ldrh	r2, [r7, #2]
 800b136:	68f9      	ldr	r1, [r7, #12]
 800b138:	4618      	mov	r0, r3
 800b13a:	f000 f963 	bl	800b404 <USBH_ParseCfgDesc>
  }

  return status;
 800b13e:	7afb      	ldrb	r3, [r7, #11]
}
 800b140:	4618      	mov	r0, r3
 800b142:	3710      	adds	r7, #16
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b088      	sub	sp, #32
 800b14c:	af02      	add	r7, sp, #8
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	607a      	str	r2, [r7, #4]
 800b152:	461a      	mov	r2, r3
 800b154:	460b      	mov	r3, r1
 800b156:	72fb      	strb	r3, [r7, #11]
 800b158:	4613      	mov	r3, r2
 800b15a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b15c:	7afb      	ldrb	r3, [r7, #11]
 800b15e:	b29b      	uxth	r3, r3
 800b160:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b164:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b16c:	893b      	ldrh	r3, [r7, #8]
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	460b      	mov	r3, r1
 800b172:	2100      	movs	r1, #0
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	f000 f812 	bl	800b19e <USBH_GetDescriptor>
 800b17a:	4603      	mov	r3, r0
 800b17c:	75fb      	strb	r3, [r7, #23]
 800b17e:	7dfb      	ldrb	r3, [r7, #23]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d107      	bne.n	800b194 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b18a:	893a      	ldrh	r2, [r7, #8]
 800b18c:	6879      	ldr	r1, [r7, #4]
 800b18e:	4618      	mov	r0, r3
 800b190:	f000 fa34 	bl	800b5fc <USBH_ParseStringDesc>
  }

  return status;
 800b194:	7dfb      	ldrb	r3, [r7, #23]
}
 800b196:	4618      	mov	r0, r3
 800b198:	3718      	adds	r7, #24
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b084      	sub	sp, #16
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	60f8      	str	r0, [r7, #12]
 800b1a6:	607b      	str	r3, [r7, #4]
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	72fb      	strb	r3, [r7, #11]
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	789b      	ldrb	r3, [r3, #2]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d11c      	bne.n	800b1f2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b1b8:	7afb      	ldrb	r3, [r7, #11]
 800b1ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b1be:	b2da      	uxtb	r2, r3
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2206      	movs	r2, #6
 800b1c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	893a      	ldrh	r2, [r7, #8]
 800b1ce:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b1d0:	893b      	ldrh	r3, [r7, #8]
 800b1d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b1d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1da:	d104      	bne.n	800b1e6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f240 4209 	movw	r2, #1033	; 0x409
 800b1e2:	829a      	strh	r2, [r3, #20]
 800b1e4:	e002      	b.n	800b1ec <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	8b3a      	ldrh	r2, [r7, #24]
 800b1f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b1f2:	8b3b      	ldrh	r3, [r7, #24]
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	6879      	ldr	r1, [r7, #4]
 800b1f8:	68f8      	ldr	r0, [r7, #12]
 800b1fa:	f000 fa4b 	bl	800b694 <USBH_CtlReq>
 800b1fe:	4603      	mov	r3, r0
}
 800b200:	4618      	mov	r0, r3
 800b202:	3710      	adds	r7, #16
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	460b      	mov	r3, r1
 800b212:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	789b      	ldrb	r3, [r3, #2]
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d10f      	bne.n	800b23c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2205      	movs	r2, #5
 800b226:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b228:	78fb      	ldrb	r3, [r7, #3]
 800b22a:	b29a      	uxth	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b23c:	2200      	movs	r2, #0
 800b23e:	2100      	movs	r1, #0
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 fa27 	bl	800b694 <USBH_CtlReq>
 800b246:	4603      	mov	r3, r0
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	460b      	mov	r3, r1
 800b25a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	789b      	ldrb	r3, [r3, #2]
 800b260:	2b01      	cmp	r3, #1
 800b262:	d10e      	bne.n	800b282 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2209      	movs	r2, #9
 800b26e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	887a      	ldrh	r2, [r7, #2]
 800b274:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b282:	2200      	movs	r2, #0
 800b284:	2100      	movs	r1, #0
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fa04 	bl	800b694 <USBH_CtlReq>
 800b28c:	4603      	mov	r3, r0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3708      	adds	r7, #8
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}

0800b296 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b296:	b580      	push	{r7, lr}
 800b298:	b082      	sub	sp, #8
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
 800b29e:	460b      	mov	r3, r1
 800b2a0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	789b      	ldrb	r3, [r3, #2]
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d10f      	bne.n	800b2ca <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2203      	movs	r2, #3
 800b2b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b2b6:	78fb      	ldrb	r3, [r7, #3]
 800b2b8:	b29a      	uxth	r2, r3
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	2100      	movs	r1, #0
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 f9e0 	bl	800b694 <USBH_CtlReq>
 800b2d4:	4603      	mov	r3, r0
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3708      	adds	r7, #8
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}

0800b2de <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b2de:	b580      	push	{r7, lr}
 800b2e0:	b082      	sub	sp, #8
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	789b      	ldrb	r3, [r3, #2]
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d10f      	bne.n	800b312 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2202      	movs	r2, #2
 800b2f6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2200      	movs	r2, #0
 800b302:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b304:	78fb      	ldrb	r3, [r7, #3]
 800b306:	b29a      	uxth	r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b312:	2200      	movs	r2, #0
 800b314:	2100      	movs	r1, #0
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 f9bc 	bl	800b694 <USBH_CtlReq>
 800b31c:	4603      	mov	r3, r0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3708      	adds	r7, #8
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b326:	b480      	push	{r7}
 800b328:	b085      	sub	sp, #20
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	60f8      	str	r0, [r7, #12]
 800b32e:	60b9      	str	r1, [r7, #8]
 800b330:	4613      	mov	r3, r2
 800b332:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	781a      	ldrb	r2, [r3, #0]
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	785a      	ldrb	r2, [r3, #1]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	3302      	adds	r3, #2
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	b29a      	uxth	r2, r3
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	3303      	adds	r3, #3
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	b29b      	uxth	r3, r3
 800b354:	021b      	lsls	r3, r3, #8
 800b356:	b29b      	uxth	r3, r3
 800b358:	4313      	orrs	r3, r2
 800b35a:	b29a      	uxth	r2, r3
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	791a      	ldrb	r2, [r3, #4]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	795a      	ldrb	r2, [r3, #5]
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	799a      	ldrb	r2, [r3, #6]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	79da      	ldrb	r2, [r3, #7]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b380:	88fb      	ldrh	r3, [r7, #6]
 800b382:	2b08      	cmp	r3, #8
 800b384:	d939      	bls.n	800b3fa <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	3308      	adds	r3, #8
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	3309      	adds	r3, #9
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	b29b      	uxth	r3, r3
 800b396:	021b      	lsls	r3, r3, #8
 800b398:	b29b      	uxth	r3, r3
 800b39a:	4313      	orrs	r3, r2
 800b39c:	b29a      	uxth	r2, r3
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	330a      	adds	r3, #10
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	b29a      	uxth	r2, r3
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	330b      	adds	r3, #11
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	021b      	lsls	r3, r3, #8
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	330c      	adds	r3, #12
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	b29a      	uxth	r2, r3
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	330d      	adds	r3, #13
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	021b      	lsls	r3, r3, #8
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	7b9a      	ldrb	r2, [r3, #14]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	7bda      	ldrb	r2, [r3, #15]
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	7c1a      	ldrb	r2, [r3, #16]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	7c5a      	ldrb	r2, [r3, #17]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	745a      	strb	r2, [r3, #17]
  }
}
 800b3fa:	bf00      	nop
 800b3fc:	3714      	adds	r7, #20
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bc80      	pop	{r7}
 800b402:	4770      	bx	lr

0800b404 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b08a      	sub	sp, #40	; 0x28
 800b408:	af00      	add	r7, sp, #0
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	4613      	mov	r3, r2
 800b410:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b416:	2300      	movs	r3, #0
 800b418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b41c:	2300      	movs	r3, #0
 800b41e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	781a      	ldrb	r2, [r3, #0]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	785a      	ldrb	r2, [r3, #1]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	3302      	adds	r3, #2
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	b29a      	uxth	r2, r3
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	3303      	adds	r3, #3
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	b29b      	uxth	r3, r3
 800b446:	021b      	lsls	r3, r3, #8
 800b448:	b29b      	uxth	r3, r3
 800b44a:	4313      	orrs	r3, r2
 800b44c:	b29a      	uxth	r2, r3
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	791a      	ldrb	r2, [r3, #4]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	795a      	ldrb	r2, [r3, #5]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	799a      	ldrb	r2, [r3, #6]
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	79da      	ldrb	r2, [r3, #7]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	7a1a      	ldrb	r2, [r3, #8]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b47a:	88fb      	ldrh	r3, [r7, #6]
 800b47c:	2b09      	cmp	r3, #9
 800b47e:	d95f      	bls.n	800b540 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b480:	2309      	movs	r3, #9
 800b482:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b484:	2300      	movs	r3, #0
 800b486:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b488:	e051      	b.n	800b52e <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b48a:	f107 0316 	add.w	r3, r7, #22
 800b48e:	4619      	mov	r1, r3
 800b490:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b492:	f000 f8e5 	bl	800b660 <USBH_GetNextDesc>
 800b496:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49a:	785b      	ldrb	r3, [r3, #1]
 800b49c:	2b04      	cmp	r3, #4
 800b49e:	d146      	bne.n	800b52e <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b4a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b4a4:	221a      	movs	r2, #26
 800b4a6:	fb02 f303 	mul.w	r3, r2, r3
 800b4aa:	3308      	adds	r3, #8
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	3302      	adds	r3, #2
 800b4b2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b4b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b4b6:	69f8      	ldr	r0, [r7, #28]
 800b4b8:	f000 f846 	bl	800b548 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b4c6:	e022      	b.n	800b50e <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b4c8:	f107 0316 	add.w	r3, r7, #22
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4d0:	f000 f8c6 	bl	800b660 <USBH_GetNextDesc>
 800b4d4:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d8:	785b      	ldrb	r3, [r3, #1]
 800b4da:	2b05      	cmp	r3, #5
 800b4dc:	d117      	bne.n	800b50e <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b4de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b4e2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b4e6:	3201      	adds	r2, #1
 800b4e8:	00d2      	lsls	r2, r2, #3
 800b4ea:	211a      	movs	r1, #26
 800b4ec:	fb01 f303 	mul.w	r3, r1, r3
 800b4f0:	4413      	add	r3, r2
 800b4f2:	3308      	adds	r3, #8
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	3304      	adds	r3, #4
 800b4fa:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b4fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b4fe:	69b8      	ldr	r0, [r7, #24]
 800b500:	f000 f850 	bl	800b5a4 <USBH_ParseEPDesc>
            ep_ix++;
 800b504:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b508:	3301      	adds	r3, #1
 800b50a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b50e:	69fb      	ldr	r3, [r7, #28]
 800b510:	791b      	ldrb	r3, [r3, #4]
 800b512:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b516:	429a      	cmp	r2, r3
 800b518:	d204      	bcs.n	800b524 <USBH_ParseCfgDesc+0x120>
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	885a      	ldrh	r2, [r3, #2]
 800b51e:	8afb      	ldrh	r3, [r7, #22]
 800b520:	429a      	cmp	r2, r3
 800b522:	d8d1      	bhi.n	800b4c8 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b524:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b528:	3301      	adds	r3, #1
 800b52a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b52e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b532:	2b01      	cmp	r3, #1
 800b534:	d804      	bhi.n	800b540 <USBH_ParseCfgDesc+0x13c>
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	885a      	ldrh	r2, [r3, #2]
 800b53a:	8afb      	ldrh	r3, [r7, #22]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d8a4      	bhi.n	800b48a <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b540:	bf00      	nop
 800b542:	3728      	adds	r7, #40	; 0x28
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	781a      	ldrb	r2, [r3, #0]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	785a      	ldrb	r2, [r3, #1]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	789a      	ldrb	r2, [r3, #2]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	78da      	ldrb	r2, [r3, #3]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	791a      	ldrb	r2, [r3, #4]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	795a      	ldrb	r2, [r3, #5]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	799a      	ldrb	r2, [r3, #6]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	79da      	ldrb	r2, [r3, #7]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	7a1a      	ldrb	r2, [r3, #8]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	721a      	strb	r2, [r3, #8]
}
 800b59a:	bf00      	nop
 800b59c:	370c      	adds	r7, #12
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bc80      	pop	{r7}
 800b5a2:	4770      	bx	lr

0800b5a4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	781a      	ldrb	r2, [r3, #0]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	785a      	ldrb	r2, [r3, #1]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	789a      	ldrb	r2, [r3, #2]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	78da      	ldrb	r2, [r3, #3]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	3304      	adds	r3, #4
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	b29a      	uxth	r2, r3
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	3305      	adds	r3, #5
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	021b      	lsls	r3, r3, #8
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	b29a      	uxth	r2, r3
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	799a      	ldrb	r2, [r3, #6]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	719a      	strb	r2, [r3, #6]
}
 800b5f2:	bf00      	nop
 800b5f4:	370c      	adds	r7, #12
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bc80      	pop	{r7}
 800b5fa:	4770      	bx	lr

0800b5fc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b087      	sub	sp, #28
 800b600:	af00      	add	r7, sp, #0
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	60b9      	str	r1, [r7, #8]
 800b606:	4613      	mov	r3, r2
 800b608:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	3301      	adds	r3, #1
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	2b03      	cmp	r3, #3
 800b612:	d120      	bne.n	800b656 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	1e9a      	subs	r2, r3, #2
 800b61a:	88fb      	ldrh	r3, [r7, #6]
 800b61c:	4293      	cmp	r3, r2
 800b61e:	bf28      	it	cs
 800b620:	4613      	movcs	r3, r2
 800b622:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	3302      	adds	r3, #2
 800b628:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b62a:	2300      	movs	r3, #0
 800b62c:	82fb      	strh	r3, [r7, #22]
 800b62e:	e00b      	b.n	800b648 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b630:	8afb      	ldrh	r3, [r7, #22]
 800b632:	68fa      	ldr	r2, [r7, #12]
 800b634:	4413      	add	r3, r2
 800b636:	781a      	ldrb	r2, [r3, #0]
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	3301      	adds	r3, #1
 800b640:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b642:	8afb      	ldrh	r3, [r7, #22]
 800b644:	3302      	adds	r3, #2
 800b646:	82fb      	strh	r3, [r7, #22]
 800b648:	8afa      	ldrh	r2, [r7, #22]
 800b64a:	8abb      	ldrh	r3, [r7, #20]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d3ef      	bcc.n	800b630 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	2200      	movs	r2, #0
 800b654:	701a      	strb	r2, [r3, #0]
  }
}
 800b656:	bf00      	nop
 800b658:	371c      	adds	r7, #28
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bc80      	pop	{r7}
 800b65e:	4770      	bx	lr

0800b660 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b660:	b480      	push	{r7}
 800b662:	b085      	sub	sp, #20
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	881a      	ldrh	r2, [r3, #0]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	b29b      	uxth	r3, r3
 800b674:	4413      	add	r3, r2
 800b676:	b29a      	uxth	r2, r3
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	4413      	add	r3, r2
 800b686:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b688:	68fb      	ldr	r3, [r7, #12]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3714      	adds	r7, #20
 800b68e:	46bd      	mov	sp, r7
 800b690:	bc80      	pop	{r7}
 800b692:	4770      	bx	lr

0800b694 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b086      	sub	sp, #24
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	4613      	mov	r3, r2
 800b6a0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	789b      	ldrb	r3, [r3, #2]
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d002      	beq.n	800b6b4 <USBH_CtlReq+0x20>
 800b6ae:	2b02      	cmp	r3, #2
 800b6b0:	d01d      	beq.n	800b6ee <USBH_CtlReq+0x5a>
        }
      }
      break;

    default:
      break;
 800b6b2:	e042      	b.n	800b73a <USBH_CtlReq+0xa6>
      phost->Control.buff = buff;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	68ba      	ldr	r2, [r7, #8]
 800b6b8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	88fa      	ldrh	r2, [r7, #6]
 800b6be:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2202      	movs	r2, #2
 800b6ca:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2203      	movs	r2, #3
 800b6d4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	f002 fe12 	bl	800e310 <osMessagePut>
      break;
 800b6ec:	e025      	b.n	800b73a <USBH_CtlReq+0xa6>
      status = USBH_HandleControl(phost);
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	f000 f828 	bl	800b744 <USBH_HandleControl>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800b6f8:	7dfb      	ldrb	r3, [r7, #23]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d108      	bne.n	800b710 <USBH_CtlReq+0x7c>
        phost->RequestState = CMD_SEND;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2201      	movs	r2, #1
 800b702:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2200      	movs	r2, #0
 800b708:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b70a:	2300      	movs	r3, #0
 800b70c:	75fb      	strb	r3, [r7, #23]
      break;
 800b70e:	e013      	b.n	800b738 <USBH_CtlReq+0xa4>
      else if (status == USBH_NOT_SUPPORTED)
 800b710:	7dfb      	ldrb	r3, [r7, #23]
 800b712:	2b03      	cmp	r3, #3
 800b714:	d108      	bne.n	800b728 <USBH_CtlReq+0x94>
        phost->RequestState = CMD_SEND;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2201      	movs	r2, #1
 800b71a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2200      	movs	r2, #0
 800b720:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b722:	2303      	movs	r3, #3
 800b724:	75fb      	strb	r3, [r7, #23]
      break;
 800b726:	e007      	b.n	800b738 <USBH_CtlReq+0xa4>
        if (status == USBH_FAIL)
 800b728:	7dfb      	ldrb	r3, [r7, #23]
 800b72a:	2b02      	cmp	r3, #2
 800b72c:	d104      	bne.n	800b738 <USBH_CtlReq+0xa4>
          phost->RequestState = CMD_SEND;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2201      	movs	r2, #1
 800b732:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 800b734:	2302      	movs	r3, #2
 800b736:	75fb      	strb	r3, [r7, #23]
      break;
 800b738:	bf00      	nop
  }
  return status;
 800b73a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3718      	adds	r7, #24
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b086      	sub	sp, #24
 800b748:	af02      	add	r7, sp, #8
 800b74a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b74c:	2301      	movs	r3, #1
 800b74e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b750:	2300      	movs	r3, #0
 800b752:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	7e1b      	ldrb	r3, [r3, #24]
 800b758:	3b01      	subs	r3, #1
 800b75a:	2b0a      	cmp	r3, #10
 800b75c:	f200 821d 	bhi.w	800bb9a <USBH_HandleControl+0x456>
 800b760:	a201      	add	r2, pc, #4	; (adr r2, 800b768 <USBH_HandleControl+0x24>)
 800b762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b766:	bf00      	nop
 800b768:	0800b795 	.word	0x0800b795
 800b76c:	0800b7af 	.word	0x0800b7af
 800b770:	0800b851 	.word	0x0800b851
 800b774:	0800b877 	.word	0x0800b877
 800b778:	0800b903 	.word	0x0800b903
 800b77c:	0800b92d 	.word	0x0800b92d
 800b780:	0800b9ef 	.word	0x0800b9ef
 800b784:	0800ba11 	.word	0x0800ba11
 800b788:	0800baa3 	.word	0x0800baa3
 800b78c:	0800bac9 	.word	0x0800bac9
 800b790:	0800bb5b 	.word	0x0800bb5b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f103 0110 	add.w	r1, r3, #16
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	795b      	ldrb	r3, [r3, #5]
 800b79e:	461a      	mov	r2, r3
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 fa0b 	bl	800bbbc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2202      	movs	r2, #2
 800b7aa:	761a      	strb	r2, [r3, #24]
      break;
 800b7ac:	e200      	b.n	800bbb0 <USBH_HandleControl+0x46c>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	795b      	ldrb	r3, [r3, #5]
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f005 fcb5 	bl	8011124 <USBH_LL_GetURBState>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b7be:	7bbb      	ldrb	r3, [r7, #14]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d12c      	bne.n	800b81e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	7c1b      	ldrb	r3, [r3, #16]
 800b7c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b7cc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	8adb      	ldrh	r3, [r3, #22]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d00a      	beq.n	800b7ec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b7d6:	7b7b      	ldrb	r3, [r7, #13]
 800b7d8:	2b80      	cmp	r3, #128	; 0x80
 800b7da:	d103      	bne.n	800b7e4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2203      	movs	r2, #3
 800b7e0:	761a      	strb	r2, [r3, #24]
 800b7e2:	e00d      	b.n	800b800 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2205      	movs	r2, #5
 800b7e8:	761a      	strb	r2, [r3, #24]
 800b7ea:	e009      	b.n	800b800 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b7ec:	7b7b      	ldrb	r3, [r7, #13]
 800b7ee:	2b80      	cmp	r3, #128	; 0x80
 800b7f0:	d103      	bne.n	800b7fa <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2209      	movs	r2, #9
 800b7f6:	761a      	strb	r2, [r3, #24]
 800b7f8:	e002      	b.n	800b800 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2207      	movs	r2, #7
 800b7fe:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2203      	movs	r2, #3
 800b804:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b814:	2200      	movs	r2, #0
 800b816:	4619      	mov	r1, r3
 800b818:	f002 fd7a 	bl	800e310 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b81c:	e1bf      	b.n	800bb9e <USBH_HandleControl+0x45a>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b81e:	7bbb      	ldrb	r3, [r7, #14]
 800b820:	2b04      	cmp	r3, #4
 800b822:	d003      	beq.n	800b82c <USBH_HandleControl+0xe8>
 800b824:	7bbb      	ldrb	r3, [r7, #14]
 800b826:	2b02      	cmp	r3, #2
 800b828:	f040 81b9 	bne.w	800bb9e <USBH_HandleControl+0x45a>
          phost->Control.state = CTRL_ERROR;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	220b      	movs	r2, #11
 800b830:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2203      	movs	r2, #3
 800b836:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b846:	2200      	movs	r2, #0
 800b848:	4619      	mov	r1, r3
 800b84a:	f002 fd61 	bl	800e310 <osMessagePut>
      break;
 800b84e:	e1a6      	b.n	800bb9e <USBH_HandleControl+0x45a>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800b856:	b29a      	uxth	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6899      	ldr	r1, [r3, #8]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	899a      	ldrh	r2, [r3, #12]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	791b      	ldrb	r3, [r3, #4]
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f000 f9e6 	bl	800bc3a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2204      	movs	r2, #4
 800b872:	761a      	strb	r2, [r3, #24]
      break;
 800b874:	e19c      	b.n	800bbb0 <USBH_HandleControl+0x46c>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	791b      	ldrb	r3, [r3, #4]
 800b87a:	4619      	mov	r1, r3
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f005 fc51 	bl	8011124 <USBH_LL_GetURBState>
 800b882:	4603      	mov	r3, r0
 800b884:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b886:	7bbb      	ldrb	r3, [r7, #14]
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d110      	bne.n	800b8ae <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2209      	movs	r2, #9
 800b890:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2203      	movs	r2, #3
 800b896:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	f002 fd31 	bl	800e310 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b8ae:	7bbb      	ldrb	r3, [r7, #14]
 800b8b0:	2b05      	cmp	r3, #5
 800b8b2:	d110      	bne.n	800b8d6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2203      	movs	r2, #3
 800b8bc:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	f002 fd1e 	bl	800e310 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b8d4:	e165      	b.n	800bba2 <USBH_HandleControl+0x45e>
        if (URB_Status == USBH_URB_ERROR)
 800b8d6:	7bbb      	ldrb	r3, [r7, #14]
 800b8d8:	2b04      	cmp	r3, #4
 800b8da:	f040 8162 	bne.w	800bba2 <USBH_HandleControl+0x45e>
          phost->Control.state = CTRL_ERROR;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	220b      	movs	r2, #11
 800b8e2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2203      	movs	r2, #3
 800b8e8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	f002 fd08 	bl	800e310 <osMessagePut>
      break;
 800b900:	e14f      	b.n	800bba2 <USBH_HandleControl+0x45e>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6899      	ldr	r1, [r3, #8]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	899a      	ldrh	r2, [r3, #12]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	795b      	ldrb	r3, [r3, #5]
 800b90e:	2001      	movs	r0, #1
 800b910:	9000      	str	r0, [sp, #0]
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 f96c 	bl	800bbf0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800b91e:	b29a      	uxth	r2, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2206      	movs	r2, #6
 800b928:	761a      	strb	r2, [r3, #24]
      break;
 800b92a:	e141      	b.n	800bbb0 <USBH_HandleControl+0x46c>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	795b      	ldrb	r3, [r3, #5]
 800b930:	4619      	mov	r1, r3
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f005 fbf6 	bl	8011124 <USBH_LL_GetURBState>
 800b938:	4603      	mov	r3, r0
 800b93a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b93c:	7bbb      	ldrb	r3, [r7, #14]
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d111      	bne.n	800b966 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2207      	movs	r2, #7
 800b946:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2203      	movs	r2, #3
 800b94c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b95c:	2200      	movs	r2, #0
 800b95e:	4619      	mov	r1, r3
 800b960:	f002 fcd6 	bl	800e310 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b964:	e11f      	b.n	800bba6 <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_STALL)
 800b966:	7bbb      	ldrb	r3, [r7, #14]
 800b968:	2b05      	cmp	r3, #5
 800b96a:	d113      	bne.n	800b994 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	220c      	movs	r2, #12
 800b970:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b972:	2303      	movs	r3, #3
 800b974:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2203      	movs	r2, #3
 800b97a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b98a:	2200      	movs	r2, #0
 800b98c:	4619      	mov	r1, r3
 800b98e:	f002 fcbf 	bl	800e310 <osMessagePut>
      break;
 800b992:	e108      	b.n	800bba6 <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b994:	7bbb      	ldrb	r3, [r7, #14]
 800b996:	2b02      	cmp	r3, #2
 800b998:	d111      	bne.n	800b9be <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2205      	movs	r2, #5
 800b99e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2203      	movs	r2, #3
 800b9a4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	f002 fcaa 	bl	800e310 <osMessagePut>
      break;
 800b9bc:	e0f3      	b.n	800bba6 <USBH_HandleControl+0x462>
        if (URB_Status == USBH_URB_ERROR)
 800b9be:	7bbb      	ldrb	r3, [r7, #14]
 800b9c0:	2b04      	cmp	r3, #4
 800b9c2:	f040 80f0 	bne.w	800bba6 <USBH_HandleControl+0x462>
          phost->Control.state = CTRL_ERROR;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	220b      	movs	r2, #11
 800b9ca:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b9cc:	2302      	movs	r3, #2
 800b9ce:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2203      	movs	r2, #3
 800b9d4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	f002 fc92 	bl	800e310 <osMessagePut>
      break;
 800b9ec:	e0db      	b.n	800bba6 <USBH_HandleControl+0x462>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	791b      	ldrb	r3, [r3, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	2100      	movs	r1, #0
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 f91f 	bl	800bc3a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800ba02:	b29a      	uxth	r2, r3
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2208      	movs	r2, #8
 800ba0c:	761a      	strb	r2, [r3, #24]

      break;
 800ba0e:	e0cf      	b.n	800bbb0 <USBH_HandleControl+0x46c>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	791b      	ldrb	r3, [r3, #4]
 800ba14:	4619      	mov	r1, r3
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f005 fb84 	bl	8011124 <USBH_LL_GetURBState>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ba20:	7bbb      	ldrb	r3, [r7, #14]
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d113      	bne.n	800ba4e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	220d      	movs	r2, #13
 800ba2a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2203      	movs	r2, #3
 800ba34:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ba44:	2200      	movs	r2, #0
 800ba46:	4619      	mov	r1, r3
 800ba48:	f002 fc62 	bl	800e310 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ba4c:	e0ad      	b.n	800bbaa <USBH_HandleControl+0x466>
      else if (URB_Status == USBH_URB_ERROR)
 800ba4e:	7bbb      	ldrb	r3, [r7, #14]
 800ba50:	2b04      	cmp	r3, #4
 800ba52:	d111      	bne.n	800ba78 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	220b      	movs	r2, #11
 800ba58:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2203      	movs	r2, #3
 800ba5e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ba6e:	2200      	movs	r2, #0
 800ba70:	4619      	mov	r1, r3
 800ba72:	f002 fc4d 	bl	800e310 <osMessagePut>
      break;
 800ba76:	e098      	b.n	800bbaa <USBH_HandleControl+0x466>
        if (URB_Status == USBH_URB_STALL)
 800ba78:	7bbb      	ldrb	r3, [r7, #14]
 800ba7a:	2b05      	cmp	r3, #5
 800ba7c:	f040 8095 	bne.w	800bbaa <USBH_HandleControl+0x466>
          status = USBH_NOT_SUPPORTED;
 800ba80:	2303      	movs	r3, #3
 800ba82:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2203      	movs	r2, #3
 800ba88:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800ba98:	2200      	movs	r2, #0
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	f002 fc38 	bl	800e310 <osMessagePut>
      break;
 800baa0:	e083      	b.n	800bbaa <USBH_HandleControl+0x466>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	795b      	ldrb	r3, [r3, #5]
 800baa6:	2201      	movs	r2, #1
 800baa8:	9200      	str	r2, [sp, #0]
 800baaa:	2200      	movs	r2, #0
 800baac:	2100      	movs	r1, #0
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 f89e 	bl	800bbf0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800baba:	b29a      	uxth	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	220a      	movs	r2, #10
 800bac4:	761a      	strb	r2, [r3, #24]
      break;
 800bac6:	e073      	b.n	800bbb0 <USBH_HandleControl+0x46c>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	795b      	ldrb	r3, [r3, #5]
 800bacc:	4619      	mov	r1, r3
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f005 fb28 	bl	8011124 <USBH_LL_GetURBState>
 800bad4:	4603      	mov	r3, r0
 800bad6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bad8:	7bbb      	ldrb	r3, [r7, #14]
 800bada:	2b01      	cmp	r3, #1
 800badc:	d113      	bne.n	800bb06 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800bade:	2300      	movs	r3, #0
 800bae0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	220d      	movs	r2, #13
 800bae6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2203      	movs	r2, #3
 800baec:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800bafc:	2200      	movs	r2, #0
 800bafe:	4619      	mov	r1, r3
 800bb00:	f002 fc06 	bl	800e310 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bb04:	e053      	b.n	800bbae <USBH_HandleControl+0x46a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bb06:	7bbb      	ldrb	r3, [r7, #14]
 800bb08:	2b02      	cmp	r3, #2
 800bb0a:	d111      	bne.n	800bb30 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2209      	movs	r2, #9
 800bb10:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2203      	movs	r2, #3
 800bb16:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800bb26:	2200      	movs	r2, #0
 800bb28:	4619      	mov	r1, r3
 800bb2a:	f002 fbf1 	bl	800e310 <osMessagePut>
      break;
 800bb2e:	e03e      	b.n	800bbae <USBH_HandleControl+0x46a>
        if (URB_Status == USBH_URB_ERROR)
 800bb30:	7bbb      	ldrb	r3, [r7, #14]
 800bb32:	2b04      	cmp	r3, #4
 800bb34:	d13b      	bne.n	800bbae <USBH_HandleControl+0x46a>
          phost->Control.state = CTRL_ERROR;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	220b      	movs	r2, #11
 800bb3a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2203      	movs	r2, #3
 800bb40:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800bb50:	2200      	movs	r2, #0
 800bb52:	4619      	mov	r1, r3
 800bb54:	f002 fbdc 	bl	800e310 <osMessagePut>
      break;
 800bb58:	e029      	b.n	800bbae <USBH_HandleControl+0x46a>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	7e5b      	ldrb	r3, [r3, #25]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	b2da      	uxtb	r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	765a      	strb	r2, [r3, #25]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	7e5b      	ldrb	r3, [r3, #25]
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d806      	bhi.n	800bb7c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2201      	movs	r2, #1
 800bb72:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2201      	movs	r2, #1
 800bb78:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bb7a:	e019      	b.n	800bbb0 <USBH_HandleControl+0x46c>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800bb82:	2106      	movs	r1, #6
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bb94:	2302      	movs	r3, #2
 800bb96:	73fb      	strb	r3, [r7, #15]
      break;
 800bb98:	e00a      	b.n	800bbb0 <USBH_HandleControl+0x46c>

    default:
      break;
 800bb9a:	bf00      	nop
 800bb9c:	e008      	b.n	800bbb0 <USBH_HandleControl+0x46c>
      break;
 800bb9e:	bf00      	nop
 800bba0:	e006      	b.n	800bbb0 <USBH_HandleControl+0x46c>
      break;
 800bba2:	bf00      	nop
 800bba4:	e004      	b.n	800bbb0 <USBH_HandleControl+0x46c>
      break;
 800bba6:	bf00      	nop
 800bba8:	e002      	b.n	800bbb0 <USBH_HandleControl+0x46c>
      break;
 800bbaa:	bf00      	nop
 800bbac:	e000      	b.n	800bbb0 <USBH_HandleControl+0x46c>
      break;
 800bbae:	bf00      	nop
  }

  return status;
 800bbb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3710      	adds	r7, #16
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop

0800bbbc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b088      	sub	sp, #32
 800bbc0:	af04      	add	r7, sp, #16
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bbca:	79f9      	ldrb	r1, [r7, #7]
 800bbcc:	2300      	movs	r3, #0
 800bbce:	9303      	str	r3, [sp, #12]
 800bbd0:	2308      	movs	r3, #8
 800bbd2:	9302      	str	r3, [sp, #8]
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	9301      	str	r3, [sp, #4]
 800bbd8:	2300      	movs	r3, #0
 800bbda:	9300      	str	r3, [sp, #0]
 800bbdc:	2300      	movs	r3, #0
 800bbde:	2200      	movs	r2, #0
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	f005 fa6e 	bl	80110c2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800bbe6:	2300      	movs	r3, #0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3710      	adds	r7, #16
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b088      	sub	sp, #32
 800bbf4:	af04      	add	r7, sp, #16
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	4611      	mov	r1, r2
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	460b      	mov	r3, r1
 800bc00:	80fb      	strh	r3, [r7, #6]
 800bc02:	4613      	mov	r3, r2
 800bc04:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d001      	beq.n	800bc14 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bc10:	2300      	movs	r3, #0
 800bc12:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc14:	7979      	ldrb	r1, [r7, #5]
 800bc16:	7e3b      	ldrb	r3, [r7, #24]
 800bc18:	9303      	str	r3, [sp, #12]
 800bc1a:	88fb      	ldrh	r3, [r7, #6]
 800bc1c:	9302      	str	r3, [sp, #8]
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	9301      	str	r3, [sp, #4]
 800bc22:	2301      	movs	r3, #1
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	2300      	movs	r3, #0
 800bc28:	2200      	movs	r2, #0
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	f005 fa49 	bl	80110c2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b088      	sub	sp, #32
 800bc3e:	af04      	add	r7, sp, #16
 800bc40:	60f8      	str	r0, [r7, #12]
 800bc42:	60b9      	str	r1, [r7, #8]
 800bc44:	4611      	mov	r1, r2
 800bc46:	461a      	mov	r2, r3
 800bc48:	460b      	mov	r3, r1
 800bc4a:	80fb      	strh	r3, [r7, #6]
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc50:	7979      	ldrb	r1, [r7, #5]
 800bc52:	2300      	movs	r3, #0
 800bc54:	9303      	str	r3, [sp, #12]
 800bc56:	88fb      	ldrh	r3, [r7, #6]
 800bc58:	9302      	str	r3, [sp, #8]
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	9301      	str	r3, [sp, #4]
 800bc5e:	2301      	movs	r3, #1
 800bc60:	9300      	str	r3, [sp, #0]
 800bc62:	2300      	movs	r3, #0
 800bc64:	2201      	movs	r2, #1
 800bc66:	68f8      	ldr	r0, [r7, #12]
 800bc68:	f005 fa2b 	bl	80110c2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bc6c:	2300      	movs	r3, #0

}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b088      	sub	sp, #32
 800bc7a:	af04      	add	r7, sp, #16
 800bc7c:	60f8      	str	r0, [r7, #12]
 800bc7e:	60b9      	str	r1, [r7, #8]
 800bc80:	4611      	mov	r1, r2
 800bc82:	461a      	mov	r2, r3
 800bc84:	460b      	mov	r3, r1
 800bc86:	80fb      	strh	r3, [r7, #6]
 800bc88:	4613      	mov	r3, r2
 800bc8a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d001      	beq.n	800bc9a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bc96:	2300      	movs	r3, #0
 800bc98:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc9a:	7979      	ldrb	r1, [r7, #5]
 800bc9c:	7e3b      	ldrb	r3, [r7, #24]
 800bc9e:	9303      	str	r3, [sp, #12]
 800bca0:	88fb      	ldrh	r3, [r7, #6]
 800bca2:	9302      	str	r3, [sp, #8]
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	9301      	str	r3, [sp, #4]
 800bca8:	2301      	movs	r3, #1
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	2302      	movs	r3, #2
 800bcae:	2200      	movs	r2, #0
 800bcb0:	68f8      	ldr	r0, [r7, #12]
 800bcb2:	f005 fa06 	bl	80110c2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bcb6:	2300      	movs	r3, #0
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3710      	adds	r7, #16
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b088      	sub	sp, #32
 800bcc4:	af04      	add	r7, sp, #16
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	60b9      	str	r1, [r7, #8]
 800bcca:	4611      	mov	r1, r2
 800bccc:	461a      	mov	r2, r3
 800bcce:	460b      	mov	r3, r1
 800bcd0:	80fb      	strh	r3, [r7, #6]
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bcd6:	7979      	ldrb	r1, [r7, #5]
 800bcd8:	2300      	movs	r3, #0
 800bcda:	9303      	str	r3, [sp, #12]
 800bcdc:	88fb      	ldrh	r3, [r7, #6]
 800bcde:	9302      	str	r3, [sp, #8]
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	9301      	str	r3, [sp, #4]
 800bce4:	2301      	movs	r3, #1
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	2302      	movs	r3, #2
 800bcea:	2201      	movs	r2, #1
 800bcec:	68f8      	ldr	r0, [r7, #12]
 800bcee:	f005 f9e8 	bl	80110c2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bcf2:	2300      	movs	r3, #0
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3710      	adds	r7, #16
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b086      	sub	sp, #24
 800bd00:	af04      	add	r7, sp, #16
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	4608      	mov	r0, r1
 800bd06:	4611      	mov	r1, r2
 800bd08:	461a      	mov	r2, r3
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	70fb      	strb	r3, [r7, #3]
 800bd0e:	460b      	mov	r3, r1
 800bd10:	70bb      	strb	r3, [r7, #2]
 800bd12:	4613      	mov	r3, r2
 800bd14:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bd16:	7878      	ldrb	r0, [r7, #1]
 800bd18:	78ba      	ldrb	r2, [r7, #2]
 800bd1a:	78f9      	ldrb	r1, [r7, #3]
 800bd1c:	8b3b      	ldrh	r3, [r7, #24]
 800bd1e:	9302      	str	r3, [sp, #8]
 800bd20:	7d3b      	ldrb	r3, [r7, #20]
 800bd22:	9301      	str	r3, [sp, #4]
 800bd24:	7c3b      	ldrb	r3, [r7, #16]
 800bd26:	9300      	str	r3, [sp, #0]
 800bd28:	4603      	mov	r3, r0
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f005 f97b 	bl	8011026 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3708      	adds	r7, #8
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}

0800bd3a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b082      	sub	sp, #8
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
 800bd42:	460b      	mov	r3, r1
 800bd44:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bd46:	78fb      	ldrb	r3, [r7, #3]
 800bd48:	4619      	mov	r1, r3
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f005 f99a 	bl	8011084 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bd50:	2300      	movs	r3, #0
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3708      	adds	r7, #8
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b084      	sub	sp, #16
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
 800bd62:	460b      	mov	r3, r1
 800bd64:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f000 f832 	bl	800bdd0 <USBH_GetFreePipe>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bd70:	89fb      	ldrh	r3, [r7, #14]
 800bd72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d009      	beq.n	800bd8e <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800bd7a:	78fb      	ldrb	r3, [r7, #3]
 800bd7c:	89fa      	ldrh	r2, [r7, #14]
 800bd7e:	f002 020f 	and.w	r2, r2, #15
 800bd82:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	32e0      	adds	r2, #224	; 0xe0
 800bd8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 800bd8e:	89fb      	ldrh	r3, [r7, #14]
 800bd90:	b2db      	uxtb	r3, r3
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bd9a:	b480      	push	{r7}
 800bd9c:	b083      	sub	sp, #12
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
 800bda2:	460b      	mov	r3, r1
 800bda4:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800bda6:	78fb      	ldrb	r3, [r7, #3]
 800bda8:	2b0a      	cmp	r3, #10
 800bdaa:	d80b      	bhi.n	800bdc4 <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bdac:	78fa      	ldrb	r2, [r7, #3]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	32e0      	adds	r2, #224	; 0xe0
 800bdb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb6:	78fa      	ldrb	r2, [r7, #3]
 800bdb8:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	32e0      	adds	r2, #224	; 0xe0
 800bdc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	370c      	adds	r7, #12
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bc80      	pop	{r7}
 800bdce:	4770      	bx	lr

0800bdd0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b085      	sub	sp, #20
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800bddc:	2300      	movs	r3, #0
 800bdde:	73fb      	strb	r3, [r7, #15]
 800bde0:	e00e      	b.n	800be00 <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bde2:	7bfa      	ldrb	r2, [r7, #15]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	32e0      	adds	r2, #224	; 0xe0
 800bde8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d102      	bne.n	800bdfa <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 800bdf4:	7bfb      	ldrb	r3, [r7, #15]
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	e007      	b.n	800be0a <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800bdfa:	7bfb      	ldrb	r3, [r7, #15]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	73fb      	strb	r3, [r7, #15]
 800be00:	7bfb      	ldrb	r3, [r7, #15]
 800be02:	2b0a      	cmp	r3, #10
 800be04:	d9ed      	bls.n	800bde2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800be06:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3714      	adds	r7, #20
 800be0e:	46bd      	mov	sp, r7
 800be10:	bc80      	pop	{r7}
 800be12:	4770      	bx	lr

0800be14 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	4603      	mov	r3, r0
 800be1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800be1e:	79fb      	ldrb	r3, [r7, #7]
 800be20:	4a08      	ldr	r2, [pc, #32]	; (800be44 <disk_status+0x30>)
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	4413      	add	r3, r2
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	79fa      	ldrb	r2, [r7, #7]
 800be2c:	4905      	ldr	r1, [pc, #20]	; (800be44 <disk_status+0x30>)
 800be2e:	440a      	add	r2, r1
 800be30:	7a12      	ldrb	r2, [r2, #8]
 800be32:	4610      	mov	r0, r2
 800be34:	4798      	blx	r3
 800be36:	4603      	mov	r3, r0
 800be38:	73fb      	strb	r3, [r7, #15]
  return stat;
 800be3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3710      	adds	r7, #16
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}
 800be44:	2000268c 	.word	0x2000268c

0800be48 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	4603      	mov	r3, r0
 800be50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800be52:	2300      	movs	r3, #0
 800be54:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800be56:	79fb      	ldrb	r3, [r7, #7]
 800be58:	4a0d      	ldr	r2, [pc, #52]	; (800be90 <disk_initialize+0x48>)
 800be5a:	5cd3      	ldrb	r3, [r2, r3]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d111      	bne.n	800be84 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800be60:	79fb      	ldrb	r3, [r7, #7]
 800be62:	4a0b      	ldr	r2, [pc, #44]	; (800be90 <disk_initialize+0x48>)
 800be64:	2101      	movs	r1, #1
 800be66:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800be68:	79fb      	ldrb	r3, [r7, #7]
 800be6a:	4a09      	ldr	r2, [pc, #36]	; (800be90 <disk_initialize+0x48>)
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	4413      	add	r3, r2
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	79fa      	ldrb	r2, [r7, #7]
 800be76:	4906      	ldr	r1, [pc, #24]	; (800be90 <disk_initialize+0x48>)
 800be78:	440a      	add	r2, r1
 800be7a:	7a12      	ldrb	r2, [r2, #8]
 800be7c:	4610      	mov	r0, r2
 800be7e:	4798      	blx	r3
 800be80:	4603      	mov	r3, r0
 800be82:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800be84:	7bfb      	ldrb	r3, [r7, #15]
}
 800be86:	4618      	mov	r0, r3
 800be88:	3710      	adds	r7, #16
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	2000268c 	.word	0x2000268c

0800be94 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800be94:	b590      	push	{r4, r7, lr}
 800be96:	b087      	sub	sp, #28
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60b9      	str	r1, [r7, #8]
 800be9c:	607a      	str	r2, [r7, #4]
 800be9e:	603b      	str	r3, [r7, #0]
 800bea0:	4603      	mov	r3, r0
 800bea2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bea4:	7bfb      	ldrb	r3, [r7, #15]
 800bea6:	4a0a      	ldr	r2, [pc, #40]	; (800bed0 <disk_read+0x3c>)
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	4413      	add	r3, r2
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	689c      	ldr	r4, [r3, #8]
 800beb0:	7bfb      	ldrb	r3, [r7, #15]
 800beb2:	4a07      	ldr	r2, [pc, #28]	; (800bed0 <disk_read+0x3c>)
 800beb4:	4413      	add	r3, r2
 800beb6:	7a18      	ldrb	r0, [r3, #8]
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	68b9      	ldr	r1, [r7, #8]
 800bebe:	47a0      	blx	r4
 800bec0:	4603      	mov	r3, r0
 800bec2:	75fb      	strb	r3, [r7, #23]
  return res;
 800bec4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	371c      	adds	r7, #28
 800beca:	46bd      	mov	sp, r7
 800becc:	bd90      	pop	{r4, r7, pc}
 800bece:	bf00      	nop
 800bed0:	2000268c 	.word	0x2000268c

0800bed4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bed4:	b590      	push	{r4, r7, lr}
 800bed6:	b087      	sub	sp, #28
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60b9      	str	r1, [r7, #8]
 800bedc:	607a      	str	r2, [r7, #4]
 800bede:	603b      	str	r3, [r7, #0]
 800bee0:	4603      	mov	r3, r0
 800bee2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bee4:	7bfb      	ldrb	r3, [r7, #15]
 800bee6:	4a0a      	ldr	r2, [pc, #40]	; (800bf10 <disk_write+0x3c>)
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	4413      	add	r3, r2
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	68dc      	ldr	r4, [r3, #12]
 800bef0:	7bfb      	ldrb	r3, [r7, #15]
 800bef2:	4a07      	ldr	r2, [pc, #28]	; (800bf10 <disk_write+0x3c>)
 800bef4:	4413      	add	r3, r2
 800bef6:	7a18      	ldrb	r0, [r3, #8]
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	68b9      	ldr	r1, [r7, #8]
 800befe:	47a0      	blx	r4
 800bf00:	4603      	mov	r3, r0
 800bf02:	75fb      	strb	r3, [r7, #23]
  return res;
 800bf04:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	371c      	adds	r7, #28
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd90      	pop	{r4, r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	2000268c 	.word	0x2000268c

0800bf14 <mem_set>:
		*d++ = *s++;
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bf14:	b480      	push	{r7}
 800bf16:	b087      	sub	sp, #28
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800bf24:	e005      	b.n	800bf32 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	1c5a      	adds	r2, r3, #1
 800bf2a:	617a      	str	r2, [r7, #20]
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	b2d2      	uxtb	r2, r2
 800bf30:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	1e5a      	subs	r2, r3, #1
 800bf36:	607a      	str	r2, [r7, #4]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d1f4      	bne.n	800bf26 <mem_set+0x12>
}
 800bf3c:	bf00      	nop
 800bf3e:	bf00      	nop
 800bf40:	371c      	adds	r7, #28
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bc80      	pop	{r7}
 800bf46:	4770      	bx	lr

0800bf48 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800bf48:	b480      	push	{r7}
 800bf4a:	b089      	sub	sp, #36	; 0x24
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	61fb      	str	r3, [r7, #28]
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800bf60:	bf00      	nop
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	1e5a      	subs	r2, r3, #1
 800bf66:	607a      	str	r2, [r7, #4]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00d      	beq.n	800bf88 <mem_cmp+0x40>
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	1c5a      	adds	r2, r3, #1
 800bf70:	61fa      	str	r2, [r7, #28]
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	4619      	mov	r1, r3
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	1c5a      	adds	r2, r3, #1
 800bf7a:	61ba      	str	r2, [r7, #24]
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	1acb      	subs	r3, r1, r3
 800bf80:	617b      	str	r3, [r7, #20]
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d0ec      	beq.n	800bf62 <mem_cmp+0x1a>
	return r;
 800bf88:	697b      	ldr	r3, [r7, #20]
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3724      	adds	r7, #36	; 0x24
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bc80      	pop	{r7}
 800bf92:	4770      	bx	lr

0800bf94 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bf9e:	e002      	b.n	800bfa6 <chk_chr+0x12>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	607b      	str	r3, [r7, #4]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d005      	beq.n	800bfba <chk_chr+0x26>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d1f2      	bne.n	800bfa0 <chk_chr+0xc>
	return *str;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	781b      	ldrb	r3, [r3, #0]
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	370c      	adds	r7, #12
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bc80      	pop	{r7}
 800bfc6:	4770      	bx	lr

0800bfc8 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f001 fff8 	bl	800dfcc <ff_req_grant>
 800bfdc:	4603      	mov	r3, r0
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}

0800bfe6 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b082      	sub	sp, #8
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
 800bfee:	460b      	mov	r3, r1
 800bff0:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d011      	beq.n	800c01c <unlock_fs+0x36>
 800bff8:	78fb      	ldrb	r3, [r7, #3]
 800bffa:	2b0c      	cmp	r3, #12
 800bffc:	d00e      	beq.n	800c01c <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 800bffe:	78fb      	ldrb	r3, [r7, #3]
 800c000:	2b0b      	cmp	r3, #11
 800c002:	d00b      	beq.n	800c01c <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 800c004:	78fb      	ldrb	r3, [r7, #3]
 800c006:	2b09      	cmp	r3, #9
 800c008:	d008      	beq.n	800c01c <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 800c00a:	78fb      	ldrb	r3, [r7, #3]
 800c00c:	2b0f      	cmp	r3, #15
 800c00e:	d005      	beq.n	800c01c <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c016:	4618      	mov	r0, r3
 800c018:	f001 ffed 	bl	800dff6 <ff_rel_grant>
	}
}
 800c01c:	bf00      	nop
 800c01e:	3708      	adds	r7, #8
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c024:	b480      	push	{r7}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c02e:	2300      	movs	r3, #0
 800c030:	60fb      	str	r3, [r7, #12]
 800c032:	e02b      	b.n	800c08c <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800c034:	4955      	ldr	r1, [pc, #340]	; (800c18c <inc_lock+0x168>)
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	4613      	mov	r3, r2
 800c03a:	005b      	lsls	r3, r3, #1
 800c03c:	4413      	add	r3, r2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	440b      	add	r3, r1
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d11b      	bne.n	800c086 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800c04e:	494f      	ldr	r1, [pc, #316]	; (800c18c <inc_lock+0x168>)
 800c050:	68fa      	ldr	r2, [r7, #12]
 800c052:	4613      	mov	r3, r2
 800c054:	005b      	lsls	r3, r3, #1
 800c056:	4413      	add	r3, r2
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	440b      	add	r3, r1
 800c05c:	3304      	adds	r3, #4
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800c066:	429a      	cmp	r2, r3
 800c068:	d10d      	bne.n	800c086 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800c06a:	4948      	ldr	r1, [pc, #288]	; (800c18c <inc_lock+0x168>)
 800c06c:	68fa      	ldr	r2, [r7, #12]
 800c06e:	4613      	mov	r3, r2
 800c070:	005b      	lsls	r3, r3, #1
 800c072:	4413      	add	r3, r2
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	440b      	add	r3, r1
 800c078:	3308      	adds	r3, #8
 800c07a:	881a      	ldrh	r2, [r3, #0]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800c082:	429a      	cmp	r2, r3
 800c084:	d006      	beq.n	800c094 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	3301      	adds	r3, #1
 800c08a:	60fb      	str	r3, [r7, #12]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d9d0      	bls.n	800c034 <inc_lock+0x10>
 800c092:	e000      	b.n	800c096 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800c094:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2b02      	cmp	r3, #2
 800c09a:	d145      	bne.n	800c128 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c09c:	2300      	movs	r3, #0
 800c09e:	60fb      	str	r3, [r7, #12]
 800c0a0:	e002      	b.n	800c0a8 <inc_lock+0x84>
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	60fb      	str	r3, [r7, #12]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d809      	bhi.n	800c0c2 <inc_lock+0x9e>
 800c0ae:	4937      	ldr	r1, [pc, #220]	; (800c18c <inc_lock+0x168>)
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	005b      	lsls	r3, r3, #1
 800c0b6:	4413      	add	r3, r2
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	440b      	add	r3, r1
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d1ef      	bne.n	800c0a2 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	d101      	bne.n	800c0cc <inc_lock+0xa8>
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	e05a      	b.n	800c182 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800c0d2:	482e      	ldr	r0, [pc, #184]	; (800c18c <inc_lock+0x168>)
 800c0d4:	68fa      	ldr	r2, [r7, #12]
 800c0d6:	4613      	mov	r3, r2
 800c0d8:	005b      	lsls	r3, r3, #1
 800c0da:	4413      	add	r3, r2
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	4403      	add	r3, r0
 800c0e0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800c0e8:	4828      	ldr	r0, [pc, #160]	; (800c18c <inc_lock+0x168>)
 800c0ea:	68fa      	ldr	r2, [r7, #12]
 800c0ec:	4613      	mov	r3, r2
 800c0ee:	005b      	lsls	r3, r3, #1
 800c0f0:	4413      	add	r3, r2
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	4403      	add	r3, r0
 800c0f6:	3304      	adds	r3, #4
 800c0f8:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800c100:	4922      	ldr	r1, [pc, #136]	; (800c18c <inc_lock+0x168>)
 800c102:	68fa      	ldr	r2, [r7, #12]
 800c104:	4613      	mov	r3, r2
 800c106:	005b      	lsls	r3, r3, #1
 800c108:	4413      	add	r3, r2
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	440b      	add	r3, r1
 800c10e:	3308      	adds	r3, #8
 800c110:	4602      	mov	r2, r0
 800c112:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800c114:	491d      	ldr	r1, [pc, #116]	; (800c18c <inc_lock+0x168>)
 800c116:	68fa      	ldr	r2, [r7, #12]
 800c118:	4613      	mov	r3, r2
 800c11a:	005b      	lsls	r3, r3, #1
 800c11c:	4413      	add	r3, r2
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	440b      	add	r3, r1
 800c122:	330a      	adds	r3, #10
 800c124:	2200      	movs	r2, #0
 800c126:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00c      	beq.n	800c148 <inc_lock+0x124>
 800c12e:	4917      	ldr	r1, [pc, #92]	; (800c18c <inc_lock+0x168>)
 800c130:	68fa      	ldr	r2, [r7, #12]
 800c132:	4613      	mov	r3, r2
 800c134:	005b      	lsls	r3, r3, #1
 800c136:	4413      	add	r3, r2
 800c138:	009b      	lsls	r3, r3, #2
 800c13a:	440b      	add	r3, r1
 800c13c:	330a      	adds	r3, #10
 800c13e:	881b      	ldrh	r3, [r3, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d001      	beq.n	800c148 <inc_lock+0x124>
 800c144:	2300      	movs	r3, #0
 800c146:	e01c      	b.n	800c182 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d10b      	bne.n	800c166 <inc_lock+0x142>
 800c14e:	490f      	ldr	r1, [pc, #60]	; (800c18c <inc_lock+0x168>)
 800c150:	68fa      	ldr	r2, [r7, #12]
 800c152:	4613      	mov	r3, r2
 800c154:	005b      	lsls	r3, r3, #1
 800c156:	4413      	add	r3, r2
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	440b      	add	r3, r1
 800c15c:	330a      	adds	r3, #10
 800c15e:	881b      	ldrh	r3, [r3, #0]
 800c160:	3301      	adds	r3, #1
 800c162:	b299      	uxth	r1, r3
 800c164:	e001      	b.n	800c16a <inc_lock+0x146>
 800c166:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c16a:	4808      	ldr	r0, [pc, #32]	; (800c18c <inc_lock+0x168>)
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	4613      	mov	r3, r2
 800c170:	005b      	lsls	r3, r3, #1
 800c172:	4413      	add	r3, r2
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	4403      	add	r3, r0
 800c178:	330a      	adds	r3, #10
 800c17a:	460a      	mov	r2, r1
 800c17c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	3301      	adds	r3, #1
}
 800c182:	4618      	mov	r0, r3
 800c184:	3714      	adds	r7, #20
 800c186:	46bd      	mov	sp, r7
 800c188:	bc80      	pop	{r7}
 800c18a:	4770      	bx	lr
 800c18c:	20002674 	.word	0x20002674

0800c190 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c190:	b480      	push	{r7}
 800c192:	b085      	sub	sp, #20
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	3b01      	subs	r3, #1
 800c19c:	607b      	str	r3, [r7, #4]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d82e      	bhi.n	800c202 <dec_lock+0x72>
		n = Files[i].ctr;
 800c1a4:	491b      	ldr	r1, [pc, #108]	; (800c214 <dec_lock+0x84>)
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	005b      	lsls	r3, r3, #1
 800c1ac:	4413      	add	r3, r2
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	440b      	add	r3, r1
 800c1b2:	330a      	adds	r3, #10
 800c1b4:	881b      	ldrh	r3, [r3, #0]
 800c1b6:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c1b8:	89fb      	ldrh	r3, [r7, #14]
 800c1ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1be:	d101      	bne.n	800c1c4 <dec_lock+0x34>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800c1c4:	89fb      	ldrh	r3, [r7, #14]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d002      	beq.n	800c1d0 <dec_lock+0x40>
 800c1ca:	89fb      	ldrh	r3, [r7, #14]
 800c1cc:	3b01      	subs	r3, #1
 800c1ce:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c1d0:	4910      	ldr	r1, [pc, #64]	; (800c214 <dec_lock+0x84>)
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	005b      	lsls	r3, r3, #1
 800c1d8:	4413      	add	r3, r2
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	440b      	add	r3, r1
 800c1de:	330a      	adds	r3, #10
 800c1e0:	89fa      	ldrh	r2, [r7, #14]
 800c1e2:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c1e4:	89fb      	ldrh	r3, [r7, #14]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d108      	bne.n	800c1fc <dec_lock+0x6c>
 800c1ea:	490a      	ldr	r1, [pc, #40]	; (800c214 <dec_lock+0x84>)
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	005b      	lsls	r3, r3, #1
 800c1f2:	4413      	add	r3, r2
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	440b      	add	r3, r1
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	737b      	strb	r3, [r7, #13]
 800c200:	e001      	b.n	800c206 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c202:	2302      	movs	r3, #2
 800c204:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c206:	7b7b      	ldrb	r3, [r7, #13]
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3714      	adds	r7, #20
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bc80      	pop	{r7}
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	20002674 	.word	0x20002674

0800c218 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c218:	b480      	push	{r7}
 800c21a:	b085      	sub	sp, #20
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c220:	2300      	movs	r3, #0
 800c222:	60fb      	str	r3, [r7, #12]
 800c224:	e016      	b.n	800c254 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c226:	4910      	ldr	r1, [pc, #64]	; (800c268 <clear_lock+0x50>)
 800c228:	68fa      	ldr	r2, [r7, #12]
 800c22a:	4613      	mov	r3, r2
 800c22c:	005b      	lsls	r3, r3, #1
 800c22e:	4413      	add	r3, r2
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	440b      	add	r3, r1
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d108      	bne.n	800c24e <clear_lock+0x36>
 800c23c:	490a      	ldr	r1, [pc, #40]	; (800c268 <clear_lock+0x50>)
 800c23e:	68fa      	ldr	r2, [r7, #12]
 800c240:	4613      	mov	r3, r2
 800c242:	005b      	lsls	r3, r3, #1
 800c244:	4413      	add	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	440b      	add	r3, r1
 800c24a:	2200      	movs	r2, #0
 800c24c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	3301      	adds	r3, #1
 800c252:	60fb      	str	r3, [r7, #12]
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	2b01      	cmp	r3, #1
 800c258:	d9e5      	bls.n	800c226 <clear_lock+0xe>
	}
}
 800c25a:	bf00      	nop
 800c25c:	bf00      	nop
 800c25e:	3714      	adds	r7, #20
 800c260:	46bd      	mov	sp, r7
 800c262:	bc80      	pop	{r7}
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	20002674 	.word	0x20002674

0800c26c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b086      	sub	sp, #24
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c274:	2300      	movs	r3, #0
 800c276:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d038      	beq.n	800c2f4 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800c288:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c290:	6879      	ldr	r1, [r7, #4]
 800c292:	2301      	movs	r3, #1
 800c294:	697a      	ldr	r2, [r7, #20]
 800c296:	f7ff fe1d 	bl	800bed4 <disk_write>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d002      	beq.n	800c2a6 <sync_window+0x3a>
			res = FR_DISK_ERR;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	73fb      	strb	r3, [r7, #15]
 800c2a4:	e026      	b.n	800c2f4 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800c2b4:	697a      	ldr	r2, [r7, #20]
 800c2b6:	1ad2      	subs	r2, r2, r3
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d218      	bcs.n	800c2f4 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800c2c8:	613b      	str	r3, [r7, #16]
 800c2ca:	e010      	b.n	800c2ee <sync_window+0x82>
					wsect += fs->fsize;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800c2d2:	697a      	ldr	r2, [r7, #20]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c2de:	6879      	ldr	r1, [r7, #4]
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	697a      	ldr	r2, [r7, #20]
 800c2e4:	f7ff fdf6 	bl	800bed4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	613b      	str	r3, [r7, #16]
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d8eb      	bhi.n	800c2cc <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800c2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3718      	adds	r7, #24
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}

0800c2fe <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b084      	sub	sp, #16
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
 800c306:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c308:	2300      	movs	r3, #0
 800c30a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800c312:	683a      	ldr	r2, [r7, #0]
 800c314:	429a      	cmp	r2, r3
 800c316:	d01b      	beq.n	800c350 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f7ff ffa7 	bl	800c26c <sync_window>
 800c31e:	4603      	mov	r3, r0
 800c320:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c322:	7bfb      	ldrb	r3, [r7, #15]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d113      	bne.n	800c350 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c32e:	6879      	ldr	r1, [r7, #4]
 800c330:	2301      	movs	r3, #1
 800c332:	683a      	ldr	r2, [r7, #0]
 800c334:	f7ff fdae 	bl	800be94 <disk_read>
 800c338:	4603      	mov	r3, r0
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d004      	beq.n	800c348 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c33e:	f04f 33ff 	mov.w	r3, #4294967295
 800c342:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c344:	2301      	movs	r3, #1
 800c346:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	683a      	ldr	r2, [r7, #0]
 800c34c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 800c350:	7bfb      	ldrb	r3, [r7, #15]
}
 800c352:	4618      	mov	r0, r3
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c35a:	b480      	push	{r7}
 800c35c:	b083      	sub	sp, #12
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
 800c362:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	3b02      	subs	r3, #2
 800c368:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c370:	3b02      	subs	r3, #2
 800c372:	683a      	ldr	r2, [r7, #0]
 800c374:	429a      	cmp	r2, r3
 800c376:	d301      	bcc.n	800c37c <clust2sect+0x22>
 800c378:	2300      	movs	r3, #0
 800c37a:	e00a      	b.n	800c392 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c382:	461a      	mov	r2, r3
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	fb03 f202 	mul.w	r2, r3, r2
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800c390:	4413      	add	r3, r2
}
 800c392:	4618      	mov	r0, r3
 800c394:	370c      	adds	r7, #12
 800c396:	46bd      	mov	sp, r7
 800c398:	bc80      	pop	{r7}
 800c39a:	4770      	bx	lr

0800c39c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b086      	sub	sp, #24
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d905      	bls.n	800c3b8 <get_fat+0x1c>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c3b2:	683a      	ldr	r2, [r7, #0]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d302      	bcc.n	800c3be <get_fat+0x22>
		val = 1;	/* Internal error */
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	617b      	str	r3, [r7, #20]
 800c3bc:	e0a3      	b.n	800c506 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c3be:	f04f 33ff 	mov.w	r3, #4294967295
 800c3c2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c3ca:	2b03      	cmp	r3, #3
 800c3cc:	d068      	beq.n	800c4a0 <get_fat+0x104>
 800c3ce:	2b03      	cmp	r3, #3
 800c3d0:	f300 808f 	bgt.w	800c4f2 <get_fat+0x156>
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d002      	beq.n	800c3de <get_fat+0x42>
 800c3d8:	2b02      	cmp	r3, #2
 800c3da:	d040      	beq.n	800c45e <get_fat+0xc2>
 800c3dc:	e089      	b.n	800c4f2 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	60fb      	str	r3, [r7, #12]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	085b      	lsrs	r3, r3, #1
 800c3e6:	68fa      	ldr	r2, [r7, #12]
 800c3e8:	4413      	add	r3, r2
 800c3ea:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	0a5b      	lsrs	r3, r3, #9
 800c3f6:	4413      	add	r3, r2
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f7ff ff7f 	bl	800c2fe <move_window>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d178      	bne.n	800c4f8 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	1c5a      	adds	r2, r3, #1
 800c40a:	60fa      	str	r2, [r7, #12]
 800c40c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	5cd3      	ldrb	r3, [r2, r3]
 800c414:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	0a5b      	lsrs	r3, r3, #9
 800c420:	4413      	add	r3, r2
 800c422:	4619      	mov	r1, r3
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f7ff ff6a 	bl	800c2fe <move_window>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d165      	bne.n	800c4fc <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	5cd3      	ldrb	r3, [r2, r3]
 800c43a:	021b      	lsls	r3, r3, #8
 800c43c:	461a      	mov	r2, r3
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	4313      	orrs	r3, r2
 800c442:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	f003 0301 	and.w	r3, r3, #1
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d002      	beq.n	800c454 <get_fat+0xb8>
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	091b      	lsrs	r3, r3, #4
 800c452:	e002      	b.n	800c45a <get_fat+0xbe>
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c45a:	617b      	str	r3, [r7, #20]
			break;
 800c45c:	e053      	b.n	800c506 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	0a1b      	lsrs	r3, r3, #8
 800c468:	4413      	add	r3, r2
 800c46a:	4619      	mov	r1, r3
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f7ff ff46 	bl	800c2fe <move_window>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	d143      	bne.n	800c500 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	005b      	lsls	r3, r3, #1
 800c47c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	4413      	add	r3, r2
 800c484:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	3301      	adds	r3, #1
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	021b      	lsls	r3, r3, #8
 800c48e:	b21a      	sxth	r2, r3
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	b21b      	sxth	r3, r3
 800c496:	4313      	orrs	r3, r2
 800c498:	b21b      	sxth	r3, r3
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	617b      	str	r3, [r7, #20]
			break;
 800c49e:	e032      	b.n	800c506 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	09db      	lsrs	r3, r3, #7
 800c4aa:	4413      	add	r3, r2
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f7ff ff25 	bl	800c2fe <move_window>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d124      	bne.n	800c504 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	009b      	lsls	r3, r3, #2
 800c4be:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	4413      	add	r3, r2
 800c4c6:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	3303      	adds	r3, #3
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	061a      	lsls	r2, r3, #24
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	3302      	adds	r3, #2
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	041b      	lsls	r3, r3, #16
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	693a      	ldr	r2, [r7, #16]
 800c4dc:	3201      	adds	r2, #1
 800c4de:	7812      	ldrb	r2, [r2, #0]
 800c4e0:	0212      	lsls	r2, r2, #8
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	693a      	ldr	r2, [r7, #16]
 800c4e6:	7812      	ldrb	r2, [r2, #0]
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c4ee:	617b      	str	r3, [r7, #20]
			break;
 800c4f0:	e009      	b.n	800c506 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	617b      	str	r3, [r7, #20]
 800c4f6:	e006      	b.n	800c506 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c4f8:	bf00      	nop
 800c4fa:	e004      	b.n	800c506 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c4fc:	bf00      	nop
 800c4fe:	e002      	b.n	800c506 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c500:	bf00      	nop
 800c502:	e000      	b.n	800c506 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c504:	bf00      	nop
		}
	}

	return val;
 800c506:	697b      	ldr	r3, [r7, #20]
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3718      	adds	r7, #24
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b088      	sub	sp, #32
 800c514:	af00      	add	r7, sp, #0
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	60b9      	str	r1, [r7, #8]
 800c51a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d905      	bls.n	800c52e <put_fat+0x1e>
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d302      	bcc.n	800c534 <put_fat+0x24>
		res = FR_INT_ERR;
 800c52e:	2302      	movs	r3, #2
 800c530:	77fb      	strb	r3, [r7, #31]
 800c532:	e0f6      	b.n	800c722 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c53a:	2b03      	cmp	r3, #3
 800c53c:	f000 809e 	beq.w	800c67c <put_fat+0x16c>
 800c540:	2b03      	cmp	r3, #3
 800c542:	f300 80e4 	bgt.w	800c70e <put_fat+0x1fe>
 800c546:	2b01      	cmp	r3, #1
 800c548:	d002      	beq.n	800c550 <put_fat+0x40>
 800c54a:	2b02      	cmp	r3, #2
 800c54c:	d06f      	beq.n	800c62e <put_fat+0x11e>
 800c54e:	e0de      	b.n	800c70e <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	617b      	str	r3, [r7, #20]
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	085b      	lsrs	r3, r3, #1
 800c558:	697a      	ldr	r2, [r7, #20]
 800c55a:	4413      	add	r3, r2
 800c55c:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	0a5b      	lsrs	r3, r3, #9
 800c568:	4413      	add	r3, r2
 800c56a:	4619      	mov	r1, r3
 800c56c:	68f8      	ldr	r0, [r7, #12]
 800c56e:	f7ff fec6 	bl	800c2fe <move_window>
 800c572:	4603      	mov	r3, r0
 800c574:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c576:	7ffb      	ldrb	r3, [r7, #31]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	f040 80cb 	bne.w	800c714 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	1c5a      	adds	r2, r3, #1
 800c582:	617a      	str	r2, [r7, #20]
 800c584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c588:	68fa      	ldr	r2, [r7, #12]
 800c58a:	4413      	add	r3, r2
 800c58c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	f003 0301 	and.w	r3, r3, #1
 800c594:	2b00      	cmp	r3, #0
 800c596:	d00d      	beq.n	800c5b4 <put_fat+0xa4>
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	b25b      	sxtb	r3, r3
 800c59e:	f003 030f 	and.w	r3, r3, #15
 800c5a2:	b25a      	sxtb	r2, r3
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	b2db      	uxtb	r3, r3
 800c5a8:	011b      	lsls	r3, r3, #4
 800c5aa:	b25b      	sxtb	r3, r3
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	b25b      	sxtb	r3, r3
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	e001      	b.n	800c5b8 <put_fat+0xa8>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	69ba      	ldr	r2, [r7, #24]
 800c5ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	0a5b      	lsrs	r3, r3, #9
 800c5ce:	4413      	add	r3, r2
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	68f8      	ldr	r0, [r7, #12]
 800c5d4:	f7ff fe93 	bl	800c2fe <move_window>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c5dc:	7ffb      	ldrb	r3, [r7, #31]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	f040 809a 	bne.w	800c718 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5ea:	68fa      	ldr	r2, [r7, #12]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	f003 0301 	and.w	r3, r3, #1
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d003      	beq.n	800c602 <put_fat+0xf2>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	091b      	lsrs	r3, r3, #4
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	e00e      	b.n	800c620 <put_fat+0x110>
 800c602:	69bb      	ldr	r3, [r7, #24]
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	b25b      	sxtb	r3, r3
 800c608:	f023 030f 	bic.w	r3, r3, #15
 800c60c:	b25a      	sxtb	r2, r3
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	0a1b      	lsrs	r3, r3, #8
 800c612:	b25b      	sxtb	r3, r3
 800c614:	f003 030f 	and.w	r3, r3, #15
 800c618:	b25b      	sxtb	r3, r3
 800c61a:	4313      	orrs	r3, r2
 800c61c:	b25b      	sxtb	r3, r3
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	69ba      	ldr	r2, [r7, #24]
 800c622:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2201      	movs	r2, #1
 800c628:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800c62c:	e079      	b.n	800c722 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	0a1b      	lsrs	r3, r3, #8
 800c638:	4413      	add	r3, r2
 800c63a:	4619      	mov	r1, r3
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f7ff fe5e 	bl	800c2fe <move_window>
 800c642:	4603      	mov	r3, r0
 800c644:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c646:	7ffb      	ldrb	r3, [r7, #31]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d167      	bne.n	800c71c <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	005b      	lsls	r3, r3, #1
 800c650:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c654:	68fa      	ldr	r2, [r7, #12]
 800c656:	4413      	add	r3, r2
 800c658:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	b2da      	uxtb	r2, r3
 800c65e:	69bb      	ldr	r3, [r7, #24]
 800c660:	701a      	strb	r2, [r3, #0]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	b29b      	uxth	r3, r3
 800c666:	0a1b      	lsrs	r3, r3, #8
 800c668:	b29a      	uxth	r2, r3
 800c66a:	69bb      	ldr	r3, [r7, #24]
 800c66c:	3301      	adds	r3, #1
 800c66e:	b2d2      	uxtb	r2, r2
 800c670:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2201      	movs	r2, #1
 800c676:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800c67a:	e052      	b.n	800c722 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	09db      	lsrs	r3, r3, #7
 800c686:	4413      	add	r3, r2
 800c688:	4619      	mov	r1, r3
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f7ff fe37 	bl	800c2fe <move_window>
 800c690:	4603      	mov	r3, r0
 800c692:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c694:	7ffb      	ldrb	r3, [r7, #31]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d142      	bne.n	800c720 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	009b      	lsls	r3, r3, #2
 800c69e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c6a2:	68fa      	ldr	r2, [r7, #12]
 800c6a4:	4413      	add	r3, r2
 800c6a6:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800c6a8:	69bb      	ldr	r3, [r7, #24]
 800c6aa:	3303      	adds	r3, #3
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	061a      	lsls	r2, r3, #24
 800c6b0:	69bb      	ldr	r3, [r7, #24]
 800c6b2:	3302      	adds	r3, #2
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	041b      	lsls	r3, r3, #16
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	69ba      	ldr	r2, [r7, #24]
 800c6bc:	3201      	adds	r2, #1
 800c6be:	7812      	ldrb	r2, [r2, #0]
 800c6c0:	0212      	lsls	r2, r2, #8
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	69ba      	ldr	r2, [r7, #24]
 800c6c6:	7812      	ldrb	r2, [r2, #0]
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	b2da      	uxtb	r2, r3
 800c6d8:	69bb      	ldr	r3, [r7, #24]
 800c6da:	701a      	strb	r2, [r3, #0]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	0a1b      	lsrs	r3, r3, #8
 800c6e2:	b29a      	uxth	r2, r3
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	b2d2      	uxtb	r2, r2
 800c6ea:	701a      	strb	r2, [r3, #0]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	0c1a      	lsrs	r2, r3, #16
 800c6f0:	69bb      	ldr	r3, [r7, #24]
 800c6f2:	3302      	adds	r3, #2
 800c6f4:	b2d2      	uxtb	r2, r2
 800c6f6:	701a      	strb	r2, [r3, #0]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	0e1a      	lsrs	r2, r3, #24
 800c6fc:	69bb      	ldr	r3, [r7, #24]
 800c6fe:	3303      	adds	r3, #3
 800c700:	b2d2      	uxtb	r2, r2
 800c702:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2201      	movs	r2, #1
 800c708:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800c70c:	e009      	b.n	800c722 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800c70e:	2302      	movs	r3, #2
 800c710:	77fb      	strb	r3, [r7, #31]
 800c712:	e006      	b.n	800c722 <put_fat+0x212>
			if (res != FR_OK) break;
 800c714:	bf00      	nop
 800c716:	e004      	b.n	800c722 <put_fat+0x212>
			if (res != FR_OK) break;
 800c718:	bf00      	nop
 800c71a:	e002      	b.n	800c722 <put_fat+0x212>
			if (res != FR_OK) break;
 800c71c:	bf00      	nop
 800c71e:	e000      	b.n	800c722 <put_fat+0x212>
			if (res != FR_OK) break;
 800c720:	bf00      	nop
		}
	}

	return res;
 800c722:	7ffb      	ldrb	r3, [r7, #31]
}
 800c724:	4618      	mov	r0, r3
 800c726:	3720      	adds	r7, #32
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b086      	sub	sp, #24
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d10f      	bne.n	800c75c <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c742:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d005      	beq.n	800c756 <create_chain+0x2a>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c750:	693a      	ldr	r2, [r7, #16]
 800c752:	429a      	cmp	r2, r3
 800c754:	d31c      	bcc.n	800c790 <create_chain+0x64>
 800c756:	2301      	movs	r3, #1
 800c758:	613b      	str	r3, [r7, #16]
 800c75a:	e019      	b.n	800c790 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800c75c:	6839      	ldr	r1, [r7, #0]
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f7ff fe1c 	bl	800c39c <get_fat>
 800c764:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d801      	bhi.n	800c770 <create_chain+0x44>
 800c76c:	2301      	movs	r3, #1
 800c76e:	e076      	b.n	800c85e <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c776:	d101      	bne.n	800c77c <create_chain+0x50>
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	e070      	b.n	800c85e <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c782:	68ba      	ldr	r2, [r7, #8]
 800c784:	429a      	cmp	r2, r3
 800c786:	d201      	bcs.n	800c78c <create_chain+0x60>
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	e068      	b.n	800c85e <create_chain+0x132>
		scl = clst;
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	3301      	adds	r3, #1
 800c798:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c7a0:	697a      	ldr	r2, [r7, #20]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d307      	bcc.n	800c7b6 <create_chain+0x8a>
			ncl = 2;
 800c7a6:	2302      	movs	r3, #2
 800c7a8:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800c7aa:	697a      	ldr	r2, [r7, #20]
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d901      	bls.n	800c7b6 <create_chain+0x8a>
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	e053      	b.n	800c85e <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800c7b6:	6979      	ldr	r1, [r7, #20]
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f7ff fdef 	bl	800c39c <get_fat>
 800c7be:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d00e      	beq.n	800c7e4 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7cc:	d002      	beq.n	800c7d4 <create_chain+0xa8>
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d101      	bne.n	800c7d8 <create_chain+0xac>
			return cs;
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	e042      	b.n	800c85e <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800c7d8:	697a      	ldr	r2, [r7, #20]
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d1d9      	bne.n	800c794 <create_chain+0x68>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	e03c      	b.n	800c85e <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800c7e4:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800c7e6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800c7ea:	6979      	ldr	r1, [r7, #20]
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f7ff fe8f 	bl	800c510 <put_fat>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800c7f6:	7bfb      	ldrb	r3, [r7, #15]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d109      	bne.n	800c810 <create_chain+0xe4>
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d006      	beq.n	800c810 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800c802:	697a      	ldr	r2, [r7, #20]
 800c804:	6839      	ldr	r1, [r7, #0]
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f7ff fe82 	bl	800c510 <put_fat>
 800c80c:	4603      	mov	r3, r0
 800c80e:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800c810:	7bfb      	ldrb	r3, [r7, #15]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d11a      	bne.n	800c84c <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	697a      	ldr	r2, [r7, #20]
 800c81a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c828:	d018      	beq.n	800c85c <create_chain+0x130>
			fs->free_clust--;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c830:	1e5a      	subs	r2, r3, #1
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800c83e:	f043 0301 	orr.w	r3, r3, #1
 800c842:	b2da      	uxtb	r2, r3
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800c84a:	e007      	b.n	800c85c <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800c84c:	7bfb      	ldrb	r3, [r7, #15]
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d102      	bne.n	800c858 <create_chain+0x12c>
 800c852:	f04f 33ff 	mov.w	r3, #4294967295
 800c856:	e000      	b.n	800c85a <create_chain+0x12e>
 800c858:	2301      	movs	r3, #1
 800c85a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800c85c:	697b      	ldr	r3, [r7, #20]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3718      	adds	r7, #24
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}

0800c866 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800c866:	b580      	push	{r7, lr}
 800c868:	b086      	sub	sp, #24
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	6078      	str	r0, [r7, #4]
 800c86e:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	b29a      	uxth	r2, r3
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c880:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	2b01      	cmp	r3, #1
 800c886:	d007      	beq.n	800c898 <dir_sdi+0x32>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c88e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c892:	697a      	ldr	r2, [r7, #20]
 800c894:	429a      	cmp	r2, r3
 800c896:	d301      	bcc.n	800c89c <dir_sdi+0x36>
		return FR_INT_ERR;
 800c898:	2302      	movs	r3, #2
 800c89a:	e074      	b.n	800c986 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d10c      	bne.n	800c8bc <dir_sdi+0x56>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c8a8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c8ac:	2b03      	cmp	r3, #3
 800c8ae:	d105      	bne.n	800c8bc <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c8b6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800c8ba:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d111      	bne.n	800c8e6 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c8c8:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d301      	bcc.n	800c8d8 <dir_sdi+0x72>
			return FR_INT_ERR;
 800c8d4:	2302      	movs	r3, #2
 800c8d6:	e056      	b.n	800c986 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c8de:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800c8e2:	613b      	str	r3, [r7, #16]
 800c8e4:	e032      	b.n	800c94c <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c8ec:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c8f0:	011b      	lsls	r3, r3, #4
 800c8f2:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800c8f4:	e01e      	b.n	800c934 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c8fc:	6979      	ldr	r1, [r7, #20]
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7ff fd4c 	bl	800c39c <get_fat>
 800c904:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c90c:	d101      	bne.n	800c912 <dir_sdi+0xac>
 800c90e:	2301      	movs	r3, #1
 800c910:	e039      	b.n	800c986 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	2b01      	cmp	r3, #1
 800c916:	d907      	bls.n	800c928 <dir_sdi+0xc2>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c91e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c922:	697a      	ldr	r2, [r7, #20]
 800c924:	429a      	cmp	r2, r3
 800c926:	d301      	bcc.n	800c92c <dir_sdi+0xc6>
				return FR_INT_ERR;
 800c928:	2302      	movs	r3, #2
 800c92a:	e02c      	b.n	800c986 <dir_sdi+0x120>
			idx -= ic;
 800c92c:	683a      	ldr	r2, [r7, #0]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	1ad3      	subs	r3, r2, r3
 800c932:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800c934:	683a      	ldr	r2, [r7, #0]
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d2dc      	bcs.n	800c8f6 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c942:	6979      	ldr	r1, [r7, #20]
 800c944:	4618      	mov	r0, r3
 800c946:	f7ff fd08 	bl	800c35a <clust2sect>
 800c94a:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	697a      	ldr	r2, [r7, #20]
 800c950:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d101      	bne.n	800c95e <dir_sdi+0xf8>
 800c95a:	2302      	movs	r3, #2
 800c95c:	e013      	b.n	800c986 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	091a      	lsrs	r2, r3, #4
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	441a      	add	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c972:	461a      	mov	r2, r3
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	f003 030f 	and.w	r3, r3, #15
 800c97a:	015b      	lsls	r3, r3, #5
 800c97c:	441a      	add	r2, r3
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800c984:	2300      	movs	r3, #0
}
 800c986:	4618      	mov	r0, r3
 800c988:	3718      	adds	r7, #24
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c98e:	b590      	push	{r4, r7, lr}
 800c990:	b087      	sub	sp, #28
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
 800c996:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800c99e:	3301      	adds	r3, #1
 800c9a0:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d004      	beq.n	800c9b4 <dir_next+0x26>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d101      	bne.n	800c9b8 <dir_next+0x2a>
		return FR_NO_FILE;
 800c9b4:	2304      	movs	r3, #4
 800c9b6:	e0dd      	b.n	800cb74 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f003 030f 	and.w	r3, r3, #15
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	f040 80c6 	bne.w	800cb50 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c9ca:	1c5a      	adds	r2, r3, #1
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d10b      	bne.n	800c9f4 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c9e2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	f0c0 80b0 	bcc.w	800cb50 <dir_next+0x1c2>
				return FR_NO_FILE;
 800c9f0:	2304      	movs	r3, #4
 800c9f2:	e0bf      	b.n	800cb74 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	091b      	lsrs	r3, r3, #4
 800c9f8:	687a      	ldr	r2, [r7, #4]
 800c9fa:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800c9fe:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800ca02:	3a01      	subs	r2, #1
 800ca04:	4013      	ands	r3, r2
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	f040 80a2 	bne.w	800cb50 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ca18:	4619      	mov	r1, r3
 800ca1a:	4610      	mov	r0, r2
 800ca1c:	f7ff fcbe 	bl	800c39c <get_fat>
 800ca20:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d801      	bhi.n	800ca2c <dir_next+0x9e>
 800ca28:	2302      	movs	r3, #2
 800ca2a:	e0a3      	b.n	800cb74 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca32:	d101      	bne.n	800ca38 <dir_next+0xaa>
 800ca34:	2301      	movs	r3, #1
 800ca36:	e09d      	b.n	800cb74 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ca3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ca42:	697a      	ldr	r2, [r7, #20]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d374      	bcc.n	800cb32 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d101      	bne.n	800ca52 <dir_next+0xc4>
 800ca4e:	2304      	movs	r3, #4
 800ca50:	e090      	b.n	800cb74 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ca5e:	4619      	mov	r1, r3
 800ca60:	4610      	mov	r0, r2
 800ca62:	f7ff fe63 	bl	800c72c <create_chain>
 800ca66:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d101      	bne.n	800ca72 <dir_next+0xe4>
 800ca6e:	2307      	movs	r3, #7
 800ca70:	e080      	b.n	800cb74 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d101      	bne.n	800ca7c <dir_next+0xee>
 800ca78:	2302      	movs	r3, #2
 800ca7a:	e07b      	b.n	800cb74 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca82:	d101      	bne.n	800ca88 <dir_next+0xfa>
 800ca84:	2301      	movs	r3, #1
 800ca86:	e075      	b.n	800cb74 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7ff fbec 	bl	800c26c <sync_window>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d001      	beq.n	800ca9e <dir_next+0x110>
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	e06a      	b.n	800cb74 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800caa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800caa8:	2100      	movs	r1, #0
 800caaa:	4618      	mov	r0, r3
 800caac:	f7ff fa32 	bl	800bf14 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800cabc:	6979      	ldr	r1, [r7, #20]
 800cabe:	4610      	mov	r0, r2
 800cac0:	f7ff fc4b 	bl	800c35a <clust2sect>
 800cac4:	4603      	mov	r3, r0
 800cac6:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800caca:	2300      	movs	r3, #0
 800cacc:	613b      	str	r3, [r7, #16]
 800cace:	e01b      	b.n	800cb08 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cad6:	2201      	movs	r2, #1
 800cad8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7ff fbc2 	bl	800c26c <sync_window>
 800cae8:	4603      	mov	r3, r0
 800caea:	2b00      	cmp	r3, #0
 800caec:	d001      	beq.n	800caf2 <dir_next+0x164>
 800caee:	2301      	movs	r3, #1
 800caf0:	e040      	b.n	800cb74 <dir_next+0x1e6>
						dp->fs->winsect++;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800caf8:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 800cafc:	3201      	adds	r2, #1
 800cafe:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	3301      	adds	r3, #1
 800cb06:	613b      	str	r3, [r7, #16]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cb0e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800cb12:	461a      	mov	r2, r3
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d3da      	bcc.n	800cad0 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cb20:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cb2a:	693a      	ldr	r2, [r7, #16]
 800cb2c:	1a8a      	subs	r2, r1, r2
 800cb2e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	697a      	ldr	r2, [r7, #20]
 800cb36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cb40:	6979      	ldr	r1, [r7, #20]
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7ff fc09 	bl	800c35a <clust2sect>
 800cb48:	4602      	mov	r2, r0
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	b29a      	uxth	r2, r3
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cb60:	461a      	mov	r2, r3
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f003 030f 	and.w	r3, r3, #15
 800cb68:	015b      	lsls	r3, r3, #5
 800cb6a:	441a      	add	r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800cb72:	2300      	movs	r3, #0
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	371c      	adds	r7, #28
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd90      	pop	{r4, r7, pc}

0800cb7c <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b085      	sub	sp, #20
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	331b      	adds	r3, #27
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	021b      	lsls	r3, r3, #8
 800cb8e:	b21a      	sxth	r2, r3
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	331a      	adds	r3, #26
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	b21b      	sxth	r3, r3
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	b21b      	sxth	r3, r3
 800cb9c:	b29b      	uxth	r3, r3
 800cb9e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cba6:	2b03      	cmp	r3, #3
 800cba8:	d10f      	bne.n	800cbca <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	3315      	adds	r3, #21
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	021b      	lsls	r3, r3, #8
 800cbb2:	b21a      	sxth	r2, r3
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	3314      	adds	r3, #20
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	b21b      	sxth	r3, r3
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	b21b      	sxth	r3, r3
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	041b      	lsls	r3, r3, #16
 800cbc4:	68fa      	ldr	r2, [r7, #12]
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	60fb      	str	r3, [r7, #12]

	return cl;
 800cbca:	68fb      	ldr	r3, [r7, #12]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3714      	adds	r7, #20
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bc80      	pop	{r7}
 800cbd4:	4770      	bx	lr

0800cbd6 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800cbd6:	b580      	push	{r7, lr}
 800cbd8:	b086      	sub	sp, #24
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cbde:	2100      	movs	r1, #0
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f7ff fe40 	bl	800c866 <dir_sdi>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cbea:	7dfb      	ldrb	r3, [r7, #23]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d001      	beq.n	800cbf4 <dir_find+0x1e>
 800cbf0:	7dfb      	ldrb	r3, [r7, #23]
 800cbf2:	e03b      	b.n	800cc6c <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800cc00:	4619      	mov	r1, r3
 800cc02:	4610      	mov	r0, r2
 800cc04:	f7ff fb7b 	bl	800c2fe <move_window>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cc0c:	7dfb      	ldrb	r3, [r7, #23]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d128      	bne.n	800cc64 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cc18:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cc20:	7bfb      	ldrb	r3, [r7, #15]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d102      	bne.n	800cc2c <dir_find+0x56>
 800cc26:	2304      	movs	r3, #4
 800cc28:	75fb      	strb	r3, [r7, #23]
 800cc2a:	e01e      	b.n	800cc6a <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	330b      	adds	r3, #11
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	f003 0308 	and.w	r3, r3, #8
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d10a      	bne.n	800cc50 <dir_find+0x7a>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800cc40:	220b      	movs	r2, #11
 800cc42:	4619      	mov	r1, r3
 800cc44:	6938      	ldr	r0, [r7, #16]
 800cc46:	f7ff f97f 	bl	800bf48 <mem_cmp>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d00b      	beq.n	800cc68 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800cc50:	2100      	movs	r1, #0
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f7ff fe9b 	bl	800c98e <dir_next>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cc5c:	7dfb      	ldrb	r3, [r7, #23]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d0c8      	beq.n	800cbf4 <dir_find+0x1e>
 800cc62:	e002      	b.n	800cc6a <dir_find+0x94>
		if (res != FR_OK) break;
 800cc64:	bf00      	nop
 800cc66:	e000      	b.n	800cc6a <dir_find+0x94>
			break;
 800cc68:	bf00      	nop

	return res;
 800cc6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3718      	adds	r7, #24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b086      	sub	sp, #24
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 800cc7e:	2304      	movs	r3, #4
 800cc80:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 800cc82:	e03f      	b.n	800cd04 <dir_read+0x90>
		res = move_window(dp->fs, dp->sect);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800cc90:	4619      	mov	r1, r3
 800cc92:	4610      	mov	r0, r2
 800cc94:	f7ff fb33 	bl	800c2fe <move_window>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cc9c:	7dfb      	ldrb	r3, [r7, #23]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d136      	bne.n	800cd10 <dir_read+0x9c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cca8:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ccb0:	7bfb      	ldrb	r3, [r7, #15]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d102      	bne.n	800ccbc <dir_read+0x48>
 800ccb6:	2304      	movs	r3, #4
 800ccb8:	75fb      	strb	r3, [r7, #23]
 800ccba:	e02e      	b.n	800cd1a <dir_read+0xa6>
		a = dir[DIR_Attr] & AM_MASK;
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	330b      	adds	r3, #11
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ccc6:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 800ccc8:	7bfb      	ldrb	r3, [r7, #15]
 800ccca:	2be5      	cmp	r3, #229	; 0xe5
 800cccc:	d011      	beq.n	800ccf2 <dir_read+0x7e>
 800ccce:	7bfb      	ldrb	r3, [r7, #15]
 800ccd0:	2b2e      	cmp	r3, #46	; 0x2e
 800ccd2:	d00e      	beq.n	800ccf2 <dir_read+0x7e>
 800ccd4:	7bbb      	ldrb	r3, [r7, #14]
 800ccd6:	2b0f      	cmp	r3, #15
 800ccd8:	d00b      	beq.n	800ccf2 <dir_read+0x7e>
 800ccda:	7bbb      	ldrb	r3, [r7, #14]
 800ccdc:	f023 0320 	bic.w	r3, r3, #32
 800cce0:	2b08      	cmp	r3, #8
 800cce2:	bf0c      	ite	eq
 800cce4:	2301      	moveq	r3, #1
 800cce6:	2300      	movne	r3, #0
 800cce8:	b2db      	uxtb	r3, r3
 800ccea:	461a      	mov	r2, r3
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d010      	beq.n	800cd14 <dir_read+0xa0>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 800ccf2:	2100      	movs	r1, #0
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f7ff fe4a 	bl	800c98e <dir_next>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ccfe:	7dfb      	ldrb	r3, [r7, #23]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d109      	bne.n	800cd18 <dir_read+0xa4>
	while (dp->sect) {
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d1ba      	bne.n	800cc84 <dir_read+0x10>
 800cd0e:	e004      	b.n	800cd1a <dir_read+0xa6>
		if (res != FR_OK) break;
 800cd10:	bf00      	nop
 800cd12:	e002      	b.n	800cd1a <dir_read+0xa6>
			break;
 800cd14:	bf00      	nop
 800cd16:	e000      	b.n	800cd1a <dir_read+0xa6>
		if (res != FR_OK) break;
 800cd18:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 800cd1a:	7dfb      	ldrb	r3, [r7, #23]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d003      	beq.n	800cd28 <dir_read+0xb4>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2200      	movs	r2, #0
 800cd24:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return res;
 800cd28:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3718      	adds	r7, #24
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}

0800cd32 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800cd32:	b480      	push	{r7}
 800cd34:	b087      	sub	sp, #28
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	6078      	str	r0, [r7, #4]
 800cd3a:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	3309      	adds	r3, #9
 800cd40:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d05a      	beq.n	800ce02 <get_fileinfo+0xd0>
		dir = dp->dir;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cd52:	60bb      	str	r3, [r7, #8]
		i = 0;
 800cd54:	2300      	movs	r3, #0
 800cd56:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 800cd58:	e01c      	b.n	800cd94 <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	1c5a      	adds	r2, r3, #1
 800cd5e:	617a      	str	r2, [r7, #20]
 800cd60:	68ba      	ldr	r2, [r7, #8]
 800cd62:	4413      	add	r3, r2
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 800cd68:	7bfb      	ldrb	r3, [r7, #15]
 800cd6a:	2b20      	cmp	r3, #32
 800cd6c:	d100      	bne.n	800cd70 <get_fileinfo+0x3e>
 800cd6e:	e011      	b.n	800cd94 <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cd70:	7bfb      	ldrb	r3, [r7, #15]
 800cd72:	2b05      	cmp	r3, #5
 800cd74:	d101      	bne.n	800cd7a <get_fileinfo+0x48>
 800cd76:	23e5      	movs	r3, #229	; 0xe5
 800cd78:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	2b09      	cmp	r3, #9
 800cd7e:	d104      	bne.n	800cd8a <get_fileinfo+0x58>
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	1c5a      	adds	r2, r3, #1
 800cd84:	613a      	str	r2, [r7, #16]
 800cd86:	222e      	movs	r2, #46	; 0x2e
 800cd88:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	1c5a      	adds	r2, r3, #1
 800cd8e:	613a      	str	r2, [r7, #16]
 800cd90:	7bfa      	ldrb	r2, [r7, #15]
 800cd92:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	2b0a      	cmp	r3, #10
 800cd98:	d9df      	bls.n	800cd5a <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	7ada      	ldrb	r2, [r3, #11]
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	331f      	adds	r3, #31
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	061a      	lsls	r2, r3, #24
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	331e      	adds	r3, #30
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	041b      	lsls	r3, r3, #16
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	68ba      	ldr	r2, [r7, #8]
 800cdb6:	321d      	adds	r2, #29
 800cdb8:	7812      	ldrb	r2, [r2, #0]
 800cdba:	0212      	lsls	r2, r2, #8
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	68ba      	ldr	r2, [r7, #8]
 800cdc0:	321c      	adds	r2, #28
 800cdc2:	7812      	ldrb	r2, [r2, #0]
 800cdc4:	431a      	orrs	r2, r3
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	3319      	adds	r3, #25
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	021b      	lsls	r3, r3, #8
 800cdd2:	b21a      	sxth	r2, r3
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	3318      	adds	r3, #24
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	b21b      	sxth	r3, r3
 800cddc:	4313      	orrs	r3, r2
 800cdde:	b21b      	sxth	r3, r3
 800cde0:	b29a      	uxth	r2, r3
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	3317      	adds	r3, #23
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	021b      	lsls	r3, r3, #8
 800cdee:	b21a      	sxth	r2, r3
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	3316      	adds	r3, #22
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	b21b      	sxth	r3, r3
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	b21b      	sxth	r3, r3
 800cdfc:	b29a      	uxth	r2, r3
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	2200      	movs	r2, #0
 800ce06:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 800ce08:	bf00      	nop
 800ce0a:	371c      	adds	r7, #28
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bc80      	pop	{r7}
 800ce10:	4770      	bx	lr
	...

0800ce14 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b088      	sub	sp, #32
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	60fb      	str	r3, [r7, #12]
 800ce24:	e002      	b.n	800ce2c <create_name+0x18>
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	3301      	adds	r3, #1
 800ce2a:	60fb      	str	r3, [r7, #12]
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	2b2f      	cmp	r3, #47	; 0x2f
 800ce32:	d0f8      	beq.n	800ce26 <create_name+0x12>
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	2b5c      	cmp	r3, #92	; 0x5c
 800ce3a:	d0f4      	beq.n	800ce26 <create_name+0x12>
	sfn = dp->fn;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ce42:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ce44:	220b      	movs	r2, #11
 800ce46:	2120      	movs	r1, #32
 800ce48:	68b8      	ldr	r0, [r7, #8]
 800ce4a:	f7ff f863 	bl	800bf14 <mem_set>
	si = i = b = 0; ni = 8;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	77fb      	strb	r3, [r7, #31]
 800ce52:	2300      	movs	r3, #0
 800ce54:	613b      	str	r3, [r7, #16]
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	617b      	str	r3, [r7, #20]
 800ce5a:	2308      	movs	r3, #8
 800ce5c:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	1c5a      	adds	r2, r3, #1
 800ce62:	617a      	str	r2, [r7, #20]
 800ce64:	68fa      	ldr	r2, [r7, #12]
 800ce66:	4413      	add	r3, r2
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800ce6c:	7fbb      	ldrb	r3, [r7, #30]
 800ce6e:	2b20      	cmp	r3, #32
 800ce70:	d953      	bls.n	800cf1a <create_name+0x106>
 800ce72:	7fbb      	ldrb	r3, [r7, #30]
 800ce74:	2b2f      	cmp	r3, #47	; 0x2f
 800ce76:	d050      	beq.n	800cf1a <create_name+0x106>
 800ce78:	7fbb      	ldrb	r3, [r7, #30]
 800ce7a:	2b5c      	cmp	r3, #92	; 0x5c
 800ce7c:	d04d      	beq.n	800cf1a <create_name+0x106>
		if (c == '.' || i >= ni) {
 800ce7e:	7fbb      	ldrb	r3, [r7, #30]
 800ce80:	2b2e      	cmp	r3, #46	; 0x2e
 800ce82:	d003      	beq.n	800ce8c <create_name+0x78>
 800ce84:	693a      	ldr	r2, [r7, #16]
 800ce86:	69bb      	ldr	r3, [r7, #24]
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d30f      	bcc.n	800ceac <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800ce8c:	69bb      	ldr	r3, [r7, #24]
 800ce8e:	2b08      	cmp	r3, #8
 800ce90:	d102      	bne.n	800ce98 <create_name+0x84>
 800ce92:	7fbb      	ldrb	r3, [r7, #30]
 800ce94:	2b2e      	cmp	r3, #46	; 0x2e
 800ce96:	d001      	beq.n	800ce9c <create_name+0x88>
 800ce98:	2306      	movs	r3, #6
 800ce9a:	e073      	b.n	800cf84 <create_name+0x170>
			i = 8; ni = 11;
 800ce9c:	2308      	movs	r3, #8
 800ce9e:	613b      	str	r3, [r7, #16]
 800cea0:	230b      	movs	r3, #11
 800cea2:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800cea4:	7ffb      	ldrb	r3, [r7, #31]
 800cea6:	009b      	lsls	r3, r3, #2
 800cea8:	77fb      	strb	r3, [r7, #31]
 800ceaa:	e035      	b.n	800cf18 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ceac:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	da08      	bge.n	800cec6 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800ceb4:	7ffb      	ldrb	r3, [r7, #31]
 800ceb6:	f043 0303 	orr.w	r3, r3, #3
 800ceba:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800cebc:	7fbb      	ldrb	r3, [r7, #30]
 800cebe:	3b80      	subs	r3, #128	; 0x80
 800cec0:	4a32      	ldr	r2, [pc, #200]	; (800cf8c <create_name+0x178>)
 800cec2:	5cd3      	ldrb	r3, [r2, r3]
 800cec4:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800cec6:	7fbb      	ldrb	r3, [r7, #30]
 800cec8:	4619      	mov	r1, r3
 800ceca:	4831      	ldr	r0, [pc, #196]	; (800cf90 <create_name+0x17c>)
 800cecc:	f7ff f862 	bl	800bf94 <chk_chr>
 800ced0:	4603      	mov	r3, r0
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d001      	beq.n	800ceda <create_name+0xc6>
				return FR_INVALID_NAME;
 800ced6:	2306      	movs	r3, #6
 800ced8:	e054      	b.n	800cf84 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800ceda:	7fbb      	ldrb	r3, [r7, #30]
 800cedc:	2b40      	cmp	r3, #64	; 0x40
 800cede:	d907      	bls.n	800cef0 <create_name+0xdc>
 800cee0:	7fbb      	ldrb	r3, [r7, #30]
 800cee2:	2b5a      	cmp	r3, #90	; 0x5a
 800cee4:	d804      	bhi.n	800cef0 <create_name+0xdc>
				b |= 2;
 800cee6:	7ffb      	ldrb	r3, [r7, #31]
 800cee8:	f043 0302 	orr.w	r3, r3, #2
 800ceec:	77fb      	strb	r3, [r7, #31]
 800ceee:	e00c      	b.n	800cf0a <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800cef0:	7fbb      	ldrb	r3, [r7, #30]
 800cef2:	2b60      	cmp	r3, #96	; 0x60
 800cef4:	d909      	bls.n	800cf0a <create_name+0xf6>
 800cef6:	7fbb      	ldrb	r3, [r7, #30]
 800cef8:	2b7a      	cmp	r3, #122	; 0x7a
 800cefa:	d806      	bhi.n	800cf0a <create_name+0xf6>
					b |= 1; c -= 0x20;
 800cefc:	7ffb      	ldrb	r3, [r7, #31]
 800cefe:	f043 0301 	orr.w	r3, r3, #1
 800cf02:	77fb      	strb	r3, [r7, #31]
 800cf04:	7fbb      	ldrb	r3, [r7, #30]
 800cf06:	3b20      	subs	r3, #32
 800cf08:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	1c5a      	adds	r2, r3, #1
 800cf0e:	613a      	str	r2, [r7, #16]
 800cf10:	68ba      	ldr	r2, [r7, #8]
 800cf12:	4413      	add	r3, r2
 800cf14:	7fba      	ldrb	r2, [r7, #30]
 800cf16:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800cf18:	e7a1      	b.n	800ce5e <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800cf1a:	68fa      	ldr	r2, [r7, #12]
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	441a      	add	r2, r3
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800cf24:	7fbb      	ldrb	r3, [r7, #30]
 800cf26:	2b20      	cmp	r3, #32
 800cf28:	d801      	bhi.n	800cf2e <create_name+0x11a>
 800cf2a:	2304      	movs	r3, #4
 800cf2c:	e000      	b.n	800cf30 <create_name+0x11c>
 800cf2e:	2300      	movs	r3, #0
 800cf30:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d101      	bne.n	800cf3c <create_name+0x128>
 800cf38:	2306      	movs	r3, #6
 800cf3a:	e023      	b.n	800cf84 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	2be5      	cmp	r3, #229	; 0xe5
 800cf42:	d102      	bne.n	800cf4a <create_name+0x136>
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	2205      	movs	r2, #5
 800cf48:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	2b08      	cmp	r3, #8
 800cf4e:	d102      	bne.n	800cf56 <create_name+0x142>
 800cf50:	7ffb      	ldrb	r3, [r7, #31]
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800cf56:	7ffb      	ldrb	r3, [r7, #31]
 800cf58:	f003 0303 	and.w	r3, r3, #3
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d103      	bne.n	800cf68 <create_name+0x154>
 800cf60:	7fbb      	ldrb	r3, [r7, #30]
 800cf62:	f043 0310 	orr.w	r3, r3, #16
 800cf66:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800cf68:	7ffb      	ldrb	r3, [r7, #31]
 800cf6a:	f003 030c 	and.w	r3, r3, #12
 800cf6e:	2b04      	cmp	r3, #4
 800cf70:	d103      	bne.n	800cf7a <create_name+0x166>
 800cf72:	7fbb      	ldrb	r3, [r7, #30]
 800cf74:	f043 0308 	orr.w	r3, r3, #8
 800cf78:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	330b      	adds	r3, #11
 800cf7e:	7fba      	ldrb	r2, [r7, #30]
 800cf80:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cf82:	2300      	movs	r3, #0
#endif
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3720      	adds	r7, #32
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}
 800cf8c:	08015d4c 	.word	0x08015d4c
 800cf90:	08015ce4 	.word	0x08015ce4

0800cf94 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	2b2f      	cmp	r3, #47	; 0x2f
 800cfa4:	d003      	beq.n	800cfae <follow_path+0x1a>
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	2b5c      	cmp	r3, #92	; 0x5c
 800cfac:	d102      	bne.n	800cfb4 <follow_path+0x20>
		path++;
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	2b1f      	cmp	r3, #31
 800cfc2:	d80a      	bhi.n	800cfda <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800cfc4:	2100      	movs	r1, #0
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f7ff fc4d 	bl	800c866 <dir_sdi>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800cfd8:	e045      	b.n	800d066 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cfda:	463b      	mov	r3, r7
 800cfdc:	4619      	mov	r1, r3
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f7ff ff18 	bl	800ce14 <create_name>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800cfe8:	7bfb      	ldrb	r3, [r7, #15]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d136      	bne.n	800d05c <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f7ff fdf1 	bl	800cbd6 <dir_find>
 800cff4:	4603      	mov	r3, r0
 800cff6:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800cffe:	7adb      	ldrb	r3, [r3, #11]
 800d000:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800d002:	7bfb      	ldrb	r3, [r7, #15]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d00a      	beq.n	800d01e <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d008:	7bfb      	ldrb	r3, [r7, #15]
 800d00a:	2b04      	cmp	r3, #4
 800d00c:	d128      	bne.n	800d060 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d00e:	7bbb      	ldrb	r3, [r7, #14]
 800d010:	f003 0304 	and.w	r3, r3, #4
 800d014:	2b00      	cmp	r3, #0
 800d016:	d123      	bne.n	800d060 <follow_path+0xcc>
 800d018:	2305      	movs	r3, #5
 800d01a:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800d01c:	e020      	b.n	800d060 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d01e:	7bbb      	ldrb	r3, [r7, #14]
 800d020:	f003 0304 	and.w	r3, r3, #4
 800d024:	2b00      	cmp	r3, #0
 800d026:	d11d      	bne.n	800d064 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d02e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	330b      	adds	r3, #11
 800d034:	781b      	ldrb	r3, [r3, #0]
 800d036:	f003 0310 	and.w	r3, r3, #16
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d102      	bne.n	800d044 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800d03e:	2305      	movs	r3, #5
 800d040:	73fb      	strb	r3, [r7, #15]
 800d042:	e010      	b.n	800d066 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d04a:	68b9      	ldr	r1, [r7, #8]
 800d04c:	4618      	mov	r0, r3
 800d04e:	f7ff fd95 	bl	800cb7c <ld_clust>
 800d052:	4602      	mov	r2, r0
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d05a:	e7be      	b.n	800cfda <follow_path+0x46>
			if (res != FR_OK) break;
 800d05c:	bf00      	nop
 800d05e:	e002      	b.n	800d066 <follow_path+0xd2>
				break;
 800d060:	bf00      	nop
 800d062:	e000      	b.n	800d066 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d064:	bf00      	nop
		}
	}

	return res;
 800d066:	7bfb      	ldrb	r3, [r7, #15]
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3710      	adds	r7, #16
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d070:	b480      	push	{r7}
 800d072:	b087      	sub	sp, #28
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d078:	f04f 33ff 	mov.w	r3, #4294967295
 800d07c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d031      	beq.n	800d0ea <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	617b      	str	r3, [r7, #20]
 800d08c:	e002      	b.n	800d094 <get_ldnumber+0x24>
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	3301      	adds	r3, #1
 800d092:	617b      	str	r3, [r7, #20]
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	2b20      	cmp	r3, #32
 800d09a:	d903      	bls.n	800d0a4 <get_ldnumber+0x34>
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	2b3a      	cmp	r3, #58	; 0x3a
 800d0a2:	d1f4      	bne.n	800d08e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	2b3a      	cmp	r3, #58	; 0x3a
 800d0aa:	d11c      	bne.n	800d0e6 <get_ldnumber+0x76>
			tp = *path;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	1c5a      	adds	r2, r3, #1
 800d0b6:	60fa      	str	r2, [r7, #12]
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	3b30      	subs	r3, #48	; 0x30
 800d0bc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	2b09      	cmp	r3, #9
 800d0c2:	d80e      	bhi.n	800d0e2 <get_ldnumber+0x72>
 800d0c4:	68fa      	ldr	r2, [r7, #12]
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d10a      	bne.n	800d0e2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d107      	bne.n	800d0e2 <get_ldnumber+0x72>
					vol = (int)i;
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	3301      	adds	r3, #1
 800d0da:	617b      	str	r3, [r7, #20]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	697a      	ldr	r2, [r7, #20]
 800d0e0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	e002      	b.n	800d0ec <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d0ea:	693b      	ldr	r3, [r7, #16]
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	371c      	adds	r7, #28
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bc80      	pop	{r7}
 800d0f4:	4770      	bx	lr
	...

0800d0f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2200      	movs	r2, #0
 800d106:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f04f 32ff 	mov.w	r2, #4294967295
 800d110:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800d114:	6839      	ldr	r1, [r7, #0]
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f7ff f8f1 	bl	800c2fe <move_window>
 800d11c:	4603      	mov	r3, r0
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d001      	beq.n	800d126 <check_fs+0x2e>
		return 3;
 800d122:	2303      	movs	r3, #3
 800d124:	e04a      	b.n	800d1bc <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d12c:	3301      	adds	r3, #1
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	021b      	lsls	r3, r3, #8
 800d132:	b21a      	sxth	r2, r3
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800d13a:	b21b      	sxth	r3, r3
 800d13c:	4313      	orrs	r3, r2
 800d13e:	b21b      	sxth	r3, r3
 800d140:	4a20      	ldr	r2, [pc, #128]	; (800d1c4 <check_fs+0xcc>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d001      	beq.n	800d14a <check_fs+0x52>
		return 2;
 800d146:	2302      	movs	r3, #2
 800d148:	e038      	b.n	800d1bc <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	3336      	adds	r3, #54	; 0x36
 800d14e:	3303      	adds	r3, #3
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	061a      	lsls	r2, r3, #24
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	3336      	adds	r3, #54	; 0x36
 800d158:	3302      	adds	r3, #2
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	041b      	lsls	r3, r3, #16
 800d15e:	4313      	orrs	r3, r2
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	3236      	adds	r2, #54	; 0x36
 800d164:	3201      	adds	r2, #1
 800d166:	7812      	ldrb	r2, [r2, #0]
 800d168:	0212      	lsls	r2, r2, #8
 800d16a:	4313      	orrs	r3, r2
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800d172:	4313      	orrs	r3, r2
 800d174:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d178:	4a13      	ldr	r2, [pc, #76]	; (800d1c8 <check_fs+0xd0>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d101      	bne.n	800d182 <check_fs+0x8a>
		return 0;
 800d17e:	2300      	movs	r3, #0
 800d180:	e01c      	b.n	800d1bc <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	3352      	adds	r3, #82	; 0x52
 800d186:	3303      	adds	r3, #3
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	061a      	lsls	r2, r3, #24
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	3352      	adds	r3, #82	; 0x52
 800d190:	3302      	adds	r3, #2
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	041b      	lsls	r3, r3, #16
 800d196:	4313      	orrs	r3, r2
 800d198:	687a      	ldr	r2, [r7, #4]
 800d19a:	3252      	adds	r2, #82	; 0x52
 800d19c:	3201      	adds	r2, #1
 800d19e:	7812      	ldrb	r2, [r2, #0]
 800d1a0:	0212      	lsls	r2, r2, #8
 800d1a2:	4313      	orrs	r3, r2
 800d1a4:	687a      	ldr	r2, [r7, #4]
 800d1a6:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800d1aa:	4313      	orrs	r3, r2
 800d1ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d1b0:	4a05      	ldr	r2, [pc, #20]	; (800d1c8 <check_fs+0xd0>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d101      	bne.n	800d1ba <check_fs+0xc2>
		return 0;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	e000      	b.n	800d1bc <check_fs+0xc4>

	return 1;
 800d1ba:	2301      	movs	r3, #1
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3708      	adds	r7, #8
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	ffffaa55 	.word	0xffffaa55
 800d1c8:	00544146 	.word	0x00544146

0800d1cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b096      	sub	sp, #88	; 0x58
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	60f8      	str	r0, [r7, #12]
 800d1d4:	60b9      	str	r1, [r7, #8]
 800d1d6:	4613      	mov	r3, r2
 800d1d8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d1e0:	68b8      	ldr	r0, [r7, #8]
 800d1e2:	f7ff ff45 	bl	800d070 <get_ldnumber>
 800d1e6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d1e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	da01      	bge.n	800d1f2 <find_volume+0x26>
 800d1ee:	230b      	movs	r3, #11
 800d1f0:	e2b2      	b.n	800d758 <find_volume+0x58c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d1f2:	4aa2      	ldr	r2, [pc, #648]	; (800d47c <find_volume+0x2b0>)
 800d1f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1fa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d101      	bne.n	800d206 <find_volume+0x3a>
 800d202:	230c      	movs	r3, #12
 800d204:	e2a8      	b.n	800d758 <find_volume+0x58c>

	ENTER_FF(fs);						/* Lock the volume */
 800d206:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d208:	f7fe fede 	bl	800bfc8 <lock_fs>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d101      	bne.n	800d216 <find_volume+0x4a>
 800d212:	230f      	movs	r3, #15
 800d214:	e2a0      	b.n	800d758 <find_volume+0x58c>
	*rfs = fs;							/* Return pointer to the file system object */
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d21a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800d21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d222:	2b00      	cmp	r3, #0
 800d224:	d01b      	beq.n	800d25e <find_volume+0x92>
		stat = disk_status(fs->drv);
 800d226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d228:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d22c:	4618      	mov	r0, r3
 800d22e:	f7fe fdf1 	bl	800be14 <disk_status>
 800d232:	4603      	mov	r3, r0
 800d234:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d238:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d23c:	f003 0301 	and.w	r3, r3, #1
 800d240:	2b00      	cmp	r3, #0
 800d242:	d10c      	bne.n	800d25e <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800d244:	79fb      	ldrb	r3, [r7, #7]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d007      	beq.n	800d25a <find_volume+0x8e>
 800d24a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d24e:	f003 0304 	and.w	r3, r3, #4
 800d252:	2b00      	cmp	r3, #0
 800d254:	d001      	beq.n	800d25a <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 800d256:	230a      	movs	r3, #10
 800d258:	e27e      	b.n	800d758 <find_volume+0x58c>
			return FR_OK;				/* The file system object is valid */
 800d25a:	2300      	movs	r3, #0
 800d25c:	e27c      	b.n	800d758 <find_volume+0x58c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d260:	2200      	movs	r2, #0
 800d262:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d268:	b2da      	uxtb	r2, r3
 800d26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d26c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d272:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d276:	4618      	mov	r0, r3
 800d278:	f7fe fde6 	bl	800be48 <disk_initialize>
 800d27c:	4603      	mov	r3, r0
 800d27e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800d282:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d286:	f003 0301 	and.w	r3, r3, #1
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d001      	beq.n	800d292 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d28e:	2303      	movs	r3, #3
 800d290:	e262      	b.n	800d758 <find_volume+0x58c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800d292:	79fb      	ldrb	r3, [r7, #7]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d007      	beq.n	800d2a8 <find_volume+0xdc>
 800d298:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d29c:	f003 0304 	and.w	r3, r3, #4
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d001      	beq.n	800d2a8 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800d2a4:	230a      	movs	r3, #10
 800d2a6:	e257      	b.n	800d758 <find_volume+0x58c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800d2ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d2ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d2b0:	f7ff ff22 	bl	800d0f8 <check_fs>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800d2ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d2be:	2b01      	cmp	r3, #1
 800d2c0:	d155      	bne.n	800d36e <find_volume+0x1a2>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	643b      	str	r3, [r7, #64]	; 0x40
 800d2c6:	e029      	b.n	800d31c <find_volume+0x150>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800d2c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2cc:	011b      	lsls	r3, r3, #4
 800d2ce:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d2d2:	4413      	add	r3, r2
 800d2d4:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800d2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d8:	3304      	adds	r3, #4
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d012      	beq.n	800d306 <find_volume+0x13a>
 800d2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e2:	330b      	adds	r3, #11
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	061a      	lsls	r2, r3, #24
 800d2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ea:	330a      	adds	r3, #10
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	041b      	lsls	r3, r3, #16
 800d2f0:	4313      	orrs	r3, r2
 800d2f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2f4:	3209      	adds	r2, #9
 800d2f6:	7812      	ldrb	r2, [r2, #0]
 800d2f8:	0212      	lsls	r2, r2, #8
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2fe:	3208      	adds	r2, #8
 800d300:	7812      	ldrb	r2, [r2, #0]
 800d302:	431a      	orrs	r2, r3
 800d304:	e000      	b.n	800d308 <find_volume+0x13c>
 800d306:	2200      	movs	r2, #0
 800d308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d30a:	009b      	lsls	r3, r3, #2
 800d30c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d310:	440b      	add	r3, r1
 800d312:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800d316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d318:	3301      	adds	r3, #1
 800d31a:	643b      	str	r3, [r7, #64]	; 0x40
 800d31c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d31e:	2b03      	cmp	r3, #3
 800d320:	d9d2      	bls.n	800d2c8 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800d322:	2300      	movs	r3, #0
 800d324:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d002      	beq.n	800d332 <find_volume+0x166>
 800d32c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d32e:	3b01      	subs	r3, #1
 800d330:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800d332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d334:	009b      	lsls	r3, r3, #2
 800d336:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d33a:	4413      	add	r3, r2
 800d33c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d340:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800d342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d344:	2b00      	cmp	r3, #0
 800d346:	d005      	beq.n	800d354 <find_volume+0x188>
 800d348:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d34a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d34c:	f7ff fed4 	bl	800d0f8 <check_fs>
 800d350:	4603      	mov	r3, r0
 800d352:	e000      	b.n	800d356 <find_volume+0x18a>
 800d354:	2302      	movs	r3, #2
 800d356:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800d35a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d005      	beq.n	800d36e <find_volume+0x1a2>
 800d362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d364:	3301      	adds	r3, #1
 800d366:	643b      	str	r3, [r7, #64]	; 0x40
 800d368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d36a:	2b03      	cmp	r3, #3
 800d36c:	d9e1      	bls.n	800d332 <find_volume+0x166>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d36e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d372:	2b03      	cmp	r3, #3
 800d374:	d101      	bne.n	800d37a <find_volume+0x1ae>
 800d376:	2301      	movs	r3, #1
 800d378:	e1ee      	b.n	800d758 <find_volume+0x58c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800d37a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d001      	beq.n	800d386 <find_volume+0x1ba>
 800d382:	230d      	movs	r3, #13
 800d384:	e1e8      	b.n	800d758 <find_volume+0x58c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d388:	7b1b      	ldrb	r3, [r3, #12]
 800d38a:	021b      	lsls	r3, r3, #8
 800d38c:	b21a      	sxth	r2, r3
 800d38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d390:	7adb      	ldrb	r3, [r3, #11]
 800d392:	b21b      	sxth	r3, r3
 800d394:	4313      	orrs	r3, r2
 800d396:	b21b      	sxth	r3, r3
 800d398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d39c:	d001      	beq.n	800d3a2 <find_volume+0x1d6>
		return FR_NO_FILESYSTEM;
 800d39e:	230d      	movs	r3, #13
 800d3a0:	e1da      	b.n	800d758 <find_volume+0x58c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800d3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a4:	7ddb      	ldrb	r3, [r3, #23]
 800d3a6:	021b      	lsls	r3, r3, #8
 800d3a8:	b21a      	sxth	r2, r3
 800d3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ac:	7d9b      	ldrb	r3, [r3, #22]
 800d3ae:	b21b      	sxth	r3, r3
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	b21b      	sxth	r3, r3
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800d3b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d112      	bne.n	800d3e4 <find_volume+0x218>
 800d3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800d3c4:	061a      	lsls	r2, r3, #24
 800d3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d3cc:	041b      	lsls	r3, r3, #16
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3d2:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800d3d6:	0212      	lsls	r2, r2, #8
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3dc:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800d3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d3e8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800d3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ee:	7c1a      	ldrb	r2, [r3, #16]
 800d3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f2:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800d3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d006      	beq.n	800d40e <find_volume+0x242>
 800d400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d402:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800d406:	2b02      	cmp	r3, #2
 800d408:	d001      	beq.n	800d40e <find_volume+0x242>
		return FR_NO_FILESYSTEM;
 800d40a:	230d      	movs	r3, #13
 800d40c:	e1a4      	b.n	800d758 <find_volume+0x58c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800d40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d410:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800d414:	461a      	mov	r2, r3
 800d416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d418:	fb02 f303 	mul.w	r3, r2, r3
 800d41c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800d41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d420:	7b5a      	ldrb	r2, [r3, #13]
 800d422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d424:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800d428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d42a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d00a      	beq.n	800d448 <find_volume+0x27c>
 800d432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d434:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800d438:	461a      	mov	r2, r3
 800d43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800d440:	3b01      	subs	r3, #1
 800d442:	4013      	ands	r3, r2
 800d444:	2b00      	cmp	r3, #0
 800d446:	d001      	beq.n	800d44c <find_volume+0x280>
		return FR_NO_FILESYSTEM;
 800d448:	230d      	movs	r3, #13
 800d44a:	e185      	b.n	800d758 <find_volume+0x58c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800d44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d44e:	7c9b      	ldrb	r3, [r3, #18]
 800d450:	021b      	lsls	r3, r3, #8
 800d452:	b21a      	sxth	r2, r3
 800d454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d456:	7c5b      	ldrb	r3, [r3, #17]
 800d458:	b21b      	sxth	r3, r3
 800d45a:	4313      	orrs	r3, r2
 800d45c:	b21b      	sxth	r3, r3
 800d45e:	b29a      	uxth	r2, r3
 800d460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d462:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800d466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d468:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800d46c:	f003 030f 	and.w	r3, r3, #15
 800d470:	b29b      	uxth	r3, r3
 800d472:	2b00      	cmp	r3, #0
 800d474:	d004      	beq.n	800d480 <find_volume+0x2b4>
		return FR_NO_FILESYSTEM;
 800d476:	230d      	movs	r3, #13
 800d478:	e16e      	b.n	800d758 <find_volume+0x58c>
 800d47a:	bf00      	nop
 800d47c:	2000266c 	.word	0x2000266c

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800d480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d482:	7d1b      	ldrb	r3, [r3, #20]
 800d484:	021b      	lsls	r3, r3, #8
 800d486:	b21a      	sxth	r2, r3
 800d488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48a:	7cdb      	ldrb	r3, [r3, #19]
 800d48c:	b21b      	sxth	r3, r3
 800d48e:	4313      	orrs	r3, r2
 800d490:	b21b      	sxth	r3, r3
 800d492:	b29b      	uxth	r3, r3
 800d494:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800d496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d112      	bne.n	800d4c2 <find_volume+0x2f6>
 800d49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d49e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d4a2:	061a      	lsls	r2, r3, #24
 800d4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d4aa:	041b      	lsls	r3, r3, #16
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4b0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800d4b4:	0212      	lsls	r2, r2, #8
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4ba:	f892 2020 	ldrb.w	r2, [r2, #32]
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800d4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c4:	7bdb      	ldrb	r3, [r3, #15]
 800d4c6:	021b      	lsls	r3, r3, #8
 800d4c8:	b21a      	sxth	r2, r3
 800d4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4cc:	7b9b      	ldrb	r3, [r3, #14]
 800d4ce:	b21b      	sxth	r3, r3
 800d4d0:	4313      	orrs	r3, r2
 800d4d2:	b21b      	sxth	r3, r3
 800d4d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800d4d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d101      	bne.n	800d4e0 <find_volume+0x314>
 800d4dc:	230d      	movs	r3, #13
 800d4de:	e13b      	b.n	800d758 <find_volume+0x58c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800d4e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d4e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4e4:	4413      	add	r3, r2
 800d4e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4e8:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800d4ec:	0912      	lsrs	r2, r2, #4
 800d4ee:	b292      	uxth	r2, r2
 800d4f0:	4413      	add	r3, r2
 800d4f2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d4f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d201      	bcs.n	800d500 <find_volume+0x334>
 800d4fc:	230d      	movs	r3, #13
 800d4fe:	e12b      	b.n	800d758 <find_volume+0x58c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800d500:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d504:	1ad3      	subs	r3, r2, r3
 800d506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d508:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800d50c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d510:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800d512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d514:	2b00      	cmp	r3, #0
 800d516:	d101      	bne.n	800d51c <find_volume+0x350>
 800d518:	230d      	movs	r3, #13
 800d51a:	e11d      	b.n	800d758 <find_volume+0x58c>
	fmt = FS_FAT12;
 800d51c:	2301      	movs	r3, #1
 800d51e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800d522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d524:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d528:	4293      	cmp	r3, r2
 800d52a:	d902      	bls.n	800d532 <find_volume+0x366>
 800d52c:	2302      	movs	r3, #2
 800d52e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800d532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d534:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d538:	4293      	cmp	r3, r2
 800d53a:	d902      	bls.n	800d542 <find_volume+0x376>
 800d53c:	2303      	movs	r3, #3
 800d53e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800d542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d544:	1c9a      	adds	r2, r3, #2
 800d546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d548:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 800d54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d54e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d550:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800d554:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d558:	441a      	add	r2, r3
 800d55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 800d560:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d564:	441a      	add	r2, r3
 800d566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d568:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 800d56c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d570:	2b03      	cmp	r3, #3
 800d572:	d121      	bne.n	800d5b8 <find_volume+0x3ec>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800d574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d576:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d001      	beq.n	800d582 <find_volume+0x3b6>
 800d57e:	230d      	movs	r3, #13
 800d580:	e0ea      	b.n	800d758 <find_volume+0x58c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800d582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d584:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d588:	061a      	lsls	r2, r3, #24
 800d58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d590:	041b      	lsls	r3, r3, #16
 800d592:	4313      	orrs	r3, r2
 800d594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d596:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800d59a:	0212      	lsls	r2, r2, #8
 800d59c:	4313      	orrs	r3, r2
 800d59e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5a0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800d5a4:	431a      	orrs	r2, r3
 800d5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800d5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	647b      	str	r3, [r7, #68]	; 0x44
 800d5b6:	e025      	b.n	800d604 <find_volume+0x438>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800d5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ba:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d101      	bne.n	800d5c6 <find_volume+0x3fa>
 800d5c2:	230d      	movs	r3, #13
 800d5c4:	e0c8      	b.n	800d758 <find_volume+0x58c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800d5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c8:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800d5cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5ce:	441a      	add	r2, r3
 800d5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d2:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d5d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d5da:	2b02      	cmp	r3, #2
 800d5dc:	d104      	bne.n	800d5e8 <find_volume+0x41c>
 800d5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d5e4:	005b      	lsls	r3, r3, #1
 800d5e6:	e00c      	b.n	800d602 <find_volume+0x436>
 800d5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ea:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	005b      	lsls	r3, r3, #1
 800d5f2:	4413      	add	r3, r2
 800d5f4:	085a      	lsrs	r2, r3, #1
 800d5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d5fc:	f003 0301 	and.w	r3, r3, #1
 800d600:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800d602:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800d604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d606:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800d60a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d60c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d610:	0a5b      	lsrs	r3, r3, #9
 800d612:	429a      	cmp	r2, r3
 800d614:	d201      	bcs.n	800d61a <find_volume+0x44e>
		return FR_NO_FILESYSTEM;
 800d616:	230d      	movs	r3, #13
 800d618:	e09e      	b.n	800d758 <find_volume+0x58c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800d61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d61c:	f04f 32ff 	mov.w	r2, #4294967295
 800d620:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800d624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d626:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800d62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d62c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800d630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d632:	2280      	movs	r2, #128	; 0x80
 800d634:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800d638:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d63c:	2b03      	cmp	r3, #3
 800d63e:	d177      	bne.n	800d730 <find_volume+0x564>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800d640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d642:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d646:	021b      	lsls	r3, r3, #8
 800d648:	b21a      	sxth	r2, r3
 800d64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d650:	b21b      	sxth	r3, r3
 800d652:	4313      	orrs	r3, r2
 800d654:	b21b      	sxth	r3, r3
 800d656:	2b01      	cmp	r3, #1
 800d658:	d16a      	bne.n	800d730 <find_volume+0x564>
		&& move_window(fs, bsect + 1) == FR_OK)
 800d65a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d65c:	3301      	adds	r3, #1
 800d65e:	4619      	mov	r1, r3
 800d660:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d662:	f7fe fe4c 	bl	800c2fe <move_window>
 800d666:	4603      	mov	r3, r0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d161      	bne.n	800d730 <find_volume+0x564>
	{
		fs->fsi_flag = 0;
 800d66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66e:	2200      	movs	r2, #0
 800d670:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d676:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800d67a:	021b      	lsls	r3, r3, #8
 800d67c:	b21a      	sxth	r2, r3
 800d67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d680:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800d684:	b21b      	sxth	r3, r3
 800d686:	4313      	orrs	r3, r2
 800d688:	b21b      	sxth	r3, r3
 800d68a:	4a35      	ldr	r2, [pc, #212]	; (800d760 <find_volume+0x594>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d14f      	bne.n	800d730 <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800d690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d692:	78db      	ldrb	r3, [r3, #3]
 800d694:	061a      	lsls	r2, r3, #24
 800d696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d698:	789b      	ldrb	r3, [r3, #2]
 800d69a:	041b      	lsls	r3, r3, #16
 800d69c:	4313      	orrs	r3, r2
 800d69e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6a0:	7852      	ldrb	r2, [r2, #1]
 800d6a2:	0212      	lsls	r2, r2, #8
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6a8:	7812      	ldrb	r2, [r2, #0]
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	4a2d      	ldr	r2, [pc, #180]	; (800d764 <find_volume+0x598>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d13e      	bne.n	800d730 <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800d6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b4:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800d6b8:	061a      	lsls	r2, r3, #24
 800d6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6bc:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800d6c0:	041b      	lsls	r3, r3, #16
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6c6:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800d6ca:	0212      	lsls	r2, r2, #8
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6d0:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800d6d4:	4313      	orrs	r3, r2
 800d6d6:	4a24      	ldr	r2, [pc, #144]	; (800d768 <find_volume+0x59c>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d129      	bne.n	800d730 <find_volume+0x564>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800d6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6de:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800d6e2:	061a      	lsls	r2, r3, #24
 800d6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e6:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800d6ea:	041b      	lsls	r3, r3, #16
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6f0:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800d6f4:	0212      	lsls	r2, r2, #8
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6fa:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800d6fe:	431a      	orrs	r2, r3
 800d700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d702:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800d706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d708:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800d70c:	061a      	lsls	r2, r3, #24
 800d70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d710:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800d714:	041b      	lsls	r3, r3, #16
 800d716:	4313      	orrs	r3, r2
 800d718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d71a:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800d71e:	0212      	lsls	r2, r2, #8
 800d720:	4313      	orrs	r3, r2
 800d722:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d724:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800d728:	431a      	orrs	r2, r3
 800d72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d72c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800d730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d732:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d736:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800d73a:	4b0c      	ldr	r3, [pc, #48]	; (800d76c <find_volume+0x5a0>)
 800d73c:	881b      	ldrh	r3, [r3, #0]
 800d73e:	3301      	adds	r3, #1
 800d740:	b29a      	uxth	r2, r3
 800d742:	4b0a      	ldr	r3, [pc, #40]	; (800d76c <find_volume+0x5a0>)
 800d744:	801a      	strh	r2, [r3, #0]
 800d746:	4b09      	ldr	r3, [pc, #36]	; (800d76c <find_volume+0x5a0>)
 800d748:	881a      	ldrh	r2, [r3, #0]
 800d74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d74c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800d750:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d752:	f7fe fd61 	bl	800c218 <clear_lock>
#endif

	return FR_OK;
 800d756:	2300      	movs	r3, #0
}
 800d758:	4618      	mov	r0, r3
 800d75a:	3758      	adds	r7, #88	; 0x58
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}
 800d760:	ffffaa55 	.word	0xffffaa55
 800d764:	41615252 	.word	0x41615252
 800d768:	61417272 	.word	0x61417272
 800d76c:	20002670 	.word	0x20002670

0800d770 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d022      	beq.n	800d7c8 <validate+0x58>
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d01d      	beq.n	800d7c8 <validate+0x58>
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d792:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d796:	2b00      	cmp	r3, #0
 800d798:	d016      	beq.n	800d7c8 <validate+0x58>
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d7a0:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	d10c      	bne.n	800d7c8 <validate+0x58>
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d7b4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7fe fb2b 	bl	800be14 <disk_status>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	f003 0301 	and.w	r3, r3, #1
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d001      	beq.n	800d7cc <validate+0x5c>
		return FR_INVALID_OBJECT;
 800d7c8:	2309      	movs	r3, #9
 800d7ca:	e00b      	b.n	800d7e4 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7fe fbf8 	bl	800bfc8 <lock_fs>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d101      	bne.n	800d7e2 <validate+0x72>
 800d7de:	230f      	movs	r3, #15
 800d7e0:	e000      	b.n	800d7e4 <validate+0x74>

	return FR_OK;
 800d7e2:	2300      	movs	r3, #0
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3710      	adds	r7, #16
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b088      	sub	sp, #32
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	4613      	mov	r3, r2
 800d7f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800d7fe:	f107 0310 	add.w	r3, r7, #16
 800d802:	4618      	mov	r0, r3
 800d804:	f7ff fc34 	bl	800d070 <get_ldnumber>
 800d808:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	da01      	bge.n	800d814 <f_mount+0x28>
 800d810:	230b      	movs	r3, #11
 800d812:	e04c      	b.n	800d8ae <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d814:	4a28      	ldr	r2, [pc, #160]	; (800d8b8 <f_mount+0xcc>)
 800d816:	69fb      	ldr	r3, [r7, #28]
 800d818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d81c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d81e:	69bb      	ldr	r3, [r7, #24]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d011      	beq.n	800d848 <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 800d824:	69b8      	ldr	r0, [r7, #24]
 800d826:	f7fe fcf7 	bl	800c218 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800d82a:	69bb      	ldr	r3, [r7, #24]
 800d82c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d830:	4618      	mov	r0, r3
 800d832:	f000 fbbf 	bl	800dfb4 <ff_del_syncobj>
 800d836:	4603      	mov	r3, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d101      	bne.n	800d840 <f_mount+0x54>
 800d83c:	2302      	movs	r3, #2
 800d83e:	e036      	b.n	800d8ae <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	2200      	movs	r2, #0
 800d844:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d011      	beq.n	800d872 <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2200      	movs	r2, #0
 800d852:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	b2da      	uxtb	r2, r3
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800d860:	4619      	mov	r1, r3
 800d862:	4610      	mov	r0, r2
 800d864:	f000 fb86 	bl	800df74 <ff_cre_syncobj>
 800d868:	4603      	mov	r3, r0
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d101      	bne.n	800d872 <f_mount+0x86>
 800d86e:	2302      	movs	r3, #2
 800d870:	e01d      	b.n	800d8ae <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d872:	68fa      	ldr	r2, [r7, #12]
 800d874:	4910      	ldr	r1, [pc, #64]	; (800d8b8 <f_mount+0xcc>)
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d002      	beq.n	800d888 <f_mount+0x9c>
 800d882:	79fb      	ldrb	r3, [r7, #7]
 800d884:	2b01      	cmp	r3, #1
 800d886:	d001      	beq.n	800d88c <f_mount+0xa0>
 800d888:	2300      	movs	r3, #0
 800d88a:	e010      	b.n	800d8ae <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800d88c:	f107 0108 	add.w	r1, r7, #8
 800d890:	f107 030c 	add.w	r3, r7, #12
 800d894:	2200      	movs	r2, #0
 800d896:	4618      	mov	r0, r3
 800d898:	f7ff fc98 	bl	800d1cc <find_volume>
 800d89c:	4603      	mov	r3, r0
 800d89e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	7dfa      	ldrb	r2, [r7, #23]
 800d8a4:	4611      	mov	r1, r2
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7fe fb9d 	bl	800bfe6 <unlock_fs>
 800d8ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3720      	adds	r7, #32
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	2000266c 	.word	0x2000266c

0800d8bc <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b088      	sub	sp, #32
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d101      	bne.n	800d8d0 <f_opendir+0x14>
 800d8cc:	2309      	movs	r3, #9
 800d8ce:	e079      	b.n	800d9c4 <f_opendir+0x108>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 800d8d0:	4639      	mov	r1, r7
 800d8d2:	f107 0318 	add.w	r3, r7, #24
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f7ff fc77 	bl	800d1cc <find_volume>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 800d8e2:	7ffb      	ldrb	r3, [r7, #31]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d15f      	bne.n	800d9a8 <f_opendir+0xec>
		dp->fs = fs;
 800d8e8:	69ba      	ldr	r2, [r7, #24]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		INIT_BUF(*dp);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f107 020c 	add.w	r2, r7, #12
 800d8f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f7ff fb48 	bl	800cf94 <follow_path>
 800d904:	4603      	mov	r3, r0
 800d906:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 800d908:	7ffb      	ldrb	r3, [r7, #31]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d147      	bne.n	800d99e <f_opendir+0xe2>
			if (dp->dir) {						/* It is not the origin directory itself */
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d914:	2b00      	cmp	r3, #0
 800d916:	d017      	beq.n	800d948 <f_opendir+0x8c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d91e:	330b      	adds	r3, #11
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	f003 0310 	and.w	r3, r3, #16
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00c      	beq.n	800d944 <f_opendir+0x88>
					dp->sclust = ld_clust(fs, dp->dir);
 800d92a:	69ba      	ldr	r2, [r7, #24]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d932:	4619      	mov	r1, r3
 800d934:	4610      	mov	r0, r2
 800d936:	f7ff f921 	bl	800cb7c <ld_clust>
 800d93a:	4602      	mov	r2, r0
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800d942:	e001      	b.n	800d948 <f_opendir+0x8c>
				else							/* The object is a file */
					res = FR_NO_PATH;
 800d944:	2305      	movs	r3, #5
 800d946:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 800d948:	7ffb      	ldrb	r3, [r7, #31]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d127      	bne.n	800d99e <f_opendir+0xe2>
				dp->id = fs->id;
 800d94e:	69bb      	ldr	r3, [r7, #24]
 800d950:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d95a:	2100      	movs	r1, #0
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f7fe ff82 	bl	800c866 <dir_sdi>
 800d962:	4603      	mov	r3, r0
 800d964:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 800d966:	7ffb      	ldrb	r3, [r7, #31]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d118      	bne.n	800d99e <f_opendir+0xe2>
					if (dp->sclust) {
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d972:	2b00      	cmp	r3, #0
 800d974:	d00f      	beq.n	800d996 <f_opendir+0xda>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d976:	2100      	movs	r1, #0
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f7fe fb53 	bl	800c024 <inc_lock>
 800d97e:	4602      	mov	r2, r0
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
						if (!dp->lockid)
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d106      	bne.n	800d99e <f_opendir+0xe2>
							res = FR_TOO_MANY_OPEN_FILES;
 800d990:	2312      	movs	r3, #18
 800d992:	77fb      	strb	r3, [r7, #31]
 800d994:	e003      	b.n	800d99e <f_opendir+0xe2>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2200      	movs	r2, #0
 800d99a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d99e:	7ffb      	ldrb	r3, [r7, #31]
 800d9a0:	2b04      	cmp	r3, #4
 800d9a2:	d101      	bne.n	800d9a8 <f_opendir+0xec>
 800d9a4:	2305      	movs	r3, #5
 800d9a6:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 800d9a8:	7ffb      	ldrb	r3, [r7, #31]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d003      	beq.n	800d9b6 <f_opendir+0xfa>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	LEAVE_FF(fs, res);
 800d9b6:	69bb      	ldr	r3, [r7, #24]
 800d9b8:	7ffa      	ldrb	r2, [r7, #31]
 800d9ba:	4611      	mov	r1, r2
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7fe fb12 	bl	800bfe6 <unlock_fs>
 800d9c2:	7ffb      	ldrb	r3, [r7, #31]
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3720      	adds	r7, #32
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}

0800d9cc <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b084      	sub	sp, #16
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f7ff fecb 	bl	800d770 <validate>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d9de:	7bfb      	ldrb	r3, [r7, #15]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d11b      	bne.n	800da1c <f_closedir+0x50>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d9ea:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d007      	beq.n	800da06 <f_closedir+0x3a>
			res = dec_lock(dp->lockid);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f7fe fbc7 	bl	800c190 <dec_lock>
 800da02:	4603      	mov	r3, r0
 800da04:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK)
 800da06:	7bfb      	ldrb	r3, [r7, #15]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d103      	bne.n	800da14 <f_closedir+0x48>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2200      	movs	r2, #0
 800da10:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800da14:	2100      	movs	r1, #0
 800da16:	68b8      	ldr	r0, [r7, #8]
 800da18:	f7fe fae5 	bl	800bfe6 <unlock_fs>
#endif
	}
	return res;
 800da1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3710      	adds	r7, #16
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}

0800da26 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800da26:	b580      	push	{r7, lr}
 800da28:	b086      	sub	sp, #24
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
 800da2e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f7ff fe9d 	bl	800d770 <validate>
 800da36:	4603      	mov	r3, r0
 800da38:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800da3a:	7dfb      	ldrb	r3, [r7, #23]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d133      	bne.n	800daa8 <f_readdir+0x82>
		if (!fno) {
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d106      	bne.n	800da54 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800da46:	2100      	movs	r1, #0
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f7fe ff0c 	bl	800c866 <dir_sdi>
 800da4e:	4603      	mov	r3, r0
 800da50:	75fb      	strb	r3, [r7, #23]
 800da52:	e029      	b.n	800daa8 <f_readdir+0x82>
		} else {
			INIT_BUF(*dp);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f107 0208 	add.w	r2, r7, #8
 800da5a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 800da5e:	2100      	movs	r1, #0
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f7ff f907 	bl	800cc74 <dir_read>
 800da66:	4603      	mov	r3, r0
 800da68:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 800da6a:	7dfb      	ldrb	r3, [r7, #23]
 800da6c:	2b04      	cmp	r3, #4
 800da6e:	d105      	bne.n	800da7c <f_readdir+0x56>
				dp->sect = 0;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2200      	movs	r2, #0
 800da74:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				res = FR_OK;
 800da78:	2300      	movs	r3, #0
 800da7a:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 800da7c:	7dfb      	ldrb	r3, [r7, #23]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d112      	bne.n	800daa8 <f_readdir+0x82>
				get_fileinfo(dp, fno);		/* Get the object information */
 800da82:	6839      	ldr	r1, [r7, #0]
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f7ff f954 	bl	800cd32 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800da8a:	2100      	movs	r1, #0
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f7fe ff7e 	bl	800c98e <dir_next>
 800da92:	4603      	mov	r3, r0
 800da94:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 800da96:	7dfb      	ldrb	r3, [r7, #23]
 800da98:	2b04      	cmp	r3, #4
 800da9a:	d105      	bne.n	800daa8 <f_readdir+0x82>
					dp->sect = 0;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2200      	movs	r2, #0
 800daa0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
					res = FR_OK;
 800daa4:	2300      	movs	r3, #0
 800daa6:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800daae:	7dfa      	ldrb	r2, [r7, #23]
 800dab0:	4611      	mov	r1, r2
 800dab2:	4618      	mov	r0, r3
 800dab4:	f7fe fa97 	bl	800bfe6 <unlock_fs>
 800dab8:	7dfb      	ldrb	r3, [r7, #23]
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3718      	adds	r7, #24
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b08e      	sub	sp, #56	; 0x38
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	60f8      	str	r0, [r7, #12]
 800daca:	60b9      	str	r1, [r7, #8]
 800dacc:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800dace:	f107 030c 	add.w	r3, r7, #12
 800dad2:	2200      	movs	r2, #0
 800dad4:	4619      	mov	r1, r3
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f7ff fb78 	bl	800d1cc <find_volume>
 800dadc:	4603      	mov	r3, r0
 800dade:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800dae8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800daec:	2b00      	cmp	r3, #0
 800daee:	f040 80af 	bne.w	800dc50 <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800daf2:	69fb      	ldr	r3, [r7, #28]
 800daf4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800daf8:	69fb      	ldr	r3, [r7, #28]
 800dafa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800dafe:	3b02      	subs	r3, #2
 800db00:	429a      	cmp	r2, r3
 800db02:	d805      	bhi.n	800db10 <f_getfree+0x4e>
			*nclst = fs->free_clust;
 800db04:	69fb      	ldr	r3, [r7, #28]
 800db06:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	601a      	str	r2, [r3, #0]
 800db0e:	e09f      	b.n	800dc50 <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800db10:	69fb      	ldr	r3, [r7, #28]
 800db12:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800db16:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800db18:	2300      	movs	r3, #0
 800db1a:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800db1c:	7efb      	ldrb	r3, [r7, #27]
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d125      	bne.n	800db6e <f_getfree+0xac>
				clst = 2;
 800db22:	2302      	movs	r3, #2
 800db24:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800db26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db28:	69f8      	ldr	r0, [r7, #28]
 800db2a:	f7fe fc37 	bl	800c39c <get_fat>
 800db2e:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db36:	d103      	bne.n	800db40 <f_getfree+0x7e>
 800db38:	2301      	movs	r3, #1
 800db3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800db3e:	e077      	b.n	800dc30 <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	2b01      	cmp	r3, #1
 800db44:	d103      	bne.n	800db4e <f_getfree+0x8c>
 800db46:	2302      	movs	r3, #2
 800db48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800db4c:	e070      	b.n	800dc30 <f_getfree+0x16e>
					if (stat == 0) n++;
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d102      	bne.n	800db5a <f_getfree+0x98>
 800db54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db56:	3301      	adds	r3, #1
 800db58:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800db5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db5c:	3301      	adds	r3, #1
 800db5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800db66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db68:	429a      	cmp	r2, r3
 800db6a:	d3dc      	bcc.n	800db26 <f_getfree+0x64>
 800db6c:	e060      	b.n	800dc30 <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 800db6e:	69fb      	ldr	r3, [r7, #28]
 800db70:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800db74:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800db76:	69fb      	ldr	r3, [r7, #28]
 800db78:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800db7c:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800db7e:	2300      	movs	r3, #0
 800db80:	627b      	str	r3, [r7, #36]	; 0x24
 800db82:	2300      	movs	r3, #0
 800db84:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800db86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d112      	bne.n	800dbb2 <f_getfree+0xf0>
						res = move_window(fs, sect++);
 800db8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db8e:	1c5a      	adds	r2, r3, #1
 800db90:	62ba      	str	r2, [r7, #40]	; 0x28
 800db92:	4619      	mov	r1, r3
 800db94:	69f8      	ldr	r0, [r7, #28]
 800db96:	f7fe fbb2 	bl	800c2fe <move_window>
 800db9a:	4603      	mov	r3, r0
 800db9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800dba0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d142      	bne.n	800dc2e <f_getfree+0x16c>
						p = fs->win.d8;
 800dba8:	69fb      	ldr	r3, [r7, #28]
 800dbaa:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800dbac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dbb0:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800dbb2:	7efb      	ldrb	r3, [r7, #27]
 800dbb4:	2b02      	cmp	r3, #2
 800dbb6:	d115      	bne.n	800dbe4 <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 800dbb8:	6a3b      	ldr	r3, [r7, #32]
 800dbba:	3301      	adds	r3, #1
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	021b      	lsls	r3, r3, #8
 800dbc0:	b21a      	sxth	r2, r3
 800dbc2:	6a3b      	ldr	r3, [r7, #32]
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	b21b      	sxth	r3, r3
 800dbc8:	4313      	orrs	r3, r2
 800dbca:	b21b      	sxth	r3, r3
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d102      	bne.n	800dbd6 <f_getfree+0x114>
 800dbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800dbd6:	6a3b      	ldr	r3, [r7, #32]
 800dbd8:	3302      	adds	r3, #2
 800dbda:	623b      	str	r3, [r7, #32]
 800dbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbde:	3b02      	subs	r3, #2
 800dbe0:	627b      	str	r3, [r7, #36]	; 0x24
 800dbe2:	e01d      	b.n	800dc20 <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800dbe4:	6a3b      	ldr	r3, [r7, #32]
 800dbe6:	3303      	adds	r3, #3
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	061a      	lsls	r2, r3, #24
 800dbec:	6a3b      	ldr	r3, [r7, #32]
 800dbee:	3302      	adds	r3, #2
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	041b      	lsls	r3, r3, #16
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	6a3a      	ldr	r2, [r7, #32]
 800dbf8:	3201      	adds	r2, #1
 800dbfa:	7812      	ldrb	r2, [r2, #0]
 800dbfc:	0212      	lsls	r2, r2, #8
 800dbfe:	4313      	orrs	r3, r2
 800dc00:	6a3a      	ldr	r2, [r7, #32]
 800dc02:	7812      	ldrb	r2, [r2, #0]
 800dc04:	4313      	orrs	r3, r2
 800dc06:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d102      	bne.n	800dc14 <f_getfree+0x152>
 800dc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc10:	3301      	adds	r3, #1
 800dc12:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800dc14:	6a3b      	ldr	r3, [r7, #32]
 800dc16:	3304      	adds	r3, #4
 800dc18:	623b      	str	r3, [r7, #32]
 800dc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1c:	3b04      	subs	r3, #4
 800dc1e:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800dc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc22:	3b01      	subs	r3, #1
 800dc24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d1ac      	bne.n	800db86 <f_getfree+0xc4>
 800dc2c:	e000      	b.n	800dc30 <f_getfree+0x16e>
						if (res != FR_OK) break;
 800dc2e:	bf00      	nop
			}
			fs->free_clust = n;
 800dc30:	69fb      	ldr	r3, [r7, #28]
 800dc32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 800dc38:	69fb      	ldr	r3, [r7, #28]
 800dc3a:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800dc3e:	f043 0301 	orr.w	r3, r3, #1
 800dc42:	b2da      	uxtb	r2, r3
 800dc44:	69fb      	ldr	r3, [r7, #28]
 800dc46:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc4e:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800dc50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dc54:	4619      	mov	r1, r3
 800dc56:	69f8      	ldr	r0, [r7, #28]
 800dc58:	f7fe f9c5 	bl	800bfe6 <unlock_fs>
 800dc5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3738      	adds	r7, #56	; 0x38
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b087      	sub	sp, #28
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	60b9      	str	r1, [r7, #8]
 800dc72:	4613      	mov	r3, r2
 800dc74:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dc76:	2301      	movs	r3, #1
 800dc78:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800dc7e:	4b1e      	ldr	r3, [pc, #120]	; (800dcf8 <FATFS_LinkDriverEx+0x90>)
 800dc80:	7a5b      	ldrb	r3, [r3, #9]
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d831      	bhi.n	800dcec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dc88:	4b1b      	ldr	r3, [pc, #108]	; (800dcf8 <FATFS_LinkDriverEx+0x90>)
 800dc8a:	7a5b      	ldrb	r3, [r3, #9]
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	461a      	mov	r2, r3
 800dc90:	4b19      	ldr	r3, [pc, #100]	; (800dcf8 <FATFS_LinkDriverEx+0x90>)
 800dc92:	2100      	movs	r1, #0
 800dc94:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800dc96:	4b18      	ldr	r3, [pc, #96]	; (800dcf8 <FATFS_LinkDriverEx+0x90>)
 800dc98:	7a5b      	ldrb	r3, [r3, #9]
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	4a16      	ldr	r2, [pc, #88]	; (800dcf8 <FATFS_LinkDriverEx+0x90>)
 800dc9e:	009b      	lsls	r3, r3, #2
 800dca0:	4413      	add	r3, r2
 800dca2:	68fa      	ldr	r2, [r7, #12]
 800dca4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800dca6:	4b14      	ldr	r3, [pc, #80]	; (800dcf8 <FATFS_LinkDriverEx+0x90>)
 800dca8:	7a5b      	ldrb	r3, [r3, #9]
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	461a      	mov	r2, r3
 800dcae:	4b12      	ldr	r3, [pc, #72]	; (800dcf8 <FATFS_LinkDriverEx+0x90>)
 800dcb0:	4413      	add	r3, r2
 800dcb2:	79fa      	ldrb	r2, [r7, #7]
 800dcb4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dcb6:	4b10      	ldr	r3, [pc, #64]	; (800dcf8 <FATFS_LinkDriverEx+0x90>)
 800dcb8:	7a5b      	ldrb	r3, [r3, #9]
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	1c5a      	adds	r2, r3, #1
 800dcbe:	b2d1      	uxtb	r1, r2
 800dcc0:	4a0d      	ldr	r2, [pc, #52]	; (800dcf8 <FATFS_LinkDriverEx+0x90>)
 800dcc2:	7251      	strb	r1, [r2, #9]
 800dcc4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dcc6:	7dbb      	ldrb	r3, [r7, #22]
 800dcc8:	3330      	adds	r3, #48	; 0x30
 800dcca:	b2da      	uxtb	r2, r3
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	223a      	movs	r2, #58	; 0x3a
 800dcd6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	3302      	adds	r3, #2
 800dcdc:	222f      	movs	r2, #47	; 0x2f
 800dcde:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	3303      	adds	r3, #3
 800dce4:	2200      	movs	r2, #0
 800dce6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dce8:	2300      	movs	r3, #0
 800dcea:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800dcec:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	371c      	adds	r7, #28
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bc80      	pop	{r7}
 800dcf6:	4770      	bx	lr
 800dcf8:	2000268c 	.word	0x2000268c

0800dcfc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b082      	sub	sp, #8
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dd06:	2200      	movs	r2, #0
 800dd08:	6839      	ldr	r1, [r7, #0]
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f7ff ffac 	bl	800dc68 <FATFS_LinkDriverEx>
 800dd10:	4603      	mov	r3, r0
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3708      	adds	r7, #8
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}

0800dd1a <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800dd1a:	b480      	push	{r7}
 800dd1c:	b083      	sub	sp, #12
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	4603      	mov	r3, r0
 800dd22:	71fb      	strb	r3, [r7, #7]
  return RES_OK;
 800dd24:	2300      	movs	r3, #0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	370c      	adds	r7, #12
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bc80      	pop	{r7}
 800dd2e:	4770      	bx	lr

0800dd30 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b084      	sub	sp, #16
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	4603      	mov	r3, r0
 800dd38:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	73fb      	strb	r3, [r7, #15]
  
  if(USBH_MSC_UnitIsReady(&HOST_HANDLE, lun))
 800dd3e:	79fb      	ldrb	r3, [r7, #7]
 800dd40:	4619      	mov	r1, r3
 800dd42:	4808      	ldr	r0, [pc, #32]	; (800dd64 <USBH_status+0x34>)
 800dd44:	f7fb fd38 	bl	80097b8 <USBH_MSC_UnitIsReady>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d002      	beq.n	800dd54 <USBH_status+0x24>
  {
    res = RES_OK;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	73fb      	strb	r3, [r7, #15]
 800dd52:	e001      	b.n	800dd58 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800dd54:	2301      	movs	r3, #1
 800dd56:	73fb      	strb	r3, [r7, #15]
  }
  
  return res;
 800dd58:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3710      	adds	r7, #16
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}
 800dd62:	bf00      	nop
 800dd64:	2000acbc 	.word	0x2000acbc

0800dd68 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b094      	sub	sp, #80	; 0x50
 800dd6c:	af02      	add	r7, sp, #8
 800dd6e:	60b9      	str	r1, [r7, #8]
 800dd70:	607a      	str	r2, [r7, #4]
 800dd72:	603b      	str	r3, [r7, #0]
 800dd74:	4603      	mov	r3, r0
 800dd76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dd78:	2301      	movs	r3, #1
 800dd7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	f003 0303 	and.w	r3, r3, #3
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d002      	beq.n	800dd94 <USBH_read+0x2c>
      {
        break;
      }
    }
#else
    return res;
 800dd8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800dd92:	e02c      	b.n	800ddee <USBH_read+0x86>
#endif
  }
  else
  {
    status = USBH_MSC_Read(&HOST_HANDLE, lun, sector, buff, count);
 800dd94:	7bf9      	ldrb	r1, [r7, #15]
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	9300      	str	r3, [sp, #0]
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	687a      	ldr	r2, [r7, #4]
 800dd9e:	4816      	ldr	r0, [pc, #88]	; (800ddf8 <USBH_read+0x90>)
 800dda0:	f7fb fd53 	bl	800984a <USBH_MSC_Read>
 800dda4:	4603      	mov	r3, r0
 800dda6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 800ddaa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d103      	bne.n	800ddba <USBH_read+0x52>
  {
    res = RES_OK;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ddb8:	e017      	b.n	800ddea <USBH_read+0x82>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 800ddba:	f107 0210 	add.w	r2, r7, #16
 800ddbe:	7bfb      	ldrb	r3, [r7, #15]
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	480d      	ldr	r0, [pc, #52]	; (800ddf8 <USBH_read+0x90>)
 800ddc4:	f7fb fd1d 	bl	8009802 <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 800ddc8:	7f7b      	ldrb	r3, [r7, #29]
 800ddca:	2b3a      	cmp	r3, #58	; 0x3a
 800ddcc:	d005      	beq.n	800ddda <USBH_read+0x72>
 800ddce:	2b3a      	cmp	r3, #58	; 0x3a
 800ddd0:	dc07      	bgt.n	800dde2 <USBH_read+0x7a>
 800ddd2:	2b04      	cmp	r3, #4
 800ddd4:	d001      	beq.n	800ddda <USBH_read+0x72>
 800ddd6:	2b28      	cmp	r3, #40	; 0x28
 800ddd8:	d103      	bne.n	800dde2 <USBH_read+0x7a>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE: 
      USBH_ErrLog ("USB Disk is not ready!");  
      res = RES_NOTRDY;
 800ddda:	2303      	movs	r3, #3
 800dddc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 800dde0:	e003      	b.n	800ddea <USBH_read+0x82>
      
    default:
      res = RES_ERROR;
 800dde2:	2301      	movs	r3, #1
 800dde4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800dde8:	bf00      	nop
    }
  }
  
  return res;
 800ddea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3748      	adds	r7, #72	; 0x48
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	2000acbc 	.word	0x2000acbc

0800ddfc <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b094      	sub	sp, #80	; 0x50
 800de00:	af02      	add	r7, sp, #8
 800de02:	60b9      	str	r1, [r7, #8]
 800de04:	607a      	str	r2, [r7, #4]
 800de06:	603b      	str	r3, [r7, #0]
 800de08:	4603      	mov	r3, r0
 800de0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR; 
 800de0c:	2301      	movs	r3, #1
 800de0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;  
 800de12:	2300      	movs	r3, #0
 800de14:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	f003 0303 	and.w	r3, r3, #3
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d002      	beq.n	800de28 <USBH_write+0x2c>
      {
        break;
      }
    }
#else
    return res;
 800de22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800de26:	e034      	b.n	800de92 <USBH_write+0x96>
#endif
  }
  else
  {
    status = USBH_MSC_Write(&HOST_HANDLE, lun, sector, (BYTE *)buff, count);
 800de28:	7bf9      	ldrb	r1, [r7, #15]
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	9300      	str	r3, [sp, #0]
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	687a      	ldr	r2, [r7, #4]
 800de32:	481a      	ldr	r0, [pc, #104]	; (800de9c <USBH_write+0xa0>)
 800de34:	f7fb fd72 	bl	800991c <USBH_MSC_Write>
 800de38:	4603      	mov	r3, r0
 800de3a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 800de3e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800de42:	2b00      	cmp	r3, #0
 800de44:	d103      	bne.n	800de4e <USBH_write+0x52>
  {
    res = RES_OK;
 800de46:	2300      	movs	r3, #0
 800de48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800de4c:	e01f      	b.n	800de8e <USBH_write+0x92>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 800de4e:	f107 0210 	add.w	r2, r7, #16
 800de52:	7bfb      	ldrb	r3, [r7, #15]
 800de54:	4619      	mov	r1, r3
 800de56:	4811      	ldr	r0, [pc, #68]	; (800de9c <USBH_write+0xa0>)
 800de58:	f7fb fcd3 	bl	8009802 <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 800de5c:	7f7b      	ldrb	r3, [r7, #29]
 800de5e:	2b3a      	cmp	r3, #58	; 0x3a
 800de60:	d00d      	beq.n	800de7e <USBH_write+0x82>
 800de62:	2b3a      	cmp	r3, #58	; 0x3a
 800de64:	dc0f      	bgt.n	800de86 <USBH_write+0x8a>
 800de66:	2b28      	cmp	r3, #40	; 0x28
 800de68:	d009      	beq.n	800de7e <USBH_write+0x82>
 800de6a:	2b28      	cmp	r3, #40	; 0x28
 800de6c:	dc0b      	bgt.n	800de86 <USBH_write+0x8a>
 800de6e:	2b04      	cmp	r3, #4
 800de70:	d005      	beq.n	800de7e <USBH_write+0x82>
 800de72:	2b27      	cmp	r3, #39	; 0x27
 800de74:	d107      	bne.n	800de86 <USBH_write+0x8a>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800de76:	2302      	movs	r3, #2
 800de78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800de7c:	e007      	b.n	800de8e <USBH_write+0x92>
      
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");      
      res = RES_NOTRDY;
 800de7e:	2303      	movs	r3, #3
 800de80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 800de84:	e003      	b.n	800de8e <USBH_write+0x92>
      
    default:
      res = RES_ERROR;
 800de86:	2301      	movs	r3, #1
 800de88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800de8c:	bf00      	nop
    }
  }
  
  return res;   
 800de8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800de92:	4618      	mov	r0, r3
 800de94:	3748      	adds	r7, #72	; 0x48
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop
 800de9c:	2000acbc 	.word	0x2000acbc

0800dea0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b090      	sub	sp, #64	; 0x40
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	4603      	mov	r3, r0
 800dea8:	603a      	str	r2, [r7, #0]
 800deaa:	71fb      	strb	r3, [r7, #7]
 800deac:	460b      	mov	r3, r1
 800deae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800deb0:	2301      	movs	r3, #1
 800deb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;
  
  switch (cmd)
 800deb6:	79bb      	ldrb	r3, [r7, #6]
 800deb8:	2b03      	cmp	r3, #3
 800deba:	d850      	bhi.n	800df5e <USBH_ioctl+0xbe>
 800debc:	a201      	add	r2, pc, #4	; (adr r2, 800dec4 <USBH_ioctl+0x24>)
 800debe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dec2:	bf00      	nop
 800dec4:	0800ded5 	.word	0x0800ded5
 800dec8:	0800dedd 	.word	0x0800dedd
 800decc:	0800df07 	.word	0x0800df07
 800ded0:	0800df33 	.word	0x0800df33
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC: 
    res = RES_OK;
 800ded4:	2300      	movs	r3, #0
 800ded6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800deda:	e043      	b.n	800df64 <USBH_ioctl+0xc4>
    
  /* Get number of sectors on the disk (DWORD) */  
  case GET_SECTOR_COUNT : 
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 800dedc:	f107 0208 	add.w	r2, r7, #8
 800dee0:	79fb      	ldrb	r3, [r7, #7]
 800dee2:	4619      	mov	r1, r3
 800dee4:	4822      	ldr	r0, [pc, #136]	; (800df70 <USBH_ioctl+0xd0>)
 800dee6:	f7fb fc8c 	bl	8009802 <USBH_MSC_GetLUNInfo>
 800deea:	4603      	mov	r3, r0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d106      	bne.n	800defe <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800def0:	68fa      	ldr	r2, [r7, #12]
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800def6:	2300      	movs	r3, #0
 800def8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800defc:	e032      	b.n	800df64 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 800defe:	2301      	movs	r3, #1
 800df00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800df04:	e02e      	b.n	800df64 <USBH_ioctl+0xc4>
    
  /* Get R/W sector size (WORD) */  
  case GET_SECTOR_SIZE :	
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 800df06:	f107 0208 	add.w	r2, r7, #8
 800df0a:	79fb      	ldrb	r3, [r7, #7]
 800df0c:	4619      	mov	r1, r3
 800df0e:	4818      	ldr	r0, [pc, #96]	; (800df70 <USBH_ioctl+0xd0>)
 800df10:	f7fb fc77 	bl	8009802 <USBH_MSC_GetLUNInfo>
 800df14:	4603      	mov	r3, r0
 800df16:	2b00      	cmp	r3, #0
 800df18:	d107      	bne.n	800df2a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800df1a:	8a3b      	ldrh	r3, [r7, #16]
 800df1c:	461a      	mov	r2, r3
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800df22:	2300      	movs	r3, #0
 800df24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800df28:	e01c      	b.n	800df64 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 800df2a:	2301      	movs	r3, #1
 800df2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800df30:	e018      	b.n	800df64 <USBH_ioctl+0xc4>
    
    /* Get erase block size in unit of sector (DWORD) */ 
  case GET_BLOCK_SIZE : 
    
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 800df32:	f107 0208 	add.w	r2, r7, #8
 800df36:	79fb      	ldrb	r3, [r7, #7]
 800df38:	4619      	mov	r1, r3
 800df3a:	480d      	ldr	r0, [pc, #52]	; (800df70 <USBH_ioctl+0xd0>)
 800df3c:	f7fb fc61 	bl	8009802 <USBH_MSC_GetLUNInfo>
 800df40:	4603      	mov	r3, r0
 800df42:	2b00      	cmp	r3, #0
 800df44:	d107      	bne.n	800df56 <USBH_ioctl+0xb6>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800df46:	8a3b      	ldrh	r3, [r7, #16]
 800df48:	461a      	mov	r2, r3
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800df4e:	2300      	movs	r3, #0
 800df50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800df54:	e006      	b.n	800df64 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 800df56:	2301      	movs	r3, #1
 800df58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800df5c:	e002      	b.n	800df64 <USBH_ioctl+0xc4>
    
  default:
    res = RES_PARERR;
 800df5e:	2304      	movs	r3, #4
 800df60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
  
  return res;
 800df64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3740      	adds	r7, #64	; 0x40
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}
 800df70:	2000acbc 	.word	0x2000acbc

0800df74 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b086      	sub	sp, #24
 800df78:	af00      	add	r7, sp, #0
 800df7a:	4603      	mov	r3, r0
 800df7c:	6039      	str	r1, [r7, #0]
 800df7e:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 800df80:	2300      	movs	r3, #0
 800df82:	60fb      	str	r3, [r7, #12]
 800df84:	2300      	movs	r3, #0
 800df86:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 800df88:	f107 030c 	add.w	r3, r7, #12
 800df8c:	2101      	movs	r1, #1
 800df8e:	4618      	mov	r0, r3
 800df90:	f000 f8cb 	bl	800e12a <osSemaphoreCreate>
 800df94:	4602      	mov	r2, r0
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	bf14      	ite	ne
 800dfa2:	2301      	movne	r3, #1
 800dfa4:	2300      	moveq	r3, #0
 800dfa6:	b2db      	uxtb	r3, r3
 800dfa8:	617b      	str	r3, [r7, #20]
  
  return ret;
 800dfaa:	697b      	ldr	r3, [r7, #20]
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	3718      	adds	r7, #24
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f000 f96b 	bl	800e298 <osSemaphoreDelete>
  return 1;
 800dfc2:	2301      	movs	r3, #1
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3708      	adds	r7, #8
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b084      	sub	sp, #16
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800dfd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f000 f8d7 	bl	800e190 <osSemaphoreWait>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d101      	bne.n	800dfec <ff_req_grant+0x20>
  {
    ret = 1;
 800dfe8:	2301      	movs	r3, #1
 800dfea:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800dfec:	68fb      	ldr	r3, [r7, #12]
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	3710      	adds	r7, #16
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}

0800dff6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800dff6:	b580      	push	{r7, lr}
 800dff8:	b082      	sub	sp, #8
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 f914 	bl	800e22c <osSemaphoreRelease>
}
 800e004:	bf00      	nop
 800e006:	3708      	adds	r7, #8
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e00c:	b480      	push	{r7}
 800e00e:	b085      	sub	sp, #20
 800e010:	af00      	add	r7, sp, #0
 800e012:	4603      	mov	r3, r0
 800e014:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e016:	2300      	movs	r3, #0
 800e018:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e01a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e01e:	2b84      	cmp	r3, #132	; 0x84
 800e020:	d005      	beq.n	800e02e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e022:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	4413      	add	r3, r2
 800e02a:	3303      	adds	r3, #3
 800e02c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e02e:	68fb      	ldr	r3, [r7, #12]
}
 800e030:	4618      	mov	r0, r3
 800e032:	3714      	adds	r7, #20
 800e034:	46bd      	mov	sp, r7
 800e036:	bc80      	pop	{r7}
 800e038:	4770      	bx	lr

0800e03a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e03a:	b480      	push	{r7}
 800e03c:	b083      	sub	sp, #12
 800e03e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e040:	f3ef 8305 	mrs	r3, IPSR
 800e044:	607b      	str	r3, [r7, #4]
  return(result);
 800e046:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e048:	2b00      	cmp	r3, #0
 800e04a:	bf14      	ite	ne
 800e04c:	2301      	movne	r3, #1
 800e04e:	2300      	moveq	r3, #0
 800e050:	b2db      	uxtb	r3, r3
}
 800e052:	4618      	mov	r0, r3
 800e054:	370c      	adds	r7, #12
 800e056:	46bd      	mov	sp, r7
 800e058:	bc80      	pop	{r7}
 800e05a:	4770      	bx	lr

0800e05c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e060:	f001 fbd0 	bl	800f804 <vTaskStartScheduler>
  
  return osOK;
 800e064:	2300      	movs	r3, #0
}
 800e066:	4618      	mov	r0, r3
 800e068:	bd80      	pop	{r7, pc}

0800e06a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e06a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e06c:	b089      	sub	sp, #36	; 0x24
 800e06e:	af04      	add	r7, sp, #16
 800e070:	6078      	str	r0, [r7, #4]
 800e072:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	695b      	ldr	r3, [r3, #20]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d020      	beq.n	800e0be <osThreadCreate+0x54>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	699b      	ldr	r3, [r3, #24]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d01c      	beq.n	800e0be <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	685c      	ldr	r4, [r3, #4]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681d      	ldr	r5, [r3, #0]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	691e      	ldr	r6, [r3, #16]
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e096:	4618      	mov	r0, r3
 800e098:	f7ff ffb8 	bl	800e00c <makeFreeRtosPriority>
 800e09c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	695b      	ldr	r3, [r3, #20]
 800e0a2:	687a      	ldr	r2, [r7, #4]
 800e0a4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e0a6:	9202      	str	r2, [sp, #8]
 800e0a8:	9301      	str	r3, [sp, #4]
 800e0aa:	9100      	str	r1, [sp, #0]
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	4632      	mov	r2, r6
 800e0b0:	4629      	mov	r1, r5
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	f001 f9d0 	bl	800f458 <xTaskCreateStatic>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	60fb      	str	r3, [r7, #12]
 800e0bc:	e01c      	b.n	800e0f8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	685c      	ldr	r4, [r3, #4]
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e0ca:	b29e      	uxth	r6, r3
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7ff ff9a 	bl	800e00c <makeFreeRtosPriority>
 800e0d8:	4602      	mov	r2, r0
 800e0da:	f107 030c 	add.w	r3, r7, #12
 800e0de:	9301      	str	r3, [sp, #4]
 800e0e0:	9200      	str	r2, [sp, #0]
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	4632      	mov	r2, r6
 800e0e6:	4629      	mov	r1, r5
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	f001 fa11 	bl	800f510 <xTaskCreate>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d001      	beq.n	800e0f8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	e000      	b.n	800e0fa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3714      	adds	r7, #20
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e102 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e102:	b580      	push	{r7, lr}
 800e104:	b084      	sub	sp, #16
 800e106:	af00      	add	r7, sp, #0
 800e108:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d001      	beq.n	800e118 <osDelay+0x16>
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	e000      	b.n	800e11a <osDelay+0x18>
 800e118:	2301      	movs	r3, #1
 800e11a:	4618      	mov	r0, r3
 800e11c:	f001 fb3e 	bl	800f79c <vTaskDelay>
  
  return osOK;
 800e120:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e122:	4618      	mov	r0, r3
 800e124:	3710      	adds	r7, #16
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}

0800e12a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800e12a:	b580      	push	{r7, lr}
 800e12c:	b086      	sub	sp, #24
 800e12e:	af02      	add	r7, sp, #8
 800e130:	6078      	str	r0, [r7, #4]
 800e132:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	685b      	ldr	r3, [r3, #4]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d00f      	beq.n	800e15c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	2b01      	cmp	r3, #1
 800e140:	d10a      	bne.n	800e158 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	685b      	ldr	r3, [r3, #4]
 800e146:	2203      	movs	r2, #3
 800e148:	9200      	str	r2, [sp, #0]
 800e14a:	2200      	movs	r2, #0
 800e14c:	2100      	movs	r1, #0
 800e14e:	2001      	movs	r0, #1
 800e150:	f000 faaa 	bl	800e6a8 <xQueueGenericCreateStatic>
 800e154:	4603      	mov	r3, r0
 800e156:	e016      	b.n	800e186 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800e158:	2300      	movs	r3, #0
 800e15a:	e014      	b.n	800e186 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	2b01      	cmp	r3, #1
 800e160:	d110      	bne.n	800e184 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800e162:	2203      	movs	r2, #3
 800e164:	2100      	movs	r1, #0
 800e166:	2001      	movs	r0, #1
 800e168:	f000 fb15 	bl	800e796 <xQueueGenericCreate>
 800e16c:	60f8      	str	r0, [r7, #12]
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d005      	beq.n	800e180 <osSemaphoreCreate+0x56>
 800e174:	2300      	movs	r3, #0
 800e176:	2200      	movs	r2, #0
 800e178:	2100      	movs	r1, #0
 800e17a:	68f8      	ldr	r0, [r7, #12]
 800e17c:	f000 fb68 	bl	800e850 <xQueueGenericSend>
      return sema;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	e000      	b.n	800e186 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800e184:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800e186:	4618      	mov	r0, r3
 800e188:	3710      	adds	r7, #16
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
	...

0800e190 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e19a:	2300      	movs	r3, #0
 800e19c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d101      	bne.n	800e1a8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800e1a4:	2380      	movs	r3, #128	; 0x80
 800e1a6:	e03a      	b.n	800e21e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1b2:	d103      	bne.n	800e1bc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800e1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e1b8:	60fb      	str	r3, [r7, #12]
 800e1ba:	e009      	b.n	800e1d0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d006      	beq.n	800e1d0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d101      	bne.n	800e1d0 <osSemaphoreWait+0x40>
      ticks = 1;
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800e1d0:	f7ff ff33 	bl	800e03a <inHandlerMode>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d017      	beq.n	800e20a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e1da:	f107 0308 	add.w	r3, r7, #8
 800e1de:	461a      	mov	r2, r3
 800e1e0:	2100      	movs	r1, #0
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f000 ff44 	bl	800f070 <xQueueReceiveFromISR>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	2b01      	cmp	r3, #1
 800e1ec:	d001      	beq.n	800e1f2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800e1ee:	23ff      	movs	r3, #255	; 0xff
 800e1f0:	e015      	b.n	800e21e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d011      	beq.n	800e21c <osSemaphoreWait+0x8c>
 800e1f8:	4b0b      	ldr	r3, [pc, #44]	; (800e228 <osSemaphoreWait+0x98>)
 800e1fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1fe:	601a      	str	r2, [r3, #0]
 800e200:	f3bf 8f4f 	dsb	sy
 800e204:	f3bf 8f6f 	isb	sy
 800e208:	e008      	b.n	800e21c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e20a:	68f9      	ldr	r1, [r7, #12]
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f000 fe23 	bl	800ee58 <xQueueSemaphoreTake>
 800e212:	4603      	mov	r3, r0
 800e214:	2b01      	cmp	r3, #1
 800e216:	d001      	beq.n	800e21c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800e218:	23ff      	movs	r3, #255	; 0xff
 800e21a:	e000      	b.n	800e21e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800e21c:	2300      	movs	r3, #0
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3710      	adds	r7, #16
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	e000ed04 	.word	0xe000ed04

0800e22c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800e234:	2300      	movs	r3, #0
 800e236:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800e238:	2300      	movs	r3, #0
 800e23a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800e23c:	f7ff fefd 	bl	800e03a <inHandlerMode>
 800e240:	4603      	mov	r3, r0
 800e242:	2b00      	cmp	r3, #0
 800e244:	d016      	beq.n	800e274 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e246:	f107 0308 	add.w	r3, r7, #8
 800e24a:	4619      	mov	r1, r3
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f000 fc95 	bl	800eb7c <xQueueGiveFromISR>
 800e252:	4603      	mov	r3, r0
 800e254:	2b01      	cmp	r3, #1
 800e256:	d001      	beq.n	800e25c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800e258:	23ff      	movs	r3, #255	; 0xff
 800e25a:	e017      	b.n	800e28c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d013      	beq.n	800e28a <osSemaphoreRelease+0x5e>
 800e262:	4b0c      	ldr	r3, [pc, #48]	; (800e294 <osSemaphoreRelease+0x68>)
 800e264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e268:	601a      	str	r2, [r3, #0]
 800e26a:	f3bf 8f4f 	dsb	sy
 800e26e:	f3bf 8f6f 	isb	sy
 800e272:	e00a      	b.n	800e28a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e274:	2300      	movs	r3, #0
 800e276:	2200      	movs	r2, #0
 800e278:	2100      	movs	r1, #0
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f000 fae8 	bl	800e850 <xQueueGenericSend>
 800e280:	4603      	mov	r3, r0
 800e282:	2b01      	cmp	r3, #1
 800e284:	d001      	beq.n	800e28a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800e286:	23ff      	movs	r3, #255	; 0xff
 800e288:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800e28a:	68fb      	ldr	r3, [r7, #12]
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3710      	adds	r7, #16
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	e000ed04 	.word	0xe000ed04

0800e298 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800e2a0:	f7ff fecb 	bl	800e03a <inHandlerMode>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d001      	beq.n	800e2ae <osSemaphoreDelete+0x16>
    return osErrorISR;
 800e2aa:	2382      	movs	r3, #130	; 0x82
 800e2ac:	e003      	b.n	800e2b6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f000 ff5e 	bl	800f170 <vQueueDelete>

  return osOK; 
 800e2b4:	2300      	movs	r3, #0
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3708      	adds	r7, #8
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}

0800e2be <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800e2be:	b590      	push	{r4, r7, lr}
 800e2c0:	b085      	sub	sp, #20
 800e2c2:	af02      	add	r7, sp, #8
 800e2c4:	6078      	str	r0, [r7, #4]
 800e2c6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	689b      	ldr	r3, [r3, #8]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d011      	beq.n	800e2f4 <osMessageCreate+0x36>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	68db      	ldr	r3, [r3, #12]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d00d      	beq.n	800e2f4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6818      	ldr	r0, [r3, #0]
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6859      	ldr	r1, [r3, #4]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	689a      	ldr	r2, [r3, #8]
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	2400      	movs	r4, #0
 800e2ea:	9400      	str	r4, [sp, #0]
 800e2ec:	f000 f9dc 	bl	800e6a8 <xQueueGenericCreateStatic>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	e008      	b.n	800e306 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6818      	ldr	r0, [r3, #0]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	4619      	mov	r1, r3
 800e300:	f000 fa49 	bl	800e796 <xQueueGenericCreate>
 800e304:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800e306:	4618      	mov	r0, r3
 800e308:	370c      	adds	r7, #12
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd90      	pop	{r4, r7, pc}
	...

0800e310 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b086      	sub	sp, #24
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800e31c:	2300      	movs	r3, #0
 800e31e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d101      	bne.n	800e32e <osMessagePut+0x1e>
    ticks = 1;
 800e32a:	2301      	movs	r3, #1
 800e32c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800e32e:	f7ff fe84 	bl	800e03a <inHandlerMode>
 800e332:	4603      	mov	r3, r0
 800e334:	2b00      	cmp	r3, #0
 800e336:	d018      	beq.n	800e36a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800e338:	f107 0210 	add.w	r2, r7, #16
 800e33c:	f107 0108 	add.w	r1, r7, #8
 800e340:	2300      	movs	r3, #0
 800e342:	68f8      	ldr	r0, [r7, #12]
 800e344:	f000 fb82 	bl	800ea4c <xQueueGenericSendFromISR>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b01      	cmp	r3, #1
 800e34c:	d001      	beq.n	800e352 <osMessagePut+0x42>
      return osErrorOS;
 800e34e:	23ff      	movs	r3, #255	; 0xff
 800e350:	e018      	b.n	800e384 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d014      	beq.n	800e382 <osMessagePut+0x72>
 800e358:	4b0c      	ldr	r3, [pc, #48]	; (800e38c <osMessagePut+0x7c>)
 800e35a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e35e:	601a      	str	r2, [r3, #0]
 800e360:	f3bf 8f4f 	dsb	sy
 800e364:	f3bf 8f6f 	isb	sy
 800e368:	e00b      	b.n	800e382 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800e36a:	f107 0108 	add.w	r1, r7, #8
 800e36e:	2300      	movs	r3, #0
 800e370:	697a      	ldr	r2, [r7, #20]
 800e372:	68f8      	ldr	r0, [r7, #12]
 800e374:	f000 fa6c 	bl	800e850 <xQueueGenericSend>
 800e378:	4603      	mov	r3, r0
 800e37a:	2b01      	cmp	r3, #1
 800e37c:	d001      	beq.n	800e382 <osMessagePut+0x72>
      return osErrorOS;
 800e37e:	23ff      	movs	r3, #255	; 0xff
 800e380:	e000      	b.n	800e384 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800e382:	2300      	movs	r3, #0
}
 800e384:	4618      	mov	r0, r3
 800e386:	3718      	adds	r7, #24
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}
 800e38c:	e000ed04 	.word	0xe000ed04

0800e390 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800e390:	b590      	push	{r4, r7, lr}
 800e392:	b08b      	sub	sp, #44	; 0x2c
 800e394:	af00      	add	r7, sp, #0
 800e396:	60f8      	str	r0, [r7, #12]
 800e398:	60b9      	str	r1, [r7, #8]
 800e39a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d10a      	bne.n	800e3c0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800e3aa:	2380      	movs	r3, #128	; 0x80
 800e3ac:	617b      	str	r3, [r7, #20]
    return event;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	461c      	mov	r4, r3
 800e3b2:	f107 0314 	add.w	r3, r7, #20
 800e3b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e3ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e3be:	e054      	b.n	800e46a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ce:	d103      	bne.n	800e3d8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800e3d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3d4:	627b      	str	r3, [r7, #36]	; 0x24
 800e3d6:	e009      	b.n	800e3ec <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d006      	beq.n	800e3ec <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800e3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d101      	bne.n	800e3ec <osMessageGet+0x5c>
      ticks = 1;
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e3ec:	f7ff fe25 	bl	800e03a <inHandlerMode>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d01c      	beq.n	800e430 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800e3f6:	f107 0220 	add.w	r2, r7, #32
 800e3fa:	f107 0314 	add.w	r3, r7, #20
 800e3fe:	3304      	adds	r3, #4
 800e400:	4619      	mov	r1, r3
 800e402:	68b8      	ldr	r0, [r7, #8]
 800e404:	f000 fe34 	bl	800f070 <xQueueReceiveFromISR>
 800e408:	4603      	mov	r3, r0
 800e40a:	2b01      	cmp	r3, #1
 800e40c:	d102      	bne.n	800e414 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800e40e:	2310      	movs	r3, #16
 800e410:	617b      	str	r3, [r7, #20]
 800e412:	e001      	b.n	800e418 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800e414:	2300      	movs	r3, #0
 800e416:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e418:	6a3b      	ldr	r3, [r7, #32]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d01d      	beq.n	800e45a <osMessageGet+0xca>
 800e41e:	4b15      	ldr	r3, [pc, #84]	; (800e474 <osMessageGet+0xe4>)
 800e420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e424:	601a      	str	r2, [r3, #0]
 800e426:	f3bf 8f4f 	dsb	sy
 800e42a:	f3bf 8f6f 	isb	sy
 800e42e:	e014      	b.n	800e45a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800e430:	f107 0314 	add.w	r3, r7, #20
 800e434:	3304      	adds	r3, #4
 800e436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e438:	4619      	mov	r1, r3
 800e43a:	68b8      	ldr	r0, [r7, #8]
 800e43c:	f000 fc2c 	bl	800ec98 <xQueueReceive>
 800e440:	4603      	mov	r3, r0
 800e442:	2b01      	cmp	r3, #1
 800e444:	d102      	bne.n	800e44c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800e446:	2310      	movs	r3, #16
 800e448:	617b      	str	r3, [r7, #20]
 800e44a:	e006      	b.n	800e45a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d101      	bne.n	800e456 <osMessageGet+0xc6>
 800e452:	2300      	movs	r3, #0
 800e454:	e000      	b.n	800e458 <osMessageGet+0xc8>
 800e456:	2340      	movs	r3, #64	; 0x40
 800e458:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	461c      	mov	r4, r3
 800e45e:	f107 0314 	add.w	r3, r7, #20
 800e462:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e466:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e46a:	68f8      	ldr	r0, [r7, #12]
 800e46c:	372c      	adds	r7, #44	; 0x2c
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd90      	pop	{r4, r7, pc}
 800e472:	bf00      	nop
 800e474:	e000ed04 	.word	0xe000ed04

0800e478 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e478:	b480      	push	{r7}
 800e47a:	b083      	sub	sp, #12
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f103 0208 	add.w	r2, r3, #8
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f04f 32ff 	mov.w	r2, #4294967295
 800e490:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f103 0208 	add.w	r2, r3, #8
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f103 0208 	add.w	r2, r3, #8
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e4ac:	bf00      	nop
 800e4ae:	370c      	adds	r7, #12
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bc80      	pop	{r7}
 800e4b4:	4770      	bx	lr

0800e4b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e4b6:	b480      	push	{r7}
 800e4b8:	b083      	sub	sp, #12
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e4c4:	bf00      	nop
 800e4c6:	370c      	adds	r7, #12
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bc80      	pop	{r7}
 800e4cc:	4770      	bx	lr

0800e4ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e4ce:	b480      	push	{r7}
 800e4d0:	b085      	sub	sp, #20
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	6078      	str	r0, [r7, #4]
 800e4d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	685b      	ldr	r3, [r3, #4]
 800e4dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	68fa      	ldr	r2, [r7, #12]
 800e4e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	689a      	ldr	r2, [r3, #8]
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	689b      	ldr	r3, [r3, #8]
 800e4f0:	683a      	ldr	r2, [r7, #0]
 800e4f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	683a      	ldr	r2, [r7, #0]
 800e4f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	687a      	ldr	r2, [r7, #4]
 800e4fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	1c5a      	adds	r2, r3, #1
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	601a      	str	r2, [r3, #0]
}
 800e50a:	bf00      	nop
 800e50c:	3714      	adds	r7, #20
 800e50e:	46bd      	mov	sp, r7
 800e510:	bc80      	pop	{r7}
 800e512:	4770      	bx	lr

0800e514 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e514:	b480      	push	{r7}
 800e516:	b085      	sub	sp, #20
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e52a:	d103      	bne.n	800e534 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	691b      	ldr	r3, [r3, #16]
 800e530:	60fb      	str	r3, [r7, #12]
 800e532:	e00c      	b.n	800e54e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	3308      	adds	r3, #8
 800e538:	60fb      	str	r3, [r7, #12]
 800e53a:	e002      	b.n	800e542 <vListInsert+0x2e>
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	685b      	ldr	r3, [r3, #4]
 800e540:	60fb      	str	r3, [r7, #12]
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	68ba      	ldr	r2, [r7, #8]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d2f6      	bcs.n	800e53c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	685a      	ldr	r2, [r3, #4]
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	683a      	ldr	r2, [r7, #0]
 800e55c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	68fa      	ldr	r2, [r7, #12]
 800e562:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	683a      	ldr	r2, [r7, #0]
 800e568:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	687a      	ldr	r2, [r7, #4]
 800e56e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	1c5a      	adds	r2, r3, #1
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	601a      	str	r2, [r3, #0]
}
 800e57a:	bf00      	nop
 800e57c:	3714      	adds	r7, #20
 800e57e:	46bd      	mov	sp, r7
 800e580:	bc80      	pop	{r7}
 800e582:	4770      	bx	lr

0800e584 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e584:	b480      	push	{r7}
 800e586:	b085      	sub	sp, #20
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	691b      	ldr	r3, [r3, #16]
 800e590:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	685b      	ldr	r3, [r3, #4]
 800e596:	687a      	ldr	r2, [r7, #4]
 800e598:	6892      	ldr	r2, [r2, #8]
 800e59a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	689b      	ldr	r3, [r3, #8]
 800e5a0:	687a      	ldr	r2, [r7, #4]
 800e5a2:	6852      	ldr	r2, [r2, #4]
 800e5a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	685b      	ldr	r3, [r3, #4]
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d103      	bne.n	800e5b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	689a      	ldr	r2, [r3, #8]
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	1e5a      	subs	r2, r3, #1
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681b      	ldr	r3, [r3, #0]
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3714      	adds	r7, #20
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bc80      	pop	{r7}
 800e5d4:	4770      	bx	lr
	...

0800e5d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b084      	sub	sp, #16
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d10a      	bne.n	800e602 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f0:	f383 8811 	msr	BASEPRI, r3
 800e5f4:	f3bf 8f6f 	isb	sy
 800e5f8:	f3bf 8f4f 	dsb	sy
 800e5fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e5fe:	bf00      	nop
 800e600:	e7fe      	b.n	800e600 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e602:	f002 f853 	bl	80106ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681a      	ldr	r2, [r3, #0]
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e60e:	68f9      	ldr	r1, [r7, #12]
 800e610:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e612:	fb01 f303 	mul.w	r3, r1, r3
 800e616:	441a      	add	r2, r3
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2200      	movs	r2, #0
 800e620:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681a      	ldr	r2, [r3, #0]
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	681a      	ldr	r2, [r3, #0]
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e632:	3b01      	subs	r3, #1
 800e634:	68f9      	ldr	r1, [r7, #12]
 800e636:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e638:	fb01 f303 	mul.w	r3, r1, r3
 800e63c:	441a      	add	r2, r3
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	22ff      	movs	r2, #255	; 0xff
 800e646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	22ff      	movs	r2, #255	; 0xff
 800e64e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d114      	bne.n	800e682 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	691b      	ldr	r3, [r3, #16]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d01a      	beq.n	800e696 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	3310      	adds	r3, #16
 800e664:	4618      	mov	r0, r3
 800e666:	f001 fb25 	bl	800fcb4 <xTaskRemoveFromEventList>
 800e66a:	4603      	mov	r3, r0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d012      	beq.n	800e696 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e670:	4b0c      	ldr	r3, [pc, #48]	; (800e6a4 <xQueueGenericReset+0xcc>)
 800e672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e676:	601a      	str	r2, [r3, #0]
 800e678:	f3bf 8f4f 	dsb	sy
 800e67c:	f3bf 8f6f 	isb	sy
 800e680:	e009      	b.n	800e696 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	3310      	adds	r3, #16
 800e686:	4618      	mov	r0, r3
 800e688:	f7ff fef6 	bl	800e478 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	3324      	adds	r3, #36	; 0x24
 800e690:	4618      	mov	r0, r3
 800e692:	f7ff fef1 	bl	800e478 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e696:	f002 f839 	bl	801070c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e69a:	2301      	movs	r3, #1
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3710      	adds	r7, #16
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}
 800e6a4:	e000ed04 	.word	0xe000ed04

0800e6a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b08e      	sub	sp, #56	; 0x38
 800e6ac:	af02      	add	r7, sp, #8
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	60b9      	str	r1, [r7, #8]
 800e6b2:	607a      	str	r2, [r7, #4]
 800e6b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d10a      	bne.n	800e6d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c0:	f383 8811 	msr	BASEPRI, r3
 800e6c4:	f3bf 8f6f 	isb	sy
 800e6c8:	f3bf 8f4f 	dsb	sy
 800e6cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e6ce:	bf00      	nop
 800e6d0:	e7fe      	b.n	800e6d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d10a      	bne.n	800e6ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6dc:	f383 8811 	msr	BASEPRI, r3
 800e6e0:	f3bf 8f6f 	isb	sy
 800e6e4:	f3bf 8f4f 	dsb	sy
 800e6e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e6ea:	bf00      	nop
 800e6ec:	e7fe      	b.n	800e6ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d002      	beq.n	800e6fa <xQueueGenericCreateStatic+0x52>
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d001      	beq.n	800e6fe <xQueueGenericCreateStatic+0x56>
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	e000      	b.n	800e700 <xQueueGenericCreateStatic+0x58>
 800e6fe:	2300      	movs	r3, #0
 800e700:	2b00      	cmp	r3, #0
 800e702:	d10a      	bne.n	800e71a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e708:	f383 8811 	msr	BASEPRI, r3
 800e70c:	f3bf 8f6f 	isb	sy
 800e710:	f3bf 8f4f 	dsb	sy
 800e714:	623b      	str	r3, [r7, #32]
}
 800e716:	bf00      	nop
 800e718:	e7fe      	b.n	800e718 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d102      	bne.n	800e726 <xQueueGenericCreateStatic+0x7e>
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d101      	bne.n	800e72a <xQueueGenericCreateStatic+0x82>
 800e726:	2301      	movs	r3, #1
 800e728:	e000      	b.n	800e72c <xQueueGenericCreateStatic+0x84>
 800e72a:	2300      	movs	r3, #0
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d10a      	bne.n	800e746 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e734:	f383 8811 	msr	BASEPRI, r3
 800e738:	f3bf 8f6f 	isb	sy
 800e73c:	f3bf 8f4f 	dsb	sy
 800e740:	61fb      	str	r3, [r7, #28]
}
 800e742:	bf00      	nop
 800e744:	e7fe      	b.n	800e744 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e746:	2348      	movs	r3, #72	; 0x48
 800e748:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	2b48      	cmp	r3, #72	; 0x48
 800e74e:	d00a      	beq.n	800e766 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e754:	f383 8811 	msr	BASEPRI, r3
 800e758:	f3bf 8f6f 	isb	sy
 800e75c:	f3bf 8f4f 	dsb	sy
 800e760:	61bb      	str	r3, [r7, #24]
}
 800e762:	bf00      	nop
 800e764:	e7fe      	b.n	800e764 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d00d      	beq.n	800e78c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e772:	2201      	movs	r2, #1
 800e774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e778:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77e:	9300      	str	r3, [sp, #0]
 800e780:	4613      	mov	r3, r2
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	68b9      	ldr	r1, [r7, #8]
 800e786:	68f8      	ldr	r0, [r7, #12]
 800e788:	f000 f843 	bl	800e812 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800e78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e78e:	4618      	mov	r0, r3
 800e790:	3730      	adds	r7, #48	; 0x30
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}

0800e796 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e796:	b580      	push	{r7, lr}
 800e798:	b08a      	sub	sp, #40	; 0x28
 800e79a:	af02      	add	r7, sp, #8
 800e79c:	60f8      	str	r0, [r7, #12]
 800e79e:	60b9      	str	r1, [r7, #8]
 800e7a0:	4613      	mov	r3, r2
 800e7a2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d10a      	bne.n	800e7c0 <xQueueGenericCreate+0x2a>
	__asm volatile
 800e7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ae:	f383 8811 	msr	BASEPRI, r3
 800e7b2:	f3bf 8f6f 	isb	sy
 800e7b6:	f3bf 8f4f 	dsb	sy
 800e7ba:	613b      	str	r3, [r7, #16]
}
 800e7bc:	bf00      	nop
 800e7be:	e7fe      	b.n	800e7be <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d102      	bne.n	800e7cc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	61fb      	str	r3, [r7, #28]
 800e7ca:	e004      	b.n	800e7d6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	68ba      	ldr	r2, [r7, #8]
 800e7d0:	fb02 f303 	mul.w	r3, r2, r3
 800e7d4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e7d6:	69fb      	ldr	r3, [r7, #28]
 800e7d8:	3348      	adds	r3, #72	; 0x48
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f002 f866 	bl	80108ac <pvPortMalloc>
 800e7e0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d00f      	beq.n	800e808 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800e7e8:	69bb      	ldr	r3, [r7, #24]
 800e7ea:	3348      	adds	r3, #72	; 0x48
 800e7ec:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e7ee:	69bb      	ldr	r3, [r7, #24]
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e7f6:	79fa      	ldrb	r2, [r7, #7]
 800e7f8:	69bb      	ldr	r3, [r7, #24]
 800e7fa:	9300      	str	r3, [sp, #0]
 800e7fc:	4613      	mov	r3, r2
 800e7fe:	697a      	ldr	r2, [r7, #20]
 800e800:	68b9      	ldr	r1, [r7, #8]
 800e802:	68f8      	ldr	r0, [r7, #12]
 800e804:	f000 f805 	bl	800e812 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800e808:	69bb      	ldr	r3, [r7, #24]
	}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3720      	adds	r7, #32
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}

0800e812 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e812:	b580      	push	{r7, lr}
 800e814:	b084      	sub	sp, #16
 800e816:	af00      	add	r7, sp, #0
 800e818:	60f8      	str	r0, [r7, #12]
 800e81a:	60b9      	str	r1, [r7, #8]
 800e81c:	607a      	str	r2, [r7, #4]
 800e81e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d103      	bne.n	800e82e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e826:	69bb      	ldr	r3, [r7, #24]
 800e828:	69ba      	ldr	r2, [r7, #24]
 800e82a:	601a      	str	r2, [r3, #0]
 800e82c:	e002      	b.n	800e834 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e82e:	69bb      	ldr	r3, [r7, #24]
 800e830:	687a      	ldr	r2, [r7, #4]
 800e832:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e834:	69bb      	ldr	r3, [r7, #24]
 800e836:	68fa      	ldr	r2, [r7, #12]
 800e838:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e83a:	69bb      	ldr	r3, [r7, #24]
 800e83c:	68ba      	ldr	r2, [r7, #8]
 800e83e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e840:	2101      	movs	r1, #1
 800e842:	69b8      	ldr	r0, [r7, #24]
 800e844:	f7ff fec8 	bl	800e5d8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e848:	bf00      	nop
 800e84a:	3710      	adds	r7, #16
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b08e      	sub	sp, #56	; 0x38
 800e854:	af00      	add	r7, sp, #0
 800e856:	60f8      	str	r0, [r7, #12]
 800e858:	60b9      	str	r1, [r7, #8]
 800e85a:	607a      	str	r2, [r7, #4]
 800e85c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e85e:	2300      	movs	r3, #0
 800e860:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d10a      	bne.n	800e882 <xQueueGenericSend+0x32>
	__asm volatile
 800e86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e870:	f383 8811 	msr	BASEPRI, r3
 800e874:	f3bf 8f6f 	isb	sy
 800e878:	f3bf 8f4f 	dsb	sy
 800e87c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e87e:	bf00      	nop
 800e880:	e7fe      	b.n	800e880 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d103      	bne.n	800e890 <xQueueGenericSend+0x40>
 800e888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d101      	bne.n	800e894 <xQueueGenericSend+0x44>
 800e890:	2301      	movs	r3, #1
 800e892:	e000      	b.n	800e896 <xQueueGenericSend+0x46>
 800e894:	2300      	movs	r3, #0
 800e896:	2b00      	cmp	r3, #0
 800e898:	d10a      	bne.n	800e8b0 <xQueueGenericSend+0x60>
	__asm volatile
 800e89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e89e:	f383 8811 	msr	BASEPRI, r3
 800e8a2:	f3bf 8f6f 	isb	sy
 800e8a6:	f3bf 8f4f 	dsb	sy
 800e8aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e8ac:	bf00      	nop
 800e8ae:	e7fe      	b.n	800e8ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	2b02      	cmp	r3, #2
 800e8b4:	d103      	bne.n	800e8be <xQueueGenericSend+0x6e>
 800e8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8ba:	2b01      	cmp	r3, #1
 800e8bc:	d101      	bne.n	800e8c2 <xQueueGenericSend+0x72>
 800e8be:	2301      	movs	r3, #1
 800e8c0:	e000      	b.n	800e8c4 <xQueueGenericSend+0x74>
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d10a      	bne.n	800e8de <xQueueGenericSend+0x8e>
	__asm volatile
 800e8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8cc:	f383 8811 	msr	BASEPRI, r3
 800e8d0:	f3bf 8f6f 	isb	sy
 800e8d4:	f3bf 8f4f 	dsb	sy
 800e8d8:	623b      	str	r3, [r7, #32]
}
 800e8da:	bf00      	nop
 800e8dc:	e7fe      	b.n	800e8dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e8de:	f001 fbad 	bl	801003c <xTaskGetSchedulerState>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d102      	bne.n	800e8ee <xQueueGenericSend+0x9e>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d101      	bne.n	800e8f2 <xQueueGenericSend+0xa2>
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	e000      	b.n	800e8f4 <xQueueGenericSend+0xa4>
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d10a      	bne.n	800e90e <xQueueGenericSend+0xbe>
	__asm volatile
 800e8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8fc:	f383 8811 	msr	BASEPRI, r3
 800e900:	f3bf 8f6f 	isb	sy
 800e904:	f3bf 8f4f 	dsb	sy
 800e908:	61fb      	str	r3, [r7, #28]
}
 800e90a:	bf00      	nop
 800e90c:	e7fe      	b.n	800e90c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e90e:	f001 fecd 	bl	80106ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d302      	bcc.n	800e924 <xQueueGenericSend+0xd4>
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	2b02      	cmp	r3, #2
 800e922:	d129      	bne.n	800e978 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e924:	683a      	ldr	r2, [r7, #0]
 800e926:	68b9      	ldr	r1, [r7, #8]
 800e928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e92a:	f000 fc5b 	bl	800f1e4 <prvCopyDataToQueue>
 800e92e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e934:	2b00      	cmp	r3, #0
 800e936:	d010      	beq.n	800e95a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e93a:	3324      	adds	r3, #36	; 0x24
 800e93c:	4618      	mov	r0, r3
 800e93e:	f001 f9b9 	bl	800fcb4 <xTaskRemoveFromEventList>
 800e942:	4603      	mov	r3, r0
 800e944:	2b00      	cmp	r3, #0
 800e946:	d013      	beq.n	800e970 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e948:	4b3f      	ldr	r3, [pc, #252]	; (800ea48 <xQueueGenericSend+0x1f8>)
 800e94a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e94e:	601a      	str	r2, [r3, #0]
 800e950:	f3bf 8f4f 	dsb	sy
 800e954:	f3bf 8f6f 	isb	sy
 800e958:	e00a      	b.n	800e970 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d007      	beq.n	800e970 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e960:	4b39      	ldr	r3, [pc, #228]	; (800ea48 <xQueueGenericSend+0x1f8>)
 800e962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e966:	601a      	str	r2, [r3, #0]
 800e968:	f3bf 8f4f 	dsb	sy
 800e96c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e970:	f001 fecc 	bl	801070c <vPortExitCritical>
				return pdPASS;
 800e974:	2301      	movs	r3, #1
 800e976:	e063      	b.n	800ea40 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d103      	bne.n	800e986 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e97e:	f001 fec5 	bl	801070c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e982:	2300      	movs	r3, #0
 800e984:	e05c      	b.n	800ea40 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d106      	bne.n	800e99a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e98c:	f107 0314 	add.w	r3, r7, #20
 800e990:	4618      	mov	r0, r3
 800e992:	f001 f9f1 	bl	800fd78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e996:	2301      	movs	r3, #1
 800e998:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e99a:	f001 feb7 	bl	801070c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e99e:	f000 ff9b 	bl	800f8d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e9a2:	f001 fe83 	bl	80106ac <vPortEnterCritical>
 800e9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e9ac:	b25b      	sxtb	r3, r3
 800e9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9b2:	d103      	bne.n	800e9bc <xQueueGenericSend+0x16c>
 800e9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9c2:	b25b      	sxtb	r3, r3
 800e9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9c8:	d103      	bne.n	800e9d2 <xQueueGenericSend+0x182>
 800e9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e9d2:	f001 fe9b 	bl	801070c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e9d6:	1d3a      	adds	r2, r7, #4
 800e9d8:	f107 0314 	add.w	r3, r7, #20
 800e9dc:	4611      	mov	r1, r2
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f001 f9e0 	bl	800fda4 <xTaskCheckForTimeOut>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d124      	bne.n	800ea34 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e9ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9ec:	f000 fcf2 	bl	800f3d4 <prvIsQueueFull>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d018      	beq.n	800ea28 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f8:	3310      	adds	r3, #16
 800e9fa:	687a      	ldr	r2, [r7, #4]
 800e9fc:	4611      	mov	r1, r2
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f001 f934 	bl	800fc6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ea04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea06:	f000 fc7d 	bl	800f304 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ea0a:	f000 ff73 	bl	800f8f4 <xTaskResumeAll>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	f47f af7c 	bne.w	800e90e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ea16:	4b0c      	ldr	r3, [pc, #48]	; (800ea48 <xQueueGenericSend+0x1f8>)
 800ea18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea1c:	601a      	str	r2, [r3, #0]
 800ea1e:	f3bf 8f4f 	dsb	sy
 800ea22:	f3bf 8f6f 	isb	sy
 800ea26:	e772      	b.n	800e90e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ea28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea2a:	f000 fc6b 	bl	800f304 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea2e:	f000 ff61 	bl	800f8f4 <xTaskResumeAll>
 800ea32:	e76c      	b.n	800e90e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ea34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea36:	f000 fc65 	bl	800f304 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea3a:	f000 ff5b 	bl	800f8f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ea3e:	2300      	movs	r3, #0
		}
	}
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3738      	adds	r7, #56	; 0x38
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}
 800ea48:	e000ed04 	.word	0xe000ed04

0800ea4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b08e      	sub	sp, #56	; 0x38
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	60f8      	str	r0, [r7, #12]
 800ea54:	60b9      	str	r1, [r7, #8]
 800ea56:	607a      	str	r2, [r7, #4]
 800ea58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ea5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d10a      	bne.n	800ea7a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ea64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea68:	f383 8811 	msr	BASEPRI, r3
 800ea6c:	f3bf 8f6f 	isb	sy
 800ea70:	f3bf 8f4f 	dsb	sy
 800ea74:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ea76:	bf00      	nop
 800ea78:	e7fe      	b.n	800ea78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d103      	bne.n	800ea88 <xQueueGenericSendFromISR+0x3c>
 800ea80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d101      	bne.n	800ea8c <xQueueGenericSendFromISR+0x40>
 800ea88:	2301      	movs	r3, #1
 800ea8a:	e000      	b.n	800ea8e <xQueueGenericSendFromISR+0x42>
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d10a      	bne.n	800eaa8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ea92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea96:	f383 8811 	msr	BASEPRI, r3
 800ea9a:	f3bf 8f6f 	isb	sy
 800ea9e:	f3bf 8f4f 	dsb	sy
 800eaa2:	623b      	str	r3, [r7, #32]
}
 800eaa4:	bf00      	nop
 800eaa6:	e7fe      	b.n	800eaa6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	2b02      	cmp	r3, #2
 800eaac:	d103      	bne.n	800eab6 <xQueueGenericSendFromISR+0x6a>
 800eaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eab2:	2b01      	cmp	r3, #1
 800eab4:	d101      	bne.n	800eaba <xQueueGenericSendFromISR+0x6e>
 800eab6:	2301      	movs	r3, #1
 800eab8:	e000      	b.n	800eabc <xQueueGenericSendFromISR+0x70>
 800eaba:	2300      	movs	r3, #0
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d10a      	bne.n	800ead6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800eac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac4:	f383 8811 	msr	BASEPRI, r3
 800eac8:	f3bf 8f6f 	isb	sy
 800eacc:	f3bf 8f4f 	dsb	sy
 800ead0:	61fb      	str	r3, [r7, #28]
}
 800ead2:	bf00      	nop
 800ead4:	e7fe      	b.n	800ead4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ead6:	f001 feab 	bl	8010830 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800eada:	f3ef 8211 	mrs	r2, BASEPRI
 800eade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae2:	f383 8811 	msr	BASEPRI, r3
 800eae6:	f3bf 8f6f 	isb	sy
 800eaea:	f3bf 8f4f 	dsb	sy
 800eaee:	61ba      	str	r2, [r7, #24]
 800eaf0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800eaf2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eaf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d302      	bcc.n	800eb08 <xQueueGenericSendFromISR+0xbc>
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	2b02      	cmp	r3, #2
 800eb06:	d12c      	bne.n	800eb62 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800eb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eb12:	683a      	ldr	r2, [r7, #0]
 800eb14:	68b9      	ldr	r1, [r7, #8]
 800eb16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb18:	f000 fb64 	bl	800f1e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800eb1c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800eb20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb24:	d112      	bne.n	800eb4c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d016      	beq.n	800eb5c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb30:	3324      	adds	r3, #36	; 0x24
 800eb32:	4618      	mov	r0, r3
 800eb34:	f001 f8be 	bl	800fcb4 <xTaskRemoveFromEventList>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d00e      	beq.n	800eb5c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d00b      	beq.n	800eb5c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2201      	movs	r2, #1
 800eb48:	601a      	str	r2, [r3, #0]
 800eb4a:	e007      	b.n	800eb5c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800eb4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eb50:	3301      	adds	r3, #1
 800eb52:	b2db      	uxtb	r3, r3
 800eb54:	b25a      	sxtb	r2, r3
 800eb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800eb60:	e001      	b.n	800eb66 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eb62:	2300      	movs	r3, #0
 800eb64:	637b      	str	r3, [r7, #52]	; 0x34
 800eb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb68:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800eb70:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eb72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3738      	adds	r7, #56	; 0x38
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}

0800eb7c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b08e      	sub	sp, #56	; 0x38
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800eb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d10a      	bne.n	800eba6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800eb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb94:	f383 8811 	msr	BASEPRI, r3
 800eb98:	f3bf 8f6f 	isb	sy
 800eb9c:	f3bf 8f4f 	dsb	sy
 800eba0:	623b      	str	r3, [r7, #32]
}
 800eba2:	bf00      	nop
 800eba4:	e7fe      	b.n	800eba4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800eba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d00a      	beq.n	800ebc4 <xQueueGiveFromISR+0x48>
	__asm volatile
 800ebae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb2:	f383 8811 	msr	BASEPRI, r3
 800ebb6:	f3bf 8f6f 	isb	sy
 800ebba:	f3bf 8f4f 	dsb	sy
 800ebbe:	61fb      	str	r3, [r7, #28]
}
 800ebc0:	bf00      	nop
 800ebc2:	e7fe      	b.n	800ebc2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800ebc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d103      	bne.n	800ebd4 <xQueueGiveFromISR+0x58>
 800ebcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d101      	bne.n	800ebd8 <xQueueGiveFromISR+0x5c>
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	e000      	b.n	800ebda <xQueueGiveFromISR+0x5e>
 800ebd8:	2300      	movs	r3, #0
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d10a      	bne.n	800ebf4 <xQueueGiveFromISR+0x78>
	__asm volatile
 800ebde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe2:	f383 8811 	msr	BASEPRI, r3
 800ebe6:	f3bf 8f6f 	isb	sy
 800ebea:	f3bf 8f4f 	dsb	sy
 800ebee:	61bb      	str	r3, [r7, #24]
}
 800ebf0:	bf00      	nop
 800ebf2:	e7fe      	b.n	800ebf2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ebf4:	f001 fe1c 	bl	8010830 <vPortValidateInterruptPriority>
	__asm volatile
 800ebf8:	f3ef 8211 	mrs	r2, BASEPRI
 800ebfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec00:	f383 8811 	msr	BASEPRI, r3
 800ec04:	f3bf 8f6f 	isb	sy
 800ec08:	f3bf 8f4f 	dsb	sy
 800ec0c:	617a      	str	r2, [r7, #20]
 800ec0e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ec10:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec12:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec18:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ec1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d22b      	bcs.n	800ec7c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ec24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ec2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec30:	1c5a      	adds	r2, r3, #1
 800ec32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec34:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ec36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec3e:	d112      	bne.n	800ec66 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d016      	beq.n	800ec76 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec4a:	3324      	adds	r3, #36	; 0x24
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f001 f831 	bl	800fcb4 <xTaskRemoveFromEventList>
 800ec52:	4603      	mov	r3, r0
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d00e      	beq.n	800ec76 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d00b      	beq.n	800ec76 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	2201      	movs	r2, #1
 800ec62:	601a      	str	r2, [r3, #0]
 800ec64:	e007      	b.n	800ec76 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ec66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec6a:	3301      	adds	r3, #1
 800ec6c:	b2db      	uxtb	r3, r3
 800ec6e:	b25a      	sxtb	r2, r3
 800ec70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ec76:	2301      	movs	r3, #1
 800ec78:	637b      	str	r3, [r7, #52]	; 0x34
 800ec7a:	e001      	b.n	800ec80 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	637b      	str	r3, [r7, #52]	; 0x34
 800ec80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec82:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	f383 8811 	msr	BASEPRI, r3
}
 800ec8a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ec8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3738      	adds	r7, #56	; 0x38
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
	...

0800ec98 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b08c      	sub	sp, #48	; 0x30
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800eca4:	2300      	movs	r3, #0
 800eca6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ecac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d10a      	bne.n	800ecc8 <xQueueReceive+0x30>
	__asm volatile
 800ecb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb6:	f383 8811 	msr	BASEPRI, r3
 800ecba:	f3bf 8f6f 	isb	sy
 800ecbe:	f3bf 8f4f 	dsb	sy
 800ecc2:	623b      	str	r3, [r7, #32]
}
 800ecc4:	bf00      	nop
 800ecc6:	e7fe      	b.n	800ecc6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d103      	bne.n	800ecd6 <xQueueReceive+0x3e>
 800ecce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d101      	bne.n	800ecda <xQueueReceive+0x42>
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	e000      	b.n	800ecdc <xQueueReceive+0x44>
 800ecda:	2300      	movs	r3, #0
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d10a      	bne.n	800ecf6 <xQueueReceive+0x5e>
	__asm volatile
 800ece0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ece4:	f383 8811 	msr	BASEPRI, r3
 800ece8:	f3bf 8f6f 	isb	sy
 800ecec:	f3bf 8f4f 	dsb	sy
 800ecf0:	61fb      	str	r3, [r7, #28]
}
 800ecf2:	bf00      	nop
 800ecf4:	e7fe      	b.n	800ecf4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ecf6:	f001 f9a1 	bl	801003c <xTaskGetSchedulerState>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d102      	bne.n	800ed06 <xQueueReceive+0x6e>
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d101      	bne.n	800ed0a <xQueueReceive+0x72>
 800ed06:	2301      	movs	r3, #1
 800ed08:	e000      	b.n	800ed0c <xQueueReceive+0x74>
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d10a      	bne.n	800ed26 <xQueueReceive+0x8e>
	__asm volatile
 800ed10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed14:	f383 8811 	msr	BASEPRI, r3
 800ed18:	f3bf 8f6f 	isb	sy
 800ed1c:	f3bf 8f4f 	dsb	sy
 800ed20:	61bb      	str	r3, [r7, #24]
}
 800ed22:	bf00      	nop
 800ed24:	e7fe      	b.n	800ed24 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ed26:	f001 fcc1 	bl	80106ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d01f      	beq.n	800ed76 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ed36:	68b9      	ldr	r1, [r7, #8]
 800ed38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed3a:	f000 fabd 	bl	800f2b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ed3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed40:	1e5a      	subs	r2, r3, #1
 800ed42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed48:	691b      	ldr	r3, [r3, #16]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d00f      	beq.n	800ed6e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed50:	3310      	adds	r3, #16
 800ed52:	4618      	mov	r0, r3
 800ed54:	f000 ffae 	bl	800fcb4 <xTaskRemoveFromEventList>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d007      	beq.n	800ed6e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ed5e:	4b3d      	ldr	r3, [pc, #244]	; (800ee54 <xQueueReceive+0x1bc>)
 800ed60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed64:	601a      	str	r2, [r3, #0]
 800ed66:	f3bf 8f4f 	dsb	sy
 800ed6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ed6e:	f001 fccd 	bl	801070c <vPortExitCritical>
				return pdPASS;
 800ed72:	2301      	movs	r3, #1
 800ed74:	e069      	b.n	800ee4a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d103      	bne.n	800ed84 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ed7c:	f001 fcc6 	bl	801070c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ed80:	2300      	movs	r3, #0
 800ed82:	e062      	b.n	800ee4a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ed84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d106      	bne.n	800ed98 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ed8a:	f107 0310 	add.w	r3, r7, #16
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f000 fff2 	bl	800fd78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ed94:	2301      	movs	r3, #1
 800ed96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ed98:	f001 fcb8 	bl	801070c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ed9c:	f000 fd9c 	bl	800f8d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eda0:	f001 fc84 	bl	80106ac <vPortEnterCritical>
 800eda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800edaa:	b25b      	sxtb	r3, r3
 800edac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edb0:	d103      	bne.n	800edba <xQueueReceive+0x122>
 800edb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb4:	2200      	movs	r2, #0
 800edb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800edba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800edc0:	b25b      	sxtb	r3, r3
 800edc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edc6:	d103      	bne.n	800edd0 <xQueueReceive+0x138>
 800edc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edca:	2200      	movs	r2, #0
 800edcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800edd0:	f001 fc9c 	bl	801070c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800edd4:	1d3a      	adds	r2, r7, #4
 800edd6:	f107 0310 	add.w	r3, r7, #16
 800edda:	4611      	mov	r1, r2
 800eddc:	4618      	mov	r0, r3
 800edde:	f000 ffe1 	bl	800fda4 <xTaskCheckForTimeOut>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d123      	bne.n	800ee30 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ede8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edea:	f000 fadd 	bl	800f3a8 <prvIsQueueEmpty>
 800edee:	4603      	mov	r3, r0
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d017      	beq.n	800ee24 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800edf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf6:	3324      	adds	r3, #36	; 0x24
 800edf8:	687a      	ldr	r2, [r7, #4]
 800edfa:	4611      	mov	r1, r2
 800edfc:	4618      	mov	r0, r3
 800edfe:	f000 ff35 	bl	800fc6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ee02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee04:	f000 fa7e 	bl	800f304 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ee08:	f000 fd74 	bl	800f8f4 <xTaskResumeAll>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d189      	bne.n	800ed26 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ee12:	4b10      	ldr	r3, [pc, #64]	; (800ee54 <xQueueReceive+0x1bc>)
 800ee14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee18:	601a      	str	r2, [r3, #0]
 800ee1a:	f3bf 8f4f 	dsb	sy
 800ee1e:	f3bf 8f6f 	isb	sy
 800ee22:	e780      	b.n	800ed26 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ee24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee26:	f000 fa6d 	bl	800f304 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ee2a:	f000 fd63 	bl	800f8f4 <xTaskResumeAll>
 800ee2e:	e77a      	b.n	800ed26 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ee30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee32:	f000 fa67 	bl	800f304 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ee36:	f000 fd5d 	bl	800f8f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ee3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee3c:	f000 fab4 	bl	800f3a8 <prvIsQueueEmpty>
 800ee40:	4603      	mov	r3, r0
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	f43f af6f 	beq.w	800ed26 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ee48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3730      	adds	r7, #48	; 0x30
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	e000ed04 	.word	0xe000ed04

0800ee58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b08e      	sub	sp, #56	; 0x38
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ee62:	2300      	movs	r3, #0
 800ee64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ee6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d10a      	bne.n	800ee8a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ee74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee78:	f383 8811 	msr	BASEPRI, r3
 800ee7c:	f3bf 8f6f 	isb	sy
 800ee80:	f3bf 8f4f 	dsb	sy
 800ee84:	623b      	str	r3, [r7, #32]
}
 800ee86:	bf00      	nop
 800ee88:	e7fe      	b.n	800ee88 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ee8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d00a      	beq.n	800eea8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ee92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee96:	f383 8811 	msr	BASEPRI, r3
 800ee9a:	f3bf 8f6f 	isb	sy
 800ee9e:	f3bf 8f4f 	dsb	sy
 800eea2:	61fb      	str	r3, [r7, #28]
}
 800eea4:	bf00      	nop
 800eea6:	e7fe      	b.n	800eea6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eea8:	f001 f8c8 	bl	801003c <xTaskGetSchedulerState>
 800eeac:	4603      	mov	r3, r0
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d102      	bne.n	800eeb8 <xQueueSemaphoreTake+0x60>
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d101      	bne.n	800eebc <xQueueSemaphoreTake+0x64>
 800eeb8:	2301      	movs	r3, #1
 800eeba:	e000      	b.n	800eebe <xQueueSemaphoreTake+0x66>
 800eebc:	2300      	movs	r3, #0
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d10a      	bne.n	800eed8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800eec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec6:	f383 8811 	msr	BASEPRI, r3
 800eeca:	f3bf 8f6f 	isb	sy
 800eece:	f3bf 8f4f 	dsb	sy
 800eed2:	61bb      	str	r3, [r7, #24]
}
 800eed4:	bf00      	nop
 800eed6:	e7fe      	b.n	800eed6 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800eed8:	f001 fbe8 	bl	80106ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800eedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eee0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800eee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d024      	beq.n	800ef32 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800eee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeea:	1e5a      	subs	r2, r3, #1
 800eeec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d104      	bne.n	800ef02 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800eef8:	f001 fa6a 	bl	80103d0 <pvTaskIncrementMutexHeldCount>
 800eefc:	4602      	mov	r2, r0
 800eefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef00:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef04:	691b      	ldr	r3, [r3, #16]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d00f      	beq.n	800ef2a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef0c:	3310      	adds	r3, #16
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f000 fed0 	bl	800fcb4 <xTaskRemoveFromEventList>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d007      	beq.n	800ef2a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ef1a:	4b54      	ldr	r3, [pc, #336]	; (800f06c <xQueueSemaphoreTake+0x214>)
 800ef1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef20:	601a      	str	r2, [r3, #0]
 800ef22:	f3bf 8f4f 	dsb	sy
 800ef26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ef2a:	f001 fbef 	bl	801070c <vPortExitCritical>
				return pdPASS;
 800ef2e:	2301      	movs	r3, #1
 800ef30:	e097      	b.n	800f062 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d111      	bne.n	800ef5c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ef38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d00a      	beq.n	800ef54 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ef3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef42:	f383 8811 	msr	BASEPRI, r3
 800ef46:	f3bf 8f6f 	isb	sy
 800ef4a:	f3bf 8f4f 	dsb	sy
 800ef4e:	617b      	str	r3, [r7, #20]
}
 800ef50:	bf00      	nop
 800ef52:	e7fe      	b.n	800ef52 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ef54:	f001 fbda 	bl	801070c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	e082      	b.n	800f062 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ef5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d106      	bne.n	800ef70 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef62:	f107 030c 	add.w	r3, r7, #12
 800ef66:	4618      	mov	r0, r3
 800ef68:	f000 ff06 	bl	800fd78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ef70:	f001 fbcc 	bl	801070c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ef74:	f000 fcb0 	bl	800f8d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef78:	f001 fb98 	bl	80106ac <vPortEnterCritical>
 800ef7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef82:	b25b      	sxtb	r3, r3
 800ef84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef88:	d103      	bne.n	800ef92 <xQueueSemaphoreTake+0x13a>
 800ef8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef98:	b25b      	sxtb	r3, r3
 800ef9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef9e:	d103      	bne.n	800efa8 <xQueueSemaphoreTake+0x150>
 800efa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa2:	2200      	movs	r2, #0
 800efa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800efa8:	f001 fbb0 	bl	801070c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800efac:	463a      	mov	r2, r7
 800efae:	f107 030c 	add.w	r3, r7, #12
 800efb2:	4611      	mov	r1, r2
 800efb4:	4618      	mov	r0, r3
 800efb6:	f000 fef5 	bl	800fda4 <xTaskCheckForTimeOut>
 800efba:	4603      	mov	r3, r0
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d132      	bne.n	800f026 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800efc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efc2:	f000 f9f1 	bl	800f3a8 <prvIsQueueEmpty>
 800efc6:	4603      	mov	r3, r0
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d026      	beq.n	800f01a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800efcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d109      	bne.n	800efe8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800efd4:	f001 fb6a 	bl	80106ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800efd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efda:	685b      	ldr	r3, [r3, #4]
 800efdc:	4618      	mov	r0, r3
 800efde:	f001 f84b 	bl	8010078 <xTaskPriorityInherit>
 800efe2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800efe4:	f001 fb92 	bl	801070c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800efe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efea:	3324      	adds	r3, #36	; 0x24
 800efec:	683a      	ldr	r2, [r7, #0]
 800efee:	4611      	mov	r1, r2
 800eff0:	4618      	mov	r0, r3
 800eff2:	f000 fe3b 	bl	800fc6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eff6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eff8:	f000 f984 	bl	800f304 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800effc:	f000 fc7a 	bl	800f8f4 <xTaskResumeAll>
 800f000:	4603      	mov	r3, r0
 800f002:	2b00      	cmp	r3, #0
 800f004:	f47f af68 	bne.w	800eed8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f008:	4b18      	ldr	r3, [pc, #96]	; (800f06c <xQueueSemaphoreTake+0x214>)
 800f00a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f00e:	601a      	str	r2, [r3, #0]
 800f010:	f3bf 8f4f 	dsb	sy
 800f014:	f3bf 8f6f 	isb	sy
 800f018:	e75e      	b.n	800eed8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f01a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f01c:	f000 f972 	bl	800f304 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f020:	f000 fc68 	bl	800f8f4 <xTaskResumeAll>
 800f024:	e758      	b.n	800eed8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f026:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f028:	f000 f96c 	bl	800f304 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f02c:	f000 fc62 	bl	800f8f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f030:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f032:	f000 f9b9 	bl	800f3a8 <prvIsQueueEmpty>
 800f036:	4603      	mov	r3, r0
 800f038:	2b00      	cmp	r3, #0
 800f03a:	f43f af4d 	beq.w	800eed8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f040:	2b00      	cmp	r3, #0
 800f042:	d00d      	beq.n	800f060 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f044:	f001 fb32 	bl	80106ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f048:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f04a:	f000 f8b4 	bl	800f1b6 <prvGetDisinheritPriorityAfterTimeout>
 800f04e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800f050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f056:	4618      	mov	r0, r3
 800f058:	f001 f91a 	bl	8010290 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f05c:	f001 fb56 	bl	801070c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f060:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800f062:	4618      	mov	r0, r3
 800f064:	3738      	adds	r7, #56	; 0x38
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	e000ed04 	.word	0xe000ed04

0800f070 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b08e      	sub	sp, #56	; 0x38
 800f074:	af00      	add	r7, sp, #0
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	60b9      	str	r1, [r7, #8]
 800f07a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f082:	2b00      	cmp	r3, #0
 800f084:	d10a      	bne.n	800f09c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f08a:	f383 8811 	msr	BASEPRI, r3
 800f08e:	f3bf 8f6f 	isb	sy
 800f092:	f3bf 8f4f 	dsb	sy
 800f096:	623b      	str	r3, [r7, #32]
}
 800f098:	bf00      	nop
 800f09a:	e7fe      	b.n	800f09a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d103      	bne.n	800f0aa <xQueueReceiveFromISR+0x3a>
 800f0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d101      	bne.n	800f0ae <xQueueReceiveFromISR+0x3e>
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	e000      	b.n	800f0b0 <xQueueReceiveFromISR+0x40>
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d10a      	bne.n	800f0ca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0b8:	f383 8811 	msr	BASEPRI, r3
 800f0bc:	f3bf 8f6f 	isb	sy
 800f0c0:	f3bf 8f4f 	dsb	sy
 800f0c4:	61fb      	str	r3, [r7, #28]
}
 800f0c6:	bf00      	nop
 800f0c8:	e7fe      	b.n	800f0c8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f0ca:	f001 fbb1 	bl	8010830 <vPortValidateInterruptPriority>
	__asm volatile
 800f0ce:	f3ef 8211 	mrs	r2, BASEPRI
 800f0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d6:	f383 8811 	msr	BASEPRI, r3
 800f0da:	f3bf 8f6f 	isb	sy
 800f0de:	f3bf 8f4f 	dsb	sy
 800f0e2:	61ba      	str	r2, [r7, #24]
 800f0e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f0e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d02f      	beq.n	800f156 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f0fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f100:	68b9      	ldr	r1, [r7, #8]
 800f102:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f104:	f000 f8d8 	bl	800f2b8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f10a:	1e5a      	subs	r2, r3, #1
 800f10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f10e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f110:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f118:	d112      	bne.n	800f140 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f11c:	691b      	ldr	r3, [r3, #16]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d016      	beq.n	800f150 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f124:	3310      	adds	r3, #16
 800f126:	4618      	mov	r0, r3
 800f128:	f000 fdc4 	bl	800fcb4 <xTaskRemoveFromEventList>
 800f12c:	4603      	mov	r3, r0
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d00e      	beq.n	800f150 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d00b      	beq.n	800f150 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2201      	movs	r2, #1
 800f13c:	601a      	str	r2, [r3, #0]
 800f13e:	e007      	b.n	800f150 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f144:	3301      	adds	r3, #1
 800f146:	b2db      	uxtb	r3, r3
 800f148:	b25a      	sxtb	r2, r3
 800f14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f14c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f150:	2301      	movs	r3, #1
 800f152:	637b      	str	r3, [r7, #52]	; 0x34
 800f154:	e001      	b.n	800f15a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f156:	2300      	movs	r3, #0
 800f158:	637b      	str	r3, [r7, #52]	; 0x34
 800f15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f15c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f15e:	693b      	ldr	r3, [r7, #16]
 800f160:	f383 8811 	msr	BASEPRI, r3
}
 800f164:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3738      	adds	r7, #56	; 0x38
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b084      	sub	sp, #16
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d10a      	bne.n	800f198 <vQueueDelete+0x28>
	__asm volatile
 800f182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f186:	f383 8811 	msr	BASEPRI, r3
 800f18a:	f3bf 8f6f 	isb	sy
 800f18e:	f3bf 8f4f 	dsb	sy
 800f192:	60bb      	str	r3, [r7, #8]
}
 800f194:	bf00      	nop
 800f196:	e7fe      	b.n	800f196 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f198:	68f8      	ldr	r0, [r7, #12]
 800f19a:	f000 f933 	bl	800f404 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d102      	bne.n	800f1ae <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f1a8:	68f8      	ldr	r0, [r7, #12]
 800f1aa:	f001 fc43 	bl	8010a34 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f1ae:	bf00      	nop
 800f1b0:	3710      	adds	r7, #16
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}

0800f1b6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f1b6:	b480      	push	{r7}
 800f1b8:	b085      	sub	sp, #20
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d006      	beq.n	800f1d4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	f1c3 0307 	rsb	r3, r3, #7
 800f1d0:	60fb      	str	r3, [r7, #12]
 800f1d2:	e001      	b.n	800f1d8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
	}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3714      	adds	r7, #20
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bc80      	pop	{r7}
 800f1e2:	4770      	bx	lr

0800f1e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b086      	sub	sp, #24
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	60f8      	str	r0, [r7, #12]
 800f1ec:	60b9      	str	r1, [r7, #8]
 800f1ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d10d      	bne.n	800f21e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d14d      	bne.n	800f2a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	685b      	ldr	r3, [r3, #4]
 800f20e:	4618      	mov	r0, r3
 800f210:	f000 ffb8 	bl	8010184 <xTaskPriorityDisinherit>
 800f214:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	2200      	movs	r2, #0
 800f21a:	605a      	str	r2, [r3, #4]
 800f21c:	e043      	b.n	800f2a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d119      	bne.n	800f258 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	6898      	ldr	r0, [r3, #8]
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f22c:	461a      	mov	r2, r3
 800f22e:	68b9      	ldr	r1, [r7, #8]
 800f230:	f002 f988 	bl	8011544 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	689a      	ldr	r2, [r3, #8]
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f23c:	441a      	add	r2, r3
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	689a      	ldr	r2, [r3, #8]
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	685b      	ldr	r3, [r3, #4]
 800f24a:	429a      	cmp	r2, r3
 800f24c:	d32b      	bcc.n	800f2a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	681a      	ldr	r2, [r3, #0]
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	609a      	str	r2, [r3, #8]
 800f256:	e026      	b.n	800f2a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	68d8      	ldr	r0, [r3, #12]
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f260:	461a      	mov	r2, r3
 800f262:	68b9      	ldr	r1, [r7, #8]
 800f264:	f002 f96e 	bl	8011544 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	68da      	ldr	r2, [r3, #12]
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f270:	425b      	negs	r3, r3
 800f272:	441a      	add	r2, r3
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	68da      	ldr	r2, [r3, #12]
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	429a      	cmp	r2, r3
 800f282:	d207      	bcs.n	800f294 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	685a      	ldr	r2, [r3, #4]
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f28c:	425b      	negs	r3, r3
 800f28e:	441a      	add	r2, r3
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2b02      	cmp	r3, #2
 800f298:	d105      	bne.n	800f2a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f29a:	693b      	ldr	r3, [r7, #16]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d002      	beq.n	800f2a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	3b01      	subs	r3, #1
 800f2a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f2a6:	693b      	ldr	r3, [r7, #16]
 800f2a8:	1c5a      	adds	r2, r3, #1
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f2ae:	697b      	ldr	r3, [r7, #20]
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3718      	adds	r7, #24
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}

0800f2b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b082      	sub	sp, #8
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d018      	beq.n	800f2fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	68da      	ldr	r2, [r3, #12]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2d2:	441a      	add	r2, r3
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	68da      	ldr	r2, [r3, #12]
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	429a      	cmp	r2, r3
 800f2e2:	d303      	bcc.n	800f2ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681a      	ldr	r2, [r3, #0]
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	68d9      	ldr	r1, [r3, #12]
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2f4:	461a      	mov	r2, r3
 800f2f6:	6838      	ldr	r0, [r7, #0]
 800f2f8:	f002 f924 	bl	8011544 <memcpy>
	}
}
 800f2fc:	bf00      	nop
 800f2fe:	3708      	adds	r7, #8
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}

0800f304 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b084      	sub	sp, #16
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f30c:	f001 f9ce 	bl	80106ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f316:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f318:	e011      	b.n	800f33e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d012      	beq.n	800f348 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	3324      	adds	r3, #36	; 0x24
 800f326:	4618      	mov	r0, r3
 800f328:	f000 fcc4 	bl	800fcb4 <xTaskRemoveFromEventList>
 800f32c:	4603      	mov	r3, r0
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d001      	beq.n	800f336 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f332:	f000 fd99 	bl	800fe68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f336:	7bfb      	ldrb	r3, [r7, #15]
 800f338:	3b01      	subs	r3, #1
 800f33a:	b2db      	uxtb	r3, r3
 800f33c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f33e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f342:	2b00      	cmp	r3, #0
 800f344:	dce9      	bgt.n	800f31a <prvUnlockQueue+0x16>
 800f346:	e000      	b.n	800f34a <prvUnlockQueue+0x46>
					break;
 800f348:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	22ff      	movs	r2, #255	; 0xff
 800f34e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f352:	f001 f9db 	bl	801070c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f356:	f001 f9a9 	bl	80106ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f360:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f362:	e011      	b.n	800f388 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	691b      	ldr	r3, [r3, #16]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d012      	beq.n	800f392 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	3310      	adds	r3, #16
 800f370:	4618      	mov	r0, r3
 800f372:	f000 fc9f 	bl	800fcb4 <xTaskRemoveFromEventList>
 800f376:	4603      	mov	r3, r0
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d001      	beq.n	800f380 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f37c:	f000 fd74 	bl	800fe68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f380:	7bbb      	ldrb	r3, [r7, #14]
 800f382:	3b01      	subs	r3, #1
 800f384:	b2db      	uxtb	r3, r3
 800f386:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f388:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	dce9      	bgt.n	800f364 <prvUnlockQueue+0x60>
 800f390:	e000      	b.n	800f394 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f392:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	22ff      	movs	r2, #255	; 0xff
 800f398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f39c:	f001 f9b6 	bl	801070c <vPortExitCritical>
}
 800f3a0:	bf00      	nop
 800f3a2:	3710      	adds	r7, #16
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}

0800f3a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f3b0:	f001 f97c 	bl	80106ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d102      	bne.n	800f3c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f3bc:	2301      	movs	r3, #1
 800f3be:	60fb      	str	r3, [r7, #12]
 800f3c0:	e001      	b.n	800f3c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f3c6:	f001 f9a1 	bl	801070c <vPortExitCritical>

	return xReturn;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	3710      	adds	r7, #16
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b084      	sub	sp, #16
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f3dc:	f001 f966 	bl	80106ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d102      	bne.n	800f3f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	60fb      	str	r3, [r7, #12]
 800f3f0:	e001      	b.n	800f3f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f3f6:	f001 f989 	bl	801070c <vPortExitCritical>

	return xReturn;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3710      	adds	r7, #16
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}

0800f404 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f404:	b480      	push	{r7}
 800f406:	b085      	sub	sp, #20
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f40c:	2300      	movs	r3, #0
 800f40e:	60fb      	str	r3, [r7, #12]
 800f410:	e016      	b.n	800f440 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f412:	4a10      	ldr	r2, [pc, #64]	; (800f454 <vQueueUnregisterQueue+0x50>)
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	00db      	lsls	r3, r3, #3
 800f418:	4413      	add	r3, r2
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	687a      	ldr	r2, [r7, #4]
 800f41e:	429a      	cmp	r2, r3
 800f420:	d10b      	bne.n	800f43a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f422:	4a0c      	ldr	r2, [pc, #48]	; (800f454 <vQueueUnregisterQueue+0x50>)
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	2100      	movs	r1, #0
 800f428:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f42c:	4a09      	ldr	r2, [pc, #36]	; (800f454 <vQueueUnregisterQueue+0x50>)
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	00db      	lsls	r3, r3, #3
 800f432:	4413      	add	r3, r2
 800f434:	2200      	movs	r2, #0
 800f436:	605a      	str	r2, [r3, #4]
				break;
 800f438:	e006      	b.n	800f448 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	3301      	adds	r3, #1
 800f43e:	60fb      	str	r3, [r7, #12]
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	2b07      	cmp	r3, #7
 800f444:	d9e5      	bls.n	800f412 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f446:	bf00      	nop
 800f448:	bf00      	nop
 800f44a:	3714      	adds	r7, #20
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bc80      	pop	{r7}
 800f450:	4770      	bx	lr
 800f452:	bf00      	nop
 800f454:	2000ac7c 	.word	0x2000ac7c

0800f458 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b08e      	sub	sp, #56	; 0x38
 800f45c:	af04      	add	r7, sp, #16
 800f45e:	60f8      	str	r0, [r7, #12]
 800f460:	60b9      	str	r1, [r7, #8]
 800f462:	607a      	str	r2, [r7, #4]
 800f464:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d10a      	bne.n	800f482 <xTaskCreateStatic+0x2a>
	__asm volatile
 800f46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f470:	f383 8811 	msr	BASEPRI, r3
 800f474:	f3bf 8f6f 	isb	sy
 800f478:	f3bf 8f4f 	dsb	sy
 800f47c:	623b      	str	r3, [r7, #32]
}
 800f47e:	bf00      	nop
 800f480:	e7fe      	b.n	800f480 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f484:	2b00      	cmp	r3, #0
 800f486:	d10a      	bne.n	800f49e <xTaskCreateStatic+0x46>
	__asm volatile
 800f488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f48c:	f383 8811 	msr	BASEPRI, r3
 800f490:	f3bf 8f6f 	isb	sy
 800f494:	f3bf 8f4f 	dsb	sy
 800f498:	61fb      	str	r3, [r7, #28]
}
 800f49a:	bf00      	nop
 800f49c:	e7fe      	b.n	800f49c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f49e:	23b4      	movs	r3, #180	; 0xb4
 800f4a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	2bb4      	cmp	r3, #180	; 0xb4
 800f4a6:	d00a      	beq.n	800f4be <xTaskCreateStatic+0x66>
	__asm volatile
 800f4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ac:	f383 8811 	msr	BASEPRI, r3
 800f4b0:	f3bf 8f6f 	isb	sy
 800f4b4:	f3bf 8f4f 	dsb	sy
 800f4b8:	61bb      	str	r3, [r7, #24]
}
 800f4ba:	bf00      	nop
 800f4bc:	e7fe      	b.n	800f4bc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d01e      	beq.n	800f502 <xTaskCreateStatic+0xaa>
 800f4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d01b      	beq.n	800f502 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4cc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4d2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d6:	2202      	movs	r2, #2
 800f4d8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f4dc:	2300      	movs	r3, #0
 800f4de:	9303      	str	r3, [sp, #12]
 800f4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e2:	9302      	str	r3, [sp, #8]
 800f4e4:	f107 0314 	add.w	r3, r7, #20
 800f4e8:	9301      	str	r3, [sp, #4]
 800f4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ec:	9300      	str	r3, [sp, #0]
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	687a      	ldr	r2, [r7, #4]
 800f4f2:	68b9      	ldr	r1, [r7, #8]
 800f4f4:	68f8      	ldr	r0, [r7, #12]
 800f4f6:	f000 f851 	bl	800f59c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f4fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4fc:	f000 f8e4 	bl	800f6c8 <prvAddNewTaskToReadyList>
 800f500:	e001      	b.n	800f506 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800f502:	2300      	movs	r3, #0
 800f504:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f506:	697b      	ldr	r3, [r7, #20]
	}
 800f508:	4618      	mov	r0, r3
 800f50a:	3728      	adds	r7, #40	; 0x28
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}

0800f510 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f510:	b580      	push	{r7, lr}
 800f512:	b08c      	sub	sp, #48	; 0x30
 800f514:	af04      	add	r7, sp, #16
 800f516:	60f8      	str	r0, [r7, #12]
 800f518:	60b9      	str	r1, [r7, #8]
 800f51a:	603b      	str	r3, [r7, #0]
 800f51c:	4613      	mov	r3, r2
 800f51e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f520:	88fb      	ldrh	r3, [r7, #6]
 800f522:	009b      	lsls	r3, r3, #2
 800f524:	4618      	mov	r0, r3
 800f526:	f001 f9c1 	bl	80108ac <pvPortMalloc>
 800f52a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f52c:	697b      	ldr	r3, [r7, #20]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d00e      	beq.n	800f550 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800f532:	20b4      	movs	r0, #180	; 0xb4
 800f534:	f001 f9ba 	bl	80108ac <pvPortMalloc>
 800f538:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f53a:	69fb      	ldr	r3, [r7, #28]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d003      	beq.n	800f548 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f540:	69fb      	ldr	r3, [r7, #28]
 800f542:	697a      	ldr	r2, [r7, #20]
 800f544:	631a      	str	r2, [r3, #48]	; 0x30
 800f546:	e005      	b.n	800f554 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f548:	6978      	ldr	r0, [r7, #20]
 800f54a:	f001 fa73 	bl	8010a34 <vPortFree>
 800f54e:	e001      	b.n	800f554 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f550:	2300      	movs	r3, #0
 800f552:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f554:	69fb      	ldr	r3, [r7, #28]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d017      	beq.n	800f58a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f55a:	69fb      	ldr	r3, [r7, #28]
 800f55c:	2200      	movs	r2, #0
 800f55e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f562:	88fa      	ldrh	r2, [r7, #6]
 800f564:	2300      	movs	r3, #0
 800f566:	9303      	str	r3, [sp, #12]
 800f568:	69fb      	ldr	r3, [r7, #28]
 800f56a:	9302      	str	r3, [sp, #8]
 800f56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f56e:	9301      	str	r3, [sp, #4]
 800f570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f572:	9300      	str	r3, [sp, #0]
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	68b9      	ldr	r1, [r7, #8]
 800f578:	68f8      	ldr	r0, [r7, #12]
 800f57a:	f000 f80f 	bl	800f59c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f57e:	69f8      	ldr	r0, [r7, #28]
 800f580:	f000 f8a2 	bl	800f6c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f584:	2301      	movs	r3, #1
 800f586:	61bb      	str	r3, [r7, #24]
 800f588:	e002      	b.n	800f590 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f58a:	f04f 33ff 	mov.w	r3, #4294967295
 800f58e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f590:	69bb      	ldr	r3, [r7, #24]
	}
 800f592:	4618      	mov	r0, r3
 800f594:	3720      	adds	r7, #32
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}
	...

0800f59c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b088      	sub	sp, #32
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	60f8      	str	r0, [r7, #12]
 800f5a4:	60b9      	str	r1, [r7, #8]
 800f5a6:	607a      	str	r2, [r7, #4]
 800f5a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800f5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f5b4:	3b01      	subs	r3, #1
 800f5b6:	009b      	lsls	r3, r3, #2
 800f5b8:	4413      	add	r3, r2
 800f5ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800f5bc:	69bb      	ldr	r3, [r7, #24]
 800f5be:	f023 0307 	bic.w	r3, r3, #7
 800f5c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f5c4:	69bb      	ldr	r3, [r7, #24]
 800f5c6:	f003 0307 	and.w	r3, r3, #7
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d00a      	beq.n	800f5e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800f5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d2:	f383 8811 	msr	BASEPRI, r3
 800f5d6:	f3bf 8f6f 	isb	sy
 800f5da:	f3bf 8f4f 	dsb	sy
 800f5de:	617b      	str	r3, [r7, #20]
}
 800f5e0:	bf00      	nop
 800f5e2:	e7fe      	b.n	800f5e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	61fb      	str	r3, [r7, #28]
 800f5e8:	e012      	b.n	800f610 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f5ea:	68ba      	ldr	r2, [r7, #8]
 800f5ec:	69fb      	ldr	r3, [r7, #28]
 800f5ee:	4413      	add	r3, r2
 800f5f0:	7819      	ldrb	r1, [r3, #0]
 800f5f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5f4:	69fb      	ldr	r3, [r7, #28]
 800f5f6:	4413      	add	r3, r2
 800f5f8:	3334      	adds	r3, #52	; 0x34
 800f5fa:	460a      	mov	r2, r1
 800f5fc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800f5fe:	68ba      	ldr	r2, [r7, #8]
 800f600:	69fb      	ldr	r3, [r7, #28]
 800f602:	4413      	add	r3, r2
 800f604:	781b      	ldrb	r3, [r3, #0]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d006      	beq.n	800f618 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f60a:	69fb      	ldr	r3, [r7, #28]
 800f60c:	3301      	adds	r3, #1
 800f60e:	61fb      	str	r3, [r7, #28]
 800f610:	69fb      	ldr	r3, [r7, #28]
 800f612:	2b0f      	cmp	r3, #15
 800f614:	d9e9      	bls.n	800f5ea <prvInitialiseNewTask+0x4e>
 800f616:	e000      	b.n	800f61a <prvInitialiseNewTask+0x7e>
		{
			break;
 800f618:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f61c:	2200      	movs	r2, #0
 800f61e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f624:	2b06      	cmp	r3, #6
 800f626:	d901      	bls.n	800f62c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f628:	2306      	movs	r3, #6
 800f62a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f62e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f630:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f636:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f63a:	2200      	movs	r2, #0
 800f63c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f640:	3304      	adds	r3, #4
 800f642:	4618      	mov	r0, r3
 800f644:	f7fe ff37 	bl	800e4b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f64a:	3318      	adds	r3, #24
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7fe ff32 	bl	800e4b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f656:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f65a:	f1c3 0207 	rsb	r2, r3, #7
 800f65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f660:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f666:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f66a:	2200      	movs	r2, #0
 800f66c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f672:	2200      	movs	r2, #0
 800f674:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f67a:	334c      	adds	r3, #76	; 0x4c
 800f67c:	2260      	movs	r2, #96	; 0x60
 800f67e:	2100      	movs	r1, #0
 800f680:	4618      	mov	r0, r3
 800f682:	f001 ff6d 	bl	8011560 <memset>
 800f686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f688:	4a0c      	ldr	r2, [pc, #48]	; (800f6bc <prvInitialiseNewTask+0x120>)
 800f68a:	651a      	str	r2, [r3, #80]	; 0x50
 800f68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f68e:	4a0c      	ldr	r2, [pc, #48]	; (800f6c0 <prvInitialiseNewTask+0x124>)
 800f690:	655a      	str	r2, [r3, #84]	; 0x54
 800f692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f694:	4a0b      	ldr	r2, [pc, #44]	; (800f6c4 <prvInitialiseNewTask+0x128>)
 800f696:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f698:	683a      	ldr	r2, [r7, #0]
 800f69a:	68f9      	ldr	r1, [r7, #12]
 800f69c:	69b8      	ldr	r0, [r7, #24]
 800f69e:	f000 ff11 	bl	80104c4 <pxPortInitialiseStack>
 800f6a2:	4602      	mov	r2, r0
 800f6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800f6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d002      	beq.n	800f6b4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6b4:	bf00      	nop
 800f6b6:	3720      	adds	r7, #32
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}
 800f6bc:	08015e00 	.word	0x08015e00
 800f6c0:	08015e20 	.word	0x08015e20
 800f6c4:	08015de0 	.word	0x08015de0

0800f6c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b082      	sub	sp, #8
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f6d0:	f000 ffec 	bl	80106ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f6d4:	4b2a      	ldr	r3, [pc, #168]	; (800f780 <prvAddNewTaskToReadyList+0xb8>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	3301      	adds	r3, #1
 800f6da:	4a29      	ldr	r2, [pc, #164]	; (800f780 <prvAddNewTaskToReadyList+0xb8>)
 800f6dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f6de:	4b29      	ldr	r3, [pc, #164]	; (800f784 <prvAddNewTaskToReadyList+0xbc>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d109      	bne.n	800f6fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f6e6:	4a27      	ldr	r2, [pc, #156]	; (800f784 <prvAddNewTaskToReadyList+0xbc>)
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f6ec:	4b24      	ldr	r3, [pc, #144]	; (800f780 <prvAddNewTaskToReadyList+0xb8>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	2b01      	cmp	r3, #1
 800f6f2:	d110      	bne.n	800f716 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f6f4:	f000 fbdc 	bl	800feb0 <prvInitialiseTaskLists>
 800f6f8:	e00d      	b.n	800f716 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f6fa:	4b23      	ldr	r3, [pc, #140]	; (800f788 <prvAddNewTaskToReadyList+0xc0>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d109      	bne.n	800f716 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f702:	4b20      	ldr	r3, [pc, #128]	; (800f784 <prvAddNewTaskToReadyList+0xbc>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d802      	bhi.n	800f716 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f710:	4a1c      	ldr	r2, [pc, #112]	; (800f784 <prvAddNewTaskToReadyList+0xbc>)
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f716:	4b1d      	ldr	r3, [pc, #116]	; (800f78c <prvAddNewTaskToReadyList+0xc4>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	3301      	adds	r3, #1
 800f71c:	4a1b      	ldr	r2, [pc, #108]	; (800f78c <prvAddNewTaskToReadyList+0xc4>)
 800f71e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f724:	2201      	movs	r2, #1
 800f726:	409a      	lsls	r2, r3
 800f728:	4b19      	ldr	r3, [pc, #100]	; (800f790 <prvAddNewTaskToReadyList+0xc8>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	4313      	orrs	r3, r2
 800f72e:	4a18      	ldr	r2, [pc, #96]	; (800f790 <prvAddNewTaskToReadyList+0xc8>)
 800f730:	6013      	str	r3, [r2, #0]
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f736:	4613      	mov	r3, r2
 800f738:	009b      	lsls	r3, r3, #2
 800f73a:	4413      	add	r3, r2
 800f73c:	009b      	lsls	r3, r3, #2
 800f73e:	4a15      	ldr	r2, [pc, #84]	; (800f794 <prvAddNewTaskToReadyList+0xcc>)
 800f740:	441a      	add	r2, r3
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	3304      	adds	r3, #4
 800f746:	4619      	mov	r1, r3
 800f748:	4610      	mov	r0, r2
 800f74a:	f7fe fec0 	bl	800e4ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f74e:	f000 ffdd 	bl	801070c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f752:	4b0d      	ldr	r3, [pc, #52]	; (800f788 <prvAddNewTaskToReadyList+0xc0>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d00e      	beq.n	800f778 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f75a:	4b0a      	ldr	r3, [pc, #40]	; (800f784 <prvAddNewTaskToReadyList+0xbc>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f764:	429a      	cmp	r2, r3
 800f766:	d207      	bcs.n	800f778 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f768:	4b0b      	ldr	r3, [pc, #44]	; (800f798 <prvAddNewTaskToReadyList+0xd0>)
 800f76a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f76e:	601a      	str	r2, [r3, #0]
 800f770:	f3bf 8f4f 	dsb	sy
 800f774:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f778:	bf00      	nop
 800f77a:	3708      	adds	r7, #8
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}
 800f780:	20002798 	.word	0x20002798
 800f784:	20002698 	.word	0x20002698
 800f788:	200027a4 	.word	0x200027a4
 800f78c:	200027b4 	.word	0x200027b4
 800f790:	200027a0 	.word	0x200027a0
 800f794:	2000269c 	.word	0x2000269c
 800f798:	e000ed04 	.word	0xe000ed04

0800f79c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b084      	sub	sp, #16
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d017      	beq.n	800f7de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f7ae:	4b13      	ldr	r3, [pc, #76]	; (800f7fc <vTaskDelay+0x60>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d00a      	beq.n	800f7cc <vTaskDelay+0x30>
	__asm volatile
 800f7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ba:	f383 8811 	msr	BASEPRI, r3
 800f7be:	f3bf 8f6f 	isb	sy
 800f7c2:	f3bf 8f4f 	dsb	sy
 800f7c6:	60bb      	str	r3, [r7, #8]
}
 800f7c8:	bf00      	nop
 800f7ca:	e7fe      	b.n	800f7ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f7cc:	f000 f884 	bl	800f8d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f7d0:	2100      	movs	r1, #0
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f000 fe10 	bl	80103f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f7d8:	f000 f88c 	bl	800f8f4 <xTaskResumeAll>
 800f7dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d107      	bne.n	800f7f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f7e4:	4b06      	ldr	r3, [pc, #24]	; (800f800 <vTaskDelay+0x64>)
 800f7e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7ea:	601a      	str	r2, [r3, #0]
 800f7ec:	f3bf 8f4f 	dsb	sy
 800f7f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f7f4:	bf00      	nop
 800f7f6:	3710      	adds	r7, #16
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}
 800f7fc:	200027c0 	.word	0x200027c0
 800f800:	e000ed04 	.word	0xe000ed04

0800f804 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b08a      	sub	sp, #40	; 0x28
 800f808:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f80a:	2300      	movs	r3, #0
 800f80c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f80e:	2300      	movs	r3, #0
 800f810:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f812:	463a      	mov	r2, r7
 800f814:	1d39      	adds	r1, r7, #4
 800f816:	f107 0308 	add.w	r3, r7, #8
 800f81a:	4618      	mov	r0, r3
 800f81c:	f7f2 f8f4 	bl	8001a08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f820:	6839      	ldr	r1, [r7, #0]
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	68ba      	ldr	r2, [r7, #8]
 800f826:	9202      	str	r2, [sp, #8]
 800f828:	9301      	str	r3, [sp, #4]
 800f82a:	2300      	movs	r3, #0
 800f82c:	9300      	str	r3, [sp, #0]
 800f82e:	2300      	movs	r3, #0
 800f830:	460a      	mov	r2, r1
 800f832:	4921      	ldr	r1, [pc, #132]	; (800f8b8 <vTaskStartScheduler+0xb4>)
 800f834:	4821      	ldr	r0, [pc, #132]	; (800f8bc <vTaskStartScheduler+0xb8>)
 800f836:	f7ff fe0f 	bl	800f458 <xTaskCreateStatic>
 800f83a:	4603      	mov	r3, r0
 800f83c:	4a20      	ldr	r2, [pc, #128]	; (800f8c0 <vTaskStartScheduler+0xbc>)
 800f83e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f840:	4b1f      	ldr	r3, [pc, #124]	; (800f8c0 <vTaskStartScheduler+0xbc>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d002      	beq.n	800f84e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f848:	2301      	movs	r3, #1
 800f84a:	617b      	str	r3, [r7, #20]
 800f84c:	e001      	b.n	800f852 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f84e:	2300      	movs	r3, #0
 800f850:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	2b01      	cmp	r3, #1
 800f856:	d11b      	bne.n	800f890 <vTaskStartScheduler+0x8c>
	__asm volatile
 800f858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f85c:	f383 8811 	msr	BASEPRI, r3
 800f860:	f3bf 8f6f 	isb	sy
 800f864:	f3bf 8f4f 	dsb	sy
 800f868:	613b      	str	r3, [r7, #16]
}
 800f86a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f86c:	4b15      	ldr	r3, [pc, #84]	; (800f8c4 <vTaskStartScheduler+0xc0>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	334c      	adds	r3, #76	; 0x4c
 800f872:	4a15      	ldr	r2, [pc, #84]	; (800f8c8 <vTaskStartScheduler+0xc4>)
 800f874:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f876:	4b15      	ldr	r3, [pc, #84]	; (800f8cc <vTaskStartScheduler+0xc8>)
 800f878:	f04f 32ff 	mov.w	r2, #4294967295
 800f87c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f87e:	4b14      	ldr	r3, [pc, #80]	; (800f8d0 <vTaskStartScheduler+0xcc>)
 800f880:	2201      	movs	r2, #1
 800f882:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f884:	4b13      	ldr	r3, [pc, #76]	; (800f8d4 <vTaskStartScheduler+0xd0>)
 800f886:	2200      	movs	r2, #0
 800f888:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f88a:	f000 fe9d 	bl	80105c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f88e:	e00e      	b.n	800f8ae <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f896:	d10a      	bne.n	800f8ae <vTaskStartScheduler+0xaa>
	__asm volatile
 800f898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f89c:	f383 8811 	msr	BASEPRI, r3
 800f8a0:	f3bf 8f6f 	isb	sy
 800f8a4:	f3bf 8f4f 	dsb	sy
 800f8a8:	60fb      	str	r3, [r7, #12]
}
 800f8aa:	bf00      	nop
 800f8ac:	e7fe      	b.n	800f8ac <vTaskStartScheduler+0xa8>
}
 800f8ae:	bf00      	nop
 800f8b0:	3718      	adds	r7, #24
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}
 800f8b6:	bf00      	nop
 800f8b8:	08015d28 	.word	0x08015d28
 800f8bc:	0800fe81 	.word	0x0800fe81
 800f8c0:	200027bc 	.word	0x200027bc
 800f8c4:	20002698 	.word	0x20002698
 800f8c8:	2000005c 	.word	0x2000005c
 800f8cc:	200027b8 	.word	0x200027b8
 800f8d0:	200027a4 	.word	0x200027a4
 800f8d4:	2000279c 	.word	0x2000279c

0800f8d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f8d8:	b480      	push	{r7}
 800f8da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f8dc:	4b04      	ldr	r3, [pc, #16]	; (800f8f0 <vTaskSuspendAll+0x18>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	3301      	adds	r3, #1
 800f8e2:	4a03      	ldr	r2, [pc, #12]	; (800f8f0 <vTaskSuspendAll+0x18>)
 800f8e4:	6013      	str	r3, [r2, #0]
}
 800f8e6:	bf00      	nop
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bc80      	pop	{r7}
 800f8ec:	4770      	bx	lr
 800f8ee:	bf00      	nop
 800f8f0:	200027c0 	.word	0x200027c0

0800f8f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b084      	sub	sp, #16
 800f8f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f8fe:	2300      	movs	r3, #0
 800f900:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f902:	4b41      	ldr	r3, [pc, #260]	; (800fa08 <xTaskResumeAll+0x114>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d10a      	bne.n	800f920 <xTaskResumeAll+0x2c>
	__asm volatile
 800f90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f90e:	f383 8811 	msr	BASEPRI, r3
 800f912:	f3bf 8f6f 	isb	sy
 800f916:	f3bf 8f4f 	dsb	sy
 800f91a:	603b      	str	r3, [r7, #0]
}
 800f91c:	bf00      	nop
 800f91e:	e7fe      	b.n	800f91e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f920:	f000 fec4 	bl	80106ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f924:	4b38      	ldr	r3, [pc, #224]	; (800fa08 <xTaskResumeAll+0x114>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	3b01      	subs	r3, #1
 800f92a:	4a37      	ldr	r2, [pc, #220]	; (800fa08 <xTaskResumeAll+0x114>)
 800f92c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f92e:	4b36      	ldr	r3, [pc, #216]	; (800fa08 <xTaskResumeAll+0x114>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d161      	bne.n	800f9fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f936:	4b35      	ldr	r3, [pc, #212]	; (800fa0c <xTaskResumeAll+0x118>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d05d      	beq.n	800f9fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f93e:	e02e      	b.n	800f99e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f940:	4b33      	ldr	r3, [pc, #204]	; (800fa10 <xTaskResumeAll+0x11c>)
 800f942:	68db      	ldr	r3, [r3, #12]
 800f944:	68db      	ldr	r3, [r3, #12]
 800f946:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	3318      	adds	r3, #24
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7fe fe19 	bl	800e584 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	3304      	adds	r3, #4
 800f956:	4618      	mov	r0, r3
 800f958:	f7fe fe14 	bl	800e584 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f960:	2201      	movs	r2, #1
 800f962:	409a      	lsls	r2, r3
 800f964:	4b2b      	ldr	r3, [pc, #172]	; (800fa14 <xTaskResumeAll+0x120>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	4313      	orrs	r3, r2
 800f96a:	4a2a      	ldr	r2, [pc, #168]	; (800fa14 <xTaskResumeAll+0x120>)
 800f96c:	6013      	str	r3, [r2, #0]
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f972:	4613      	mov	r3, r2
 800f974:	009b      	lsls	r3, r3, #2
 800f976:	4413      	add	r3, r2
 800f978:	009b      	lsls	r3, r3, #2
 800f97a:	4a27      	ldr	r2, [pc, #156]	; (800fa18 <xTaskResumeAll+0x124>)
 800f97c:	441a      	add	r2, r3
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	3304      	adds	r3, #4
 800f982:	4619      	mov	r1, r3
 800f984:	4610      	mov	r0, r2
 800f986:	f7fe fda2 	bl	800e4ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f98e:	4b23      	ldr	r3, [pc, #140]	; (800fa1c <xTaskResumeAll+0x128>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f994:	429a      	cmp	r2, r3
 800f996:	d302      	bcc.n	800f99e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f998:	4b21      	ldr	r3, [pc, #132]	; (800fa20 <xTaskResumeAll+0x12c>)
 800f99a:	2201      	movs	r2, #1
 800f99c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f99e:	4b1c      	ldr	r3, [pc, #112]	; (800fa10 <xTaskResumeAll+0x11c>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d1cc      	bne.n	800f940 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d001      	beq.n	800f9b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f9ac:	f000 fb22 	bl	800fff4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f9b0:	4b1c      	ldr	r3, [pc, #112]	; (800fa24 <xTaskResumeAll+0x130>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d010      	beq.n	800f9de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f9bc:	f000 f836 	bl	800fa2c <xTaskIncrementTick>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d002      	beq.n	800f9cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f9c6:	4b16      	ldr	r3, [pc, #88]	; (800fa20 <xTaskResumeAll+0x12c>)
 800f9c8:	2201      	movs	r2, #1
 800f9ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	3b01      	subs	r3, #1
 800f9d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d1f1      	bne.n	800f9bc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800f9d8:	4b12      	ldr	r3, [pc, #72]	; (800fa24 <xTaskResumeAll+0x130>)
 800f9da:	2200      	movs	r2, #0
 800f9dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f9de:	4b10      	ldr	r3, [pc, #64]	; (800fa20 <xTaskResumeAll+0x12c>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d009      	beq.n	800f9fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f9ea:	4b0f      	ldr	r3, [pc, #60]	; (800fa28 <xTaskResumeAll+0x134>)
 800f9ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9f0:	601a      	str	r2, [r3, #0]
 800f9f2:	f3bf 8f4f 	dsb	sy
 800f9f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f9fa:	f000 fe87 	bl	801070c <vPortExitCritical>

	return xAlreadyYielded;
 800f9fe:	68bb      	ldr	r3, [r7, #8]
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	3710      	adds	r7, #16
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}
 800fa08:	200027c0 	.word	0x200027c0
 800fa0c:	20002798 	.word	0x20002798
 800fa10:	20002758 	.word	0x20002758
 800fa14:	200027a0 	.word	0x200027a0
 800fa18:	2000269c 	.word	0x2000269c
 800fa1c:	20002698 	.word	0x20002698
 800fa20:	200027ac 	.word	0x200027ac
 800fa24:	200027a8 	.word	0x200027a8
 800fa28:	e000ed04 	.word	0xe000ed04

0800fa2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b086      	sub	sp, #24
 800fa30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fa32:	2300      	movs	r3, #0
 800fa34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa36:	4b51      	ldr	r3, [pc, #324]	; (800fb7c <xTaskIncrementTick+0x150>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	f040 808d 	bne.w	800fb5a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fa40:	4b4f      	ldr	r3, [pc, #316]	; (800fb80 <xTaskIncrementTick+0x154>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	3301      	adds	r3, #1
 800fa46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fa48:	4a4d      	ldr	r2, [pc, #308]	; (800fb80 <xTaskIncrementTick+0x154>)
 800fa4a:	693b      	ldr	r3, [r7, #16]
 800fa4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fa4e:	693b      	ldr	r3, [r7, #16]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d120      	bne.n	800fa96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fa54:	4b4b      	ldr	r3, [pc, #300]	; (800fb84 <xTaskIncrementTick+0x158>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d00a      	beq.n	800fa74 <xTaskIncrementTick+0x48>
	__asm volatile
 800fa5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa62:	f383 8811 	msr	BASEPRI, r3
 800fa66:	f3bf 8f6f 	isb	sy
 800fa6a:	f3bf 8f4f 	dsb	sy
 800fa6e:	603b      	str	r3, [r7, #0]
}
 800fa70:	bf00      	nop
 800fa72:	e7fe      	b.n	800fa72 <xTaskIncrementTick+0x46>
 800fa74:	4b43      	ldr	r3, [pc, #268]	; (800fb84 <xTaskIncrementTick+0x158>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	60fb      	str	r3, [r7, #12]
 800fa7a:	4b43      	ldr	r3, [pc, #268]	; (800fb88 <xTaskIncrementTick+0x15c>)
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	4a41      	ldr	r2, [pc, #260]	; (800fb84 <xTaskIncrementTick+0x158>)
 800fa80:	6013      	str	r3, [r2, #0]
 800fa82:	4a41      	ldr	r2, [pc, #260]	; (800fb88 <xTaskIncrementTick+0x15c>)
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	6013      	str	r3, [r2, #0]
 800fa88:	4b40      	ldr	r3, [pc, #256]	; (800fb8c <xTaskIncrementTick+0x160>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	3301      	adds	r3, #1
 800fa8e:	4a3f      	ldr	r2, [pc, #252]	; (800fb8c <xTaskIncrementTick+0x160>)
 800fa90:	6013      	str	r3, [r2, #0]
 800fa92:	f000 faaf 	bl	800fff4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fa96:	4b3e      	ldr	r3, [pc, #248]	; (800fb90 <xTaskIncrementTick+0x164>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	693a      	ldr	r2, [r7, #16]
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d34d      	bcc.n	800fb3c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800faa0:	4b38      	ldr	r3, [pc, #224]	; (800fb84 <xTaskIncrementTick+0x158>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d101      	bne.n	800faae <xTaskIncrementTick+0x82>
 800faaa:	2301      	movs	r3, #1
 800faac:	e000      	b.n	800fab0 <xTaskIncrementTick+0x84>
 800faae:	2300      	movs	r3, #0
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d004      	beq.n	800fabe <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fab4:	4b36      	ldr	r3, [pc, #216]	; (800fb90 <xTaskIncrementTick+0x164>)
 800fab6:	f04f 32ff 	mov.w	r2, #4294967295
 800faba:	601a      	str	r2, [r3, #0]
					break;
 800fabc:	e03e      	b.n	800fb3c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800fabe:	4b31      	ldr	r3, [pc, #196]	; (800fb84 <xTaskIncrementTick+0x158>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	68db      	ldr	r3, [r3, #12]
 800fac4:	68db      	ldr	r3, [r3, #12]
 800fac6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800face:	693a      	ldr	r2, [r7, #16]
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	429a      	cmp	r2, r3
 800fad4:	d203      	bcs.n	800fade <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fad6:	4a2e      	ldr	r2, [pc, #184]	; (800fb90 <xTaskIncrementTick+0x164>)
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6013      	str	r3, [r2, #0]
						break;
 800fadc:	e02e      	b.n	800fb3c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	3304      	adds	r3, #4
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7fe fd4e 	bl	800e584 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faec:	2b00      	cmp	r3, #0
 800faee:	d004      	beq.n	800fafa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	3318      	adds	r3, #24
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7fe fd45 	bl	800e584 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fafe:	2201      	movs	r2, #1
 800fb00:	409a      	lsls	r2, r3
 800fb02:	4b24      	ldr	r3, [pc, #144]	; (800fb94 <xTaskIncrementTick+0x168>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	4313      	orrs	r3, r2
 800fb08:	4a22      	ldr	r2, [pc, #136]	; (800fb94 <xTaskIncrementTick+0x168>)
 800fb0a:	6013      	str	r3, [r2, #0]
 800fb0c:	68bb      	ldr	r3, [r7, #8]
 800fb0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb10:	4613      	mov	r3, r2
 800fb12:	009b      	lsls	r3, r3, #2
 800fb14:	4413      	add	r3, r2
 800fb16:	009b      	lsls	r3, r3, #2
 800fb18:	4a1f      	ldr	r2, [pc, #124]	; (800fb98 <xTaskIncrementTick+0x16c>)
 800fb1a:	441a      	add	r2, r3
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	3304      	adds	r3, #4
 800fb20:	4619      	mov	r1, r3
 800fb22:	4610      	mov	r0, r2
 800fb24:	f7fe fcd3 	bl	800e4ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb2c:	4b1b      	ldr	r3, [pc, #108]	; (800fb9c <xTaskIncrementTick+0x170>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb32:	429a      	cmp	r2, r3
 800fb34:	d3b4      	bcc.n	800faa0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fb36:	2301      	movs	r3, #1
 800fb38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fb3a:	e7b1      	b.n	800faa0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fb3c:	4b17      	ldr	r3, [pc, #92]	; (800fb9c <xTaskIncrementTick+0x170>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb42:	4915      	ldr	r1, [pc, #84]	; (800fb98 <xTaskIncrementTick+0x16c>)
 800fb44:	4613      	mov	r3, r2
 800fb46:	009b      	lsls	r3, r3, #2
 800fb48:	4413      	add	r3, r2
 800fb4a:	009b      	lsls	r3, r3, #2
 800fb4c:	440b      	add	r3, r1
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	2b01      	cmp	r3, #1
 800fb52:	d907      	bls.n	800fb64 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800fb54:	2301      	movs	r3, #1
 800fb56:	617b      	str	r3, [r7, #20]
 800fb58:	e004      	b.n	800fb64 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fb5a:	4b11      	ldr	r3, [pc, #68]	; (800fba0 <xTaskIncrementTick+0x174>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	3301      	adds	r3, #1
 800fb60:	4a0f      	ldr	r2, [pc, #60]	; (800fba0 <xTaskIncrementTick+0x174>)
 800fb62:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800fb64:	4b0f      	ldr	r3, [pc, #60]	; (800fba4 <xTaskIncrementTick+0x178>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d001      	beq.n	800fb70 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800fb6c:	2301      	movs	r3, #1
 800fb6e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fb70:	697b      	ldr	r3, [r7, #20]
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3718      	adds	r7, #24
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}
 800fb7a:	bf00      	nop
 800fb7c:	200027c0 	.word	0x200027c0
 800fb80:	2000279c 	.word	0x2000279c
 800fb84:	20002750 	.word	0x20002750
 800fb88:	20002754 	.word	0x20002754
 800fb8c:	200027b0 	.word	0x200027b0
 800fb90:	200027b8 	.word	0x200027b8
 800fb94:	200027a0 	.word	0x200027a0
 800fb98:	2000269c 	.word	0x2000269c
 800fb9c:	20002698 	.word	0x20002698
 800fba0:	200027a8 	.word	0x200027a8
 800fba4:	200027ac 	.word	0x200027ac

0800fba8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fba8:	b480      	push	{r7}
 800fbaa:	b087      	sub	sp, #28
 800fbac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fbae:	4b29      	ldr	r3, [pc, #164]	; (800fc54 <vTaskSwitchContext+0xac>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d003      	beq.n	800fbbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fbb6:	4b28      	ldr	r3, [pc, #160]	; (800fc58 <vTaskSwitchContext+0xb0>)
 800fbb8:	2201      	movs	r2, #1
 800fbba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fbbc:	e044      	b.n	800fc48 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800fbbe:	4b26      	ldr	r3, [pc, #152]	; (800fc58 <vTaskSwitchContext+0xb0>)
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fbc4:	4b25      	ldr	r3, [pc, #148]	; (800fc5c <vTaskSwitchContext+0xb4>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	fab3 f383 	clz	r3, r3
 800fbd0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fbd2:	7afb      	ldrb	r3, [r7, #11]
 800fbd4:	f1c3 031f 	rsb	r3, r3, #31
 800fbd8:	617b      	str	r3, [r7, #20]
 800fbda:	4921      	ldr	r1, [pc, #132]	; (800fc60 <vTaskSwitchContext+0xb8>)
 800fbdc:	697a      	ldr	r2, [r7, #20]
 800fbde:	4613      	mov	r3, r2
 800fbe0:	009b      	lsls	r3, r3, #2
 800fbe2:	4413      	add	r3, r2
 800fbe4:	009b      	lsls	r3, r3, #2
 800fbe6:	440b      	add	r3, r1
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d10a      	bne.n	800fc04 <vTaskSwitchContext+0x5c>
	__asm volatile
 800fbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbf2:	f383 8811 	msr	BASEPRI, r3
 800fbf6:	f3bf 8f6f 	isb	sy
 800fbfa:	f3bf 8f4f 	dsb	sy
 800fbfe:	607b      	str	r3, [r7, #4]
}
 800fc00:	bf00      	nop
 800fc02:	e7fe      	b.n	800fc02 <vTaskSwitchContext+0x5a>
 800fc04:	697a      	ldr	r2, [r7, #20]
 800fc06:	4613      	mov	r3, r2
 800fc08:	009b      	lsls	r3, r3, #2
 800fc0a:	4413      	add	r3, r2
 800fc0c:	009b      	lsls	r3, r3, #2
 800fc0e:	4a14      	ldr	r2, [pc, #80]	; (800fc60 <vTaskSwitchContext+0xb8>)
 800fc10:	4413      	add	r3, r2
 800fc12:	613b      	str	r3, [r7, #16]
 800fc14:	693b      	ldr	r3, [r7, #16]
 800fc16:	685b      	ldr	r3, [r3, #4]
 800fc18:	685a      	ldr	r2, [r3, #4]
 800fc1a:	693b      	ldr	r3, [r7, #16]
 800fc1c:	605a      	str	r2, [r3, #4]
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	685a      	ldr	r2, [r3, #4]
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	3308      	adds	r3, #8
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d104      	bne.n	800fc34 <vTaskSwitchContext+0x8c>
 800fc2a:	693b      	ldr	r3, [r7, #16]
 800fc2c:	685b      	ldr	r3, [r3, #4]
 800fc2e:	685a      	ldr	r2, [r3, #4]
 800fc30:	693b      	ldr	r3, [r7, #16]
 800fc32:	605a      	str	r2, [r3, #4]
 800fc34:	693b      	ldr	r3, [r7, #16]
 800fc36:	685b      	ldr	r3, [r3, #4]
 800fc38:	68db      	ldr	r3, [r3, #12]
 800fc3a:	4a0a      	ldr	r2, [pc, #40]	; (800fc64 <vTaskSwitchContext+0xbc>)
 800fc3c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fc3e:	4b09      	ldr	r3, [pc, #36]	; (800fc64 <vTaskSwitchContext+0xbc>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	334c      	adds	r3, #76	; 0x4c
 800fc44:	4a08      	ldr	r2, [pc, #32]	; (800fc68 <vTaskSwitchContext+0xc0>)
 800fc46:	6013      	str	r3, [r2, #0]
}
 800fc48:	bf00      	nop
 800fc4a:	371c      	adds	r7, #28
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bc80      	pop	{r7}
 800fc50:	4770      	bx	lr
 800fc52:	bf00      	nop
 800fc54:	200027c0 	.word	0x200027c0
 800fc58:	200027ac 	.word	0x200027ac
 800fc5c:	200027a0 	.word	0x200027a0
 800fc60:	2000269c 	.word	0x2000269c
 800fc64:	20002698 	.word	0x20002698
 800fc68:	2000005c 	.word	0x2000005c

0800fc6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b084      	sub	sp, #16
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d10a      	bne.n	800fc92 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc80:	f383 8811 	msr	BASEPRI, r3
 800fc84:	f3bf 8f6f 	isb	sy
 800fc88:	f3bf 8f4f 	dsb	sy
 800fc8c:	60fb      	str	r3, [r7, #12]
}
 800fc8e:	bf00      	nop
 800fc90:	e7fe      	b.n	800fc90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fc92:	4b07      	ldr	r3, [pc, #28]	; (800fcb0 <vTaskPlaceOnEventList+0x44>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	3318      	adds	r3, #24
 800fc98:	4619      	mov	r1, r3
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f7fe fc3a 	bl	800e514 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fca0:	2101      	movs	r1, #1
 800fca2:	6838      	ldr	r0, [r7, #0]
 800fca4:	f000 fba8 	bl	80103f8 <prvAddCurrentTaskToDelayedList>
}
 800fca8:	bf00      	nop
 800fcaa:	3710      	adds	r7, #16
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}
 800fcb0:	20002698 	.word	0x20002698

0800fcb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b086      	sub	sp, #24
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	68db      	ldr	r3, [r3, #12]
 800fcc0:	68db      	ldr	r3, [r3, #12]
 800fcc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d10a      	bne.n	800fce0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcce:	f383 8811 	msr	BASEPRI, r3
 800fcd2:	f3bf 8f6f 	isb	sy
 800fcd6:	f3bf 8f4f 	dsb	sy
 800fcda:	60fb      	str	r3, [r7, #12]
}
 800fcdc:	bf00      	nop
 800fcde:	e7fe      	b.n	800fcde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	3318      	adds	r3, #24
 800fce4:	4618      	mov	r0, r3
 800fce6:	f7fe fc4d 	bl	800e584 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fcea:	4b1d      	ldr	r3, [pc, #116]	; (800fd60 <xTaskRemoveFromEventList+0xac>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d11c      	bne.n	800fd2c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	3304      	adds	r3, #4
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7fe fc44 	bl	800e584 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fcfc:	693b      	ldr	r3, [r7, #16]
 800fcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd00:	2201      	movs	r2, #1
 800fd02:	409a      	lsls	r2, r3
 800fd04:	4b17      	ldr	r3, [pc, #92]	; (800fd64 <xTaskRemoveFromEventList+0xb0>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	4313      	orrs	r3, r2
 800fd0a:	4a16      	ldr	r2, [pc, #88]	; (800fd64 <xTaskRemoveFromEventList+0xb0>)
 800fd0c:	6013      	str	r3, [r2, #0]
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd12:	4613      	mov	r3, r2
 800fd14:	009b      	lsls	r3, r3, #2
 800fd16:	4413      	add	r3, r2
 800fd18:	009b      	lsls	r3, r3, #2
 800fd1a:	4a13      	ldr	r2, [pc, #76]	; (800fd68 <xTaskRemoveFromEventList+0xb4>)
 800fd1c:	441a      	add	r2, r3
 800fd1e:	693b      	ldr	r3, [r7, #16]
 800fd20:	3304      	adds	r3, #4
 800fd22:	4619      	mov	r1, r3
 800fd24:	4610      	mov	r0, r2
 800fd26:	f7fe fbd2 	bl	800e4ce <vListInsertEnd>
 800fd2a:	e005      	b.n	800fd38 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fd2c:	693b      	ldr	r3, [r7, #16]
 800fd2e:	3318      	adds	r3, #24
 800fd30:	4619      	mov	r1, r3
 800fd32:	480e      	ldr	r0, [pc, #56]	; (800fd6c <xTaskRemoveFromEventList+0xb8>)
 800fd34:	f7fe fbcb 	bl	800e4ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd3c:	4b0c      	ldr	r3, [pc, #48]	; (800fd70 <xTaskRemoveFromEventList+0xbc>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd42:	429a      	cmp	r2, r3
 800fd44:	d905      	bls.n	800fd52 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fd46:	2301      	movs	r3, #1
 800fd48:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fd4a:	4b0a      	ldr	r3, [pc, #40]	; (800fd74 <xTaskRemoveFromEventList+0xc0>)
 800fd4c:	2201      	movs	r2, #1
 800fd4e:	601a      	str	r2, [r3, #0]
 800fd50:	e001      	b.n	800fd56 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800fd52:	2300      	movs	r3, #0
 800fd54:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800fd56:	697b      	ldr	r3, [r7, #20]
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3718      	adds	r7, #24
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}
 800fd60:	200027c0 	.word	0x200027c0
 800fd64:	200027a0 	.word	0x200027a0
 800fd68:	2000269c 	.word	0x2000269c
 800fd6c:	20002758 	.word	0x20002758
 800fd70:	20002698 	.word	0x20002698
 800fd74:	200027ac 	.word	0x200027ac

0800fd78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fd78:	b480      	push	{r7}
 800fd7a:	b083      	sub	sp, #12
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fd80:	4b06      	ldr	r3, [pc, #24]	; (800fd9c <vTaskInternalSetTimeOutState+0x24>)
 800fd82:	681a      	ldr	r2, [r3, #0]
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fd88:	4b05      	ldr	r3, [pc, #20]	; (800fda0 <vTaskInternalSetTimeOutState+0x28>)
 800fd8a:	681a      	ldr	r2, [r3, #0]
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	605a      	str	r2, [r3, #4]
}
 800fd90:	bf00      	nop
 800fd92:	370c      	adds	r7, #12
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bc80      	pop	{r7}
 800fd98:	4770      	bx	lr
 800fd9a:	bf00      	nop
 800fd9c:	200027b0 	.word	0x200027b0
 800fda0:	2000279c 	.word	0x2000279c

0800fda4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b088      	sub	sp, #32
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
 800fdac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d10a      	bne.n	800fdca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdb8:	f383 8811 	msr	BASEPRI, r3
 800fdbc:	f3bf 8f6f 	isb	sy
 800fdc0:	f3bf 8f4f 	dsb	sy
 800fdc4:	613b      	str	r3, [r7, #16]
}
 800fdc6:	bf00      	nop
 800fdc8:	e7fe      	b.n	800fdc8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d10a      	bne.n	800fde6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fdd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdd4:	f383 8811 	msr	BASEPRI, r3
 800fdd8:	f3bf 8f6f 	isb	sy
 800fddc:	f3bf 8f4f 	dsb	sy
 800fde0:	60fb      	str	r3, [r7, #12]
}
 800fde2:	bf00      	nop
 800fde4:	e7fe      	b.n	800fde4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fde6:	f000 fc61 	bl	80106ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fdea:	4b1d      	ldr	r3, [pc, #116]	; (800fe60 <xTaskCheckForTimeOut+0xbc>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	685b      	ldr	r3, [r3, #4]
 800fdf4:	69ba      	ldr	r2, [r7, #24]
 800fdf6:	1ad3      	subs	r3, r2, r3
 800fdf8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe02:	d102      	bne.n	800fe0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fe04:	2300      	movs	r3, #0
 800fe06:	61fb      	str	r3, [r7, #28]
 800fe08:	e023      	b.n	800fe52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681a      	ldr	r2, [r3, #0]
 800fe0e:	4b15      	ldr	r3, [pc, #84]	; (800fe64 <xTaskCheckForTimeOut+0xc0>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	429a      	cmp	r2, r3
 800fe14:	d007      	beq.n	800fe26 <xTaskCheckForTimeOut+0x82>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	685b      	ldr	r3, [r3, #4]
 800fe1a:	69ba      	ldr	r2, [r7, #24]
 800fe1c:	429a      	cmp	r2, r3
 800fe1e:	d302      	bcc.n	800fe26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fe20:	2301      	movs	r3, #1
 800fe22:	61fb      	str	r3, [r7, #28]
 800fe24:	e015      	b.n	800fe52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	697a      	ldr	r2, [r7, #20]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d20b      	bcs.n	800fe48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	681a      	ldr	r2, [r3, #0]
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	1ad2      	subs	r2, r2, r3
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f7ff ff9b 	bl	800fd78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fe42:	2300      	movs	r3, #0
 800fe44:	61fb      	str	r3, [r7, #28]
 800fe46:	e004      	b.n	800fe52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fe4e:	2301      	movs	r3, #1
 800fe50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fe52:	f000 fc5b 	bl	801070c <vPortExitCritical>

	return xReturn;
 800fe56:	69fb      	ldr	r3, [r7, #28]
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3720      	adds	r7, #32
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}
 800fe60:	2000279c 	.word	0x2000279c
 800fe64:	200027b0 	.word	0x200027b0

0800fe68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fe68:	b480      	push	{r7}
 800fe6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fe6c:	4b03      	ldr	r3, [pc, #12]	; (800fe7c <vTaskMissedYield+0x14>)
 800fe6e:	2201      	movs	r2, #1
 800fe70:	601a      	str	r2, [r3, #0]
}
 800fe72:	bf00      	nop
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bc80      	pop	{r7}
 800fe78:	4770      	bx	lr
 800fe7a:	bf00      	nop
 800fe7c:	200027ac 	.word	0x200027ac

0800fe80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b082      	sub	sp, #8
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fe88:	f000 f852 	bl	800ff30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fe8c:	4b06      	ldr	r3, [pc, #24]	; (800fea8 <prvIdleTask+0x28>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	2b01      	cmp	r3, #1
 800fe92:	d9f9      	bls.n	800fe88 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fe94:	4b05      	ldr	r3, [pc, #20]	; (800feac <prvIdleTask+0x2c>)
 800fe96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe9a:	601a      	str	r2, [r3, #0]
 800fe9c:	f3bf 8f4f 	dsb	sy
 800fea0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fea4:	e7f0      	b.n	800fe88 <prvIdleTask+0x8>
 800fea6:	bf00      	nop
 800fea8:	2000269c 	.word	0x2000269c
 800feac:	e000ed04 	.word	0xe000ed04

0800feb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b082      	sub	sp, #8
 800feb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800feb6:	2300      	movs	r3, #0
 800feb8:	607b      	str	r3, [r7, #4]
 800feba:	e00c      	b.n	800fed6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800febc:	687a      	ldr	r2, [r7, #4]
 800febe:	4613      	mov	r3, r2
 800fec0:	009b      	lsls	r3, r3, #2
 800fec2:	4413      	add	r3, r2
 800fec4:	009b      	lsls	r3, r3, #2
 800fec6:	4a12      	ldr	r2, [pc, #72]	; (800ff10 <prvInitialiseTaskLists+0x60>)
 800fec8:	4413      	add	r3, r2
 800feca:	4618      	mov	r0, r3
 800fecc:	f7fe fad4 	bl	800e478 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	3301      	adds	r3, #1
 800fed4:	607b      	str	r3, [r7, #4]
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2b06      	cmp	r3, #6
 800feda:	d9ef      	bls.n	800febc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fedc:	480d      	ldr	r0, [pc, #52]	; (800ff14 <prvInitialiseTaskLists+0x64>)
 800fede:	f7fe facb 	bl	800e478 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fee2:	480d      	ldr	r0, [pc, #52]	; (800ff18 <prvInitialiseTaskLists+0x68>)
 800fee4:	f7fe fac8 	bl	800e478 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fee8:	480c      	ldr	r0, [pc, #48]	; (800ff1c <prvInitialiseTaskLists+0x6c>)
 800feea:	f7fe fac5 	bl	800e478 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800feee:	480c      	ldr	r0, [pc, #48]	; (800ff20 <prvInitialiseTaskLists+0x70>)
 800fef0:	f7fe fac2 	bl	800e478 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fef4:	480b      	ldr	r0, [pc, #44]	; (800ff24 <prvInitialiseTaskLists+0x74>)
 800fef6:	f7fe fabf 	bl	800e478 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fefa:	4b0b      	ldr	r3, [pc, #44]	; (800ff28 <prvInitialiseTaskLists+0x78>)
 800fefc:	4a05      	ldr	r2, [pc, #20]	; (800ff14 <prvInitialiseTaskLists+0x64>)
 800fefe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ff00:	4b0a      	ldr	r3, [pc, #40]	; (800ff2c <prvInitialiseTaskLists+0x7c>)
 800ff02:	4a05      	ldr	r2, [pc, #20]	; (800ff18 <prvInitialiseTaskLists+0x68>)
 800ff04:	601a      	str	r2, [r3, #0]
}
 800ff06:	bf00      	nop
 800ff08:	3708      	adds	r7, #8
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}
 800ff0e:	bf00      	nop
 800ff10:	2000269c 	.word	0x2000269c
 800ff14:	20002728 	.word	0x20002728
 800ff18:	2000273c 	.word	0x2000273c
 800ff1c:	20002758 	.word	0x20002758
 800ff20:	2000276c 	.word	0x2000276c
 800ff24:	20002784 	.word	0x20002784
 800ff28:	20002750 	.word	0x20002750
 800ff2c:	20002754 	.word	0x20002754

0800ff30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b082      	sub	sp, #8
 800ff34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ff36:	e019      	b.n	800ff6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ff38:	f000 fbb8 	bl	80106ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800ff3c:	4b10      	ldr	r3, [pc, #64]	; (800ff80 <prvCheckTasksWaitingTermination+0x50>)
 800ff3e:	68db      	ldr	r3, [r3, #12]
 800ff40:	68db      	ldr	r3, [r3, #12]
 800ff42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	3304      	adds	r3, #4
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f7fe fb1b 	bl	800e584 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ff4e:	4b0d      	ldr	r3, [pc, #52]	; (800ff84 <prvCheckTasksWaitingTermination+0x54>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	3b01      	subs	r3, #1
 800ff54:	4a0b      	ldr	r2, [pc, #44]	; (800ff84 <prvCheckTasksWaitingTermination+0x54>)
 800ff56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ff58:	4b0b      	ldr	r3, [pc, #44]	; (800ff88 <prvCheckTasksWaitingTermination+0x58>)
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	3b01      	subs	r3, #1
 800ff5e:	4a0a      	ldr	r2, [pc, #40]	; (800ff88 <prvCheckTasksWaitingTermination+0x58>)
 800ff60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ff62:	f000 fbd3 	bl	801070c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f000 f810 	bl	800ff8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ff6c:	4b06      	ldr	r3, [pc, #24]	; (800ff88 <prvCheckTasksWaitingTermination+0x58>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d1e1      	bne.n	800ff38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ff74:	bf00      	nop
 800ff76:	bf00      	nop
 800ff78:	3708      	adds	r7, #8
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
 800ff7e:	bf00      	nop
 800ff80:	2000276c 	.word	0x2000276c
 800ff84:	20002798 	.word	0x20002798
 800ff88:	20002780 	.word	0x20002780

0800ff8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b084      	sub	sp, #16
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	334c      	adds	r3, #76	; 0x4c
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f002 fa0f 	bl	80123bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d108      	bne.n	800ffba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffac:	4618      	mov	r0, r3
 800ffae:	f000 fd41 	bl	8010a34 <vPortFree>
				vPortFree( pxTCB );
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f000 fd3e 	bl	8010a34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ffb8:	e018      	b.n	800ffec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	d103      	bne.n	800ffcc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f000 fd35 	bl	8010a34 <vPortFree>
	}
 800ffca:	e00f      	b.n	800ffec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ffd2:	2b02      	cmp	r3, #2
 800ffd4:	d00a      	beq.n	800ffec <prvDeleteTCB+0x60>
	__asm volatile
 800ffd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffda:	f383 8811 	msr	BASEPRI, r3
 800ffde:	f3bf 8f6f 	isb	sy
 800ffe2:	f3bf 8f4f 	dsb	sy
 800ffe6:	60fb      	str	r3, [r7, #12]
}
 800ffe8:	bf00      	nop
 800ffea:	e7fe      	b.n	800ffea <prvDeleteTCB+0x5e>
	}
 800ffec:	bf00      	nop
 800ffee:	3710      	adds	r7, #16
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}

0800fff4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fff4:	b480      	push	{r7}
 800fff6:	b083      	sub	sp, #12
 800fff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fffa:	4b0e      	ldr	r3, [pc, #56]	; (8010034 <prvResetNextTaskUnblockTime+0x40>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d101      	bne.n	8010008 <prvResetNextTaskUnblockTime+0x14>
 8010004:	2301      	movs	r3, #1
 8010006:	e000      	b.n	801000a <prvResetNextTaskUnblockTime+0x16>
 8010008:	2300      	movs	r3, #0
 801000a:	2b00      	cmp	r3, #0
 801000c:	d004      	beq.n	8010018 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801000e:	4b0a      	ldr	r3, [pc, #40]	; (8010038 <prvResetNextTaskUnblockTime+0x44>)
 8010010:	f04f 32ff 	mov.w	r2, #4294967295
 8010014:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010016:	e008      	b.n	801002a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010018:	4b06      	ldr	r3, [pc, #24]	; (8010034 <prvResetNextTaskUnblockTime+0x40>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	68db      	ldr	r3, [r3, #12]
 801001e:	68db      	ldr	r3, [r3, #12]
 8010020:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	4a04      	ldr	r2, [pc, #16]	; (8010038 <prvResetNextTaskUnblockTime+0x44>)
 8010028:	6013      	str	r3, [r2, #0]
}
 801002a:	bf00      	nop
 801002c:	370c      	adds	r7, #12
 801002e:	46bd      	mov	sp, r7
 8010030:	bc80      	pop	{r7}
 8010032:	4770      	bx	lr
 8010034:	20002750 	.word	0x20002750
 8010038:	200027b8 	.word	0x200027b8

0801003c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801003c:	b480      	push	{r7}
 801003e:	b083      	sub	sp, #12
 8010040:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010042:	4b0b      	ldr	r3, [pc, #44]	; (8010070 <xTaskGetSchedulerState+0x34>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d102      	bne.n	8010050 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801004a:	2301      	movs	r3, #1
 801004c:	607b      	str	r3, [r7, #4]
 801004e:	e008      	b.n	8010062 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010050:	4b08      	ldr	r3, [pc, #32]	; (8010074 <xTaskGetSchedulerState+0x38>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d102      	bne.n	801005e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010058:	2302      	movs	r3, #2
 801005a:	607b      	str	r3, [r7, #4]
 801005c:	e001      	b.n	8010062 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801005e:	2300      	movs	r3, #0
 8010060:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010062:	687b      	ldr	r3, [r7, #4]
	}
 8010064:	4618      	mov	r0, r3
 8010066:	370c      	adds	r7, #12
 8010068:	46bd      	mov	sp, r7
 801006a:	bc80      	pop	{r7}
 801006c:	4770      	bx	lr
 801006e:	bf00      	nop
 8010070:	200027a4 	.word	0x200027a4
 8010074:	200027c0 	.word	0x200027c0

08010078 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010078:	b580      	push	{r7, lr}
 801007a:	b084      	sub	sp, #16
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010084:	2300      	movs	r3, #0
 8010086:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d06e      	beq.n	801016c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010092:	4b39      	ldr	r3, [pc, #228]	; (8010178 <xTaskPriorityInherit+0x100>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010098:	429a      	cmp	r2, r3
 801009a:	d25e      	bcs.n	801015a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	699b      	ldr	r3, [r3, #24]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	db06      	blt.n	80100b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100a4:	4b34      	ldr	r3, [pc, #208]	; (8010178 <xTaskPriorityInherit+0x100>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100aa:	f1c3 0207 	rsb	r2, r3, #7
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	6959      	ldr	r1, [r3, #20]
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100ba:	4613      	mov	r3, r2
 80100bc:	009b      	lsls	r3, r3, #2
 80100be:	4413      	add	r3, r2
 80100c0:	009b      	lsls	r3, r3, #2
 80100c2:	4a2e      	ldr	r2, [pc, #184]	; (801017c <xTaskPriorityInherit+0x104>)
 80100c4:	4413      	add	r3, r2
 80100c6:	4299      	cmp	r1, r3
 80100c8:	d101      	bne.n	80100ce <xTaskPriorityInherit+0x56>
 80100ca:	2301      	movs	r3, #1
 80100cc:	e000      	b.n	80100d0 <xTaskPriorityInherit+0x58>
 80100ce:	2300      	movs	r3, #0
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d03a      	beq.n	801014a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	3304      	adds	r3, #4
 80100d8:	4618      	mov	r0, r3
 80100da:	f7fe fa53 	bl	800e584 <uxListRemove>
 80100de:	4603      	mov	r3, r0
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d115      	bne.n	8010110 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100e8:	4924      	ldr	r1, [pc, #144]	; (801017c <xTaskPriorityInherit+0x104>)
 80100ea:	4613      	mov	r3, r2
 80100ec:	009b      	lsls	r3, r3, #2
 80100ee:	4413      	add	r3, r2
 80100f0:	009b      	lsls	r3, r3, #2
 80100f2:	440b      	add	r3, r1
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d10a      	bne.n	8010110 <xTaskPriorityInherit+0x98>
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100fe:	2201      	movs	r2, #1
 8010100:	fa02 f303 	lsl.w	r3, r2, r3
 8010104:	43da      	mvns	r2, r3
 8010106:	4b1e      	ldr	r3, [pc, #120]	; (8010180 <xTaskPriorityInherit+0x108>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	4013      	ands	r3, r2
 801010c:	4a1c      	ldr	r2, [pc, #112]	; (8010180 <xTaskPriorityInherit+0x108>)
 801010e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010110:	4b19      	ldr	r3, [pc, #100]	; (8010178 <xTaskPriorityInherit+0x100>)
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801011a:	68bb      	ldr	r3, [r7, #8]
 801011c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801011e:	2201      	movs	r2, #1
 8010120:	409a      	lsls	r2, r3
 8010122:	4b17      	ldr	r3, [pc, #92]	; (8010180 <xTaskPriorityInherit+0x108>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	4313      	orrs	r3, r2
 8010128:	4a15      	ldr	r2, [pc, #84]	; (8010180 <xTaskPriorityInherit+0x108>)
 801012a:	6013      	str	r3, [r2, #0]
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010130:	4613      	mov	r3, r2
 8010132:	009b      	lsls	r3, r3, #2
 8010134:	4413      	add	r3, r2
 8010136:	009b      	lsls	r3, r3, #2
 8010138:	4a10      	ldr	r2, [pc, #64]	; (801017c <xTaskPriorityInherit+0x104>)
 801013a:	441a      	add	r2, r3
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	3304      	adds	r3, #4
 8010140:	4619      	mov	r1, r3
 8010142:	4610      	mov	r0, r2
 8010144:	f7fe f9c3 	bl	800e4ce <vListInsertEnd>
 8010148:	e004      	b.n	8010154 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801014a:	4b0b      	ldr	r3, [pc, #44]	; (8010178 <xTaskPriorityInherit+0x100>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010154:	2301      	movs	r3, #1
 8010156:	60fb      	str	r3, [r7, #12]
 8010158:	e008      	b.n	801016c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801015e:	4b06      	ldr	r3, [pc, #24]	; (8010178 <xTaskPriorityInherit+0x100>)
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010164:	429a      	cmp	r2, r3
 8010166:	d201      	bcs.n	801016c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010168:	2301      	movs	r3, #1
 801016a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801016c:	68fb      	ldr	r3, [r7, #12]
	}
 801016e:	4618      	mov	r0, r3
 8010170:	3710      	adds	r7, #16
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}
 8010176:	bf00      	nop
 8010178:	20002698 	.word	0x20002698
 801017c:	2000269c 	.word	0x2000269c
 8010180:	200027a0 	.word	0x200027a0

08010184 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010184:	b580      	push	{r7, lr}
 8010186:	b086      	sub	sp, #24
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010190:	2300      	movs	r3, #0
 8010192:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d06e      	beq.n	8010278 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801019a:	4b3a      	ldr	r3, [pc, #232]	; (8010284 <xTaskPriorityDisinherit+0x100>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	693a      	ldr	r2, [r7, #16]
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d00a      	beq.n	80101ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80101a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a8:	f383 8811 	msr	BASEPRI, r3
 80101ac:	f3bf 8f6f 	isb	sy
 80101b0:	f3bf 8f4f 	dsb	sy
 80101b4:	60fb      	str	r3, [r7, #12]
}
 80101b6:	bf00      	nop
 80101b8:	e7fe      	b.n	80101b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d10a      	bne.n	80101d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80101c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c6:	f383 8811 	msr	BASEPRI, r3
 80101ca:	f3bf 8f6f 	isb	sy
 80101ce:	f3bf 8f4f 	dsb	sy
 80101d2:	60bb      	str	r3, [r7, #8]
}
 80101d4:	bf00      	nop
 80101d6:	e7fe      	b.n	80101d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80101d8:	693b      	ldr	r3, [r7, #16]
 80101da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80101dc:	1e5a      	subs	r2, r3, #1
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101e6:	693b      	ldr	r3, [r7, #16]
 80101e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101ea:	429a      	cmp	r2, r3
 80101ec:	d044      	beq.n	8010278 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80101ee:	693b      	ldr	r3, [r7, #16]
 80101f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d140      	bne.n	8010278 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101f6:	693b      	ldr	r3, [r7, #16]
 80101f8:	3304      	adds	r3, #4
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7fe f9c2 	bl	800e584 <uxListRemove>
 8010200:	4603      	mov	r3, r0
 8010202:	2b00      	cmp	r3, #0
 8010204:	d115      	bne.n	8010232 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010206:	693b      	ldr	r3, [r7, #16]
 8010208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801020a:	491f      	ldr	r1, [pc, #124]	; (8010288 <xTaskPriorityDisinherit+0x104>)
 801020c:	4613      	mov	r3, r2
 801020e:	009b      	lsls	r3, r3, #2
 8010210:	4413      	add	r3, r2
 8010212:	009b      	lsls	r3, r3, #2
 8010214:	440b      	add	r3, r1
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d10a      	bne.n	8010232 <xTaskPriorityDisinherit+0xae>
 801021c:	693b      	ldr	r3, [r7, #16]
 801021e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010220:	2201      	movs	r2, #1
 8010222:	fa02 f303 	lsl.w	r3, r2, r3
 8010226:	43da      	mvns	r2, r3
 8010228:	4b18      	ldr	r3, [pc, #96]	; (801028c <xTaskPriorityDisinherit+0x108>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	4013      	ands	r3, r2
 801022e:	4a17      	ldr	r2, [pc, #92]	; (801028c <xTaskPriorityDisinherit+0x108>)
 8010230:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010232:	693b      	ldr	r3, [r7, #16]
 8010234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010236:	693b      	ldr	r3, [r7, #16]
 8010238:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801023a:	693b      	ldr	r3, [r7, #16]
 801023c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801023e:	f1c3 0207 	rsb	r2, r3, #7
 8010242:	693b      	ldr	r3, [r7, #16]
 8010244:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010246:	693b      	ldr	r3, [r7, #16]
 8010248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801024a:	2201      	movs	r2, #1
 801024c:	409a      	lsls	r2, r3
 801024e:	4b0f      	ldr	r3, [pc, #60]	; (801028c <xTaskPriorityDisinherit+0x108>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	4313      	orrs	r3, r2
 8010254:	4a0d      	ldr	r2, [pc, #52]	; (801028c <xTaskPriorityDisinherit+0x108>)
 8010256:	6013      	str	r3, [r2, #0]
 8010258:	693b      	ldr	r3, [r7, #16]
 801025a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801025c:	4613      	mov	r3, r2
 801025e:	009b      	lsls	r3, r3, #2
 8010260:	4413      	add	r3, r2
 8010262:	009b      	lsls	r3, r3, #2
 8010264:	4a08      	ldr	r2, [pc, #32]	; (8010288 <xTaskPriorityDisinherit+0x104>)
 8010266:	441a      	add	r2, r3
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	3304      	adds	r3, #4
 801026c:	4619      	mov	r1, r3
 801026e:	4610      	mov	r0, r2
 8010270:	f7fe f92d 	bl	800e4ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010274:	2301      	movs	r3, #1
 8010276:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010278:	697b      	ldr	r3, [r7, #20]
	}
 801027a:	4618      	mov	r0, r3
 801027c:	3718      	adds	r7, #24
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}
 8010282:	bf00      	nop
 8010284:	20002698 	.word	0x20002698
 8010288:	2000269c 	.word	0x2000269c
 801028c:	200027a0 	.word	0x200027a0

08010290 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010290:	b580      	push	{r7, lr}
 8010292:	b088      	sub	sp, #32
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801029e:	2301      	movs	r3, #1
 80102a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	f000 8088 	beq.w	80103ba <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80102aa:	69bb      	ldr	r3, [r7, #24]
 80102ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d10a      	bne.n	80102c8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80102b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b6:	f383 8811 	msr	BASEPRI, r3
 80102ba:	f3bf 8f6f 	isb	sy
 80102be:	f3bf 8f4f 	dsb	sy
 80102c2:	60fb      	str	r3, [r7, #12]
}
 80102c4:	bf00      	nop
 80102c6:	e7fe      	b.n	80102c6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80102c8:	69bb      	ldr	r3, [r7, #24]
 80102ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102cc:	683a      	ldr	r2, [r7, #0]
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d902      	bls.n	80102d8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80102d2:	683b      	ldr	r3, [r7, #0]
 80102d4:	61fb      	str	r3, [r7, #28]
 80102d6:	e002      	b.n	80102de <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80102d8:	69bb      	ldr	r3, [r7, #24]
 80102da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102dc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80102de:	69bb      	ldr	r3, [r7, #24]
 80102e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102e2:	69fa      	ldr	r2, [r7, #28]
 80102e4:	429a      	cmp	r2, r3
 80102e6:	d068      	beq.n	80103ba <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80102e8:	69bb      	ldr	r3, [r7, #24]
 80102ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80102ec:	697a      	ldr	r2, [r7, #20]
 80102ee:	429a      	cmp	r2, r3
 80102f0:	d163      	bne.n	80103ba <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80102f2:	4b34      	ldr	r3, [pc, #208]	; (80103c4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	69ba      	ldr	r2, [r7, #24]
 80102f8:	429a      	cmp	r2, r3
 80102fa:	d10a      	bne.n	8010312 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80102fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010300:	f383 8811 	msr	BASEPRI, r3
 8010304:	f3bf 8f6f 	isb	sy
 8010308:	f3bf 8f4f 	dsb	sy
 801030c:	60bb      	str	r3, [r7, #8]
}
 801030e:	bf00      	nop
 8010310:	e7fe      	b.n	8010310 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010312:	69bb      	ldr	r3, [r7, #24]
 8010314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010316:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010318:	69bb      	ldr	r3, [r7, #24]
 801031a:	69fa      	ldr	r2, [r7, #28]
 801031c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801031e:	69bb      	ldr	r3, [r7, #24]
 8010320:	699b      	ldr	r3, [r3, #24]
 8010322:	2b00      	cmp	r3, #0
 8010324:	db04      	blt.n	8010330 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010326:	69fb      	ldr	r3, [r7, #28]
 8010328:	f1c3 0207 	rsb	r2, r3, #7
 801032c:	69bb      	ldr	r3, [r7, #24]
 801032e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010330:	69bb      	ldr	r3, [r7, #24]
 8010332:	6959      	ldr	r1, [r3, #20]
 8010334:	693a      	ldr	r2, [r7, #16]
 8010336:	4613      	mov	r3, r2
 8010338:	009b      	lsls	r3, r3, #2
 801033a:	4413      	add	r3, r2
 801033c:	009b      	lsls	r3, r3, #2
 801033e:	4a22      	ldr	r2, [pc, #136]	; (80103c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010340:	4413      	add	r3, r2
 8010342:	4299      	cmp	r1, r3
 8010344:	d101      	bne.n	801034a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8010346:	2301      	movs	r3, #1
 8010348:	e000      	b.n	801034c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 801034a:	2300      	movs	r3, #0
 801034c:	2b00      	cmp	r3, #0
 801034e:	d034      	beq.n	80103ba <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010350:	69bb      	ldr	r3, [r7, #24]
 8010352:	3304      	adds	r3, #4
 8010354:	4618      	mov	r0, r3
 8010356:	f7fe f915 	bl	800e584 <uxListRemove>
 801035a:	4603      	mov	r3, r0
 801035c:	2b00      	cmp	r3, #0
 801035e:	d115      	bne.n	801038c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010360:	69bb      	ldr	r3, [r7, #24]
 8010362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010364:	4918      	ldr	r1, [pc, #96]	; (80103c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010366:	4613      	mov	r3, r2
 8010368:	009b      	lsls	r3, r3, #2
 801036a:	4413      	add	r3, r2
 801036c:	009b      	lsls	r3, r3, #2
 801036e:	440b      	add	r3, r1
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d10a      	bne.n	801038c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8010376:	69bb      	ldr	r3, [r7, #24]
 8010378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801037a:	2201      	movs	r2, #1
 801037c:	fa02 f303 	lsl.w	r3, r2, r3
 8010380:	43da      	mvns	r2, r3
 8010382:	4b12      	ldr	r3, [pc, #72]	; (80103cc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	4013      	ands	r3, r2
 8010388:	4a10      	ldr	r2, [pc, #64]	; (80103cc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801038a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801038c:	69bb      	ldr	r3, [r7, #24]
 801038e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010390:	2201      	movs	r2, #1
 8010392:	409a      	lsls	r2, r3
 8010394:	4b0d      	ldr	r3, [pc, #52]	; (80103cc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	4313      	orrs	r3, r2
 801039a:	4a0c      	ldr	r2, [pc, #48]	; (80103cc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801039c:	6013      	str	r3, [r2, #0]
 801039e:	69bb      	ldr	r3, [r7, #24]
 80103a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103a2:	4613      	mov	r3, r2
 80103a4:	009b      	lsls	r3, r3, #2
 80103a6:	4413      	add	r3, r2
 80103a8:	009b      	lsls	r3, r3, #2
 80103aa:	4a07      	ldr	r2, [pc, #28]	; (80103c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80103ac:	441a      	add	r2, r3
 80103ae:	69bb      	ldr	r3, [r7, #24]
 80103b0:	3304      	adds	r3, #4
 80103b2:	4619      	mov	r1, r3
 80103b4:	4610      	mov	r0, r2
 80103b6:	f7fe f88a 	bl	800e4ce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80103ba:	bf00      	nop
 80103bc:	3720      	adds	r7, #32
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}
 80103c2:	bf00      	nop
 80103c4:	20002698 	.word	0x20002698
 80103c8:	2000269c 	.word	0x2000269c
 80103cc:	200027a0 	.word	0x200027a0

080103d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80103d0:	b480      	push	{r7}
 80103d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80103d4:	4b07      	ldr	r3, [pc, #28]	; (80103f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d004      	beq.n	80103e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80103dc:	4b05      	ldr	r3, [pc, #20]	; (80103f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80103e2:	3201      	adds	r2, #1
 80103e4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80103e6:	4b03      	ldr	r3, [pc, #12]	; (80103f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80103e8:	681b      	ldr	r3, [r3, #0]
	}
 80103ea:	4618      	mov	r0, r3
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bc80      	pop	{r7}
 80103f0:	4770      	bx	lr
 80103f2:	bf00      	nop
 80103f4:	20002698 	.word	0x20002698

080103f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b084      	sub	sp, #16
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
 8010400:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010402:	4b29      	ldr	r3, [pc, #164]	; (80104a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010408:	4b28      	ldr	r3, [pc, #160]	; (80104ac <prvAddCurrentTaskToDelayedList+0xb4>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	3304      	adds	r3, #4
 801040e:	4618      	mov	r0, r3
 8010410:	f7fe f8b8 	bl	800e584 <uxListRemove>
 8010414:	4603      	mov	r3, r0
 8010416:	2b00      	cmp	r3, #0
 8010418:	d10b      	bne.n	8010432 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801041a:	4b24      	ldr	r3, [pc, #144]	; (80104ac <prvAddCurrentTaskToDelayedList+0xb4>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010420:	2201      	movs	r2, #1
 8010422:	fa02 f303 	lsl.w	r3, r2, r3
 8010426:	43da      	mvns	r2, r3
 8010428:	4b21      	ldr	r3, [pc, #132]	; (80104b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	4013      	ands	r3, r2
 801042e:	4a20      	ldr	r2, [pc, #128]	; (80104b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010430:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010438:	d10a      	bne.n	8010450 <prvAddCurrentTaskToDelayedList+0x58>
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d007      	beq.n	8010450 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010440:	4b1a      	ldr	r3, [pc, #104]	; (80104ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	3304      	adds	r3, #4
 8010446:	4619      	mov	r1, r3
 8010448:	481a      	ldr	r0, [pc, #104]	; (80104b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801044a:	f7fe f840 	bl	800e4ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801044e:	e026      	b.n	801049e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010450:	68fa      	ldr	r2, [r7, #12]
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	4413      	add	r3, r2
 8010456:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010458:	4b14      	ldr	r3, [pc, #80]	; (80104ac <prvAddCurrentTaskToDelayedList+0xb4>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	68ba      	ldr	r2, [r7, #8]
 801045e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010460:	68ba      	ldr	r2, [r7, #8]
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	429a      	cmp	r2, r3
 8010466:	d209      	bcs.n	801047c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010468:	4b13      	ldr	r3, [pc, #76]	; (80104b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801046a:	681a      	ldr	r2, [r3, #0]
 801046c:	4b0f      	ldr	r3, [pc, #60]	; (80104ac <prvAddCurrentTaskToDelayedList+0xb4>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	3304      	adds	r3, #4
 8010472:	4619      	mov	r1, r3
 8010474:	4610      	mov	r0, r2
 8010476:	f7fe f84d 	bl	800e514 <vListInsert>
}
 801047a:	e010      	b.n	801049e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801047c:	4b0f      	ldr	r3, [pc, #60]	; (80104bc <prvAddCurrentTaskToDelayedList+0xc4>)
 801047e:	681a      	ldr	r2, [r3, #0]
 8010480:	4b0a      	ldr	r3, [pc, #40]	; (80104ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	3304      	adds	r3, #4
 8010486:	4619      	mov	r1, r3
 8010488:	4610      	mov	r0, r2
 801048a:	f7fe f843 	bl	800e514 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801048e:	4b0c      	ldr	r3, [pc, #48]	; (80104c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	68ba      	ldr	r2, [r7, #8]
 8010494:	429a      	cmp	r2, r3
 8010496:	d202      	bcs.n	801049e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010498:	4a09      	ldr	r2, [pc, #36]	; (80104c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	6013      	str	r3, [r2, #0]
}
 801049e:	bf00      	nop
 80104a0:	3710      	adds	r7, #16
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	bf00      	nop
 80104a8:	2000279c 	.word	0x2000279c
 80104ac:	20002698 	.word	0x20002698
 80104b0:	200027a0 	.word	0x200027a0
 80104b4:	20002784 	.word	0x20002784
 80104b8:	20002754 	.word	0x20002754
 80104bc:	20002750 	.word	0x20002750
 80104c0:	200027b8 	.word	0x200027b8

080104c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80104c4:	b480      	push	{r7}
 80104c6:	b085      	sub	sp, #20
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	60f8      	str	r0, [r7, #12]
 80104cc:	60b9      	str	r1, [r7, #8]
 80104ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	3b04      	subs	r3, #4
 80104d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80104dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	3b04      	subs	r3, #4
 80104e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80104e4:	68bb      	ldr	r3, [r7, #8]
 80104e6:	f023 0201 	bic.w	r2, r3, #1
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	3b04      	subs	r3, #4
 80104f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80104f4:	4a08      	ldr	r2, [pc, #32]	; (8010518 <pxPortInitialiseStack+0x54>)
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	3b14      	subs	r3, #20
 80104fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010500:	687a      	ldr	r2, [r7, #4]
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	3b20      	subs	r3, #32
 801050a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801050c:	68fb      	ldr	r3, [r7, #12]
}
 801050e:	4618      	mov	r0, r3
 8010510:	3714      	adds	r7, #20
 8010512:	46bd      	mov	sp, r7
 8010514:	bc80      	pop	{r7}
 8010516:	4770      	bx	lr
 8010518:	0801051d 	.word	0x0801051d

0801051c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801051c:	b480      	push	{r7}
 801051e:	b085      	sub	sp, #20
 8010520:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8010522:	2300      	movs	r3, #0
 8010524:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010526:	4b12      	ldr	r3, [pc, #72]	; (8010570 <prvTaskExitError+0x54>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801052e:	d00a      	beq.n	8010546 <prvTaskExitError+0x2a>
	__asm volatile
 8010530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010534:	f383 8811 	msr	BASEPRI, r3
 8010538:	f3bf 8f6f 	isb	sy
 801053c:	f3bf 8f4f 	dsb	sy
 8010540:	60fb      	str	r3, [r7, #12]
}
 8010542:	bf00      	nop
 8010544:	e7fe      	b.n	8010544 <prvTaskExitError+0x28>
	__asm volatile
 8010546:	f04f 0350 	mov.w	r3, #80	; 0x50
 801054a:	f383 8811 	msr	BASEPRI, r3
 801054e:	f3bf 8f6f 	isb	sy
 8010552:	f3bf 8f4f 	dsb	sy
 8010556:	60bb      	str	r3, [r7, #8]
}
 8010558:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801055a:	bf00      	nop
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d0fc      	beq.n	801055c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010562:	bf00      	nop
 8010564:	bf00      	nop
 8010566:	3714      	adds	r7, #20
 8010568:	46bd      	mov	sp, r7
 801056a:	bc80      	pop	{r7}
 801056c:	4770      	bx	lr
 801056e:	bf00      	nop
 8010570:	20000058 	.word	0x20000058
	...

08010580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010580:	4b07      	ldr	r3, [pc, #28]	; (80105a0 <pxCurrentTCBConst2>)
 8010582:	6819      	ldr	r1, [r3, #0]
 8010584:	6808      	ldr	r0, [r1, #0]
 8010586:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801058a:	f380 8809 	msr	PSP, r0
 801058e:	f3bf 8f6f 	isb	sy
 8010592:	f04f 0000 	mov.w	r0, #0
 8010596:	f380 8811 	msr	BASEPRI, r0
 801059a:	f04e 0e0d 	orr.w	lr, lr, #13
 801059e:	4770      	bx	lr

080105a0 <pxCurrentTCBConst2>:
 80105a0:	20002698 	.word	0x20002698
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80105a4:	bf00      	nop
 80105a6:	bf00      	nop

080105a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80105a8:	4806      	ldr	r0, [pc, #24]	; (80105c4 <prvPortStartFirstTask+0x1c>)
 80105aa:	6800      	ldr	r0, [r0, #0]
 80105ac:	6800      	ldr	r0, [r0, #0]
 80105ae:	f380 8808 	msr	MSP, r0
 80105b2:	b662      	cpsie	i
 80105b4:	b661      	cpsie	f
 80105b6:	f3bf 8f4f 	dsb	sy
 80105ba:	f3bf 8f6f 	isb	sy
 80105be:	df00      	svc	0
 80105c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80105c2:	bf00      	nop
 80105c4:	e000ed08 	.word	0xe000ed08

080105c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b084      	sub	sp, #16
 80105cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80105ce:	4b32      	ldr	r3, [pc, #200]	; (8010698 <xPortStartScheduler+0xd0>)
 80105d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	b2db      	uxtb	r3, r3
 80105d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	22ff      	movs	r2, #255	; 0xff
 80105de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	781b      	ldrb	r3, [r3, #0]
 80105e4:	b2db      	uxtb	r3, r3
 80105e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80105e8:	78fb      	ldrb	r3, [r7, #3]
 80105ea:	b2db      	uxtb	r3, r3
 80105ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80105f0:	b2da      	uxtb	r2, r3
 80105f2:	4b2a      	ldr	r3, [pc, #168]	; (801069c <xPortStartScheduler+0xd4>)
 80105f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80105f6:	4b2a      	ldr	r3, [pc, #168]	; (80106a0 <xPortStartScheduler+0xd8>)
 80105f8:	2207      	movs	r2, #7
 80105fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80105fc:	e009      	b.n	8010612 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80105fe:	4b28      	ldr	r3, [pc, #160]	; (80106a0 <xPortStartScheduler+0xd8>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	3b01      	subs	r3, #1
 8010604:	4a26      	ldr	r2, [pc, #152]	; (80106a0 <xPortStartScheduler+0xd8>)
 8010606:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010608:	78fb      	ldrb	r3, [r7, #3]
 801060a:	b2db      	uxtb	r3, r3
 801060c:	005b      	lsls	r3, r3, #1
 801060e:	b2db      	uxtb	r3, r3
 8010610:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010612:	78fb      	ldrb	r3, [r7, #3]
 8010614:	b2db      	uxtb	r3, r3
 8010616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801061a:	2b80      	cmp	r3, #128	; 0x80
 801061c:	d0ef      	beq.n	80105fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801061e:	4b20      	ldr	r3, [pc, #128]	; (80106a0 <xPortStartScheduler+0xd8>)
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	f1c3 0307 	rsb	r3, r3, #7
 8010626:	2b04      	cmp	r3, #4
 8010628:	d00a      	beq.n	8010640 <xPortStartScheduler+0x78>
	__asm volatile
 801062a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801062e:	f383 8811 	msr	BASEPRI, r3
 8010632:	f3bf 8f6f 	isb	sy
 8010636:	f3bf 8f4f 	dsb	sy
 801063a:	60bb      	str	r3, [r7, #8]
}
 801063c:	bf00      	nop
 801063e:	e7fe      	b.n	801063e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010640:	4b17      	ldr	r3, [pc, #92]	; (80106a0 <xPortStartScheduler+0xd8>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	021b      	lsls	r3, r3, #8
 8010646:	4a16      	ldr	r2, [pc, #88]	; (80106a0 <xPortStartScheduler+0xd8>)
 8010648:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801064a:	4b15      	ldr	r3, [pc, #84]	; (80106a0 <xPortStartScheduler+0xd8>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010652:	4a13      	ldr	r2, [pc, #76]	; (80106a0 <xPortStartScheduler+0xd8>)
 8010654:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	b2da      	uxtb	r2, r3
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801065e:	4b11      	ldr	r3, [pc, #68]	; (80106a4 <xPortStartScheduler+0xdc>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	4a10      	ldr	r2, [pc, #64]	; (80106a4 <xPortStartScheduler+0xdc>)
 8010664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010668:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801066a:	4b0e      	ldr	r3, [pc, #56]	; (80106a4 <xPortStartScheduler+0xdc>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	4a0d      	ldr	r2, [pc, #52]	; (80106a4 <xPortStartScheduler+0xdc>)
 8010670:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010674:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010676:	f000 f8b9 	bl	80107ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801067a:	4b0b      	ldr	r3, [pc, #44]	; (80106a8 <xPortStartScheduler+0xe0>)
 801067c:	2200      	movs	r2, #0
 801067e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010680:	f7ff ff92 	bl	80105a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010684:	f7ff fa90 	bl	800fba8 <vTaskSwitchContext>
	prvTaskExitError();
 8010688:	f7ff ff48 	bl	801051c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801068c:	2300      	movs	r3, #0
}
 801068e:	4618      	mov	r0, r3
 8010690:	3710      	adds	r7, #16
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}
 8010696:	bf00      	nop
 8010698:	e000e400 	.word	0xe000e400
 801069c:	200027c4 	.word	0x200027c4
 80106a0:	200027c8 	.word	0x200027c8
 80106a4:	e000ed20 	.word	0xe000ed20
 80106a8:	20000058 	.word	0x20000058

080106ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80106ac:	b480      	push	{r7}
 80106ae:	b083      	sub	sp, #12
 80106b0:	af00      	add	r7, sp, #0
	__asm volatile
 80106b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106b6:	f383 8811 	msr	BASEPRI, r3
 80106ba:	f3bf 8f6f 	isb	sy
 80106be:	f3bf 8f4f 	dsb	sy
 80106c2:	607b      	str	r3, [r7, #4]
}
 80106c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80106c6:	4b0f      	ldr	r3, [pc, #60]	; (8010704 <vPortEnterCritical+0x58>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	3301      	adds	r3, #1
 80106cc:	4a0d      	ldr	r2, [pc, #52]	; (8010704 <vPortEnterCritical+0x58>)
 80106ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80106d0:	4b0c      	ldr	r3, [pc, #48]	; (8010704 <vPortEnterCritical+0x58>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	2b01      	cmp	r3, #1
 80106d6:	d10f      	bne.n	80106f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80106d8:	4b0b      	ldr	r3, [pc, #44]	; (8010708 <vPortEnterCritical+0x5c>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	b2db      	uxtb	r3, r3
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d00a      	beq.n	80106f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80106e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e6:	f383 8811 	msr	BASEPRI, r3
 80106ea:	f3bf 8f6f 	isb	sy
 80106ee:	f3bf 8f4f 	dsb	sy
 80106f2:	603b      	str	r3, [r7, #0]
}
 80106f4:	bf00      	nop
 80106f6:	e7fe      	b.n	80106f6 <vPortEnterCritical+0x4a>
	}
}
 80106f8:	bf00      	nop
 80106fa:	370c      	adds	r7, #12
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bc80      	pop	{r7}
 8010700:	4770      	bx	lr
 8010702:	bf00      	nop
 8010704:	20000058 	.word	0x20000058
 8010708:	e000ed04 	.word	0xe000ed04

0801070c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801070c:	b480      	push	{r7}
 801070e:	b083      	sub	sp, #12
 8010710:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010712:	4b11      	ldr	r3, [pc, #68]	; (8010758 <vPortExitCritical+0x4c>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d10a      	bne.n	8010730 <vPortExitCritical+0x24>
	__asm volatile
 801071a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801071e:	f383 8811 	msr	BASEPRI, r3
 8010722:	f3bf 8f6f 	isb	sy
 8010726:	f3bf 8f4f 	dsb	sy
 801072a:	607b      	str	r3, [r7, #4]
}
 801072c:	bf00      	nop
 801072e:	e7fe      	b.n	801072e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010730:	4b09      	ldr	r3, [pc, #36]	; (8010758 <vPortExitCritical+0x4c>)
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	3b01      	subs	r3, #1
 8010736:	4a08      	ldr	r2, [pc, #32]	; (8010758 <vPortExitCritical+0x4c>)
 8010738:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801073a:	4b07      	ldr	r3, [pc, #28]	; (8010758 <vPortExitCritical+0x4c>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d105      	bne.n	801074e <vPortExitCritical+0x42>
 8010742:	2300      	movs	r3, #0
 8010744:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	f383 8811 	msr	BASEPRI, r3
}
 801074c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801074e:	bf00      	nop
 8010750:	370c      	adds	r7, #12
 8010752:	46bd      	mov	sp, r7
 8010754:	bc80      	pop	{r7}
 8010756:	4770      	bx	lr
 8010758:	20000058 	.word	0x20000058
 801075c:	00000000 	.word	0x00000000

08010760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010760:	f3ef 8009 	mrs	r0, PSP
 8010764:	f3bf 8f6f 	isb	sy
 8010768:	4b0d      	ldr	r3, [pc, #52]	; (80107a0 <pxCurrentTCBConst>)
 801076a:	681a      	ldr	r2, [r3, #0]
 801076c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010770:	6010      	str	r0, [r2, #0]
 8010772:	e92d 4008 	stmdb	sp!, {r3, lr}
 8010776:	f04f 0050 	mov.w	r0, #80	; 0x50
 801077a:	f380 8811 	msr	BASEPRI, r0
 801077e:	f7ff fa13 	bl	800fba8 <vTaskSwitchContext>
 8010782:	f04f 0000 	mov.w	r0, #0
 8010786:	f380 8811 	msr	BASEPRI, r0
 801078a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801078e:	6819      	ldr	r1, [r3, #0]
 8010790:	6808      	ldr	r0, [r1, #0]
 8010792:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010796:	f380 8809 	msr	PSP, r0
 801079a:	f3bf 8f6f 	isb	sy
 801079e:	4770      	bx	lr

080107a0 <pxCurrentTCBConst>:
 80107a0:	20002698 	.word	0x20002698
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80107a4:	bf00      	nop
 80107a6:	bf00      	nop

080107a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b082      	sub	sp, #8
 80107ac:	af00      	add	r7, sp, #0
	__asm volatile
 80107ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107b2:	f383 8811 	msr	BASEPRI, r3
 80107b6:	f3bf 8f6f 	isb	sy
 80107ba:	f3bf 8f4f 	dsb	sy
 80107be:	607b      	str	r3, [r7, #4]
}
 80107c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80107c2:	f7ff f933 	bl	800fa2c <xTaskIncrementTick>
 80107c6:	4603      	mov	r3, r0
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d003      	beq.n	80107d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80107cc:	4b06      	ldr	r3, [pc, #24]	; (80107e8 <SysTick_Handler+0x40>)
 80107ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107d2:	601a      	str	r2, [r3, #0]
 80107d4:	2300      	movs	r3, #0
 80107d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	f383 8811 	msr	BASEPRI, r3
}
 80107de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80107e0:	bf00      	nop
 80107e2:	3708      	adds	r7, #8
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd80      	pop	{r7, pc}
 80107e8:	e000ed04 	.word	0xe000ed04

080107ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80107ec:	b480      	push	{r7}
 80107ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80107f0:	4b0a      	ldr	r3, [pc, #40]	; (801081c <vPortSetupTimerInterrupt+0x30>)
 80107f2:	2200      	movs	r2, #0
 80107f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80107f6:	4b0a      	ldr	r3, [pc, #40]	; (8010820 <vPortSetupTimerInterrupt+0x34>)
 80107f8:	2200      	movs	r2, #0
 80107fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80107fc:	4b09      	ldr	r3, [pc, #36]	; (8010824 <vPortSetupTimerInterrupt+0x38>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	4a09      	ldr	r2, [pc, #36]	; (8010828 <vPortSetupTimerInterrupt+0x3c>)
 8010802:	fba2 2303 	umull	r2, r3, r2, r3
 8010806:	099b      	lsrs	r3, r3, #6
 8010808:	4a08      	ldr	r2, [pc, #32]	; (801082c <vPortSetupTimerInterrupt+0x40>)
 801080a:	3b01      	subs	r3, #1
 801080c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801080e:	4b03      	ldr	r3, [pc, #12]	; (801081c <vPortSetupTimerInterrupt+0x30>)
 8010810:	2207      	movs	r2, #7
 8010812:	601a      	str	r2, [r3, #0]
}
 8010814:	bf00      	nop
 8010816:	46bd      	mov	sp, r7
 8010818:	bc80      	pop	{r7}
 801081a:	4770      	bx	lr
 801081c:	e000e010 	.word	0xe000e010
 8010820:	e000e018 	.word	0xe000e018
 8010824:	2000002c 	.word	0x2000002c
 8010828:	10624dd3 	.word	0x10624dd3
 801082c:	e000e014 	.word	0xe000e014

08010830 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010830:	b480      	push	{r7}
 8010832:	b085      	sub	sp, #20
 8010834:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010836:	f3ef 8305 	mrs	r3, IPSR
 801083a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	2b0f      	cmp	r3, #15
 8010840:	d914      	bls.n	801086c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010842:	4a16      	ldr	r2, [pc, #88]	; (801089c <vPortValidateInterruptPriority+0x6c>)
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	4413      	add	r3, r2
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801084c:	4b14      	ldr	r3, [pc, #80]	; (80108a0 <vPortValidateInterruptPriority+0x70>)
 801084e:	781b      	ldrb	r3, [r3, #0]
 8010850:	7afa      	ldrb	r2, [r7, #11]
 8010852:	429a      	cmp	r2, r3
 8010854:	d20a      	bcs.n	801086c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010856:	f04f 0350 	mov.w	r3, #80	; 0x50
 801085a:	f383 8811 	msr	BASEPRI, r3
 801085e:	f3bf 8f6f 	isb	sy
 8010862:	f3bf 8f4f 	dsb	sy
 8010866:	607b      	str	r3, [r7, #4]
}
 8010868:	bf00      	nop
 801086a:	e7fe      	b.n	801086a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801086c:	4b0d      	ldr	r3, [pc, #52]	; (80108a4 <vPortValidateInterruptPriority+0x74>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010874:	4b0c      	ldr	r3, [pc, #48]	; (80108a8 <vPortValidateInterruptPriority+0x78>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	429a      	cmp	r2, r3
 801087a:	d90a      	bls.n	8010892 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801087c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010880:	f383 8811 	msr	BASEPRI, r3
 8010884:	f3bf 8f6f 	isb	sy
 8010888:	f3bf 8f4f 	dsb	sy
 801088c:	603b      	str	r3, [r7, #0]
}
 801088e:	bf00      	nop
 8010890:	e7fe      	b.n	8010890 <vPortValidateInterruptPriority+0x60>
	}
 8010892:	bf00      	nop
 8010894:	3714      	adds	r7, #20
 8010896:	46bd      	mov	sp, r7
 8010898:	bc80      	pop	{r7}
 801089a:	4770      	bx	lr
 801089c:	e000e3f0 	.word	0xe000e3f0
 80108a0:	200027c4 	.word	0x200027c4
 80108a4:	e000ed0c 	.word	0xe000ed0c
 80108a8:	200027c8 	.word	0x200027c8

080108ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b08a      	sub	sp, #40	; 0x28
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80108b4:	2300      	movs	r3, #0
 80108b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80108b8:	f7ff f80e 	bl	800f8d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80108bc:	4b58      	ldr	r3, [pc, #352]	; (8010a20 <pvPortMalloc+0x174>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d101      	bne.n	80108c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80108c4:	f000 f910 	bl	8010ae8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80108c8:	4b56      	ldr	r3, [pc, #344]	; (8010a24 <pvPortMalloc+0x178>)
 80108ca:	681a      	ldr	r2, [r3, #0]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	4013      	ands	r3, r2
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	f040 808e 	bne.w	80109f2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d01d      	beq.n	8010918 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80108dc:	2208      	movs	r2, #8
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	4413      	add	r3, r2
 80108e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f003 0307 	and.w	r3, r3, #7
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d014      	beq.n	8010918 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f023 0307 	bic.w	r3, r3, #7
 80108f4:	3308      	adds	r3, #8
 80108f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	f003 0307 	and.w	r3, r3, #7
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d00a      	beq.n	8010918 <pvPortMalloc+0x6c>
	__asm volatile
 8010902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010906:	f383 8811 	msr	BASEPRI, r3
 801090a:	f3bf 8f6f 	isb	sy
 801090e:	f3bf 8f4f 	dsb	sy
 8010912:	617b      	str	r3, [r7, #20]
}
 8010914:	bf00      	nop
 8010916:	e7fe      	b.n	8010916 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d069      	beq.n	80109f2 <pvPortMalloc+0x146>
 801091e:	4b42      	ldr	r3, [pc, #264]	; (8010a28 <pvPortMalloc+0x17c>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	687a      	ldr	r2, [r7, #4]
 8010924:	429a      	cmp	r2, r3
 8010926:	d864      	bhi.n	80109f2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010928:	4b40      	ldr	r3, [pc, #256]	; (8010a2c <pvPortMalloc+0x180>)
 801092a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801092c:	4b3f      	ldr	r3, [pc, #252]	; (8010a2c <pvPortMalloc+0x180>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010932:	e004      	b.n	801093e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010936:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010940:	685b      	ldr	r3, [r3, #4]
 8010942:	687a      	ldr	r2, [r7, #4]
 8010944:	429a      	cmp	r2, r3
 8010946:	d903      	bls.n	8010950 <pvPortMalloc+0xa4>
 8010948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d1f1      	bne.n	8010934 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010950:	4b33      	ldr	r3, [pc, #204]	; (8010a20 <pvPortMalloc+0x174>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010956:	429a      	cmp	r2, r3
 8010958:	d04b      	beq.n	80109f2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801095a:	6a3b      	ldr	r3, [r7, #32]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	2208      	movs	r2, #8
 8010960:	4413      	add	r3, r2
 8010962:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010966:	681a      	ldr	r2, [r3, #0]
 8010968:	6a3b      	ldr	r3, [r7, #32]
 801096a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801096e:	685a      	ldr	r2, [r3, #4]
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	1ad2      	subs	r2, r2, r3
 8010974:	2308      	movs	r3, #8
 8010976:	005b      	lsls	r3, r3, #1
 8010978:	429a      	cmp	r2, r3
 801097a:	d91f      	bls.n	80109bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801097c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	4413      	add	r3, r2
 8010982:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010984:	69bb      	ldr	r3, [r7, #24]
 8010986:	f003 0307 	and.w	r3, r3, #7
 801098a:	2b00      	cmp	r3, #0
 801098c:	d00a      	beq.n	80109a4 <pvPortMalloc+0xf8>
	__asm volatile
 801098e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010992:	f383 8811 	msr	BASEPRI, r3
 8010996:	f3bf 8f6f 	isb	sy
 801099a:	f3bf 8f4f 	dsb	sy
 801099e:	613b      	str	r3, [r7, #16]
}
 80109a0:	bf00      	nop
 80109a2:	e7fe      	b.n	80109a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80109a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a6:	685a      	ldr	r2, [r3, #4]
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	1ad2      	subs	r2, r2, r3
 80109ac:	69bb      	ldr	r3, [r7, #24]
 80109ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80109b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b2:	687a      	ldr	r2, [r7, #4]
 80109b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80109b6:	69b8      	ldr	r0, [r7, #24]
 80109b8:	f000 f8f8 	bl	8010bac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80109bc:	4b1a      	ldr	r3, [pc, #104]	; (8010a28 <pvPortMalloc+0x17c>)
 80109be:	681a      	ldr	r2, [r3, #0]
 80109c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c2:	685b      	ldr	r3, [r3, #4]
 80109c4:	1ad3      	subs	r3, r2, r3
 80109c6:	4a18      	ldr	r2, [pc, #96]	; (8010a28 <pvPortMalloc+0x17c>)
 80109c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80109ca:	4b17      	ldr	r3, [pc, #92]	; (8010a28 <pvPortMalloc+0x17c>)
 80109cc:	681a      	ldr	r2, [r3, #0]
 80109ce:	4b18      	ldr	r3, [pc, #96]	; (8010a30 <pvPortMalloc+0x184>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d203      	bcs.n	80109de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80109d6:	4b14      	ldr	r3, [pc, #80]	; (8010a28 <pvPortMalloc+0x17c>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	4a15      	ldr	r2, [pc, #84]	; (8010a30 <pvPortMalloc+0x184>)
 80109dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80109de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e0:	685a      	ldr	r2, [r3, #4]
 80109e2:	4b10      	ldr	r3, [pc, #64]	; (8010a24 <pvPortMalloc+0x178>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	431a      	orrs	r2, r3
 80109e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80109ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ee:	2200      	movs	r2, #0
 80109f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80109f2:	f7fe ff7f 	bl	800f8f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80109f6:	69fb      	ldr	r3, [r7, #28]
 80109f8:	f003 0307 	and.w	r3, r3, #7
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d00a      	beq.n	8010a16 <pvPortMalloc+0x16a>
	__asm volatile
 8010a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a04:	f383 8811 	msr	BASEPRI, r3
 8010a08:	f3bf 8f6f 	isb	sy
 8010a0c:	f3bf 8f4f 	dsb	sy
 8010a10:	60fb      	str	r3, [r7, #12]
}
 8010a12:	bf00      	nop
 8010a14:	e7fe      	b.n	8010a14 <pvPortMalloc+0x168>
	return pvReturn;
 8010a16:	69fb      	ldr	r3, [r7, #28]
}
 8010a18:	4618      	mov	r0, r3
 8010a1a:	3728      	adds	r7, #40	; 0x28
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}
 8010a20:	200063d4 	.word	0x200063d4
 8010a24:	200063e0 	.word	0x200063e0
 8010a28:	200063d8 	.word	0x200063d8
 8010a2c:	200063cc 	.word	0x200063cc
 8010a30:	200063dc 	.word	0x200063dc

08010a34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b086      	sub	sp, #24
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d048      	beq.n	8010ad8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010a46:	2308      	movs	r3, #8
 8010a48:	425b      	negs	r3, r3
 8010a4a:	697a      	ldr	r2, [r7, #20]
 8010a4c:	4413      	add	r3, r2
 8010a4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010a50:	697b      	ldr	r3, [r7, #20]
 8010a52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	685a      	ldr	r2, [r3, #4]
 8010a58:	4b21      	ldr	r3, [pc, #132]	; (8010ae0 <vPortFree+0xac>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	4013      	ands	r3, r2
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d10a      	bne.n	8010a78 <vPortFree+0x44>
	__asm volatile
 8010a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a66:	f383 8811 	msr	BASEPRI, r3
 8010a6a:	f3bf 8f6f 	isb	sy
 8010a6e:	f3bf 8f4f 	dsb	sy
 8010a72:	60fb      	str	r3, [r7, #12]
}
 8010a74:	bf00      	nop
 8010a76:	e7fe      	b.n	8010a76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010a78:	693b      	ldr	r3, [r7, #16]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d00a      	beq.n	8010a96 <vPortFree+0x62>
	__asm volatile
 8010a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a84:	f383 8811 	msr	BASEPRI, r3
 8010a88:	f3bf 8f6f 	isb	sy
 8010a8c:	f3bf 8f4f 	dsb	sy
 8010a90:	60bb      	str	r3, [r7, #8]
}
 8010a92:	bf00      	nop
 8010a94:	e7fe      	b.n	8010a94 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	685a      	ldr	r2, [r3, #4]
 8010a9a:	4b11      	ldr	r3, [pc, #68]	; (8010ae0 <vPortFree+0xac>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	4013      	ands	r3, r2
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d019      	beq.n	8010ad8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d115      	bne.n	8010ad8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010aac:	693b      	ldr	r3, [r7, #16]
 8010aae:	685a      	ldr	r2, [r3, #4]
 8010ab0:	4b0b      	ldr	r3, [pc, #44]	; (8010ae0 <vPortFree+0xac>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	43db      	mvns	r3, r3
 8010ab6:	401a      	ands	r2, r3
 8010ab8:	693b      	ldr	r3, [r7, #16]
 8010aba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010abc:	f7fe ff0c 	bl	800f8d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	685a      	ldr	r2, [r3, #4]
 8010ac4:	4b07      	ldr	r3, [pc, #28]	; (8010ae4 <vPortFree+0xb0>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	4413      	add	r3, r2
 8010aca:	4a06      	ldr	r2, [pc, #24]	; (8010ae4 <vPortFree+0xb0>)
 8010acc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010ace:	6938      	ldr	r0, [r7, #16]
 8010ad0:	f000 f86c 	bl	8010bac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010ad4:	f7fe ff0e 	bl	800f8f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010ad8:	bf00      	nop
 8010ada:	3718      	adds	r7, #24
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}
 8010ae0:	200063e0 	.word	0x200063e0
 8010ae4:	200063d8 	.word	0x200063d8

08010ae8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b085      	sub	sp, #20
 8010aec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010aee:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8010af2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010af4:	4b27      	ldr	r3, [pc, #156]	; (8010b94 <prvHeapInit+0xac>)
 8010af6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	f003 0307 	and.w	r3, r3, #7
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d00c      	beq.n	8010b1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	3307      	adds	r3, #7
 8010b06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	f023 0307 	bic.w	r3, r3, #7
 8010b0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010b10:	68ba      	ldr	r2, [r7, #8]
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	1ad3      	subs	r3, r2, r3
 8010b16:	4a1f      	ldr	r2, [pc, #124]	; (8010b94 <prvHeapInit+0xac>)
 8010b18:	4413      	add	r3, r2
 8010b1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010b20:	4a1d      	ldr	r2, [pc, #116]	; (8010b98 <prvHeapInit+0xb0>)
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010b26:	4b1c      	ldr	r3, [pc, #112]	; (8010b98 <prvHeapInit+0xb0>)
 8010b28:	2200      	movs	r2, #0
 8010b2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	68ba      	ldr	r2, [r7, #8]
 8010b30:	4413      	add	r3, r2
 8010b32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010b34:	2208      	movs	r2, #8
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	1a9b      	subs	r3, r3, r2
 8010b3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	f023 0307 	bic.w	r3, r3, #7
 8010b42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	4a15      	ldr	r2, [pc, #84]	; (8010b9c <prvHeapInit+0xb4>)
 8010b48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010b4a:	4b14      	ldr	r3, [pc, #80]	; (8010b9c <prvHeapInit+0xb4>)
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	2200      	movs	r2, #0
 8010b50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010b52:	4b12      	ldr	r3, [pc, #72]	; (8010b9c <prvHeapInit+0xb4>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	2200      	movs	r2, #0
 8010b58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	68fa      	ldr	r2, [r7, #12]
 8010b62:	1ad2      	subs	r2, r2, r3
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010b68:	4b0c      	ldr	r3, [pc, #48]	; (8010b9c <prvHeapInit+0xb4>)
 8010b6a:	681a      	ldr	r2, [r3, #0]
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	685b      	ldr	r3, [r3, #4]
 8010b74:	4a0a      	ldr	r2, [pc, #40]	; (8010ba0 <prvHeapInit+0xb8>)
 8010b76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010b78:	683b      	ldr	r3, [r7, #0]
 8010b7a:	685b      	ldr	r3, [r3, #4]
 8010b7c:	4a09      	ldr	r2, [pc, #36]	; (8010ba4 <prvHeapInit+0xbc>)
 8010b7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010b80:	4b09      	ldr	r3, [pc, #36]	; (8010ba8 <prvHeapInit+0xc0>)
 8010b82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010b86:	601a      	str	r2, [r3, #0]
}
 8010b88:	bf00      	nop
 8010b8a:	3714      	adds	r7, #20
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bc80      	pop	{r7}
 8010b90:	4770      	bx	lr
 8010b92:	bf00      	nop
 8010b94:	200027cc 	.word	0x200027cc
 8010b98:	200063cc 	.word	0x200063cc
 8010b9c:	200063d4 	.word	0x200063d4
 8010ba0:	200063dc 	.word	0x200063dc
 8010ba4:	200063d8 	.word	0x200063d8
 8010ba8:	200063e0 	.word	0x200063e0

08010bac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010bac:	b480      	push	{r7}
 8010bae:	b085      	sub	sp, #20
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010bb4:	4b27      	ldr	r3, [pc, #156]	; (8010c54 <prvInsertBlockIntoFreeList+0xa8>)
 8010bb6:	60fb      	str	r3, [r7, #12]
 8010bb8:	e002      	b.n	8010bc0 <prvInsertBlockIntoFreeList+0x14>
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	60fb      	str	r3, [r7, #12]
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	687a      	ldr	r2, [r7, #4]
 8010bc6:	429a      	cmp	r2, r3
 8010bc8:	d8f7      	bhi.n	8010bba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	685b      	ldr	r3, [r3, #4]
 8010bd2:	68ba      	ldr	r2, [r7, #8]
 8010bd4:	4413      	add	r3, r2
 8010bd6:	687a      	ldr	r2, [r7, #4]
 8010bd8:	429a      	cmp	r2, r3
 8010bda:	d108      	bne.n	8010bee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	685a      	ldr	r2, [r3, #4]
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	685b      	ldr	r3, [r3, #4]
 8010be4:	441a      	add	r2, r3
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	685b      	ldr	r3, [r3, #4]
 8010bf6:	68ba      	ldr	r2, [r7, #8]
 8010bf8:	441a      	add	r2, r3
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	d118      	bne.n	8010c34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	681a      	ldr	r2, [r3, #0]
 8010c06:	4b14      	ldr	r3, [pc, #80]	; (8010c58 <prvInsertBlockIntoFreeList+0xac>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d00d      	beq.n	8010c2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	685a      	ldr	r2, [r3, #4]
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	685b      	ldr	r3, [r3, #4]
 8010c18:	441a      	add	r2, r3
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	681a      	ldr	r2, [r3, #0]
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	601a      	str	r2, [r3, #0]
 8010c28:	e008      	b.n	8010c3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010c2a:	4b0b      	ldr	r3, [pc, #44]	; (8010c58 <prvInsertBlockIntoFreeList+0xac>)
 8010c2c:	681a      	ldr	r2, [r3, #0]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	601a      	str	r2, [r3, #0]
 8010c32:	e003      	b.n	8010c3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	681a      	ldr	r2, [r3, #0]
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010c3c:	68fa      	ldr	r2, [r7, #12]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	429a      	cmp	r2, r3
 8010c42:	d002      	beq.n	8010c4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	687a      	ldr	r2, [r7, #4]
 8010c48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010c4a:	bf00      	nop
 8010c4c:	3714      	adds	r7, #20
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bc80      	pop	{r7}
 8010c52:	4770      	bx	lr
 8010c54:	200063cc 	.word	0x200063cc
 8010c58:	200063d4 	.word	0x200063d4

08010c5c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010c60:	2201      	movs	r2, #1
 8010c62:	490e      	ldr	r1, [pc, #56]	; (8010c9c <MX_USB_HOST_Init+0x40>)
 8010c64:	480e      	ldr	r0, [pc, #56]	; (8010ca0 <MX_USB_HOST_Init+0x44>)
 8010c66:	f7f9 fc9b 	bl	800a5a0 <USBH_Init>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d001      	beq.n	8010c74 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010c70:	f7f1 fbe4 	bl	800243c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8010c74:	490b      	ldr	r1, [pc, #44]	; (8010ca4 <MX_USB_HOST_Init+0x48>)
 8010c76:	480a      	ldr	r0, [pc, #40]	; (8010ca0 <MX_USB_HOST_Init+0x44>)
 8010c78:	f7f9 fd3e 	bl	800a6f8 <USBH_RegisterClass>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d001      	beq.n	8010c86 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010c82:	f7f1 fbdb 	bl	800243c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010c86:	4806      	ldr	r0, [pc, #24]	; (8010ca0 <MX_USB_HOST_Init+0x44>)
 8010c88:	f7f9 fdc0 	bl	800a80c <USBH_Start>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d001      	beq.n	8010c96 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010c92:	f7f1 fbd3 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010c96:	bf00      	nop
 8010c98:	bd80      	pop	{r7, pc}
 8010c9a:	bf00      	nop
 8010c9c:	08010ca9 	.word	0x08010ca9
 8010ca0:	2000acbc 	.word	0x2000acbc
 8010ca4:	20000038 	.word	0x20000038

08010ca8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	460b      	mov	r3, r1
 8010cb2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010cb4:	78fb      	ldrb	r3, [r7, #3]
 8010cb6:	3b01      	subs	r3, #1
 8010cb8:	2b04      	cmp	r3, #4
 8010cba:	d828      	bhi.n	8010d0e <USBH_UserProcess+0x66>
 8010cbc:	a201      	add	r2, pc, #4	; (adr r2, 8010cc4 <USBH_UserProcess+0x1c>)
 8010cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cc2:	bf00      	nop
 8010cc4:	08010d0f 	.word	0x08010d0f
 8010cc8:	08010ceb 	.word	0x08010ceb
 8010ccc:	08010d0f 	.word	0x08010d0f
 8010cd0:	08010d07 	.word	0x08010d07
 8010cd4:	08010cd9 	.word	0x08010cd9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010cd8:	4b0f      	ldr	r3, [pc, #60]	; (8010d18 <USBH_UserProcess+0x70>)
 8010cda:	2203      	movs	r2, #3
 8010cdc:	701a      	strb	r2, [r3, #0]
  usb_good = 0;
 8010cde:	4b0f      	ldr	r3, [pc, #60]	; (8010d1c <USBH_UserProcess+0x74>)
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	601a      	str	r2, [r3, #0]
  Unmount_USB();
 8010ce4:	f7f0 fc60 	bl	80015a8 <Unmount_USB>
  break;
 8010ce8:	e012      	b.n	8010d10 <USBH_UserProcess+0x68>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010cea:	4b0b      	ldr	r3, [pc, #44]	; (8010d18 <USBH_UserProcess+0x70>)
 8010cec:	2202      	movs	r2, #2
 8010cee:	701a      	strb	r2, [r3, #0]
	Mount_USB();
 8010cf0:	f7f0 fc46 	bl	8001580 <Mount_USB>
	Check_USB_Details();
 8010cf4:	f7f0 fce0 	bl	80016b8 <Check_USB_Details>
	Scan_USB("/");
 8010cf8:	4809      	ldr	r0, [pc, #36]	; (8010d20 <USBH_UserProcess+0x78>)
 8010cfa:	f7f0 fc67 	bl	80015cc <Scan_USB>

  usb_good = 1;
 8010cfe:	4b07      	ldr	r3, [pc, #28]	; (8010d1c <USBH_UserProcess+0x74>)
 8010d00:	2201      	movs	r2, #1
 8010d02:	601a      	str	r2, [r3, #0]

  break;
 8010d04:	e004      	b.n	8010d10 <USBH_UserProcess+0x68>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010d06:	4b04      	ldr	r3, [pc, #16]	; (8010d18 <USBH_UserProcess+0x70>)
 8010d08:	2201      	movs	r2, #1
 8010d0a:	701a      	strb	r2, [r3, #0]
  break;
 8010d0c:	e000      	b.n	8010d10 <USBH_UserProcess+0x68>

  default:
  break;
 8010d0e:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010d10:	bf00      	nop
 8010d12:	3708      	adds	r7, #8
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}
 8010d18:	200063e4 	.word	0x200063e4
 8010d1c:	200063e8 	.word	0x200063e8
 8010d20:	08015d30 	.word	0x08015d30

08010d24 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b08a      	sub	sp, #40	; 0x28
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010d2c:	f107 0314 	add.w	r3, r7, #20
 8010d30:	2200      	movs	r2, #0
 8010d32:	601a      	str	r2, [r3, #0]
 8010d34:	605a      	str	r2, [r3, #4]
 8010d36:	609a      	str	r2, [r3, #8]
 8010d38:	60da      	str	r2, [r3, #12]
 8010d3a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010d44:	d147      	bne.n	8010dd6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010d46:	2300      	movs	r3, #0
 8010d48:	613b      	str	r3, [r7, #16]
 8010d4a:	4b25      	ldr	r3, [pc, #148]	; (8010de0 <HAL_HCD_MspInit+0xbc>)
 8010d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d4e:	4a24      	ldr	r2, [pc, #144]	; (8010de0 <HAL_HCD_MspInit+0xbc>)
 8010d50:	f043 0301 	orr.w	r3, r3, #1
 8010d54:	6313      	str	r3, [r2, #48]	; 0x30
 8010d56:	4b22      	ldr	r3, [pc, #136]	; (8010de0 <HAL_HCD_MspInit+0xbc>)
 8010d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d5a:	f003 0301 	and.w	r3, r3, #1
 8010d5e:	613b      	str	r3, [r7, #16]
 8010d60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8010d62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010d70:	f107 0314 	add.w	r3, r7, #20
 8010d74:	4619      	mov	r1, r3
 8010d76:	481b      	ldr	r0, [pc, #108]	; (8010de4 <HAL_HCD_MspInit+0xc0>)
 8010d78:	f7f2 ff3c 	bl	8003bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010d7c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d82:	2302      	movs	r3, #2
 8010d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d86:	2300      	movs	r3, #0
 8010d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010d8a:	2303      	movs	r3, #3
 8010d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010d8e:	230a      	movs	r3, #10
 8010d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010d92:	f107 0314 	add.w	r3, r7, #20
 8010d96:	4619      	mov	r1, r3
 8010d98:	4812      	ldr	r0, [pc, #72]	; (8010de4 <HAL_HCD_MspInit+0xc0>)
 8010d9a:	f7f2 ff2b 	bl	8003bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010d9e:	4b10      	ldr	r3, [pc, #64]	; (8010de0 <HAL_HCD_MspInit+0xbc>)
 8010da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010da2:	4a0f      	ldr	r2, [pc, #60]	; (8010de0 <HAL_HCD_MspInit+0xbc>)
 8010da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010da8:	6353      	str	r3, [r2, #52]	; 0x34
 8010daa:	2300      	movs	r3, #0
 8010dac:	60fb      	str	r3, [r7, #12]
 8010dae:	4b0c      	ldr	r3, [pc, #48]	; (8010de0 <HAL_HCD_MspInit+0xbc>)
 8010db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010db2:	4a0b      	ldr	r2, [pc, #44]	; (8010de0 <HAL_HCD_MspInit+0xbc>)
 8010db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010db8:	6453      	str	r3, [r2, #68]	; 0x44
 8010dba:	4b09      	ldr	r3, [pc, #36]	; (8010de0 <HAL_HCD_MspInit+0xbc>)
 8010dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010dc2:	60fb      	str	r3, [r7, #12]
 8010dc4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	2105      	movs	r1, #5
 8010dca:	2043      	movs	r0, #67	; 0x43
 8010dcc:	f7f2 fee7 	bl	8003b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010dd0:	2043      	movs	r0, #67	; 0x43
 8010dd2:	f7f2 ff00 	bl	8003bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010dd6:	bf00      	nop
 8010dd8:	3728      	adds	r7, #40	; 0x28
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	40023800 	.word	0x40023800
 8010de4:	40020000 	.word	0x40020000

08010de8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010df6:	4618      	mov	r0, r3
 8010df8:	f7fa f888 	bl	800af0c <USBH_LL_IncTimer>
}
 8010dfc:	bf00      	nop
 8010dfe:	3708      	adds	r7, #8
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}

08010e04 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b082      	sub	sp, #8
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010e12:	4618      	mov	r0, r3
 8010e14:	f7fa f8cb 	bl	800afae <USBH_LL_Connect>
}
 8010e18:	bf00      	nop
 8010e1a:	3708      	adds	r7, #8
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd80      	pop	{r7, pc}

08010e20 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f7fa f8e0 	bl	800aff4 <USBH_LL_Disconnect>
}
 8010e34:	bf00      	nop
 8010e36:	3708      	adds	r7, #8
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}

08010e3c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b082      	sub	sp, #8
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
 8010e44:	460b      	mov	r3, r1
 8010e46:	70fb      	strb	r3, [r7, #3]
 8010e48:	4613      	mov	r3, r2
 8010e4a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7fa f915 	bl	800b082 <USBH_LL_NotifyURBChange>
#endif
}
 8010e58:	bf00      	nop
 8010e5a:	3708      	adds	r7, #8
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}

08010e60 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b082      	sub	sp, #8
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7fa f876 	bl	800af60 <USBH_LL_PortEnabled>
}
 8010e74:	bf00      	nop
 8010e76:	3708      	adds	r7, #8
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}

08010e7c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b082      	sub	sp, #8
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f7fa f882 	bl	800af94 <USBH_LL_PortDisabled>
}
 8010e90:	bf00      	nop
 8010e92:	3708      	adds	r7, #8
 8010e94:	46bd      	mov	sp, r7
 8010e96:	bd80      	pop	{r7, pc}

08010e98 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b082      	sub	sp, #8
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8010ea6:	2b01      	cmp	r3, #1
 8010ea8:	d12a      	bne.n	8010f00 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010eaa:	4a18      	ldr	r2, [pc, #96]	; (8010f0c <USBH_LL_Init+0x74>)
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	4a15      	ldr	r2, [pc, #84]	; (8010f0c <USBH_LL_Init+0x74>)
 8010eb6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010eba:	4b14      	ldr	r3, [pc, #80]	; (8010f0c <USBH_LL_Init+0x74>)
 8010ebc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010ec0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010ec2:	4b12      	ldr	r3, [pc, #72]	; (8010f0c <USBH_LL_Init+0x74>)
 8010ec4:	2208      	movs	r2, #8
 8010ec6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010ec8:	4b10      	ldr	r3, [pc, #64]	; (8010f0c <USBH_LL_Init+0x74>)
 8010eca:	2201      	movs	r2, #1
 8010ecc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010ece:	4b0f      	ldr	r3, [pc, #60]	; (8010f0c <USBH_LL_Init+0x74>)
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010ed4:	4b0d      	ldr	r3, [pc, #52]	; (8010f0c <USBH_LL_Init+0x74>)
 8010ed6:	2202      	movs	r2, #2
 8010ed8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010eda:	4b0c      	ldr	r3, [pc, #48]	; (8010f0c <USBH_LL_Init+0x74>)
 8010edc:	2200      	movs	r2, #0
 8010ede:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010ee0:	480a      	ldr	r0, [pc, #40]	; (8010f0c <USBH_LL_Init+0x74>)
 8010ee2:	f7f3 f854 	bl	8003f8e <HAL_HCD_Init>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d001      	beq.n	8010ef0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010eec:	f7f1 faa6 	bl	800243c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010ef0:	4806      	ldr	r0, [pc, #24]	; (8010f0c <USBH_LL_Init+0x74>)
 8010ef2:	f7f3 fc2f 	bl	8004754 <HAL_HCD_GetCurrentFrame>
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	4619      	mov	r1, r3
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f7f9 fff8 	bl	800aef0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010f00:	2300      	movs	r3, #0
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3708      	adds	r7, #8
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}
 8010f0a:	bf00      	nop
 8010f0c:	2000b098 	.word	0x2000b098

08010f10 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b084      	sub	sp, #16
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f18:	2300      	movs	r3, #0
 8010f1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7f3 fba0 	bl	800466c <HAL_HCD_Start>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010f30:	7bfb      	ldrb	r3, [r7, #15]
 8010f32:	4618      	mov	r0, r3
 8010f34:	f000 f98a 	bl	801124c <USBH_Get_USB_Status>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3710      	adds	r7, #16
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}

08010f46 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010f46:	b580      	push	{r7, lr}
 8010f48:	b084      	sub	sp, #16
 8010f4a:	af00      	add	r7, sp, #0
 8010f4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010f52:	2300      	movs	r3, #0
 8010f54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f7f3 fba8 	bl	80046b2 <HAL_HCD_Stop>
 8010f62:	4603      	mov	r3, r0
 8010f64:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010f66:	7bfb      	ldrb	r3, [r7, #15]
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f000 f96f 	bl	801124c <USBH_Get_USB_Status>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f72:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f74:	4618      	mov	r0, r3
 8010f76:	3710      	adds	r7, #16
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}

08010f7c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b084      	sub	sp, #16
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010f84:	2301      	movs	r3, #1
 8010f86:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7f3 fbee 	bl	8004770 <HAL_HCD_GetCurrentSpeed>
 8010f94:	4603      	mov	r3, r0
 8010f96:	2b02      	cmp	r3, #2
 8010f98:	d00c      	beq.n	8010fb4 <USBH_LL_GetSpeed+0x38>
 8010f9a:	2b02      	cmp	r3, #2
 8010f9c:	d80d      	bhi.n	8010fba <USBH_LL_GetSpeed+0x3e>
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d002      	beq.n	8010fa8 <USBH_LL_GetSpeed+0x2c>
 8010fa2:	2b01      	cmp	r3, #1
 8010fa4:	d003      	beq.n	8010fae <USBH_LL_GetSpeed+0x32>
 8010fa6:	e008      	b.n	8010fba <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010fa8:	2300      	movs	r3, #0
 8010faa:	73fb      	strb	r3, [r7, #15]
    break;
 8010fac:	e008      	b.n	8010fc0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010fae:	2301      	movs	r3, #1
 8010fb0:	73fb      	strb	r3, [r7, #15]
    break;
 8010fb2:	e005      	b.n	8010fc0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010fb4:	2302      	movs	r3, #2
 8010fb6:	73fb      	strb	r3, [r7, #15]
    break;
 8010fb8:	e002      	b.n	8010fc0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010fba:	2301      	movs	r3, #1
 8010fbc:	73fb      	strb	r3, [r7, #15]
    break;
 8010fbe:	bf00      	nop
  }
  return  speed;
 8010fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3710      	adds	r7, #16
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}

08010fca <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010fca:	b580      	push	{r7, lr}
 8010fcc:	b084      	sub	sp, #16
 8010fce:	af00      	add	r7, sp, #0
 8010fd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7f3 fb83 	bl	80046ec <HAL_HCD_ResetPort>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010fea:	7bfb      	ldrb	r3, [r7, #15]
 8010fec:	4618      	mov	r0, r3
 8010fee:	f000 f92d 	bl	801124c <USBH_Get_USB_Status>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ff6:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3710      	adds	r7, #16
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}

08011000 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b082      	sub	sp, #8
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
 8011008:	460b      	mov	r3, r1
 801100a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8011012:	78fa      	ldrb	r2, [r7, #3]
 8011014:	4611      	mov	r1, r2
 8011016:	4618      	mov	r0, r3
 8011018:	f7f3 fb89 	bl	800472e <HAL_HCD_HC_GetXferCount>
 801101c:	4603      	mov	r3, r0
}
 801101e:	4618      	mov	r0, r3
 8011020:	3708      	adds	r7, #8
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}

08011026 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011026:	b590      	push	{r4, r7, lr}
 8011028:	b089      	sub	sp, #36	; 0x24
 801102a:	af04      	add	r7, sp, #16
 801102c:	6078      	str	r0, [r7, #4]
 801102e:	4608      	mov	r0, r1
 8011030:	4611      	mov	r1, r2
 8011032:	461a      	mov	r2, r3
 8011034:	4603      	mov	r3, r0
 8011036:	70fb      	strb	r3, [r7, #3]
 8011038:	460b      	mov	r3, r1
 801103a:	70bb      	strb	r3, [r7, #2]
 801103c:	4613      	mov	r3, r2
 801103e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011040:	2300      	movs	r3, #0
 8011042:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011044:	2300      	movs	r3, #0
 8011046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 801104e:	787c      	ldrb	r4, [r7, #1]
 8011050:	78ba      	ldrb	r2, [r7, #2]
 8011052:	78f9      	ldrb	r1, [r7, #3]
 8011054:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011056:	9302      	str	r3, [sp, #8]
 8011058:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801105c:	9301      	str	r3, [sp, #4]
 801105e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011062:	9300      	str	r3, [sp, #0]
 8011064:	4623      	mov	r3, r4
 8011066:	f7f2 fff4 	bl	8004052 <HAL_HCD_HC_Init>
 801106a:	4603      	mov	r3, r0
 801106c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801106e:	7bfb      	ldrb	r3, [r7, #15]
 8011070:	4618      	mov	r0, r3
 8011072:	f000 f8eb 	bl	801124c <USBH_Get_USB_Status>
 8011076:	4603      	mov	r3, r0
 8011078:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801107a:	7bbb      	ldrb	r3, [r7, #14]
}
 801107c:	4618      	mov	r0, r3
 801107e:	3714      	adds	r7, #20
 8011080:	46bd      	mov	sp, r7
 8011082:	bd90      	pop	{r4, r7, pc}

08011084 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b084      	sub	sp, #16
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
 801108c:	460b      	mov	r3, r1
 801108e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011090:	2300      	movs	r3, #0
 8011092:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011094:	2300      	movs	r3, #0
 8011096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801109e:	78fa      	ldrb	r2, [r7, #3]
 80110a0:	4611      	mov	r1, r2
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7f3 f864 	bl	8004170 <HAL_HCD_HC_Halt>
 80110a8:	4603      	mov	r3, r0
 80110aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80110ac:	7bfb      	ldrb	r3, [r7, #15]
 80110ae:	4618      	mov	r0, r3
 80110b0:	f000 f8cc 	bl	801124c <USBH_Get_USB_Status>
 80110b4:	4603      	mov	r3, r0
 80110b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80110ba:	4618      	mov	r0, r3
 80110bc:	3710      	adds	r7, #16
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}

080110c2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80110c2:	b590      	push	{r4, r7, lr}
 80110c4:	b089      	sub	sp, #36	; 0x24
 80110c6:	af04      	add	r7, sp, #16
 80110c8:	6078      	str	r0, [r7, #4]
 80110ca:	4608      	mov	r0, r1
 80110cc:	4611      	mov	r1, r2
 80110ce:	461a      	mov	r2, r3
 80110d0:	4603      	mov	r3, r0
 80110d2:	70fb      	strb	r3, [r7, #3]
 80110d4:	460b      	mov	r3, r1
 80110d6:	70bb      	strb	r3, [r7, #2]
 80110d8:	4613      	mov	r3, r2
 80110da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110dc:	2300      	movs	r3, #0
 80110de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80110e0:	2300      	movs	r3, #0
 80110e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 80110ea:	787c      	ldrb	r4, [r7, #1]
 80110ec:	78ba      	ldrb	r2, [r7, #2]
 80110ee:	78f9      	ldrb	r1, [r7, #3]
 80110f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80110f4:	9303      	str	r3, [sp, #12]
 80110f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80110f8:	9302      	str	r3, [sp, #8]
 80110fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110fc:	9301      	str	r3, [sp, #4]
 80110fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011102:	9300      	str	r3, [sp, #0]
 8011104:	4623      	mov	r3, r4
 8011106:	f7f3 f857 	bl	80041b8 <HAL_HCD_HC_SubmitRequest>
 801110a:	4603      	mov	r3, r0
 801110c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801110e:	7bfb      	ldrb	r3, [r7, #15]
 8011110:	4618      	mov	r0, r3
 8011112:	f000 f89b 	bl	801124c <USBH_Get_USB_Status>
 8011116:	4603      	mov	r3, r0
 8011118:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801111a:	7bbb      	ldrb	r3, [r7, #14]
}
 801111c:	4618      	mov	r0, r3
 801111e:	3714      	adds	r7, #20
 8011120:	46bd      	mov	sp, r7
 8011122:	bd90      	pop	{r4, r7, pc}

08011124 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b082      	sub	sp, #8
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	460b      	mov	r3, r1
 801112e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8011136:	78fa      	ldrb	r2, [r7, #3]
 8011138:	4611      	mov	r1, r2
 801113a:	4618      	mov	r0, r3
 801113c:	f7f3 fae4 	bl	8004708 <HAL_HCD_HC_GetURBState>
 8011140:	4603      	mov	r3, r0
}
 8011142:	4618      	mov	r0, r3
 8011144:	3708      	adds	r7, #8
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}

0801114a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801114a:	b580      	push	{r7, lr}
 801114c:	b082      	sub	sp, #8
 801114e:	af00      	add	r7, sp, #0
 8011150:	6078      	str	r0, [r7, #4]
 8011152:	460b      	mov	r3, r1
 8011154:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 801115c:	2b01      	cmp	r3, #1
 801115e:	d103      	bne.n	8011168 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011160:	78fb      	ldrb	r3, [r7, #3]
 8011162:	4618      	mov	r0, r3
 8011164:	f000 f89e 	bl	80112a4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011168:	20c8      	movs	r0, #200	; 0xc8
 801116a:	f7f2 f895 	bl	8003298 <HAL_Delay>
  return USBH_OK;
 801116e:	2300      	movs	r3, #0
}
 8011170:	4618      	mov	r0, r3
 8011172:	3708      	adds	r7, #8
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}

08011178 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011178:	b480      	push	{r7}
 801117a:	b085      	sub	sp, #20
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
 8011180:	460b      	mov	r3, r1
 8011182:	70fb      	strb	r3, [r7, #3]
 8011184:	4613      	mov	r3, r2
 8011186:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801118e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011190:	78fb      	ldrb	r3, [r7, #3]
 8011192:	68fa      	ldr	r2, [r7, #12]
 8011194:	212c      	movs	r1, #44	; 0x2c
 8011196:	fb01 f303 	mul.w	r3, r1, r3
 801119a:	4413      	add	r3, r2
 801119c:	333b      	adds	r3, #59	; 0x3b
 801119e:	781b      	ldrb	r3, [r3, #0]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d009      	beq.n	80111b8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80111a4:	78fb      	ldrb	r3, [r7, #3]
 80111a6:	68fa      	ldr	r2, [r7, #12]
 80111a8:	212c      	movs	r1, #44	; 0x2c
 80111aa:	fb01 f303 	mul.w	r3, r1, r3
 80111ae:	4413      	add	r3, r2
 80111b0:	3354      	adds	r3, #84	; 0x54
 80111b2:	78ba      	ldrb	r2, [r7, #2]
 80111b4:	701a      	strb	r2, [r3, #0]
 80111b6:	e008      	b.n	80111ca <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80111b8:	78fb      	ldrb	r3, [r7, #3]
 80111ba:	68fa      	ldr	r2, [r7, #12]
 80111bc:	212c      	movs	r1, #44	; 0x2c
 80111be:	fb01 f303 	mul.w	r3, r1, r3
 80111c2:	4413      	add	r3, r2
 80111c4:	3355      	adds	r3, #85	; 0x55
 80111c6:	78ba      	ldrb	r2, [r7, #2]
 80111c8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80111ca:	2300      	movs	r3, #0
}
 80111cc:	4618      	mov	r0, r3
 80111ce:	3714      	adds	r7, #20
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bc80      	pop	{r7}
 80111d4:	4770      	bx	lr

080111d6 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80111d6:	b480      	push	{r7}
 80111d8:	b085      	sub	sp, #20
 80111da:	af00      	add	r7, sp, #0
 80111dc:	6078      	str	r0, [r7, #4]
 80111de:	460b      	mov	r3, r1
 80111e0:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 80111e2:	2300      	movs	r3, #0
 80111e4:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80111ec:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 80111ee:	78fb      	ldrb	r3, [r7, #3]
 80111f0:	68ba      	ldr	r2, [r7, #8]
 80111f2:	212c      	movs	r1, #44	; 0x2c
 80111f4:	fb01 f303 	mul.w	r3, r1, r3
 80111f8:	4413      	add	r3, r2
 80111fa:	333b      	adds	r3, #59	; 0x3b
 80111fc:	781b      	ldrb	r3, [r3, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d009      	beq.n	8011216 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8011202:	78fb      	ldrb	r3, [r7, #3]
 8011204:	68ba      	ldr	r2, [r7, #8]
 8011206:	212c      	movs	r1, #44	; 0x2c
 8011208:	fb01 f303 	mul.w	r3, r1, r3
 801120c:	4413      	add	r3, r2
 801120e:	3354      	adds	r3, #84	; 0x54
 8011210:	781b      	ldrb	r3, [r3, #0]
 8011212:	73fb      	strb	r3, [r7, #15]
 8011214:	e008      	b.n	8011228 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8011216:	78fb      	ldrb	r3, [r7, #3]
 8011218:	68ba      	ldr	r2, [r7, #8]
 801121a:	212c      	movs	r1, #44	; 0x2c
 801121c:	fb01 f303 	mul.w	r3, r1, r3
 8011220:	4413      	add	r3, r2
 8011222:	3355      	adds	r3, #85	; 0x55
 8011224:	781b      	ldrb	r3, [r3, #0]
 8011226:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8011228:	7bfb      	ldrb	r3, [r7, #15]
}
 801122a:	4618      	mov	r0, r3
 801122c:	3714      	adds	r7, #20
 801122e:	46bd      	mov	sp, r7
 8011230:	bc80      	pop	{r7}
 8011232:	4770      	bx	lr

08011234 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b082      	sub	sp, #8
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801123c:	6878      	ldr	r0, [r7, #4]
 801123e:	f7f2 f82b 	bl	8003298 <HAL_Delay>
}
 8011242:	bf00      	nop
 8011244:	3708      	adds	r7, #8
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}
	...

0801124c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801124c:	b480      	push	{r7}
 801124e:	b085      	sub	sp, #20
 8011250:	af00      	add	r7, sp, #0
 8011252:	4603      	mov	r3, r0
 8011254:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011256:	2300      	movs	r3, #0
 8011258:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801125a:	79fb      	ldrb	r3, [r7, #7]
 801125c:	2b03      	cmp	r3, #3
 801125e:	d817      	bhi.n	8011290 <USBH_Get_USB_Status+0x44>
 8011260:	a201      	add	r2, pc, #4	; (adr r2, 8011268 <USBH_Get_USB_Status+0x1c>)
 8011262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011266:	bf00      	nop
 8011268:	08011279 	.word	0x08011279
 801126c:	0801127f 	.word	0x0801127f
 8011270:	08011285 	.word	0x08011285
 8011274:	0801128b 	.word	0x0801128b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011278:	2300      	movs	r3, #0
 801127a:	73fb      	strb	r3, [r7, #15]
    break;
 801127c:	e00b      	b.n	8011296 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801127e:	2302      	movs	r3, #2
 8011280:	73fb      	strb	r3, [r7, #15]
    break;
 8011282:	e008      	b.n	8011296 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011284:	2301      	movs	r3, #1
 8011286:	73fb      	strb	r3, [r7, #15]
    break;
 8011288:	e005      	b.n	8011296 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801128a:	2302      	movs	r3, #2
 801128c:	73fb      	strb	r3, [r7, #15]
    break;
 801128e:	e002      	b.n	8011296 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011290:	2302      	movs	r3, #2
 8011292:	73fb      	strb	r3, [r7, #15]
    break;
 8011294:	bf00      	nop
  }
  return usb_status;
 8011296:	7bfb      	ldrb	r3, [r7, #15]
}
 8011298:	4618      	mov	r0, r3
 801129a:	3714      	adds	r7, #20
 801129c:	46bd      	mov	sp, r7
 801129e:	bc80      	pop	{r7}
 80112a0:	4770      	bx	lr
 80112a2:	bf00      	nop

080112a4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b084      	sub	sp, #16
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	4603      	mov	r3, r0
 80112ac:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80112ae:	79fb      	ldrb	r3, [r7, #7]
 80112b0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80112b2:	79fb      	ldrb	r3, [r7, #7]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d102      	bne.n	80112be <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80112b8:	2300      	movs	r3, #0
 80112ba:	73fb      	strb	r3, [r7, #15]
 80112bc:	e001      	b.n	80112c2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80112be:	2301      	movs	r3, #1
 80112c0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,(GPIO_PinState)data);
 80112c2:	7bfb      	ldrb	r3, [r7, #15]
 80112c4:	461a      	mov	r2, r3
 80112c6:	2104      	movs	r1, #4
 80112c8:	4803      	ldr	r0, [pc, #12]	; (80112d8 <MX_DriverVbusFS+0x34>)
 80112ca:	f7f2 fe48 	bl	8003f5e <HAL_GPIO_WritePin>
}
 80112ce:	bf00      	nop
 80112d0:	3710      	adds	r7, #16
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}
 80112d6:	bf00      	nop
 80112d8:	40020800 	.word	0x40020800

080112dc <__errno>:
 80112dc:	4b01      	ldr	r3, [pc, #4]	; (80112e4 <__errno+0x8>)
 80112de:	6818      	ldr	r0, [r3, #0]
 80112e0:	4770      	bx	lr
 80112e2:	bf00      	nop
 80112e4:	2000005c 	.word	0x2000005c

080112e8 <std>:
 80112e8:	2300      	movs	r3, #0
 80112ea:	b510      	push	{r4, lr}
 80112ec:	4604      	mov	r4, r0
 80112ee:	e9c0 3300 	strd	r3, r3, [r0]
 80112f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80112f6:	6083      	str	r3, [r0, #8]
 80112f8:	8181      	strh	r1, [r0, #12]
 80112fa:	6643      	str	r3, [r0, #100]	; 0x64
 80112fc:	81c2      	strh	r2, [r0, #14]
 80112fe:	6183      	str	r3, [r0, #24]
 8011300:	4619      	mov	r1, r3
 8011302:	2208      	movs	r2, #8
 8011304:	305c      	adds	r0, #92	; 0x5c
 8011306:	f000 f92b 	bl	8011560 <memset>
 801130a:	4b05      	ldr	r3, [pc, #20]	; (8011320 <std+0x38>)
 801130c:	6224      	str	r4, [r4, #32]
 801130e:	6263      	str	r3, [r4, #36]	; 0x24
 8011310:	4b04      	ldr	r3, [pc, #16]	; (8011324 <std+0x3c>)
 8011312:	62a3      	str	r3, [r4, #40]	; 0x28
 8011314:	4b04      	ldr	r3, [pc, #16]	; (8011328 <std+0x40>)
 8011316:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011318:	4b04      	ldr	r3, [pc, #16]	; (801132c <std+0x44>)
 801131a:	6323      	str	r3, [r4, #48]	; 0x30
 801131c:	bd10      	pop	{r4, pc}
 801131e:	bf00      	nop
 8011320:	080124dd 	.word	0x080124dd
 8011324:	080124ff 	.word	0x080124ff
 8011328:	08012537 	.word	0x08012537
 801132c:	0801255b 	.word	0x0801255b

08011330 <_cleanup_r>:
 8011330:	4901      	ldr	r1, [pc, #4]	; (8011338 <_cleanup_r+0x8>)
 8011332:	f000 b8af 	b.w	8011494 <_fwalk_reent>
 8011336:	bf00      	nop
 8011338:	080140f9 	.word	0x080140f9

0801133c <__sfmoreglue>:
 801133c:	b570      	push	{r4, r5, r6, lr}
 801133e:	2568      	movs	r5, #104	; 0x68
 8011340:	1e4a      	subs	r2, r1, #1
 8011342:	4355      	muls	r5, r2
 8011344:	460e      	mov	r6, r1
 8011346:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801134a:	f000 f95d 	bl	8011608 <_malloc_r>
 801134e:	4604      	mov	r4, r0
 8011350:	b140      	cbz	r0, 8011364 <__sfmoreglue+0x28>
 8011352:	2100      	movs	r1, #0
 8011354:	e9c0 1600 	strd	r1, r6, [r0]
 8011358:	300c      	adds	r0, #12
 801135a:	60a0      	str	r0, [r4, #8]
 801135c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011360:	f000 f8fe 	bl	8011560 <memset>
 8011364:	4620      	mov	r0, r4
 8011366:	bd70      	pop	{r4, r5, r6, pc}

08011368 <__sfp_lock_acquire>:
 8011368:	4801      	ldr	r0, [pc, #4]	; (8011370 <__sfp_lock_acquire+0x8>)
 801136a:	f000 b8d8 	b.w	801151e <__retarget_lock_acquire_recursive>
 801136e:	bf00      	nop
 8011370:	2000b3a4 	.word	0x2000b3a4

08011374 <__sfp_lock_release>:
 8011374:	4801      	ldr	r0, [pc, #4]	; (801137c <__sfp_lock_release+0x8>)
 8011376:	f000 b8d3 	b.w	8011520 <__retarget_lock_release_recursive>
 801137a:	bf00      	nop
 801137c:	2000b3a4 	.word	0x2000b3a4

08011380 <__sinit_lock_acquire>:
 8011380:	4801      	ldr	r0, [pc, #4]	; (8011388 <__sinit_lock_acquire+0x8>)
 8011382:	f000 b8cc 	b.w	801151e <__retarget_lock_acquire_recursive>
 8011386:	bf00      	nop
 8011388:	2000b39f 	.word	0x2000b39f

0801138c <__sinit_lock_release>:
 801138c:	4801      	ldr	r0, [pc, #4]	; (8011394 <__sinit_lock_release+0x8>)
 801138e:	f000 b8c7 	b.w	8011520 <__retarget_lock_release_recursive>
 8011392:	bf00      	nop
 8011394:	2000b39f 	.word	0x2000b39f

08011398 <__sinit>:
 8011398:	b510      	push	{r4, lr}
 801139a:	4604      	mov	r4, r0
 801139c:	f7ff fff0 	bl	8011380 <__sinit_lock_acquire>
 80113a0:	69a3      	ldr	r3, [r4, #24]
 80113a2:	b11b      	cbz	r3, 80113ac <__sinit+0x14>
 80113a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113a8:	f7ff bff0 	b.w	801138c <__sinit_lock_release>
 80113ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80113b0:	6523      	str	r3, [r4, #80]	; 0x50
 80113b2:	4b13      	ldr	r3, [pc, #76]	; (8011400 <__sinit+0x68>)
 80113b4:	4a13      	ldr	r2, [pc, #76]	; (8011404 <__sinit+0x6c>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80113ba:	42a3      	cmp	r3, r4
 80113bc:	bf08      	it	eq
 80113be:	2301      	moveq	r3, #1
 80113c0:	4620      	mov	r0, r4
 80113c2:	bf08      	it	eq
 80113c4:	61a3      	streq	r3, [r4, #24]
 80113c6:	f000 f81f 	bl	8011408 <__sfp>
 80113ca:	6060      	str	r0, [r4, #4]
 80113cc:	4620      	mov	r0, r4
 80113ce:	f000 f81b 	bl	8011408 <__sfp>
 80113d2:	60a0      	str	r0, [r4, #8]
 80113d4:	4620      	mov	r0, r4
 80113d6:	f000 f817 	bl	8011408 <__sfp>
 80113da:	2200      	movs	r2, #0
 80113dc:	2104      	movs	r1, #4
 80113de:	60e0      	str	r0, [r4, #12]
 80113e0:	6860      	ldr	r0, [r4, #4]
 80113e2:	f7ff ff81 	bl	80112e8 <std>
 80113e6:	2201      	movs	r2, #1
 80113e8:	2109      	movs	r1, #9
 80113ea:	68a0      	ldr	r0, [r4, #8]
 80113ec:	f7ff ff7c 	bl	80112e8 <std>
 80113f0:	2202      	movs	r2, #2
 80113f2:	2112      	movs	r1, #18
 80113f4:	68e0      	ldr	r0, [r4, #12]
 80113f6:	f7ff ff77 	bl	80112e8 <std>
 80113fa:	2301      	movs	r3, #1
 80113fc:	61a3      	str	r3, [r4, #24]
 80113fe:	e7d1      	b.n	80113a4 <__sinit+0xc>
 8011400:	08015e40 	.word	0x08015e40
 8011404:	08011331 	.word	0x08011331

08011408 <__sfp>:
 8011408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801140a:	4607      	mov	r7, r0
 801140c:	f7ff ffac 	bl	8011368 <__sfp_lock_acquire>
 8011410:	4b1e      	ldr	r3, [pc, #120]	; (801148c <__sfp+0x84>)
 8011412:	681e      	ldr	r6, [r3, #0]
 8011414:	69b3      	ldr	r3, [r6, #24]
 8011416:	b913      	cbnz	r3, 801141e <__sfp+0x16>
 8011418:	4630      	mov	r0, r6
 801141a:	f7ff ffbd 	bl	8011398 <__sinit>
 801141e:	3648      	adds	r6, #72	; 0x48
 8011420:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011424:	3b01      	subs	r3, #1
 8011426:	d503      	bpl.n	8011430 <__sfp+0x28>
 8011428:	6833      	ldr	r3, [r6, #0]
 801142a:	b30b      	cbz	r3, 8011470 <__sfp+0x68>
 801142c:	6836      	ldr	r6, [r6, #0]
 801142e:	e7f7      	b.n	8011420 <__sfp+0x18>
 8011430:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011434:	b9d5      	cbnz	r5, 801146c <__sfp+0x64>
 8011436:	4b16      	ldr	r3, [pc, #88]	; (8011490 <__sfp+0x88>)
 8011438:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801143c:	60e3      	str	r3, [r4, #12]
 801143e:	6665      	str	r5, [r4, #100]	; 0x64
 8011440:	f000 f86c 	bl	801151c <__retarget_lock_init_recursive>
 8011444:	f7ff ff96 	bl	8011374 <__sfp_lock_release>
 8011448:	2208      	movs	r2, #8
 801144a:	4629      	mov	r1, r5
 801144c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011450:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011454:	6025      	str	r5, [r4, #0]
 8011456:	61a5      	str	r5, [r4, #24]
 8011458:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801145c:	f000 f880 	bl	8011560 <memset>
 8011460:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011464:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011468:	4620      	mov	r0, r4
 801146a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801146c:	3468      	adds	r4, #104	; 0x68
 801146e:	e7d9      	b.n	8011424 <__sfp+0x1c>
 8011470:	2104      	movs	r1, #4
 8011472:	4638      	mov	r0, r7
 8011474:	f7ff ff62 	bl	801133c <__sfmoreglue>
 8011478:	4604      	mov	r4, r0
 801147a:	6030      	str	r0, [r6, #0]
 801147c:	2800      	cmp	r0, #0
 801147e:	d1d5      	bne.n	801142c <__sfp+0x24>
 8011480:	f7ff ff78 	bl	8011374 <__sfp_lock_release>
 8011484:	230c      	movs	r3, #12
 8011486:	603b      	str	r3, [r7, #0]
 8011488:	e7ee      	b.n	8011468 <__sfp+0x60>
 801148a:	bf00      	nop
 801148c:	08015e40 	.word	0x08015e40
 8011490:	ffff0001 	.word	0xffff0001

08011494 <_fwalk_reent>:
 8011494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011498:	4606      	mov	r6, r0
 801149a:	4688      	mov	r8, r1
 801149c:	2700      	movs	r7, #0
 801149e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80114a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80114a6:	f1b9 0901 	subs.w	r9, r9, #1
 80114aa:	d505      	bpl.n	80114b8 <_fwalk_reent+0x24>
 80114ac:	6824      	ldr	r4, [r4, #0]
 80114ae:	2c00      	cmp	r4, #0
 80114b0:	d1f7      	bne.n	80114a2 <_fwalk_reent+0xe>
 80114b2:	4638      	mov	r0, r7
 80114b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114b8:	89ab      	ldrh	r3, [r5, #12]
 80114ba:	2b01      	cmp	r3, #1
 80114bc:	d907      	bls.n	80114ce <_fwalk_reent+0x3a>
 80114be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80114c2:	3301      	adds	r3, #1
 80114c4:	d003      	beq.n	80114ce <_fwalk_reent+0x3a>
 80114c6:	4629      	mov	r1, r5
 80114c8:	4630      	mov	r0, r6
 80114ca:	47c0      	blx	r8
 80114cc:	4307      	orrs	r7, r0
 80114ce:	3568      	adds	r5, #104	; 0x68
 80114d0:	e7e9      	b.n	80114a6 <_fwalk_reent+0x12>
	...

080114d4 <__libc_init_array>:
 80114d4:	b570      	push	{r4, r5, r6, lr}
 80114d6:	2600      	movs	r6, #0
 80114d8:	4d0c      	ldr	r5, [pc, #48]	; (801150c <__libc_init_array+0x38>)
 80114da:	4c0d      	ldr	r4, [pc, #52]	; (8011510 <__libc_init_array+0x3c>)
 80114dc:	1b64      	subs	r4, r4, r5
 80114de:	10a4      	asrs	r4, r4, #2
 80114e0:	42a6      	cmp	r6, r4
 80114e2:	d109      	bne.n	80114f8 <__libc_init_array+0x24>
 80114e4:	f004 fba8 	bl	8015c38 <_init>
 80114e8:	2600      	movs	r6, #0
 80114ea:	4d0a      	ldr	r5, [pc, #40]	; (8011514 <__libc_init_array+0x40>)
 80114ec:	4c0a      	ldr	r4, [pc, #40]	; (8011518 <__libc_init_array+0x44>)
 80114ee:	1b64      	subs	r4, r4, r5
 80114f0:	10a4      	asrs	r4, r4, #2
 80114f2:	42a6      	cmp	r6, r4
 80114f4:	d105      	bne.n	8011502 <__libc_init_array+0x2e>
 80114f6:	bd70      	pop	{r4, r5, r6, pc}
 80114f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80114fc:	4798      	blx	r3
 80114fe:	3601      	adds	r6, #1
 8011500:	e7ee      	b.n	80114e0 <__libc_init_array+0xc>
 8011502:	f855 3b04 	ldr.w	r3, [r5], #4
 8011506:	4798      	blx	r3
 8011508:	3601      	adds	r6, #1
 801150a:	e7f2      	b.n	80114f2 <__libc_init_array+0x1e>
 801150c:	0801629c 	.word	0x0801629c
 8011510:	0801629c 	.word	0x0801629c
 8011514:	0801629c 	.word	0x0801629c
 8011518:	080162a0 	.word	0x080162a0

0801151c <__retarget_lock_init_recursive>:
 801151c:	4770      	bx	lr

0801151e <__retarget_lock_acquire_recursive>:
 801151e:	4770      	bx	lr

08011520 <__retarget_lock_release_recursive>:
 8011520:	4770      	bx	lr
	...

08011524 <malloc>:
 8011524:	4b02      	ldr	r3, [pc, #8]	; (8011530 <malloc+0xc>)
 8011526:	4601      	mov	r1, r0
 8011528:	6818      	ldr	r0, [r3, #0]
 801152a:	f000 b86d 	b.w	8011608 <_malloc_r>
 801152e:	bf00      	nop
 8011530:	2000005c 	.word	0x2000005c

08011534 <free>:
 8011534:	4b02      	ldr	r3, [pc, #8]	; (8011540 <free+0xc>)
 8011536:	4601      	mov	r1, r0
 8011538:	6818      	ldr	r0, [r3, #0]
 801153a:	f000 b819 	b.w	8011570 <_free_r>
 801153e:	bf00      	nop
 8011540:	2000005c 	.word	0x2000005c

08011544 <memcpy>:
 8011544:	440a      	add	r2, r1
 8011546:	4291      	cmp	r1, r2
 8011548:	f100 33ff 	add.w	r3, r0, #4294967295
 801154c:	d100      	bne.n	8011550 <memcpy+0xc>
 801154e:	4770      	bx	lr
 8011550:	b510      	push	{r4, lr}
 8011552:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011556:	4291      	cmp	r1, r2
 8011558:	f803 4f01 	strb.w	r4, [r3, #1]!
 801155c:	d1f9      	bne.n	8011552 <memcpy+0xe>
 801155e:	bd10      	pop	{r4, pc}

08011560 <memset>:
 8011560:	4603      	mov	r3, r0
 8011562:	4402      	add	r2, r0
 8011564:	4293      	cmp	r3, r2
 8011566:	d100      	bne.n	801156a <memset+0xa>
 8011568:	4770      	bx	lr
 801156a:	f803 1b01 	strb.w	r1, [r3], #1
 801156e:	e7f9      	b.n	8011564 <memset+0x4>

08011570 <_free_r>:
 8011570:	b538      	push	{r3, r4, r5, lr}
 8011572:	4605      	mov	r5, r0
 8011574:	2900      	cmp	r1, #0
 8011576:	d043      	beq.n	8011600 <_free_r+0x90>
 8011578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801157c:	1f0c      	subs	r4, r1, #4
 801157e:	2b00      	cmp	r3, #0
 8011580:	bfb8      	it	lt
 8011582:	18e4      	addlt	r4, r4, r3
 8011584:	f003 f990 	bl	80148a8 <__malloc_lock>
 8011588:	4a1e      	ldr	r2, [pc, #120]	; (8011604 <_free_r+0x94>)
 801158a:	6813      	ldr	r3, [r2, #0]
 801158c:	4610      	mov	r0, r2
 801158e:	b933      	cbnz	r3, 801159e <_free_r+0x2e>
 8011590:	6063      	str	r3, [r4, #4]
 8011592:	6014      	str	r4, [r2, #0]
 8011594:	4628      	mov	r0, r5
 8011596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801159a:	f003 b98b 	b.w	80148b4 <__malloc_unlock>
 801159e:	42a3      	cmp	r3, r4
 80115a0:	d90a      	bls.n	80115b8 <_free_r+0x48>
 80115a2:	6821      	ldr	r1, [r4, #0]
 80115a4:	1862      	adds	r2, r4, r1
 80115a6:	4293      	cmp	r3, r2
 80115a8:	bf01      	itttt	eq
 80115aa:	681a      	ldreq	r2, [r3, #0]
 80115ac:	685b      	ldreq	r3, [r3, #4]
 80115ae:	1852      	addeq	r2, r2, r1
 80115b0:	6022      	streq	r2, [r4, #0]
 80115b2:	6063      	str	r3, [r4, #4]
 80115b4:	6004      	str	r4, [r0, #0]
 80115b6:	e7ed      	b.n	8011594 <_free_r+0x24>
 80115b8:	461a      	mov	r2, r3
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	b10b      	cbz	r3, 80115c2 <_free_r+0x52>
 80115be:	42a3      	cmp	r3, r4
 80115c0:	d9fa      	bls.n	80115b8 <_free_r+0x48>
 80115c2:	6811      	ldr	r1, [r2, #0]
 80115c4:	1850      	adds	r0, r2, r1
 80115c6:	42a0      	cmp	r0, r4
 80115c8:	d10b      	bne.n	80115e2 <_free_r+0x72>
 80115ca:	6820      	ldr	r0, [r4, #0]
 80115cc:	4401      	add	r1, r0
 80115ce:	1850      	adds	r0, r2, r1
 80115d0:	4283      	cmp	r3, r0
 80115d2:	6011      	str	r1, [r2, #0]
 80115d4:	d1de      	bne.n	8011594 <_free_r+0x24>
 80115d6:	6818      	ldr	r0, [r3, #0]
 80115d8:	685b      	ldr	r3, [r3, #4]
 80115da:	4401      	add	r1, r0
 80115dc:	6011      	str	r1, [r2, #0]
 80115de:	6053      	str	r3, [r2, #4]
 80115e0:	e7d8      	b.n	8011594 <_free_r+0x24>
 80115e2:	d902      	bls.n	80115ea <_free_r+0x7a>
 80115e4:	230c      	movs	r3, #12
 80115e6:	602b      	str	r3, [r5, #0]
 80115e8:	e7d4      	b.n	8011594 <_free_r+0x24>
 80115ea:	6820      	ldr	r0, [r4, #0]
 80115ec:	1821      	adds	r1, r4, r0
 80115ee:	428b      	cmp	r3, r1
 80115f0:	bf01      	itttt	eq
 80115f2:	6819      	ldreq	r1, [r3, #0]
 80115f4:	685b      	ldreq	r3, [r3, #4]
 80115f6:	1809      	addeq	r1, r1, r0
 80115f8:	6021      	streq	r1, [r4, #0]
 80115fa:	6063      	str	r3, [r4, #4]
 80115fc:	6054      	str	r4, [r2, #4]
 80115fe:	e7c9      	b.n	8011594 <_free_r+0x24>
 8011600:	bd38      	pop	{r3, r4, r5, pc}
 8011602:	bf00      	nop
 8011604:	200063ec 	.word	0x200063ec

08011608 <_malloc_r>:
 8011608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801160a:	1ccd      	adds	r5, r1, #3
 801160c:	f025 0503 	bic.w	r5, r5, #3
 8011610:	3508      	adds	r5, #8
 8011612:	2d0c      	cmp	r5, #12
 8011614:	bf38      	it	cc
 8011616:	250c      	movcc	r5, #12
 8011618:	2d00      	cmp	r5, #0
 801161a:	4606      	mov	r6, r0
 801161c:	db01      	blt.n	8011622 <_malloc_r+0x1a>
 801161e:	42a9      	cmp	r1, r5
 8011620:	d903      	bls.n	801162a <_malloc_r+0x22>
 8011622:	230c      	movs	r3, #12
 8011624:	6033      	str	r3, [r6, #0]
 8011626:	2000      	movs	r0, #0
 8011628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801162a:	f003 f93d 	bl	80148a8 <__malloc_lock>
 801162e:	4921      	ldr	r1, [pc, #132]	; (80116b4 <_malloc_r+0xac>)
 8011630:	680a      	ldr	r2, [r1, #0]
 8011632:	4614      	mov	r4, r2
 8011634:	b99c      	cbnz	r4, 801165e <_malloc_r+0x56>
 8011636:	4f20      	ldr	r7, [pc, #128]	; (80116b8 <_malloc_r+0xb0>)
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	b923      	cbnz	r3, 8011646 <_malloc_r+0x3e>
 801163c:	4621      	mov	r1, r4
 801163e:	4630      	mov	r0, r6
 8011640:	f000 ff18 	bl	8012474 <_sbrk_r>
 8011644:	6038      	str	r0, [r7, #0]
 8011646:	4629      	mov	r1, r5
 8011648:	4630      	mov	r0, r6
 801164a:	f000 ff13 	bl	8012474 <_sbrk_r>
 801164e:	1c43      	adds	r3, r0, #1
 8011650:	d123      	bne.n	801169a <_malloc_r+0x92>
 8011652:	230c      	movs	r3, #12
 8011654:	4630      	mov	r0, r6
 8011656:	6033      	str	r3, [r6, #0]
 8011658:	f003 f92c 	bl	80148b4 <__malloc_unlock>
 801165c:	e7e3      	b.n	8011626 <_malloc_r+0x1e>
 801165e:	6823      	ldr	r3, [r4, #0]
 8011660:	1b5b      	subs	r3, r3, r5
 8011662:	d417      	bmi.n	8011694 <_malloc_r+0x8c>
 8011664:	2b0b      	cmp	r3, #11
 8011666:	d903      	bls.n	8011670 <_malloc_r+0x68>
 8011668:	6023      	str	r3, [r4, #0]
 801166a:	441c      	add	r4, r3
 801166c:	6025      	str	r5, [r4, #0]
 801166e:	e004      	b.n	801167a <_malloc_r+0x72>
 8011670:	6863      	ldr	r3, [r4, #4]
 8011672:	42a2      	cmp	r2, r4
 8011674:	bf0c      	ite	eq
 8011676:	600b      	streq	r3, [r1, #0]
 8011678:	6053      	strne	r3, [r2, #4]
 801167a:	4630      	mov	r0, r6
 801167c:	f003 f91a 	bl	80148b4 <__malloc_unlock>
 8011680:	f104 000b 	add.w	r0, r4, #11
 8011684:	1d23      	adds	r3, r4, #4
 8011686:	f020 0007 	bic.w	r0, r0, #7
 801168a:	1ac2      	subs	r2, r0, r3
 801168c:	d0cc      	beq.n	8011628 <_malloc_r+0x20>
 801168e:	1a1b      	subs	r3, r3, r0
 8011690:	50a3      	str	r3, [r4, r2]
 8011692:	e7c9      	b.n	8011628 <_malloc_r+0x20>
 8011694:	4622      	mov	r2, r4
 8011696:	6864      	ldr	r4, [r4, #4]
 8011698:	e7cc      	b.n	8011634 <_malloc_r+0x2c>
 801169a:	1cc4      	adds	r4, r0, #3
 801169c:	f024 0403 	bic.w	r4, r4, #3
 80116a0:	42a0      	cmp	r0, r4
 80116a2:	d0e3      	beq.n	801166c <_malloc_r+0x64>
 80116a4:	1a21      	subs	r1, r4, r0
 80116a6:	4630      	mov	r0, r6
 80116a8:	f000 fee4 	bl	8012474 <_sbrk_r>
 80116ac:	3001      	adds	r0, #1
 80116ae:	d1dd      	bne.n	801166c <_malloc_r+0x64>
 80116b0:	e7cf      	b.n	8011652 <_malloc_r+0x4a>
 80116b2:	bf00      	nop
 80116b4:	200063ec 	.word	0x200063ec
 80116b8:	200063f0 	.word	0x200063f0

080116bc <__cvt>:
 80116bc:	2b00      	cmp	r3, #0
 80116be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116c2:	461f      	mov	r7, r3
 80116c4:	bfbb      	ittet	lt
 80116c6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80116ca:	461f      	movlt	r7, r3
 80116cc:	2300      	movge	r3, #0
 80116ce:	232d      	movlt	r3, #45	; 0x2d
 80116d0:	b088      	sub	sp, #32
 80116d2:	4614      	mov	r4, r2
 80116d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80116d6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80116d8:	7013      	strb	r3, [r2, #0]
 80116da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80116dc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80116e0:	f023 0820 	bic.w	r8, r3, #32
 80116e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80116e8:	d005      	beq.n	80116f6 <__cvt+0x3a>
 80116ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80116ee:	d100      	bne.n	80116f2 <__cvt+0x36>
 80116f0:	3501      	adds	r5, #1
 80116f2:	2302      	movs	r3, #2
 80116f4:	e000      	b.n	80116f8 <__cvt+0x3c>
 80116f6:	2303      	movs	r3, #3
 80116f8:	aa07      	add	r2, sp, #28
 80116fa:	9204      	str	r2, [sp, #16]
 80116fc:	aa06      	add	r2, sp, #24
 80116fe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8011702:	e9cd 3500 	strd	r3, r5, [sp]
 8011706:	4622      	mov	r2, r4
 8011708:	463b      	mov	r3, r7
 801170a:	f001 fe81 	bl	8013410 <_dtoa_r>
 801170e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011712:	4606      	mov	r6, r0
 8011714:	d102      	bne.n	801171c <__cvt+0x60>
 8011716:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011718:	07db      	lsls	r3, r3, #31
 801171a:	d522      	bpl.n	8011762 <__cvt+0xa6>
 801171c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011720:	eb06 0905 	add.w	r9, r6, r5
 8011724:	d110      	bne.n	8011748 <__cvt+0x8c>
 8011726:	7833      	ldrb	r3, [r6, #0]
 8011728:	2b30      	cmp	r3, #48	; 0x30
 801172a:	d10a      	bne.n	8011742 <__cvt+0x86>
 801172c:	2200      	movs	r2, #0
 801172e:	2300      	movs	r3, #0
 8011730:	4620      	mov	r0, r4
 8011732:	4639      	mov	r1, r7
 8011734:	f7ef f982 	bl	8000a3c <__aeabi_dcmpeq>
 8011738:	b918      	cbnz	r0, 8011742 <__cvt+0x86>
 801173a:	f1c5 0501 	rsb	r5, r5, #1
 801173e:	f8ca 5000 	str.w	r5, [sl]
 8011742:	f8da 3000 	ldr.w	r3, [sl]
 8011746:	4499      	add	r9, r3
 8011748:	2200      	movs	r2, #0
 801174a:	2300      	movs	r3, #0
 801174c:	4620      	mov	r0, r4
 801174e:	4639      	mov	r1, r7
 8011750:	f7ef f974 	bl	8000a3c <__aeabi_dcmpeq>
 8011754:	b108      	cbz	r0, 801175a <__cvt+0x9e>
 8011756:	f8cd 901c 	str.w	r9, [sp, #28]
 801175a:	2230      	movs	r2, #48	; 0x30
 801175c:	9b07      	ldr	r3, [sp, #28]
 801175e:	454b      	cmp	r3, r9
 8011760:	d307      	bcc.n	8011772 <__cvt+0xb6>
 8011762:	4630      	mov	r0, r6
 8011764:	9b07      	ldr	r3, [sp, #28]
 8011766:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011768:	1b9b      	subs	r3, r3, r6
 801176a:	6013      	str	r3, [r2, #0]
 801176c:	b008      	add	sp, #32
 801176e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011772:	1c59      	adds	r1, r3, #1
 8011774:	9107      	str	r1, [sp, #28]
 8011776:	701a      	strb	r2, [r3, #0]
 8011778:	e7f0      	b.n	801175c <__cvt+0xa0>

0801177a <__exponent>:
 801177a:	4603      	mov	r3, r0
 801177c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801177e:	2900      	cmp	r1, #0
 8011780:	f803 2b02 	strb.w	r2, [r3], #2
 8011784:	bfb6      	itet	lt
 8011786:	222d      	movlt	r2, #45	; 0x2d
 8011788:	222b      	movge	r2, #43	; 0x2b
 801178a:	4249      	neglt	r1, r1
 801178c:	2909      	cmp	r1, #9
 801178e:	7042      	strb	r2, [r0, #1]
 8011790:	dd2b      	ble.n	80117ea <__exponent+0x70>
 8011792:	f10d 0407 	add.w	r4, sp, #7
 8011796:	46a4      	mov	ip, r4
 8011798:	270a      	movs	r7, #10
 801179a:	fb91 f6f7 	sdiv	r6, r1, r7
 801179e:	460a      	mov	r2, r1
 80117a0:	46a6      	mov	lr, r4
 80117a2:	fb07 1516 	mls	r5, r7, r6, r1
 80117a6:	2a63      	cmp	r2, #99	; 0x63
 80117a8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80117ac:	4631      	mov	r1, r6
 80117ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80117b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80117b6:	dcf0      	bgt.n	801179a <__exponent+0x20>
 80117b8:	3130      	adds	r1, #48	; 0x30
 80117ba:	f1ae 0502 	sub.w	r5, lr, #2
 80117be:	f804 1c01 	strb.w	r1, [r4, #-1]
 80117c2:	4629      	mov	r1, r5
 80117c4:	1c44      	adds	r4, r0, #1
 80117c6:	4561      	cmp	r1, ip
 80117c8:	d30a      	bcc.n	80117e0 <__exponent+0x66>
 80117ca:	f10d 0209 	add.w	r2, sp, #9
 80117ce:	eba2 020e 	sub.w	r2, r2, lr
 80117d2:	4565      	cmp	r5, ip
 80117d4:	bf88      	it	hi
 80117d6:	2200      	movhi	r2, #0
 80117d8:	4413      	add	r3, r2
 80117da:	1a18      	subs	r0, r3, r0
 80117dc:	b003      	add	sp, #12
 80117de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80117e4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80117e8:	e7ed      	b.n	80117c6 <__exponent+0x4c>
 80117ea:	2330      	movs	r3, #48	; 0x30
 80117ec:	3130      	adds	r1, #48	; 0x30
 80117ee:	7083      	strb	r3, [r0, #2]
 80117f0:	70c1      	strb	r1, [r0, #3]
 80117f2:	1d03      	adds	r3, r0, #4
 80117f4:	e7f1      	b.n	80117da <__exponent+0x60>
	...

080117f8 <_printf_float>:
 80117f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117fc:	b091      	sub	sp, #68	; 0x44
 80117fe:	460c      	mov	r4, r1
 8011800:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8011804:	4616      	mov	r6, r2
 8011806:	461f      	mov	r7, r3
 8011808:	4605      	mov	r5, r0
 801180a:	f003 f817 	bl	801483c <_localeconv_r>
 801180e:	6803      	ldr	r3, [r0, #0]
 8011810:	4618      	mov	r0, r3
 8011812:	9309      	str	r3, [sp, #36]	; 0x24
 8011814:	f7ee fce6 	bl	80001e4 <strlen>
 8011818:	2300      	movs	r3, #0
 801181a:	930e      	str	r3, [sp, #56]	; 0x38
 801181c:	f8d8 3000 	ldr.w	r3, [r8]
 8011820:	900a      	str	r0, [sp, #40]	; 0x28
 8011822:	3307      	adds	r3, #7
 8011824:	f023 0307 	bic.w	r3, r3, #7
 8011828:	f103 0208 	add.w	r2, r3, #8
 801182c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011830:	f8d4 b000 	ldr.w	fp, [r4]
 8011834:	f8c8 2000 	str.w	r2, [r8]
 8011838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801183c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011840:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8011844:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8011848:	930b      	str	r3, [sp, #44]	; 0x2c
 801184a:	f04f 32ff 	mov.w	r2, #4294967295
 801184e:	4640      	mov	r0, r8
 8011850:	4b9c      	ldr	r3, [pc, #624]	; (8011ac4 <_printf_float+0x2cc>)
 8011852:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011854:	f7ef f924 	bl	8000aa0 <__aeabi_dcmpun>
 8011858:	bb70      	cbnz	r0, 80118b8 <_printf_float+0xc0>
 801185a:	f04f 32ff 	mov.w	r2, #4294967295
 801185e:	4640      	mov	r0, r8
 8011860:	4b98      	ldr	r3, [pc, #608]	; (8011ac4 <_printf_float+0x2cc>)
 8011862:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011864:	f7ef f8fe 	bl	8000a64 <__aeabi_dcmple>
 8011868:	bb30      	cbnz	r0, 80118b8 <_printf_float+0xc0>
 801186a:	2200      	movs	r2, #0
 801186c:	2300      	movs	r3, #0
 801186e:	4640      	mov	r0, r8
 8011870:	4651      	mov	r1, sl
 8011872:	f7ef f8ed 	bl	8000a50 <__aeabi_dcmplt>
 8011876:	b110      	cbz	r0, 801187e <_printf_float+0x86>
 8011878:	232d      	movs	r3, #45	; 0x2d
 801187a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801187e:	4b92      	ldr	r3, [pc, #584]	; (8011ac8 <_printf_float+0x2d0>)
 8011880:	4892      	ldr	r0, [pc, #584]	; (8011acc <_printf_float+0x2d4>)
 8011882:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011886:	bf94      	ite	ls
 8011888:	4698      	movls	r8, r3
 801188a:	4680      	movhi	r8, r0
 801188c:	2303      	movs	r3, #3
 801188e:	f04f 0a00 	mov.w	sl, #0
 8011892:	6123      	str	r3, [r4, #16]
 8011894:	f02b 0304 	bic.w	r3, fp, #4
 8011898:	6023      	str	r3, [r4, #0]
 801189a:	4633      	mov	r3, r6
 801189c:	4621      	mov	r1, r4
 801189e:	4628      	mov	r0, r5
 80118a0:	9700      	str	r7, [sp, #0]
 80118a2:	aa0f      	add	r2, sp, #60	; 0x3c
 80118a4:	f000 f9d4 	bl	8011c50 <_printf_common>
 80118a8:	3001      	adds	r0, #1
 80118aa:	f040 8090 	bne.w	80119ce <_printf_float+0x1d6>
 80118ae:	f04f 30ff 	mov.w	r0, #4294967295
 80118b2:	b011      	add	sp, #68	; 0x44
 80118b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118b8:	4642      	mov	r2, r8
 80118ba:	4653      	mov	r3, sl
 80118bc:	4640      	mov	r0, r8
 80118be:	4651      	mov	r1, sl
 80118c0:	f7ef f8ee 	bl	8000aa0 <__aeabi_dcmpun>
 80118c4:	b148      	cbz	r0, 80118da <_printf_float+0xe2>
 80118c6:	f1ba 0f00 	cmp.w	sl, #0
 80118ca:	bfb8      	it	lt
 80118cc:	232d      	movlt	r3, #45	; 0x2d
 80118ce:	4880      	ldr	r0, [pc, #512]	; (8011ad0 <_printf_float+0x2d8>)
 80118d0:	bfb8      	it	lt
 80118d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80118d6:	4b7f      	ldr	r3, [pc, #508]	; (8011ad4 <_printf_float+0x2dc>)
 80118d8:	e7d3      	b.n	8011882 <_printf_float+0x8a>
 80118da:	6863      	ldr	r3, [r4, #4]
 80118dc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80118e0:	1c5a      	adds	r2, r3, #1
 80118e2:	d142      	bne.n	801196a <_printf_float+0x172>
 80118e4:	2306      	movs	r3, #6
 80118e6:	6063      	str	r3, [r4, #4]
 80118e8:	2200      	movs	r2, #0
 80118ea:	9206      	str	r2, [sp, #24]
 80118ec:	aa0e      	add	r2, sp, #56	; 0x38
 80118ee:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80118f2:	aa0d      	add	r2, sp, #52	; 0x34
 80118f4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80118f8:	9203      	str	r2, [sp, #12]
 80118fa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80118fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011902:	6023      	str	r3, [r4, #0]
 8011904:	6863      	ldr	r3, [r4, #4]
 8011906:	4642      	mov	r2, r8
 8011908:	9300      	str	r3, [sp, #0]
 801190a:	4628      	mov	r0, r5
 801190c:	4653      	mov	r3, sl
 801190e:	910b      	str	r1, [sp, #44]	; 0x2c
 8011910:	f7ff fed4 	bl	80116bc <__cvt>
 8011914:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011916:	4680      	mov	r8, r0
 8011918:	2947      	cmp	r1, #71	; 0x47
 801191a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801191c:	d108      	bne.n	8011930 <_printf_float+0x138>
 801191e:	1cc8      	adds	r0, r1, #3
 8011920:	db02      	blt.n	8011928 <_printf_float+0x130>
 8011922:	6863      	ldr	r3, [r4, #4]
 8011924:	4299      	cmp	r1, r3
 8011926:	dd40      	ble.n	80119aa <_printf_float+0x1b2>
 8011928:	f1a9 0902 	sub.w	r9, r9, #2
 801192c:	fa5f f989 	uxtb.w	r9, r9
 8011930:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011934:	d81f      	bhi.n	8011976 <_printf_float+0x17e>
 8011936:	464a      	mov	r2, r9
 8011938:	3901      	subs	r1, #1
 801193a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801193e:	910d      	str	r1, [sp, #52]	; 0x34
 8011940:	f7ff ff1b 	bl	801177a <__exponent>
 8011944:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011946:	4682      	mov	sl, r0
 8011948:	1813      	adds	r3, r2, r0
 801194a:	2a01      	cmp	r2, #1
 801194c:	6123      	str	r3, [r4, #16]
 801194e:	dc02      	bgt.n	8011956 <_printf_float+0x15e>
 8011950:	6822      	ldr	r2, [r4, #0]
 8011952:	07d2      	lsls	r2, r2, #31
 8011954:	d501      	bpl.n	801195a <_printf_float+0x162>
 8011956:	3301      	adds	r3, #1
 8011958:	6123      	str	r3, [r4, #16]
 801195a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801195e:	2b00      	cmp	r3, #0
 8011960:	d09b      	beq.n	801189a <_printf_float+0xa2>
 8011962:	232d      	movs	r3, #45	; 0x2d
 8011964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011968:	e797      	b.n	801189a <_printf_float+0xa2>
 801196a:	2947      	cmp	r1, #71	; 0x47
 801196c:	d1bc      	bne.n	80118e8 <_printf_float+0xf0>
 801196e:	2b00      	cmp	r3, #0
 8011970:	d1ba      	bne.n	80118e8 <_printf_float+0xf0>
 8011972:	2301      	movs	r3, #1
 8011974:	e7b7      	b.n	80118e6 <_printf_float+0xee>
 8011976:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801197a:	d118      	bne.n	80119ae <_printf_float+0x1b6>
 801197c:	2900      	cmp	r1, #0
 801197e:	6863      	ldr	r3, [r4, #4]
 8011980:	dd0b      	ble.n	801199a <_printf_float+0x1a2>
 8011982:	6121      	str	r1, [r4, #16]
 8011984:	b913      	cbnz	r3, 801198c <_printf_float+0x194>
 8011986:	6822      	ldr	r2, [r4, #0]
 8011988:	07d0      	lsls	r0, r2, #31
 801198a:	d502      	bpl.n	8011992 <_printf_float+0x19a>
 801198c:	3301      	adds	r3, #1
 801198e:	440b      	add	r3, r1
 8011990:	6123      	str	r3, [r4, #16]
 8011992:	f04f 0a00 	mov.w	sl, #0
 8011996:	65a1      	str	r1, [r4, #88]	; 0x58
 8011998:	e7df      	b.n	801195a <_printf_float+0x162>
 801199a:	b913      	cbnz	r3, 80119a2 <_printf_float+0x1aa>
 801199c:	6822      	ldr	r2, [r4, #0]
 801199e:	07d2      	lsls	r2, r2, #31
 80119a0:	d501      	bpl.n	80119a6 <_printf_float+0x1ae>
 80119a2:	3302      	adds	r3, #2
 80119a4:	e7f4      	b.n	8011990 <_printf_float+0x198>
 80119a6:	2301      	movs	r3, #1
 80119a8:	e7f2      	b.n	8011990 <_printf_float+0x198>
 80119aa:	f04f 0967 	mov.w	r9, #103	; 0x67
 80119ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119b0:	4299      	cmp	r1, r3
 80119b2:	db05      	blt.n	80119c0 <_printf_float+0x1c8>
 80119b4:	6823      	ldr	r3, [r4, #0]
 80119b6:	6121      	str	r1, [r4, #16]
 80119b8:	07d8      	lsls	r0, r3, #31
 80119ba:	d5ea      	bpl.n	8011992 <_printf_float+0x19a>
 80119bc:	1c4b      	adds	r3, r1, #1
 80119be:	e7e7      	b.n	8011990 <_printf_float+0x198>
 80119c0:	2900      	cmp	r1, #0
 80119c2:	bfcc      	ite	gt
 80119c4:	2201      	movgt	r2, #1
 80119c6:	f1c1 0202 	rsble	r2, r1, #2
 80119ca:	4413      	add	r3, r2
 80119cc:	e7e0      	b.n	8011990 <_printf_float+0x198>
 80119ce:	6823      	ldr	r3, [r4, #0]
 80119d0:	055a      	lsls	r2, r3, #21
 80119d2:	d407      	bmi.n	80119e4 <_printf_float+0x1ec>
 80119d4:	6923      	ldr	r3, [r4, #16]
 80119d6:	4642      	mov	r2, r8
 80119d8:	4631      	mov	r1, r6
 80119da:	4628      	mov	r0, r5
 80119dc:	47b8      	blx	r7
 80119de:	3001      	adds	r0, #1
 80119e0:	d12b      	bne.n	8011a3a <_printf_float+0x242>
 80119e2:	e764      	b.n	80118ae <_printf_float+0xb6>
 80119e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80119e8:	f240 80dd 	bls.w	8011ba6 <_printf_float+0x3ae>
 80119ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80119f0:	2200      	movs	r2, #0
 80119f2:	2300      	movs	r3, #0
 80119f4:	f7ef f822 	bl	8000a3c <__aeabi_dcmpeq>
 80119f8:	2800      	cmp	r0, #0
 80119fa:	d033      	beq.n	8011a64 <_printf_float+0x26c>
 80119fc:	2301      	movs	r3, #1
 80119fe:	4631      	mov	r1, r6
 8011a00:	4628      	mov	r0, r5
 8011a02:	4a35      	ldr	r2, [pc, #212]	; (8011ad8 <_printf_float+0x2e0>)
 8011a04:	47b8      	blx	r7
 8011a06:	3001      	adds	r0, #1
 8011a08:	f43f af51 	beq.w	80118ae <_printf_float+0xb6>
 8011a0c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011a10:	429a      	cmp	r2, r3
 8011a12:	db02      	blt.n	8011a1a <_printf_float+0x222>
 8011a14:	6823      	ldr	r3, [r4, #0]
 8011a16:	07d8      	lsls	r0, r3, #31
 8011a18:	d50f      	bpl.n	8011a3a <_printf_float+0x242>
 8011a1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011a1e:	4631      	mov	r1, r6
 8011a20:	4628      	mov	r0, r5
 8011a22:	47b8      	blx	r7
 8011a24:	3001      	adds	r0, #1
 8011a26:	f43f af42 	beq.w	80118ae <_printf_float+0xb6>
 8011a2a:	f04f 0800 	mov.w	r8, #0
 8011a2e:	f104 091a 	add.w	r9, r4, #26
 8011a32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a34:	3b01      	subs	r3, #1
 8011a36:	4543      	cmp	r3, r8
 8011a38:	dc09      	bgt.n	8011a4e <_printf_float+0x256>
 8011a3a:	6823      	ldr	r3, [r4, #0]
 8011a3c:	079b      	lsls	r3, r3, #30
 8011a3e:	f100 8102 	bmi.w	8011c46 <_printf_float+0x44e>
 8011a42:	68e0      	ldr	r0, [r4, #12]
 8011a44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011a46:	4298      	cmp	r0, r3
 8011a48:	bfb8      	it	lt
 8011a4a:	4618      	movlt	r0, r3
 8011a4c:	e731      	b.n	80118b2 <_printf_float+0xba>
 8011a4e:	2301      	movs	r3, #1
 8011a50:	464a      	mov	r2, r9
 8011a52:	4631      	mov	r1, r6
 8011a54:	4628      	mov	r0, r5
 8011a56:	47b8      	blx	r7
 8011a58:	3001      	adds	r0, #1
 8011a5a:	f43f af28 	beq.w	80118ae <_printf_float+0xb6>
 8011a5e:	f108 0801 	add.w	r8, r8, #1
 8011a62:	e7e6      	b.n	8011a32 <_printf_float+0x23a>
 8011a64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	dc38      	bgt.n	8011adc <_printf_float+0x2e4>
 8011a6a:	2301      	movs	r3, #1
 8011a6c:	4631      	mov	r1, r6
 8011a6e:	4628      	mov	r0, r5
 8011a70:	4a19      	ldr	r2, [pc, #100]	; (8011ad8 <_printf_float+0x2e0>)
 8011a72:	47b8      	blx	r7
 8011a74:	3001      	adds	r0, #1
 8011a76:	f43f af1a 	beq.w	80118ae <_printf_float+0xb6>
 8011a7a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011a7e:	4313      	orrs	r3, r2
 8011a80:	d102      	bne.n	8011a88 <_printf_float+0x290>
 8011a82:	6823      	ldr	r3, [r4, #0]
 8011a84:	07d9      	lsls	r1, r3, #31
 8011a86:	d5d8      	bpl.n	8011a3a <_printf_float+0x242>
 8011a88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011a8c:	4631      	mov	r1, r6
 8011a8e:	4628      	mov	r0, r5
 8011a90:	47b8      	blx	r7
 8011a92:	3001      	adds	r0, #1
 8011a94:	f43f af0b 	beq.w	80118ae <_printf_float+0xb6>
 8011a98:	f04f 0900 	mov.w	r9, #0
 8011a9c:	f104 0a1a 	add.w	sl, r4, #26
 8011aa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011aa2:	425b      	negs	r3, r3
 8011aa4:	454b      	cmp	r3, r9
 8011aa6:	dc01      	bgt.n	8011aac <_printf_float+0x2b4>
 8011aa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011aaa:	e794      	b.n	80119d6 <_printf_float+0x1de>
 8011aac:	2301      	movs	r3, #1
 8011aae:	4652      	mov	r2, sl
 8011ab0:	4631      	mov	r1, r6
 8011ab2:	4628      	mov	r0, r5
 8011ab4:	47b8      	blx	r7
 8011ab6:	3001      	adds	r0, #1
 8011ab8:	f43f aef9 	beq.w	80118ae <_printf_float+0xb6>
 8011abc:	f109 0901 	add.w	r9, r9, #1
 8011ac0:	e7ee      	b.n	8011aa0 <_printf_float+0x2a8>
 8011ac2:	bf00      	nop
 8011ac4:	7fefffff 	.word	0x7fefffff
 8011ac8:	08015e44 	.word	0x08015e44
 8011acc:	08015e48 	.word	0x08015e48
 8011ad0:	08015e50 	.word	0x08015e50
 8011ad4:	08015e4c 	.word	0x08015e4c
 8011ad8:	08015e54 	.word	0x08015e54
 8011adc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011ade:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	bfa8      	it	ge
 8011ae4:	461a      	movge	r2, r3
 8011ae6:	2a00      	cmp	r2, #0
 8011ae8:	4691      	mov	r9, r2
 8011aea:	dc37      	bgt.n	8011b5c <_printf_float+0x364>
 8011aec:	f04f 0b00 	mov.w	fp, #0
 8011af0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011af4:	f104 021a 	add.w	r2, r4, #26
 8011af8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011afc:	ebaa 0309 	sub.w	r3, sl, r9
 8011b00:	455b      	cmp	r3, fp
 8011b02:	dc33      	bgt.n	8011b6c <_printf_float+0x374>
 8011b04:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	db3b      	blt.n	8011b84 <_printf_float+0x38c>
 8011b0c:	6823      	ldr	r3, [r4, #0]
 8011b0e:	07da      	lsls	r2, r3, #31
 8011b10:	d438      	bmi.n	8011b84 <_printf_float+0x38c>
 8011b12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011b14:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011b16:	eba2 030a 	sub.w	r3, r2, sl
 8011b1a:	eba2 0901 	sub.w	r9, r2, r1
 8011b1e:	4599      	cmp	r9, r3
 8011b20:	bfa8      	it	ge
 8011b22:	4699      	movge	r9, r3
 8011b24:	f1b9 0f00 	cmp.w	r9, #0
 8011b28:	dc34      	bgt.n	8011b94 <_printf_float+0x39c>
 8011b2a:	f04f 0800 	mov.w	r8, #0
 8011b2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011b32:	f104 0a1a 	add.w	sl, r4, #26
 8011b36:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011b3a:	1a9b      	subs	r3, r3, r2
 8011b3c:	eba3 0309 	sub.w	r3, r3, r9
 8011b40:	4543      	cmp	r3, r8
 8011b42:	f77f af7a 	ble.w	8011a3a <_printf_float+0x242>
 8011b46:	2301      	movs	r3, #1
 8011b48:	4652      	mov	r2, sl
 8011b4a:	4631      	mov	r1, r6
 8011b4c:	4628      	mov	r0, r5
 8011b4e:	47b8      	blx	r7
 8011b50:	3001      	adds	r0, #1
 8011b52:	f43f aeac 	beq.w	80118ae <_printf_float+0xb6>
 8011b56:	f108 0801 	add.w	r8, r8, #1
 8011b5a:	e7ec      	b.n	8011b36 <_printf_float+0x33e>
 8011b5c:	4613      	mov	r3, r2
 8011b5e:	4631      	mov	r1, r6
 8011b60:	4642      	mov	r2, r8
 8011b62:	4628      	mov	r0, r5
 8011b64:	47b8      	blx	r7
 8011b66:	3001      	adds	r0, #1
 8011b68:	d1c0      	bne.n	8011aec <_printf_float+0x2f4>
 8011b6a:	e6a0      	b.n	80118ae <_printf_float+0xb6>
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	4631      	mov	r1, r6
 8011b70:	4628      	mov	r0, r5
 8011b72:	920b      	str	r2, [sp, #44]	; 0x2c
 8011b74:	47b8      	blx	r7
 8011b76:	3001      	adds	r0, #1
 8011b78:	f43f ae99 	beq.w	80118ae <_printf_float+0xb6>
 8011b7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011b7e:	f10b 0b01 	add.w	fp, fp, #1
 8011b82:	e7b9      	b.n	8011af8 <_printf_float+0x300>
 8011b84:	4631      	mov	r1, r6
 8011b86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b8a:	4628      	mov	r0, r5
 8011b8c:	47b8      	blx	r7
 8011b8e:	3001      	adds	r0, #1
 8011b90:	d1bf      	bne.n	8011b12 <_printf_float+0x31a>
 8011b92:	e68c      	b.n	80118ae <_printf_float+0xb6>
 8011b94:	464b      	mov	r3, r9
 8011b96:	4631      	mov	r1, r6
 8011b98:	4628      	mov	r0, r5
 8011b9a:	eb08 020a 	add.w	r2, r8, sl
 8011b9e:	47b8      	blx	r7
 8011ba0:	3001      	adds	r0, #1
 8011ba2:	d1c2      	bne.n	8011b2a <_printf_float+0x332>
 8011ba4:	e683      	b.n	80118ae <_printf_float+0xb6>
 8011ba6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011ba8:	2a01      	cmp	r2, #1
 8011baa:	dc01      	bgt.n	8011bb0 <_printf_float+0x3b8>
 8011bac:	07db      	lsls	r3, r3, #31
 8011bae:	d537      	bpl.n	8011c20 <_printf_float+0x428>
 8011bb0:	2301      	movs	r3, #1
 8011bb2:	4642      	mov	r2, r8
 8011bb4:	4631      	mov	r1, r6
 8011bb6:	4628      	mov	r0, r5
 8011bb8:	47b8      	blx	r7
 8011bba:	3001      	adds	r0, #1
 8011bbc:	f43f ae77 	beq.w	80118ae <_printf_float+0xb6>
 8011bc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011bc4:	4631      	mov	r1, r6
 8011bc6:	4628      	mov	r0, r5
 8011bc8:	47b8      	blx	r7
 8011bca:	3001      	adds	r0, #1
 8011bcc:	f43f ae6f 	beq.w	80118ae <_printf_float+0xb6>
 8011bd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	f7ee ff30 	bl	8000a3c <__aeabi_dcmpeq>
 8011bdc:	b9d8      	cbnz	r0, 8011c16 <_printf_float+0x41e>
 8011bde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011be0:	f108 0201 	add.w	r2, r8, #1
 8011be4:	3b01      	subs	r3, #1
 8011be6:	4631      	mov	r1, r6
 8011be8:	4628      	mov	r0, r5
 8011bea:	47b8      	blx	r7
 8011bec:	3001      	adds	r0, #1
 8011bee:	d10e      	bne.n	8011c0e <_printf_float+0x416>
 8011bf0:	e65d      	b.n	80118ae <_printf_float+0xb6>
 8011bf2:	2301      	movs	r3, #1
 8011bf4:	464a      	mov	r2, r9
 8011bf6:	4631      	mov	r1, r6
 8011bf8:	4628      	mov	r0, r5
 8011bfa:	47b8      	blx	r7
 8011bfc:	3001      	adds	r0, #1
 8011bfe:	f43f ae56 	beq.w	80118ae <_printf_float+0xb6>
 8011c02:	f108 0801 	add.w	r8, r8, #1
 8011c06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c08:	3b01      	subs	r3, #1
 8011c0a:	4543      	cmp	r3, r8
 8011c0c:	dcf1      	bgt.n	8011bf2 <_printf_float+0x3fa>
 8011c0e:	4653      	mov	r3, sl
 8011c10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011c14:	e6e0      	b.n	80119d8 <_printf_float+0x1e0>
 8011c16:	f04f 0800 	mov.w	r8, #0
 8011c1a:	f104 091a 	add.w	r9, r4, #26
 8011c1e:	e7f2      	b.n	8011c06 <_printf_float+0x40e>
 8011c20:	2301      	movs	r3, #1
 8011c22:	4642      	mov	r2, r8
 8011c24:	e7df      	b.n	8011be6 <_printf_float+0x3ee>
 8011c26:	2301      	movs	r3, #1
 8011c28:	464a      	mov	r2, r9
 8011c2a:	4631      	mov	r1, r6
 8011c2c:	4628      	mov	r0, r5
 8011c2e:	47b8      	blx	r7
 8011c30:	3001      	adds	r0, #1
 8011c32:	f43f ae3c 	beq.w	80118ae <_printf_float+0xb6>
 8011c36:	f108 0801 	add.w	r8, r8, #1
 8011c3a:	68e3      	ldr	r3, [r4, #12]
 8011c3c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011c3e:	1a5b      	subs	r3, r3, r1
 8011c40:	4543      	cmp	r3, r8
 8011c42:	dcf0      	bgt.n	8011c26 <_printf_float+0x42e>
 8011c44:	e6fd      	b.n	8011a42 <_printf_float+0x24a>
 8011c46:	f04f 0800 	mov.w	r8, #0
 8011c4a:	f104 0919 	add.w	r9, r4, #25
 8011c4e:	e7f4      	b.n	8011c3a <_printf_float+0x442>

08011c50 <_printf_common>:
 8011c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c54:	4616      	mov	r6, r2
 8011c56:	4699      	mov	r9, r3
 8011c58:	688a      	ldr	r2, [r1, #8]
 8011c5a:	690b      	ldr	r3, [r1, #16]
 8011c5c:	4607      	mov	r7, r0
 8011c5e:	4293      	cmp	r3, r2
 8011c60:	bfb8      	it	lt
 8011c62:	4613      	movlt	r3, r2
 8011c64:	6033      	str	r3, [r6, #0]
 8011c66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011c6a:	460c      	mov	r4, r1
 8011c6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011c70:	b10a      	cbz	r2, 8011c76 <_printf_common+0x26>
 8011c72:	3301      	adds	r3, #1
 8011c74:	6033      	str	r3, [r6, #0]
 8011c76:	6823      	ldr	r3, [r4, #0]
 8011c78:	0699      	lsls	r1, r3, #26
 8011c7a:	bf42      	ittt	mi
 8011c7c:	6833      	ldrmi	r3, [r6, #0]
 8011c7e:	3302      	addmi	r3, #2
 8011c80:	6033      	strmi	r3, [r6, #0]
 8011c82:	6825      	ldr	r5, [r4, #0]
 8011c84:	f015 0506 	ands.w	r5, r5, #6
 8011c88:	d106      	bne.n	8011c98 <_printf_common+0x48>
 8011c8a:	f104 0a19 	add.w	sl, r4, #25
 8011c8e:	68e3      	ldr	r3, [r4, #12]
 8011c90:	6832      	ldr	r2, [r6, #0]
 8011c92:	1a9b      	subs	r3, r3, r2
 8011c94:	42ab      	cmp	r3, r5
 8011c96:	dc28      	bgt.n	8011cea <_printf_common+0x9a>
 8011c98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011c9c:	1e13      	subs	r3, r2, #0
 8011c9e:	6822      	ldr	r2, [r4, #0]
 8011ca0:	bf18      	it	ne
 8011ca2:	2301      	movne	r3, #1
 8011ca4:	0692      	lsls	r2, r2, #26
 8011ca6:	d42d      	bmi.n	8011d04 <_printf_common+0xb4>
 8011ca8:	4649      	mov	r1, r9
 8011caa:	4638      	mov	r0, r7
 8011cac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011cb0:	47c0      	blx	r8
 8011cb2:	3001      	adds	r0, #1
 8011cb4:	d020      	beq.n	8011cf8 <_printf_common+0xa8>
 8011cb6:	6823      	ldr	r3, [r4, #0]
 8011cb8:	68e5      	ldr	r5, [r4, #12]
 8011cba:	f003 0306 	and.w	r3, r3, #6
 8011cbe:	2b04      	cmp	r3, #4
 8011cc0:	bf18      	it	ne
 8011cc2:	2500      	movne	r5, #0
 8011cc4:	6832      	ldr	r2, [r6, #0]
 8011cc6:	f04f 0600 	mov.w	r6, #0
 8011cca:	68a3      	ldr	r3, [r4, #8]
 8011ccc:	bf08      	it	eq
 8011cce:	1aad      	subeq	r5, r5, r2
 8011cd0:	6922      	ldr	r2, [r4, #16]
 8011cd2:	bf08      	it	eq
 8011cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011cd8:	4293      	cmp	r3, r2
 8011cda:	bfc4      	itt	gt
 8011cdc:	1a9b      	subgt	r3, r3, r2
 8011cde:	18ed      	addgt	r5, r5, r3
 8011ce0:	341a      	adds	r4, #26
 8011ce2:	42b5      	cmp	r5, r6
 8011ce4:	d11a      	bne.n	8011d1c <_printf_common+0xcc>
 8011ce6:	2000      	movs	r0, #0
 8011ce8:	e008      	b.n	8011cfc <_printf_common+0xac>
 8011cea:	2301      	movs	r3, #1
 8011cec:	4652      	mov	r2, sl
 8011cee:	4649      	mov	r1, r9
 8011cf0:	4638      	mov	r0, r7
 8011cf2:	47c0      	blx	r8
 8011cf4:	3001      	adds	r0, #1
 8011cf6:	d103      	bne.n	8011d00 <_printf_common+0xb0>
 8011cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8011cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d00:	3501      	adds	r5, #1
 8011d02:	e7c4      	b.n	8011c8e <_printf_common+0x3e>
 8011d04:	2030      	movs	r0, #48	; 0x30
 8011d06:	18e1      	adds	r1, r4, r3
 8011d08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011d0c:	1c5a      	adds	r2, r3, #1
 8011d0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011d12:	4422      	add	r2, r4
 8011d14:	3302      	adds	r3, #2
 8011d16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011d1a:	e7c5      	b.n	8011ca8 <_printf_common+0x58>
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	4622      	mov	r2, r4
 8011d20:	4649      	mov	r1, r9
 8011d22:	4638      	mov	r0, r7
 8011d24:	47c0      	blx	r8
 8011d26:	3001      	adds	r0, #1
 8011d28:	d0e6      	beq.n	8011cf8 <_printf_common+0xa8>
 8011d2a:	3601      	adds	r6, #1
 8011d2c:	e7d9      	b.n	8011ce2 <_printf_common+0x92>
	...

08011d30 <_printf_i>:
 8011d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d34:	460c      	mov	r4, r1
 8011d36:	7e27      	ldrb	r7, [r4, #24]
 8011d38:	4691      	mov	r9, r2
 8011d3a:	2f78      	cmp	r7, #120	; 0x78
 8011d3c:	4680      	mov	r8, r0
 8011d3e:	469a      	mov	sl, r3
 8011d40:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011d42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011d46:	d807      	bhi.n	8011d58 <_printf_i+0x28>
 8011d48:	2f62      	cmp	r7, #98	; 0x62
 8011d4a:	d80a      	bhi.n	8011d62 <_printf_i+0x32>
 8011d4c:	2f00      	cmp	r7, #0
 8011d4e:	f000 80d9 	beq.w	8011f04 <_printf_i+0x1d4>
 8011d52:	2f58      	cmp	r7, #88	; 0x58
 8011d54:	f000 80a4 	beq.w	8011ea0 <_printf_i+0x170>
 8011d58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011d5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011d60:	e03a      	b.n	8011dd8 <_printf_i+0xa8>
 8011d62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011d66:	2b15      	cmp	r3, #21
 8011d68:	d8f6      	bhi.n	8011d58 <_printf_i+0x28>
 8011d6a:	a001      	add	r0, pc, #4	; (adr r0, 8011d70 <_printf_i+0x40>)
 8011d6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011d70:	08011dc9 	.word	0x08011dc9
 8011d74:	08011ddd 	.word	0x08011ddd
 8011d78:	08011d59 	.word	0x08011d59
 8011d7c:	08011d59 	.word	0x08011d59
 8011d80:	08011d59 	.word	0x08011d59
 8011d84:	08011d59 	.word	0x08011d59
 8011d88:	08011ddd 	.word	0x08011ddd
 8011d8c:	08011d59 	.word	0x08011d59
 8011d90:	08011d59 	.word	0x08011d59
 8011d94:	08011d59 	.word	0x08011d59
 8011d98:	08011d59 	.word	0x08011d59
 8011d9c:	08011eeb 	.word	0x08011eeb
 8011da0:	08011e0d 	.word	0x08011e0d
 8011da4:	08011ecd 	.word	0x08011ecd
 8011da8:	08011d59 	.word	0x08011d59
 8011dac:	08011d59 	.word	0x08011d59
 8011db0:	08011f0d 	.word	0x08011f0d
 8011db4:	08011d59 	.word	0x08011d59
 8011db8:	08011e0d 	.word	0x08011e0d
 8011dbc:	08011d59 	.word	0x08011d59
 8011dc0:	08011d59 	.word	0x08011d59
 8011dc4:	08011ed5 	.word	0x08011ed5
 8011dc8:	680b      	ldr	r3, [r1, #0]
 8011dca:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011dce:	1d1a      	adds	r2, r3, #4
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	600a      	str	r2, [r1, #0]
 8011dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011dd8:	2301      	movs	r3, #1
 8011dda:	e0a4      	b.n	8011f26 <_printf_i+0x1f6>
 8011ddc:	6825      	ldr	r5, [r4, #0]
 8011dde:	6808      	ldr	r0, [r1, #0]
 8011de0:	062e      	lsls	r6, r5, #24
 8011de2:	f100 0304 	add.w	r3, r0, #4
 8011de6:	d50a      	bpl.n	8011dfe <_printf_i+0xce>
 8011de8:	6805      	ldr	r5, [r0, #0]
 8011dea:	600b      	str	r3, [r1, #0]
 8011dec:	2d00      	cmp	r5, #0
 8011dee:	da03      	bge.n	8011df8 <_printf_i+0xc8>
 8011df0:	232d      	movs	r3, #45	; 0x2d
 8011df2:	426d      	negs	r5, r5
 8011df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011df8:	230a      	movs	r3, #10
 8011dfa:	485e      	ldr	r0, [pc, #376]	; (8011f74 <_printf_i+0x244>)
 8011dfc:	e019      	b.n	8011e32 <_printf_i+0x102>
 8011dfe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011e02:	6805      	ldr	r5, [r0, #0]
 8011e04:	600b      	str	r3, [r1, #0]
 8011e06:	bf18      	it	ne
 8011e08:	b22d      	sxthne	r5, r5
 8011e0a:	e7ef      	b.n	8011dec <_printf_i+0xbc>
 8011e0c:	680b      	ldr	r3, [r1, #0]
 8011e0e:	6825      	ldr	r5, [r4, #0]
 8011e10:	1d18      	adds	r0, r3, #4
 8011e12:	6008      	str	r0, [r1, #0]
 8011e14:	0628      	lsls	r0, r5, #24
 8011e16:	d501      	bpl.n	8011e1c <_printf_i+0xec>
 8011e18:	681d      	ldr	r5, [r3, #0]
 8011e1a:	e002      	b.n	8011e22 <_printf_i+0xf2>
 8011e1c:	0669      	lsls	r1, r5, #25
 8011e1e:	d5fb      	bpl.n	8011e18 <_printf_i+0xe8>
 8011e20:	881d      	ldrh	r5, [r3, #0]
 8011e22:	2f6f      	cmp	r7, #111	; 0x6f
 8011e24:	bf0c      	ite	eq
 8011e26:	2308      	moveq	r3, #8
 8011e28:	230a      	movne	r3, #10
 8011e2a:	4852      	ldr	r0, [pc, #328]	; (8011f74 <_printf_i+0x244>)
 8011e2c:	2100      	movs	r1, #0
 8011e2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011e32:	6866      	ldr	r6, [r4, #4]
 8011e34:	2e00      	cmp	r6, #0
 8011e36:	bfa8      	it	ge
 8011e38:	6821      	ldrge	r1, [r4, #0]
 8011e3a:	60a6      	str	r6, [r4, #8]
 8011e3c:	bfa4      	itt	ge
 8011e3e:	f021 0104 	bicge.w	r1, r1, #4
 8011e42:	6021      	strge	r1, [r4, #0]
 8011e44:	b90d      	cbnz	r5, 8011e4a <_printf_i+0x11a>
 8011e46:	2e00      	cmp	r6, #0
 8011e48:	d04d      	beq.n	8011ee6 <_printf_i+0x1b6>
 8011e4a:	4616      	mov	r6, r2
 8011e4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8011e50:	fb03 5711 	mls	r7, r3, r1, r5
 8011e54:	5dc7      	ldrb	r7, [r0, r7]
 8011e56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011e5a:	462f      	mov	r7, r5
 8011e5c:	42bb      	cmp	r3, r7
 8011e5e:	460d      	mov	r5, r1
 8011e60:	d9f4      	bls.n	8011e4c <_printf_i+0x11c>
 8011e62:	2b08      	cmp	r3, #8
 8011e64:	d10b      	bne.n	8011e7e <_printf_i+0x14e>
 8011e66:	6823      	ldr	r3, [r4, #0]
 8011e68:	07df      	lsls	r7, r3, #31
 8011e6a:	d508      	bpl.n	8011e7e <_printf_i+0x14e>
 8011e6c:	6923      	ldr	r3, [r4, #16]
 8011e6e:	6861      	ldr	r1, [r4, #4]
 8011e70:	4299      	cmp	r1, r3
 8011e72:	bfde      	ittt	le
 8011e74:	2330      	movle	r3, #48	; 0x30
 8011e76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011e7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011e7e:	1b92      	subs	r2, r2, r6
 8011e80:	6122      	str	r2, [r4, #16]
 8011e82:	464b      	mov	r3, r9
 8011e84:	4621      	mov	r1, r4
 8011e86:	4640      	mov	r0, r8
 8011e88:	f8cd a000 	str.w	sl, [sp]
 8011e8c:	aa03      	add	r2, sp, #12
 8011e8e:	f7ff fedf 	bl	8011c50 <_printf_common>
 8011e92:	3001      	adds	r0, #1
 8011e94:	d14c      	bne.n	8011f30 <_printf_i+0x200>
 8011e96:	f04f 30ff 	mov.w	r0, #4294967295
 8011e9a:	b004      	add	sp, #16
 8011e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ea0:	4834      	ldr	r0, [pc, #208]	; (8011f74 <_printf_i+0x244>)
 8011ea2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011ea6:	680e      	ldr	r6, [r1, #0]
 8011ea8:	6823      	ldr	r3, [r4, #0]
 8011eaa:	f856 5b04 	ldr.w	r5, [r6], #4
 8011eae:	061f      	lsls	r7, r3, #24
 8011eb0:	600e      	str	r6, [r1, #0]
 8011eb2:	d514      	bpl.n	8011ede <_printf_i+0x1ae>
 8011eb4:	07d9      	lsls	r1, r3, #31
 8011eb6:	bf44      	itt	mi
 8011eb8:	f043 0320 	orrmi.w	r3, r3, #32
 8011ebc:	6023      	strmi	r3, [r4, #0]
 8011ebe:	b91d      	cbnz	r5, 8011ec8 <_printf_i+0x198>
 8011ec0:	6823      	ldr	r3, [r4, #0]
 8011ec2:	f023 0320 	bic.w	r3, r3, #32
 8011ec6:	6023      	str	r3, [r4, #0]
 8011ec8:	2310      	movs	r3, #16
 8011eca:	e7af      	b.n	8011e2c <_printf_i+0xfc>
 8011ecc:	6823      	ldr	r3, [r4, #0]
 8011ece:	f043 0320 	orr.w	r3, r3, #32
 8011ed2:	6023      	str	r3, [r4, #0]
 8011ed4:	2378      	movs	r3, #120	; 0x78
 8011ed6:	4828      	ldr	r0, [pc, #160]	; (8011f78 <_printf_i+0x248>)
 8011ed8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011edc:	e7e3      	b.n	8011ea6 <_printf_i+0x176>
 8011ede:	065e      	lsls	r6, r3, #25
 8011ee0:	bf48      	it	mi
 8011ee2:	b2ad      	uxthmi	r5, r5
 8011ee4:	e7e6      	b.n	8011eb4 <_printf_i+0x184>
 8011ee6:	4616      	mov	r6, r2
 8011ee8:	e7bb      	b.n	8011e62 <_printf_i+0x132>
 8011eea:	680b      	ldr	r3, [r1, #0]
 8011eec:	6826      	ldr	r6, [r4, #0]
 8011eee:	1d1d      	adds	r5, r3, #4
 8011ef0:	6960      	ldr	r0, [r4, #20]
 8011ef2:	600d      	str	r5, [r1, #0]
 8011ef4:	0635      	lsls	r5, r6, #24
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	d501      	bpl.n	8011efe <_printf_i+0x1ce>
 8011efa:	6018      	str	r0, [r3, #0]
 8011efc:	e002      	b.n	8011f04 <_printf_i+0x1d4>
 8011efe:	0671      	lsls	r1, r6, #25
 8011f00:	d5fb      	bpl.n	8011efa <_printf_i+0x1ca>
 8011f02:	8018      	strh	r0, [r3, #0]
 8011f04:	2300      	movs	r3, #0
 8011f06:	4616      	mov	r6, r2
 8011f08:	6123      	str	r3, [r4, #16]
 8011f0a:	e7ba      	b.n	8011e82 <_printf_i+0x152>
 8011f0c:	680b      	ldr	r3, [r1, #0]
 8011f0e:	1d1a      	adds	r2, r3, #4
 8011f10:	600a      	str	r2, [r1, #0]
 8011f12:	681e      	ldr	r6, [r3, #0]
 8011f14:	2100      	movs	r1, #0
 8011f16:	4630      	mov	r0, r6
 8011f18:	6862      	ldr	r2, [r4, #4]
 8011f1a:	f002 fcb7 	bl	801488c <memchr>
 8011f1e:	b108      	cbz	r0, 8011f24 <_printf_i+0x1f4>
 8011f20:	1b80      	subs	r0, r0, r6
 8011f22:	6060      	str	r0, [r4, #4]
 8011f24:	6863      	ldr	r3, [r4, #4]
 8011f26:	6123      	str	r3, [r4, #16]
 8011f28:	2300      	movs	r3, #0
 8011f2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f2e:	e7a8      	b.n	8011e82 <_printf_i+0x152>
 8011f30:	4632      	mov	r2, r6
 8011f32:	4649      	mov	r1, r9
 8011f34:	4640      	mov	r0, r8
 8011f36:	6923      	ldr	r3, [r4, #16]
 8011f38:	47d0      	blx	sl
 8011f3a:	3001      	adds	r0, #1
 8011f3c:	d0ab      	beq.n	8011e96 <_printf_i+0x166>
 8011f3e:	6823      	ldr	r3, [r4, #0]
 8011f40:	079b      	lsls	r3, r3, #30
 8011f42:	d413      	bmi.n	8011f6c <_printf_i+0x23c>
 8011f44:	68e0      	ldr	r0, [r4, #12]
 8011f46:	9b03      	ldr	r3, [sp, #12]
 8011f48:	4298      	cmp	r0, r3
 8011f4a:	bfb8      	it	lt
 8011f4c:	4618      	movlt	r0, r3
 8011f4e:	e7a4      	b.n	8011e9a <_printf_i+0x16a>
 8011f50:	2301      	movs	r3, #1
 8011f52:	4632      	mov	r2, r6
 8011f54:	4649      	mov	r1, r9
 8011f56:	4640      	mov	r0, r8
 8011f58:	47d0      	blx	sl
 8011f5a:	3001      	adds	r0, #1
 8011f5c:	d09b      	beq.n	8011e96 <_printf_i+0x166>
 8011f5e:	3501      	adds	r5, #1
 8011f60:	68e3      	ldr	r3, [r4, #12]
 8011f62:	9903      	ldr	r1, [sp, #12]
 8011f64:	1a5b      	subs	r3, r3, r1
 8011f66:	42ab      	cmp	r3, r5
 8011f68:	dcf2      	bgt.n	8011f50 <_printf_i+0x220>
 8011f6a:	e7eb      	b.n	8011f44 <_printf_i+0x214>
 8011f6c:	2500      	movs	r5, #0
 8011f6e:	f104 0619 	add.w	r6, r4, #25
 8011f72:	e7f5      	b.n	8011f60 <_printf_i+0x230>
 8011f74:	08015e56 	.word	0x08015e56
 8011f78:	08015e67 	.word	0x08015e67

08011f7c <_scanf_float>:
 8011f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f80:	b087      	sub	sp, #28
 8011f82:	9303      	str	r3, [sp, #12]
 8011f84:	688b      	ldr	r3, [r1, #8]
 8011f86:	4617      	mov	r7, r2
 8011f88:	1e5a      	subs	r2, r3, #1
 8011f8a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011f8e:	bf85      	ittet	hi
 8011f90:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011f94:	195b      	addhi	r3, r3, r5
 8011f96:	2300      	movls	r3, #0
 8011f98:	9302      	strhi	r3, [sp, #8]
 8011f9a:	bf88      	it	hi
 8011f9c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011fa0:	468b      	mov	fp, r1
 8011fa2:	f04f 0500 	mov.w	r5, #0
 8011fa6:	bf8c      	ite	hi
 8011fa8:	608b      	strhi	r3, [r1, #8]
 8011faa:	9302      	strls	r3, [sp, #8]
 8011fac:	680b      	ldr	r3, [r1, #0]
 8011fae:	4680      	mov	r8, r0
 8011fb0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011fb4:	f84b 3b1c 	str.w	r3, [fp], #28
 8011fb8:	460c      	mov	r4, r1
 8011fba:	465e      	mov	r6, fp
 8011fbc:	46aa      	mov	sl, r5
 8011fbe:	46a9      	mov	r9, r5
 8011fc0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011fc4:	9501      	str	r5, [sp, #4]
 8011fc6:	68a2      	ldr	r2, [r4, #8]
 8011fc8:	b152      	cbz	r2, 8011fe0 <_scanf_float+0x64>
 8011fca:	683b      	ldr	r3, [r7, #0]
 8011fcc:	781b      	ldrb	r3, [r3, #0]
 8011fce:	2b4e      	cmp	r3, #78	; 0x4e
 8011fd0:	d864      	bhi.n	801209c <_scanf_float+0x120>
 8011fd2:	2b40      	cmp	r3, #64	; 0x40
 8011fd4:	d83c      	bhi.n	8012050 <_scanf_float+0xd4>
 8011fd6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8011fda:	b2c8      	uxtb	r0, r1
 8011fdc:	280e      	cmp	r0, #14
 8011fde:	d93a      	bls.n	8012056 <_scanf_float+0xda>
 8011fe0:	f1b9 0f00 	cmp.w	r9, #0
 8011fe4:	d003      	beq.n	8011fee <_scanf_float+0x72>
 8011fe6:	6823      	ldr	r3, [r4, #0]
 8011fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011fec:	6023      	str	r3, [r4, #0]
 8011fee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011ff2:	f1ba 0f01 	cmp.w	sl, #1
 8011ff6:	f200 8113 	bhi.w	8012220 <_scanf_float+0x2a4>
 8011ffa:	455e      	cmp	r6, fp
 8011ffc:	f200 8105 	bhi.w	801220a <_scanf_float+0x28e>
 8012000:	2501      	movs	r5, #1
 8012002:	4628      	mov	r0, r5
 8012004:	b007      	add	sp, #28
 8012006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801200a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801200e:	2a0d      	cmp	r2, #13
 8012010:	d8e6      	bhi.n	8011fe0 <_scanf_float+0x64>
 8012012:	a101      	add	r1, pc, #4	; (adr r1, 8012018 <_scanf_float+0x9c>)
 8012014:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012018:	08012157 	.word	0x08012157
 801201c:	08011fe1 	.word	0x08011fe1
 8012020:	08011fe1 	.word	0x08011fe1
 8012024:	08011fe1 	.word	0x08011fe1
 8012028:	080121b7 	.word	0x080121b7
 801202c:	0801218f 	.word	0x0801218f
 8012030:	08011fe1 	.word	0x08011fe1
 8012034:	08011fe1 	.word	0x08011fe1
 8012038:	08012165 	.word	0x08012165
 801203c:	08011fe1 	.word	0x08011fe1
 8012040:	08011fe1 	.word	0x08011fe1
 8012044:	08011fe1 	.word	0x08011fe1
 8012048:	08011fe1 	.word	0x08011fe1
 801204c:	0801211d 	.word	0x0801211d
 8012050:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012054:	e7db      	b.n	801200e <_scanf_float+0x92>
 8012056:	290e      	cmp	r1, #14
 8012058:	d8c2      	bhi.n	8011fe0 <_scanf_float+0x64>
 801205a:	a001      	add	r0, pc, #4	; (adr r0, 8012060 <_scanf_float+0xe4>)
 801205c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012060:	0801210f 	.word	0x0801210f
 8012064:	08011fe1 	.word	0x08011fe1
 8012068:	0801210f 	.word	0x0801210f
 801206c:	080121a3 	.word	0x080121a3
 8012070:	08011fe1 	.word	0x08011fe1
 8012074:	080120bd 	.word	0x080120bd
 8012078:	080120f9 	.word	0x080120f9
 801207c:	080120f9 	.word	0x080120f9
 8012080:	080120f9 	.word	0x080120f9
 8012084:	080120f9 	.word	0x080120f9
 8012088:	080120f9 	.word	0x080120f9
 801208c:	080120f9 	.word	0x080120f9
 8012090:	080120f9 	.word	0x080120f9
 8012094:	080120f9 	.word	0x080120f9
 8012098:	080120f9 	.word	0x080120f9
 801209c:	2b6e      	cmp	r3, #110	; 0x6e
 801209e:	d809      	bhi.n	80120b4 <_scanf_float+0x138>
 80120a0:	2b60      	cmp	r3, #96	; 0x60
 80120a2:	d8b2      	bhi.n	801200a <_scanf_float+0x8e>
 80120a4:	2b54      	cmp	r3, #84	; 0x54
 80120a6:	d077      	beq.n	8012198 <_scanf_float+0x21c>
 80120a8:	2b59      	cmp	r3, #89	; 0x59
 80120aa:	d199      	bne.n	8011fe0 <_scanf_float+0x64>
 80120ac:	2d07      	cmp	r5, #7
 80120ae:	d197      	bne.n	8011fe0 <_scanf_float+0x64>
 80120b0:	2508      	movs	r5, #8
 80120b2:	e029      	b.n	8012108 <_scanf_float+0x18c>
 80120b4:	2b74      	cmp	r3, #116	; 0x74
 80120b6:	d06f      	beq.n	8012198 <_scanf_float+0x21c>
 80120b8:	2b79      	cmp	r3, #121	; 0x79
 80120ba:	e7f6      	b.n	80120aa <_scanf_float+0x12e>
 80120bc:	6821      	ldr	r1, [r4, #0]
 80120be:	05c8      	lsls	r0, r1, #23
 80120c0:	d51a      	bpl.n	80120f8 <_scanf_float+0x17c>
 80120c2:	9b02      	ldr	r3, [sp, #8]
 80120c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80120c8:	6021      	str	r1, [r4, #0]
 80120ca:	f109 0901 	add.w	r9, r9, #1
 80120ce:	b11b      	cbz	r3, 80120d8 <_scanf_float+0x15c>
 80120d0:	3b01      	subs	r3, #1
 80120d2:	3201      	adds	r2, #1
 80120d4:	9302      	str	r3, [sp, #8]
 80120d6:	60a2      	str	r2, [r4, #8]
 80120d8:	68a3      	ldr	r3, [r4, #8]
 80120da:	3b01      	subs	r3, #1
 80120dc:	60a3      	str	r3, [r4, #8]
 80120de:	6923      	ldr	r3, [r4, #16]
 80120e0:	3301      	adds	r3, #1
 80120e2:	6123      	str	r3, [r4, #16]
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	3b01      	subs	r3, #1
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	607b      	str	r3, [r7, #4]
 80120ec:	f340 8084 	ble.w	80121f8 <_scanf_float+0x27c>
 80120f0:	683b      	ldr	r3, [r7, #0]
 80120f2:	3301      	adds	r3, #1
 80120f4:	603b      	str	r3, [r7, #0]
 80120f6:	e766      	b.n	8011fc6 <_scanf_float+0x4a>
 80120f8:	eb1a 0f05 	cmn.w	sl, r5
 80120fc:	f47f af70 	bne.w	8011fe0 <_scanf_float+0x64>
 8012100:	6822      	ldr	r2, [r4, #0]
 8012102:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8012106:	6022      	str	r2, [r4, #0]
 8012108:	f806 3b01 	strb.w	r3, [r6], #1
 801210c:	e7e4      	b.n	80120d8 <_scanf_float+0x15c>
 801210e:	6822      	ldr	r2, [r4, #0]
 8012110:	0610      	lsls	r0, r2, #24
 8012112:	f57f af65 	bpl.w	8011fe0 <_scanf_float+0x64>
 8012116:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801211a:	e7f4      	b.n	8012106 <_scanf_float+0x18a>
 801211c:	f1ba 0f00 	cmp.w	sl, #0
 8012120:	d10e      	bne.n	8012140 <_scanf_float+0x1c4>
 8012122:	f1b9 0f00 	cmp.w	r9, #0
 8012126:	d10e      	bne.n	8012146 <_scanf_float+0x1ca>
 8012128:	6822      	ldr	r2, [r4, #0]
 801212a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801212e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012132:	d108      	bne.n	8012146 <_scanf_float+0x1ca>
 8012134:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012138:	f04f 0a01 	mov.w	sl, #1
 801213c:	6022      	str	r2, [r4, #0]
 801213e:	e7e3      	b.n	8012108 <_scanf_float+0x18c>
 8012140:	f1ba 0f02 	cmp.w	sl, #2
 8012144:	d055      	beq.n	80121f2 <_scanf_float+0x276>
 8012146:	2d01      	cmp	r5, #1
 8012148:	d002      	beq.n	8012150 <_scanf_float+0x1d4>
 801214a:	2d04      	cmp	r5, #4
 801214c:	f47f af48 	bne.w	8011fe0 <_scanf_float+0x64>
 8012150:	3501      	adds	r5, #1
 8012152:	b2ed      	uxtb	r5, r5
 8012154:	e7d8      	b.n	8012108 <_scanf_float+0x18c>
 8012156:	f1ba 0f01 	cmp.w	sl, #1
 801215a:	f47f af41 	bne.w	8011fe0 <_scanf_float+0x64>
 801215e:	f04f 0a02 	mov.w	sl, #2
 8012162:	e7d1      	b.n	8012108 <_scanf_float+0x18c>
 8012164:	b97d      	cbnz	r5, 8012186 <_scanf_float+0x20a>
 8012166:	f1b9 0f00 	cmp.w	r9, #0
 801216a:	f47f af3c 	bne.w	8011fe6 <_scanf_float+0x6a>
 801216e:	6822      	ldr	r2, [r4, #0]
 8012170:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012174:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012178:	f47f af39 	bne.w	8011fee <_scanf_float+0x72>
 801217c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012180:	2501      	movs	r5, #1
 8012182:	6022      	str	r2, [r4, #0]
 8012184:	e7c0      	b.n	8012108 <_scanf_float+0x18c>
 8012186:	2d03      	cmp	r5, #3
 8012188:	d0e2      	beq.n	8012150 <_scanf_float+0x1d4>
 801218a:	2d05      	cmp	r5, #5
 801218c:	e7de      	b.n	801214c <_scanf_float+0x1d0>
 801218e:	2d02      	cmp	r5, #2
 8012190:	f47f af26 	bne.w	8011fe0 <_scanf_float+0x64>
 8012194:	2503      	movs	r5, #3
 8012196:	e7b7      	b.n	8012108 <_scanf_float+0x18c>
 8012198:	2d06      	cmp	r5, #6
 801219a:	f47f af21 	bne.w	8011fe0 <_scanf_float+0x64>
 801219e:	2507      	movs	r5, #7
 80121a0:	e7b2      	b.n	8012108 <_scanf_float+0x18c>
 80121a2:	6822      	ldr	r2, [r4, #0]
 80121a4:	0591      	lsls	r1, r2, #22
 80121a6:	f57f af1b 	bpl.w	8011fe0 <_scanf_float+0x64>
 80121aa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80121ae:	6022      	str	r2, [r4, #0]
 80121b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80121b4:	e7a8      	b.n	8012108 <_scanf_float+0x18c>
 80121b6:	6822      	ldr	r2, [r4, #0]
 80121b8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80121bc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80121c0:	d006      	beq.n	80121d0 <_scanf_float+0x254>
 80121c2:	0550      	lsls	r0, r2, #21
 80121c4:	f57f af0c 	bpl.w	8011fe0 <_scanf_float+0x64>
 80121c8:	f1b9 0f00 	cmp.w	r9, #0
 80121cc:	f43f af0f 	beq.w	8011fee <_scanf_float+0x72>
 80121d0:	0591      	lsls	r1, r2, #22
 80121d2:	bf58      	it	pl
 80121d4:	9901      	ldrpl	r1, [sp, #4]
 80121d6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80121da:	bf58      	it	pl
 80121dc:	eba9 0101 	subpl.w	r1, r9, r1
 80121e0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80121e4:	f04f 0900 	mov.w	r9, #0
 80121e8:	bf58      	it	pl
 80121ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80121ee:	6022      	str	r2, [r4, #0]
 80121f0:	e78a      	b.n	8012108 <_scanf_float+0x18c>
 80121f2:	f04f 0a03 	mov.w	sl, #3
 80121f6:	e787      	b.n	8012108 <_scanf_float+0x18c>
 80121f8:	4639      	mov	r1, r7
 80121fa:	4640      	mov	r0, r8
 80121fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012200:	4798      	blx	r3
 8012202:	2800      	cmp	r0, #0
 8012204:	f43f aedf 	beq.w	8011fc6 <_scanf_float+0x4a>
 8012208:	e6ea      	b.n	8011fe0 <_scanf_float+0x64>
 801220a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801220e:	463a      	mov	r2, r7
 8012210:	4640      	mov	r0, r8
 8012212:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012216:	4798      	blx	r3
 8012218:	6923      	ldr	r3, [r4, #16]
 801221a:	3b01      	subs	r3, #1
 801221c:	6123      	str	r3, [r4, #16]
 801221e:	e6ec      	b.n	8011ffa <_scanf_float+0x7e>
 8012220:	1e6b      	subs	r3, r5, #1
 8012222:	2b06      	cmp	r3, #6
 8012224:	d825      	bhi.n	8012272 <_scanf_float+0x2f6>
 8012226:	2d02      	cmp	r5, #2
 8012228:	d836      	bhi.n	8012298 <_scanf_float+0x31c>
 801222a:	455e      	cmp	r6, fp
 801222c:	f67f aee8 	bls.w	8012000 <_scanf_float+0x84>
 8012230:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012234:	463a      	mov	r2, r7
 8012236:	4640      	mov	r0, r8
 8012238:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801223c:	4798      	blx	r3
 801223e:	6923      	ldr	r3, [r4, #16]
 8012240:	3b01      	subs	r3, #1
 8012242:	6123      	str	r3, [r4, #16]
 8012244:	e7f1      	b.n	801222a <_scanf_float+0x2ae>
 8012246:	9802      	ldr	r0, [sp, #8]
 8012248:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801224c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012250:	463a      	mov	r2, r7
 8012252:	9002      	str	r0, [sp, #8]
 8012254:	4640      	mov	r0, r8
 8012256:	4798      	blx	r3
 8012258:	6923      	ldr	r3, [r4, #16]
 801225a:	3b01      	subs	r3, #1
 801225c:	6123      	str	r3, [r4, #16]
 801225e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012262:	fa5f fa8a 	uxtb.w	sl, sl
 8012266:	f1ba 0f02 	cmp.w	sl, #2
 801226a:	d1ec      	bne.n	8012246 <_scanf_float+0x2ca>
 801226c:	3d03      	subs	r5, #3
 801226e:	b2ed      	uxtb	r5, r5
 8012270:	1b76      	subs	r6, r6, r5
 8012272:	6823      	ldr	r3, [r4, #0]
 8012274:	05da      	lsls	r2, r3, #23
 8012276:	d52f      	bpl.n	80122d8 <_scanf_float+0x35c>
 8012278:	055b      	lsls	r3, r3, #21
 801227a:	d510      	bpl.n	801229e <_scanf_float+0x322>
 801227c:	455e      	cmp	r6, fp
 801227e:	f67f aebf 	bls.w	8012000 <_scanf_float+0x84>
 8012282:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012286:	463a      	mov	r2, r7
 8012288:	4640      	mov	r0, r8
 801228a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801228e:	4798      	blx	r3
 8012290:	6923      	ldr	r3, [r4, #16]
 8012292:	3b01      	subs	r3, #1
 8012294:	6123      	str	r3, [r4, #16]
 8012296:	e7f1      	b.n	801227c <_scanf_float+0x300>
 8012298:	46aa      	mov	sl, r5
 801229a:	9602      	str	r6, [sp, #8]
 801229c:	e7df      	b.n	801225e <_scanf_float+0x2e2>
 801229e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80122a2:	6923      	ldr	r3, [r4, #16]
 80122a4:	2965      	cmp	r1, #101	; 0x65
 80122a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80122aa:	f106 35ff 	add.w	r5, r6, #4294967295
 80122ae:	6123      	str	r3, [r4, #16]
 80122b0:	d00c      	beq.n	80122cc <_scanf_float+0x350>
 80122b2:	2945      	cmp	r1, #69	; 0x45
 80122b4:	d00a      	beq.n	80122cc <_scanf_float+0x350>
 80122b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80122ba:	463a      	mov	r2, r7
 80122bc:	4640      	mov	r0, r8
 80122be:	4798      	blx	r3
 80122c0:	6923      	ldr	r3, [r4, #16]
 80122c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80122c6:	3b01      	subs	r3, #1
 80122c8:	1eb5      	subs	r5, r6, #2
 80122ca:	6123      	str	r3, [r4, #16]
 80122cc:	463a      	mov	r2, r7
 80122ce:	4640      	mov	r0, r8
 80122d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80122d4:	4798      	blx	r3
 80122d6:	462e      	mov	r6, r5
 80122d8:	6825      	ldr	r5, [r4, #0]
 80122da:	f015 0510 	ands.w	r5, r5, #16
 80122de:	d159      	bne.n	8012394 <_scanf_float+0x418>
 80122e0:	7035      	strb	r5, [r6, #0]
 80122e2:	6823      	ldr	r3, [r4, #0]
 80122e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80122e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80122ec:	d11c      	bne.n	8012328 <_scanf_float+0x3ac>
 80122ee:	9b01      	ldr	r3, [sp, #4]
 80122f0:	454b      	cmp	r3, r9
 80122f2:	eba3 0209 	sub.w	r2, r3, r9
 80122f6:	d124      	bne.n	8012342 <_scanf_float+0x3c6>
 80122f8:	2200      	movs	r2, #0
 80122fa:	4659      	mov	r1, fp
 80122fc:	4640      	mov	r0, r8
 80122fe:	f000 ff47 	bl	8013190 <_strtod_r>
 8012302:	f8d4 c000 	ldr.w	ip, [r4]
 8012306:	9b03      	ldr	r3, [sp, #12]
 8012308:	f01c 0f02 	tst.w	ip, #2
 801230c:	4606      	mov	r6, r0
 801230e:	460f      	mov	r7, r1
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	d021      	beq.n	8012358 <_scanf_float+0x3dc>
 8012314:	9903      	ldr	r1, [sp, #12]
 8012316:	1d1a      	adds	r2, r3, #4
 8012318:	600a      	str	r2, [r1, #0]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	e9c3 6700 	strd	r6, r7, [r3]
 8012320:	68e3      	ldr	r3, [r4, #12]
 8012322:	3301      	adds	r3, #1
 8012324:	60e3      	str	r3, [r4, #12]
 8012326:	e66c      	b.n	8012002 <_scanf_float+0x86>
 8012328:	9b04      	ldr	r3, [sp, #16]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d0e4      	beq.n	80122f8 <_scanf_float+0x37c>
 801232e:	9905      	ldr	r1, [sp, #20]
 8012330:	230a      	movs	r3, #10
 8012332:	462a      	mov	r2, r5
 8012334:	4640      	mov	r0, r8
 8012336:	3101      	adds	r1, #1
 8012338:	f000 ffb6 	bl	80132a8 <_strtol_r>
 801233c:	9b04      	ldr	r3, [sp, #16]
 801233e:	9e05      	ldr	r6, [sp, #20]
 8012340:	1ac2      	subs	r2, r0, r3
 8012342:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012346:	429e      	cmp	r6, r3
 8012348:	bf28      	it	cs
 801234a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801234e:	4630      	mov	r0, r6
 8012350:	4911      	ldr	r1, [pc, #68]	; (8012398 <_scanf_float+0x41c>)
 8012352:	f000 f8a3 	bl	801249c <siprintf>
 8012356:	e7cf      	b.n	80122f8 <_scanf_float+0x37c>
 8012358:	f01c 0f04 	tst.w	ip, #4
 801235c:	f103 0e04 	add.w	lr, r3, #4
 8012360:	d003      	beq.n	801236a <_scanf_float+0x3ee>
 8012362:	9903      	ldr	r1, [sp, #12]
 8012364:	f8c1 e000 	str.w	lr, [r1]
 8012368:	e7d7      	b.n	801231a <_scanf_float+0x39e>
 801236a:	9a03      	ldr	r2, [sp, #12]
 801236c:	f8c2 e000 	str.w	lr, [r2]
 8012370:	f8d3 8000 	ldr.w	r8, [r3]
 8012374:	4602      	mov	r2, r0
 8012376:	460b      	mov	r3, r1
 8012378:	f7ee fb92 	bl	8000aa0 <__aeabi_dcmpun>
 801237c:	b128      	cbz	r0, 801238a <_scanf_float+0x40e>
 801237e:	4807      	ldr	r0, [pc, #28]	; (801239c <_scanf_float+0x420>)
 8012380:	f000 f888 	bl	8012494 <nanf>
 8012384:	f8c8 0000 	str.w	r0, [r8]
 8012388:	e7ca      	b.n	8012320 <_scanf_float+0x3a4>
 801238a:	4630      	mov	r0, r6
 801238c:	4639      	mov	r1, r7
 801238e:	f7ee fbe5 	bl	8000b5c <__aeabi_d2f>
 8012392:	e7f7      	b.n	8012384 <_scanf_float+0x408>
 8012394:	2500      	movs	r5, #0
 8012396:	e634      	b.n	8012002 <_scanf_float+0x86>
 8012398:	08015e78 	.word	0x08015e78
 801239c:	08016290 	.word	0x08016290

080123a0 <cleanup_glue>:
 80123a0:	b538      	push	{r3, r4, r5, lr}
 80123a2:	460c      	mov	r4, r1
 80123a4:	6809      	ldr	r1, [r1, #0]
 80123a6:	4605      	mov	r5, r0
 80123a8:	b109      	cbz	r1, 80123ae <cleanup_glue+0xe>
 80123aa:	f7ff fff9 	bl	80123a0 <cleanup_glue>
 80123ae:	4621      	mov	r1, r4
 80123b0:	4628      	mov	r0, r5
 80123b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123b6:	f7ff b8db 	b.w	8011570 <_free_r>
	...

080123bc <_reclaim_reent>:
 80123bc:	4b2c      	ldr	r3, [pc, #176]	; (8012470 <_reclaim_reent+0xb4>)
 80123be:	b570      	push	{r4, r5, r6, lr}
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	4604      	mov	r4, r0
 80123c4:	4283      	cmp	r3, r0
 80123c6:	d051      	beq.n	801246c <_reclaim_reent+0xb0>
 80123c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80123ca:	b143      	cbz	r3, 80123de <_reclaim_reent+0x22>
 80123cc:	68db      	ldr	r3, [r3, #12]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d14a      	bne.n	8012468 <_reclaim_reent+0xac>
 80123d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123d4:	6819      	ldr	r1, [r3, #0]
 80123d6:	b111      	cbz	r1, 80123de <_reclaim_reent+0x22>
 80123d8:	4620      	mov	r0, r4
 80123da:	f7ff f8c9 	bl	8011570 <_free_r>
 80123de:	6961      	ldr	r1, [r4, #20]
 80123e0:	b111      	cbz	r1, 80123e8 <_reclaim_reent+0x2c>
 80123e2:	4620      	mov	r0, r4
 80123e4:	f7ff f8c4 	bl	8011570 <_free_r>
 80123e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80123ea:	b111      	cbz	r1, 80123f2 <_reclaim_reent+0x36>
 80123ec:	4620      	mov	r0, r4
 80123ee:	f7ff f8bf 	bl	8011570 <_free_r>
 80123f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80123f4:	b111      	cbz	r1, 80123fc <_reclaim_reent+0x40>
 80123f6:	4620      	mov	r0, r4
 80123f8:	f7ff f8ba 	bl	8011570 <_free_r>
 80123fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80123fe:	b111      	cbz	r1, 8012406 <_reclaim_reent+0x4a>
 8012400:	4620      	mov	r0, r4
 8012402:	f7ff f8b5 	bl	8011570 <_free_r>
 8012406:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012408:	b111      	cbz	r1, 8012410 <_reclaim_reent+0x54>
 801240a:	4620      	mov	r0, r4
 801240c:	f7ff f8b0 	bl	8011570 <_free_r>
 8012410:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012412:	b111      	cbz	r1, 801241a <_reclaim_reent+0x5e>
 8012414:	4620      	mov	r0, r4
 8012416:	f7ff f8ab 	bl	8011570 <_free_r>
 801241a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801241c:	b111      	cbz	r1, 8012424 <_reclaim_reent+0x68>
 801241e:	4620      	mov	r0, r4
 8012420:	f7ff f8a6 	bl	8011570 <_free_r>
 8012424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012426:	b111      	cbz	r1, 801242e <_reclaim_reent+0x72>
 8012428:	4620      	mov	r0, r4
 801242a:	f7ff f8a1 	bl	8011570 <_free_r>
 801242e:	69a3      	ldr	r3, [r4, #24]
 8012430:	b1e3      	cbz	r3, 801246c <_reclaim_reent+0xb0>
 8012432:	4620      	mov	r0, r4
 8012434:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012436:	4798      	blx	r3
 8012438:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801243a:	b1b9      	cbz	r1, 801246c <_reclaim_reent+0xb0>
 801243c:	4620      	mov	r0, r4
 801243e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012442:	f7ff bfad 	b.w	80123a0 <cleanup_glue>
 8012446:	5949      	ldr	r1, [r1, r5]
 8012448:	b941      	cbnz	r1, 801245c <_reclaim_reent+0xa0>
 801244a:	3504      	adds	r5, #4
 801244c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801244e:	2d80      	cmp	r5, #128	; 0x80
 8012450:	68d9      	ldr	r1, [r3, #12]
 8012452:	d1f8      	bne.n	8012446 <_reclaim_reent+0x8a>
 8012454:	4620      	mov	r0, r4
 8012456:	f7ff f88b 	bl	8011570 <_free_r>
 801245a:	e7ba      	b.n	80123d2 <_reclaim_reent+0x16>
 801245c:	680e      	ldr	r6, [r1, #0]
 801245e:	4620      	mov	r0, r4
 8012460:	f7ff f886 	bl	8011570 <_free_r>
 8012464:	4631      	mov	r1, r6
 8012466:	e7ef      	b.n	8012448 <_reclaim_reent+0x8c>
 8012468:	2500      	movs	r5, #0
 801246a:	e7ef      	b.n	801244c <_reclaim_reent+0x90>
 801246c:	bd70      	pop	{r4, r5, r6, pc}
 801246e:	bf00      	nop
 8012470:	2000005c 	.word	0x2000005c

08012474 <_sbrk_r>:
 8012474:	b538      	push	{r3, r4, r5, lr}
 8012476:	2300      	movs	r3, #0
 8012478:	4d05      	ldr	r5, [pc, #20]	; (8012490 <_sbrk_r+0x1c>)
 801247a:	4604      	mov	r4, r0
 801247c:	4608      	mov	r0, r1
 801247e:	602b      	str	r3, [r5, #0]
 8012480:	f7f0 fd1e 	bl	8002ec0 <_sbrk>
 8012484:	1c43      	adds	r3, r0, #1
 8012486:	d102      	bne.n	801248e <_sbrk_r+0x1a>
 8012488:	682b      	ldr	r3, [r5, #0]
 801248a:	b103      	cbz	r3, 801248e <_sbrk_r+0x1a>
 801248c:	6023      	str	r3, [r4, #0]
 801248e:	bd38      	pop	{r3, r4, r5, pc}
 8012490:	2000b3a8 	.word	0x2000b3a8

08012494 <nanf>:
 8012494:	4800      	ldr	r0, [pc, #0]	; (8012498 <nanf+0x4>)
 8012496:	4770      	bx	lr
 8012498:	7fc00000 	.word	0x7fc00000

0801249c <siprintf>:
 801249c:	b40e      	push	{r1, r2, r3}
 801249e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80124a2:	b500      	push	{lr}
 80124a4:	b09c      	sub	sp, #112	; 0x70
 80124a6:	ab1d      	add	r3, sp, #116	; 0x74
 80124a8:	9002      	str	r0, [sp, #8]
 80124aa:	9006      	str	r0, [sp, #24]
 80124ac:	9107      	str	r1, [sp, #28]
 80124ae:	9104      	str	r1, [sp, #16]
 80124b0:	4808      	ldr	r0, [pc, #32]	; (80124d4 <siprintf+0x38>)
 80124b2:	4909      	ldr	r1, [pc, #36]	; (80124d8 <siprintf+0x3c>)
 80124b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80124b8:	9105      	str	r1, [sp, #20]
 80124ba:	6800      	ldr	r0, [r0, #0]
 80124bc:	a902      	add	r1, sp, #8
 80124be:	9301      	str	r3, [sp, #4]
 80124c0:	f002 ff20 	bl	8015304 <_svfiprintf_r>
 80124c4:	2200      	movs	r2, #0
 80124c6:	9b02      	ldr	r3, [sp, #8]
 80124c8:	701a      	strb	r2, [r3, #0]
 80124ca:	b01c      	add	sp, #112	; 0x70
 80124cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80124d0:	b003      	add	sp, #12
 80124d2:	4770      	bx	lr
 80124d4:	2000005c 	.word	0x2000005c
 80124d8:	ffff0208 	.word	0xffff0208

080124dc <__sread>:
 80124dc:	b510      	push	{r4, lr}
 80124de:	460c      	mov	r4, r1
 80124e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124e4:	f003 f80e 	bl	8015504 <_read_r>
 80124e8:	2800      	cmp	r0, #0
 80124ea:	bfab      	itete	ge
 80124ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80124ee:	89a3      	ldrhlt	r3, [r4, #12]
 80124f0:	181b      	addge	r3, r3, r0
 80124f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80124f6:	bfac      	ite	ge
 80124f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80124fa:	81a3      	strhlt	r3, [r4, #12]
 80124fc:	bd10      	pop	{r4, pc}

080124fe <__swrite>:
 80124fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012502:	461f      	mov	r7, r3
 8012504:	898b      	ldrh	r3, [r1, #12]
 8012506:	4605      	mov	r5, r0
 8012508:	05db      	lsls	r3, r3, #23
 801250a:	460c      	mov	r4, r1
 801250c:	4616      	mov	r6, r2
 801250e:	d505      	bpl.n	801251c <__swrite+0x1e>
 8012510:	2302      	movs	r3, #2
 8012512:	2200      	movs	r2, #0
 8012514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012518:	f002 f994 	bl	8014844 <_lseek_r>
 801251c:	89a3      	ldrh	r3, [r4, #12]
 801251e:	4632      	mov	r2, r6
 8012520:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012524:	81a3      	strh	r3, [r4, #12]
 8012526:	4628      	mov	r0, r5
 8012528:	463b      	mov	r3, r7
 801252a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801252e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012532:	f000 bebb 	b.w	80132ac <_write_r>

08012536 <__sseek>:
 8012536:	b510      	push	{r4, lr}
 8012538:	460c      	mov	r4, r1
 801253a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801253e:	f002 f981 	bl	8014844 <_lseek_r>
 8012542:	1c43      	adds	r3, r0, #1
 8012544:	89a3      	ldrh	r3, [r4, #12]
 8012546:	bf15      	itete	ne
 8012548:	6560      	strne	r0, [r4, #84]	; 0x54
 801254a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801254e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012552:	81a3      	strheq	r3, [r4, #12]
 8012554:	bf18      	it	ne
 8012556:	81a3      	strhne	r3, [r4, #12]
 8012558:	bd10      	pop	{r4, pc}

0801255a <__sclose>:
 801255a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801255e:	f000 beb7 	b.w	80132d0 <_close_r>

08012562 <sulp>:
 8012562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012566:	460f      	mov	r7, r1
 8012568:	4690      	mov	r8, r2
 801256a:	f002 fd19 	bl	8014fa0 <__ulp>
 801256e:	4604      	mov	r4, r0
 8012570:	460d      	mov	r5, r1
 8012572:	f1b8 0f00 	cmp.w	r8, #0
 8012576:	d011      	beq.n	801259c <sulp+0x3a>
 8012578:	f3c7 530a 	ubfx	r3, r7, #20, #11
 801257c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012580:	2b00      	cmp	r3, #0
 8012582:	dd0b      	ble.n	801259c <sulp+0x3a>
 8012584:	2400      	movs	r4, #0
 8012586:	051b      	lsls	r3, r3, #20
 8012588:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801258c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012590:	4622      	mov	r2, r4
 8012592:	462b      	mov	r3, r5
 8012594:	f7ed ffea 	bl	800056c <__aeabi_dmul>
 8012598:	4604      	mov	r4, r0
 801259a:	460d      	mov	r5, r1
 801259c:	4620      	mov	r0, r4
 801259e:	4629      	mov	r1, r5
 80125a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125a4:	0000      	movs	r0, r0
	...

080125a8 <_strtod_l>:
 80125a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125ac:	469b      	mov	fp, r3
 80125ae:	2300      	movs	r3, #0
 80125b0:	b0a1      	sub	sp, #132	; 0x84
 80125b2:	931c      	str	r3, [sp, #112]	; 0x70
 80125b4:	4ba1      	ldr	r3, [pc, #644]	; (801283c <_strtod_l+0x294>)
 80125b6:	4682      	mov	sl, r0
 80125b8:	681f      	ldr	r7, [r3, #0]
 80125ba:	460e      	mov	r6, r1
 80125bc:	4638      	mov	r0, r7
 80125be:	9217      	str	r2, [sp, #92]	; 0x5c
 80125c0:	f7ed fe10 	bl	80001e4 <strlen>
 80125c4:	f04f 0800 	mov.w	r8, #0
 80125c8:	4604      	mov	r4, r0
 80125ca:	f04f 0900 	mov.w	r9, #0
 80125ce:	961b      	str	r6, [sp, #108]	; 0x6c
 80125d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80125d2:	781a      	ldrb	r2, [r3, #0]
 80125d4:	2a2b      	cmp	r2, #43	; 0x2b
 80125d6:	d04c      	beq.n	8012672 <_strtod_l+0xca>
 80125d8:	d83a      	bhi.n	8012650 <_strtod_l+0xa8>
 80125da:	2a0d      	cmp	r2, #13
 80125dc:	d833      	bhi.n	8012646 <_strtod_l+0x9e>
 80125de:	2a08      	cmp	r2, #8
 80125e0:	d833      	bhi.n	801264a <_strtod_l+0xa2>
 80125e2:	2a00      	cmp	r2, #0
 80125e4:	d03d      	beq.n	8012662 <_strtod_l+0xba>
 80125e6:	2300      	movs	r3, #0
 80125e8:	930c      	str	r3, [sp, #48]	; 0x30
 80125ea:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80125ec:	782b      	ldrb	r3, [r5, #0]
 80125ee:	2b30      	cmp	r3, #48	; 0x30
 80125f0:	f040 80af 	bne.w	8012752 <_strtod_l+0x1aa>
 80125f4:	786b      	ldrb	r3, [r5, #1]
 80125f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80125fa:	2b58      	cmp	r3, #88	; 0x58
 80125fc:	d16c      	bne.n	80126d8 <_strtod_l+0x130>
 80125fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012600:	4650      	mov	r0, sl
 8012602:	9301      	str	r3, [sp, #4]
 8012604:	ab1c      	add	r3, sp, #112	; 0x70
 8012606:	9300      	str	r3, [sp, #0]
 8012608:	4a8d      	ldr	r2, [pc, #564]	; (8012840 <_strtod_l+0x298>)
 801260a:	f8cd b008 	str.w	fp, [sp, #8]
 801260e:	ab1d      	add	r3, sp, #116	; 0x74
 8012610:	a91b      	add	r1, sp, #108	; 0x6c
 8012612:	f001 fe15 	bl	8014240 <__gethex>
 8012616:	f010 0607 	ands.w	r6, r0, #7
 801261a:	4604      	mov	r4, r0
 801261c:	d005      	beq.n	801262a <_strtod_l+0x82>
 801261e:	2e06      	cmp	r6, #6
 8012620:	d129      	bne.n	8012676 <_strtod_l+0xce>
 8012622:	2300      	movs	r3, #0
 8012624:	3501      	adds	r5, #1
 8012626:	951b      	str	r5, [sp, #108]	; 0x6c
 8012628:	930c      	str	r3, [sp, #48]	; 0x30
 801262a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801262c:	2b00      	cmp	r3, #0
 801262e:	f040 8596 	bne.w	801315e <_strtod_l+0xbb6>
 8012632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012634:	b1d3      	cbz	r3, 801266c <_strtod_l+0xc4>
 8012636:	4642      	mov	r2, r8
 8012638:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801263c:	4610      	mov	r0, r2
 801263e:	4619      	mov	r1, r3
 8012640:	b021      	add	sp, #132	; 0x84
 8012642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012646:	2a20      	cmp	r2, #32
 8012648:	d1cd      	bne.n	80125e6 <_strtod_l+0x3e>
 801264a:	3301      	adds	r3, #1
 801264c:	931b      	str	r3, [sp, #108]	; 0x6c
 801264e:	e7bf      	b.n	80125d0 <_strtod_l+0x28>
 8012650:	2a2d      	cmp	r2, #45	; 0x2d
 8012652:	d1c8      	bne.n	80125e6 <_strtod_l+0x3e>
 8012654:	2201      	movs	r2, #1
 8012656:	920c      	str	r2, [sp, #48]	; 0x30
 8012658:	1c5a      	adds	r2, r3, #1
 801265a:	921b      	str	r2, [sp, #108]	; 0x6c
 801265c:	785b      	ldrb	r3, [r3, #1]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d1c3      	bne.n	80125ea <_strtod_l+0x42>
 8012662:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012664:	961b      	str	r6, [sp, #108]	; 0x6c
 8012666:	2b00      	cmp	r3, #0
 8012668:	f040 8577 	bne.w	801315a <_strtod_l+0xbb2>
 801266c:	4642      	mov	r2, r8
 801266e:	464b      	mov	r3, r9
 8012670:	e7e4      	b.n	801263c <_strtod_l+0x94>
 8012672:	2200      	movs	r2, #0
 8012674:	e7ef      	b.n	8012656 <_strtod_l+0xae>
 8012676:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012678:	b13a      	cbz	r2, 801268a <_strtod_l+0xe2>
 801267a:	2135      	movs	r1, #53	; 0x35
 801267c:	a81e      	add	r0, sp, #120	; 0x78
 801267e:	f002 fd93 	bl	80151a8 <__copybits>
 8012682:	4650      	mov	r0, sl
 8012684:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012686:	f002 f95b 	bl	8014940 <_Bfree>
 801268a:	3e01      	subs	r6, #1
 801268c:	2e05      	cmp	r6, #5
 801268e:	d807      	bhi.n	80126a0 <_strtod_l+0xf8>
 8012690:	e8df f006 	tbb	[pc, r6]
 8012694:	1d180b0e 	.word	0x1d180b0e
 8012698:	030e      	.short	0x030e
 801269a:	f04f 0900 	mov.w	r9, #0
 801269e:	46c8      	mov	r8, r9
 80126a0:	0721      	lsls	r1, r4, #28
 80126a2:	d5c2      	bpl.n	801262a <_strtod_l+0x82>
 80126a4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80126a8:	e7bf      	b.n	801262a <_strtod_l+0x82>
 80126aa:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80126ae:	e7f7      	b.n	80126a0 <_strtod_l+0xf8>
 80126b0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80126b2:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80126b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80126ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80126be:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80126c2:	e7ed      	b.n	80126a0 <_strtod_l+0xf8>
 80126c4:	f04f 0800 	mov.w	r8, #0
 80126c8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8012844 <_strtod_l+0x29c>
 80126cc:	e7e8      	b.n	80126a0 <_strtod_l+0xf8>
 80126ce:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80126d2:	f04f 38ff 	mov.w	r8, #4294967295
 80126d6:	e7e3      	b.n	80126a0 <_strtod_l+0xf8>
 80126d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80126da:	1c5a      	adds	r2, r3, #1
 80126dc:	921b      	str	r2, [sp, #108]	; 0x6c
 80126de:	785b      	ldrb	r3, [r3, #1]
 80126e0:	2b30      	cmp	r3, #48	; 0x30
 80126e2:	d0f9      	beq.n	80126d8 <_strtod_l+0x130>
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d0a0      	beq.n	801262a <_strtod_l+0x82>
 80126e8:	2301      	movs	r3, #1
 80126ea:	9307      	str	r3, [sp, #28]
 80126ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80126ee:	220a      	movs	r2, #10
 80126f0:	9308      	str	r3, [sp, #32]
 80126f2:	2300      	movs	r3, #0
 80126f4:	469b      	mov	fp, r3
 80126f6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80126fa:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80126fc:	7805      	ldrb	r5, [r0, #0]
 80126fe:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8012702:	b2d9      	uxtb	r1, r3
 8012704:	2909      	cmp	r1, #9
 8012706:	d926      	bls.n	8012756 <_strtod_l+0x1ae>
 8012708:	4622      	mov	r2, r4
 801270a:	4639      	mov	r1, r7
 801270c:	f002 ff12 	bl	8015534 <strncmp>
 8012710:	2800      	cmp	r0, #0
 8012712:	d032      	beq.n	801277a <_strtod_l+0x1d2>
 8012714:	2000      	movs	r0, #0
 8012716:	462b      	mov	r3, r5
 8012718:	465c      	mov	r4, fp
 801271a:	4602      	mov	r2, r0
 801271c:	9004      	str	r0, [sp, #16]
 801271e:	2b65      	cmp	r3, #101	; 0x65
 8012720:	d001      	beq.n	8012726 <_strtod_l+0x17e>
 8012722:	2b45      	cmp	r3, #69	; 0x45
 8012724:	d113      	bne.n	801274e <_strtod_l+0x1a6>
 8012726:	b91c      	cbnz	r4, 8012730 <_strtod_l+0x188>
 8012728:	9b07      	ldr	r3, [sp, #28]
 801272a:	4303      	orrs	r3, r0
 801272c:	d099      	beq.n	8012662 <_strtod_l+0xba>
 801272e:	2400      	movs	r4, #0
 8012730:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8012732:	1c73      	adds	r3, r6, #1
 8012734:	931b      	str	r3, [sp, #108]	; 0x6c
 8012736:	7873      	ldrb	r3, [r6, #1]
 8012738:	2b2b      	cmp	r3, #43	; 0x2b
 801273a:	d078      	beq.n	801282e <_strtod_l+0x286>
 801273c:	2b2d      	cmp	r3, #45	; 0x2d
 801273e:	d07b      	beq.n	8012838 <_strtod_l+0x290>
 8012740:	2700      	movs	r7, #0
 8012742:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012746:	2909      	cmp	r1, #9
 8012748:	f240 8082 	bls.w	8012850 <_strtod_l+0x2a8>
 801274c:	961b      	str	r6, [sp, #108]	; 0x6c
 801274e:	2500      	movs	r5, #0
 8012750:	e09e      	b.n	8012890 <_strtod_l+0x2e8>
 8012752:	2300      	movs	r3, #0
 8012754:	e7c9      	b.n	80126ea <_strtod_l+0x142>
 8012756:	f1bb 0f08 	cmp.w	fp, #8
 801275a:	bfd5      	itete	le
 801275c:	9906      	ldrle	r1, [sp, #24]
 801275e:	9905      	ldrgt	r1, [sp, #20]
 8012760:	fb02 3301 	mlale	r3, r2, r1, r3
 8012764:	fb02 3301 	mlagt	r3, r2, r1, r3
 8012768:	f100 0001 	add.w	r0, r0, #1
 801276c:	bfd4      	ite	le
 801276e:	9306      	strle	r3, [sp, #24]
 8012770:	9305      	strgt	r3, [sp, #20]
 8012772:	f10b 0b01 	add.w	fp, fp, #1
 8012776:	901b      	str	r0, [sp, #108]	; 0x6c
 8012778:	e7bf      	b.n	80126fa <_strtod_l+0x152>
 801277a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801277c:	191a      	adds	r2, r3, r4
 801277e:	921b      	str	r2, [sp, #108]	; 0x6c
 8012780:	5d1b      	ldrb	r3, [r3, r4]
 8012782:	f1bb 0f00 	cmp.w	fp, #0
 8012786:	d036      	beq.n	80127f6 <_strtod_l+0x24e>
 8012788:	465c      	mov	r4, fp
 801278a:	9004      	str	r0, [sp, #16]
 801278c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012790:	2a09      	cmp	r2, #9
 8012792:	d912      	bls.n	80127ba <_strtod_l+0x212>
 8012794:	2201      	movs	r2, #1
 8012796:	e7c2      	b.n	801271e <_strtod_l+0x176>
 8012798:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801279a:	3001      	adds	r0, #1
 801279c:	1c5a      	adds	r2, r3, #1
 801279e:	921b      	str	r2, [sp, #108]	; 0x6c
 80127a0:	785b      	ldrb	r3, [r3, #1]
 80127a2:	2b30      	cmp	r3, #48	; 0x30
 80127a4:	d0f8      	beq.n	8012798 <_strtod_l+0x1f0>
 80127a6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80127aa:	2a08      	cmp	r2, #8
 80127ac:	f200 84dc 	bhi.w	8013168 <_strtod_l+0xbc0>
 80127b0:	9004      	str	r0, [sp, #16]
 80127b2:	2000      	movs	r0, #0
 80127b4:	4604      	mov	r4, r0
 80127b6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80127b8:	9208      	str	r2, [sp, #32]
 80127ba:	3b30      	subs	r3, #48	; 0x30
 80127bc:	f100 0201 	add.w	r2, r0, #1
 80127c0:	d013      	beq.n	80127ea <_strtod_l+0x242>
 80127c2:	9904      	ldr	r1, [sp, #16]
 80127c4:	1905      	adds	r5, r0, r4
 80127c6:	4411      	add	r1, r2
 80127c8:	9104      	str	r1, [sp, #16]
 80127ca:	4622      	mov	r2, r4
 80127cc:	210a      	movs	r1, #10
 80127ce:	42aa      	cmp	r2, r5
 80127d0:	d113      	bne.n	80127fa <_strtod_l+0x252>
 80127d2:	1822      	adds	r2, r4, r0
 80127d4:	2a08      	cmp	r2, #8
 80127d6:	f104 0401 	add.w	r4, r4, #1
 80127da:	4404      	add	r4, r0
 80127dc:	dc1b      	bgt.n	8012816 <_strtod_l+0x26e>
 80127de:	220a      	movs	r2, #10
 80127e0:	9906      	ldr	r1, [sp, #24]
 80127e2:	fb02 3301 	mla	r3, r2, r1, r3
 80127e6:	9306      	str	r3, [sp, #24]
 80127e8:	2200      	movs	r2, #0
 80127ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80127ec:	4610      	mov	r0, r2
 80127ee:	1c59      	adds	r1, r3, #1
 80127f0:	911b      	str	r1, [sp, #108]	; 0x6c
 80127f2:	785b      	ldrb	r3, [r3, #1]
 80127f4:	e7ca      	b.n	801278c <_strtod_l+0x1e4>
 80127f6:	4658      	mov	r0, fp
 80127f8:	e7d3      	b.n	80127a2 <_strtod_l+0x1fa>
 80127fa:	2a08      	cmp	r2, #8
 80127fc:	dc04      	bgt.n	8012808 <_strtod_l+0x260>
 80127fe:	9f06      	ldr	r7, [sp, #24]
 8012800:	434f      	muls	r7, r1
 8012802:	9706      	str	r7, [sp, #24]
 8012804:	3201      	adds	r2, #1
 8012806:	e7e2      	b.n	80127ce <_strtod_l+0x226>
 8012808:	1c57      	adds	r7, r2, #1
 801280a:	2f10      	cmp	r7, #16
 801280c:	bfde      	ittt	le
 801280e:	9f05      	ldrle	r7, [sp, #20]
 8012810:	434f      	mulle	r7, r1
 8012812:	9705      	strle	r7, [sp, #20]
 8012814:	e7f6      	b.n	8012804 <_strtod_l+0x25c>
 8012816:	2c10      	cmp	r4, #16
 8012818:	bfdf      	itttt	le
 801281a:	220a      	movle	r2, #10
 801281c:	9905      	ldrle	r1, [sp, #20]
 801281e:	fb02 3301 	mlale	r3, r2, r1, r3
 8012822:	9305      	strle	r3, [sp, #20]
 8012824:	e7e0      	b.n	80127e8 <_strtod_l+0x240>
 8012826:	2300      	movs	r3, #0
 8012828:	2201      	movs	r2, #1
 801282a:	9304      	str	r3, [sp, #16]
 801282c:	e77c      	b.n	8012728 <_strtod_l+0x180>
 801282e:	2700      	movs	r7, #0
 8012830:	1cb3      	adds	r3, r6, #2
 8012832:	931b      	str	r3, [sp, #108]	; 0x6c
 8012834:	78b3      	ldrb	r3, [r6, #2]
 8012836:	e784      	b.n	8012742 <_strtod_l+0x19a>
 8012838:	2701      	movs	r7, #1
 801283a:	e7f9      	b.n	8012830 <_strtod_l+0x288>
 801283c:	080160d0 	.word	0x080160d0
 8012840:	08015e80 	.word	0x08015e80
 8012844:	7ff00000 	.word	0x7ff00000
 8012848:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801284a:	1c59      	adds	r1, r3, #1
 801284c:	911b      	str	r1, [sp, #108]	; 0x6c
 801284e:	785b      	ldrb	r3, [r3, #1]
 8012850:	2b30      	cmp	r3, #48	; 0x30
 8012852:	d0f9      	beq.n	8012848 <_strtod_l+0x2a0>
 8012854:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8012858:	2908      	cmp	r1, #8
 801285a:	f63f af78 	bhi.w	801274e <_strtod_l+0x1a6>
 801285e:	f04f 0e0a 	mov.w	lr, #10
 8012862:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8012866:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012868:	9309      	str	r3, [sp, #36]	; 0x24
 801286a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801286c:	1c59      	adds	r1, r3, #1
 801286e:	911b      	str	r1, [sp, #108]	; 0x6c
 8012870:	785b      	ldrb	r3, [r3, #1]
 8012872:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8012876:	2d09      	cmp	r5, #9
 8012878:	d935      	bls.n	80128e6 <_strtod_l+0x33e>
 801287a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801287c:	1b49      	subs	r1, r1, r5
 801287e:	2908      	cmp	r1, #8
 8012880:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8012884:	dc02      	bgt.n	801288c <_strtod_l+0x2e4>
 8012886:	4565      	cmp	r5, ip
 8012888:	bfa8      	it	ge
 801288a:	4665      	movge	r5, ip
 801288c:	b107      	cbz	r7, 8012890 <_strtod_l+0x2e8>
 801288e:	426d      	negs	r5, r5
 8012890:	2c00      	cmp	r4, #0
 8012892:	d14c      	bne.n	801292e <_strtod_l+0x386>
 8012894:	9907      	ldr	r1, [sp, #28]
 8012896:	4301      	orrs	r1, r0
 8012898:	f47f aec7 	bne.w	801262a <_strtod_l+0x82>
 801289c:	2a00      	cmp	r2, #0
 801289e:	f47f aee0 	bne.w	8012662 <_strtod_l+0xba>
 80128a2:	2b69      	cmp	r3, #105	; 0x69
 80128a4:	d026      	beq.n	80128f4 <_strtod_l+0x34c>
 80128a6:	dc23      	bgt.n	80128f0 <_strtod_l+0x348>
 80128a8:	2b49      	cmp	r3, #73	; 0x49
 80128aa:	d023      	beq.n	80128f4 <_strtod_l+0x34c>
 80128ac:	2b4e      	cmp	r3, #78	; 0x4e
 80128ae:	f47f aed8 	bne.w	8012662 <_strtod_l+0xba>
 80128b2:	499c      	ldr	r1, [pc, #624]	; (8012b24 <_strtod_l+0x57c>)
 80128b4:	a81b      	add	r0, sp, #108	; 0x6c
 80128b6:	f001 ff11 	bl	80146dc <__match>
 80128ba:	2800      	cmp	r0, #0
 80128bc:	f43f aed1 	beq.w	8012662 <_strtod_l+0xba>
 80128c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80128c2:	781b      	ldrb	r3, [r3, #0]
 80128c4:	2b28      	cmp	r3, #40	; 0x28
 80128c6:	d12c      	bne.n	8012922 <_strtod_l+0x37a>
 80128c8:	4997      	ldr	r1, [pc, #604]	; (8012b28 <_strtod_l+0x580>)
 80128ca:	aa1e      	add	r2, sp, #120	; 0x78
 80128cc:	a81b      	add	r0, sp, #108	; 0x6c
 80128ce:	f001 ff19 	bl	8014704 <__hexnan>
 80128d2:	2805      	cmp	r0, #5
 80128d4:	d125      	bne.n	8012922 <_strtod_l+0x37a>
 80128d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80128d8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80128dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80128e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80128e4:	e6a1      	b.n	801262a <_strtod_l+0x82>
 80128e6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80128ea:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80128ee:	e7bc      	b.n	801286a <_strtod_l+0x2c2>
 80128f0:	2b6e      	cmp	r3, #110	; 0x6e
 80128f2:	e7dc      	b.n	80128ae <_strtod_l+0x306>
 80128f4:	498d      	ldr	r1, [pc, #564]	; (8012b2c <_strtod_l+0x584>)
 80128f6:	a81b      	add	r0, sp, #108	; 0x6c
 80128f8:	f001 fef0 	bl	80146dc <__match>
 80128fc:	2800      	cmp	r0, #0
 80128fe:	f43f aeb0 	beq.w	8012662 <_strtod_l+0xba>
 8012902:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012904:	498a      	ldr	r1, [pc, #552]	; (8012b30 <_strtod_l+0x588>)
 8012906:	3b01      	subs	r3, #1
 8012908:	a81b      	add	r0, sp, #108	; 0x6c
 801290a:	931b      	str	r3, [sp, #108]	; 0x6c
 801290c:	f001 fee6 	bl	80146dc <__match>
 8012910:	b910      	cbnz	r0, 8012918 <_strtod_l+0x370>
 8012912:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012914:	3301      	adds	r3, #1
 8012916:	931b      	str	r3, [sp, #108]	; 0x6c
 8012918:	f04f 0800 	mov.w	r8, #0
 801291c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8012b40 <_strtod_l+0x598>
 8012920:	e683      	b.n	801262a <_strtod_l+0x82>
 8012922:	4884      	ldr	r0, [pc, #528]	; (8012b34 <_strtod_l+0x58c>)
 8012924:	f002 fe00 	bl	8015528 <nan>
 8012928:	4680      	mov	r8, r0
 801292a:	4689      	mov	r9, r1
 801292c:	e67d      	b.n	801262a <_strtod_l+0x82>
 801292e:	9b04      	ldr	r3, [sp, #16]
 8012930:	f1bb 0f00 	cmp.w	fp, #0
 8012934:	bf08      	it	eq
 8012936:	46a3      	moveq	fp, r4
 8012938:	1aeb      	subs	r3, r5, r3
 801293a:	2c10      	cmp	r4, #16
 801293c:	9806      	ldr	r0, [sp, #24]
 801293e:	4626      	mov	r6, r4
 8012940:	9307      	str	r3, [sp, #28]
 8012942:	bfa8      	it	ge
 8012944:	2610      	movge	r6, #16
 8012946:	f7ed fd97 	bl	8000478 <__aeabi_ui2d>
 801294a:	2c09      	cmp	r4, #9
 801294c:	4680      	mov	r8, r0
 801294e:	4689      	mov	r9, r1
 8012950:	dd13      	ble.n	801297a <_strtod_l+0x3d2>
 8012952:	4b79      	ldr	r3, [pc, #484]	; (8012b38 <_strtod_l+0x590>)
 8012954:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012958:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801295c:	f7ed fe06 	bl	800056c <__aeabi_dmul>
 8012960:	4680      	mov	r8, r0
 8012962:	9805      	ldr	r0, [sp, #20]
 8012964:	4689      	mov	r9, r1
 8012966:	f7ed fd87 	bl	8000478 <__aeabi_ui2d>
 801296a:	4602      	mov	r2, r0
 801296c:	460b      	mov	r3, r1
 801296e:	4640      	mov	r0, r8
 8012970:	4649      	mov	r1, r9
 8012972:	f7ed fc45 	bl	8000200 <__adddf3>
 8012976:	4680      	mov	r8, r0
 8012978:	4689      	mov	r9, r1
 801297a:	2c0f      	cmp	r4, #15
 801297c:	dc36      	bgt.n	80129ec <_strtod_l+0x444>
 801297e:	9b07      	ldr	r3, [sp, #28]
 8012980:	2b00      	cmp	r3, #0
 8012982:	f43f ae52 	beq.w	801262a <_strtod_l+0x82>
 8012986:	dd22      	ble.n	80129ce <_strtod_l+0x426>
 8012988:	2b16      	cmp	r3, #22
 801298a:	dc09      	bgt.n	80129a0 <_strtod_l+0x3f8>
 801298c:	4c6a      	ldr	r4, [pc, #424]	; (8012b38 <_strtod_l+0x590>)
 801298e:	4642      	mov	r2, r8
 8012990:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8012994:	464b      	mov	r3, r9
 8012996:	e9d4 0100 	ldrd	r0, r1, [r4]
 801299a:	f7ed fde7 	bl	800056c <__aeabi_dmul>
 801299e:	e7c3      	b.n	8012928 <_strtod_l+0x380>
 80129a0:	9a07      	ldr	r2, [sp, #28]
 80129a2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80129a6:	4293      	cmp	r3, r2
 80129a8:	db20      	blt.n	80129ec <_strtod_l+0x444>
 80129aa:	4d63      	ldr	r5, [pc, #396]	; (8012b38 <_strtod_l+0x590>)
 80129ac:	f1c4 040f 	rsb	r4, r4, #15
 80129b0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80129b4:	4642      	mov	r2, r8
 80129b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80129ba:	464b      	mov	r3, r9
 80129bc:	f7ed fdd6 	bl	800056c <__aeabi_dmul>
 80129c0:	9b07      	ldr	r3, [sp, #28]
 80129c2:	1b1c      	subs	r4, r3, r4
 80129c4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80129c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80129cc:	e7e5      	b.n	801299a <_strtod_l+0x3f2>
 80129ce:	9b07      	ldr	r3, [sp, #28]
 80129d0:	3316      	adds	r3, #22
 80129d2:	db0b      	blt.n	80129ec <_strtod_l+0x444>
 80129d4:	9b04      	ldr	r3, [sp, #16]
 80129d6:	4a58      	ldr	r2, [pc, #352]	; (8012b38 <_strtod_l+0x590>)
 80129d8:	1b5d      	subs	r5, r3, r5
 80129da:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80129de:	4640      	mov	r0, r8
 80129e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80129e4:	4649      	mov	r1, r9
 80129e6:	f7ed feeb 	bl	80007c0 <__aeabi_ddiv>
 80129ea:	e79d      	b.n	8012928 <_strtod_l+0x380>
 80129ec:	9b07      	ldr	r3, [sp, #28]
 80129ee:	1ba6      	subs	r6, r4, r6
 80129f0:	441e      	add	r6, r3
 80129f2:	2e00      	cmp	r6, #0
 80129f4:	dd71      	ble.n	8012ada <_strtod_l+0x532>
 80129f6:	f016 030f 	ands.w	r3, r6, #15
 80129fa:	d00a      	beq.n	8012a12 <_strtod_l+0x46a>
 80129fc:	494e      	ldr	r1, [pc, #312]	; (8012b38 <_strtod_l+0x590>)
 80129fe:	4642      	mov	r2, r8
 8012a00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012a04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a08:	464b      	mov	r3, r9
 8012a0a:	f7ed fdaf 	bl	800056c <__aeabi_dmul>
 8012a0e:	4680      	mov	r8, r0
 8012a10:	4689      	mov	r9, r1
 8012a12:	f036 060f 	bics.w	r6, r6, #15
 8012a16:	d050      	beq.n	8012aba <_strtod_l+0x512>
 8012a18:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8012a1c:	dd27      	ble.n	8012a6e <_strtod_l+0x4c6>
 8012a1e:	f04f 0b00 	mov.w	fp, #0
 8012a22:	f8cd b010 	str.w	fp, [sp, #16]
 8012a26:	f8cd b020 	str.w	fp, [sp, #32]
 8012a2a:	f8cd b018 	str.w	fp, [sp, #24]
 8012a2e:	2322      	movs	r3, #34	; 0x22
 8012a30:	f04f 0800 	mov.w	r8, #0
 8012a34:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8012b40 <_strtod_l+0x598>
 8012a38:	f8ca 3000 	str.w	r3, [sl]
 8012a3c:	9b08      	ldr	r3, [sp, #32]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	f43f adf3 	beq.w	801262a <_strtod_l+0x82>
 8012a44:	4650      	mov	r0, sl
 8012a46:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012a48:	f001 ff7a 	bl	8014940 <_Bfree>
 8012a4c:	4650      	mov	r0, sl
 8012a4e:	9906      	ldr	r1, [sp, #24]
 8012a50:	f001 ff76 	bl	8014940 <_Bfree>
 8012a54:	4650      	mov	r0, sl
 8012a56:	9904      	ldr	r1, [sp, #16]
 8012a58:	f001 ff72 	bl	8014940 <_Bfree>
 8012a5c:	4650      	mov	r0, sl
 8012a5e:	9908      	ldr	r1, [sp, #32]
 8012a60:	f001 ff6e 	bl	8014940 <_Bfree>
 8012a64:	4659      	mov	r1, fp
 8012a66:	4650      	mov	r0, sl
 8012a68:	f001 ff6a 	bl	8014940 <_Bfree>
 8012a6c:	e5dd      	b.n	801262a <_strtod_l+0x82>
 8012a6e:	2300      	movs	r3, #0
 8012a70:	4640      	mov	r0, r8
 8012a72:	4649      	mov	r1, r9
 8012a74:	461f      	mov	r7, r3
 8012a76:	1136      	asrs	r6, r6, #4
 8012a78:	2e01      	cmp	r6, #1
 8012a7a:	dc21      	bgt.n	8012ac0 <_strtod_l+0x518>
 8012a7c:	b10b      	cbz	r3, 8012a82 <_strtod_l+0x4da>
 8012a7e:	4680      	mov	r8, r0
 8012a80:	4689      	mov	r9, r1
 8012a82:	4b2e      	ldr	r3, [pc, #184]	; (8012b3c <_strtod_l+0x594>)
 8012a84:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8012a88:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012a8c:	4642      	mov	r2, r8
 8012a8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012a92:	464b      	mov	r3, r9
 8012a94:	f7ed fd6a 	bl	800056c <__aeabi_dmul>
 8012a98:	4b29      	ldr	r3, [pc, #164]	; (8012b40 <_strtod_l+0x598>)
 8012a9a:	460a      	mov	r2, r1
 8012a9c:	400b      	ands	r3, r1
 8012a9e:	4929      	ldr	r1, [pc, #164]	; (8012b44 <_strtod_l+0x59c>)
 8012aa0:	4680      	mov	r8, r0
 8012aa2:	428b      	cmp	r3, r1
 8012aa4:	d8bb      	bhi.n	8012a1e <_strtod_l+0x476>
 8012aa6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012aaa:	428b      	cmp	r3, r1
 8012aac:	bf86      	itte	hi
 8012aae:	f04f 38ff 	movhi.w	r8, #4294967295
 8012ab2:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8012b48 <_strtod_l+0x5a0>
 8012ab6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8012aba:	2300      	movs	r3, #0
 8012abc:	9305      	str	r3, [sp, #20]
 8012abe:	e07e      	b.n	8012bbe <_strtod_l+0x616>
 8012ac0:	07f2      	lsls	r2, r6, #31
 8012ac2:	d507      	bpl.n	8012ad4 <_strtod_l+0x52c>
 8012ac4:	4b1d      	ldr	r3, [pc, #116]	; (8012b3c <_strtod_l+0x594>)
 8012ac6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ace:	f7ed fd4d 	bl	800056c <__aeabi_dmul>
 8012ad2:	2301      	movs	r3, #1
 8012ad4:	3701      	adds	r7, #1
 8012ad6:	1076      	asrs	r6, r6, #1
 8012ad8:	e7ce      	b.n	8012a78 <_strtod_l+0x4d0>
 8012ada:	d0ee      	beq.n	8012aba <_strtod_l+0x512>
 8012adc:	4276      	negs	r6, r6
 8012ade:	f016 020f 	ands.w	r2, r6, #15
 8012ae2:	d00a      	beq.n	8012afa <_strtod_l+0x552>
 8012ae4:	4b14      	ldr	r3, [pc, #80]	; (8012b38 <_strtod_l+0x590>)
 8012ae6:	4640      	mov	r0, r8
 8012ae8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012aec:	4649      	mov	r1, r9
 8012aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012af2:	f7ed fe65 	bl	80007c0 <__aeabi_ddiv>
 8012af6:	4680      	mov	r8, r0
 8012af8:	4689      	mov	r9, r1
 8012afa:	1136      	asrs	r6, r6, #4
 8012afc:	d0dd      	beq.n	8012aba <_strtod_l+0x512>
 8012afe:	2e1f      	cmp	r6, #31
 8012b00:	dd24      	ble.n	8012b4c <_strtod_l+0x5a4>
 8012b02:	f04f 0b00 	mov.w	fp, #0
 8012b06:	f8cd b010 	str.w	fp, [sp, #16]
 8012b0a:	f8cd b020 	str.w	fp, [sp, #32]
 8012b0e:	f8cd b018 	str.w	fp, [sp, #24]
 8012b12:	2322      	movs	r3, #34	; 0x22
 8012b14:	f04f 0800 	mov.w	r8, #0
 8012b18:	f04f 0900 	mov.w	r9, #0
 8012b1c:	f8ca 3000 	str.w	r3, [sl]
 8012b20:	e78c      	b.n	8012a3c <_strtod_l+0x494>
 8012b22:	bf00      	nop
 8012b24:	08015e51 	.word	0x08015e51
 8012b28:	08015e94 	.word	0x08015e94
 8012b2c:	08015e49 	.word	0x08015e49
 8012b30:	08015fd4 	.word	0x08015fd4
 8012b34:	08016290 	.word	0x08016290
 8012b38:	08016170 	.word	0x08016170
 8012b3c:	08016148 	.word	0x08016148
 8012b40:	7ff00000 	.word	0x7ff00000
 8012b44:	7ca00000 	.word	0x7ca00000
 8012b48:	7fefffff 	.word	0x7fefffff
 8012b4c:	f016 0310 	ands.w	r3, r6, #16
 8012b50:	bf18      	it	ne
 8012b52:	236a      	movne	r3, #106	; 0x6a
 8012b54:	4640      	mov	r0, r8
 8012b56:	9305      	str	r3, [sp, #20]
 8012b58:	4649      	mov	r1, r9
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	4fb2      	ldr	r7, [pc, #712]	; (8012e28 <_strtod_l+0x880>)
 8012b5e:	07f2      	lsls	r2, r6, #31
 8012b60:	d504      	bpl.n	8012b6c <_strtod_l+0x5c4>
 8012b62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012b66:	f7ed fd01 	bl	800056c <__aeabi_dmul>
 8012b6a:	2301      	movs	r3, #1
 8012b6c:	1076      	asrs	r6, r6, #1
 8012b6e:	f107 0708 	add.w	r7, r7, #8
 8012b72:	d1f4      	bne.n	8012b5e <_strtod_l+0x5b6>
 8012b74:	b10b      	cbz	r3, 8012b7a <_strtod_l+0x5d2>
 8012b76:	4680      	mov	r8, r0
 8012b78:	4689      	mov	r9, r1
 8012b7a:	9b05      	ldr	r3, [sp, #20]
 8012b7c:	b1bb      	cbz	r3, 8012bae <_strtod_l+0x606>
 8012b7e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8012b82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	4649      	mov	r1, r9
 8012b8a:	dd10      	ble.n	8012bae <_strtod_l+0x606>
 8012b8c:	2b1f      	cmp	r3, #31
 8012b8e:	f340 812b 	ble.w	8012de8 <_strtod_l+0x840>
 8012b92:	2b34      	cmp	r3, #52	; 0x34
 8012b94:	bfd8      	it	le
 8012b96:	f04f 32ff 	movle.w	r2, #4294967295
 8012b9a:	f04f 0800 	mov.w	r8, #0
 8012b9e:	bfcf      	iteee	gt
 8012ba0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8012ba4:	3b20      	suble	r3, #32
 8012ba6:	fa02 f303 	lslle.w	r3, r2, r3
 8012baa:	ea03 0901 	andle.w	r9, r3, r1
 8012bae:	2200      	movs	r2, #0
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	4640      	mov	r0, r8
 8012bb4:	4649      	mov	r1, r9
 8012bb6:	f7ed ff41 	bl	8000a3c <__aeabi_dcmpeq>
 8012bba:	2800      	cmp	r0, #0
 8012bbc:	d1a1      	bne.n	8012b02 <_strtod_l+0x55a>
 8012bbe:	9b06      	ldr	r3, [sp, #24]
 8012bc0:	465a      	mov	r2, fp
 8012bc2:	9300      	str	r3, [sp, #0]
 8012bc4:	4650      	mov	r0, sl
 8012bc6:	4623      	mov	r3, r4
 8012bc8:	9908      	ldr	r1, [sp, #32]
 8012bca:	f001 ff25 	bl	8014a18 <__s2b>
 8012bce:	9008      	str	r0, [sp, #32]
 8012bd0:	2800      	cmp	r0, #0
 8012bd2:	f43f af24 	beq.w	8012a1e <_strtod_l+0x476>
 8012bd6:	9b04      	ldr	r3, [sp, #16]
 8012bd8:	f04f 0b00 	mov.w	fp, #0
 8012bdc:	1b5d      	subs	r5, r3, r5
 8012bde:	9b07      	ldr	r3, [sp, #28]
 8012be0:	f8cd b010 	str.w	fp, [sp, #16]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	bfb4      	ite	lt
 8012be8:	462b      	movlt	r3, r5
 8012bea:	2300      	movge	r3, #0
 8012bec:	930e      	str	r3, [sp, #56]	; 0x38
 8012bee:	9b07      	ldr	r3, [sp, #28]
 8012bf0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012bf4:	9316      	str	r3, [sp, #88]	; 0x58
 8012bf6:	9b08      	ldr	r3, [sp, #32]
 8012bf8:	4650      	mov	r0, sl
 8012bfa:	6859      	ldr	r1, [r3, #4]
 8012bfc:	f001 fe60 	bl	80148c0 <_Balloc>
 8012c00:	9006      	str	r0, [sp, #24]
 8012c02:	2800      	cmp	r0, #0
 8012c04:	f43f af13 	beq.w	8012a2e <_strtod_l+0x486>
 8012c08:	9b08      	ldr	r3, [sp, #32]
 8012c0a:	300c      	adds	r0, #12
 8012c0c:	691a      	ldr	r2, [r3, #16]
 8012c0e:	f103 010c 	add.w	r1, r3, #12
 8012c12:	3202      	adds	r2, #2
 8012c14:	0092      	lsls	r2, r2, #2
 8012c16:	f7fe fc95 	bl	8011544 <memcpy>
 8012c1a:	ab1e      	add	r3, sp, #120	; 0x78
 8012c1c:	9301      	str	r3, [sp, #4]
 8012c1e:	ab1d      	add	r3, sp, #116	; 0x74
 8012c20:	9300      	str	r3, [sp, #0]
 8012c22:	4642      	mov	r2, r8
 8012c24:	464b      	mov	r3, r9
 8012c26:	4650      	mov	r0, sl
 8012c28:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8012c2c:	f002 fa32 	bl	8015094 <__d2b>
 8012c30:	901c      	str	r0, [sp, #112]	; 0x70
 8012c32:	2800      	cmp	r0, #0
 8012c34:	f43f aefb 	beq.w	8012a2e <_strtod_l+0x486>
 8012c38:	2101      	movs	r1, #1
 8012c3a:	4650      	mov	r0, sl
 8012c3c:	f001 ff84 	bl	8014b48 <__i2b>
 8012c40:	4603      	mov	r3, r0
 8012c42:	9004      	str	r0, [sp, #16]
 8012c44:	2800      	cmp	r0, #0
 8012c46:	f43f aef2 	beq.w	8012a2e <_strtod_l+0x486>
 8012c4a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8012c4c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012c4e:	2d00      	cmp	r5, #0
 8012c50:	bfab      	itete	ge
 8012c52:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8012c54:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8012c56:	18ee      	addge	r6, r5, r3
 8012c58:	1b5c      	sublt	r4, r3, r5
 8012c5a:	9b05      	ldr	r3, [sp, #20]
 8012c5c:	bfa8      	it	ge
 8012c5e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8012c60:	eba5 0503 	sub.w	r5, r5, r3
 8012c64:	4415      	add	r5, r2
 8012c66:	4b71      	ldr	r3, [pc, #452]	; (8012e2c <_strtod_l+0x884>)
 8012c68:	f105 35ff 	add.w	r5, r5, #4294967295
 8012c6c:	bfb8      	it	lt
 8012c6e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8012c70:	429d      	cmp	r5, r3
 8012c72:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012c76:	f280 80c9 	bge.w	8012e0c <_strtod_l+0x864>
 8012c7a:	1b5b      	subs	r3, r3, r5
 8012c7c:	2b1f      	cmp	r3, #31
 8012c7e:	f04f 0701 	mov.w	r7, #1
 8012c82:	eba2 0203 	sub.w	r2, r2, r3
 8012c86:	f300 80b6 	bgt.w	8012df6 <_strtod_l+0x84e>
 8012c8a:	2500      	movs	r5, #0
 8012c8c:	fa07 f303 	lsl.w	r3, r7, r3
 8012c90:	930f      	str	r3, [sp, #60]	; 0x3c
 8012c92:	18b7      	adds	r7, r6, r2
 8012c94:	9b05      	ldr	r3, [sp, #20]
 8012c96:	42be      	cmp	r6, r7
 8012c98:	4414      	add	r4, r2
 8012c9a:	441c      	add	r4, r3
 8012c9c:	4633      	mov	r3, r6
 8012c9e:	bfa8      	it	ge
 8012ca0:	463b      	movge	r3, r7
 8012ca2:	42a3      	cmp	r3, r4
 8012ca4:	bfa8      	it	ge
 8012ca6:	4623      	movge	r3, r4
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	bfc2      	ittt	gt
 8012cac:	1aff      	subgt	r7, r7, r3
 8012cae:	1ae4      	subgt	r4, r4, r3
 8012cb0:	1af6      	subgt	r6, r6, r3
 8012cb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	dd17      	ble.n	8012ce8 <_strtod_l+0x740>
 8012cb8:	461a      	mov	r2, r3
 8012cba:	4650      	mov	r0, sl
 8012cbc:	9904      	ldr	r1, [sp, #16]
 8012cbe:	f001 fffd 	bl	8014cbc <__pow5mult>
 8012cc2:	9004      	str	r0, [sp, #16]
 8012cc4:	2800      	cmp	r0, #0
 8012cc6:	f43f aeb2 	beq.w	8012a2e <_strtod_l+0x486>
 8012cca:	4601      	mov	r1, r0
 8012ccc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012cce:	4650      	mov	r0, sl
 8012cd0:	f001 ff50 	bl	8014b74 <__multiply>
 8012cd4:	9009      	str	r0, [sp, #36]	; 0x24
 8012cd6:	2800      	cmp	r0, #0
 8012cd8:	f43f aea9 	beq.w	8012a2e <_strtod_l+0x486>
 8012cdc:	4650      	mov	r0, sl
 8012cde:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012ce0:	f001 fe2e 	bl	8014940 <_Bfree>
 8012ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ce6:	931c      	str	r3, [sp, #112]	; 0x70
 8012ce8:	2f00      	cmp	r7, #0
 8012cea:	f300 8093 	bgt.w	8012e14 <_strtod_l+0x86c>
 8012cee:	9b07      	ldr	r3, [sp, #28]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	dd08      	ble.n	8012d06 <_strtod_l+0x75e>
 8012cf4:	4650      	mov	r0, sl
 8012cf6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012cf8:	9906      	ldr	r1, [sp, #24]
 8012cfa:	f001 ffdf 	bl	8014cbc <__pow5mult>
 8012cfe:	9006      	str	r0, [sp, #24]
 8012d00:	2800      	cmp	r0, #0
 8012d02:	f43f ae94 	beq.w	8012a2e <_strtod_l+0x486>
 8012d06:	2c00      	cmp	r4, #0
 8012d08:	dd08      	ble.n	8012d1c <_strtod_l+0x774>
 8012d0a:	4622      	mov	r2, r4
 8012d0c:	4650      	mov	r0, sl
 8012d0e:	9906      	ldr	r1, [sp, #24]
 8012d10:	f002 f82e 	bl	8014d70 <__lshift>
 8012d14:	9006      	str	r0, [sp, #24]
 8012d16:	2800      	cmp	r0, #0
 8012d18:	f43f ae89 	beq.w	8012a2e <_strtod_l+0x486>
 8012d1c:	2e00      	cmp	r6, #0
 8012d1e:	dd08      	ble.n	8012d32 <_strtod_l+0x78a>
 8012d20:	4632      	mov	r2, r6
 8012d22:	4650      	mov	r0, sl
 8012d24:	9904      	ldr	r1, [sp, #16]
 8012d26:	f002 f823 	bl	8014d70 <__lshift>
 8012d2a:	9004      	str	r0, [sp, #16]
 8012d2c:	2800      	cmp	r0, #0
 8012d2e:	f43f ae7e 	beq.w	8012a2e <_strtod_l+0x486>
 8012d32:	4650      	mov	r0, sl
 8012d34:	9a06      	ldr	r2, [sp, #24]
 8012d36:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012d38:	f002 f8a2 	bl	8014e80 <__mdiff>
 8012d3c:	4683      	mov	fp, r0
 8012d3e:	2800      	cmp	r0, #0
 8012d40:	f43f ae75 	beq.w	8012a2e <_strtod_l+0x486>
 8012d44:	2400      	movs	r4, #0
 8012d46:	68c3      	ldr	r3, [r0, #12]
 8012d48:	9904      	ldr	r1, [sp, #16]
 8012d4a:	60c4      	str	r4, [r0, #12]
 8012d4c:	930d      	str	r3, [sp, #52]	; 0x34
 8012d4e:	f002 f87b 	bl	8014e48 <__mcmp>
 8012d52:	42a0      	cmp	r0, r4
 8012d54:	da70      	bge.n	8012e38 <_strtod_l+0x890>
 8012d56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012d58:	ea53 0308 	orrs.w	r3, r3, r8
 8012d5c:	f040 8096 	bne.w	8012e8c <_strtod_l+0x8e4>
 8012d60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	f040 8091 	bne.w	8012e8c <_strtod_l+0x8e4>
 8012d6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012d6e:	0d1b      	lsrs	r3, r3, #20
 8012d70:	051b      	lsls	r3, r3, #20
 8012d72:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012d76:	f240 8089 	bls.w	8012e8c <_strtod_l+0x8e4>
 8012d7a:	f8db 3014 	ldr.w	r3, [fp, #20]
 8012d7e:	b923      	cbnz	r3, 8012d8a <_strtod_l+0x7e2>
 8012d80:	f8db 3010 	ldr.w	r3, [fp, #16]
 8012d84:	2b01      	cmp	r3, #1
 8012d86:	f340 8081 	ble.w	8012e8c <_strtod_l+0x8e4>
 8012d8a:	4659      	mov	r1, fp
 8012d8c:	2201      	movs	r2, #1
 8012d8e:	4650      	mov	r0, sl
 8012d90:	f001 ffee 	bl	8014d70 <__lshift>
 8012d94:	9904      	ldr	r1, [sp, #16]
 8012d96:	4683      	mov	fp, r0
 8012d98:	f002 f856 	bl	8014e48 <__mcmp>
 8012d9c:	2800      	cmp	r0, #0
 8012d9e:	dd75      	ble.n	8012e8c <_strtod_l+0x8e4>
 8012da0:	9905      	ldr	r1, [sp, #20]
 8012da2:	464b      	mov	r3, r9
 8012da4:	4a22      	ldr	r2, [pc, #136]	; (8012e30 <_strtod_l+0x888>)
 8012da6:	2900      	cmp	r1, #0
 8012da8:	f000 8091 	beq.w	8012ece <_strtod_l+0x926>
 8012dac:	ea02 0109 	and.w	r1, r2, r9
 8012db0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012db4:	f300 808b 	bgt.w	8012ece <_strtod_l+0x926>
 8012db8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012dbc:	f77f aea9 	ble.w	8012b12 <_strtod_l+0x56a>
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	4a1c      	ldr	r2, [pc, #112]	; (8012e34 <_strtod_l+0x88c>)
 8012dc4:	4640      	mov	r0, r8
 8012dc6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8012dca:	4649      	mov	r1, r9
 8012dcc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012dd0:	f7ed fbcc 	bl	800056c <__aeabi_dmul>
 8012dd4:	460b      	mov	r3, r1
 8012dd6:	4303      	orrs	r3, r0
 8012dd8:	bf08      	it	eq
 8012dda:	2322      	moveq	r3, #34	; 0x22
 8012ddc:	4680      	mov	r8, r0
 8012dde:	4689      	mov	r9, r1
 8012de0:	bf08      	it	eq
 8012de2:	f8ca 3000 	streq.w	r3, [sl]
 8012de6:	e62d      	b.n	8012a44 <_strtod_l+0x49c>
 8012de8:	f04f 32ff 	mov.w	r2, #4294967295
 8012dec:	fa02 f303 	lsl.w	r3, r2, r3
 8012df0:	ea03 0808 	and.w	r8, r3, r8
 8012df4:	e6db      	b.n	8012bae <_strtod_l+0x606>
 8012df6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8012dfa:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8012dfe:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8012e02:	35e2      	adds	r5, #226	; 0xe2
 8012e04:	fa07 f505 	lsl.w	r5, r7, r5
 8012e08:	970f      	str	r7, [sp, #60]	; 0x3c
 8012e0a:	e742      	b.n	8012c92 <_strtod_l+0x6ea>
 8012e0c:	2301      	movs	r3, #1
 8012e0e:	2500      	movs	r5, #0
 8012e10:	930f      	str	r3, [sp, #60]	; 0x3c
 8012e12:	e73e      	b.n	8012c92 <_strtod_l+0x6ea>
 8012e14:	463a      	mov	r2, r7
 8012e16:	4650      	mov	r0, sl
 8012e18:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012e1a:	f001 ffa9 	bl	8014d70 <__lshift>
 8012e1e:	901c      	str	r0, [sp, #112]	; 0x70
 8012e20:	2800      	cmp	r0, #0
 8012e22:	f47f af64 	bne.w	8012cee <_strtod_l+0x746>
 8012e26:	e602      	b.n	8012a2e <_strtod_l+0x486>
 8012e28:	08015ea8 	.word	0x08015ea8
 8012e2c:	fffffc02 	.word	0xfffffc02
 8012e30:	7ff00000 	.word	0x7ff00000
 8012e34:	39500000 	.word	0x39500000
 8012e38:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012e3c:	d166      	bne.n	8012f0c <_strtod_l+0x964>
 8012e3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012e40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012e44:	b35a      	cbz	r2, 8012e9e <_strtod_l+0x8f6>
 8012e46:	4a9c      	ldr	r2, [pc, #624]	; (80130b8 <_strtod_l+0xb10>)
 8012e48:	4293      	cmp	r3, r2
 8012e4a:	d12c      	bne.n	8012ea6 <_strtod_l+0x8fe>
 8012e4c:	9b05      	ldr	r3, [sp, #20]
 8012e4e:	4640      	mov	r0, r8
 8012e50:	b303      	cbz	r3, 8012e94 <_strtod_l+0x8ec>
 8012e52:	464b      	mov	r3, r9
 8012e54:	4a99      	ldr	r2, [pc, #612]	; (80130bc <_strtod_l+0xb14>)
 8012e56:	f04f 31ff 	mov.w	r1, #4294967295
 8012e5a:	401a      	ands	r2, r3
 8012e5c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8012e60:	d81b      	bhi.n	8012e9a <_strtod_l+0x8f2>
 8012e62:	0d12      	lsrs	r2, r2, #20
 8012e64:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012e68:	fa01 f303 	lsl.w	r3, r1, r3
 8012e6c:	4298      	cmp	r0, r3
 8012e6e:	d11a      	bne.n	8012ea6 <_strtod_l+0x8fe>
 8012e70:	4b93      	ldr	r3, [pc, #588]	; (80130c0 <_strtod_l+0xb18>)
 8012e72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012e74:	429a      	cmp	r2, r3
 8012e76:	d102      	bne.n	8012e7e <_strtod_l+0x8d6>
 8012e78:	3001      	adds	r0, #1
 8012e7a:	f43f add8 	beq.w	8012a2e <_strtod_l+0x486>
 8012e7e:	f04f 0800 	mov.w	r8, #0
 8012e82:	4b8e      	ldr	r3, [pc, #568]	; (80130bc <_strtod_l+0xb14>)
 8012e84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012e86:	401a      	ands	r2, r3
 8012e88:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8012e8c:	9b05      	ldr	r3, [sp, #20]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d196      	bne.n	8012dc0 <_strtod_l+0x818>
 8012e92:	e5d7      	b.n	8012a44 <_strtod_l+0x49c>
 8012e94:	f04f 33ff 	mov.w	r3, #4294967295
 8012e98:	e7e8      	b.n	8012e6c <_strtod_l+0x8c4>
 8012e9a:	460b      	mov	r3, r1
 8012e9c:	e7e6      	b.n	8012e6c <_strtod_l+0x8c4>
 8012e9e:	ea53 0308 	orrs.w	r3, r3, r8
 8012ea2:	f43f af7d 	beq.w	8012da0 <_strtod_l+0x7f8>
 8012ea6:	b1e5      	cbz	r5, 8012ee2 <_strtod_l+0x93a>
 8012ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012eaa:	421d      	tst	r5, r3
 8012eac:	d0ee      	beq.n	8012e8c <_strtod_l+0x8e4>
 8012eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012eb0:	4640      	mov	r0, r8
 8012eb2:	4649      	mov	r1, r9
 8012eb4:	9a05      	ldr	r2, [sp, #20]
 8012eb6:	b1c3      	cbz	r3, 8012eea <_strtod_l+0x942>
 8012eb8:	f7ff fb53 	bl	8012562 <sulp>
 8012ebc:	4602      	mov	r2, r0
 8012ebe:	460b      	mov	r3, r1
 8012ec0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012ec4:	f7ed f99c 	bl	8000200 <__adddf3>
 8012ec8:	4680      	mov	r8, r0
 8012eca:	4689      	mov	r9, r1
 8012ecc:	e7de      	b.n	8012e8c <_strtod_l+0x8e4>
 8012ece:	4013      	ands	r3, r2
 8012ed0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012ed4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8012ed8:	f04f 38ff 	mov.w	r8, #4294967295
 8012edc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8012ee0:	e7d4      	b.n	8012e8c <_strtod_l+0x8e4>
 8012ee2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012ee4:	ea13 0f08 	tst.w	r3, r8
 8012ee8:	e7e0      	b.n	8012eac <_strtod_l+0x904>
 8012eea:	f7ff fb3a 	bl	8012562 <sulp>
 8012eee:	4602      	mov	r2, r0
 8012ef0:	460b      	mov	r3, r1
 8012ef2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012ef6:	f7ed f981 	bl	80001fc <__aeabi_dsub>
 8012efa:	2200      	movs	r2, #0
 8012efc:	2300      	movs	r3, #0
 8012efe:	4680      	mov	r8, r0
 8012f00:	4689      	mov	r9, r1
 8012f02:	f7ed fd9b 	bl	8000a3c <__aeabi_dcmpeq>
 8012f06:	2800      	cmp	r0, #0
 8012f08:	d0c0      	beq.n	8012e8c <_strtod_l+0x8e4>
 8012f0a:	e602      	b.n	8012b12 <_strtod_l+0x56a>
 8012f0c:	4658      	mov	r0, fp
 8012f0e:	9904      	ldr	r1, [sp, #16]
 8012f10:	f002 f91c 	bl	801514c <__ratio>
 8012f14:	2200      	movs	r2, #0
 8012f16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012f1a:	4606      	mov	r6, r0
 8012f1c:	460f      	mov	r7, r1
 8012f1e:	f7ed fda1 	bl	8000a64 <__aeabi_dcmple>
 8012f22:	2800      	cmp	r0, #0
 8012f24:	d075      	beq.n	8013012 <_strtod_l+0xa6a>
 8012f26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d047      	beq.n	8012fbc <_strtod_l+0xa14>
 8012f2c:	2600      	movs	r6, #0
 8012f2e:	4f65      	ldr	r7, [pc, #404]	; (80130c4 <_strtod_l+0xb1c>)
 8012f30:	4d64      	ldr	r5, [pc, #400]	; (80130c4 <_strtod_l+0xb1c>)
 8012f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012f38:	0d1b      	lsrs	r3, r3, #20
 8012f3a:	051b      	lsls	r3, r3, #20
 8012f3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8012f3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012f40:	4b61      	ldr	r3, [pc, #388]	; (80130c8 <_strtod_l+0xb20>)
 8012f42:	429a      	cmp	r2, r3
 8012f44:	f040 80c8 	bne.w	80130d8 <_strtod_l+0xb30>
 8012f48:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012f4c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8012f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f52:	4640      	mov	r0, r8
 8012f54:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8012f58:	4649      	mov	r1, r9
 8012f5a:	f002 f821 	bl	8014fa0 <__ulp>
 8012f5e:	4602      	mov	r2, r0
 8012f60:	460b      	mov	r3, r1
 8012f62:	4630      	mov	r0, r6
 8012f64:	4639      	mov	r1, r7
 8012f66:	f7ed fb01 	bl	800056c <__aeabi_dmul>
 8012f6a:	4642      	mov	r2, r8
 8012f6c:	464b      	mov	r3, r9
 8012f6e:	f7ed f947 	bl	8000200 <__adddf3>
 8012f72:	460b      	mov	r3, r1
 8012f74:	4951      	ldr	r1, [pc, #324]	; (80130bc <_strtod_l+0xb14>)
 8012f76:	4a55      	ldr	r2, [pc, #340]	; (80130cc <_strtod_l+0xb24>)
 8012f78:	4019      	ands	r1, r3
 8012f7a:	4291      	cmp	r1, r2
 8012f7c:	4680      	mov	r8, r0
 8012f7e:	d95e      	bls.n	801303e <_strtod_l+0xa96>
 8012f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f82:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012f86:	4293      	cmp	r3, r2
 8012f88:	d103      	bne.n	8012f92 <_strtod_l+0x9ea>
 8012f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f8c:	3301      	adds	r3, #1
 8012f8e:	f43f ad4e 	beq.w	8012a2e <_strtod_l+0x486>
 8012f92:	f04f 38ff 	mov.w	r8, #4294967295
 8012f96:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80130c0 <_strtod_l+0xb18>
 8012f9a:	4650      	mov	r0, sl
 8012f9c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012f9e:	f001 fccf 	bl	8014940 <_Bfree>
 8012fa2:	4650      	mov	r0, sl
 8012fa4:	9906      	ldr	r1, [sp, #24]
 8012fa6:	f001 fccb 	bl	8014940 <_Bfree>
 8012faa:	4650      	mov	r0, sl
 8012fac:	9904      	ldr	r1, [sp, #16]
 8012fae:	f001 fcc7 	bl	8014940 <_Bfree>
 8012fb2:	4659      	mov	r1, fp
 8012fb4:	4650      	mov	r0, sl
 8012fb6:	f001 fcc3 	bl	8014940 <_Bfree>
 8012fba:	e61c      	b.n	8012bf6 <_strtod_l+0x64e>
 8012fbc:	f1b8 0f00 	cmp.w	r8, #0
 8012fc0:	d119      	bne.n	8012ff6 <_strtod_l+0xa4e>
 8012fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012fc8:	b9e3      	cbnz	r3, 8013004 <_strtod_l+0xa5c>
 8012fca:	2200      	movs	r2, #0
 8012fcc:	4630      	mov	r0, r6
 8012fce:	4639      	mov	r1, r7
 8012fd0:	4b3c      	ldr	r3, [pc, #240]	; (80130c4 <_strtod_l+0xb1c>)
 8012fd2:	f7ed fd3d 	bl	8000a50 <__aeabi_dcmplt>
 8012fd6:	b9c8      	cbnz	r0, 801300c <_strtod_l+0xa64>
 8012fd8:	2200      	movs	r2, #0
 8012fda:	4630      	mov	r0, r6
 8012fdc:	4639      	mov	r1, r7
 8012fde:	4b3c      	ldr	r3, [pc, #240]	; (80130d0 <_strtod_l+0xb28>)
 8012fe0:	f7ed fac4 	bl	800056c <__aeabi_dmul>
 8012fe4:	4604      	mov	r4, r0
 8012fe6:	460d      	mov	r5, r1
 8012fe8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8012fec:	9418      	str	r4, [sp, #96]	; 0x60
 8012fee:	9319      	str	r3, [sp, #100]	; 0x64
 8012ff0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8012ff4:	e79d      	b.n	8012f32 <_strtod_l+0x98a>
 8012ff6:	f1b8 0f01 	cmp.w	r8, #1
 8012ffa:	d103      	bne.n	8013004 <_strtod_l+0xa5c>
 8012ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	f43f ad87 	beq.w	8012b12 <_strtod_l+0x56a>
 8013004:	2600      	movs	r6, #0
 8013006:	2400      	movs	r4, #0
 8013008:	4f32      	ldr	r7, [pc, #200]	; (80130d4 <_strtod_l+0xb2c>)
 801300a:	e791      	b.n	8012f30 <_strtod_l+0x988>
 801300c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801300e:	4d30      	ldr	r5, [pc, #192]	; (80130d0 <_strtod_l+0xb28>)
 8013010:	e7ea      	b.n	8012fe8 <_strtod_l+0xa40>
 8013012:	4b2f      	ldr	r3, [pc, #188]	; (80130d0 <_strtod_l+0xb28>)
 8013014:	2200      	movs	r2, #0
 8013016:	4630      	mov	r0, r6
 8013018:	4639      	mov	r1, r7
 801301a:	f7ed faa7 	bl	800056c <__aeabi_dmul>
 801301e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013020:	4604      	mov	r4, r0
 8013022:	460d      	mov	r5, r1
 8013024:	b933      	cbnz	r3, 8013034 <_strtod_l+0xa8c>
 8013026:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801302a:	9010      	str	r0, [sp, #64]	; 0x40
 801302c:	9311      	str	r3, [sp, #68]	; 0x44
 801302e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8013032:	e77e      	b.n	8012f32 <_strtod_l+0x98a>
 8013034:	4602      	mov	r2, r0
 8013036:	460b      	mov	r3, r1
 8013038:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801303c:	e7f7      	b.n	801302e <_strtod_l+0xa86>
 801303e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8013042:	9b05      	ldr	r3, [sp, #20]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d1a8      	bne.n	8012f9a <_strtod_l+0x9f2>
 8013048:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801304c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801304e:	0d1b      	lsrs	r3, r3, #20
 8013050:	051b      	lsls	r3, r3, #20
 8013052:	429a      	cmp	r2, r3
 8013054:	d1a1      	bne.n	8012f9a <_strtod_l+0x9f2>
 8013056:	4620      	mov	r0, r4
 8013058:	4629      	mov	r1, r5
 801305a:	f7ee f8db 	bl	8001214 <__aeabi_d2lz>
 801305e:	f7ed fa57 	bl	8000510 <__aeabi_l2d>
 8013062:	4602      	mov	r2, r0
 8013064:	460b      	mov	r3, r1
 8013066:	4620      	mov	r0, r4
 8013068:	4629      	mov	r1, r5
 801306a:	f7ed f8c7 	bl	80001fc <__aeabi_dsub>
 801306e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013070:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013074:	ea43 0308 	orr.w	r3, r3, r8
 8013078:	4313      	orrs	r3, r2
 801307a:	4604      	mov	r4, r0
 801307c:	460d      	mov	r5, r1
 801307e:	d066      	beq.n	801314e <_strtod_l+0xba6>
 8013080:	a309      	add	r3, pc, #36	; (adr r3, 80130a8 <_strtod_l+0xb00>)
 8013082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013086:	f7ed fce3 	bl	8000a50 <__aeabi_dcmplt>
 801308a:	2800      	cmp	r0, #0
 801308c:	f47f acda 	bne.w	8012a44 <_strtod_l+0x49c>
 8013090:	a307      	add	r3, pc, #28	; (adr r3, 80130b0 <_strtod_l+0xb08>)
 8013092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013096:	4620      	mov	r0, r4
 8013098:	4629      	mov	r1, r5
 801309a:	f7ed fcf7 	bl	8000a8c <__aeabi_dcmpgt>
 801309e:	2800      	cmp	r0, #0
 80130a0:	f43f af7b 	beq.w	8012f9a <_strtod_l+0x9f2>
 80130a4:	e4ce      	b.n	8012a44 <_strtod_l+0x49c>
 80130a6:	bf00      	nop
 80130a8:	94a03595 	.word	0x94a03595
 80130ac:	3fdfffff 	.word	0x3fdfffff
 80130b0:	35afe535 	.word	0x35afe535
 80130b4:	3fe00000 	.word	0x3fe00000
 80130b8:	000fffff 	.word	0x000fffff
 80130bc:	7ff00000 	.word	0x7ff00000
 80130c0:	7fefffff 	.word	0x7fefffff
 80130c4:	3ff00000 	.word	0x3ff00000
 80130c8:	7fe00000 	.word	0x7fe00000
 80130cc:	7c9fffff 	.word	0x7c9fffff
 80130d0:	3fe00000 	.word	0x3fe00000
 80130d4:	bff00000 	.word	0xbff00000
 80130d8:	9b05      	ldr	r3, [sp, #20]
 80130da:	b313      	cbz	r3, 8013122 <_strtod_l+0xb7a>
 80130dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80130de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80130e2:	d81e      	bhi.n	8013122 <_strtod_l+0xb7a>
 80130e4:	a326      	add	r3, pc, #152	; (adr r3, 8013180 <_strtod_l+0xbd8>)
 80130e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ea:	4620      	mov	r0, r4
 80130ec:	4629      	mov	r1, r5
 80130ee:	f7ed fcb9 	bl	8000a64 <__aeabi_dcmple>
 80130f2:	b190      	cbz	r0, 801311a <_strtod_l+0xb72>
 80130f4:	4629      	mov	r1, r5
 80130f6:	4620      	mov	r0, r4
 80130f8:	f7ed fd10 	bl	8000b1c <__aeabi_d2uiz>
 80130fc:	2801      	cmp	r0, #1
 80130fe:	bf38      	it	cc
 8013100:	2001      	movcc	r0, #1
 8013102:	f7ed f9b9 	bl	8000478 <__aeabi_ui2d>
 8013106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013108:	4604      	mov	r4, r0
 801310a:	460d      	mov	r5, r1
 801310c:	b9d3      	cbnz	r3, 8013144 <_strtod_l+0xb9c>
 801310e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013112:	9012      	str	r0, [sp, #72]	; 0x48
 8013114:	9313      	str	r3, [sp, #76]	; 0x4c
 8013116:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 801311a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801311c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8013120:	1a9f      	subs	r7, r3, r2
 8013122:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013126:	f001 ff3b 	bl	8014fa0 <__ulp>
 801312a:	4602      	mov	r2, r0
 801312c:	460b      	mov	r3, r1
 801312e:	4630      	mov	r0, r6
 8013130:	4639      	mov	r1, r7
 8013132:	f7ed fa1b 	bl	800056c <__aeabi_dmul>
 8013136:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801313a:	f7ed f861 	bl	8000200 <__adddf3>
 801313e:	4680      	mov	r8, r0
 8013140:	4689      	mov	r9, r1
 8013142:	e77e      	b.n	8013042 <_strtod_l+0xa9a>
 8013144:	4602      	mov	r2, r0
 8013146:	460b      	mov	r3, r1
 8013148:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 801314c:	e7e3      	b.n	8013116 <_strtod_l+0xb6e>
 801314e:	a30e      	add	r3, pc, #56	; (adr r3, 8013188 <_strtod_l+0xbe0>)
 8013150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013154:	f7ed fc7c 	bl	8000a50 <__aeabi_dcmplt>
 8013158:	e7a1      	b.n	801309e <_strtod_l+0xaf6>
 801315a:	2300      	movs	r3, #0
 801315c:	930c      	str	r3, [sp, #48]	; 0x30
 801315e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013160:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013162:	6013      	str	r3, [r2, #0]
 8013164:	f7ff ba65 	b.w	8012632 <_strtod_l+0x8a>
 8013168:	2b65      	cmp	r3, #101	; 0x65
 801316a:	f43f ab5c 	beq.w	8012826 <_strtod_l+0x27e>
 801316e:	2b45      	cmp	r3, #69	; 0x45
 8013170:	f43f ab59 	beq.w	8012826 <_strtod_l+0x27e>
 8013174:	2201      	movs	r2, #1
 8013176:	f7ff bb8d 	b.w	8012894 <_strtod_l+0x2ec>
 801317a:	bf00      	nop
 801317c:	f3af 8000 	nop.w
 8013180:	ffc00000 	.word	0xffc00000
 8013184:	41dfffff 	.word	0x41dfffff
 8013188:	94a03595 	.word	0x94a03595
 801318c:	3fcfffff 	.word	0x3fcfffff

08013190 <_strtod_r>:
 8013190:	4b01      	ldr	r3, [pc, #4]	; (8013198 <_strtod_r+0x8>)
 8013192:	f7ff ba09 	b.w	80125a8 <_strtod_l>
 8013196:	bf00      	nop
 8013198:	200000c4 	.word	0x200000c4

0801319c <_strtol_l.isra.0>:
 801319c:	2b01      	cmp	r3, #1
 801319e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131a2:	4686      	mov	lr, r0
 80131a4:	d001      	beq.n	80131aa <_strtol_l.isra.0+0xe>
 80131a6:	2b24      	cmp	r3, #36	; 0x24
 80131a8:	d906      	bls.n	80131b8 <_strtol_l.isra.0+0x1c>
 80131aa:	f7fe f897 	bl	80112dc <__errno>
 80131ae:	2316      	movs	r3, #22
 80131b0:	6003      	str	r3, [r0, #0]
 80131b2:	2000      	movs	r0, #0
 80131b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131b8:	468c      	mov	ip, r1
 80131ba:	4e3a      	ldr	r6, [pc, #232]	; (80132a4 <_strtol_l.isra.0+0x108>)
 80131bc:	4660      	mov	r0, ip
 80131be:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80131c2:	5da5      	ldrb	r5, [r4, r6]
 80131c4:	f015 0508 	ands.w	r5, r5, #8
 80131c8:	d1f8      	bne.n	80131bc <_strtol_l.isra.0+0x20>
 80131ca:	2c2d      	cmp	r4, #45	; 0x2d
 80131cc:	d133      	bne.n	8013236 <_strtol_l.isra.0+0x9a>
 80131ce:	f04f 0801 	mov.w	r8, #1
 80131d2:	f89c 4000 	ldrb.w	r4, [ip]
 80131d6:	f100 0c02 	add.w	ip, r0, #2
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d05d      	beq.n	801329a <_strtol_l.isra.0+0xfe>
 80131de:	2b10      	cmp	r3, #16
 80131e0:	d10c      	bne.n	80131fc <_strtol_l.isra.0+0x60>
 80131e2:	2c30      	cmp	r4, #48	; 0x30
 80131e4:	d10a      	bne.n	80131fc <_strtol_l.isra.0+0x60>
 80131e6:	f89c 0000 	ldrb.w	r0, [ip]
 80131ea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80131ee:	2858      	cmp	r0, #88	; 0x58
 80131f0:	d14e      	bne.n	8013290 <_strtol_l.isra.0+0xf4>
 80131f2:	2310      	movs	r3, #16
 80131f4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80131f8:	f10c 0c02 	add.w	ip, ip, #2
 80131fc:	2500      	movs	r5, #0
 80131fe:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8013202:	3f01      	subs	r7, #1
 8013204:	fbb7 f9f3 	udiv	r9, r7, r3
 8013208:	4628      	mov	r0, r5
 801320a:	fb03 7a19 	mls	sl, r3, r9, r7
 801320e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8013212:	2e09      	cmp	r6, #9
 8013214:	d818      	bhi.n	8013248 <_strtol_l.isra.0+0xac>
 8013216:	4634      	mov	r4, r6
 8013218:	42a3      	cmp	r3, r4
 801321a:	dd24      	ble.n	8013266 <_strtol_l.isra.0+0xca>
 801321c:	2d00      	cmp	r5, #0
 801321e:	db1f      	blt.n	8013260 <_strtol_l.isra.0+0xc4>
 8013220:	4581      	cmp	r9, r0
 8013222:	d31d      	bcc.n	8013260 <_strtol_l.isra.0+0xc4>
 8013224:	d101      	bne.n	801322a <_strtol_l.isra.0+0x8e>
 8013226:	45a2      	cmp	sl, r4
 8013228:	db1a      	blt.n	8013260 <_strtol_l.isra.0+0xc4>
 801322a:	2501      	movs	r5, #1
 801322c:	fb00 4003 	mla	r0, r0, r3, r4
 8013230:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013234:	e7eb      	b.n	801320e <_strtol_l.isra.0+0x72>
 8013236:	2c2b      	cmp	r4, #43	; 0x2b
 8013238:	bf08      	it	eq
 801323a:	f89c 4000 	ldrbeq.w	r4, [ip]
 801323e:	46a8      	mov	r8, r5
 8013240:	bf08      	it	eq
 8013242:	f100 0c02 	addeq.w	ip, r0, #2
 8013246:	e7c8      	b.n	80131da <_strtol_l.isra.0+0x3e>
 8013248:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801324c:	2e19      	cmp	r6, #25
 801324e:	d801      	bhi.n	8013254 <_strtol_l.isra.0+0xb8>
 8013250:	3c37      	subs	r4, #55	; 0x37
 8013252:	e7e1      	b.n	8013218 <_strtol_l.isra.0+0x7c>
 8013254:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8013258:	2e19      	cmp	r6, #25
 801325a:	d804      	bhi.n	8013266 <_strtol_l.isra.0+0xca>
 801325c:	3c57      	subs	r4, #87	; 0x57
 801325e:	e7db      	b.n	8013218 <_strtol_l.isra.0+0x7c>
 8013260:	f04f 35ff 	mov.w	r5, #4294967295
 8013264:	e7e4      	b.n	8013230 <_strtol_l.isra.0+0x94>
 8013266:	2d00      	cmp	r5, #0
 8013268:	da08      	bge.n	801327c <_strtol_l.isra.0+0xe0>
 801326a:	2322      	movs	r3, #34	; 0x22
 801326c:	4638      	mov	r0, r7
 801326e:	f8ce 3000 	str.w	r3, [lr]
 8013272:	2a00      	cmp	r2, #0
 8013274:	d09e      	beq.n	80131b4 <_strtol_l.isra.0+0x18>
 8013276:	f10c 31ff 	add.w	r1, ip, #4294967295
 801327a:	e007      	b.n	801328c <_strtol_l.isra.0+0xf0>
 801327c:	f1b8 0f00 	cmp.w	r8, #0
 8013280:	d000      	beq.n	8013284 <_strtol_l.isra.0+0xe8>
 8013282:	4240      	negs	r0, r0
 8013284:	2a00      	cmp	r2, #0
 8013286:	d095      	beq.n	80131b4 <_strtol_l.isra.0+0x18>
 8013288:	2d00      	cmp	r5, #0
 801328a:	d1f4      	bne.n	8013276 <_strtol_l.isra.0+0xda>
 801328c:	6011      	str	r1, [r2, #0]
 801328e:	e791      	b.n	80131b4 <_strtol_l.isra.0+0x18>
 8013290:	2430      	movs	r4, #48	; 0x30
 8013292:	2b00      	cmp	r3, #0
 8013294:	d1b2      	bne.n	80131fc <_strtol_l.isra.0+0x60>
 8013296:	2308      	movs	r3, #8
 8013298:	e7b0      	b.n	80131fc <_strtol_l.isra.0+0x60>
 801329a:	2c30      	cmp	r4, #48	; 0x30
 801329c:	d0a3      	beq.n	80131e6 <_strtol_l.isra.0+0x4a>
 801329e:	230a      	movs	r3, #10
 80132a0:	e7ac      	b.n	80131fc <_strtol_l.isra.0+0x60>
 80132a2:	bf00      	nop
 80132a4:	08015ed1 	.word	0x08015ed1

080132a8 <_strtol_r>:
 80132a8:	f7ff bf78 	b.w	801319c <_strtol_l.isra.0>

080132ac <_write_r>:
 80132ac:	b538      	push	{r3, r4, r5, lr}
 80132ae:	4604      	mov	r4, r0
 80132b0:	4608      	mov	r0, r1
 80132b2:	4611      	mov	r1, r2
 80132b4:	2200      	movs	r2, #0
 80132b6:	4d05      	ldr	r5, [pc, #20]	; (80132cc <_write_r+0x20>)
 80132b8:	602a      	str	r2, [r5, #0]
 80132ba:	461a      	mov	r2, r3
 80132bc:	f7ef fdb4 	bl	8002e28 <_write>
 80132c0:	1c43      	adds	r3, r0, #1
 80132c2:	d102      	bne.n	80132ca <_write_r+0x1e>
 80132c4:	682b      	ldr	r3, [r5, #0]
 80132c6:	b103      	cbz	r3, 80132ca <_write_r+0x1e>
 80132c8:	6023      	str	r3, [r4, #0]
 80132ca:	bd38      	pop	{r3, r4, r5, pc}
 80132cc:	2000b3a8 	.word	0x2000b3a8

080132d0 <_close_r>:
 80132d0:	b538      	push	{r3, r4, r5, lr}
 80132d2:	2300      	movs	r3, #0
 80132d4:	4d05      	ldr	r5, [pc, #20]	; (80132ec <_close_r+0x1c>)
 80132d6:	4604      	mov	r4, r0
 80132d8:	4608      	mov	r0, r1
 80132da:	602b      	str	r3, [r5, #0]
 80132dc:	f7ef fdc0 	bl	8002e60 <_close>
 80132e0:	1c43      	adds	r3, r0, #1
 80132e2:	d102      	bne.n	80132ea <_close_r+0x1a>
 80132e4:	682b      	ldr	r3, [r5, #0]
 80132e6:	b103      	cbz	r3, 80132ea <_close_r+0x1a>
 80132e8:	6023      	str	r3, [r4, #0]
 80132ea:	bd38      	pop	{r3, r4, r5, pc}
 80132ec:	2000b3a8 	.word	0x2000b3a8

080132f0 <quorem>:
 80132f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132f4:	6903      	ldr	r3, [r0, #16]
 80132f6:	690c      	ldr	r4, [r1, #16]
 80132f8:	4607      	mov	r7, r0
 80132fa:	42a3      	cmp	r3, r4
 80132fc:	f2c0 8083 	blt.w	8013406 <quorem+0x116>
 8013300:	3c01      	subs	r4, #1
 8013302:	f100 0514 	add.w	r5, r0, #20
 8013306:	f101 0814 	add.w	r8, r1, #20
 801330a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801330e:	9301      	str	r3, [sp, #4]
 8013310:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013314:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013318:	3301      	adds	r3, #1
 801331a:	429a      	cmp	r2, r3
 801331c:	fbb2 f6f3 	udiv	r6, r2, r3
 8013320:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013324:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013328:	d332      	bcc.n	8013390 <quorem+0xa0>
 801332a:	f04f 0e00 	mov.w	lr, #0
 801332e:	4640      	mov	r0, r8
 8013330:	46ac      	mov	ip, r5
 8013332:	46f2      	mov	sl, lr
 8013334:	f850 2b04 	ldr.w	r2, [r0], #4
 8013338:	b293      	uxth	r3, r2
 801333a:	fb06 e303 	mla	r3, r6, r3, lr
 801333e:	0c12      	lsrs	r2, r2, #16
 8013340:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013344:	fb06 e202 	mla	r2, r6, r2, lr
 8013348:	b29b      	uxth	r3, r3
 801334a:	ebaa 0303 	sub.w	r3, sl, r3
 801334e:	f8dc a000 	ldr.w	sl, [ip]
 8013352:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013356:	fa1f fa8a 	uxth.w	sl, sl
 801335a:	4453      	add	r3, sl
 801335c:	fa1f fa82 	uxth.w	sl, r2
 8013360:	f8dc 2000 	ldr.w	r2, [ip]
 8013364:	4581      	cmp	r9, r0
 8013366:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801336a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801336e:	b29b      	uxth	r3, r3
 8013370:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013374:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013378:	f84c 3b04 	str.w	r3, [ip], #4
 801337c:	d2da      	bcs.n	8013334 <quorem+0x44>
 801337e:	f855 300b 	ldr.w	r3, [r5, fp]
 8013382:	b92b      	cbnz	r3, 8013390 <quorem+0xa0>
 8013384:	9b01      	ldr	r3, [sp, #4]
 8013386:	3b04      	subs	r3, #4
 8013388:	429d      	cmp	r5, r3
 801338a:	461a      	mov	r2, r3
 801338c:	d32f      	bcc.n	80133ee <quorem+0xfe>
 801338e:	613c      	str	r4, [r7, #16]
 8013390:	4638      	mov	r0, r7
 8013392:	f001 fd59 	bl	8014e48 <__mcmp>
 8013396:	2800      	cmp	r0, #0
 8013398:	db25      	blt.n	80133e6 <quorem+0xf6>
 801339a:	4628      	mov	r0, r5
 801339c:	f04f 0c00 	mov.w	ip, #0
 80133a0:	3601      	adds	r6, #1
 80133a2:	f858 1b04 	ldr.w	r1, [r8], #4
 80133a6:	f8d0 e000 	ldr.w	lr, [r0]
 80133aa:	b28b      	uxth	r3, r1
 80133ac:	ebac 0303 	sub.w	r3, ip, r3
 80133b0:	fa1f f28e 	uxth.w	r2, lr
 80133b4:	4413      	add	r3, r2
 80133b6:	0c0a      	lsrs	r2, r1, #16
 80133b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80133bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80133c0:	b29b      	uxth	r3, r3
 80133c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80133c6:	45c1      	cmp	r9, r8
 80133c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80133cc:	f840 3b04 	str.w	r3, [r0], #4
 80133d0:	d2e7      	bcs.n	80133a2 <quorem+0xb2>
 80133d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80133d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80133da:	b922      	cbnz	r2, 80133e6 <quorem+0xf6>
 80133dc:	3b04      	subs	r3, #4
 80133de:	429d      	cmp	r5, r3
 80133e0:	461a      	mov	r2, r3
 80133e2:	d30a      	bcc.n	80133fa <quorem+0x10a>
 80133e4:	613c      	str	r4, [r7, #16]
 80133e6:	4630      	mov	r0, r6
 80133e8:	b003      	add	sp, #12
 80133ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ee:	6812      	ldr	r2, [r2, #0]
 80133f0:	3b04      	subs	r3, #4
 80133f2:	2a00      	cmp	r2, #0
 80133f4:	d1cb      	bne.n	801338e <quorem+0x9e>
 80133f6:	3c01      	subs	r4, #1
 80133f8:	e7c6      	b.n	8013388 <quorem+0x98>
 80133fa:	6812      	ldr	r2, [r2, #0]
 80133fc:	3b04      	subs	r3, #4
 80133fe:	2a00      	cmp	r2, #0
 8013400:	d1f0      	bne.n	80133e4 <quorem+0xf4>
 8013402:	3c01      	subs	r4, #1
 8013404:	e7eb      	b.n	80133de <quorem+0xee>
 8013406:	2000      	movs	r0, #0
 8013408:	e7ee      	b.n	80133e8 <quorem+0xf8>
 801340a:	0000      	movs	r0, r0
 801340c:	0000      	movs	r0, r0
	...

08013410 <_dtoa_r>:
 8013410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013414:	4616      	mov	r6, r2
 8013416:	461f      	mov	r7, r3
 8013418:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801341a:	b099      	sub	sp, #100	; 0x64
 801341c:	4605      	mov	r5, r0
 801341e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013422:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8013426:	b974      	cbnz	r4, 8013446 <_dtoa_r+0x36>
 8013428:	2010      	movs	r0, #16
 801342a:	f7fe f87b 	bl	8011524 <malloc>
 801342e:	4602      	mov	r2, r0
 8013430:	6268      	str	r0, [r5, #36]	; 0x24
 8013432:	b920      	cbnz	r0, 801343e <_dtoa_r+0x2e>
 8013434:	21ea      	movs	r1, #234	; 0xea
 8013436:	4bae      	ldr	r3, [pc, #696]	; (80136f0 <_dtoa_r+0x2e0>)
 8013438:	48ae      	ldr	r0, [pc, #696]	; (80136f4 <_dtoa_r+0x2e4>)
 801343a:	f002 f89b 	bl	8015574 <__assert_func>
 801343e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013442:	6004      	str	r4, [r0, #0]
 8013444:	60c4      	str	r4, [r0, #12]
 8013446:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013448:	6819      	ldr	r1, [r3, #0]
 801344a:	b151      	cbz	r1, 8013462 <_dtoa_r+0x52>
 801344c:	685a      	ldr	r2, [r3, #4]
 801344e:	2301      	movs	r3, #1
 8013450:	4093      	lsls	r3, r2
 8013452:	604a      	str	r2, [r1, #4]
 8013454:	608b      	str	r3, [r1, #8]
 8013456:	4628      	mov	r0, r5
 8013458:	f001 fa72 	bl	8014940 <_Bfree>
 801345c:	2200      	movs	r2, #0
 801345e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013460:	601a      	str	r2, [r3, #0]
 8013462:	1e3b      	subs	r3, r7, #0
 8013464:	bfaf      	iteee	ge
 8013466:	2300      	movge	r3, #0
 8013468:	2201      	movlt	r2, #1
 801346a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801346e:	9305      	strlt	r3, [sp, #20]
 8013470:	bfa8      	it	ge
 8013472:	f8c8 3000 	strge.w	r3, [r8]
 8013476:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801347a:	4b9f      	ldr	r3, [pc, #636]	; (80136f8 <_dtoa_r+0x2e8>)
 801347c:	bfb8      	it	lt
 801347e:	f8c8 2000 	strlt.w	r2, [r8]
 8013482:	ea33 0309 	bics.w	r3, r3, r9
 8013486:	d119      	bne.n	80134bc <_dtoa_r+0xac>
 8013488:	f242 730f 	movw	r3, #9999	; 0x270f
 801348c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801348e:	6013      	str	r3, [r2, #0]
 8013490:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013494:	4333      	orrs	r3, r6
 8013496:	f000 8580 	beq.w	8013f9a <_dtoa_r+0xb8a>
 801349a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801349c:	b953      	cbnz	r3, 80134b4 <_dtoa_r+0xa4>
 801349e:	4b97      	ldr	r3, [pc, #604]	; (80136fc <_dtoa_r+0x2ec>)
 80134a0:	e022      	b.n	80134e8 <_dtoa_r+0xd8>
 80134a2:	4b97      	ldr	r3, [pc, #604]	; (8013700 <_dtoa_r+0x2f0>)
 80134a4:	9308      	str	r3, [sp, #32]
 80134a6:	3308      	adds	r3, #8
 80134a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80134aa:	6013      	str	r3, [r2, #0]
 80134ac:	9808      	ldr	r0, [sp, #32]
 80134ae:	b019      	add	sp, #100	; 0x64
 80134b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134b4:	4b91      	ldr	r3, [pc, #580]	; (80136fc <_dtoa_r+0x2ec>)
 80134b6:	9308      	str	r3, [sp, #32]
 80134b8:	3303      	adds	r3, #3
 80134ba:	e7f5      	b.n	80134a8 <_dtoa_r+0x98>
 80134bc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80134c0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80134c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80134c8:	2200      	movs	r2, #0
 80134ca:	2300      	movs	r3, #0
 80134cc:	f7ed fab6 	bl	8000a3c <__aeabi_dcmpeq>
 80134d0:	4680      	mov	r8, r0
 80134d2:	b158      	cbz	r0, 80134ec <_dtoa_r+0xdc>
 80134d4:	2301      	movs	r3, #1
 80134d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80134d8:	6013      	str	r3, [r2, #0]
 80134da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80134dc:	2b00      	cmp	r3, #0
 80134de:	f000 8559 	beq.w	8013f94 <_dtoa_r+0xb84>
 80134e2:	4888      	ldr	r0, [pc, #544]	; (8013704 <_dtoa_r+0x2f4>)
 80134e4:	6018      	str	r0, [r3, #0]
 80134e6:	1e43      	subs	r3, r0, #1
 80134e8:	9308      	str	r3, [sp, #32]
 80134ea:	e7df      	b.n	80134ac <_dtoa_r+0x9c>
 80134ec:	ab16      	add	r3, sp, #88	; 0x58
 80134ee:	9301      	str	r3, [sp, #4]
 80134f0:	ab17      	add	r3, sp, #92	; 0x5c
 80134f2:	9300      	str	r3, [sp, #0]
 80134f4:	4628      	mov	r0, r5
 80134f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80134fa:	f001 fdcb 	bl	8015094 <__d2b>
 80134fe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013502:	4682      	mov	sl, r0
 8013504:	2c00      	cmp	r4, #0
 8013506:	d07e      	beq.n	8013606 <_dtoa_r+0x1f6>
 8013508:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801350c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801350e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8013512:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013516:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801351a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801351e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8013522:	2200      	movs	r2, #0
 8013524:	4b78      	ldr	r3, [pc, #480]	; (8013708 <_dtoa_r+0x2f8>)
 8013526:	f7ec fe69 	bl	80001fc <__aeabi_dsub>
 801352a:	a36b      	add	r3, pc, #428	; (adr r3, 80136d8 <_dtoa_r+0x2c8>)
 801352c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013530:	f7ed f81c 	bl	800056c <__aeabi_dmul>
 8013534:	a36a      	add	r3, pc, #424	; (adr r3, 80136e0 <_dtoa_r+0x2d0>)
 8013536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801353a:	f7ec fe61 	bl	8000200 <__adddf3>
 801353e:	4606      	mov	r6, r0
 8013540:	4620      	mov	r0, r4
 8013542:	460f      	mov	r7, r1
 8013544:	f7ec ffa8 	bl	8000498 <__aeabi_i2d>
 8013548:	a367      	add	r3, pc, #412	; (adr r3, 80136e8 <_dtoa_r+0x2d8>)
 801354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801354e:	f7ed f80d 	bl	800056c <__aeabi_dmul>
 8013552:	4602      	mov	r2, r0
 8013554:	460b      	mov	r3, r1
 8013556:	4630      	mov	r0, r6
 8013558:	4639      	mov	r1, r7
 801355a:	f7ec fe51 	bl	8000200 <__adddf3>
 801355e:	4606      	mov	r6, r0
 8013560:	460f      	mov	r7, r1
 8013562:	f7ed fab3 	bl	8000acc <__aeabi_d2iz>
 8013566:	2200      	movs	r2, #0
 8013568:	4681      	mov	r9, r0
 801356a:	2300      	movs	r3, #0
 801356c:	4630      	mov	r0, r6
 801356e:	4639      	mov	r1, r7
 8013570:	f7ed fa6e 	bl	8000a50 <__aeabi_dcmplt>
 8013574:	b148      	cbz	r0, 801358a <_dtoa_r+0x17a>
 8013576:	4648      	mov	r0, r9
 8013578:	f7ec ff8e 	bl	8000498 <__aeabi_i2d>
 801357c:	4632      	mov	r2, r6
 801357e:	463b      	mov	r3, r7
 8013580:	f7ed fa5c 	bl	8000a3c <__aeabi_dcmpeq>
 8013584:	b908      	cbnz	r0, 801358a <_dtoa_r+0x17a>
 8013586:	f109 39ff 	add.w	r9, r9, #4294967295
 801358a:	f1b9 0f16 	cmp.w	r9, #22
 801358e:	d857      	bhi.n	8013640 <_dtoa_r+0x230>
 8013590:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013594:	4b5d      	ldr	r3, [pc, #372]	; (801370c <_dtoa_r+0x2fc>)
 8013596:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801359e:	f7ed fa57 	bl	8000a50 <__aeabi_dcmplt>
 80135a2:	2800      	cmp	r0, #0
 80135a4:	d04e      	beq.n	8013644 <_dtoa_r+0x234>
 80135a6:	2300      	movs	r3, #0
 80135a8:	f109 39ff 	add.w	r9, r9, #4294967295
 80135ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80135ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80135b0:	1b1c      	subs	r4, r3, r4
 80135b2:	1e63      	subs	r3, r4, #1
 80135b4:	9309      	str	r3, [sp, #36]	; 0x24
 80135b6:	bf49      	itett	mi
 80135b8:	f1c4 0301 	rsbmi	r3, r4, #1
 80135bc:	2300      	movpl	r3, #0
 80135be:	9306      	strmi	r3, [sp, #24]
 80135c0:	2300      	movmi	r3, #0
 80135c2:	bf54      	ite	pl
 80135c4:	9306      	strpl	r3, [sp, #24]
 80135c6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80135c8:	f1b9 0f00 	cmp.w	r9, #0
 80135cc:	db3c      	blt.n	8013648 <_dtoa_r+0x238>
 80135ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135d0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80135d4:	444b      	add	r3, r9
 80135d6:	9309      	str	r3, [sp, #36]	; 0x24
 80135d8:	2300      	movs	r3, #0
 80135da:	930a      	str	r3, [sp, #40]	; 0x28
 80135dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80135de:	2b09      	cmp	r3, #9
 80135e0:	d86c      	bhi.n	80136bc <_dtoa_r+0x2ac>
 80135e2:	2b05      	cmp	r3, #5
 80135e4:	bfc4      	itt	gt
 80135e6:	3b04      	subgt	r3, #4
 80135e8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80135ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80135ec:	bfc8      	it	gt
 80135ee:	2400      	movgt	r4, #0
 80135f0:	f1a3 0302 	sub.w	r3, r3, #2
 80135f4:	bfd8      	it	le
 80135f6:	2401      	movle	r4, #1
 80135f8:	2b03      	cmp	r3, #3
 80135fa:	f200 808b 	bhi.w	8013714 <_dtoa_r+0x304>
 80135fe:	e8df f003 	tbb	[pc, r3]
 8013602:	4f2d      	.short	0x4f2d
 8013604:	5b4d      	.short	0x5b4d
 8013606:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 801360a:	441c      	add	r4, r3
 801360c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8013610:	2b20      	cmp	r3, #32
 8013612:	bfc3      	ittte	gt
 8013614:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013618:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 801361c:	fa09 f303 	lslgt.w	r3, r9, r3
 8013620:	f1c3 0320 	rsble	r3, r3, #32
 8013624:	bfc6      	itte	gt
 8013626:	fa26 f000 	lsrgt.w	r0, r6, r0
 801362a:	4318      	orrgt	r0, r3
 801362c:	fa06 f003 	lslle.w	r0, r6, r3
 8013630:	f7ec ff22 	bl	8000478 <__aeabi_ui2d>
 8013634:	2301      	movs	r3, #1
 8013636:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801363a:	3c01      	subs	r4, #1
 801363c:	9313      	str	r3, [sp, #76]	; 0x4c
 801363e:	e770      	b.n	8013522 <_dtoa_r+0x112>
 8013640:	2301      	movs	r3, #1
 8013642:	e7b3      	b.n	80135ac <_dtoa_r+0x19c>
 8013644:	900f      	str	r0, [sp, #60]	; 0x3c
 8013646:	e7b2      	b.n	80135ae <_dtoa_r+0x19e>
 8013648:	9b06      	ldr	r3, [sp, #24]
 801364a:	eba3 0309 	sub.w	r3, r3, r9
 801364e:	9306      	str	r3, [sp, #24]
 8013650:	f1c9 0300 	rsb	r3, r9, #0
 8013654:	930a      	str	r3, [sp, #40]	; 0x28
 8013656:	2300      	movs	r3, #0
 8013658:	930e      	str	r3, [sp, #56]	; 0x38
 801365a:	e7bf      	b.n	80135dc <_dtoa_r+0x1cc>
 801365c:	2300      	movs	r3, #0
 801365e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013660:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013662:	2b00      	cmp	r3, #0
 8013664:	dc59      	bgt.n	801371a <_dtoa_r+0x30a>
 8013666:	f04f 0b01 	mov.w	fp, #1
 801366a:	465b      	mov	r3, fp
 801366c:	f8cd b008 	str.w	fp, [sp, #8]
 8013670:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8013674:	2200      	movs	r2, #0
 8013676:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8013678:	6042      	str	r2, [r0, #4]
 801367a:	2204      	movs	r2, #4
 801367c:	f102 0614 	add.w	r6, r2, #20
 8013680:	429e      	cmp	r6, r3
 8013682:	6841      	ldr	r1, [r0, #4]
 8013684:	d94f      	bls.n	8013726 <_dtoa_r+0x316>
 8013686:	4628      	mov	r0, r5
 8013688:	f001 f91a 	bl	80148c0 <_Balloc>
 801368c:	9008      	str	r0, [sp, #32]
 801368e:	2800      	cmp	r0, #0
 8013690:	d14d      	bne.n	801372e <_dtoa_r+0x31e>
 8013692:	4602      	mov	r2, r0
 8013694:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013698:	4b1d      	ldr	r3, [pc, #116]	; (8013710 <_dtoa_r+0x300>)
 801369a:	e6cd      	b.n	8013438 <_dtoa_r+0x28>
 801369c:	2301      	movs	r3, #1
 801369e:	e7de      	b.n	801365e <_dtoa_r+0x24e>
 80136a0:	2300      	movs	r3, #0
 80136a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80136a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80136a6:	eb09 0b03 	add.w	fp, r9, r3
 80136aa:	f10b 0301 	add.w	r3, fp, #1
 80136ae:	2b01      	cmp	r3, #1
 80136b0:	9302      	str	r3, [sp, #8]
 80136b2:	bfb8      	it	lt
 80136b4:	2301      	movlt	r3, #1
 80136b6:	e7dd      	b.n	8013674 <_dtoa_r+0x264>
 80136b8:	2301      	movs	r3, #1
 80136ba:	e7f2      	b.n	80136a2 <_dtoa_r+0x292>
 80136bc:	2401      	movs	r4, #1
 80136be:	2300      	movs	r3, #0
 80136c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80136c2:	9322      	str	r3, [sp, #136]	; 0x88
 80136c4:	f04f 3bff 	mov.w	fp, #4294967295
 80136c8:	2200      	movs	r2, #0
 80136ca:	2312      	movs	r3, #18
 80136cc:	f8cd b008 	str.w	fp, [sp, #8]
 80136d0:	9223      	str	r2, [sp, #140]	; 0x8c
 80136d2:	e7cf      	b.n	8013674 <_dtoa_r+0x264>
 80136d4:	f3af 8000 	nop.w
 80136d8:	636f4361 	.word	0x636f4361
 80136dc:	3fd287a7 	.word	0x3fd287a7
 80136e0:	8b60c8b3 	.word	0x8b60c8b3
 80136e4:	3fc68a28 	.word	0x3fc68a28
 80136e8:	509f79fb 	.word	0x509f79fb
 80136ec:	3fd34413 	.word	0x3fd34413
 80136f0:	08015fde 	.word	0x08015fde
 80136f4:	08015ff5 	.word	0x08015ff5
 80136f8:	7ff00000 	.word	0x7ff00000
 80136fc:	08015fda 	.word	0x08015fda
 8013700:	08015fd1 	.word	0x08015fd1
 8013704:	08015e55 	.word	0x08015e55
 8013708:	3ff80000 	.word	0x3ff80000
 801370c:	08016170 	.word	0x08016170
 8013710:	08016054 	.word	0x08016054
 8013714:	2301      	movs	r3, #1
 8013716:	930b      	str	r3, [sp, #44]	; 0x2c
 8013718:	e7d4      	b.n	80136c4 <_dtoa_r+0x2b4>
 801371a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801371e:	465b      	mov	r3, fp
 8013720:	f8cd b008 	str.w	fp, [sp, #8]
 8013724:	e7a6      	b.n	8013674 <_dtoa_r+0x264>
 8013726:	3101      	adds	r1, #1
 8013728:	6041      	str	r1, [r0, #4]
 801372a:	0052      	lsls	r2, r2, #1
 801372c:	e7a6      	b.n	801367c <_dtoa_r+0x26c>
 801372e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013730:	9a08      	ldr	r2, [sp, #32]
 8013732:	601a      	str	r2, [r3, #0]
 8013734:	9b02      	ldr	r3, [sp, #8]
 8013736:	2b0e      	cmp	r3, #14
 8013738:	f200 80a8 	bhi.w	801388c <_dtoa_r+0x47c>
 801373c:	2c00      	cmp	r4, #0
 801373e:	f000 80a5 	beq.w	801388c <_dtoa_r+0x47c>
 8013742:	f1b9 0f00 	cmp.w	r9, #0
 8013746:	dd34      	ble.n	80137b2 <_dtoa_r+0x3a2>
 8013748:	4a9a      	ldr	r2, [pc, #616]	; (80139b4 <_dtoa_r+0x5a4>)
 801374a:	f009 030f 	and.w	r3, r9, #15
 801374e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013752:	f419 7f80 	tst.w	r9, #256	; 0x100
 8013756:	e9d3 3400 	ldrd	r3, r4, [r3]
 801375a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801375e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8013762:	d016      	beq.n	8013792 <_dtoa_r+0x382>
 8013764:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013768:	4b93      	ldr	r3, [pc, #588]	; (80139b8 <_dtoa_r+0x5a8>)
 801376a:	2703      	movs	r7, #3
 801376c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013770:	f7ed f826 	bl	80007c0 <__aeabi_ddiv>
 8013774:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013778:	f004 040f 	and.w	r4, r4, #15
 801377c:	4e8e      	ldr	r6, [pc, #568]	; (80139b8 <_dtoa_r+0x5a8>)
 801377e:	b954      	cbnz	r4, 8013796 <_dtoa_r+0x386>
 8013780:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013784:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013788:	f7ed f81a 	bl	80007c0 <__aeabi_ddiv>
 801378c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013790:	e029      	b.n	80137e6 <_dtoa_r+0x3d6>
 8013792:	2702      	movs	r7, #2
 8013794:	e7f2      	b.n	801377c <_dtoa_r+0x36c>
 8013796:	07e1      	lsls	r1, r4, #31
 8013798:	d508      	bpl.n	80137ac <_dtoa_r+0x39c>
 801379a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801379e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80137a2:	f7ec fee3 	bl	800056c <__aeabi_dmul>
 80137a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80137aa:	3701      	adds	r7, #1
 80137ac:	1064      	asrs	r4, r4, #1
 80137ae:	3608      	adds	r6, #8
 80137b0:	e7e5      	b.n	801377e <_dtoa_r+0x36e>
 80137b2:	f000 80a5 	beq.w	8013900 <_dtoa_r+0x4f0>
 80137b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80137ba:	f1c9 0400 	rsb	r4, r9, #0
 80137be:	4b7d      	ldr	r3, [pc, #500]	; (80139b4 <_dtoa_r+0x5a4>)
 80137c0:	f004 020f 	and.w	r2, r4, #15
 80137c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80137c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137cc:	f7ec fece 	bl	800056c <__aeabi_dmul>
 80137d0:	2702      	movs	r7, #2
 80137d2:	2300      	movs	r3, #0
 80137d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80137d8:	4e77      	ldr	r6, [pc, #476]	; (80139b8 <_dtoa_r+0x5a8>)
 80137da:	1124      	asrs	r4, r4, #4
 80137dc:	2c00      	cmp	r4, #0
 80137de:	f040 8084 	bne.w	80138ea <_dtoa_r+0x4da>
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d1d2      	bne.n	801378c <_dtoa_r+0x37c>
 80137e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	f000 808b 	beq.w	8013904 <_dtoa_r+0x4f4>
 80137ee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80137f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80137f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80137fa:	2200      	movs	r2, #0
 80137fc:	4b6f      	ldr	r3, [pc, #444]	; (80139bc <_dtoa_r+0x5ac>)
 80137fe:	f7ed f927 	bl	8000a50 <__aeabi_dcmplt>
 8013802:	2800      	cmp	r0, #0
 8013804:	d07e      	beq.n	8013904 <_dtoa_r+0x4f4>
 8013806:	9b02      	ldr	r3, [sp, #8]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d07b      	beq.n	8013904 <_dtoa_r+0x4f4>
 801380c:	f1bb 0f00 	cmp.w	fp, #0
 8013810:	dd38      	ble.n	8013884 <_dtoa_r+0x474>
 8013812:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013816:	2200      	movs	r2, #0
 8013818:	4b69      	ldr	r3, [pc, #420]	; (80139c0 <_dtoa_r+0x5b0>)
 801381a:	f7ec fea7 	bl	800056c <__aeabi_dmul>
 801381e:	465c      	mov	r4, fp
 8013820:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013824:	f109 38ff 	add.w	r8, r9, #4294967295
 8013828:	3701      	adds	r7, #1
 801382a:	4638      	mov	r0, r7
 801382c:	f7ec fe34 	bl	8000498 <__aeabi_i2d>
 8013830:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013834:	f7ec fe9a 	bl	800056c <__aeabi_dmul>
 8013838:	2200      	movs	r2, #0
 801383a:	4b62      	ldr	r3, [pc, #392]	; (80139c4 <_dtoa_r+0x5b4>)
 801383c:	f7ec fce0 	bl	8000200 <__adddf3>
 8013840:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8013844:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013848:	9611      	str	r6, [sp, #68]	; 0x44
 801384a:	2c00      	cmp	r4, #0
 801384c:	d15d      	bne.n	801390a <_dtoa_r+0x4fa>
 801384e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013852:	2200      	movs	r2, #0
 8013854:	4b5c      	ldr	r3, [pc, #368]	; (80139c8 <_dtoa_r+0x5b8>)
 8013856:	f7ec fcd1 	bl	80001fc <__aeabi_dsub>
 801385a:	4602      	mov	r2, r0
 801385c:	460b      	mov	r3, r1
 801385e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013862:	4633      	mov	r3, r6
 8013864:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013866:	f7ed f911 	bl	8000a8c <__aeabi_dcmpgt>
 801386a:	2800      	cmp	r0, #0
 801386c:	f040 829e 	bne.w	8013dac <_dtoa_r+0x99c>
 8013870:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013874:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013876:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801387a:	f7ed f8e9 	bl	8000a50 <__aeabi_dcmplt>
 801387e:	2800      	cmp	r0, #0
 8013880:	f040 8292 	bne.w	8013da8 <_dtoa_r+0x998>
 8013884:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8013888:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801388c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801388e:	2b00      	cmp	r3, #0
 8013890:	f2c0 8153 	blt.w	8013b3a <_dtoa_r+0x72a>
 8013894:	f1b9 0f0e 	cmp.w	r9, #14
 8013898:	f300 814f 	bgt.w	8013b3a <_dtoa_r+0x72a>
 801389c:	4b45      	ldr	r3, [pc, #276]	; (80139b4 <_dtoa_r+0x5a4>)
 801389e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80138a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80138a6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80138aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	f280 80db 	bge.w	8013a68 <_dtoa_r+0x658>
 80138b2:	9b02      	ldr	r3, [sp, #8]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	f300 80d7 	bgt.w	8013a68 <_dtoa_r+0x658>
 80138ba:	f040 8274 	bne.w	8013da6 <_dtoa_r+0x996>
 80138be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80138c2:	2200      	movs	r2, #0
 80138c4:	4b40      	ldr	r3, [pc, #256]	; (80139c8 <_dtoa_r+0x5b8>)
 80138c6:	f7ec fe51 	bl	800056c <__aeabi_dmul>
 80138ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80138ce:	f7ed f8d3 	bl	8000a78 <__aeabi_dcmpge>
 80138d2:	9c02      	ldr	r4, [sp, #8]
 80138d4:	4626      	mov	r6, r4
 80138d6:	2800      	cmp	r0, #0
 80138d8:	f040 824a 	bne.w	8013d70 <_dtoa_r+0x960>
 80138dc:	2331      	movs	r3, #49	; 0x31
 80138de:	9f08      	ldr	r7, [sp, #32]
 80138e0:	f109 0901 	add.w	r9, r9, #1
 80138e4:	f807 3b01 	strb.w	r3, [r7], #1
 80138e8:	e246      	b.n	8013d78 <_dtoa_r+0x968>
 80138ea:	07e2      	lsls	r2, r4, #31
 80138ec:	d505      	bpl.n	80138fa <_dtoa_r+0x4ea>
 80138ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80138f2:	f7ec fe3b 	bl	800056c <__aeabi_dmul>
 80138f6:	2301      	movs	r3, #1
 80138f8:	3701      	adds	r7, #1
 80138fa:	1064      	asrs	r4, r4, #1
 80138fc:	3608      	adds	r6, #8
 80138fe:	e76d      	b.n	80137dc <_dtoa_r+0x3cc>
 8013900:	2702      	movs	r7, #2
 8013902:	e770      	b.n	80137e6 <_dtoa_r+0x3d6>
 8013904:	46c8      	mov	r8, r9
 8013906:	9c02      	ldr	r4, [sp, #8]
 8013908:	e78f      	b.n	801382a <_dtoa_r+0x41a>
 801390a:	9908      	ldr	r1, [sp, #32]
 801390c:	4b29      	ldr	r3, [pc, #164]	; (80139b4 <_dtoa_r+0x5a4>)
 801390e:	4421      	add	r1, r4
 8013910:	9112      	str	r1, [sp, #72]	; 0x48
 8013912:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013914:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013918:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 801391c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013920:	2900      	cmp	r1, #0
 8013922:	d055      	beq.n	80139d0 <_dtoa_r+0x5c0>
 8013924:	2000      	movs	r0, #0
 8013926:	4929      	ldr	r1, [pc, #164]	; (80139cc <_dtoa_r+0x5bc>)
 8013928:	f7ec ff4a 	bl	80007c0 <__aeabi_ddiv>
 801392c:	463b      	mov	r3, r7
 801392e:	4632      	mov	r2, r6
 8013930:	f7ec fc64 	bl	80001fc <__aeabi_dsub>
 8013934:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013938:	9f08      	ldr	r7, [sp, #32]
 801393a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801393e:	f7ed f8c5 	bl	8000acc <__aeabi_d2iz>
 8013942:	4604      	mov	r4, r0
 8013944:	f7ec fda8 	bl	8000498 <__aeabi_i2d>
 8013948:	4602      	mov	r2, r0
 801394a:	460b      	mov	r3, r1
 801394c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013950:	f7ec fc54 	bl	80001fc <__aeabi_dsub>
 8013954:	4602      	mov	r2, r0
 8013956:	460b      	mov	r3, r1
 8013958:	3430      	adds	r4, #48	; 0x30
 801395a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801395e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013962:	f807 4b01 	strb.w	r4, [r7], #1
 8013966:	f7ed f873 	bl	8000a50 <__aeabi_dcmplt>
 801396a:	2800      	cmp	r0, #0
 801396c:	d174      	bne.n	8013a58 <_dtoa_r+0x648>
 801396e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013972:	2000      	movs	r0, #0
 8013974:	4911      	ldr	r1, [pc, #68]	; (80139bc <_dtoa_r+0x5ac>)
 8013976:	f7ec fc41 	bl	80001fc <__aeabi_dsub>
 801397a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801397e:	f7ed f867 	bl	8000a50 <__aeabi_dcmplt>
 8013982:	2800      	cmp	r0, #0
 8013984:	f040 80b6 	bne.w	8013af4 <_dtoa_r+0x6e4>
 8013988:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801398a:	429f      	cmp	r7, r3
 801398c:	f43f af7a 	beq.w	8013884 <_dtoa_r+0x474>
 8013990:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013994:	2200      	movs	r2, #0
 8013996:	4b0a      	ldr	r3, [pc, #40]	; (80139c0 <_dtoa_r+0x5b0>)
 8013998:	f7ec fde8 	bl	800056c <__aeabi_dmul>
 801399c:	2200      	movs	r2, #0
 801399e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80139a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80139a6:	4b06      	ldr	r3, [pc, #24]	; (80139c0 <_dtoa_r+0x5b0>)
 80139a8:	f7ec fde0 	bl	800056c <__aeabi_dmul>
 80139ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80139b0:	e7c3      	b.n	801393a <_dtoa_r+0x52a>
 80139b2:	bf00      	nop
 80139b4:	08016170 	.word	0x08016170
 80139b8:	08016148 	.word	0x08016148
 80139bc:	3ff00000 	.word	0x3ff00000
 80139c0:	40240000 	.word	0x40240000
 80139c4:	401c0000 	.word	0x401c0000
 80139c8:	40140000 	.word	0x40140000
 80139cc:	3fe00000 	.word	0x3fe00000
 80139d0:	4630      	mov	r0, r6
 80139d2:	4639      	mov	r1, r7
 80139d4:	f7ec fdca 	bl	800056c <__aeabi_dmul>
 80139d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80139da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80139de:	9c08      	ldr	r4, [sp, #32]
 80139e0:	9314      	str	r3, [sp, #80]	; 0x50
 80139e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80139e6:	f7ed f871 	bl	8000acc <__aeabi_d2iz>
 80139ea:	9015      	str	r0, [sp, #84]	; 0x54
 80139ec:	f7ec fd54 	bl	8000498 <__aeabi_i2d>
 80139f0:	4602      	mov	r2, r0
 80139f2:	460b      	mov	r3, r1
 80139f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80139f8:	f7ec fc00 	bl	80001fc <__aeabi_dsub>
 80139fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80139fe:	4606      	mov	r6, r0
 8013a00:	3330      	adds	r3, #48	; 0x30
 8013a02:	f804 3b01 	strb.w	r3, [r4], #1
 8013a06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a08:	460f      	mov	r7, r1
 8013a0a:	429c      	cmp	r4, r3
 8013a0c:	f04f 0200 	mov.w	r2, #0
 8013a10:	d124      	bne.n	8013a5c <_dtoa_r+0x64c>
 8013a12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013a16:	4bb3      	ldr	r3, [pc, #716]	; (8013ce4 <_dtoa_r+0x8d4>)
 8013a18:	f7ec fbf2 	bl	8000200 <__adddf3>
 8013a1c:	4602      	mov	r2, r0
 8013a1e:	460b      	mov	r3, r1
 8013a20:	4630      	mov	r0, r6
 8013a22:	4639      	mov	r1, r7
 8013a24:	f7ed f832 	bl	8000a8c <__aeabi_dcmpgt>
 8013a28:	2800      	cmp	r0, #0
 8013a2a:	d162      	bne.n	8013af2 <_dtoa_r+0x6e2>
 8013a2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013a30:	2000      	movs	r0, #0
 8013a32:	49ac      	ldr	r1, [pc, #688]	; (8013ce4 <_dtoa_r+0x8d4>)
 8013a34:	f7ec fbe2 	bl	80001fc <__aeabi_dsub>
 8013a38:	4602      	mov	r2, r0
 8013a3a:	460b      	mov	r3, r1
 8013a3c:	4630      	mov	r0, r6
 8013a3e:	4639      	mov	r1, r7
 8013a40:	f7ed f806 	bl	8000a50 <__aeabi_dcmplt>
 8013a44:	2800      	cmp	r0, #0
 8013a46:	f43f af1d 	beq.w	8013884 <_dtoa_r+0x474>
 8013a4a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8013a4c:	1e7b      	subs	r3, r7, #1
 8013a4e:	9314      	str	r3, [sp, #80]	; 0x50
 8013a50:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8013a54:	2b30      	cmp	r3, #48	; 0x30
 8013a56:	d0f8      	beq.n	8013a4a <_dtoa_r+0x63a>
 8013a58:	46c1      	mov	r9, r8
 8013a5a:	e03a      	b.n	8013ad2 <_dtoa_r+0x6c2>
 8013a5c:	4ba2      	ldr	r3, [pc, #648]	; (8013ce8 <_dtoa_r+0x8d8>)
 8013a5e:	f7ec fd85 	bl	800056c <__aeabi_dmul>
 8013a62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a66:	e7bc      	b.n	80139e2 <_dtoa_r+0x5d2>
 8013a68:	9f08      	ldr	r7, [sp, #32]
 8013a6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013a6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a72:	f7ec fea5 	bl	80007c0 <__aeabi_ddiv>
 8013a76:	f7ed f829 	bl	8000acc <__aeabi_d2iz>
 8013a7a:	4604      	mov	r4, r0
 8013a7c:	f7ec fd0c 	bl	8000498 <__aeabi_i2d>
 8013a80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013a84:	f7ec fd72 	bl	800056c <__aeabi_dmul>
 8013a88:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8013a8c:	460b      	mov	r3, r1
 8013a8e:	4602      	mov	r2, r0
 8013a90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a94:	f7ec fbb2 	bl	80001fc <__aeabi_dsub>
 8013a98:	f807 6b01 	strb.w	r6, [r7], #1
 8013a9c:	9e08      	ldr	r6, [sp, #32]
 8013a9e:	9b02      	ldr	r3, [sp, #8]
 8013aa0:	1bbe      	subs	r6, r7, r6
 8013aa2:	42b3      	cmp	r3, r6
 8013aa4:	d13a      	bne.n	8013b1c <_dtoa_r+0x70c>
 8013aa6:	4602      	mov	r2, r0
 8013aa8:	460b      	mov	r3, r1
 8013aaa:	f7ec fba9 	bl	8000200 <__adddf3>
 8013aae:	4602      	mov	r2, r0
 8013ab0:	460b      	mov	r3, r1
 8013ab2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013ab6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013aba:	f7ec ffe7 	bl	8000a8c <__aeabi_dcmpgt>
 8013abe:	bb58      	cbnz	r0, 8013b18 <_dtoa_r+0x708>
 8013ac0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013ac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ac8:	f7ec ffb8 	bl	8000a3c <__aeabi_dcmpeq>
 8013acc:	b108      	cbz	r0, 8013ad2 <_dtoa_r+0x6c2>
 8013ace:	07e1      	lsls	r1, r4, #31
 8013ad0:	d422      	bmi.n	8013b18 <_dtoa_r+0x708>
 8013ad2:	4628      	mov	r0, r5
 8013ad4:	4651      	mov	r1, sl
 8013ad6:	f000 ff33 	bl	8014940 <_Bfree>
 8013ada:	2300      	movs	r3, #0
 8013adc:	703b      	strb	r3, [r7, #0]
 8013ade:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013ae0:	f109 0001 	add.w	r0, r9, #1
 8013ae4:	6018      	str	r0, [r3, #0]
 8013ae6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	f43f acdf 	beq.w	80134ac <_dtoa_r+0x9c>
 8013aee:	601f      	str	r7, [r3, #0]
 8013af0:	e4dc      	b.n	80134ac <_dtoa_r+0x9c>
 8013af2:	4627      	mov	r7, r4
 8013af4:	463b      	mov	r3, r7
 8013af6:	461f      	mov	r7, r3
 8013af8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013afc:	2a39      	cmp	r2, #57	; 0x39
 8013afe:	d107      	bne.n	8013b10 <_dtoa_r+0x700>
 8013b00:	9a08      	ldr	r2, [sp, #32]
 8013b02:	429a      	cmp	r2, r3
 8013b04:	d1f7      	bne.n	8013af6 <_dtoa_r+0x6e6>
 8013b06:	2230      	movs	r2, #48	; 0x30
 8013b08:	9908      	ldr	r1, [sp, #32]
 8013b0a:	f108 0801 	add.w	r8, r8, #1
 8013b0e:	700a      	strb	r2, [r1, #0]
 8013b10:	781a      	ldrb	r2, [r3, #0]
 8013b12:	3201      	adds	r2, #1
 8013b14:	701a      	strb	r2, [r3, #0]
 8013b16:	e79f      	b.n	8013a58 <_dtoa_r+0x648>
 8013b18:	46c8      	mov	r8, r9
 8013b1a:	e7eb      	b.n	8013af4 <_dtoa_r+0x6e4>
 8013b1c:	2200      	movs	r2, #0
 8013b1e:	4b72      	ldr	r3, [pc, #456]	; (8013ce8 <_dtoa_r+0x8d8>)
 8013b20:	f7ec fd24 	bl	800056c <__aeabi_dmul>
 8013b24:	4602      	mov	r2, r0
 8013b26:	460b      	mov	r3, r1
 8013b28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	2300      	movs	r3, #0
 8013b30:	f7ec ff84 	bl	8000a3c <__aeabi_dcmpeq>
 8013b34:	2800      	cmp	r0, #0
 8013b36:	d098      	beq.n	8013a6a <_dtoa_r+0x65a>
 8013b38:	e7cb      	b.n	8013ad2 <_dtoa_r+0x6c2>
 8013b3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013b3c:	2a00      	cmp	r2, #0
 8013b3e:	f000 80cd 	beq.w	8013cdc <_dtoa_r+0x8cc>
 8013b42:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013b44:	2a01      	cmp	r2, #1
 8013b46:	f300 80af 	bgt.w	8013ca8 <_dtoa_r+0x898>
 8013b4a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013b4c:	2a00      	cmp	r2, #0
 8013b4e:	f000 80a7 	beq.w	8013ca0 <_dtoa_r+0x890>
 8013b52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013b56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013b58:	9f06      	ldr	r7, [sp, #24]
 8013b5a:	9a06      	ldr	r2, [sp, #24]
 8013b5c:	2101      	movs	r1, #1
 8013b5e:	441a      	add	r2, r3
 8013b60:	9206      	str	r2, [sp, #24]
 8013b62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b64:	4628      	mov	r0, r5
 8013b66:	441a      	add	r2, r3
 8013b68:	9209      	str	r2, [sp, #36]	; 0x24
 8013b6a:	f000 ffed 	bl	8014b48 <__i2b>
 8013b6e:	4606      	mov	r6, r0
 8013b70:	2f00      	cmp	r7, #0
 8013b72:	dd0c      	ble.n	8013b8e <_dtoa_r+0x77e>
 8013b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	dd09      	ble.n	8013b8e <_dtoa_r+0x77e>
 8013b7a:	42bb      	cmp	r3, r7
 8013b7c:	bfa8      	it	ge
 8013b7e:	463b      	movge	r3, r7
 8013b80:	9a06      	ldr	r2, [sp, #24]
 8013b82:	1aff      	subs	r7, r7, r3
 8013b84:	1ad2      	subs	r2, r2, r3
 8013b86:	9206      	str	r2, [sp, #24]
 8013b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b8a:	1ad3      	subs	r3, r2, r3
 8013b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8013b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b90:	b1f3      	cbz	r3, 8013bd0 <_dtoa_r+0x7c0>
 8013b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	f000 80a9 	beq.w	8013cec <_dtoa_r+0x8dc>
 8013b9a:	2c00      	cmp	r4, #0
 8013b9c:	dd10      	ble.n	8013bc0 <_dtoa_r+0x7b0>
 8013b9e:	4631      	mov	r1, r6
 8013ba0:	4622      	mov	r2, r4
 8013ba2:	4628      	mov	r0, r5
 8013ba4:	f001 f88a 	bl	8014cbc <__pow5mult>
 8013ba8:	4652      	mov	r2, sl
 8013baa:	4601      	mov	r1, r0
 8013bac:	4606      	mov	r6, r0
 8013bae:	4628      	mov	r0, r5
 8013bb0:	f000 ffe0 	bl	8014b74 <__multiply>
 8013bb4:	4680      	mov	r8, r0
 8013bb6:	4651      	mov	r1, sl
 8013bb8:	4628      	mov	r0, r5
 8013bba:	f000 fec1 	bl	8014940 <_Bfree>
 8013bbe:	46c2      	mov	sl, r8
 8013bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013bc2:	1b1a      	subs	r2, r3, r4
 8013bc4:	d004      	beq.n	8013bd0 <_dtoa_r+0x7c0>
 8013bc6:	4651      	mov	r1, sl
 8013bc8:	4628      	mov	r0, r5
 8013bca:	f001 f877 	bl	8014cbc <__pow5mult>
 8013bce:	4682      	mov	sl, r0
 8013bd0:	2101      	movs	r1, #1
 8013bd2:	4628      	mov	r0, r5
 8013bd4:	f000 ffb8 	bl	8014b48 <__i2b>
 8013bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013bda:	4604      	mov	r4, r0
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	f340 8087 	ble.w	8013cf0 <_dtoa_r+0x8e0>
 8013be2:	461a      	mov	r2, r3
 8013be4:	4601      	mov	r1, r0
 8013be6:	4628      	mov	r0, r5
 8013be8:	f001 f868 	bl	8014cbc <__pow5mult>
 8013bec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013bee:	4604      	mov	r4, r0
 8013bf0:	2b01      	cmp	r3, #1
 8013bf2:	f340 8080 	ble.w	8013cf6 <_dtoa_r+0x8e6>
 8013bf6:	f04f 0800 	mov.w	r8, #0
 8013bfa:	6923      	ldr	r3, [r4, #16]
 8013bfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013c00:	6918      	ldr	r0, [r3, #16]
 8013c02:	f000 ff53 	bl	8014aac <__hi0bits>
 8013c06:	f1c0 0020 	rsb	r0, r0, #32
 8013c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c0c:	4418      	add	r0, r3
 8013c0e:	f010 001f 	ands.w	r0, r0, #31
 8013c12:	f000 8092 	beq.w	8013d3a <_dtoa_r+0x92a>
 8013c16:	f1c0 0320 	rsb	r3, r0, #32
 8013c1a:	2b04      	cmp	r3, #4
 8013c1c:	f340 808a 	ble.w	8013d34 <_dtoa_r+0x924>
 8013c20:	f1c0 001c 	rsb	r0, r0, #28
 8013c24:	9b06      	ldr	r3, [sp, #24]
 8013c26:	4407      	add	r7, r0
 8013c28:	4403      	add	r3, r0
 8013c2a:	9306      	str	r3, [sp, #24]
 8013c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c2e:	4403      	add	r3, r0
 8013c30:	9309      	str	r3, [sp, #36]	; 0x24
 8013c32:	9b06      	ldr	r3, [sp, #24]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	dd05      	ble.n	8013c44 <_dtoa_r+0x834>
 8013c38:	4651      	mov	r1, sl
 8013c3a:	461a      	mov	r2, r3
 8013c3c:	4628      	mov	r0, r5
 8013c3e:	f001 f897 	bl	8014d70 <__lshift>
 8013c42:	4682      	mov	sl, r0
 8013c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	dd05      	ble.n	8013c56 <_dtoa_r+0x846>
 8013c4a:	4621      	mov	r1, r4
 8013c4c:	461a      	mov	r2, r3
 8013c4e:	4628      	mov	r0, r5
 8013c50:	f001 f88e 	bl	8014d70 <__lshift>
 8013c54:	4604      	mov	r4, r0
 8013c56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d070      	beq.n	8013d3e <_dtoa_r+0x92e>
 8013c5c:	4621      	mov	r1, r4
 8013c5e:	4650      	mov	r0, sl
 8013c60:	f001 f8f2 	bl	8014e48 <__mcmp>
 8013c64:	2800      	cmp	r0, #0
 8013c66:	da6a      	bge.n	8013d3e <_dtoa_r+0x92e>
 8013c68:	2300      	movs	r3, #0
 8013c6a:	4651      	mov	r1, sl
 8013c6c:	220a      	movs	r2, #10
 8013c6e:	4628      	mov	r0, r5
 8013c70:	f000 fe88 	bl	8014984 <__multadd>
 8013c74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c76:	4682      	mov	sl, r0
 8013c78:	f109 39ff 	add.w	r9, r9, #4294967295
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	f000 8193 	beq.w	8013fa8 <_dtoa_r+0xb98>
 8013c82:	4631      	mov	r1, r6
 8013c84:	2300      	movs	r3, #0
 8013c86:	220a      	movs	r2, #10
 8013c88:	4628      	mov	r0, r5
 8013c8a:	f000 fe7b 	bl	8014984 <__multadd>
 8013c8e:	f1bb 0f00 	cmp.w	fp, #0
 8013c92:	4606      	mov	r6, r0
 8013c94:	f300 8093 	bgt.w	8013dbe <_dtoa_r+0x9ae>
 8013c98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013c9a:	2b02      	cmp	r3, #2
 8013c9c:	dc57      	bgt.n	8013d4e <_dtoa_r+0x93e>
 8013c9e:	e08e      	b.n	8013dbe <_dtoa_r+0x9ae>
 8013ca0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013ca2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013ca6:	e756      	b.n	8013b56 <_dtoa_r+0x746>
 8013ca8:	9b02      	ldr	r3, [sp, #8]
 8013caa:	1e5c      	subs	r4, r3, #1
 8013cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013cae:	42a3      	cmp	r3, r4
 8013cb0:	bfb7      	itett	lt
 8013cb2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8013cb4:	1b1c      	subge	r4, r3, r4
 8013cb6:	1ae2      	sublt	r2, r4, r3
 8013cb8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8013cba:	bfbe      	ittt	lt
 8013cbc:	940a      	strlt	r4, [sp, #40]	; 0x28
 8013cbe:	189b      	addlt	r3, r3, r2
 8013cc0:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013cc2:	9b02      	ldr	r3, [sp, #8]
 8013cc4:	bfb8      	it	lt
 8013cc6:	2400      	movlt	r4, #0
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	bfbb      	ittet	lt
 8013ccc:	9b06      	ldrlt	r3, [sp, #24]
 8013cce:	9a02      	ldrlt	r2, [sp, #8]
 8013cd0:	9f06      	ldrge	r7, [sp, #24]
 8013cd2:	1a9f      	sublt	r7, r3, r2
 8013cd4:	bfac      	ite	ge
 8013cd6:	9b02      	ldrge	r3, [sp, #8]
 8013cd8:	2300      	movlt	r3, #0
 8013cda:	e73e      	b.n	8013b5a <_dtoa_r+0x74a>
 8013cdc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013cde:	9f06      	ldr	r7, [sp, #24]
 8013ce0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013ce2:	e745      	b.n	8013b70 <_dtoa_r+0x760>
 8013ce4:	3fe00000 	.word	0x3fe00000
 8013ce8:	40240000 	.word	0x40240000
 8013cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013cee:	e76a      	b.n	8013bc6 <_dtoa_r+0x7b6>
 8013cf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013cf2:	2b01      	cmp	r3, #1
 8013cf4:	dc19      	bgt.n	8013d2a <_dtoa_r+0x91a>
 8013cf6:	9b04      	ldr	r3, [sp, #16]
 8013cf8:	b9bb      	cbnz	r3, 8013d2a <_dtoa_r+0x91a>
 8013cfa:	9b05      	ldr	r3, [sp, #20]
 8013cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013d00:	b99b      	cbnz	r3, 8013d2a <_dtoa_r+0x91a>
 8013d02:	9b05      	ldr	r3, [sp, #20]
 8013d04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013d08:	0d1b      	lsrs	r3, r3, #20
 8013d0a:	051b      	lsls	r3, r3, #20
 8013d0c:	b183      	cbz	r3, 8013d30 <_dtoa_r+0x920>
 8013d0e:	f04f 0801 	mov.w	r8, #1
 8013d12:	9b06      	ldr	r3, [sp, #24]
 8013d14:	3301      	adds	r3, #1
 8013d16:	9306      	str	r3, [sp, #24]
 8013d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d1a:	3301      	adds	r3, #1
 8013d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8013d1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	f47f af6a 	bne.w	8013bfa <_dtoa_r+0x7ea>
 8013d26:	2001      	movs	r0, #1
 8013d28:	e76f      	b.n	8013c0a <_dtoa_r+0x7fa>
 8013d2a:	f04f 0800 	mov.w	r8, #0
 8013d2e:	e7f6      	b.n	8013d1e <_dtoa_r+0x90e>
 8013d30:	4698      	mov	r8, r3
 8013d32:	e7f4      	b.n	8013d1e <_dtoa_r+0x90e>
 8013d34:	f43f af7d 	beq.w	8013c32 <_dtoa_r+0x822>
 8013d38:	4618      	mov	r0, r3
 8013d3a:	301c      	adds	r0, #28
 8013d3c:	e772      	b.n	8013c24 <_dtoa_r+0x814>
 8013d3e:	9b02      	ldr	r3, [sp, #8]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	dc36      	bgt.n	8013db2 <_dtoa_r+0x9a2>
 8013d44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013d46:	2b02      	cmp	r3, #2
 8013d48:	dd33      	ble.n	8013db2 <_dtoa_r+0x9a2>
 8013d4a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8013d4e:	f1bb 0f00 	cmp.w	fp, #0
 8013d52:	d10d      	bne.n	8013d70 <_dtoa_r+0x960>
 8013d54:	4621      	mov	r1, r4
 8013d56:	465b      	mov	r3, fp
 8013d58:	2205      	movs	r2, #5
 8013d5a:	4628      	mov	r0, r5
 8013d5c:	f000 fe12 	bl	8014984 <__multadd>
 8013d60:	4601      	mov	r1, r0
 8013d62:	4604      	mov	r4, r0
 8013d64:	4650      	mov	r0, sl
 8013d66:	f001 f86f 	bl	8014e48 <__mcmp>
 8013d6a:	2800      	cmp	r0, #0
 8013d6c:	f73f adb6 	bgt.w	80138dc <_dtoa_r+0x4cc>
 8013d70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013d72:	9f08      	ldr	r7, [sp, #32]
 8013d74:	ea6f 0903 	mvn.w	r9, r3
 8013d78:	f04f 0800 	mov.w	r8, #0
 8013d7c:	4621      	mov	r1, r4
 8013d7e:	4628      	mov	r0, r5
 8013d80:	f000 fdde 	bl	8014940 <_Bfree>
 8013d84:	2e00      	cmp	r6, #0
 8013d86:	f43f aea4 	beq.w	8013ad2 <_dtoa_r+0x6c2>
 8013d8a:	f1b8 0f00 	cmp.w	r8, #0
 8013d8e:	d005      	beq.n	8013d9c <_dtoa_r+0x98c>
 8013d90:	45b0      	cmp	r8, r6
 8013d92:	d003      	beq.n	8013d9c <_dtoa_r+0x98c>
 8013d94:	4641      	mov	r1, r8
 8013d96:	4628      	mov	r0, r5
 8013d98:	f000 fdd2 	bl	8014940 <_Bfree>
 8013d9c:	4631      	mov	r1, r6
 8013d9e:	4628      	mov	r0, r5
 8013da0:	f000 fdce 	bl	8014940 <_Bfree>
 8013da4:	e695      	b.n	8013ad2 <_dtoa_r+0x6c2>
 8013da6:	2400      	movs	r4, #0
 8013da8:	4626      	mov	r6, r4
 8013daa:	e7e1      	b.n	8013d70 <_dtoa_r+0x960>
 8013dac:	46c1      	mov	r9, r8
 8013dae:	4626      	mov	r6, r4
 8013db0:	e594      	b.n	80138dc <_dtoa_r+0x4cc>
 8013db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013db4:	f8dd b008 	ldr.w	fp, [sp, #8]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	f000 80fc 	beq.w	8013fb6 <_dtoa_r+0xba6>
 8013dbe:	2f00      	cmp	r7, #0
 8013dc0:	dd05      	ble.n	8013dce <_dtoa_r+0x9be>
 8013dc2:	4631      	mov	r1, r6
 8013dc4:	463a      	mov	r2, r7
 8013dc6:	4628      	mov	r0, r5
 8013dc8:	f000 ffd2 	bl	8014d70 <__lshift>
 8013dcc:	4606      	mov	r6, r0
 8013dce:	f1b8 0f00 	cmp.w	r8, #0
 8013dd2:	d05c      	beq.n	8013e8e <_dtoa_r+0xa7e>
 8013dd4:	4628      	mov	r0, r5
 8013dd6:	6871      	ldr	r1, [r6, #4]
 8013dd8:	f000 fd72 	bl	80148c0 <_Balloc>
 8013ddc:	4607      	mov	r7, r0
 8013dde:	b928      	cbnz	r0, 8013dec <_dtoa_r+0x9dc>
 8013de0:	4602      	mov	r2, r0
 8013de2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013de6:	4b7e      	ldr	r3, [pc, #504]	; (8013fe0 <_dtoa_r+0xbd0>)
 8013de8:	f7ff bb26 	b.w	8013438 <_dtoa_r+0x28>
 8013dec:	6932      	ldr	r2, [r6, #16]
 8013dee:	f106 010c 	add.w	r1, r6, #12
 8013df2:	3202      	adds	r2, #2
 8013df4:	0092      	lsls	r2, r2, #2
 8013df6:	300c      	adds	r0, #12
 8013df8:	f7fd fba4 	bl	8011544 <memcpy>
 8013dfc:	2201      	movs	r2, #1
 8013dfe:	4639      	mov	r1, r7
 8013e00:	4628      	mov	r0, r5
 8013e02:	f000 ffb5 	bl	8014d70 <__lshift>
 8013e06:	46b0      	mov	r8, r6
 8013e08:	4606      	mov	r6, r0
 8013e0a:	9b08      	ldr	r3, [sp, #32]
 8013e0c:	3301      	adds	r3, #1
 8013e0e:	9302      	str	r3, [sp, #8]
 8013e10:	9b08      	ldr	r3, [sp, #32]
 8013e12:	445b      	add	r3, fp
 8013e14:	930a      	str	r3, [sp, #40]	; 0x28
 8013e16:	9b04      	ldr	r3, [sp, #16]
 8013e18:	f003 0301 	and.w	r3, r3, #1
 8013e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8013e1e:	9b02      	ldr	r3, [sp, #8]
 8013e20:	4621      	mov	r1, r4
 8013e22:	4650      	mov	r0, sl
 8013e24:	f103 3bff 	add.w	fp, r3, #4294967295
 8013e28:	f7ff fa62 	bl	80132f0 <quorem>
 8013e2c:	4603      	mov	r3, r0
 8013e2e:	4641      	mov	r1, r8
 8013e30:	3330      	adds	r3, #48	; 0x30
 8013e32:	9004      	str	r0, [sp, #16]
 8013e34:	4650      	mov	r0, sl
 8013e36:	930b      	str	r3, [sp, #44]	; 0x2c
 8013e38:	f001 f806 	bl	8014e48 <__mcmp>
 8013e3c:	4632      	mov	r2, r6
 8013e3e:	9006      	str	r0, [sp, #24]
 8013e40:	4621      	mov	r1, r4
 8013e42:	4628      	mov	r0, r5
 8013e44:	f001 f81c 	bl	8014e80 <__mdiff>
 8013e48:	68c2      	ldr	r2, [r0, #12]
 8013e4a:	4607      	mov	r7, r0
 8013e4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e4e:	bb02      	cbnz	r2, 8013e92 <_dtoa_r+0xa82>
 8013e50:	4601      	mov	r1, r0
 8013e52:	4650      	mov	r0, sl
 8013e54:	f000 fff8 	bl	8014e48 <__mcmp>
 8013e58:	4602      	mov	r2, r0
 8013e5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e5c:	4639      	mov	r1, r7
 8013e5e:	4628      	mov	r0, r5
 8013e60:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8013e64:	f000 fd6c 	bl	8014940 <_Bfree>
 8013e68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013e6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013e6c:	9f02      	ldr	r7, [sp, #8]
 8013e6e:	ea43 0102 	orr.w	r1, r3, r2
 8013e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e74:	430b      	orrs	r3, r1
 8013e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e78:	d10d      	bne.n	8013e96 <_dtoa_r+0xa86>
 8013e7a:	2b39      	cmp	r3, #57	; 0x39
 8013e7c:	d027      	beq.n	8013ece <_dtoa_r+0xabe>
 8013e7e:	9a06      	ldr	r2, [sp, #24]
 8013e80:	2a00      	cmp	r2, #0
 8013e82:	dd01      	ble.n	8013e88 <_dtoa_r+0xa78>
 8013e84:	9b04      	ldr	r3, [sp, #16]
 8013e86:	3331      	adds	r3, #49	; 0x31
 8013e88:	f88b 3000 	strb.w	r3, [fp]
 8013e8c:	e776      	b.n	8013d7c <_dtoa_r+0x96c>
 8013e8e:	4630      	mov	r0, r6
 8013e90:	e7b9      	b.n	8013e06 <_dtoa_r+0x9f6>
 8013e92:	2201      	movs	r2, #1
 8013e94:	e7e2      	b.n	8013e5c <_dtoa_r+0xa4c>
 8013e96:	9906      	ldr	r1, [sp, #24]
 8013e98:	2900      	cmp	r1, #0
 8013e9a:	db04      	blt.n	8013ea6 <_dtoa_r+0xa96>
 8013e9c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8013e9e:	4301      	orrs	r1, r0
 8013ea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ea2:	4301      	orrs	r1, r0
 8013ea4:	d120      	bne.n	8013ee8 <_dtoa_r+0xad8>
 8013ea6:	2a00      	cmp	r2, #0
 8013ea8:	ddee      	ble.n	8013e88 <_dtoa_r+0xa78>
 8013eaa:	4651      	mov	r1, sl
 8013eac:	2201      	movs	r2, #1
 8013eae:	4628      	mov	r0, r5
 8013eb0:	9302      	str	r3, [sp, #8]
 8013eb2:	f000 ff5d 	bl	8014d70 <__lshift>
 8013eb6:	4621      	mov	r1, r4
 8013eb8:	4682      	mov	sl, r0
 8013eba:	f000 ffc5 	bl	8014e48 <__mcmp>
 8013ebe:	2800      	cmp	r0, #0
 8013ec0:	9b02      	ldr	r3, [sp, #8]
 8013ec2:	dc02      	bgt.n	8013eca <_dtoa_r+0xaba>
 8013ec4:	d1e0      	bne.n	8013e88 <_dtoa_r+0xa78>
 8013ec6:	07da      	lsls	r2, r3, #31
 8013ec8:	d5de      	bpl.n	8013e88 <_dtoa_r+0xa78>
 8013eca:	2b39      	cmp	r3, #57	; 0x39
 8013ecc:	d1da      	bne.n	8013e84 <_dtoa_r+0xa74>
 8013ece:	2339      	movs	r3, #57	; 0x39
 8013ed0:	f88b 3000 	strb.w	r3, [fp]
 8013ed4:	463b      	mov	r3, r7
 8013ed6:	461f      	mov	r7, r3
 8013ed8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8013edc:	3b01      	subs	r3, #1
 8013ede:	2a39      	cmp	r2, #57	; 0x39
 8013ee0:	d050      	beq.n	8013f84 <_dtoa_r+0xb74>
 8013ee2:	3201      	adds	r2, #1
 8013ee4:	701a      	strb	r2, [r3, #0]
 8013ee6:	e749      	b.n	8013d7c <_dtoa_r+0x96c>
 8013ee8:	2a00      	cmp	r2, #0
 8013eea:	dd03      	ble.n	8013ef4 <_dtoa_r+0xae4>
 8013eec:	2b39      	cmp	r3, #57	; 0x39
 8013eee:	d0ee      	beq.n	8013ece <_dtoa_r+0xabe>
 8013ef0:	3301      	adds	r3, #1
 8013ef2:	e7c9      	b.n	8013e88 <_dtoa_r+0xa78>
 8013ef4:	9a02      	ldr	r2, [sp, #8]
 8013ef6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013ef8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013efc:	428a      	cmp	r2, r1
 8013efe:	d02a      	beq.n	8013f56 <_dtoa_r+0xb46>
 8013f00:	4651      	mov	r1, sl
 8013f02:	2300      	movs	r3, #0
 8013f04:	220a      	movs	r2, #10
 8013f06:	4628      	mov	r0, r5
 8013f08:	f000 fd3c 	bl	8014984 <__multadd>
 8013f0c:	45b0      	cmp	r8, r6
 8013f0e:	4682      	mov	sl, r0
 8013f10:	f04f 0300 	mov.w	r3, #0
 8013f14:	f04f 020a 	mov.w	r2, #10
 8013f18:	4641      	mov	r1, r8
 8013f1a:	4628      	mov	r0, r5
 8013f1c:	d107      	bne.n	8013f2e <_dtoa_r+0xb1e>
 8013f1e:	f000 fd31 	bl	8014984 <__multadd>
 8013f22:	4680      	mov	r8, r0
 8013f24:	4606      	mov	r6, r0
 8013f26:	9b02      	ldr	r3, [sp, #8]
 8013f28:	3301      	adds	r3, #1
 8013f2a:	9302      	str	r3, [sp, #8]
 8013f2c:	e777      	b.n	8013e1e <_dtoa_r+0xa0e>
 8013f2e:	f000 fd29 	bl	8014984 <__multadd>
 8013f32:	4631      	mov	r1, r6
 8013f34:	4680      	mov	r8, r0
 8013f36:	2300      	movs	r3, #0
 8013f38:	220a      	movs	r2, #10
 8013f3a:	4628      	mov	r0, r5
 8013f3c:	f000 fd22 	bl	8014984 <__multadd>
 8013f40:	4606      	mov	r6, r0
 8013f42:	e7f0      	b.n	8013f26 <_dtoa_r+0xb16>
 8013f44:	f1bb 0f00 	cmp.w	fp, #0
 8013f48:	bfcc      	ite	gt
 8013f4a:	465f      	movgt	r7, fp
 8013f4c:	2701      	movle	r7, #1
 8013f4e:	f04f 0800 	mov.w	r8, #0
 8013f52:	9a08      	ldr	r2, [sp, #32]
 8013f54:	4417      	add	r7, r2
 8013f56:	4651      	mov	r1, sl
 8013f58:	2201      	movs	r2, #1
 8013f5a:	4628      	mov	r0, r5
 8013f5c:	9302      	str	r3, [sp, #8]
 8013f5e:	f000 ff07 	bl	8014d70 <__lshift>
 8013f62:	4621      	mov	r1, r4
 8013f64:	4682      	mov	sl, r0
 8013f66:	f000 ff6f 	bl	8014e48 <__mcmp>
 8013f6a:	2800      	cmp	r0, #0
 8013f6c:	dcb2      	bgt.n	8013ed4 <_dtoa_r+0xac4>
 8013f6e:	d102      	bne.n	8013f76 <_dtoa_r+0xb66>
 8013f70:	9b02      	ldr	r3, [sp, #8]
 8013f72:	07db      	lsls	r3, r3, #31
 8013f74:	d4ae      	bmi.n	8013ed4 <_dtoa_r+0xac4>
 8013f76:	463b      	mov	r3, r7
 8013f78:	461f      	mov	r7, r3
 8013f7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013f7e:	2a30      	cmp	r2, #48	; 0x30
 8013f80:	d0fa      	beq.n	8013f78 <_dtoa_r+0xb68>
 8013f82:	e6fb      	b.n	8013d7c <_dtoa_r+0x96c>
 8013f84:	9a08      	ldr	r2, [sp, #32]
 8013f86:	429a      	cmp	r2, r3
 8013f88:	d1a5      	bne.n	8013ed6 <_dtoa_r+0xac6>
 8013f8a:	2331      	movs	r3, #49	; 0x31
 8013f8c:	f109 0901 	add.w	r9, r9, #1
 8013f90:	7013      	strb	r3, [r2, #0]
 8013f92:	e6f3      	b.n	8013d7c <_dtoa_r+0x96c>
 8013f94:	4b13      	ldr	r3, [pc, #76]	; (8013fe4 <_dtoa_r+0xbd4>)
 8013f96:	f7ff baa7 	b.w	80134e8 <_dtoa_r+0xd8>
 8013f9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	f47f aa80 	bne.w	80134a2 <_dtoa_r+0x92>
 8013fa2:	4b11      	ldr	r3, [pc, #68]	; (8013fe8 <_dtoa_r+0xbd8>)
 8013fa4:	f7ff baa0 	b.w	80134e8 <_dtoa_r+0xd8>
 8013fa8:	f1bb 0f00 	cmp.w	fp, #0
 8013fac:	dc03      	bgt.n	8013fb6 <_dtoa_r+0xba6>
 8013fae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013fb0:	2b02      	cmp	r3, #2
 8013fb2:	f73f aecc 	bgt.w	8013d4e <_dtoa_r+0x93e>
 8013fb6:	9f08      	ldr	r7, [sp, #32]
 8013fb8:	4621      	mov	r1, r4
 8013fba:	4650      	mov	r0, sl
 8013fbc:	f7ff f998 	bl	80132f0 <quorem>
 8013fc0:	9a08      	ldr	r2, [sp, #32]
 8013fc2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013fc6:	f807 3b01 	strb.w	r3, [r7], #1
 8013fca:	1aba      	subs	r2, r7, r2
 8013fcc:	4593      	cmp	fp, r2
 8013fce:	ddb9      	ble.n	8013f44 <_dtoa_r+0xb34>
 8013fd0:	4651      	mov	r1, sl
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	220a      	movs	r2, #10
 8013fd6:	4628      	mov	r0, r5
 8013fd8:	f000 fcd4 	bl	8014984 <__multadd>
 8013fdc:	4682      	mov	sl, r0
 8013fde:	e7eb      	b.n	8013fb8 <_dtoa_r+0xba8>
 8013fe0:	08016054 	.word	0x08016054
 8013fe4:	08015e54 	.word	0x08015e54
 8013fe8:	08015fd1 	.word	0x08015fd1

08013fec <__sflush_r>:
 8013fec:	898a      	ldrh	r2, [r1, #12]
 8013fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ff2:	4605      	mov	r5, r0
 8013ff4:	0710      	lsls	r0, r2, #28
 8013ff6:	460c      	mov	r4, r1
 8013ff8:	d458      	bmi.n	80140ac <__sflush_r+0xc0>
 8013ffa:	684b      	ldr	r3, [r1, #4]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	dc05      	bgt.n	801400c <__sflush_r+0x20>
 8014000:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014002:	2b00      	cmp	r3, #0
 8014004:	dc02      	bgt.n	801400c <__sflush_r+0x20>
 8014006:	2000      	movs	r0, #0
 8014008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801400c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801400e:	2e00      	cmp	r6, #0
 8014010:	d0f9      	beq.n	8014006 <__sflush_r+0x1a>
 8014012:	2300      	movs	r3, #0
 8014014:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014018:	682f      	ldr	r7, [r5, #0]
 801401a:	602b      	str	r3, [r5, #0]
 801401c:	d032      	beq.n	8014084 <__sflush_r+0x98>
 801401e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014020:	89a3      	ldrh	r3, [r4, #12]
 8014022:	075a      	lsls	r2, r3, #29
 8014024:	d505      	bpl.n	8014032 <__sflush_r+0x46>
 8014026:	6863      	ldr	r3, [r4, #4]
 8014028:	1ac0      	subs	r0, r0, r3
 801402a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801402c:	b10b      	cbz	r3, 8014032 <__sflush_r+0x46>
 801402e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014030:	1ac0      	subs	r0, r0, r3
 8014032:	2300      	movs	r3, #0
 8014034:	4602      	mov	r2, r0
 8014036:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014038:	4628      	mov	r0, r5
 801403a:	6a21      	ldr	r1, [r4, #32]
 801403c:	47b0      	blx	r6
 801403e:	1c43      	adds	r3, r0, #1
 8014040:	89a3      	ldrh	r3, [r4, #12]
 8014042:	d106      	bne.n	8014052 <__sflush_r+0x66>
 8014044:	6829      	ldr	r1, [r5, #0]
 8014046:	291d      	cmp	r1, #29
 8014048:	d82c      	bhi.n	80140a4 <__sflush_r+0xb8>
 801404a:	4a2a      	ldr	r2, [pc, #168]	; (80140f4 <__sflush_r+0x108>)
 801404c:	40ca      	lsrs	r2, r1
 801404e:	07d6      	lsls	r6, r2, #31
 8014050:	d528      	bpl.n	80140a4 <__sflush_r+0xb8>
 8014052:	2200      	movs	r2, #0
 8014054:	6062      	str	r2, [r4, #4]
 8014056:	6922      	ldr	r2, [r4, #16]
 8014058:	04d9      	lsls	r1, r3, #19
 801405a:	6022      	str	r2, [r4, #0]
 801405c:	d504      	bpl.n	8014068 <__sflush_r+0x7c>
 801405e:	1c42      	adds	r2, r0, #1
 8014060:	d101      	bne.n	8014066 <__sflush_r+0x7a>
 8014062:	682b      	ldr	r3, [r5, #0]
 8014064:	b903      	cbnz	r3, 8014068 <__sflush_r+0x7c>
 8014066:	6560      	str	r0, [r4, #84]	; 0x54
 8014068:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801406a:	602f      	str	r7, [r5, #0]
 801406c:	2900      	cmp	r1, #0
 801406e:	d0ca      	beq.n	8014006 <__sflush_r+0x1a>
 8014070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014074:	4299      	cmp	r1, r3
 8014076:	d002      	beq.n	801407e <__sflush_r+0x92>
 8014078:	4628      	mov	r0, r5
 801407a:	f7fd fa79 	bl	8011570 <_free_r>
 801407e:	2000      	movs	r0, #0
 8014080:	6360      	str	r0, [r4, #52]	; 0x34
 8014082:	e7c1      	b.n	8014008 <__sflush_r+0x1c>
 8014084:	6a21      	ldr	r1, [r4, #32]
 8014086:	2301      	movs	r3, #1
 8014088:	4628      	mov	r0, r5
 801408a:	47b0      	blx	r6
 801408c:	1c41      	adds	r1, r0, #1
 801408e:	d1c7      	bne.n	8014020 <__sflush_r+0x34>
 8014090:	682b      	ldr	r3, [r5, #0]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d0c4      	beq.n	8014020 <__sflush_r+0x34>
 8014096:	2b1d      	cmp	r3, #29
 8014098:	d001      	beq.n	801409e <__sflush_r+0xb2>
 801409a:	2b16      	cmp	r3, #22
 801409c:	d101      	bne.n	80140a2 <__sflush_r+0xb6>
 801409e:	602f      	str	r7, [r5, #0]
 80140a0:	e7b1      	b.n	8014006 <__sflush_r+0x1a>
 80140a2:	89a3      	ldrh	r3, [r4, #12]
 80140a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80140a8:	81a3      	strh	r3, [r4, #12]
 80140aa:	e7ad      	b.n	8014008 <__sflush_r+0x1c>
 80140ac:	690f      	ldr	r7, [r1, #16]
 80140ae:	2f00      	cmp	r7, #0
 80140b0:	d0a9      	beq.n	8014006 <__sflush_r+0x1a>
 80140b2:	0793      	lsls	r3, r2, #30
 80140b4:	bf18      	it	ne
 80140b6:	2300      	movne	r3, #0
 80140b8:	680e      	ldr	r6, [r1, #0]
 80140ba:	bf08      	it	eq
 80140bc:	694b      	ldreq	r3, [r1, #20]
 80140be:	eba6 0807 	sub.w	r8, r6, r7
 80140c2:	600f      	str	r7, [r1, #0]
 80140c4:	608b      	str	r3, [r1, #8]
 80140c6:	f1b8 0f00 	cmp.w	r8, #0
 80140ca:	dd9c      	ble.n	8014006 <__sflush_r+0x1a>
 80140cc:	4643      	mov	r3, r8
 80140ce:	463a      	mov	r2, r7
 80140d0:	4628      	mov	r0, r5
 80140d2:	6a21      	ldr	r1, [r4, #32]
 80140d4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80140d6:	47b0      	blx	r6
 80140d8:	2800      	cmp	r0, #0
 80140da:	dc06      	bgt.n	80140ea <__sflush_r+0xfe>
 80140dc:	89a3      	ldrh	r3, [r4, #12]
 80140de:	f04f 30ff 	mov.w	r0, #4294967295
 80140e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80140e6:	81a3      	strh	r3, [r4, #12]
 80140e8:	e78e      	b.n	8014008 <__sflush_r+0x1c>
 80140ea:	4407      	add	r7, r0
 80140ec:	eba8 0800 	sub.w	r8, r8, r0
 80140f0:	e7e9      	b.n	80140c6 <__sflush_r+0xda>
 80140f2:	bf00      	nop
 80140f4:	20400001 	.word	0x20400001

080140f8 <_fflush_r>:
 80140f8:	b538      	push	{r3, r4, r5, lr}
 80140fa:	690b      	ldr	r3, [r1, #16]
 80140fc:	4605      	mov	r5, r0
 80140fe:	460c      	mov	r4, r1
 8014100:	b913      	cbnz	r3, 8014108 <_fflush_r+0x10>
 8014102:	2500      	movs	r5, #0
 8014104:	4628      	mov	r0, r5
 8014106:	bd38      	pop	{r3, r4, r5, pc}
 8014108:	b118      	cbz	r0, 8014112 <_fflush_r+0x1a>
 801410a:	6983      	ldr	r3, [r0, #24]
 801410c:	b90b      	cbnz	r3, 8014112 <_fflush_r+0x1a>
 801410e:	f7fd f943 	bl	8011398 <__sinit>
 8014112:	4b14      	ldr	r3, [pc, #80]	; (8014164 <_fflush_r+0x6c>)
 8014114:	429c      	cmp	r4, r3
 8014116:	d11b      	bne.n	8014150 <_fflush_r+0x58>
 8014118:	686c      	ldr	r4, [r5, #4]
 801411a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d0ef      	beq.n	8014102 <_fflush_r+0xa>
 8014122:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014124:	07d0      	lsls	r0, r2, #31
 8014126:	d404      	bmi.n	8014132 <_fflush_r+0x3a>
 8014128:	0599      	lsls	r1, r3, #22
 801412a:	d402      	bmi.n	8014132 <_fflush_r+0x3a>
 801412c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801412e:	f7fd f9f6 	bl	801151e <__retarget_lock_acquire_recursive>
 8014132:	4628      	mov	r0, r5
 8014134:	4621      	mov	r1, r4
 8014136:	f7ff ff59 	bl	8013fec <__sflush_r>
 801413a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801413c:	4605      	mov	r5, r0
 801413e:	07da      	lsls	r2, r3, #31
 8014140:	d4e0      	bmi.n	8014104 <_fflush_r+0xc>
 8014142:	89a3      	ldrh	r3, [r4, #12]
 8014144:	059b      	lsls	r3, r3, #22
 8014146:	d4dd      	bmi.n	8014104 <_fflush_r+0xc>
 8014148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801414a:	f7fd f9e9 	bl	8011520 <__retarget_lock_release_recursive>
 801414e:	e7d9      	b.n	8014104 <_fflush_r+0xc>
 8014150:	4b05      	ldr	r3, [pc, #20]	; (8014168 <_fflush_r+0x70>)
 8014152:	429c      	cmp	r4, r3
 8014154:	d101      	bne.n	801415a <_fflush_r+0x62>
 8014156:	68ac      	ldr	r4, [r5, #8]
 8014158:	e7df      	b.n	801411a <_fflush_r+0x22>
 801415a:	4b04      	ldr	r3, [pc, #16]	; (801416c <_fflush_r+0x74>)
 801415c:	429c      	cmp	r4, r3
 801415e:	bf08      	it	eq
 8014160:	68ec      	ldreq	r4, [r5, #12]
 8014162:	e7da      	b.n	801411a <_fflush_r+0x22>
 8014164:	08015e00 	.word	0x08015e00
 8014168:	08015e20 	.word	0x08015e20
 801416c:	08015de0 	.word	0x08015de0

08014170 <rshift>:
 8014170:	6903      	ldr	r3, [r0, #16]
 8014172:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014176:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801417a:	f100 0414 	add.w	r4, r0, #20
 801417e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014182:	dd46      	ble.n	8014212 <rshift+0xa2>
 8014184:	f011 011f 	ands.w	r1, r1, #31
 8014188:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801418c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014190:	d10c      	bne.n	80141ac <rshift+0x3c>
 8014192:	4629      	mov	r1, r5
 8014194:	f100 0710 	add.w	r7, r0, #16
 8014198:	42b1      	cmp	r1, r6
 801419a:	d335      	bcc.n	8014208 <rshift+0x98>
 801419c:	1a9b      	subs	r3, r3, r2
 801419e:	009b      	lsls	r3, r3, #2
 80141a0:	1eea      	subs	r2, r5, #3
 80141a2:	4296      	cmp	r6, r2
 80141a4:	bf38      	it	cc
 80141a6:	2300      	movcc	r3, #0
 80141a8:	4423      	add	r3, r4
 80141aa:	e015      	b.n	80141d8 <rshift+0x68>
 80141ac:	46a1      	mov	r9, r4
 80141ae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80141b2:	f1c1 0820 	rsb	r8, r1, #32
 80141b6:	40cf      	lsrs	r7, r1
 80141b8:	f105 0e04 	add.w	lr, r5, #4
 80141bc:	4576      	cmp	r6, lr
 80141be:	46f4      	mov	ip, lr
 80141c0:	d816      	bhi.n	80141f0 <rshift+0x80>
 80141c2:	1a9b      	subs	r3, r3, r2
 80141c4:	009a      	lsls	r2, r3, #2
 80141c6:	3a04      	subs	r2, #4
 80141c8:	3501      	adds	r5, #1
 80141ca:	42ae      	cmp	r6, r5
 80141cc:	bf38      	it	cc
 80141ce:	2200      	movcc	r2, #0
 80141d0:	18a3      	adds	r3, r4, r2
 80141d2:	50a7      	str	r7, [r4, r2]
 80141d4:	b107      	cbz	r7, 80141d8 <rshift+0x68>
 80141d6:	3304      	adds	r3, #4
 80141d8:	42a3      	cmp	r3, r4
 80141da:	eba3 0204 	sub.w	r2, r3, r4
 80141de:	bf08      	it	eq
 80141e0:	2300      	moveq	r3, #0
 80141e2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80141e6:	6102      	str	r2, [r0, #16]
 80141e8:	bf08      	it	eq
 80141ea:	6143      	streq	r3, [r0, #20]
 80141ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141f0:	f8dc c000 	ldr.w	ip, [ip]
 80141f4:	fa0c fc08 	lsl.w	ip, ip, r8
 80141f8:	ea4c 0707 	orr.w	r7, ip, r7
 80141fc:	f849 7b04 	str.w	r7, [r9], #4
 8014200:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014204:	40cf      	lsrs	r7, r1
 8014206:	e7d9      	b.n	80141bc <rshift+0x4c>
 8014208:	f851 cb04 	ldr.w	ip, [r1], #4
 801420c:	f847 cf04 	str.w	ip, [r7, #4]!
 8014210:	e7c2      	b.n	8014198 <rshift+0x28>
 8014212:	4623      	mov	r3, r4
 8014214:	e7e0      	b.n	80141d8 <rshift+0x68>

08014216 <__hexdig_fun>:
 8014216:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801421a:	2b09      	cmp	r3, #9
 801421c:	d802      	bhi.n	8014224 <__hexdig_fun+0xe>
 801421e:	3820      	subs	r0, #32
 8014220:	b2c0      	uxtb	r0, r0
 8014222:	4770      	bx	lr
 8014224:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014228:	2b05      	cmp	r3, #5
 801422a:	d801      	bhi.n	8014230 <__hexdig_fun+0x1a>
 801422c:	3847      	subs	r0, #71	; 0x47
 801422e:	e7f7      	b.n	8014220 <__hexdig_fun+0xa>
 8014230:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014234:	2b05      	cmp	r3, #5
 8014236:	d801      	bhi.n	801423c <__hexdig_fun+0x26>
 8014238:	3827      	subs	r0, #39	; 0x27
 801423a:	e7f1      	b.n	8014220 <__hexdig_fun+0xa>
 801423c:	2000      	movs	r0, #0
 801423e:	4770      	bx	lr

08014240 <__gethex>:
 8014240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014244:	b08b      	sub	sp, #44	; 0x2c
 8014246:	9306      	str	r3, [sp, #24]
 8014248:	4bb9      	ldr	r3, [pc, #740]	; (8014530 <__gethex+0x2f0>)
 801424a:	9002      	str	r0, [sp, #8]
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	468b      	mov	fp, r1
 8014250:	4618      	mov	r0, r3
 8014252:	4690      	mov	r8, r2
 8014254:	9303      	str	r3, [sp, #12]
 8014256:	f7eb ffc5 	bl	80001e4 <strlen>
 801425a:	4682      	mov	sl, r0
 801425c:	9b03      	ldr	r3, [sp, #12]
 801425e:	f8db 2000 	ldr.w	r2, [fp]
 8014262:	4403      	add	r3, r0
 8014264:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014268:	9307      	str	r3, [sp, #28]
 801426a:	1c93      	adds	r3, r2, #2
 801426c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014270:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014274:	32fe      	adds	r2, #254	; 0xfe
 8014276:	18d1      	adds	r1, r2, r3
 8014278:	461f      	mov	r7, r3
 801427a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801427e:	9101      	str	r1, [sp, #4]
 8014280:	2830      	cmp	r0, #48	; 0x30
 8014282:	d0f8      	beq.n	8014276 <__gethex+0x36>
 8014284:	f7ff ffc7 	bl	8014216 <__hexdig_fun>
 8014288:	4604      	mov	r4, r0
 801428a:	2800      	cmp	r0, #0
 801428c:	d13a      	bne.n	8014304 <__gethex+0xc4>
 801428e:	4652      	mov	r2, sl
 8014290:	4638      	mov	r0, r7
 8014292:	9903      	ldr	r1, [sp, #12]
 8014294:	f001 f94e 	bl	8015534 <strncmp>
 8014298:	4605      	mov	r5, r0
 801429a:	2800      	cmp	r0, #0
 801429c:	d166      	bne.n	801436c <__gethex+0x12c>
 801429e:	f817 000a 	ldrb.w	r0, [r7, sl]
 80142a2:	eb07 060a 	add.w	r6, r7, sl
 80142a6:	f7ff ffb6 	bl	8014216 <__hexdig_fun>
 80142aa:	2800      	cmp	r0, #0
 80142ac:	d060      	beq.n	8014370 <__gethex+0x130>
 80142ae:	4633      	mov	r3, r6
 80142b0:	7818      	ldrb	r0, [r3, #0]
 80142b2:	461f      	mov	r7, r3
 80142b4:	2830      	cmp	r0, #48	; 0x30
 80142b6:	f103 0301 	add.w	r3, r3, #1
 80142ba:	d0f9      	beq.n	80142b0 <__gethex+0x70>
 80142bc:	f7ff ffab 	bl	8014216 <__hexdig_fun>
 80142c0:	2301      	movs	r3, #1
 80142c2:	fab0 f480 	clz	r4, r0
 80142c6:	4635      	mov	r5, r6
 80142c8:	0964      	lsrs	r4, r4, #5
 80142ca:	9301      	str	r3, [sp, #4]
 80142cc:	463a      	mov	r2, r7
 80142ce:	4616      	mov	r6, r2
 80142d0:	7830      	ldrb	r0, [r6, #0]
 80142d2:	3201      	adds	r2, #1
 80142d4:	f7ff ff9f 	bl	8014216 <__hexdig_fun>
 80142d8:	2800      	cmp	r0, #0
 80142da:	d1f8      	bne.n	80142ce <__gethex+0x8e>
 80142dc:	4652      	mov	r2, sl
 80142de:	4630      	mov	r0, r6
 80142e0:	9903      	ldr	r1, [sp, #12]
 80142e2:	f001 f927 	bl	8015534 <strncmp>
 80142e6:	b980      	cbnz	r0, 801430a <__gethex+0xca>
 80142e8:	b94d      	cbnz	r5, 80142fe <__gethex+0xbe>
 80142ea:	eb06 050a 	add.w	r5, r6, sl
 80142ee:	462a      	mov	r2, r5
 80142f0:	4616      	mov	r6, r2
 80142f2:	7830      	ldrb	r0, [r6, #0]
 80142f4:	3201      	adds	r2, #1
 80142f6:	f7ff ff8e 	bl	8014216 <__hexdig_fun>
 80142fa:	2800      	cmp	r0, #0
 80142fc:	d1f8      	bne.n	80142f0 <__gethex+0xb0>
 80142fe:	1bad      	subs	r5, r5, r6
 8014300:	00ad      	lsls	r5, r5, #2
 8014302:	e004      	b.n	801430e <__gethex+0xce>
 8014304:	2400      	movs	r4, #0
 8014306:	4625      	mov	r5, r4
 8014308:	e7e0      	b.n	80142cc <__gethex+0x8c>
 801430a:	2d00      	cmp	r5, #0
 801430c:	d1f7      	bne.n	80142fe <__gethex+0xbe>
 801430e:	7833      	ldrb	r3, [r6, #0]
 8014310:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014314:	2b50      	cmp	r3, #80	; 0x50
 8014316:	d139      	bne.n	801438c <__gethex+0x14c>
 8014318:	7873      	ldrb	r3, [r6, #1]
 801431a:	2b2b      	cmp	r3, #43	; 0x2b
 801431c:	d02a      	beq.n	8014374 <__gethex+0x134>
 801431e:	2b2d      	cmp	r3, #45	; 0x2d
 8014320:	d02c      	beq.n	801437c <__gethex+0x13c>
 8014322:	f04f 0900 	mov.w	r9, #0
 8014326:	1c71      	adds	r1, r6, #1
 8014328:	7808      	ldrb	r0, [r1, #0]
 801432a:	f7ff ff74 	bl	8014216 <__hexdig_fun>
 801432e:	1e43      	subs	r3, r0, #1
 8014330:	b2db      	uxtb	r3, r3
 8014332:	2b18      	cmp	r3, #24
 8014334:	d82a      	bhi.n	801438c <__gethex+0x14c>
 8014336:	f1a0 0210 	sub.w	r2, r0, #16
 801433a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801433e:	f7ff ff6a 	bl	8014216 <__hexdig_fun>
 8014342:	1e43      	subs	r3, r0, #1
 8014344:	b2db      	uxtb	r3, r3
 8014346:	2b18      	cmp	r3, #24
 8014348:	d91b      	bls.n	8014382 <__gethex+0x142>
 801434a:	f1b9 0f00 	cmp.w	r9, #0
 801434e:	d000      	beq.n	8014352 <__gethex+0x112>
 8014350:	4252      	negs	r2, r2
 8014352:	4415      	add	r5, r2
 8014354:	f8cb 1000 	str.w	r1, [fp]
 8014358:	b1d4      	cbz	r4, 8014390 <__gethex+0x150>
 801435a:	9b01      	ldr	r3, [sp, #4]
 801435c:	2b00      	cmp	r3, #0
 801435e:	bf14      	ite	ne
 8014360:	2700      	movne	r7, #0
 8014362:	2706      	moveq	r7, #6
 8014364:	4638      	mov	r0, r7
 8014366:	b00b      	add	sp, #44	; 0x2c
 8014368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801436c:	463e      	mov	r6, r7
 801436e:	4625      	mov	r5, r4
 8014370:	2401      	movs	r4, #1
 8014372:	e7cc      	b.n	801430e <__gethex+0xce>
 8014374:	f04f 0900 	mov.w	r9, #0
 8014378:	1cb1      	adds	r1, r6, #2
 801437a:	e7d5      	b.n	8014328 <__gethex+0xe8>
 801437c:	f04f 0901 	mov.w	r9, #1
 8014380:	e7fa      	b.n	8014378 <__gethex+0x138>
 8014382:	230a      	movs	r3, #10
 8014384:	fb03 0202 	mla	r2, r3, r2, r0
 8014388:	3a10      	subs	r2, #16
 801438a:	e7d6      	b.n	801433a <__gethex+0xfa>
 801438c:	4631      	mov	r1, r6
 801438e:	e7e1      	b.n	8014354 <__gethex+0x114>
 8014390:	4621      	mov	r1, r4
 8014392:	1bf3      	subs	r3, r6, r7
 8014394:	3b01      	subs	r3, #1
 8014396:	2b07      	cmp	r3, #7
 8014398:	dc0a      	bgt.n	80143b0 <__gethex+0x170>
 801439a:	9802      	ldr	r0, [sp, #8]
 801439c:	f000 fa90 	bl	80148c0 <_Balloc>
 80143a0:	4604      	mov	r4, r0
 80143a2:	b940      	cbnz	r0, 80143b6 <__gethex+0x176>
 80143a4:	4602      	mov	r2, r0
 80143a6:	21de      	movs	r1, #222	; 0xde
 80143a8:	4b62      	ldr	r3, [pc, #392]	; (8014534 <__gethex+0x2f4>)
 80143aa:	4863      	ldr	r0, [pc, #396]	; (8014538 <__gethex+0x2f8>)
 80143ac:	f001 f8e2 	bl	8015574 <__assert_func>
 80143b0:	3101      	adds	r1, #1
 80143b2:	105b      	asrs	r3, r3, #1
 80143b4:	e7ef      	b.n	8014396 <__gethex+0x156>
 80143b6:	f04f 0b00 	mov.w	fp, #0
 80143ba:	f100 0914 	add.w	r9, r0, #20
 80143be:	f1ca 0301 	rsb	r3, sl, #1
 80143c2:	f8cd 9010 	str.w	r9, [sp, #16]
 80143c6:	f8cd b004 	str.w	fp, [sp, #4]
 80143ca:	9308      	str	r3, [sp, #32]
 80143cc:	42b7      	cmp	r7, r6
 80143ce:	d33f      	bcc.n	8014450 <__gethex+0x210>
 80143d0:	9f04      	ldr	r7, [sp, #16]
 80143d2:	9b01      	ldr	r3, [sp, #4]
 80143d4:	f847 3b04 	str.w	r3, [r7], #4
 80143d8:	eba7 0709 	sub.w	r7, r7, r9
 80143dc:	10bf      	asrs	r7, r7, #2
 80143de:	6127      	str	r7, [r4, #16]
 80143e0:	4618      	mov	r0, r3
 80143e2:	f000 fb63 	bl	8014aac <__hi0bits>
 80143e6:	017f      	lsls	r7, r7, #5
 80143e8:	f8d8 6000 	ldr.w	r6, [r8]
 80143ec:	1a3f      	subs	r7, r7, r0
 80143ee:	42b7      	cmp	r7, r6
 80143f0:	dd62      	ble.n	80144b8 <__gethex+0x278>
 80143f2:	1bbf      	subs	r7, r7, r6
 80143f4:	4639      	mov	r1, r7
 80143f6:	4620      	mov	r0, r4
 80143f8:	f000 fef9 	bl	80151ee <__any_on>
 80143fc:	4682      	mov	sl, r0
 80143fe:	b1a8      	cbz	r0, 801442c <__gethex+0x1ec>
 8014400:	f04f 0a01 	mov.w	sl, #1
 8014404:	1e7b      	subs	r3, r7, #1
 8014406:	1159      	asrs	r1, r3, #5
 8014408:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801440c:	f003 021f 	and.w	r2, r3, #31
 8014410:	fa0a f202 	lsl.w	r2, sl, r2
 8014414:	420a      	tst	r2, r1
 8014416:	d009      	beq.n	801442c <__gethex+0x1ec>
 8014418:	4553      	cmp	r3, sl
 801441a:	dd05      	ble.n	8014428 <__gethex+0x1e8>
 801441c:	4620      	mov	r0, r4
 801441e:	1eb9      	subs	r1, r7, #2
 8014420:	f000 fee5 	bl	80151ee <__any_on>
 8014424:	2800      	cmp	r0, #0
 8014426:	d144      	bne.n	80144b2 <__gethex+0x272>
 8014428:	f04f 0a02 	mov.w	sl, #2
 801442c:	4639      	mov	r1, r7
 801442e:	4620      	mov	r0, r4
 8014430:	f7ff fe9e 	bl	8014170 <rshift>
 8014434:	443d      	add	r5, r7
 8014436:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801443a:	42ab      	cmp	r3, r5
 801443c:	da4a      	bge.n	80144d4 <__gethex+0x294>
 801443e:	4621      	mov	r1, r4
 8014440:	9802      	ldr	r0, [sp, #8]
 8014442:	f000 fa7d 	bl	8014940 <_Bfree>
 8014446:	2300      	movs	r3, #0
 8014448:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801444a:	27a3      	movs	r7, #163	; 0xa3
 801444c:	6013      	str	r3, [r2, #0]
 801444e:	e789      	b.n	8014364 <__gethex+0x124>
 8014450:	1e73      	subs	r3, r6, #1
 8014452:	9a07      	ldr	r2, [sp, #28]
 8014454:	9305      	str	r3, [sp, #20]
 8014456:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801445a:	4293      	cmp	r3, r2
 801445c:	d019      	beq.n	8014492 <__gethex+0x252>
 801445e:	f1bb 0f20 	cmp.w	fp, #32
 8014462:	d107      	bne.n	8014474 <__gethex+0x234>
 8014464:	9b04      	ldr	r3, [sp, #16]
 8014466:	9a01      	ldr	r2, [sp, #4]
 8014468:	f843 2b04 	str.w	r2, [r3], #4
 801446c:	9304      	str	r3, [sp, #16]
 801446e:	2300      	movs	r3, #0
 8014470:	469b      	mov	fp, r3
 8014472:	9301      	str	r3, [sp, #4]
 8014474:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014478:	f7ff fecd 	bl	8014216 <__hexdig_fun>
 801447c:	9b01      	ldr	r3, [sp, #4]
 801447e:	f000 000f 	and.w	r0, r0, #15
 8014482:	fa00 f00b 	lsl.w	r0, r0, fp
 8014486:	4303      	orrs	r3, r0
 8014488:	9301      	str	r3, [sp, #4]
 801448a:	f10b 0b04 	add.w	fp, fp, #4
 801448e:	9b05      	ldr	r3, [sp, #20]
 8014490:	e00d      	b.n	80144ae <__gethex+0x26e>
 8014492:	9b05      	ldr	r3, [sp, #20]
 8014494:	9a08      	ldr	r2, [sp, #32]
 8014496:	4413      	add	r3, r2
 8014498:	42bb      	cmp	r3, r7
 801449a:	d3e0      	bcc.n	801445e <__gethex+0x21e>
 801449c:	4618      	mov	r0, r3
 801449e:	4652      	mov	r2, sl
 80144a0:	9903      	ldr	r1, [sp, #12]
 80144a2:	9309      	str	r3, [sp, #36]	; 0x24
 80144a4:	f001 f846 	bl	8015534 <strncmp>
 80144a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144aa:	2800      	cmp	r0, #0
 80144ac:	d1d7      	bne.n	801445e <__gethex+0x21e>
 80144ae:	461e      	mov	r6, r3
 80144b0:	e78c      	b.n	80143cc <__gethex+0x18c>
 80144b2:	f04f 0a03 	mov.w	sl, #3
 80144b6:	e7b9      	b.n	801442c <__gethex+0x1ec>
 80144b8:	da09      	bge.n	80144ce <__gethex+0x28e>
 80144ba:	1bf7      	subs	r7, r6, r7
 80144bc:	4621      	mov	r1, r4
 80144be:	463a      	mov	r2, r7
 80144c0:	9802      	ldr	r0, [sp, #8]
 80144c2:	f000 fc55 	bl	8014d70 <__lshift>
 80144c6:	4604      	mov	r4, r0
 80144c8:	1bed      	subs	r5, r5, r7
 80144ca:	f100 0914 	add.w	r9, r0, #20
 80144ce:	f04f 0a00 	mov.w	sl, #0
 80144d2:	e7b0      	b.n	8014436 <__gethex+0x1f6>
 80144d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80144d8:	42a8      	cmp	r0, r5
 80144da:	dd71      	ble.n	80145c0 <__gethex+0x380>
 80144dc:	1b45      	subs	r5, r0, r5
 80144de:	42ae      	cmp	r6, r5
 80144e0:	dc34      	bgt.n	801454c <__gethex+0x30c>
 80144e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80144e6:	2b02      	cmp	r3, #2
 80144e8:	d028      	beq.n	801453c <__gethex+0x2fc>
 80144ea:	2b03      	cmp	r3, #3
 80144ec:	d02a      	beq.n	8014544 <__gethex+0x304>
 80144ee:	2b01      	cmp	r3, #1
 80144f0:	d115      	bne.n	801451e <__gethex+0x2de>
 80144f2:	42ae      	cmp	r6, r5
 80144f4:	d113      	bne.n	801451e <__gethex+0x2de>
 80144f6:	2e01      	cmp	r6, #1
 80144f8:	d10b      	bne.n	8014512 <__gethex+0x2d2>
 80144fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80144fe:	9a06      	ldr	r2, [sp, #24]
 8014500:	2762      	movs	r7, #98	; 0x62
 8014502:	6013      	str	r3, [r2, #0]
 8014504:	2301      	movs	r3, #1
 8014506:	6123      	str	r3, [r4, #16]
 8014508:	f8c9 3000 	str.w	r3, [r9]
 801450c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801450e:	601c      	str	r4, [r3, #0]
 8014510:	e728      	b.n	8014364 <__gethex+0x124>
 8014512:	4620      	mov	r0, r4
 8014514:	1e71      	subs	r1, r6, #1
 8014516:	f000 fe6a 	bl	80151ee <__any_on>
 801451a:	2800      	cmp	r0, #0
 801451c:	d1ed      	bne.n	80144fa <__gethex+0x2ba>
 801451e:	4621      	mov	r1, r4
 8014520:	9802      	ldr	r0, [sp, #8]
 8014522:	f000 fa0d 	bl	8014940 <_Bfree>
 8014526:	2300      	movs	r3, #0
 8014528:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801452a:	2750      	movs	r7, #80	; 0x50
 801452c:	6013      	str	r3, [r2, #0]
 801452e:	e719      	b.n	8014364 <__gethex+0x124>
 8014530:	080160d0 	.word	0x080160d0
 8014534:	08016054 	.word	0x08016054
 8014538:	08016065 	.word	0x08016065
 801453c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801453e:	2b00      	cmp	r3, #0
 8014540:	d1ed      	bne.n	801451e <__gethex+0x2de>
 8014542:	e7da      	b.n	80144fa <__gethex+0x2ba>
 8014544:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014546:	2b00      	cmp	r3, #0
 8014548:	d1d7      	bne.n	80144fa <__gethex+0x2ba>
 801454a:	e7e8      	b.n	801451e <__gethex+0x2de>
 801454c:	1e6f      	subs	r7, r5, #1
 801454e:	f1ba 0f00 	cmp.w	sl, #0
 8014552:	d132      	bne.n	80145ba <__gethex+0x37a>
 8014554:	b127      	cbz	r7, 8014560 <__gethex+0x320>
 8014556:	4639      	mov	r1, r7
 8014558:	4620      	mov	r0, r4
 801455a:	f000 fe48 	bl	80151ee <__any_on>
 801455e:	4682      	mov	sl, r0
 8014560:	2101      	movs	r1, #1
 8014562:	117b      	asrs	r3, r7, #5
 8014564:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8014568:	f007 071f 	and.w	r7, r7, #31
 801456c:	fa01 f707 	lsl.w	r7, r1, r7
 8014570:	421f      	tst	r7, r3
 8014572:	f04f 0702 	mov.w	r7, #2
 8014576:	4629      	mov	r1, r5
 8014578:	4620      	mov	r0, r4
 801457a:	bf18      	it	ne
 801457c:	f04a 0a02 	orrne.w	sl, sl, #2
 8014580:	1b76      	subs	r6, r6, r5
 8014582:	f7ff fdf5 	bl	8014170 <rshift>
 8014586:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801458a:	f1ba 0f00 	cmp.w	sl, #0
 801458e:	d048      	beq.n	8014622 <__gethex+0x3e2>
 8014590:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014594:	2b02      	cmp	r3, #2
 8014596:	d015      	beq.n	80145c4 <__gethex+0x384>
 8014598:	2b03      	cmp	r3, #3
 801459a:	d017      	beq.n	80145cc <__gethex+0x38c>
 801459c:	2b01      	cmp	r3, #1
 801459e:	d109      	bne.n	80145b4 <__gethex+0x374>
 80145a0:	f01a 0f02 	tst.w	sl, #2
 80145a4:	d006      	beq.n	80145b4 <__gethex+0x374>
 80145a6:	f8d9 0000 	ldr.w	r0, [r9]
 80145aa:	ea4a 0a00 	orr.w	sl, sl, r0
 80145ae:	f01a 0f01 	tst.w	sl, #1
 80145b2:	d10e      	bne.n	80145d2 <__gethex+0x392>
 80145b4:	f047 0710 	orr.w	r7, r7, #16
 80145b8:	e033      	b.n	8014622 <__gethex+0x3e2>
 80145ba:	f04f 0a01 	mov.w	sl, #1
 80145be:	e7cf      	b.n	8014560 <__gethex+0x320>
 80145c0:	2701      	movs	r7, #1
 80145c2:	e7e2      	b.n	801458a <__gethex+0x34a>
 80145c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80145c6:	f1c3 0301 	rsb	r3, r3, #1
 80145ca:	9315      	str	r3, [sp, #84]	; 0x54
 80145cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d0f0      	beq.n	80145b4 <__gethex+0x374>
 80145d2:	f04f 0c00 	mov.w	ip, #0
 80145d6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80145da:	f104 0314 	add.w	r3, r4, #20
 80145de:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80145e2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80145e6:	4618      	mov	r0, r3
 80145e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80145ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 80145f0:	d01c      	beq.n	801462c <__gethex+0x3ec>
 80145f2:	3201      	adds	r2, #1
 80145f4:	6002      	str	r2, [r0, #0]
 80145f6:	2f02      	cmp	r7, #2
 80145f8:	f104 0314 	add.w	r3, r4, #20
 80145fc:	d13d      	bne.n	801467a <__gethex+0x43a>
 80145fe:	f8d8 2000 	ldr.w	r2, [r8]
 8014602:	3a01      	subs	r2, #1
 8014604:	42b2      	cmp	r2, r6
 8014606:	d10a      	bne.n	801461e <__gethex+0x3de>
 8014608:	2201      	movs	r2, #1
 801460a:	1171      	asrs	r1, r6, #5
 801460c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014610:	f006 061f 	and.w	r6, r6, #31
 8014614:	fa02 f606 	lsl.w	r6, r2, r6
 8014618:	421e      	tst	r6, r3
 801461a:	bf18      	it	ne
 801461c:	4617      	movne	r7, r2
 801461e:	f047 0720 	orr.w	r7, r7, #32
 8014622:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014624:	601c      	str	r4, [r3, #0]
 8014626:	9b06      	ldr	r3, [sp, #24]
 8014628:	601d      	str	r5, [r3, #0]
 801462a:	e69b      	b.n	8014364 <__gethex+0x124>
 801462c:	4299      	cmp	r1, r3
 801462e:	f843 cc04 	str.w	ip, [r3, #-4]
 8014632:	d8d8      	bhi.n	80145e6 <__gethex+0x3a6>
 8014634:	68a3      	ldr	r3, [r4, #8]
 8014636:	459b      	cmp	fp, r3
 8014638:	db17      	blt.n	801466a <__gethex+0x42a>
 801463a:	6861      	ldr	r1, [r4, #4]
 801463c:	9802      	ldr	r0, [sp, #8]
 801463e:	3101      	adds	r1, #1
 8014640:	f000 f93e 	bl	80148c0 <_Balloc>
 8014644:	4681      	mov	r9, r0
 8014646:	b918      	cbnz	r0, 8014650 <__gethex+0x410>
 8014648:	4602      	mov	r2, r0
 801464a:	2184      	movs	r1, #132	; 0x84
 801464c:	4b19      	ldr	r3, [pc, #100]	; (80146b4 <__gethex+0x474>)
 801464e:	e6ac      	b.n	80143aa <__gethex+0x16a>
 8014650:	6922      	ldr	r2, [r4, #16]
 8014652:	f104 010c 	add.w	r1, r4, #12
 8014656:	3202      	adds	r2, #2
 8014658:	0092      	lsls	r2, r2, #2
 801465a:	300c      	adds	r0, #12
 801465c:	f7fc ff72 	bl	8011544 <memcpy>
 8014660:	4621      	mov	r1, r4
 8014662:	9802      	ldr	r0, [sp, #8]
 8014664:	f000 f96c 	bl	8014940 <_Bfree>
 8014668:	464c      	mov	r4, r9
 801466a:	6923      	ldr	r3, [r4, #16]
 801466c:	1c5a      	adds	r2, r3, #1
 801466e:	6122      	str	r2, [r4, #16]
 8014670:	2201      	movs	r2, #1
 8014672:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014676:	615a      	str	r2, [r3, #20]
 8014678:	e7bd      	b.n	80145f6 <__gethex+0x3b6>
 801467a:	6922      	ldr	r2, [r4, #16]
 801467c:	455a      	cmp	r2, fp
 801467e:	dd0b      	ble.n	8014698 <__gethex+0x458>
 8014680:	2101      	movs	r1, #1
 8014682:	4620      	mov	r0, r4
 8014684:	f7ff fd74 	bl	8014170 <rshift>
 8014688:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801468c:	3501      	adds	r5, #1
 801468e:	42ab      	cmp	r3, r5
 8014690:	f6ff aed5 	blt.w	801443e <__gethex+0x1fe>
 8014694:	2701      	movs	r7, #1
 8014696:	e7c2      	b.n	801461e <__gethex+0x3de>
 8014698:	f016 061f 	ands.w	r6, r6, #31
 801469c:	d0fa      	beq.n	8014694 <__gethex+0x454>
 801469e:	449a      	add	sl, r3
 80146a0:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80146a4:	f000 fa02 	bl	8014aac <__hi0bits>
 80146a8:	f1c6 0620 	rsb	r6, r6, #32
 80146ac:	42b0      	cmp	r0, r6
 80146ae:	dbe7      	blt.n	8014680 <__gethex+0x440>
 80146b0:	e7f0      	b.n	8014694 <__gethex+0x454>
 80146b2:	bf00      	nop
 80146b4:	08016054 	.word	0x08016054

080146b8 <L_shift>:
 80146b8:	f1c2 0208 	rsb	r2, r2, #8
 80146bc:	0092      	lsls	r2, r2, #2
 80146be:	b570      	push	{r4, r5, r6, lr}
 80146c0:	f1c2 0620 	rsb	r6, r2, #32
 80146c4:	6843      	ldr	r3, [r0, #4]
 80146c6:	6804      	ldr	r4, [r0, #0]
 80146c8:	fa03 f506 	lsl.w	r5, r3, r6
 80146cc:	432c      	orrs	r4, r5
 80146ce:	40d3      	lsrs	r3, r2
 80146d0:	6004      	str	r4, [r0, #0]
 80146d2:	f840 3f04 	str.w	r3, [r0, #4]!
 80146d6:	4288      	cmp	r0, r1
 80146d8:	d3f4      	bcc.n	80146c4 <L_shift+0xc>
 80146da:	bd70      	pop	{r4, r5, r6, pc}

080146dc <__match>:
 80146dc:	b530      	push	{r4, r5, lr}
 80146de:	6803      	ldr	r3, [r0, #0]
 80146e0:	3301      	adds	r3, #1
 80146e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80146e6:	b914      	cbnz	r4, 80146ee <__match+0x12>
 80146e8:	6003      	str	r3, [r0, #0]
 80146ea:	2001      	movs	r0, #1
 80146ec:	bd30      	pop	{r4, r5, pc}
 80146ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80146f2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80146f6:	2d19      	cmp	r5, #25
 80146f8:	bf98      	it	ls
 80146fa:	3220      	addls	r2, #32
 80146fc:	42a2      	cmp	r2, r4
 80146fe:	d0f0      	beq.n	80146e2 <__match+0x6>
 8014700:	2000      	movs	r0, #0
 8014702:	e7f3      	b.n	80146ec <__match+0x10>

08014704 <__hexnan>:
 8014704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014708:	2500      	movs	r5, #0
 801470a:	680b      	ldr	r3, [r1, #0]
 801470c:	4682      	mov	sl, r0
 801470e:	115e      	asrs	r6, r3, #5
 8014710:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014714:	f013 031f 	ands.w	r3, r3, #31
 8014718:	bf18      	it	ne
 801471a:	3604      	addne	r6, #4
 801471c:	1f37      	subs	r7, r6, #4
 801471e:	4690      	mov	r8, r2
 8014720:	46b9      	mov	r9, r7
 8014722:	463c      	mov	r4, r7
 8014724:	46ab      	mov	fp, r5
 8014726:	b087      	sub	sp, #28
 8014728:	6801      	ldr	r1, [r0, #0]
 801472a:	9301      	str	r3, [sp, #4]
 801472c:	f846 5c04 	str.w	r5, [r6, #-4]
 8014730:	9502      	str	r5, [sp, #8]
 8014732:	784a      	ldrb	r2, [r1, #1]
 8014734:	1c4b      	adds	r3, r1, #1
 8014736:	9303      	str	r3, [sp, #12]
 8014738:	b342      	cbz	r2, 801478c <__hexnan+0x88>
 801473a:	4610      	mov	r0, r2
 801473c:	9105      	str	r1, [sp, #20]
 801473e:	9204      	str	r2, [sp, #16]
 8014740:	f7ff fd69 	bl	8014216 <__hexdig_fun>
 8014744:	2800      	cmp	r0, #0
 8014746:	d14f      	bne.n	80147e8 <__hexnan+0xe4>
 8014748:	9a04      	ldr	r2, [sp, #16]
 801474a:	9905      	ldr	r1, [sp, #20]
 801474c:	2a20      	cmp	r2, #32
 801474e:	d818      	bhi.n	8014782 <__hexnan+0x7e>
 8014750:	9b02      	ldr	r3, [sp, #8]
 8014752:	459b      	cmp	fp, r3
 8014754:	dd13      	ble.n	801477e <__hexnan+0x7a>
 8014756:	454c      	cmp	r4, r9
 8014758:	d206      	bcs.n	8014768 <__hexnan+0x64>
 801475a:	2d07      	cmp	r5, #7
 801475c:	dc04      	bgt.n	8014768 <__hexnan+0x64>
 801475e:	462a      	mov	r2, r5
 8014760:	4649      	mov	r1, r9
 8014762:	4620      	mov	r0, r4
 8014764:	f7ff ffa8 	bl	80146b8 <L_shift>
 8014768:	4544      	cmp	r4, r8
 801476a:	d950      	bls.n	801480e <__hexnan+0x10a>
 801476c:	2300      	movs	r3, #0
 801476e:	f1a4 0904 	sub.w	r9, r4, #4
 8014772:	f844 3c04 	str.w	r3, [r4, #-4]
 8014776:	461d      	mov	r5, r3
 8014778:	464c      	mov	r4, r9
 801477a:	f8cd b008 	str.w	fp, [sp, #8]
 801477e:	9903      	ldr	r1, [sp, #12]
 8014780:	e7d7      	b.n	8014732 <__hexnan+0x2e>
 8014782:	2a29      	cmp	r2, #41	; 0x29
 8014784:	d156      	bne.n	8014834 <__hexnan+0x130>
 8014786:	3102      	adds	r1, #2
 8014788:	f8ca 1000 	str.w	r1, [sl]
 801478c:	f1bb 0f00 	cmp.w	fp, #0
 8014790:	d050      	beq.n	8014834 <__hexnan+0x130>
 8014792:	454c      	cmp	r4, r9
 8014794:	d206      	bcs.n	80147a4 <__hexnan+0xa0>
 8014796:	2d07      	cmp	r5, #7
 8014798:	dc04      	bgt.n	80147a4 <__hexnan+0xa0>
 801479a:	462a      	mov	r2, r5
 801479c:	4649      	mov	r1, r9
 801479e:	4620      	mov	r0, r4
 80147a0:	f7ff ff8a 	bl	80146b8 <L_shift>
 80147a4:	4544      	cmp	r4, r8
 80147a6:	d934      	bls.n	8014812 <__hexnan+0x10e>
 80147a8:	4623      	mov	r3, r4
 80147aa:	f1a8 0204 	sub.w	r2, r8, #4
 80147ae:	f853 1b04 	ldr.w	r1, [r3], #4
 80147b2:	429f      	cmp	r7, r3
 80147b4:	f842 1f04 	str.w	r1, [r2, #4]!
 80147b8:	d2f9      	bcs.n	80147ae <__hexnan+0xaa>
 80147ba:	1b3b      	subs	r3, r7, r4
 80147bc:	f023 0303 	bic.w	r3, r3, #3
 80147c0:	3304      	adds	r3, #4
 80147c2:	3401      	adds	r4, #1
 80147c4:	3e03      	subs	r6, #3
 80147c6:	42b4      	cmp	r4, r6
 80147c8:	bf88      	it	hi
 80147ca:	2304      	movhi	r3, #4
 80147cc:	2200      	movs	r2, #0
 80147ce:	4443      	add	r3, r8
 80147d0:	f843 2b04 	str.w	r2, [r3], #4
 80147d4:	429f      	cmp	r7, r3
 80147d6:	d2fb      	bcs.n	80147d0 <__hexnan+0xcc>
 80147d8:	683b      	ldr	r3, [r7, #0]
 80147da:	b91b      	cbnz	r3, 80147e4 <__hexnan+0xe0>
 80147dc:	4547      	cmp	r7, r8
 80147de:	d127      	bne.n	8014830 <__hexnan+0x12c>
 80147e0:	2301      	movs	r3, #1
 80147e2:	603b      	str	r3, [r7, #0]
 80147e4:	2005      	movs	r0, #5
 80147e6:	e026      	b.n	8014836 <__hexnan+0x132>
 80147e8:	3501      	adds	r5, #1
 80147ea:	2d08      	cmp	r5, #8
 80147ec:	f10b 0b01 	add.w	fp, fp, #1
 80147f0:	dd06      	ble.n	8014800 <__hexnan+0xfc>
 80147f2:	4544      	cmp	r4, r8
 80147f4:	d9c3      	bls.n	801477e <__hexnan+0x7a>
 80147f6:	2300      	movs	r3, #0
 80147f8:	2501      	movs	r5, #1
 80147fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80147fe:	3c04      	subs	r4, #4
 8014800:	6822      	ldr	r2, [r4, #0]
 8014802:	f000 000f 	and.w	r0, r0, #15
 8014806:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801480a:	6022      	str	r2, [r4, #0]
 801480c:	e7b7      	b.n	801477e <__hexnan+0x7a>
 801480e:	2508      	movs	r5, #8
 8014810:	e7b5      	b.n	801477e <__hexnan+0x7a>
 8014812:	9b01      	ldr	r3, [sp, #4]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d0df      	beq.n	80147d8 <__hexnan+0xd4>
 8014818:	f04f 32ff 	mov.w	r2, #4294967295
 801481c:	f1c3 0320 	rsb	r3, r3, #32
 8014820:	fa22 f303 	lsr.w	r3, r2, r3
 8014824:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014828:	401a      	ands	r2, r3
 801482a:	f846 2c04 	str.w	r2, [r6, #-4]
 801482e:	e7d3      	b.n	80147d8 <__hexnan+0xd4>
 8014830:	3f04      	subs	r7, #4
 8014832:	e7d1      	b.n	80147d8 <__hexnan+0xd4>
 8014834:	2004      	movs	r0, #4
 8014836:	b007      	add	sp, #28
 8014838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801483c <_localeconv_r>:
 801483c:	4800      	ldr	r0, [pc, #0]	; (8014840 <_localeconv_r+0x4>)
 801483e:	4770      	bx	lr
 8014840:	200001b4 	.word	0x200001b4

08014844 <_lseek_r>:
 8014844:	b538      	push	{r3, r4, r5, lr}
 8014846:	4604      	mov	r4, r0
 8014848:	4608      	mov	r0, r1
 801484a:	4611      	mov	r1, r2
 801484c:	2200      	movs	r2, #0
 801484e:	4d05      	ldr	r5, [pc, #20]	; (8014864 <_lseek_r+0x20>)
 8014850:	602a      	str	r2, [r5, #0]
 8014852:	461a      	mov	r2, r3
 8014854:	f7ee fb28 	bl	8002ea8 <_lseek>
 8014858:	1c43      	adds	r3, r0, #1
 801485a:	d102      	bne.n	8014862 <_lseek_r+0x1e>
 801485c:	682b      	ldr	r3, [r5, #0]
 801485e:	b103      	cbz	r3, 8014862 <_lseek_r+0x1e>
 8014860:	6023      	str	r3, [r4, #0]
 8014862:	bd38      	pop	{r3, r4, r5, pc}
 8014864:	2000b3a8 	.word	0x2000b3a8

08014868 <__ascii_mbtowc>:
 8014868:	b082      	sub	sp, #8
 801486a:	b901      	cbnz	r1, 801486e <__ascii_mbtowc+0x6>
 801486c:	a901      	add	r1, sp, #4
 801486e:	b142      	cbz	r2, 8014882 <__ascii_mbtowc+0x1a>
 8014870:	b14b      	cbz	r3, 8014886 <__ascii_mbtowc+0x1e>
 8014872:	7813      	ldrb	r3, [r2, #0]
 8014874:	600b      	str	r3, [r1, #0]
 8014876:	7812      	ldrb	r2, [r2, #0]
 8014878:	1e10      	subs	r0, r2, #0
 801487a:	bf18      	it	ne
 801487c:	2001      	movne	r0, #1
 801487e:	b002      	add	sp, #8
 8014880:	4770      	bx	lr
 8014882:	4610      	mov	r0, r2
 8014884:	e7fb      	b.n	801487e <__ascii_mbtowc+0x16>
 8014886:	f06f 0001 	mvn.w	r0, #1
 801488a:	e7f8      	b.n	801487e <__ascii_mbtowc+0x16>

0801488c <memchr>:
 801488c:	4603      	mov	r3, r0
 801488e:	b510      	push	{r4, lr}
 8014890:	b2c9      	uxtb	r1, r1
 8014892:	4402      	add	r2, r0
 8014894:	4293      	cmp	r3, r2
 8014896:	4618      	mov	r0, r3
 8014898:	d101      	bne.n	801489e <memchr+0x12>
 801489a:	2000      	movs	r0, #0
 801489c:	e003      	b.n	80148a6 <memchr+0x1a>
 801489e:	7804      	ldrb	r4, [r0, #0]
 80148a0:	3301      	adds	r3, #1
 80148a2:	428c      	cmp	r4, r1
 80148a4:	d1f6      	bne.n	8014894 <memchr+0x8>
 80148a6:	bd10      	pop	{r4, pc}

080148a8 <__malloc_lock>:
 80148a8:	4801      	ldr	r0, [pc, #4]	; (80148b0 <__malloc_lock+0x8>)
 80148aa:	f7fc be38 	b.w	801151e <__retarget_lock_acquire_recursive>
 80148ae:	bf00      	nop
 80148b0:	2000b3a0 	.word	0x2000b3a0

080148b4 <__malloc_unlock>:
 80148b4:	4801      	ldr	r0, [pc, #4]	; (80148bc <__malloc_unlock+0x8>)
 80148b6:	f7fc be33 	b.w	8011520 <__retarget_lock_release_recursive>
 80148ba:	bf00      	nop
 80148bc:	2000b3a0 	.word	0x2000b3a0

080148c0 <_Balloc>:
 80148c0:	b570      	push	{r4, r5, r6, lr}
 80148c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80148c4:	4604      	mov	r4, r0
 80148c6:	460d      	mov	r5, r1
 80148c8:	b976      	cbnz	r6, 80148e8 <_Balloc+0x28>
 80148ca:	2010      	movs	r0, #16
 80148cc:	f7fc fe2a 	bl	8011524 <malloc>
 80148d0:	4602      	mov	r2, r0
 80148d2:	6260      	str	r0, [r4, #36]	; 0x24
 80148d4:	b920      	cbnz	r0, 80148e0 <_Balloc+0x20>
 80148d6:	2166      	movs	r1, #102	; 0x66
 80148d8:	4b17      	ldr	r3, [pc, #92]	; (8014938 <_Balloc+0x78>)
 80148da:	4818      	ldr	r0, [pc, #96]	; (801493c <_Balloc+0x7c>)
 80148dc:	f000 fe4a 	bl	8015574 <__assert_func>
 80148e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80148e4:	6006      	str	r6, [r0, #0]
 80148e6:	60c6      	str	r6, [r0, #12]
 80148e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80148ea:	68f3      	ldr	r3, [r6, #12]
 80148ec:	b183      	cbz	r3, 8014910 <_Balloc+0x50>
 80148ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80148f0:	68db      	ldr	r3, [r3, #12]
 80148f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80148f6:	b9b8      	cbnz	r0, 8014928 <_Balloc+0x68>
 80148f8:	2101      	movs	r1, #1
 80148fa:	fa01 f605 	lsl.w	r6, r1, r5
 80148fe:	1d72      	adds	r2, r6, #5
 8014900:	4620      	mov	r0, r4
 8014902:	0092      	lsls	r2, r2, #2
 8014904:	f000 fc94 	bl	8015230 <_calloc_r>
 8014908:	b160      	cbz	r0, 8014924 <_Balloc+0x64>
 801490a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801490e:	e00e      	b.n	801492e <_Balloc+0x6e>
 8014910:	2221      	movs	r2, #33	; 0x21
 8014912:	2104      	movs	r1, #4
 8014914:	4620      	mov	r0, r4
 8014916:	f000 fc8b 	bl	8015230 <_calloc_r>
 801491a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801491c:	60f0      	str	r0, [r6, #12]
 801491e:	68db      	ldr	r3, [r3, #12]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d1e4      	bne.n	80148ee <_Balloc+0x2e>
 8014924:	2000      	movs	r0, #0
 8014926:	bd70      	pop	{r4, r5, r6, pc}
 8014928:	6802      	ldr	r2, [r0, #0]
 801492a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801492e:	2300      	movs	r3, #0
 8014930:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014934:	e7f7      	b.n	8014926 <_Balloc+0x66>
 8014936:	bf00      	nop
 8014938:	08015fde 	.word	0x08015fde
 801493c:	080160e4 	.word	0x080160e4

08014940 <_Bfree>:
 8014940:	b570      	push	{r4, r5, r6, lr}
 8014942:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014944:	4605      	mov	r5, r0
 8014946:	460c      	mov	r4, r1
 8014948:	b976      	cbnz	r6, 8014968 <_Bfree+0x28>
 801494a:	2010      	movs	r0, #16
 801494c:	f7fc fdea 	bl	8011524 <malloc>
 8014950:	4602      	mov	r2, r0
 8014952:	6268      	str	r0, [r5, #36]	; 0x24
 8014954:	b920      	cbnz	r0, 8014960 <_Bfree+0x20>
 8014956:	218a      	movs	r1, #138	; 0x8a
 8014958:	4b08      	ldr	r3, [pc, #32]	; (801497c <_Bfree+0x3c>)
 801495a:	4809      	ldr	r0, [pc, #36]	; (8014980 <_Bfree+0x40>)
 801495c:	f000 fe0a 	bl	8015574 <__assert_func>
 8014960:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014964:	6006      	str	r6, [r0, #0]
 8014966:	60c6      	str	r6, [r0, #12]
 8014968:	b13c      	cbz	r4, 801497a <_Bfree+0x3a>
 801496a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801496c:	6862      	ldr	r2, [r4, #4]
 801496e:	68db      	ldr	r3, [r3, #12]
 8014970:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014974:	6021      	str	r1, [r4, #0]
 8014976:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801497a:	bd70      	pop	{r4, r5, r6, pc}
 801497c:	08015fde 	.word	0x08015fde
 8014980:	080160e4 	.word	0x080160e4

08014984 <__multadd>:
 8014984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014988:	4698      	mov	r8, r3
 801498a:	460c      	mov	r4, r1
 801498c:	2300      	movs	r3, #0
 801498e:	690e      	ldr	r6, [r1, #16]
 8014990:	4607      	mov	r7, r0
 8014992:	f101 0014 	add.w	r0, r1, #20
 8014996:	6805      	ldr	r5, [r0, #0]
 8014998:	3301      	adds	r3, #1
 801499a:	b2a9      	uxth	r1, r5
 801499c:	fb02 8101 	mla	r1, r2, r1, r8
 80149a0:	0c2d      	lsrs	r5, r5, #16
 80149a2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80149a6:	fb02 c505 	mla	r5, r2, r5, ip
 80149aa:	b289      	uxth	r1, r1
 80149ac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80149b0:	429e      	cmp	r6, r3
 80149b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80149b6:	f840 1b04 	str.w	r1, [r0], #4
 80149ba:	dcec      	bgt.n	8014996 <__multadd+0x12>
 80149bc:	f1b8 0f00 	cmp.w	r8, #0
 80149c0:	d022      	beq.n	8014a08 <__multadd+0x84>
 80149c2:	68a3      	ldr	r3, [r4, #8]
 80149c4:	42b3      	cmp	r3, r6
 80149c6:	dc19      	bgt.n	80149fc <__multadd+0x78>
 80149c8:	6861      	ldr	r1, [r4, #4]
 80149ca:	4638      	mov	r0, r7
 80149cc:	3101      	adds	r1, #1
 80149ce:	f7ff ff77 	bl	80148c0 <_Balloc>
 80149d2:	4605      	mov	r5, r0
 80149d4:	b928      	cbnz	r0, 80149e2 <__multadd+0x5e>
 80149d6:	4602      	mov	r2, r0
 80149d8:	21b5      	movs	r1, #181	; 0xb5
 80149da:	4b0d      	ldr	r3, [pc, #52]	; (8014a10 <__multadd+0x8c>)
 80149dc:	480d      	ldr	r0, [pc, #52]	; (8014a14 <__multadd+0x90>)
 80149de:	f000 fdc9 	bl	8015574 <__assert_func>
 80149e2:	6922      	ldr	r2, [r4, #16]
 80149e4:	f104 010c 	add.w	r1, r4, #12
 80149e8:	3202      	adds	r2, #2
 80149ea:	0092      	lsls	r2, r2, #2
 80149ec:	300c      	adds	r0, #12
 80149ee:	f7fc fda9 	bl	8011544 <memcpy>
 80149f2:	4621      	mov	r1, r4
 80149f4:	4638      	mov	r0, r7
 80149f6:	f7ff ffa3 	bl	8014940 <_Bfree>
 80149fa:	462c      	mov	r4, r5
 80149fc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014a00:	3601      	adds	r6, #1
 8014a02:	f8c3 8014 	str.w	r8, [r3, #20]
 8014a06:	6126      	str	r6, [r4, #16]
 8014a08:	4620      	mov	r0, r4
 8014a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a0e:	bf00      	nop
 8014a10:	08016054 	.word	0x08016054
 8014a14:	080160e4 	.word	0x080160e4

08014a18 <__s2b>:
 8014a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a1c:	4615      	mov	r5, r2
 8014a1e:	2209      	movs	r2, #9
 8014a20:	461f      	mov	r7, r3
 8014a22:	3308      	adds	r3, #8
 8014a24:	460c      	mov	r4, r1
 8014a26:	fb93 f3f2 	sdiv	r3, r3, r2
 8014a2a:	4606      	mov	r6, r0
 8014a2c:	2201      	movs	r2, #1
 8014a2e:	2100      	movs	r1, #0
 8014a30:	429a      	cmp	r2, r3
 8014a32:	db09      	blt.n	8014a48 <__s2b+0x30>
 8014a34:	4630      	mov	r0, r6
 8014a36:	f7ff ff43 	bl	80148c0 <_Balloc>
 8014a3a:	b940      	cbnz	r0, 8014a4e <__s2b+0x36>
 8014a3c:	4602      	mov	r2, r0
 8014a3e:	21ce      	movs	r1, #206	; 0xce
 8014a40:	4b18      	ldr	r3, [pc, #96]	; (8014aa4 <__s2b+0x8c>)
 8014a42:	4819      	ldr	r0, [pc, #100]	; (8014aa8 <__s2b+0x90>)
 8014a44:	f000 fd96 	bl	8015574 <__assert_func>
 8014a48:	0052      	lsls	r2, r2, #1
 8014a4a:	3101      	adds	r1, #1
 8014a4c:	e7f0      	b.n	8014a30 <__s2b+0x18>
 8014a4e:	9b08      	ldr	r3, [sp, #32]
 8014a50:	2d09      	cmp	r5, #9
 8014a52:	6143      	str	r3, [r0, #20]
 8014a54:	f04f 0301 	mov.w	r3, #1
 8014a58:	6103      	str	r3, [r0, #16]
 8014a5a:	dd16      	ble.n	8014a8a <__s2b+0x72>
 8014a5c:	f104 0909 	add.w	r9, r4, #9
 8014a60:	46c8      	mov	r8, r9
 8014a62:	442c      	add	r4, r5
 8014a64:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014a68:	4601      	mov	r1, r0
 8014a6a:	220a      	movs	r2, #10
 8014a6c:	4630      	mov	r0, r6
 8014a6e:	3b30      	subs	r3, #48	; 0x30
 8014a70:	f7ff ff88 	bl	8014984 <__multadd>
 8014a74:	45a0      	cmp	r8, r4
 8014a76:	d1f5      	bne.n	8014a64 <__s2b+0x4c>
 8014a78:	f1a5 0408 	sub.w	r4, r5, #8
 8014a7c:	444c      	add	r4, r9
 8014a7e:	1b2d      	subs	r5, r5, r4
 8014a80:	1963      	adds	r3, r4, r5
 8014a82:	42bb      	cmp	r3, r7
 8014a84:	db04      	blt.n	8014a90 <__s2b+0x78>
 8014a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a8a:	2509      	movs	r5, #9
 8014a8c:	340a      	adds	r4, #10
 8014a8e:	e7f6      	b.n	8014a7e <__s2b+0x66>
 8014a90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014a94:	4601      	mov	r1, r0
 8014a96:	220a      	movs	r2, #10
 8014a98:	4630      	mov	r0, r6
 8014a9a:	3b30      	subs	r3, #48	; 0x30
 8014a9c:	f7ff ff72 	bl	8014984 <__multadd>
 8014aa0:	e7ee      	b.n	8014a80 <__s2b+0x68>
 8014aa2:	bf00      	nop
 8014aa4:	08016054 	.word	0x08016054
 8014aa8:	080160e4 	.word	0x080160e4

08014aac <__hi0bits>:
 8014aac:	0c02      	lsrs	r2, r0, #16
 8014aae:	0412      	lsls	r2, r2, #16
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	b9ca      	cbnz	r2, 8014ae8 <__hi0bits+0x3c>
 8014ab4:	0403      	lsls	r3, r0, #16
 8014ab6:	2010      	movs	r0, #16
 8014ab8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014abc:	bf04      	itt	eq
 8014abe:	021b      	lsleq	r3, r3, #8
 8014ac0:	3008      	addeq	r0, #8
 8014ac2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014ac6:	bf04      	itt	eq
 8014ac8:	011b      	lsleq	r3, r3, #4
 8014aca:	3004      	addeq	r0, #4
 8014acc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014ad0:	bf04      	itt	eq
 8014ad2:	009b      	lsleq	r3, r3, #2
 8014ad4:	3002      	addeq	r0, #2
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	db05      	blt.n	8014ae6 <__hi0bits+0x3a>
 8014ada:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8014ade:	f100 0001 	add.w	r0, r0, #1
 8014ae2:	bf08      	it	eq
 8014ae4:	2020      	moveq	r0, #32
 8014ae6:	4770      	bx	lr
 8014ae8:	2000      	movs	r0, #0
 8014aea:	e7e5      	b.n	8014ab8 <__hi0bits+0xc>

08014aec <__lo0bits>:
 8014aec:	6803      	ldr	r3, [r0, #0]
 8014aee:	4602      	mov	r2, r0
 8014af0:	f013 0007 	ands.w	r0, r3, #7
 8014af4:	d00b      	beq.n	8014b0e <__lo0bits+0x22>
 8014af6:	07d9      	lsls	r1, r3, #31
 8014af8:	d422      	bmi.n	8014b40 <__lo0bits+0x54>
 8014afa:	0798      	lsls	r0, r3, #30
 8014afc:	bf49      	itett	mi
 8014afe:	085b      	lsrmi	r3, r3, #1
 8014b00:	089b      	lsrpl	r3, r3, #2
 8014b02:	2001      	movmi	r0, #1
 8014b04:	6013      	strmi	r3, [r2, #0]
 8014b06:	bf5c      	itt	pl
 8014b08:	2002      	movpl	r0, #2
 8014b0a:	6013      	strpl	r3, [r2, #0]
 8014b0c:	4770      	bx	lr
 8014b0e:	b299      	uxth	r1, r3
 8014b10:	b909      	cbnz	r1, 8014b16 <__lo0bits+0x2a>
 8014b12:	2010      	movs	r0, #16
 8014b14:	0c1b      	lsrs	r3, r3, #16
 8014b16:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014b1a:	bf04      	itt	eq
 8014b1c:	0a1b      	lsreq	r3, r3, #8
 8014b1e:	3008      	addeq	r0, #8
 8014b20:	0719      	lsls	r1, r3, #28
 8014b22:	bf04      	itt	eq
 8014b24:	091b      	lsreq	r3, r3, #4
 8014b26:	3004      	addeq	r0, #4
 8014b28:	0799      	lsls	r1, r3, #30
 8014b2a:	bf04      	itt	eq
 8014b2c:	089b      	lsreq	r3, r3, #2
 8014b2e:	3002      	addeq	r0, #2
 8014b30:	07d9      	lsls	r1, r3, #31
 8014b32:	d403      	bmi.n	8014b3c <__lo0bits+0x50>
 8014b34:	085b      	lsrs	r3, r3, #1
 8014b36:	f100 0001 	add.w	r0, r0, #1
 8014b3a:	d003      	beq.n	8014b44 <__lo0bits+0x58>
 8014b3c:	6013      	str	r3, [r2, #0]
 8014b3e:	4770      	bx	lr
 8014b40:	2000      	movs	r0, #0
 8014b42:	4770      	bx	lr
 8014b44:	2020      	movs	r0, #32
 8014b46:	4770      	bx	lr

08014b48 <__i2b>:
 8014b48:	b510      	push	{r4, lr}
 8014b4a:	460c      	mov	r4, r1
 8014b4c:	2101      	movs	r1, #1
 8014b4e:	f7ff feb7 	bl	80148c0 <_Balloc>
 8014b52:	4602      	mov	r2, r0
 8014b54:	b928      	cbnz	r0, 8014b62 <__i2b+0x1a>
 8014b56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014b5a:	4b04      	ldr	r3, [pc, #16]	; (8014b6c <__i2b+0x24>)
 8014b5c:	4804      	ldr	r0, [pc, #16]	; (8014b70 <__i2b+0x28>)
 8014b5e:	f000 fd09 	bl	8015574 <__assert_func>
 8014b62:	2301      	movs	r3, #1
 8014b64:	6144      	str	r4, [r0, #20]
 8014b66:	6103      	str	r3, [r0, #16]
 8014b68:	bd10      	pop	{r4, pc}
 8014b6a:	bf00      	nop
 8014b6c:	08016054 	.word	0x08016054
 8014b70:	080160e4 	.word	0x080160e4

08014b74 <__multiply>:
 8014b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b78:	4614      	mov	r4, r2
 8014b7a:	690a      	ldr	r2, [r1, #16]
 8014b7c:	6923      	ldr	r3, [r4, #16]
 8014b7e:	460d      	mov	r5, r1
 8014b80:	429a      	cmp	r2, r3
 8014b82:	bfbe      	ittt	lt
 8014b84:	460b      	movlt	r3, r1
 8014b86:	4625      	movlt	r5, r4
 8014b88:	461c      	movlt	r4, r3
 8014b8a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014b8e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014b92:	68ab      	ldr	r3, [r5, #8]
 8014b94:	6869      	ldr	r1, [r5, #4]
 8014b96:	eb0a 0709 	add.w	r7, sl, r9
 8014b9a:	42bb      	cmp	r3, r7
 8014b9c:	b085      	sub	sp, #20
 8014b9e:	bfb8      	it	lt
 8014ba0:	3101      	addlt	r1, #1
 8014ba2:	f7ff fe8d 	bl	80148c0 <_Balloc>
 8014ba6:	b930      	cbnz	r0, 8014bb6 <__multiply+0x42>
 8014ba8:	4602      	mov	r2, r0
 8014baa:	f240 115d 	movw	r1, #349	; 0x15d
 8014bae:	4b41      	ldr	r3, [pc, #260]	; (8014cb4 <__multiply+0x140>)
 8014bb0:	4841      	ldr	r0, [pc, #260]	; (8014cb8 <__multiply+0x144>)
 8014bb2:	f000 fcdf 	bl	8015574 <__assert_func>
 8014bb6:	f100 0614 	add.w	r6, r0, #20
 8014bba:	4633      	mov	r3, r6
 8014bbc:	2200      	movs	r2, #0
 8014bbe:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014bc2:	4543      	cmp	r3, r8
 8014bc4:	d31e      	bcc.n	8014c04 <__multiply+0x90>
 8014bc6:	f105 0c14 	add.w	ip, r5, #20
 8014bca:	f104 0314 	add.w	r3, r4, #20
 8014bce:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8014bd2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014bd6:	9202      	str	r2, [sp, #8]
 8014bd8:	ebac 0205 	sub.w	r2, ip, r5
 8014bdc:	3a15      	subs	r2, #21
 8014bde:	f022 0203 	bic.w	r2, r2, #3
 8014be2:	3204      	adds	r2, #4
 8014be4:	f105 0115 	add.w	r1, r5, #21
 8014be8:	458c      	cmp	ip, r1
 8014bea:	bf38      	it	cc
 8014bec:	2204      	movcc	r2, #4
 8014bee:	9201      	str	r2, [sp, #4]
 8014bf0:	9a02      	ldr	r2, [sp, #8]
 8014bf2:	9303      	str	r3, [sp, #12]
 8014bf4:	429a      	cmp	r2, r3
 8014bf6:	d808      	bhi.n	8014c0a <__multiply+0x96>
 8014bf8:	2f00      	cmp	r7, #0
 8014bfa:	dc55      	bgt.n	8014ca8 <__multiply+0x134>
 8014bfc:	6107      	str	r7, [r0, #16]
 8014bfe:	b005      	add	sp, #20
 8014c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c04:	f843 2b04 	str.w	r2, [r3], #4
 8014c08:	e7db      	b.n	8014bc2 <__multiply+0x4e>
 8014c0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8014c0e:	f1ba 0f00 	cmp.w	sl, #0
 8014c12:	d020      	beq.n	8014c56 <__multiply+0xe2>
 8014c14:	46b1      	mov	r9, r6
 8014c16:	2200      	movs	r2, #0
 8014c18:	f105 0e14 	add.w	lr, r5, #20
 8014c1c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8014c20:	f8d9 b000 	ldr.w	fp, [r9]
 8014c24:	b2a1      	uxth	r1, r4
 8014c26:	fa1f fb8b 	uxth.w	fp, fp
 8014c2a:	fb0a b101 	mla	r1, sl, r1, fp
 8014c2e:	4411      	add	r1, r2
 8014c30:	f8d9 2000 	ldr.w	r2, [r9]
 8014c34:	0c24      	lsrs	r4, r4, #16
 8014c36:	0c12      	lsrs	r2, r2, #16
 8014c38:	fb0a 2404 	mla	r4, sl, r4, r2
 8014c3c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8014c40:	b289      	uxth	r1, r1
 8014c42:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014c46:	45f4      	cmp	ip, lr
 8014c48:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8014c4c:	f849 1b04 	str.w	r1, [r9], #4
 8014c50:	d8e4      	bhi.n	8014c1c <__multiply+0xa8>
 8014c52:	9901      	ldr	r1, [sp, #4]
 8014c54:	5072      	str	r2, [r6, r1]
 8014c56:	9a03      	ldr	r2, [sp, #12]
 8014c58:	3304      	adds	r3, #4
 8014c5a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014c5e:	f1b9 0f00 	cmp.w	r9, #0
 8014c62:	d01f      	beq.n	8014ca4 <__multiply+0x130>
 8014c64:	46b6      	mov	lr, r6
 8014c66:	f04f 0a00 	mov.w	sl, #0
 8014c6a:	6834      	ldr	r4, [r6, #0]
 8014c6c:	f105 0114 	add.w	r1, r5, #20
 8014c70:	880a      	ldrh	r2, [r1, #0]
 8014c72:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014c76:	b2a4      	uxth	r4, r4
 8014c78:	fb09 b202 	mla	r2, r9, r2, fp
 8014c7c:	4492      	add	sl, r2
 8014c7e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014c82:	f84e 4b04 	str.w	r4, [lr], #4
 8014c86:	f851 4b04 	ldr.w	r4, [r1], #4
 8014c8a:	f8be 2000 	ldrh.w	r2, [lr]
 8014c8e:	0c24      	lsrs	r4, r4, #16
 8014c90:	fb09 2404 	mla	r4, r9, r4, r2
 8014c94:	458c      	cmp	ip, r1
 8014c96:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8014c9a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014c9e:	d8e7      	bhi.n	8014c70 <__multiply+0xfc>
 8014ca0:	9a01      	ldr	r2, [sp, #4]
 8014ca2:	50b4      	str	r4, [r6, r2]
 8014ca4:	3604      	adds	r6, #4
 8014ca6:	e7a3      	b.n	8014bf0 <__multiply+0x7c>
 8014ca8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d1a5      	bne.n	8014bfc <__multiply+0x88>
 8014cb0:	3f01      	subs	r7, #1
 8014cb2:	e7a1      	b.n	8014bf8 <__multiply+0x84>
 8014cb4:	08016054 	.word	0x08016054
 8014cb8:	080160e4 	.word	0x080160e4

08014cbc <__pow5mult>:
 8014cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014cc0:	4615      	mov	r5, r2
 8014cc2:	f012 0203 	ands.w	r2, r2, #3
 8014cc6:	4606      	mov	r6, r0
 8014cc8:	460f      	mov	r7, r1
 8014cca:	d007      	beq.n	8014cdc <__pow5mult+0x20>
 8014ccc:	4c25      	ldr	r4, [pc, #148]	; (8014d64 <__pow5mult+0xa8>)
 8014cce:	3a01      	subs	r2, #1
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014cd6:	f7ff fe55 	bl	8014984 <__multadd>
 8014cda:	4607      	mov	r7, r0
 8014cdc:	10ad      	asrs	r5, r5, #2
 8014cde:	d03d      	beq.n	8014d5c <__pow5mult+0xa0>
 8014ce0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014ce2:	b97c      	cbnz	r4, 8014d04 <__pow5mult+0x48>
 8014ce4:	2010      	movs	r0, #16
 8014ce6:	f7fc fc1d 	bl	8011524 <malloc>
 8014cea:	4602      	mov	r2, r0
 8014cec:	6270      	str	r0, [r6, #36]	; 0x24
 8014cee:	b928      	cbnz	r0, 8014cfc <__pow5mult+0x40>
 8014cf0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014cf4:	4b1c      	ldr	r3, [pc, #112]	; (8014d68 <__pow5mult+0xac>)
 8014cf6:	481d      	ldr	r0, [pc, #116]	; (8014d6c <__pow5mult+0xb0>)
 8014cf8:	f000 fc3c 	bl	8015574 <__assert_func>
 8014cfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014d00:	6004      	str	r4, [r0, #0]
 8014d02:	60c4      	str	r4, [r0, #12]
 8014d04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014d08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014d0c:	b94c      	cbnz	r4, 8014d22 <__pow5mult+0x66>
 8014d0e:	f240 2171 	movw	r1, #625	; 0x271
 8014d12:	4630      	mov	r0, r6
 8014d14:	f7ff ff18 	bl	8014b48 <__i2b>
 8014d18:	2300      	movs	r3, #0
 8014d1a:	4604      	mov	r4, r0
 8014d1c:	f8c8 0008 	str.w	r0, [r8, #8]
 8014d20:	6003      	str	r3, [r0, #0]
 8014d22:	f04f 0900 	mov.w	r9, #0
 8014d26:	07eb      	lsls	r3, r5, #31
 8014d28:	d50a      	bpl.n	8014d40 <__pow5mult+0x84>
 8014d2a:	4639      	mov	r1, r7
 8014d2c:	4622      	mov	r2, r4
 8014d2e:	4630      	mov	r0, r6
 8014d30:	f7ff ff20 	bl	8014b74 <__multiply>
 8014d34:	4680      	mov	r8, r0
 8014d36:	4639      	mov	r1, r7
 8014d38:	4630      	mov	r0, r6
 8014d3a:	f7ff fe01 	bl	8014940 <_Bfree>
 8014d3e:	4647      	mov	r7, r8
 8014d40:	106d      	asrs	r5, r5, #1
 8014d42:	d00b      	beq.n	8014d5c <__pow5mult+0xa0>
 8014d44:	6820      	ldr	r0, [r4, #0]
 8014d46:	b938      	cbnz	r0, 8014d58 <__pow5mult+0x9c>
 8014d48:	4622      	mov	r2, r4
 8014d4a:	4621      	mov	r1, r4
 8014d4c:	4630      	mov	r0, r6
 8014d4e:	f7ff ff11 	bl	8014b74 <__multiply>
 8014d52:	6020      	str	r0, [r4, #0]
 8014d54:	f8c0 9000 	str.w	r9, [r0]
 8014d58:	4604      	mov	r4, r0
 8014d5a:	e7e4      	b.n	8014d26 <__pow5mult+0x6a>
 8014d5c:	4638      	mov	r0, r7
 8014d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d62:	bf00      	nop
 8014d64:	08016238 	.word	0x08016238
 8014d68:	08015fde 	.word	0x08015fde
 8014d6c:	080160e4 	.word	0x080160e4

08014d70 <__lshift>:
 8014d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d74:	460c      	mov	r4, r1
 8014d76:	4607      	mov	r7, r0
 8014d78:	4691      	mov	r9, r2
 8014d7a:	6923      	ldr	r3, [r4, #16]
 8014d7c:	6849      	ldr	r1, [r1, #4]
 8014d7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014d82:	68a3      	ldr	r3, [r4, #8]
 8014d84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014d88:	f108 0601 	add.w	r6, r8, #1
 8014d8c:	42b3      	cmp	r3, r6
 8014d8e:	db0b      	blt.n	8014da8 <__lshift+0x38>
 8014d90:	4638      	mov	r0, r7
 8014d92:	f7ff fd95 	bl	80148c0 <_Balloc>
 8014d96:	4605      	mov	r5, r0
 8014d98:	b948      	cbnz	r0, 8014dae <__lshift+0x3e>
 8014d9a:	4602      	mov	r2, r0
 8014d9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014da0:	4b27      	ldr	r3, [pc, #156]	; (8014e40 <__lshift+0xd0>)
 8014da2:	4828      	ldr	r0, [pc, #160]	; (8014e44 <__lshift+0xd4>)
 8014da4:	f000 fbe6 	bl	8015574 <__assert_func>
 8014da8:	3101      	adds	r1, #1
 8014daa:	005b      	lsls	r3, r3, #1
 8014dac:	e7ee      	b.n	8014d8c <__lshift+0x1c>
 8014dae:	2300      	movs	r3, #0
 8014db0:	f100 0114 	add.w	r1, r0, #20
 8014db4:	f100 0210 	add.w	r2, r0, #16
 8014db8:	4618      	mov	r0, r3
 8014dba:	4553      	cmp	r3, sl
 8014dbc:	db33      	blt.n	8014e26 <__lshift+0xb6>
 8014dbe:	6920      	ldr	r0, [r4, #16]
 8014dc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014dc4:	f104 0314 	add.w	r3, r4, #20
 8014dc8:	f019 091f 	ands.w	r9, r9, #31
 8014dcc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014dd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014dd4:	d02b      	beq.n	8014e2e <__lshift+0xbe>
 8014dd6:	468a      	mov	sl, r1
 8014dd8:	2200      	movs	r2, #0
 8014dda:	f1c9 0e20 	rsb	lr, r9, #32
 8014dde:	6818      	ldr	r0, [r3, #0]
 8014de0:	fa00 f009 	lsl.w	r0, r0, r9
 8014de4:	4302      	orrs	r2, r0
 8014de6:	f84a 2b04 	str.w	r2, [sl], #4
 8014dea:	f853 2b04 	ldr.w	r2, [r3], #4
 8014dee:	459c      	cmp	ip, r3
 8014df0:	fa22 f20e 	lsr.w	r2, r2, lr
 8014df4:	d8f3      	bhi.n	8014dde <__lshift+0x6e>
 8014df6:	ebac 0304 	sub.w	r3, ip, r4
 8014dfa:	3b15      	subs	r3, #21
 8014dfc:	f023 0303 	bic.w	r3, r3, #3
 8014e00:	3304      	adds	r3, #4
 8014e02:	f104 0015 	add.w	r0, r4, #21
 8014e06:	4584      	cmp	ip, r0
 8014e08:	bf38      	it	cc
 8014e0a:	2304      	movcc	r3, #4
 8014e0c:	50ca      	str	r2, [r1, r3]
 8014e0e:	b10a      	cbz	r2, 8014e14 <__lshift+0xa4>
 8014e10:	f108 0602 	add.w	r6, r8, #2
 8014e14:	3e01      	subs	r6, #1
 8014e16:	4638      	mov	r0, r7
 8014e18:	4621      	mov	r1, r4
 8014e1a:	612e      	str	r6, [r5, #16]
 8014e1c:	f7ff fd90 	bl	8014940 <_Bfree>
 8014e20:	4628      	mov	r0, r5
 8014e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e26:	f842 0f04 	str.w	r0, [r2, #4]!
 8014e2a:	3301      	adds	r3, #1
 8014e2c:	e7c5      	b.n	8014dba <__lshift+0x4a>
 8014e2e:	3904      	subs	r1, #4
 8014e30:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e34:	459c      	cmp	ip, r3
 8014e36:	f841 2f04 	str.w	r2, [r1, #4]!
 8014e3a:	d8f9      	bhi.n	8014e30 <__lshift+0xc0>
 8014e3c:	e7ea      	b.n	8014e14 <__lshift+0xa4>
 8014e3e:	bf00      	nop
 8014e40:	08016054 	.word	0x08016054
 8014e44:	080160e4 	.word	0x080160e4

08014e48 <__mcmp>:
 8014e48:	4603      	mov	r3, r0
 8014e4a:	690a      	ldr	r2, [r1, #16]
 8014e4c:	6900      	ldr	r0, [r0, #16]
 8014e4e:	b530      	push	{r4, r5, lr}
 8014e50:	1a80      	subs	r0, r0, r2
 8014e52:	d10d      	bne.n	8014e70 <__mcmp+0x28>
 8014e54:	3314      	adds	r3, #20
 8014e56:	3114      	adds	r1, #20
 8014e58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014e5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014e60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014e64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014e68:	4295      	cmp	r5, r2
 8014e6a:	d002      	beq.n	8014e72 <__mcmp+0x2a>
 8014e6c:	d304      	bcc.n	8014e78 <__mcmp+0x30>
 8014e6e:	2001      	movs	r0, #1
 8014e70:	bd30      	pop	{r4, r5, pc}
 8014e72:	42a3      	cmp	r3, r4
 8014e74:	d3f4      	bcc.n	8014e60 <__mcmp+0x18>
 8014e76:	e7fb      	b.n	8014e70 <__mcmp+0x28>
 8014e78:	f04f 30ff 	mov.w	r0, #4294967295
 8014e7c:	e7f8      	b.n	8014e70 <__mcmp+0x28>
	...

08014e80 <__mdiff>:
 8014e80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e84:	460c      	mov	r4, r1
 8014e86:	4606      	mov	r6, r0
 8014e88:	4611      	mov	r1, r2
 8014e8a:	4620      	mov	r0, r4
 8014e8c:	4692      	mov	sl, r2
 8014e8e:	f7ff ffdb 	bl	8014e48 <__mcmp>
 8014e92:	1e05      	subs	r5, r0, #0
 8014e94:	d111      	bne.n	8014eba <__mdiff+0x3a>
 8014e96:	4629      	mov	r1, r5
 8014e98:	4630      	mov	r0, r6
 8014e9a:	f7ff fd11 	bl	80148c0 <_Balloc>
 8014e9e:	4602      	mov	r2, r0
 8014ea0:	b928      	cbnz	r0, 8014eae <__mdiff+0x2e>
 8014ea2:	f240 2132 	movw	r1, #562	; 0x232
 8014ea6:	4b3c      	ldr	r3, [pc, #240]	; (8014f98 <__mdiff+0x118>)
 8014ea8:	483c      	ldr	r0, [pc, #240]	; (8014f9c <__mdiff+0x11c>)
 8014eaa:	f000 fb63 	bl	8015574 <__assert_func>
 8014eae:	2301      	movs	r3, #1
 8014eb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014eb4:	4610      	mov	r0, r2
 8014eb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eba:	bfa4      	itt	ge
 8014ebc:	4653      	movge	r3, sl
 8014ebe:	46a2      	movge	sl, r4
 8014ec0:	4630      	mov	r0, r6
 8014ec2:	f8da 1004 	ldr.w	r1, [sl, #4]
 8014ec6:	bfa6      	itte	ge
 8014ec8:	461c      	movge	r4, r3
 8014eca:	2500      	movge	r5, #0
 8014ecc:	2501      	movlt	r5, #1
 8014ece:	f7ff fcf7 	bl	80148c0 <_Balloc>
 8014ed2:	4602      	mov	r2, r0
 8014ed4:	b918      	cbnz	r0, 8014ede <__mdiff+0x5e>
 8014ed6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014eda:	4b2f      	ldr	r3, [pc, #188]	; (8014f98 <__mdiff+0x118>)
 8014edc:	e7e4      	b.n	8014ea8 <__mdiff+0x28>
 8014ede:	f100 0814 	add.w	r8, r0, #20
 8014ee2:	f8da 7010 	ldr.w	r7, [sl, #16]
 8014ee6:	60c5      	str	r5, [r0, #12]
 8014ee8:	f04f 0c00 	mov.w	ip, #0
 8014eec:	f10a 0514 	add.w	r5, sl, #20
 8014ef0:	f10a 0010 	add.w	r0, sl, #16
 8014ef4:	46c2      	mov	sl, r8
 8014ef6:	6926      	ldr	r6, [r4, #16]
 8014ef8:	f104 0914 	add.w	r9, r4, #20
 8014efc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8014f00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014f04:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8014f08:	f859 3b04 	ldr.w	r3, [r9], #4
 8014f0c:	fa1f f18b 	uxth.w	r1, fp
 8014f10:	4461      	add	r1, ip
 8014f12:	fa1f fc83 	uxth.w	ip, r3
 8014f16:	0c1b      	lsrs	r3, r3, #16
 8014f18:	eba1 010c 	sub.w	r1, r1, ip
 8014f1c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014f20:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8014f24:	b289      	uxth	r1, r1
 8014f26:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8014f2a:	454e      	cmp	r6, r9
 8014f2c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014f30:	f84a 3b04 	str.w	r3, [sl], #4
 8014f34:	d8e6      	bhi.n	8014f04 <__mdiff+0x84>
 8014f36:	1b33      	subs	r3, r6, r4
 8014f38:	3b15      	subs	r3, #21
 8014f3a:	f023 0303 	bic.w	r3, r3, #3
 8014f3e:	3415      	adds	r4, #21
 8014f40:	3304      	adds	r3, #4
 8014f42:	42a6      	cmp	r6, r4
 8014f44:	bf38      	it	cc
 8014f46:	2304      	movcc	r3, #4
 8014f48:	441d      	add	r5, r3
 8014f4a:	4443      	add	r3, r8
 8014f4c:	461e      	mov	r6, r3
 8014f4e:	462c      	mov	r4, r5
 8014f50:	4574      	cmp	r4, lr
 8014f52:	d30e      	bcc.n	8014f72 <__mdiff+0xf2>
 8014f54:	f10e 0103 	add.w	r1, lr, #3
 8014f58:	1b49      	subs	r1, r1, r5
 8014f5a:	f021 0103 	bic.w	r1, r1, #3
 8014f5e:	3d03      	subs	r5, #3
 8014f60:	45ae      	cmp	lr, r5
 8014f62:	bf38      	it	cc
 8014f64:	2100      	movcc	r1, #0
 8014f66:	4419      	add	r1, r3
 8014f68:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8014f6c:	b18b      	cbz	r3, 8014f92 <__mdiff+0x112>
 8014f6e:	6117      	str	r7, [r2, #16]
 8014f70:	e7a0      	b.n	8014eb4 <__mdiff+0x34>
 8014f72:	f854 8b04 	ldr.w	r8, [r4], #4
 8014f76:	fa1f f188 	uxth.w	r1, r8
 8014f7a:	4461      	add	r1, ip
 8014f7c:	1408      	asrs	r0, r1, #16
 8014f7e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8014f82:	b289      	uxth	r1, r1
 8014f84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014f88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014f8c:	f846 1b04 	str.w	r1, [r6], #4
 8014f90:	e7de      	b.n	8014f50 <__mdiff+0xd0>
 8014f92:	3f01      	subs	r7, #1
 8014f94:	e7e8      	b.n	8014f68 <__mdiff+0xe8>
 8014f96:	bf00      	nop
 8014f98:	08016054 	.word	0x08016054
 8014f9c:	080160e4 	.word	0x080160e4

08014fa0 <__ulp>:
 8014fa0:	4b11      	ldr	r3, [pc, #68]	; (8014fe8 <__ulp+0x48>)
 8014fa2:	400b      	ands	r3, r1
 8014fa4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	dd02      	ble.n	8014fb2 <__ulp+0x12>
 8014fac:	2000      	movs	r0, #0
 8014fae:	4619      	mov	r1, r3
 8014fb0:	4770      	bx	lr
 8014fb2:	425b      	negs	r3, r3
 8014fb4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8014fb8:	f04f 0000 	mov.w	r0, #0
 8014fbc:	f04f 0100 	mov.w	r1, #0
 8014fc0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014fc4:	da04      	bge.n	8014fd0 <__ulp+0x30>
 8014fc6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014fca:	fa43 f102 	asr.w	r1, r3, r2
 8014fce:	4770      	bx	lr
 8014fd0:	f1a2 0314 	sub.w	r3, r2, #20
 8014fd4:	2b1e      	cmp	r3, #30
 8014fd6:	bfd6      	itet	le
 8014fd8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8014fdc:	2301      	movgt	r3, #1
 8014fde:	fa22 f303 	lsrle.w	r3, r2, r3
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	4770      	bx	lr
 8014fe6:	bf00      	nop
 8014fe8:	7ff00000 	.word	0x7ff00000

08014fec <__b2d>:
 8014fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ff0:	6907      	ldr	r7, [r0, #16]
 8014ff2:	f100 0914 	add.w	r9, r0, #20
 8014ff6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8014ffa:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8014ffe:	f1a7 0804 	sub.w	r8, r7, #4
 8015002:	4630      	mov	r0, r6
 8015004:	f7ff fd52 	bl	8014aac <__hi0bits>
 8015008:	f1c0 0320 	rsb	r3, r0, #32
 801500c:	280a      	cmp	r0, #10
 801500e:	600b      	str	r3, [r1, #0]
 8015010:	491f      	ldr	r1, [pc, #124]	; (8015090 <__b2d+0xa4>)
 8015012:	dc17      	bgt.n	8015044 <__b2d+0x58>
 8015014:	45c1      	cmp	r9, r8
 8015016:	bf28      	it	cs
 8015018:	2200      	movcs	r2, #0
 801501a:	f1c0 0c0b 	rsb	ip, r0, #11
 801501e:	fa26 f30c 	lsr.w	r3, r6, ip
 8015022:	bf38      	it	cc
 8015024:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8015028:	ea43 0501 	orr.w	r5, r3, r1
 801502c:	f100 0315 	add.w	r3, r0, #21
 8015030:	fa06 f303 	lsl.w	r3, r6, r3
 8015034:	fa22 f20c 	lsr.w	r2, r2, ip
 8015038:	ea43 0402 	orr.w	r4, r3, r2
 801503c:	4620      	mov	r0, r4
 801503e:	4629      	mov	r1, r5
 8015040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015044:	45c1      	cmp	r9, r8
 8015046:	bf2e      	itee	cs
 8015048:	2200      	movcs	r2, #0
 801504a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801504e:	f1a7 0808 	subcc.w	r8, r7, #8
 8015052:	f1b0 030b 	subs.w	r3, r0, #11
 8015056:	d016      	beq.n	8015086 <__b2d+0x9a>
 8015058:	f1c3 0720 	rsb	r7, r3, #32
 801505c:	fa22 f107 	lsr.w	r1, r2, r7
 8015060:	45c8      	cmp	r8, r9
 8015062:	fa06 f603 	lsl.w	r6, r6, r3
 8015066:	ea46 0601 	orr.w	r6, r6, r1
 801506a:	bf94      	ite	ls
 801506c:	2100      	movls	r1, #0
 801506e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8015072:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8015076:	fa02 f003 	lsl.w	r0, r2, r3
 801507a:	40f9      	lsrs	r1, r7
 801507c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015080:	ea40 0401 	orr.w	r4, r0, r1
 8015084:	e7da      	b.n	801503c <__b2d+0x50>
 8015086:	4614      	mov	r4, r2
 8015088:	ea46 0501 	orr.w	r5, r6, r1
 801508c:	e7d6      	b.n	801503c <__b2d+0x50>
 801508e:	bf00      	nop
 8015090:	3ff00000 	.word	0x3ff00000

08015094 <__d2b>:
 8015094:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015098:	2101      	movs	r1, #1
 801509a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801509e:	4690      	mov	r8, r2
 80150a0:	461d      	mov	r5, r3
 80150a2:	f7ff fc0d 	bl	80148c0 <_Balloc>
 80150a6:	4604      	mov	r4, r0
 80150a8:	b930      	cbnz	r0, 80150b8 <__d2b+0x24>
 80150aa:	4602      	mov	r2, r0
 80150ac:	f240 310a 	movw	r1, #778	; 0x30a
 80150b0:	4b24      	ldr	r3, [pc, #144]	; (8015144 <__d2b+0xb0>)
 80150b2:	4825      	ldr	r0, [pc, #148]	; (8015148 <__d2b+0xb4>)
 80150b4:	f000 fa5e 	bl	8015574 <__assert_func>
 80150b8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80150bc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80150c0:	bb2d      	cbnz	r5, 801510e <__d2b+0x7a>
 80150c2:	9301      	str	r3, [sp, #4]
 80150c4:	f1b8 0300 	subs.w	r3, r8, #0
 80150c8:	d026      	beq.n	8015118 <__d2b+0x84>
 80150ca:	4668      	mov	r0, sp
 80150cc:	9300      	str	r3, [sp, #0]
 80150ce:	f7ff fd0d 	bl	8014aec <__lo0bits>
 80150d2:	9900      	ldr	r1, [sp, #0]
 80150d4:	b1f0      	cbz	r0, 8015114 <__d2b+0x80>
 80150d6:	9a01      	ldr	r2, [sp, #4]
 80150d8:	f1c0 0320 	rsb	r3, r0, #32
 80150dc:	fa02 f303 	lsl.w	r3, r2, r3
 80150e0:	430b      	orrs	r3, r1
 80150e2:	40c2      	lsrs	r2, r0
 80150e4:	6163      	str	r3, [r4, #20]
 80150e6:	9201      	str	r2, [sp, #4]
 80150e8:	9b01      	ldr	r3, [sp, #4]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	bf14      	ite	ne
 80150ee:	2102      	movne	r1, #2
 80150f0:	2101      	moveq	r1, #1
 80150f2:	61a3      	str	r3, [r4, #24]
 80150f4:	6121      	str	r1, [r4, #16]
 80150f6:	b1c5      	cbz	r5, 801512a <__d2b+0x96>
 80150f8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80150fc:	4405      	add	r5, r0
 80150fe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015102:	603d      	str	r5, [r7, #0]
 8015104:	6030      	str	r0, [r6, #0]
 8015106:	4620      	mov	r0, r4
 8015108:	b002      	add	sp, #8
 801510a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801510e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015112:	e7d6      	b.n	80150c2 <__d2b+0x2e>
 8015114:	6161      	str	r1, [r4, #20]
 8015116:	e7e7      	b.n	80150e8 <__d2b+0x54>
 8015118:	a801      	add	r0, sp, #4
 801511a:	f7ff fce7 	bl	8014aec <__lo0bits>
 801511e:	2101      	movs	r1, #1
 8015120:	9b01      	ldr	r3, [sp, #4]
 8015122:	6121      	str	r1, [r4, #16]
 8015124:	6163      	str	r3, [r4, #20]
 8015126:	3020      	adds	r0, #32
 8015128:	e7e5      	b.n	80150f6 <__d2b+0x62>
 801512a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801512e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015132:	6038      	str	r0, [r7, #0]
 8015134:	6918      	ldr	r0, [r3, #16]
 8015136:	f7ff fcb9 	bl	8014aac <__hi0bits>
 801513a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 801513e:	6031      	str	r1, [r6, #0]
 8015140:	e7e1      	b.n	8015106 <__d2b+0x72>
 8015142:	bf00      	nop
 8015144:	08016054 	.word	0x08016054
 8015148:	080160e4 	.word	0x080160e4

0801514c <__ratio>:
 801514c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015150:	4688      	mov	r8, r1
 8015152:	4669      	mov	r1, sp
 8015154:	4681      	mov	r9, r0
 8015156:	f7ff ff49 	bl	8014fec <__b2d>
 801515a:	460f      	mov	r7, r1
 801515c:	4604      	mov	r4, r0
 801515e:	460d      	mov	r5, r1
 8015160:	4640      	mov	r0, r8
 8015162:	a901      	add	r1, sp, #4
 8015164:	f7ff ff42 	bl	8014fec <__b2d>
 8015168:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801516c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015170:	468b      	mov	fp, r1
 8015172:	eba3 0c02 	sub.w	ip, r3, r2
 8015176:	e9dd 3200 	ldrd	r3, r2, [sp]
 801517a:	1a9b      	subs	r3, r3, r2
 801517c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015180:	2b00      	cmp	r3, #0
 8015182:	bfd5      	itete	le
 8015184:	460a      	movle	r2, r1
 8015186:	462a      	movgt	r2, r5
 8015188:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801518c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015190:	bfd8      	it	le
 8015192:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8015196:	465b      	mov	r3, fp
 8015198:	4602      	mov	r2, r0
 801519a:	4639      	mov	r1, r7
 801519c:	4620      	mov	r0, r4
 801519e:	f7eb fb0f 	bl	80007c0 <__aeabi_ddiv>
 80151a2:	b003      	add	sp, #12
 80151a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080151a8 <__copybits>:
 80151a8:	3901      	subs	r1, #1
 80151aa:	b570      	push	{r4, r5, r6, lr}
 80151ac:	1149      	asrs	r1, r1, #5
 80151ae:	6914      	ldr	r4, [r2, #16]
 80151b0:	3101      	adds	r1, #1
 80151b2:	f102 0314 	add.w	r3, r2, #20
 80151b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80151ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80151be:	1f05      	subs	r5, r0, #4
 80151c0:	42a3      	cmp	r3, r4
 80151c2:	d30c      	bcc.n	80151de <__copybits+0x36>
 80151c4:	1aa3      	subs	r3, r4, r2
 80151c6:	3b11      	subs	r3, #17
 80151c8:	f023 0303 	bic.w	r3, r3, #3
 80151cc:	3211      	adds	r2, #17
 80151ce:	42a2      	cmp	r2, r4
 80151d0:	bf88      	it	hi
 80151d2:	2300      	movhi	r3, #0
 80151d4:	4418      	add	r0, r3
 80151d6:	2300      	movs	r3, #0
 80151d8:	4288      	cmp	r0, r1
 80151da:	d305      	bcc.n	80151e8 <__copybits+0x40>
 80151dc:	bd70      	pop	{r4, r5, r6, pc}
 80151de:	f853 6b04 	ldr.w	r6, [r3], #4
 80151e2:	f845 6f04 	str.w	r6, [r5, #4]!
 80151e6:	e7eb      	b.n	80151c0 <__copybits+0x18>
 80151e8:	f840 3b04 	str.w	r3, [r0], #4
 80151ec:	e7f4      	b.n	80151d8 <__copybits+0x30>

080151ee <__any_on>:
 80151ee:	f100 0214 	add.w	r2, r0, #20
 80151f2:	6900      	ldr	r0, [r0, #16]
 80151f4:	114b      	asrs	r3, r1, #5
 80151f6:	4298      	cmp	r0, r3
 80151f8:	b510      	push	{r4, lr}
 80151fa:	db11      	blt.n	8015220 <__any_on+0x32>
 80151fc:	dd0a      	ble.n	8015214 <__any_on+0x26>
 80151fe:	f011 011f 	ands.w	r1, r1, #31
 8015202:	d007      	beq.n	8015214 <__any_on+0x26>
 8015204:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015208:	fa24 f001 	lsr.w	r0, r4, r1
 801520c:	fa00 f101 	lsl.w	r1, r0, r1
 8015210:	428c      	cmp	r4, r1
 8015212:	d10b      	bne.n	801522c <__any_on+0x3e>
 8015214:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015218:	4293      	cmp	r3, r2
 801521a:	d803      	bhi.n	8015224 <__any_on+0x36>
 801521c:	2000      	movs	r0, #0
 801521e:	bd10      	pop	{r4, pc}
 8015220:	4603      	mov	r3, r0
 8015222:	e7f7      	b.n	8015214 <__any_on+0x26>
 8015224:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015228:	2900      	cmp	r1, #0
 801522a:	d0f5      	beq.n	8015218 <__any_on+0x2a>
 801522c:	2001      	movs	r0, #1
 801522e:	e7f6      	b.n	801521e <__any_on+0x30>

08015230 <_calloc_r>:
 8015230:	b538      	push	{r3, r4, r5, lr}
 8015232:	fb02 f501 	mul.w	r5, r2, r1
 8015236:	4629      	mov	r1, r5
 8015238:	f7fc f9e6 	bl	8011608 <_malloc_r>
 801523c:	4604      	mov	r4, r0
 801523e:	b118      	cbz	r0, 8015248 <_calloc_r+0x18>
 8015240:	462a      	mov	r2, r5
 8015242:	2100      	movs	r1, #0
 8015244:	f7fc f98c 	bl	8011560 <memset>
 8015248:	4620      	mov	r0, r4
 801524a:	bd38      	pop	{r3, r4, r5, pc}

0801524c <__ssputs_r>:
 801524c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015250:	688e      	ldr	r6, [r1, #8]
 8015252:	4682      	mov	sl, r0
 8015254:	429e      	cmp	r6, r3
 8015256:	460c      	mov	r4, r1
 8015258:	4690      	mov	r8, r2
 801525a:	461f      	mov	r7, r3
 801525c:	d838      	bhi.n	80152d0 <__ssputs_r+0x84>
 801525e:	898a      	ldrh	r2, [r1, #12]
 8015260:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015264:	d032      	beq.n	80152cc <__ssputs_r+0x80>
 8015266:	6825      	ldr	r5, [r4, #0]
 8015268:	6909      	ldr	r1, [r1, #16]
 801526a:	3301      	adds	r3, #1
 801526c:	eba5 0901 	sub.w	r9, r5, r1
 8015270:	6965      	ldr	r5, [r4, #20]
 8015272:	444b      	add	r3, r9
 8015274:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015278:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801527c:	106d      	asrs	r5, r5, #1
 801527e:	429d      	cmp	r5, r3
 8015280:	bf38      	it	cc
 8015282:	461d      	movcc	r5, r3
 8015284:	0553      	lsls	r3, r2, #21
 8015286:	d531      	bpl.n	80152ec <__ssputs_r+0xa0>
 8015288:	4629      	mov	r1, r5
 801528a:	f7fc f9bd 	bl	8011608 <_malloc_r>
 801528e:	4606      	mov	r6, r0
 8015290:	b950      	cbnz	r0, 80152a8 <__ssputs_r+0x5c>
 8015292:	230c      	movs	r3, #12
 8015294:	f04f 30ff 	mov.w	r0, #4294967295
 8015298:	f8ca 3000 	str.w	r3, [sl]
 801529c:	89a3      	ldrh	r3, [r4, #12]
 801529e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152a2:	81a3      	strh	r3, [r4, #12]
 80152a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152a8:	464a      	mov	r2, r9
 80152aa:	6921      	ldr	r1, [r4, #16]
 80152ac:	f7fc f94a 	bl	8011544 <memcpy>
 80152b0:	89a3      	ldrh	r3, [r4, #12]
 80152b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80152b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80152ba:	81a3      	strh	r3, [r4, #12]
 80152bc:	6126      	str	r6, [r4, #16]
 80152be:	444e      	add	r6, r9
 80152c0:	6026      	str	r6, [r4, #0]
 80152c2:	463e      	mov	r6, r7
 80152c4:	6165      	str	r5, [r4, #20]
 80152c6:	eba5 0509 	sub.w	r5, r5, r9
 80152ca:	60a5      	str	r5, [r4, #8]
 80152cc:	42be      	cmp	r6, r7
 80152ce:	d900      	bls.n	80152d2 <__ssputs_r+0x86>
 80152d0:	463e      	mov	r6, r7
 80152d2:	4632      	mov	r2, r6
 80152d4:	4641      	mov	r1, r8
 80152d6:	6820      	ldr	r0, [r4, #0]
 80152d8:	f000 f97c 	bl	80155d4 <memmove>
 80152dc:	68a3      	ldr	r3, [r4, #8]
 80152de:	6822      	ldr	r2, [r4, #0]
 80152e0:	1b9b      	subs	r3, r3, r6
 80152e2:	4432      	add	r2, r6
 80152e4:	2000      	movs	r0, #0
 80152e6:	60a3      	str	r3, [r4, #8]
 80152e8:	6022      	str	r2, [r4, #0]
 80152ea:	e7db      	b.n	80152a4 <__ssputs_r+0x58>
 80152ec:	462a      	mov	r2, r5
 80152ee:	f000 f98b 	bl	8015608 <_realloc_r>
 80152f2:	4606      	mov	r6, r0
 80152f4:	2800      	cmp	r0, #0
 80152f6:	d1e1      	bne.n	80152bc <__ssputs_r+0x70>
 80152f8:	4650      	mov	r0, sl
 80152fa:	6921      	ldr	r1, [r4, #16]
 80152fc:	f7fc f938 	bl	8011570 <_free_r>
 8015300:	e7c7      	b.n	8015292 <__ssputs_r+0x46>
	...

08015304 <_svfiprintf_r>:
 8015304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015308:	4698      	mov	r8, r3
 801530a:	898b      	ldrh	r3, [r1, #12]
 801530c:	4607      	mov	r7, r0
 801530e:	061b      	lsls	r3, r3, #24
 8015310:	460d      	mov	r5, r1
 8015312:	4614      	mov	r4, r2
 8015314:	b09d      	sub	sp, #116	; 0x74
 8015316:	d50e      	bpl.n	8015336 <_svfiprintf_r+0x32>
 8015318:	690b      	ldr	r3, [r1, #16]
 801531a:	b963      	cbnz	r3, 8015336 <_svfiprintf_r+0x32>
 801531c:	2140      	movs	r1, #64	; 0x40
 801531e:	f7fc f973 	bl	8011608 <_malloc_r>
 8015322:	6028      	str	r0, [r5, #0]
 8015324:	6128      	str	r0, [r5, #16]
 8015326:	b920      	cbnz	r0, 8015332 <_svfiprintf_r+0x2e>
 8015328:	230c      	movs	r3, #12
 801532a:	603b      	str	r3, [r7, #0]
 801532c:	f04f 30ff 	mov.w	r0, #4294967295
 8015330:	e0d1      	b.n	80154d6 <_svfiprintf_r+0x1d2>
 8015332:	2340      	movs	r3, #64	; 0x40
 8015334:	616b      	str	r3, [r5, #20]
 8015336:	2300      	movs	r3, #0
 8015338:	9309      	str	r3, [sp, #36]	; 0x24
 801533a:	2320      	movs	r3, #32
 801533c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015340:	2330      	movs	r3, #48	; 0x30
 8015342:	f04f 0901 	mov.w	r9, #1
 8015346:	f8cd 800c 	str.w	r8, [sp, #12]
 801534a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80154f0 <_svfiprintf_r+0x1ec>
 801534e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015352:	4623      	mov	r3, r4
 8015354:	469a      	mov	sl, r3
 8015356:	f813 2b01 	ldrb.w	r2, [r3], #1
 801535a:	b10a      	cbz	r2, 8015360 <_svfiprintf_r+0x5c>
 801535c:	2a25      	cmp	r2, #37	; 0x25
 801535e:	d1f9      	bne.n	8015354 <_svfiprintf_r+0x50>
 8015360:	ebba 0b04 	subs.w	fp, sl, r4
 8015364:	d00b      	beq.n	801537e <_svfiprintf_r+0x7a>
 8015366:	465b      	mov	r3, fp
 8015368:	4622      	mov	r2, r4
 801536a:	4629      	mov	r1, r5
 801536c:	4638      	mov	r0, r7
 801536e:	f7ff ff6d 	bl	801524c <__ssputs_r>
 8015372:	3001      	adds	r0, #1
 8015374:	f000 80aa 	beq.w	80154cc <_svfiprintf_r+0x1c8>
 8015378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801537a:	445a      	add	r2, fp
 801537c:	9209      	str	r2, [sp, #36]	; 0x24
 801537e:	f89a 3000 	ldrb.w	r3, [sl]
 8015382:	2b00      	cmp	r3, #0
 8015384:	f000 80a2 	beq.w	80154cc <_svfiprintf_r+0x1c8>
 8015388:	2300      	movs	r3, #0
 801538a:	f04f 32ff 	mov.w	r2, #4294967295
 801538e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015392:	f10a 0a01 	add.w	sl, sl, #1
 8015396:	9304      	str	r3, [sp, #16]
 8015398:	9307      	str	r3, [sp, #28]
 801539a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801539e:	931a      	str	r3, [sp, #104]	; 0x68
 80153a0:	4654      	mov	r4, sl
 80153a2:	2205      	movs	r2, #5
 80153a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153a8:	4851      	ldr	r0, [pc, #324]	; (80154f0 <_svfiprintf_r+0x1ec>)
 80153aa:	f7ff fa6f 	bl	801488c <memchr>
 80153ae:	9a04      	ldr	r2, [sp, #16]
 80153b0:	b9d8      	cbnz	r0, 80153ea <_svfiprintf_r+0xe6>
 80153b2:	06d0      	lsls	r0, r2, #27
 80153b4:	bf44      	itt	mi
 80153b6:	2320      	movmi	r3, #32
 80153b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80153bc:	0711      	lsls	r1, r2, #28
 80153be:	bf44      	itt	mi
 80153c0:	232b      	movmi	r3, #43	; 0x2b
 80153c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80153c6:	f89a 3000 	ldrb.w	r3, [sl]
 80153ca:	2b2a      	cmp	r3, #42	; 0x2a
 80153cc:	d015      	beq.n	80153fa <_svfiprintf_r+0xf6>
 80153ce:	4654      	mov	r4, sl
 80153d0:	2000      	movs	r0, #0
 80153d2:	f04f 0c0a 	mov.w	ip, #10
 80153d6:	9a07      	ldr	r2, [sp, #28]
 80153d8:	4621      	mov	r1, r4
 80153da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80153de:	3b30      	subs	r3, #48	; 0x30
 80153e0:	2b09      	cmp	r3, #9
 80153e2:	d94e      	bls.n	8015482 <_svfiprintf_r+0x17e>
 80153e4:	b1b0      	cbz	r0, 8015414 <_svfiprintf_r+0x110>
 80153e6:	9207      	str	r2, [sp, #28]
 80153e8:	e014      	b.n	8015414 <_svfiprintf_r+0x110>
 80153ea:	eba0 0308 	sub.w	r3, r0, r8
 80153ee:	fa09 f303 	lsl.w	r3, r9, r3
 80153f2:	4313      	orrs	r3, r2
 80153f4:	46a2      	mov	sl, r4
 80153f6:	9304      	str	r3, [sp, #16]
 80153f8:	e7d2      	b.n	80153a0 <_svfiprintf_r+0x9c>
 80153fa:	9b03      	ldr	r3, [sp, #12]
 80153fc:	1d19      	adds	r1, r3, #4
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	9103      	str	r1, [sp, #12]
 8015402:	2b00      	cmp	r3, #0
 8015404:	bfbb      	ittet	lt
 8015406:	425b      	neglt	r3, r3
 8015408:	f042 0202 	orrlt.w	r2, r2, #2
 801540c:	9307      	strge	r3, [sp, #28]
 801540e:	9307      	strlt	r3, [sp, #28]
 8015410:	bfb8      	it	lt
 8015412:	9204      	strlt	r2, [sp, #16]
 8015414:	7823      	ldrb	r3, [r4, #0]
 8015416:	2b2e      	cmp	r3, #46	; 0x2e
 8015418:	d10c      	bne.n	8015434 <_svfiprintf_r+0x130>
 801541a:	7863      	ldrb	r3, [r4, #1]
 801541c:	2b2a      	cmp	r3, #42	; 0x2a
 801541e:	d135      	bne.n	801548c <_svfiprintf_r+0x188>
 8015420:	9b03      	ldr	r3, [sp, #12]
 8015422:	3402      	adds	r4, #2
 8015424:	1d1a      	adds	r2, r3, #4
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	9203      	str	r2, [sp, #12]
 801542a:	2b00      	cmp	r3, #0
 801542c:	bfb8      	it	lt
 801542e:	f04f 33ff 	movlt.w	r3, #4294967295
 8015432:	9305      	str	r3, [sp, #20]
 8015434:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015500 <_svfiprintf_r+0x1fc>
 8015438:	2203      	movs	r2, #3
 801543a:	4650      	mov	r0, sl
 801543c:	7821      	ldrb	r1, [r4, #0]
 801543e:	f7ff fa25 	bl	801488c <memchr>
 8015442:	b140      	cbz	r0, 8015456 <_svfiprintf_r+0x152>
 8015444:	2340      	movs	r3, #64	; 0x40
 8015446:	eba0 000a 	sub.w	r0, r0, sl
 801544a:	fa03 f000 	lsl.w	r0, r3, r0
 801544e:	9b04      	ldr	r3, [sp, #16]
 8015450:	3401      	adds	r4, #1
 8015452:	4303      	orrs	r3, r0
 8015454:	9304      	str	r3, [sp, #16]
 8015456:	f814 1b01 	ldrb.w	r1, [r4], #1
 801545a:	2206      	movs	r2, #6
 801545c:	4825      	ldr	r0, [pc, #148]	; (80154f4 <_svfiprintf_r+0x1f0>)
 801545e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015462:	f7ff fa13 	bl	801488c <memchr>
 8015466:	2800      	cmp	r0, #0
 8015468:	d038      	beq.n	80154dc <_svfiprintf_r+0x1d8>
 801546a:	4b23      	ldr	r3, [pc, #140]	; (80154f8 <_svfiprintf_r+0x1f4>)
 801546c:	bb1b      	cbnz	r3, 80154b6 <_svfiprintf_r+0x1b2>
 801546e:	9b03      	ldr	r3, [sp, #12]
 8015470:	3307      	adds	r3, #7
 8015472:	f023 0307 	bic.w	r3, r3, #7
 8015476:	3308      	adds	r3, #8
 8015478:	9303      	str	r3, [sp, #12]
 801547a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801547c:	4433      	add	r3, r6
 801547e:	9309      	str	r3, [sp, #36]	; 0x24
 8015480:	e767      	b.n	8015352 <_svfiprintf_r+0x4e>
 8015482:	460c      	mov	r4, r1
 8015484:	2001      	movs	r0, #1
 8015486:	fb0c 3202 	mla	r2, ip, r2, r3
 801548a:	e7a5      	b.n	80153d8 <_svfiprintf_r+0xd4>
 801548c:	2300      	movs	r3, #0
 801548e:	f04f 0c0a 	mov.w	ip, #10
 8015492:	4619      	mov	r1, r3
 8015494:	3401      	adds	r4, #1
 8015496:	9305      	str	r3, [sp, #20]
 8015498:	4620      	mov	r0, r4
 801549a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801549e:	3a30      	subs	r2, #48	; 0x30
 80154a0:	2a09      	cmp	r2, #9
 80154a2:	d903      	bls.n	80154ac <_svfiprintf_r+0x1a8>
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d0c5      	beq.n	8015434 <_svfiprintf_r+0x130>
 80154a8:	9105      	str	r1, [sp, #20]
 80154aa:	e7c3      	b.n	8015434 <_svfiprintf_r+0x130>
 80154ac:	4604      	mov	r4, r0
 80154ae:	2301      	movs	r3, #1
 80154b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80154b4:	e7f0      	b.n	8015498 <_svfiprintf_r+0x194>
 80154b6:	ab03      	add	r3, sp, #12
 80154b8:	9300      	str	r3, [sp, #0]
 80154ba:	462a      	mov	r2, r5
 80154bc:	4638      	mov	r0, r7
 80154be:	4b0f      	ldr	r3, [pc, #60]	; (80154fc <_svfiprintf_r+0x1f8>)
 80154c0:	a904      	add	r1, sp, #16
 80154c2:	f7fc f999 	bl	80117f8 <_printf_float>
 80154c6:	1c42      	adds	r2, r0, #1
 80154c8:	4606      	mov	r6, r0
 80154ca:	d1d6      	bne.n	801547a <_svfiprintf_r+0x176>
 80154cc:	89ab      	ldrh	r3, [r5, #12]
 80154ce:	065b      	lsls	r3, r3, #25
 80154d0:	f53f af2c 	bmi.w	801532c <_svfiprintf_r+0x28>
 80154d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80154d6:	b01d      	add	sp, #116	; 0x74
 80154d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154dc:	ab03      	add	r3, sp, #12
 80154de:	9300      	str	r3, [sp, #0]
 80154e0:	462a      	mov	r2, r5
 80154e2:	4638      	mov	r0, r7
 80154e4:	4b05      	ldr	r3, [pc, #20]	; (80154fc <_svfiprintf_r+0x1f8>)
 80154e6:	a904      	add	r1, sp, #16
 80154e8:	f7fc fc22 	bl	8011d30 <_printf_i>
 80154ec:	e7eb      	b.n	80154c6 <_svfiprintf_r+0x1c2>
 80154ee:	bf00      	nop
 80154f0:	08016244 	.word	0x08016244
 80154f4:	0801624e 	.word	0x0801624e
 80154f8:	080117f9 	.word	0x080117f9
 80154fc:	0801524d 	.word	0x0801524d
 8015500:	0801624a 	.word	0x0801624a

08015504 <_read_r>:
 8015504:	b538      	push	{r3, r4, r5, lr}
 8015506:	4604      	mov	r4, r0
 8015508:	4608      	mov	r0, r1
 801550a:	4611      	mov	r1, r2
 801550c:	2200      	movs	r2, #0
 801550e:	4d05      	ldr	r5, [pc, #20]	; (8015524 <_read_r+0x20>)
 8015510:	602a      	str	r2, [r5, #0]
 8015512:	461a      	mov	r2, r3
 8015514:	f7ed fc6b 	bl	8002dee <_read>
 8015518:	1c43      	adds	r3, r0, #1
 801551a:	d102      	bne.n	8015522 <_read_r+0x1e>
 801551c:	682b      	ldr	r3, [r5, #0]
 801551e:	b103      	cbz	r3, 8015522 <_read_r+0x1e>
 8015520:	6023      	str	r3, [r4, #0]
 8015522:	bd38      	pop	{r3, r4, r5, pc}
 8015524:	2000b3a8 	.word	0x2000b3a8

08015528 <nan>:
 8015528:	2000      	movs	r0, #0
 801552a:	4901      	ldr	r1, [pc, #4]	; (8015530 <nan+0x8>)
 801552c:	4770      	bx	lr
 801552e:	bf00      	nop
 8015530:	7ff80000 	.word	0x7ff80000

08015534 <strncmp>:
 8015534:	b510      	push	{r4, lr}
 8015536:	b16a      	cbz	r2, 8015554 <strncmp+0x20>
 8015538:	3901      	subs	r1, #1
 801553a:	1884      	adds	r4, r0, r2
 801553c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015540:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015544:	4293      	cmp	r3, r2
 8015546:	d103      	bne.n	8015550 <strncmp+0x1c>
 8015548:	42a0      	cmp	r0, r4
 801554a:	d001      	beq.n	8015550 <strncmp+0x1c>
 801554c:	2b00      	cmp	r3, #0
 801554e:	d1f5      	bne.n	801553c <strncmp+0x8>
 8015550:	1a98      	subs	r0, r3, r2
 8015552:	bd10      	pop	{r4, pc}
 8015554:	4610      	mov	r0, r2
 8015556:	e7fc      	b.n	8015552 <strncmp+0x1e>

08015558 <__ascii_wctomb>:
 8015558:	4603      	mov	r3, r0
 801555a:	4608      	mov	r0, r1
 801555c:	b141      	cbz	r1, 8015570 <__ascii_wctomb+0x18>
 801555e:	2aff      	cmp	r2, #255	; 0xff
 8015560:	d904      	bls.n	801556c <__ascii_wctomb+0x14>
 8015562:	228a      	movs	r2, #138	; 0x8a
 8015564:	f04f 30ff 	mov.w	r0, #4294967295
 8015568:	601a      	str	r2, [r3, #0]
 801556a:	4770      	bx	lr
 801556c:	2001      	movs	r0, #1
 801556e:	700a      	strb	r2, [r1, #0]
 8015570:	4770      	bx	lr
	...

08015574 <__assert_func>:
 8015574:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015576:	4614      	mov	r4, r2
 8015578:	461a      	mov	r2, r3
 801557a:	4b09      	ldr	r3, [pc, #36]	; (80155a0 <__assert_func+0x2c>)
 801557c:	4605      	mov	r5, r0
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	68d8      	ldr	r0, [r3, #12]
 8015582:	b14c      	cbz	r4, 8015598 <__assert_func+0x24>
 8015584:	4b07      	ldr	r3, [pc, #28]	; (80155a4 <__assert_func+0x30>)
 8015586:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801558a:	9100      	str	r1, [sp, #0]
 801558c:	462b      	mov	r3, r5
 801558e:	4906      	ldr	r1, [pc, #24]	; (80155a8 <__assert_func+0x34>)
 8015590:	f000 f80e 	bl	80155b0 <fiprintf>
 8015594:	f000 fa76 	bl	8015a84 <abort>
 8015598:	4b04      	ldr	r3, [pc, #16]	; (80155ac <__assert_func+0x38>)
 801559a:	461c      	mov	r4, r3
 801559c:	e7f3      	b.n	8015586 <__assert_func+0x12>
 801559e:	bf00      	nop
 80155a0:	2000005c 	.word	0x2000005c
 80155a4:	08016255 	.word	0x08016255
 80155a8:	08016262 	.word	0x08016262
 80155ac:	08016290 	.word	0x08016290

080155b0 <fiprintf>:
 80155b0:	b40e      	push	{r1, r2, r3}
 80155b2:	b503      	push	{r0, r1, lr}
 80155b4:	4601      	mov	r1, r0
 80155b6:	ab03      	add	r3, sp, #12
 80155b8:	4805      	ldr	r0, [pc, #20]	; (80155d0 <fiprintf+0x20>)
 80155ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80155be:	6800      	ldr	r0, [r0, #0]
 80155c0:	9301      	str	r3, [sp, #4]
 80155c2:	f000 f86f 	bl	80156a4 <_vfiprintf_r>
 80155c6:	b002      	add	sp, #8
 80155c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80155cc:	b003      	add	sp, #12
 80155ce:	4770      	bx	lr
 80155d0:	2000005c 	.word	0x2000005c

080155d4 <memmove>:
 80155d4:	4288      	cmp	r0, r1
 80155d6:	b510      	push	{r4, lr}
 80155d8:	eb01 0402 	add.w	r4, r1, r2
 80155dc:	d902      	bls.n	80155e4 <memmove+0x10>
 80155de:	4284      	cmp	r4, r0
 80155e0:	4623      	mov	r3, r4
 80155e2:	d807      	bhi.n	80155f4 <memmove+0x20>
 80155e4:	1e43      	subs	r3, r0, #1
 80155e6:	42a1      	cmp	r1, r4
 80155e8:	d008      	beq.n	80155fc <memmove+0x28>
 80155ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80155ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80155f2:	e7f8      	b.n	80155e6 <memmove+0x12>
 80155f4:	4601      	mov	r1, r0
 80155f6:	4402      	add	r2, r0
 80155f8:	428a      	cmp	r2, r1
 80155fa:	d100      	bne.n	80155fe <memmove+0x2a>
 80155fc:	bd10      	pop	{r4, pc}
 80155fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015602:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015606:	e7f7      	b.n	80155f8 <memmove+0x24>

08015608 <_realloc_r>:
 8015608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801560a:	4607      	mov	r7, r0
 801560c:	4614      	mov	r4, r2
 801560e:	460e      	mov	r6, r1
 8015610:	b921      	cbnz	r1, 801561c <_realloc_r+0x14>
 8015612:	4611      	mov	r1, r2
 8015614:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015618:	f7fb bff6 	b.w	8011608 <_malloc_r>
 801561c:	b922      	cbnz	r2, 8015628 <_realloc_r+0x20>
 801561e:	f7fb ffa7 	bl	8011570 <_free_r>
 8015622:	4625      	mov	r5, r4
 8015624:	4628      	mov	r0, r5
 8015626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015628:	f000 fa98 	bl	8015b5c <_malloc_usable_size_r>
 801562c:	42a0      	cmp	r0, r4
 801562e:	d20f      	bcs.n	8015650 <_realloc_r+0x48>
 8015630:	4621      	mov	r1, r4
 8015632:	4638      	mov	r0, r7
 8015634:	f7fb ffe8 	bl	8011608 <_malloc_r>
 8015638:	4605      	mov	r5, r0
 801563a:	2800      	cmp	r0, #0
 801563c:	d0f2      	beq.n	8015624 <_realloc_r+0x1c>
 801563e:	4631      	mov	r1, r6
 8015640:	4622      	mov	r2, r4
 8015642:	f7fb ff7f 	bl	8011544 <memcpy>
 8015646:	4631      	mov	r1, r6
 8015648:	4638      	mov	r0, r7
 801564a:	f7fb ff91 	bl	8011570 <_free_r>
 801564e:	e7e9      	b.n	8015624 <_realloc_r+0x1c>
 8015650:	4635      	mov	r5, r6
 8015652:	e7e7      	b.n	8015624 <_realloc_r+0x1c>

08015654 <__sfputc_r>:
 8015654:	6893      	ldr	r3, [r2, #8]
 8015656:	b410      	push	{r4}
 8015658:	3b01      	subs	r3, #1
 801565a:	2b00      	cmp	r3, #0
 801565c:	6093      	str	r3, [r2, #8]
 801565e:	da07      	bge.n	8015670 <__sfputc_r+0x1c>
 8015660:	6994      	ldr	r4, [r2, #24]
 8015662:	42a3      	cmp	r3, r4
 8015664:	db01      	blt.n	801566a <__sfputc_r+0x16>
 8015666:	290a      	cmp	r1, #10
 8015668:	d102      	bne.n	8015670 <__sfputc_r+0x1c>
 801566a:	bc10      	pop	{r4}
 801566c:	f000 b94a 	b.w	8015904 <__swbuf_r>
 8015670:	6813      	ldr	r3, [r2, #0]
 8015672:	1c58      	adds	r0, r3, #1
 8015674:	6010      	str	r0, [r2, #0]
 8015676:	7019      	strb	r1, [r3, #0]
 8015678:	4608      	mov	r0, r1
 801567a:	bc10      	pop	{r4}
 801567c:	4770      	bx	lr

0801567e <__sfputs_r>:
 801567e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015680:	4606      	mov	r6, r0
 8015682:	460f      	mov	r7, r1
 8015684:	4614      	mov	r4, r2
 8015686:	18d5      	adds	r5, r2, r3
 8015688:	42ac      	cmp	r4, r5
 801568a:	d101      	bne.n	8015690 <__sfputs_r+0x12>
 801568c:	2000      	movs	r0, #0
 801568e:	e007      	b.n	80156a0 <__sfputs_r+0x22>
 8015690:	463a      	mov	r2, r7
 8015692:	4630      	mov	r0, r6
 8015694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015698:	f7ff ffdc 	bl	8015654 <__sfputc_r>
 801569c:	1c43      	adds	r3, r0, #1
 801569e:	d1f3      	bne.n	8015688 <__sfputs_r+0xa>
 80156a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080156a4 <_vfiprintf_r>:
 80156a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156a8:	460d      	mov	r5, r1
 80156aa:	4614      	mov	r4, r2
 80156ac:	4698      	mov	r8, r3
 80156ae:	4606      	mov	r6, r0
 80156b0:	b09d      	sub	sp, #116	; 0x74
 80156b2:	b118      	cbz	r0, 80156bc <_vfiprintf_r+0x18>
 80156b4:	6983      	ldr	r3, [r0, #24]
 80156b6:	b90b      	cbnz	r3, 80156bc <_vfiprintf_r+0x18>
 80156b8:	f7fb fe6e 	bl	8011398 <__sinit>
 80156bc:	4b89      	ldr	r3, [pc, #548]	; (80158e4 <_vfiprintf_r+0x240>)
 80156be:	429d      	cmp	r5, r3
 80156c0:	d11b      	bne.n	80156fa <_vfiprintf_r+0x56>
 80156c2:	6875      	ldr	r5, [r6, #4]
 80156c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80156c6:	07d9      	lsls	r1, r3, #31
 80156c8:	d405      	bmi.n	80156d6 <_vfiprintf_r+0x32>
 80156ca:	89ab      	ldrh	r3, [r5, #12]
 80156cc:	059a      	lsls	r2, r3, #22
 80156ce:	d402      	bmi.n	80156d6 <_vfiprintf_r+0x32>
 80156d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80156d2:	f7fb ff24 	bl	801151e <__retarget_lock_acquire_recursive>
 80156d6:	89ab      	ldrh	r3, [r5, #12]
 80156d8:	071b      	lsls	r3, r3, #28
 80156da:	d501      	bpl.n	80156e0 <_vfiprintf_r+0x3c>
 80156dc:	692b      	ldr	r3, [r5, #16]
 80156de:	b9eb      	cbnz	r3, 801571c <_vfiprintf_r+0x78>
 80156e0:	4629      	mov	r1, r5
 80156e2:	4630      	mov	r0, r6
 80156e4:	f000 f960 	bl	80159a8 <__swsetup_r>
 80156e8:	b1c0      	cbz	r0, 801571c <_vfiprintf_r+0x78>
 80156ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80156ec:	07dc      	lsls	r4, r3, #31
 80156ee:	d50e      	bpl.n	801570e <_vfiprintf_r+0x6a>
 80156f0:	f04f 30ff 	mov.w	r0, #4294967295
 80156f4:	b01d      	add	sp, #116	; 0x74
 80156f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156fa:	4b7b      	ldr	r3, [pc, #492]	; (80158e8 <_vfiprintf_r+0x244>)
 80156fc:	429d      	cmp	r5, r3
 80156fe:	d101      	bne.n	8015704 <_vfiprintf_r+0x60>
 8015700:	68b5      	ldr	r5, [r6, #8]
 8015702:	e7df      	b.n	80156c4 <_vfiprintf_r+0x20>
 8015704:	4b79      	ldr	r3, [pc, #484]	; (80158ec <_vfiprintf_r+0x248>)
 8015706:	429d      	cmp	r5, r3
 8015708:	bf08      	it	eq
 801570a:	68f5      	ldreq	r5, [r6, #12]
 801570c:	e7da      	b.n	80156c4 <_vfiprintf_r+0x20>
 801570e:	89ab      	ldrh	r3, [r5, #12]
 8015710:	0598      	lsls	r0, r3, #22
 8015712:	d4ed      	bmi.n	80156f0 <_vfiprintf_r+0x4c>
 8015714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015716:	f7fb ff03 	bl	8011520 <__retarget_lock_release_recursive>
 801571a:	e7e9      	b.n	80156f0 <_vfiprintf_r+0x4c>
 801571c:	2300      	movs	r3, #0
 801571e:	9309      	str	r3, [sp, #36]	; 0x24
 8015720:	2320      	movs	r3, #32
 8015722:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015726:	2330      	movs	r3, #48	; 0x30
 8015728:	f04f 0901 	mov.w	r9, #1
 801572c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015730:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80158f0 <_vfiprintf_r+0x24c>
 8015734:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015738:	4623      	mov	r3, r4
 801573a:	469a      	mov	sl, r3
 801573c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015740:	b10a      	cbz	r2, 8015746 <_vfiprintf_r+0xa2>
 8015742:	2a25      	cmp	r2, #37	; 0x25
 8015744:	d1f9      	bne.n	801573a <_vfiprintf_r+0x96>
 8015746:	ebba 0b04 	subs.w	fp, sl, r4
 801574a:	d00b      	beq.n	8015764 <_vfiprintf_r+0xc0>
 801574c:	465b      	mov	r3, fp
 801574e:	4622      	mov	r2, r4
 8015750:	4629      	mov	r1, r5
 8015752:	4630      	mov	r0, r6
 8015754:	f7ff ff93 	bl	801567e <__sfputs_r>
 8015758:	3001      	adds	r0, #1
 801575a:	f000 80aa 	beq.w	80158b2 <_vfiprintf_r+0x20e>
 801575e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015760:	445a      	add	r2, fp
 8015762:	9209      	str	r2, [sp, #36]	; 0x24
 8015764:	f89a 3000 	ldrb.w	r3, [sl]
 8015768:	2b00      	cmp	r3, #0
 801576a:	f000 80a2 	beq.w	80158b2 <_vfiprintf_r+0x20e>
 801576e:	2300      	movs	r3, #0
 8015770:	f04f 32ff 	mov.w	r2, #4294967295
 8015774:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015778:	f10a 0a01 	add.w	sl, sl, #1
 801577c:	9304      	str	r3, [sp, #16]
 801577e:	9307      	str	r3, [sp, #28]
 8015780:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015784:	931a      	str	r3, [sp, #104]	; 0x68
 8015786:	4654      	mov	r4, sl
 8015788:	2205      	movs	r2, #5
 801578a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801578e:	4858      	ldr	r0, [pc, #352]	; (80158f0 <_vfiprintf_r+0x24c>)
 8015790:	f7ff f87c 	bl	801488c <memchr>
 8015794:	9a04      	ldr	r2, [sp, #16]
 8015796:	b9d8      	cbnz	r0, 80157d0 <_vfiprintf_r+0x12c>
 8015798:	06d1      	lsls	r1, r2, #27
 801579a:	bf44      	itt	mi
 801579c:	2320      	movmi	r3, #32
 801579e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80157a2:	0713      	lsls	r3, r2, #28
 80157a4:	bf44      	itt	mi
 80157a6:	232b      	movmi	r3, #43	; 0x2b
 80157a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80157ac:	f89a 3000 	ldrb.w	r3, [sl]
 80157b0:	2b2a      	cmp	r3, #42	; 0x2a
 80157b2:	d015      	beq.n	80157e0 <_vfiprintf_r+0x13c>
 80157b4:	4654      	mov	r4, sl
 80157b6:	2000      	movs	r0, #0
 80157b8:	f04f 0c0a 	mov.w	ip, #10
 80157bc:	9a07      	ldr	r2, [sp, #28]
 80157be:	4621      	mov	r1, r4
 80157c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80157c4:	3b30      	subs	r3, #48	; 0x30
 80157c6:	2b09      	cmp	r3, #9
 80157c8:	d94e      	bls.n	8015868 <_vfiprintf_r+0x1c4>
 80157ca:	b1b0      	cbz	r0, 80157fa <_vfiprintf_r+0x156>
 80157cc:	9207      	str	r2, [sp, #28]
 80157ce:	e014      	b.n	80157fa <_vfiprintf_r+0x156>
 80157d0:	eba0 0308 	sub.w	r3, r0, r8
 80157d4:	fa09 f303 	lsl.w	r3, r9, r3
 80157d8:	4313      	orrs	r3, r2
 80157da:	46a2      	mov	sl, r4
 80157dc:	9304      	str	r3, [sp, #16]
 80157de:	e7d2      	b.n	8015786 <_vfiprintf_r+0xe2>
 80157e0:	9b03      	ldr	r3, [sp, #12]
 80157e2:	1d19      	adds	r1, r3, #4
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	9103      	str	r1, [sp, #12]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	bfbb      	ittet	lt
 80157ec:	425b      	neglt	r3, r3
 80157ee:	f042 0202 	orrlt.w	r2, r2, #2
 80157f2:	9307      	strge	r3, [sp, #28]
 80157f4:	9307      	strlt	r3, [sp, #28]
 80157f6:	bfb8      	it	lt
 80157f8:	9204      	strlt	r2, [sp, #16]
 80157fa:	7823      	ldrb	r3, [r4, #0]
 80157fc:	2b2e      	cmp	r3, #46	; 0x2e
 80157fe:	d10c      	bne.n	801581a <_vfiprintf_r+0x176>
 8015800:	7863      	ldrb	r3, [r4, #1]
 8015802:	2b2a      	cmp	r3, #42	; 0x2a
 8015804:	d135      	bne.n	8015872 <_vfiprintf_r+0x1ce>
 8015806:	9b03      	ldr	r3, [sp, #12]
 8015808:	3402      	adds	r4, #2
 801580a:	1d1a      	adds	r2, r3, #4
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	9203      	str	r2, [sp, #12]
 8015810:	2b00      	cmp	r3, #0
 8015812:	bfb8      	it	lt
 8015814:	f04f 33ff 	movlt.w	r3, #4294967295
 8015818:	9305      	str	r3, [sp, #20]
 801581a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015900 <_vfiprintf_r+0x25c>
 801581e:	2203      	movs	r2, #3
 8015820:	4650      	mov	r0, sl
 8015822:	7821      	ldrb	r1, [r4, #0]
 8015824:	f7ff f832 	bl	801488c <memchr>
 8015828:	b140      	cbz	r0, 801583c <_vfiprintf_r+0x198>
 801582a:	2340      	movs	r3, #64	; 0x40
 801582c:	eba0 000a 	sub.w	r0, r0, sl
 8015830:	fa03 f000 	lsl.w	r0, r3, r0
 8015834:	9b04      	ldr	r3, [sp, #16]
 8015836:	3401      	adds	r4, #1
 8015838:	4303      	orrs	r3, r0
 801583a:	9304      	str	r3, [sp, #16]
 801583c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015840:	2206      	movs	r2, #6
 8015842:	482c      	ldr	r0, [pc, #176]	; (80158f4 <_vfiprintf_r+0x250>)
 8015844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015848:	f7ff f820 	bl	801488c <memchr>
 801584c:	2800      	cmp	r0, #0
 801584e:	d03f      	beq.n	80158d0 <_vfiprintf_r+0x22c>
 8015850:	4b29      	ldr	r3, [pc, #164]	; (80158f8 <_vfiprintf_r+0x254>)
 8015852:	bb1b      	cbnz	r3, 801589c <_vfiprintf_r+0x1f8>
 8015854:	9b03      	ldr	r3, [sp, #12]
 8015856:	3307      	adds	r3, #7
 8015858:	f023 0307 	bic.w	r3, r3, #7
 801585c:	3308      	adds	r3, #8
 801585e:	9303      	str	r3, [sp, #12]
 8015860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015862:	443b      	add	r3, r7
 8015864:	9309      	str	r3, [sp, #36]	; 0x24
 8015866:	e767      	b.n	8015738 <_vfiprintf_r+0x94>
 8015868:	460c      	mov	r4, r1
 801586a:	2001      	movs	r0, #1
 801586c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015870:	e7a5      	b.n	80157be <_vfiprintf_r+0x11a>
 8015872:	2300      	movs	r3, #0
 8015874:	f04f 0c0a 	mov.w	ip, #10
 8015878:	4619      	mov	r1, r3
 801587a:	3401      	adds	r4, #1
 801587c:	9305      	str	r3, [sp, #20]
 801587e:	4620      	mov	r0, r4
 8015880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015884:	3a30      	subs	r2, #48	; 0x30
 8015886:	2a09      	cmp	r2, #9
 8015888:	d903      	bls.n	8015892 <_vfiprintf_r+0x1ee>
 801588a:	2b00      	cmp	r3, #0
 801588c:	d0c5      	beq.n	801581a <_vfiprintf_r+0x176>
 801588e:	9105      	str	r1, [sp, #20]
 8015890:	e7c3      	b.n	801581a <_vfiprintf_r+0x176>
 8015892:	4604      	mov	r4, r0
 8015894:	2301      	movs	r3, #1
 8015896:	fb0c 2101 	mla	r1, ip, r1, r2
 801589a:	e7f0      	b.n	801587e <_vfiprintf_r+0x1da>
 801589c:	ab03      	add	r3, sp, #12
 801589e:	9300      	str	r3, [sp, #0]
 80158a0:	462a      	mov	r2, r5
 80158a2:	4630      	mov	r0, r6
 80158a4:	4b15      	ldr	r3, [pc, #84]	; (80158fc <_vfiprintf_r+0x258>)
 80158a6:	a904      	add	r1, sp, #16
 80158a8:	f7fb ffa6 	bl	80117f8 <_printf_float>
 80158ac:	4607      	mov	r7, r0
 80158ae:	1c78      	adds	r0, r7, #1
 80158b0:	d1d6      	bne.n	8015860 <_vfiprintf_r+0x1bc>
 80158b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80158b4:	07d9      	lsls	r1, r3, #31
 80158b6:	d405      	bmi.n	80158c4 <_vfiprintf_r+0x220>
 80158b8:	89ab      	ldrh	r3, [r5, #12]
 80158ba:	059a      	lsls	r2, r3, #22
 80158bc:	d402      	bmi.n	80158c4 <_vfiprintf_r+0x220>
 80158be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80158c0:	f7fb fe2e 	bl	8011520 <__retarget_lock_release_recursive>
 80158c4:	89ab      	ldrh	r3, [r5, #12]
 80158c6:	065b      	lsls	r3, r3, #25
 80158c8:	f53f af12 	bmi.w	80156f0 <_vfiprintf_r+0x4c>
 80158cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80158ce:	e711      	b.n	80156f4 <_vfiprintf_r+0x50>
 80158d0:	ab03      	add	r3, sp, #12
 80158d2:	9300      	str	r3, [sp, #0]
 80158d4:	462a      	mov	r2, r5
 80158d6:	4630      	mov	r0, r6
 80158d8:	4b08      	ldr	r3, [pc, #32]	; (80158fc <_vfiprintf_r+0x258>)
 80158da:	a904      	add	r1, sp, #16
 80158dc:	f7fc fa28 	bl	8011d30 <_printf_i>
 80158e0:	e7e4      	b.n	80158ac <_vfiprintf_r+0x208>
 80158e2:	bf00      	nop
 80158e4:	08015e00 	.word	0x08015e00
 80158e8:	08015e20 	.word	0x08015e20
 80158ec:	08015de0 	.word	0x08015de0
 80158f0:	08016244 	.word	0x08016244
 80158f4:	0801624e 	.word	0x0801624e
 80158f8:	080117f9 	.word	0x080117f9
 80158fc:	0801567f 	.word	0x0801567f
 8015900:	0801624a 	.word	0x0801624a

08015904 <__swbuf_r>:
 8015904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015906:	460e      	mov	r6, r1
 8015908:	4614      	mov	r4, r2
 801590a:	4605      	mov	r5, r0
 801590c:	b118      	cbz	r0, 8015916 <__swbuf_r+0x12>
 801590e:	6983      	ldr	r3, [r0, #24]
 8015910:	b90b      	cbnz	r3, 8015916 <__swbuf_r+0x12>
 8015912:	f7fb fd41 	bl	8011398 <__sinit>
 8015916:	4b21      	ldr	r3, [pc, #132]	; (801599c <__swbuf_r+0x98>)
 8015918:	429c      	cmp	r4, r3
 801591a:	d12b      	bne.n	8015974 <__swbuf_r+0x70>
 801591c:	686c      	ldr	r4, [r5, #4]
 801591e:	69a3      	ldr	r3, [r4, #24]
 8015920:	60a3      	str	r3, [r4, #8]
 8015922:	89a3      	ldrh	r3, [r4, #12]
 8015924:	071a      	lsls	r2, r3, #28
 8015926:	d52f      	bpl.n	8015988 <__swbuf_r+0x84>
 8015928:	6923      	ldr	r3, [r4, #16]
 801592a:	b36b      	cbz	r3, 8015988 <__swbuf_r+0x84>
 801592c:	6923      	ldr	r3, [r4, #16]
 801592e:	6820      	ldr	r0, [r4, #0]
 8015930:	b2f6      	uxtb	r6, r6
 8015932:	1ac0      	subs	r0, r0, r3
 8015934:	6963      	ldr	r3, [r4, #20]
 8015936:	4637      	mov	r7, r6
 8015938:	4283      	cmp	r3, r0
 801593a:	dc04      	bgt.n	8015946 <__swbuf_r+0x42>
 801593c:	4621      	mov	r1, r4
 801593e:	4628      	mov	r0, r5
 8015940:	f7fe fbda 	bl	80140f8 <_fflush_r>
 8015944:	bb30      	cbnz	r0, 8015994 <__swbuf_r+0x90>
 8015946:	68a3      	ldr	r3, [r4, #8]
 8015948:	3001      	adds	r0, #1
 801594a:	3b01      	subs	r3, #1
 801594c:	60a3      	str	r3, [r4, #8]
 801594e:	6823      	ldr	r3, [r4, #0]
 8015950:	1c5a      	adds	r2, r3, #1
 8015952:	6022      	str	r2, [r4, #0]
 8015954:	701e      	strb	r6, [r3, #0]
 8015956:	6963      	ldr	r3, [r4, #20]
 8015958:	4283      	cmp	r3, r0
 801595a:	d004      	beq.n	8015966 <__swbuf_r+0x62>
 801595c:	89a3      	ldrh	r3, [r4, #12]
 801595e:	07db      	lsls	r3, r3, #31
 8015960:	d506      	bpl.n	8015970 <__swbuf_r+0x6c>
 8015962:	2e0a      	cmp	r6, #10
 8015964:	d104      	bne.n	8015970 <__swbuf_r+0x6c>
 8015966:	4621      	mov	r1, r4
 8015968:	4628      	mov	r0, r5
 801596a:	f7fe fbc5 	bl	80140f8 <_fflush_r>
 801596e:	b988      	cbnz	r0, 8015994 <__swbuf_r+0x90>
 8015970:	4638      	mov	r0, r7
 8015972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015974:	4b0a      	ldr	r3, [pc, #40]	; (80159a0 <__swbuf_r+0x9c>)
 8015976:	429c      	cmp	r4, r3
 8015978:	d101      	bne.n	801597e <__swbuf_r+0x7a>
 801597a:	68ac      	ldr	r4, [r5, #8]
 801597c:	e7cf      	b.n	801591e <__swbuf_r+0x1a>
 801597e:	4b09      	ldr	r3, [pc, #36]	; (80159a4 <__swbuf_r+0xa0>)
 8015980:	429c      	cmp	r4, r3
 8015982:	bf08      	it	eq
 8015984:	68ec      	ldreq	r4, [r5, #12]
 8015986:	e7ca      	b.n	801591e <__swbuf_r+0x1a>
 8015988:	4621      	mov	r1, r4
 801598a:	4628      	mov	r0, r5
 801598c:	f000 f80c 	bl	80159a8 <__swsetup_r>
 8015990:	2800      	cmp	r0, #0
 8015992:	d0cb      	beq.n	801592c <__swbuf_r+0x28>
 8015994:	f04f 37ff 	mov.w	r7, #4294967295
 8015998:	e7ea      	b.n	8015970 <__swbuf_r+0x6c>
 801599a:	bf00      	nop
 801599c:	08015e00 	.word	0x08015e00
 80159a0:	08015e20 	.word	0x08015e20
 80159a4:	08015de0 	.word	0x08015de0

080159a8 <__swsetup_r>:
 80159a8:	4b32      	ldr	r3, [pc, #200]	; (8015a74 <__swsetup_r+0xcc>)
 80159aa:	b570      	push	{r4, r5, r6, lr}
 80159ac:	681d      	ldr	r5, [r3, #0]
 80159ae:	4606      	mov	r6, r0
 80159b0:	460c      	mov	r4, r1
 80159b2:	b125      	cbz	r5, 80159be <__swsetup_r+0x16>
 80159b4:	69ab      	ldr	r3, [r5, #24]
 80159b6:	b913      	cbnz	r3, 80159be <__swsetup_r+0x16>
 80159b8:	4628      	mov	r0, r5
 80159ba:	f7fb fced 	bl	8011398 <__sinit>
 80159be:	4b2e      	ldr	r3, [pc, #184]	; (8015a78 <__swsetup_r+0xd0>)
 80159c0:	429c      	cmp	r4, r3
 80159c2:	d10f      	bne.n	80159e4 <__swsetup_r+0x3c>
 80159c4:	686c      	ldr	r4, [r5, #4]
 80159c6:	89a3      	ldrh	r3, [r4, #12]
 80159c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80159cc:	0719      	lsls	r1, r3, #28
 80159ce:	d42c      	bmi.n	8015a2a <__swsetup_r+0x82>
 80159d0:	06dd      	lsls	r5, r3, #27
 80159d2:	d411      	bmi.n	80159f8 <__swsetup_r+0x50>
 80159d4:	2309      	movs	r3, #9
 80159d6:	6033      	str	r3, [r6, #0]
 80159d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80159dc:	f04f 30ff 	mov.w	r0, #4294967295
 80159e0:	81a3      	strh	r3, [r4, #12]
 80159e2:	e03e      	b.n	8015a62 <__swsetup_r+0xba>
 80159e4:	4b25      	ldr	r3, [pc, #148]	; (8015a7c <__swsetup_r+0xd4>)
 80159e6:	429c      	cmp	r4, r3
 80159e8:	d101      	bne.n	80159ee <__swsetup_r+0x46>
 80159ea:	68ac      	ldr	r4, [r5, #8]
 80159ec:	e7eb      	b.n	80159c6 <__swsetup_r+0x1e>
 80159ee:	4b24      	ldr	r3, [pc, #144]	; (8015a80 <__swsetup_r+0xd8>)
 80159f0:	429c      	cmp	r4, r3
 80159f2:	bf08      	it	eq
 80159f4:	68ec      	ldreq	r4, [r5, #12]
 80159f6:	e7e6      	b.n	80159c6 <__swsetup_r+0x1e>
 80159f8:	0758      	lsls	r0, r3, #29
 80159fa:	d512      	bpl.n	8015a22 <__swsetup_r+0x7a>
 80159fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80159fe:	b141      	cbz	r1, 8015a12 <__swsetup_r+0x6a>
 8015a00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a04:	4299      	cmp	r1, r3
 8015a06:	d002      	beq.n	8015a0e <__swsetup_r+0x66>
 8015a08:	4630      	mov	r0, r6
 8015a0a:	f7fb fdb1 	bl	8011570 <_free_r>
 8015a0e:	2300      	movs	r3, #0
 8015a10:	6363      	str	r3, [r4, #52]	; 0x34
 8015a12:	89a3      	ldrh	r3, [r4, #12]
 8015a14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015a18:	81a3      	strh	r3, [r4, #12]
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	6063      	str	r3, [r4, #4]
 8015a1e:	6923      	ldr	r3, [r4, #16]
 8015a20:	6023      	str	r3, [r4, #0]
 8015a22:	89a3      	ldrh	r3, [r4, #12]
 8015a24:	f043 0308 	orr.w	r3, r3, #8
 8015a28:	81a3      	strh	r3, [r4, #12]
 8015a2a:	6923      	ldr	r3, [r4, #16]
 8015a2c:	b94b      	cbnz	r3, 8015a42 <__swsetup_r+0x9a>
 8015a2e:	89a3      	ldrh	r3, [r4, #12]
 8015a30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a38:	d003      	beq.n	8015a42 <__swsetup_r+0x9a>
 8015a3a:	4621      	mov	r1, r4
 8015a3c:	4630      	mov	r0, r6
 8015a3e:	f000 f84d 	bl	8015adc <__smakebuf_r>
 8015a42:	89a0      	ldrh	r0, [r4, #12]
 8015a44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015a48:	f010 0301 	ands.w	r3, r0, #1
 8015a4c:	d00a      	beq.n	8015a64 <__swsetup_r+0xbc>
 8015a4e:	2300      	movs	r3, #0
 8015a50:	60a3      	str	r3, [r4, #8]
 8015a52:	6963      	ldr	r3, [r4, #20]
 8015a54:	425b      	negs	r3, r3
 8015a56:	61a3      	str	r3, [r4, #24]
 8015a58:	6923      	ldr	r3, [r4, #16]
 8015a5a:	b943      	cbnz	r3, 8015a6e <__swsetup_r+0xc6>
 8015a5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015a60:	d1ba      	bne.n	80159d8 <__swsetup_r+0x30>
 8015a62:	bd70      	pop	{r4, r5, r6, pc}
 8015a64:	0781      	lsls	r1, r0, #30
 8015a66:	bf58      	it	pl
 8015a68:	6963      	ldrpl	r3, [r4, #20]
 8015a6a:	60a3      	str	r3, [r4, #8]
 8015a6c:	e7f4      	b.n	8015a58 <__swsetup_r+0xb0>
 8015a6e:	2000      	movs	r0, #0
 8015a70:	e7f7      	b.n	8015a62 <__swsetup_r+0xba>
 8015a72:	bf00      	nop
 8015a74:	2000005c 	.word	0x2000005c
 8015a78:	08015e00 	.word	0x08015e00
 8015a7c:	08015e20 	.word	0x08015e20
 8015a80:	08015de0 	.word	0x08015de0

08015a84 <abort>:
 8015a84:	2006      	movs	r0, #6
 8015a86:	b508      	push	{r3, lr}
 8015a88:	f000 f898 	bl	8015bbc <raise>
 8015a8c:	2001      	movs	r0, #1
 8015a8e:	f7ed f9a4 	bl	8002dda <_exit>

08015a92 <__swhatbuf_r>:
 8015a92:	b570      	push	{r4, r5, r6, lr}
 8015a94:	460e      	mov	r6, r1
 8015a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a9a:	4614      	mov	r4, r2
 8015a9c:	2900      	cmp	r1, #0
 8015a9e:	461d      	mov	r5, r3
 8015aa0:	b096      	sub	sp, #88	; 0x58
 8015aa2:	da07      	bge.n	8015ab4 <__swhatbuf_r+0x22>
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	602b      	str	r3, [r5, #0]
 8015aa8:	89b3      	ldrh	r3, [r6, #12]
 8015aaa:	061a      	lsls	r2, r3, #24
 8015aac:	d410      	bmi.n	8015ad0 <__swhatbuf_r+0x3e>
 8015aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015ab2:	e00e      	b.n	8015ad2 <__swhatbuf_r+0x40>
 8015ab4:	466a      	mov	r2, sp
 8015ab6:	f000 f89d 	bl	8015bf4 <_fstat_r>
 8015aba:	2800      	cmp	r0, #0
 8015abc:	dbf2      	blt.n	8015aa4 <__swhatbuf_r+0x12>
 8015abe:	9a01      	ldr	r2, [sp, #4]
 8015ac0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015ac4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015ac8:	425a      	negs	r2, r3
 8015aca:	415a      	adcs	r2, r3
 8015acc:	602a      	str	r2, [r5, #0]
 8015ace:	e7ee      	b.n	8015aae <__swhatbuf_r+0x1c>
 8015ad0:	2340      	movs	r3, #64	; 0x40
 8015ad2:	2000      	movs	r0, #0
 8015ad4:	6023      	str	r3, [r4, #0]
 8015ad6:	b016      	add	sp, #88	; 0x58
 8015ad8:	bd70      	pop	{r4, r5, r6, pc}
	...

08015adc <__smakebuf_r>:
 8015adc:	898b      	ldrh	r3, [r1, #12]
 8015ade:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015ae0:	079d      	lsls	r5, r3, #30
 8015ae2:	4606      	mov	r6, r0
 8015ae4:	460c      	mov	r4, r1
 8015ae6:	d507      	bpl.n	8015af8 <__smakebuf_r+0x1c>
 8015ae8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015aec:	6023      	str	r3, [r4, #0]
 8015aee:	6123      	str	r3, [r4, #16]
 8015af0:	2301      	movs	r3, #1
 8015af2:	6163      	str	r3, [r4, #20]
 8015af4:	b002      	add	sp, #8
 8015af6:	bd70      	pop	{r4, r5, r6, pc}
 8015af8:	466a      	mov	r2, sp
 8015afa:	ab01      	add	r3, sp, #4
 8015afc:	f7ff ffc9 	bl	8015a92 <__swhatbuf_r>
 8015b00:	9900      	ldr	r1, [sp, #0]
 8015b02:	4605      	mov	r5, r0
 8015b04:	4630      	mov	r0, r6
 8015b06:	f7fb fd7f 	bl	8011608 <_malloc_r>
 8015b0a:	b948      	cbnz	r0, 8015b20 <__smakebuf_r+0x44>
 8015b0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b10:	059a      	lsls	r2, r3, #22
 8015b12:	d4ef      	bmi.n	8015af4 <__smakebuf_r+0x18>
 8015b14:	f023 0303 	bic.w	r3, r3, #3
 8015b18:	f043 0302 	orr.w	r3, r3, #2
 8015b1c:	81a3      	strh	r3, [r4, #12]
 8015b1e:	e7e3      	b.n	8015ae8 <__smakebuf_r+0xc>
 8015b20:	4b0d      	ldr	r3, [pc, #52]	; (8015b58 <__smakebuf_r+0x7c>)
 8015b22:	62b3      	str	r3, [r6, #40]	; 0x28
 8015b24:	89a3      	ldrh	r3, [r4, #12]
 8015b26:	6020      	str	r0, [r4, #0]
 8015b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b2c:	81a3      	strh	r3, [r4, #12]
 8015b2e:	9b00      	ldr	r3, [sp, #0]
 8015b30:	6120      	str	r0, [r4, #16]
 8015b32:	6163      	str	r3, [r4, #20]
 8015b34:	9b01      	ldr	r3, [sp, #4]
 8015b36:	b15b      	cbz	r3, 8015b50 <__smakebuf_r+0x74>
 8015b38:	4630      	mov	r0, r6
 8015b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b3e:	f000 f86b 	bl	8015c18 <_isatty_r>
 8015b42:	b128      	cbz	r0, 8015b50 <__smakebuf_r+0x74>
 8015b44:	89a3      	ldrh	r3, [r4, #12]
 8015b46:	f023 0303 	bic.w	r3, r3, #3
 8015b4a:	f043 0301 	orr.w	r3, r3, #1
 8015b4e:	81a3      	strh	r3, [r4, #12]
 8015b50:	89a0      	ldrh	r0, [r4, #12]
 8015b52:	4305      	orrs	r5, r0
 8015b54:	81a5      	strh	r5, [r4, #12]
 8015b56:	e7cd      	b.n	8015af4 <__smakebuf_r+0x18>
 8015b58:	08011331 	.word	0x08011331

08015b5c <_malloc_usable_size_r>:
 8015b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015b60:	1f18      	subs	r0, r3, #4
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	bfbc      	itt	lt
 8015b66:	580b      	ldrlt	r3, [r1, r0]
 8015b68:	18c0      	addlt	r0, r0, r3
 8015b6a:	4770      	bx	lr

08015b6c <_raise_r>:
 8015b6c:	291f      	cmp	r1, #31
 8015b6e:	b538      	push	{r3, r4, r5, lr}
 8015b70:	4604      	mov	r4, r0
 8015b72:	460d      	mov	r5, r1
 8015b74:	d904      	bls.n	8015b80 <_raise_r+0x14>
 8015b76:	2316      	movs	r3, #22
 8015b78:	6003      	str	r3, [r0, #0]
 8015b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8015b7e:	bd38      	pop	{r3, r4, r5, pc}
 8015b80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015b82:	b112      	cbz	r2, 8015b8a <_raise_r+0x1e>
 8015b84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015b88:	b94b      	cbnz	r3, 8015b9e <_raise_r+0x32>
 8015b8a:	4620      	mov	r0, r4
 8015b8c:	f000 f830 	bl	8015bf0 <_getpid_r>
 8015b90:	462a      	mov	r2, r5
 8015b92:	4601      	mov	r1, r0
 8015b94:	4620      	mov	r0, r4
 8015b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b9a:	f000 b817 	b.w	8015bcc <_kill_r>
 8015b9e:	2b01      	cmp	r3, #1
 8015ba0:	d00a      	beq.n	8015bb8 <_raise_r+0x4c>
 8015ba2:	1c59      	adds	r1, r3, #1
 8015ba4:	d103      	bne.n	8015bae <_raise_r+0x42>
 8015ba6:	2316      	movs	r3, #22
 8015ba8:	6003      	str	r3, [r0, #0]
 8015baa:	2001      	movs	r0, #1
 8015bac:	e7e7      	b.n	8015b7e <_raise_r+0x12>
 8015bae:	2400      	movs	r4, #0
 8015bb0:	4628      	mov	r0, r5
 8015bb2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015bb6:	4798      	blx	r3
 8015bb8:	2000      	movs	r0, #0
 8015bba:	e7e0      	b.n	8015b7e <_raise_r+0x12>

08015bbc <raise>:
 8015bbc:	4b02      	ldr	r3, [pc, #8]	; (8015bc8 <raise+0xc>)
 8015bbe:	4601      	mov	r1, r0
 8015bc0:	6818      	ldr	r0, [r3, #0]
 8015bc2:	f7ff bfd3 	b.w	8015b6c <_raise_r>
 8015bc6:	bf00      	nop
 8015bc8:	2000005c 	.word	0x2000005c

08015bcc <_kill_r>:
 8015bcc:	b538      	push	{r3, r4, r5, lr}
 8015bce:	2300      	movs	r3, #0
 8015bd0:	4d06      	ldr	r5, [pc, #24]	; (8015bec <_kill_r+0x20>)
 8015bd2:	4604      	mov	r4, r0
 8015bd4:	4608      	mov	r0, r1
 8015bd6:	4611      	mov	r1, r2
 8015bd8:	602b      	str	r3, [r5, #0]
 8015bda:	f7ed f8ee 	bl	8002dba <_kill>
 8015bde:	1c43      	adds	r3, r0, #1
 8015be0:	d102      	bne.n	8015be8 <_kill_r+0x1c>
 8015be2:	682b      	ldr	r3, [r5, #0]
 8015be4:	b103      	cbz	r3, 8015be8 <_kill_r+0x1c>
 8015be6:	6023      	str	r3, [r4, #0]
 8015be8:	bd38      	pop	{r3, r4, r5, pc}
 8015bea:	bf00      	nop
 8015bec:	2000b3a8 	.word	0x2000b3a8

08015bf0 <_getpid_r>:
 8015bf0:	f7ed b8dc 	b.w	8002dac <_getpid>

08015bf4 <_fstat_r>:
 8015bf4:	b538      	push	{r3, r4, r5, lr}
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	4d06      	ldr	r5, [pc, #24]	; (8015c14 <_fstat_r+0x20>)
 8015bfa:	4604      	mov	r4, r0
 8015bfc:	4608      	mov	r0, r1
 8015bfe:	4611      	mov	r1, r2
 8015c00:	602b      	str	r3, [r5, #0]
 8015c02:	f7ed f938 	bl	8002e76 <_fstat>
 8015c06:	1c43      	adds	r3, r0, #1
 8015c08:	d102      	bne.n	8015c10 <_fstat_r+0x1c>
 8015c0a:	682b      	ldr	r3, [r5, #0]
 8015c0c:	b103      	cbz	r3, 8015c10 <_fstat_r+0x1c>
 8015c0e:	6023      	str	r3, [r4, #0]
 8015c10:	bd38      	pop	{r3, r4, r5, pc}
 8015c12:	bf00      	nop
 8015c14:	2000b3a8 	.word	0x2000b3a8

08015c18 <_isatty_r>:
 8015c18:	b538      	push	{r3, r4, r5, lr}
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	4d05      	ldr	r5, [pc, #20]	; (8015c34 <_isatty_r+0x1c>)
 8015c1e:	4604      	mov	r4, r0
 8015c20:	4608      	mov	r0, r1
 8015c22:	602b      	str	r3, [r5, #0]
 8015c24:	f7ed f936 	bl	8002e94 <_isatty>
 8015c28:	1c43      	adds	r3, r0, #1
 8015c2a:	d102      	bne.n	8015c32 <_isatty_r+0x1a>
 8015c2c:	682b      	ldr	r3, [r5, #0]
 8015c2e:	b103      	cbz	r3, 8015c32 <_isatty_r+0x1a>
 8015c30:	6023      	str	r3, [r4, #0]
 8015c32:	bd38      	pop	{r3, r4, r5, pc}
 8015c34:	2000b3a8 	.word	0x2000b3a8

08015c38 <_init>:
 8015c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c3a:	bf00      	nop
 8015c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c3e:	bc08      	pop	{r3}
 8015c40:	469e      	mov	lr, r3
 8015c42:	4770      	bx	lr

08015c44 <_fini>:
 8015c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c46:	bf00      	nop
 8015c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c4a:	bc08      	pop	{r3}
 8015c4c:	469e      	mov	lr, r3
 8015c4e:	4770      	bx	lr
